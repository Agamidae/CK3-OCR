window = {
	name = "ingame_pausemenu"
	parentanchor = center
	movable = no
	size = { 100% 105% }
	layer = frontend
	filter_mouse = all

	background = {
		using = Background_Area_Dark
		margin = { 20 20 }
		# alpha = 0.7
	}

	background = {
		texture = "gfx/interface/illustrations/frontend/pause_bg.dds"

		modify_texture = {
			texture = "gfx/interface/frontend/fade_bg_ingame_menu.dds"
			blend_mode = alphamultiply
		}
	}

	state = {
		name = _show
		using = Animation_FadeIn_Quick

		position = { 0 0 }

		start_sound = {
			soundeffect = "snapshot:/States/MainMenu"
		}

		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		start_sound = { soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_tab"}
		position_y = 10
	}

	widget = {
		size = { 100% 100% }
		scale = "[ScaleToFitElementOutside('(int32)1920', '(int32)1080')]"
		parentanchor = left|vcenter

		@button_height = 58


		widget = {
			parentanchor = vcenter
			position = { 172 -50 }

			vbox = {
				set_parent_size_to_minimum = yes

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "In-game menu."
				}

				vbox = {
					# spacing = 10
					layoutpolicy_horizontal = expanding

					text_single = {
						background = { using = Background_Area_Border_Solid }
						margin_left = 5
						layoutpolicy_horizontal = expanding
						name = "player_observer_indication"
						visible = "[And(GetPlayer.IsValid, IsObserver)]"
						raw_text = "Observing as [GetPlayer.GetShortUINameNotMeNoTooltip]."
					}

					spacer = {
						size = { 30 15 }
					}

					flowcontainer = {
					    direction = vertical
						layoutpolicy_horizontal = expanding

					    ignoreinvisible = yes

						button_text = {
							blockoverride "text" {
								raw_text = "Observe as [Character.GetFirstNameNoTooltip]. Click this with Control F."
							}
							onclick = "[DefaultOnCharacterClick( Character.GetID)]"
							visible = "[And(And(GetGlobalVariable('player').IsSet, IsObserver), Not(GetPlayer.IsValid))]"
							datacontext = "[GetGlobalVariable('player').GetCharacter]"
						}

						button_text = {
							visible = "[And(IsObserver, GetPlayer.IsValid)]"
							blockoverride "text" {
								raw_text = "Exit observer mode."
							}

							onclick = "[ExecuteConsoleCommand('ob')]"
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
					    blockoverride "text" {
							text = "RESUME"
					    }
						blockoverride "extra" {
							text_single = {
								raw_text = ", hotkey Escape."
								align = left
							}
						}

						shortcut = "close_window"
						onclick = "[PauseMenu.Resume]"
					}

					vbox = {
						visible = "[GameHasMultiplePlayers]"
						spacing = 5

						background = {
							using = Background_Area_With_Header
							margin_bottom = 5
						}

						text_single = {
							margin = { 10 10 }
							layoutpolicy_horizontal = expanding
							text = "MULTI_PLAYER"
						}

						text_single = {
							visible = "[Not(IsGamePaused)]"
							text = "FRONTEND_NOT_PAUSED"
						}

						text_single = {
							visible = "[IsGamePaused]"
							text = "FRONTEND_IS_PAUSED"
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							margin_left = 10
							text = "FRONTEND_PLAYERS_COUNT"
						}

						button_text = {
						    blockoverride "text" {
								text = "FRONTEND_GOTO_LOBBY"
						    }
							blockoverride "dot_nb" {
							}
							onclick = "[PauseMenu.OpenLobby]"
						}

						spacer = {
							size = { 10 10 }
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							maximumsize = { 275 -1 }

							text_multi = {
								layoutpolicy_horizontal = expanding
								max_width = 275
								min_width = 275
								margin = { 0 5 }
								autoresize = yes
								text = "FRONTEND_INVITE"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
							    blockoverride "text" {
							        raw_text = "Copy server ID."
							    }
								onclick = "[CopyServerID]"
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						hbox = {
							visible = "[IsIronmanEnabled]"

							ironman_save_icon = { }

							vbox = {
								spacing = 5
								text_label_center = {
									text = IRONMAN_ENABLED
									default_format = "#low"
									using = Font_Size_Medium
								}
								text_multi = {
									max_width = 290
									min_width = 290
									autoresize = yes
									text = "IRONMAN_PAUSE_MENU_EXPLANATION"
									using = Font_Size_Small
								}
							}
						}

						vbox = {
							spacing = 4
							layoutpolicy_horizontal = expanding

							button_text = {
								layoutpolicy_horizontal = expanding
							    blockoverride "text" {
									text = "SAVE_GAME"
							    }
								blockoverride "extra" {
									text_single = {
										raw_text = ", hotkey 1"
										align = left
									}
								}
								shortcut = speed_1
								blockoverride "dot_nb" { }
								visible = "[Not( IsIronmanEnabled )]"
								onclick = "[PauseMenu.Save]"
							}

							button_text_cant = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									text = "LOAD_GAME"
								}
								blockoverride "disabled" {
									visible = "[Not(PauseMenu.CanLoadIngame)]"
								}
								blockoverride "extra" {
									text_single = {
										raw_text = ", hotkey 2"
										align = left
									}
								}
								shortcut = speed_2
								blockoverride "dot_nb" { }
								visible = "[Not( GameHasMultiplePlayers )]"
								enabled = "[PauseMenu.CanLoadIngame]"
								onclick = "[PauseMenu.LoadIngame]"
								tooltip = "[PauseMenu.LoadIngameTooltip]"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								onclick = "[PauseMenu.OpenSettings]"
								blockoverride "text" {
									text = "SETTINGS"
								}
								blockoverride "extra" {
									text_single = {
										raw_text = ", hotkey 3."
										align = left
									}
								}
								shortcut = speed_3
							}

							button_text = {
								layoutpolicy_horizontal = expanding
							    blockoverride "text" {
									raw_text = "[PauseMenu.GetExitName], Alt F4."
							    }
								onclick = "[PauseMenu.ExitGame( '(bool)yes' )]"
							}
						}
					}


					widget = {
						size = { 0 15 }
					}


					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							text = "OPEN_LOBBY"
						}
						blockoverride "dot_nb" { }
						onclick = "[PauseMenu.OpenLobby]"
						visible = "[Not( Or( Or( Or( PauseMenu.IsLobbyOpen, IsIronmanEnabled ), GameIsMultiplayer ), Not( CanOpenLobby ) ) )]"
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							text = "OPEN_LOBBY"
						}
						blockoverride "extra" {
							text_single = {
								align = left
								raw_text = ", you need to log in."
							}
						}
						onclick = "[OnToggleLoginWindow]"
						visible = "[Not( Or( Or( Or( PauseMenu.IsLobbyOpen, IsIronmanEnabled ), GameIsMultiplayer ), CanOpenLobby ) )]"
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							text = "FRONTEND_SWITCH_CHARACTER"
						}
						blockoverride "dot_nb" { }
						onclick = "[PauseMenu.SwitchCharacter]"
						visible = "[Not( Or( Or( PauseMenu.IsLobbyOpen, IsIronmanEnabled ), GameHasMultiplePlayers ) )]"
					}

					button_text = {

						layoutpolicy_horizontal = expanding
						visible = "[Not(IsObserver)]"
						blockoverride "text" {
							margin_left = 10
							raw_text = "Switch to observer mode."
						}
						# onclick = "[GetVariableSystem.Set('player', GetPlayer.GetID)]"
						onclick = "[ExecuteConsoleCommand('effect set_global_variable = { name = player value = root }')]"
						onclick = "[PdxGuiWidget.TriggerAnimation('next')]"

						state = {
							name = next
							duration = 0.1
							next = b
							alpha = 1
						}
						state = {
							alpha = 1
							name = b
							on_finish = "[ExecuteConsoleCommand('ob')]"
						}
					}

					flowcontainer = {
						margin_top = 15
						margin = { 10 0 }
						spacing = 2
						layoutpolicy_horizontal = expanding

						direction = vertical
						# spacing = 50

						button_text = {
							blockoverride "dot_nb" { }
							onclick = "[OnToggleLoginWindow]"
							blockoverride "text" {
								text = "ACCOUNT"
							}
						}

						button_text = {
							blockoverride "dot_nb" { }
							onclick = "[OpenAchievements]"
							visible = "[AreAchievementsAvailable]"
							blockoverride "text" {
								text = "ACHIEVEMENTS_LABEL"
							}
						}
						button_text = {
							blockoverride "dot_nb" { }
							onclick = "[OpenGameRules]"
							blockoverride "text" {
								text = "GAME_RULES"
							}
						}
					}
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Mod settings:"
					margin = { 0 10 }
				}

				flowcontainer = {
					margin = { 10 0 }
					direction = vertical
					layoutpolicy_horizontal = expanding
					# parentanchor = hcenter|vcenter
					# position = { 210 90 }
					background = { using = Background_Area_Dark }

					spacing = 10

					@height = 30

					button_text = {
						blockoverride "text" {
							raw_text = "Better performance, [Select_CString(GetVariableSystem.Exists('hide_map'), 'Enabled', 'Disabled')]"
						}
						onclick = "[GetVariableSystem.Toggle('hide_map')]"
					}
					text_single = {
						margin_left = 3
						raw_text = "This completely hides the map,"
					}
					text_single = {
						margin_left = 3
						raw_text = "and blocks warnings about incoming battles."
					}

					button_text = {
						blockoverride "text" {
							raw_text = "Daily tick sound [AddTextIf(GetVariableSystem.Exists('daily_sound'), 'Disabled.')][AddTextIf(Not(GetVariableSystem.Exists('daily_sound')), 'Enabled.')]"
						}
						down = "[Not(GetVariableSystem.Exists('daily_sound'))]"
						onclick = "[GetVariableSystem.Toggle('daily_sound')]"
					}

					button_text = {
						blockoverride "text" {
							raw_text = "Tick sound [AddTextIf(GetVariableSystem.Exists('daily_sound_loud'), 'Loud.')][AddTextIf(Not(GetVariableSystem.Exists('daily_sound_loud')), 'Quiet.')]"
						}
						down = "[Not(GetVariableSystem.Exists('daily_sound_loud'))]"
						onclick = "[GetVariableSystem.Toggle('daily_sound_loud')]"
					}

					button_text = {
						blockoverride "text" {
							raw_text = "Monthly tick [AddTextIf(GetVariableSystem.Exists('monthly_sound'), 'Disabled.')][AddTextIf(Not(GetVariableSystem.Exists('monthly_sound')), 'Enabled.')]"
						}
						down = "[Not(GetVariableSystem.Exists('monthly_sound'))]"
						onclick = "[GetVariableSystem.Toggle('monthly_sound')]"
					}

					button_text = {
						blockoverride "text" {
							raw_text = "Text view [AddTextIf(GetVariableSystem.Exists('ocr'), 'Disabled')][AddTextIf(Not(GetVariableSystem.Exists('ocr')), 'Enabled')], hotkey Shift F 11."
						}
						down = "[Not(GetVariableSystem.Exists('ocr'))]"
						onclick = "[GetVariableSystem.Toggle('ocr')]"
					}

					button_text = {
						blockoverride "text" {
							raw_text = "Tooltip focus [AddTextIf(GetVariableSystem.Exists('tooltip_focus'), 'Disabled.')][AddTextIf(Not(GetVariableSystem.Exists('tooltip_focus')), 'Enabled.')]"
						}
						down = "[Not(GetVariableSystem.Exists('tooltip_focus'))]"

						onclick = "[GetVariableSystem.Toggle('tooltip_focus')]"
					}

					button_text = {
						visible = "[GetPlayer.IsValid]"

						blockoverride "text" {
							raw_text = "Interactions close character,"
						}
						blockoverride "extra" {
							text_single = {
								raw_text = " Enabled."
								visible = "[GetScriptedGui('close_interactions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
								align = left
							}
							text_single = {
								raw_text = " Disabled."
								visible = "[Not(GetScriptedGui('close_interactions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ))]"
								align = left
							}
						}

						onclick = "[GetScriptedGui('close_interactions').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					}

					button_text = {
						blockoverride "text" {
							raw_text = "Map tooltips [Select_CString(Not(GetVariableSystem.Exists('hide_tooltips')), 'Hidden', 'Visible')]."
						}
						down = "[GetVariableSystem.Exists('hide_tooltips')]"

						onclick = "[GetVariableSystem.Toggle('hide_tooltips')]"
					}

					button_text = {
						blockoverride "text" {
							raw_text = "Numbered character lists[Select_CString(Not(GetVariableSystem.Exists('index')), ', Disabled.', ', Enabled.')]"
						}
						down = "[GetVariableSystem.Exists('index')]"

						onclick = "[GetVariableSystem.Toggle('index')]"
					}
				}
				spacer = {
					size = { 30 15 }
				}
			}
		}

		hotkeys_window = { }

		clickable_version_number = {
			parentanchor = bottom|right
			position = { -20 -40 }
			blockoverride "version_text" {
				text = "VERSION_SHORT"
				align = center
			}
		}
	}
}

window = {
	name = "ingame_load_ingame"
	movable = no
	layer = confirmation
	size = { 100% 100% }

	using = Animation_ShowHide_Quick
	using = Background_Full_Dim

	button_normal = {
		size = { 100% 100% }
		onclick = "[LoadIngameWindow.OnBack]"
	}

	widget_load_game = {
		parentanchor = center
		size = { 1030 100% }

		blockoverride "datamodel_savegames"
		{
			datamodel = "[LoadIngameWindow.GetSaveGames]"
		}

		blockoverride "invalid_saves_click"
		{
			onclick = "[LoadIngameWindow.OnShowInvalidSavegames]"
		}

		blockoverride "invalid_saves_checked"
		{
			visible = "[Not(LoadIngameWindow.ShouldShowInvalidSavegames)]"
		}

		blockoverride "button_back"
		{
			onclick = "[LoadIngameWindow.OnBack]"
		}

		blockoverride "selected_save"
		{
			datacontext = "[LoadIngameWindow.GetSelectedSavegame]"
			visible = "[LoadIngameWindow.HasSelectedSavegame]"
		}

		blockoverride "button_delete_save"
		{
			onclick = "[LoadIngameWindow.OnDelete]"
		}

		blockoverride "button_load_save"
		{
			onclick = "[LoadIngameWindow.OnLoad]"
		}
		blockoverride "layout_widget"
		{
			visible = "[Not(LoadIngameWindow.HasSelectedSavegame)]"
		}
	}
}

Types SaveGameTypes
{
	type cloud_save_checkbutton = button_checkbox
	{
		name = "cloud_save" # Name referenced from code
		checked = "[CloudSaveData.ShouldSaveToCloud]"
		tooltip = "[CloudSaveData.GetCloudSaveTooltip]"
		onclick = "[CloudSaveData.OnCloudSaveClick]"
		enabled = "[CloudSaveData.AreCloudSavesAvailable]"
	}
}