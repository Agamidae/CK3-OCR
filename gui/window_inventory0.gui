types OCR_inventory_types {
	type old_inventory = window {
		size = { 1222 840 }
		layer = middle

		position = { 620 100 }

		using = Window_Movable
		using = Window_Background
		using = Window_Decoration_Spike

		datacontext = "[GetVariableSystem]"
		datacontext = "[InventoryView.GetCharacter]"
		datacontext = "[InventoryView.GetCharacter.GetInventory]"

		state = {
			name = _show
			using = Animation_FadeIn_Standard
			on_start = "[GetVariableSystem.Clear( 'court_artifacts' )]"
			on_start = "[GetVariableSystem.Clear( 'claims' )]"
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Standard
			on_finish = "[AccessLocalPlayerCachedData.AccessNewArtifacts.ClearNewArtifactsOfCategory( 'inventory' )]"
		}

		vbox = {
			using = Window_Margins

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "INVENTORY_TITLE"
				}

				blockoverride "button_close"
				{
					onclick = "[InventoryView.Close]"
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				###LEFT SIDE
				widget = {
					name = "left side"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					size = { 510 0 }

					background = {
						texture = "gfx/interface/icons/inventory/character_paperdoll.dds"
						fittype = centercrop
						alpha = 0.6
						margin_bottom = -100
						margin_left = -10
						margin_right = -10
						margin_top = 20
					}

					widget = {
						name = "equipped_inventory_artifacts_top_bar"
						layoutpolicy_horizontal = expanding
						position = { 150 0 }
						allow_outside = yes

						text_label_center = {
							datacontext = "[InventoryView.GetCharacter]"
							layoutpolicy_horizontal = expanding
							align = center|nobaseline
							text = "INVENTORY_EQUIPPED_ARTIFACTS_HEADER"
							margin = { 0 2 }
						}
					}

					widget = {
						name = "antiquarian"
						position = { 20 0 }
						allow_outside = yes

						vbox = {
							parentanchor = top
							alwaystransparent = yes

							portrait_head_small = {
								name = "antiquarian_portrait"
								datacontext = "[InventoryView.GetCharacter.GetCharacterEmployedAs( 'antiquarian_court_position' )]"

								blockoverride "portrait_button"
								{
									onclick = "[ShowAppointCourtPositionIfNoEmployee( InventoryView.GetCharacter.GetID, 'antiquarian_court_position' )]"
									enabled = "[InventoryView.GetCharacter.IsLocalPlayer]"
								}
								blockoverride "portrait_button_no_character_text"
								{
									text = "[SelectLocalization( InventoryView.GetCharacter.IsLocalPlayer,'PORTRAIT_NO_ANTIQUARIAN','CHARACTER_TOOLTIP_NO_PORTRAIT')]"
								}
							}

							text_single = {
								text = "ANTIQUARIAN"
							}
						}
					}

					widget_inventory_slot = {
						name = "head_slot"
						datacontext = "[Inventory.GetSlot('crown')]"
						parentanchor = top|hcenter
						position = { 0 40 }
					}

					widget_inventory_slot = {
						name = "regalia_slot"
						datacontext = "[Inventory.GetSlot('regalia')]"
						parentanchor = vcenter|right
						position = { 0 -50 }
					}

					widget_inventory_slot = {
						name = "weapon_slot"
						datacontext = "[Inventory.GetSlot('weapon')]"
						parentanchor = vcenter|left
						position = { 0 -50 }
					}

					widget_inventory_slot = {
						name = "armor_slot"
						datacontext = "[Inventory.GetSlot('armor')]"
						parentanchor = center
						position = { 0 -50 }
					}

					widget = {
						name = "trinket_widget_hight"
						parentanchor = bottom|hcenter
						position = { 0 -120 }
						allow_outside = yes

						widget_inventory_slot = {
							name = "trinket_1_slot"
							datacontext = "[Inventory.GetSlot('trinket_1')]"
							parentanchor = bottom|hcenter
							position = { -185 0 }
						}

						widget_inventory_slot = {
							name = "trinket_2_slot"
							datacontext = "[Inventory.GetSlot('trinket_2')]"
							parentanchor = bottom|hcenter
							position = { -62 0 }
						}

						widget_inventory_slot = {
							name = "trinket_3_slot"
							datacontext = "[Inventory.GetSlot('trinket_3')]"
							parentanchor = bottom|hcenter
							position = { 62 0 }
						}

						widget_inventory_slot = {
							name = "trinket_4_slot"
							datacontext = "[Inventory.GetSlot('trinket_4')]"
							parentanchor = bottom|hcenter
							position = { 185 0 }
						}
					}

					widget = {
						parentanchor = bottom|hcenter
						position = { 0 -12 }
						size = { 510 100 }
						allow_outside = yes

						vbox = {
							hbox = {
								spacing = 10

								button_standard = {
									datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"
									visible = "[Not( Character.HasRoyalCourt )]"
									text = "INVENTORY_TAB_COURT_ARTIFACTS"

									tooltip = "[SelectLocalization( Inventory.HasAnyCourtArtifact, 'INVENTORY_TAB_COURT_ARTIFACTS_TOOLTIP', 'NO_COURT_ARTIFACTS' )]"

									onclick = "[VariableSystem.Toggle( 'court_artifacts' )]"
									onclick = "[VariableSystem.Clear( 'claims' )]"
									onclick = "[InventoryView.ClearSelectedSlot]"
									onclick = "[LocalPlayerNewArtifacts.ClearNewArtifactsOfCategory( 'court' )]"

									down = "[VariableSystem.Exists( 'court_artifacts' )]"

									button_round = {
										size = { 20 20 }
										parentanchor = top|right
										visible = "[GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' ), '(int32)0' )]"
										text = "[LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' )]"
									}
								}

								button_standard = {
									datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"
									visible = "[Character.HasRoyalCourt]"
									text = "ROYAL_COURT"

									tooltip = "INVENTORY_COURT_ARTIFACTS_BUTTON_TOOLTIP"

									onclick = "[VariableSystem.Set( 'artifacts_tab', 'artifacts' )]"
									onclick = "[Character.OpenRoyalCourtView( 'artifacts' )]"

									onclick = "[InventoryView.Close]"
									onclick = "[LocalPlayerNewArtifacts.ClearNewArtifactsOfCategory( 'court' )]"

									button_round = {
										visible = "[GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' ), '(int32)0' )]"
										parentanchor = vcenter|right
										size = { 20 20 }
										position = { -5 0 }
										text = "[LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' )]"
									}
								}

								button_standard = {
									datacontext = "[InventoryView.GetArtifactClaimsList]"
									text = "INVENTORY_TAB_CLAIMS_HIS_HER_MY"
									enabled = "[And( DataModelHasItems( ArtifactClaimsList.GetClaims ), Not( InventoryView.HasSelectedSlot ) )]"
									tooltip = "[SelectLocalization( DataModelHasItems( ArtifactClaimsList.GetClaims ), 'INVENTORY_TAB_CLAIMS_TOOLTIP', 'NO_ARTIFACT_CLAIMS' )]"
									onclick = "[VariableSystem.Toggle( 'claims' )]"
									onclick = "[VariableSystem.Clear( 'court_artifacts' )]"
									down = "[VariableSystem.Exists( 'claims' )]"
								}
							}

							button_decision_entry = {
								name = "commission_decision"
								datacontext = "[GetDecisionWithKey('commission_artifact_decision')]"
								visible = "[And( Character.IsLocalPlayer, Decision.IsShownForPlayer )]"
								size = { 350 45 }
								onclick = "[InventoryView.Close]"
								onclick = "[OpenDecisionDetailView( Decision.Self )]"
							}
						}
					}
				}

				divider = {
					layoutpolicy_vertical = expanding
				}

				# right side is other artifacts and claims
				vbox = {
					name = "right_side"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					minimumsize = { 552 -1 }
					margin_left = -2

					vbox = {
						name = "equip_artifacts_top_bar"
						visible = "[And( Not( VariableSystem.Exists( 'claims' ) ), Not( VariableSystem.Exists( 'court_artifacts' ) ) )]"
						layoutpolicy_horizontal = expanding
						margin_bottom = 5

						text_label_center = {
							layoutpolicy_horizontal = expanding
							align = center|nobaseline
							text = "SELECT_ARTIFACT"
							margin = { 0 2 }
							max_width = 440
						}

						hbox = {
							name = "artifact_slot_tabs"
							visible = "[And( Not( VariableSystem.Exists( 'claims' ) ), Not( VariableSystem.Exists( 'court_artifacts' ) ) )]"
							datamodel = "[InventoryView.GetUniqueInventorySlotTypes]"
							margin_top = 10
							margin_left = -6

							button_tab = { # Show all artifacts tab
								size = { 110 42 }

								tooltip = ARTIFACT_SORTING_TAB_ALL_TOOLTIP
								onclick = "[InventoryView.ClearSelectedSlot]"
								down = "[Not( InventoryView.HasSelectedSlot )]"
								using = tooltip_above

								hbox = {
									margin = { 10 0 }

									text_single = {
										layoutpolicy_horizontal = expanding
										align = center
										text = "ARTIFACT_SORTING_ALL_BUTTON"
									}

									text_single = {
										min_width = 30
										align = center
										text = "[Inventory.GetNumOfArtifactInCategory( 'inventory' )]"
									}
								}
							}

							item = {
								widget_inventory_slot_tab = {
									name = "artifact_slot_type"
									visible = "[InventorySlotType.IsInventoryType]"
									datacontext = "[Inventory.GetSlot('crown')]"
								}
							}
						}
					}

					vbox = {
						name = "court_artifacts_top_bar"
						visible = "[And( Not( InventoryView.HasSelectedSlot ), VariableSystem.Exists( 'court_artifacts' ) )]"
						layoutpolicy_horizontal = expanding
						margin = { 20 0 }
						spacing = 5

						text_label_center = {
							layoutpolicy_horizontal = expanding
							align = center|nobaseline
							text = "[court_artifacts|E]"
							margin = { 0 2 }
						}

						text_multi = {
							size = { 0 45 }
							layoutpolicy_horizontal = expanding
							datacontext = "[InventoryView.GetCharacter]"
							text = "CHARACTER_WITHOUT_ROYAL_COURT_COURT_ARTIFACT_TAB"
							default_format = "#weak"
						}
					}

					hbox = {
						name = "claims_top_bar"
						visible = "[And( Not( InventoryView.HasSelectedSlot ), VariableSystem.Exists( 'claims' ) )]"
						layoutpolicy_horizontal = expanding

						text_label_center = {
							layoutpolicy_horizontal = expanding
							align = center|nobaseline
							text = "[artifact_claims|E]"
							margin = { 0 2 }
							max_width = 440
						}
					}

					hbox = { # artifact sorting
						name = "artifact_sorting"
						visible = "[Not( VariableSystem.Exists( 'claims' ) )]"
						layoutpolicy_horizontal = expanding
						margin = { 10 5 }
						spacing = 5

						button_standard = {
							name = "sort_order"
							size = { 25 25 }
							tooltip = "ARTIFACT_SORT_ORDER_TOOLTIP"
							using = tooltip_ne
							onclick = "[InventoryView.ToggleArtifactSortOrder]"

							button_icon = {
								size = { 25 25 }
								texture = "gfx/interface/icons/flat_icons/sort_icon.dds"
								framesize = { 66 66 }
								frame = "[BoolTo2And1(InventoryView.IsArtifactSortOrderDescending)]"

								alwaystransparent = yes

								blockoverride "button_frames"
								{
									effectname = "NoHighlight"
								}
							}
						}

						dropdown_menu_standard = {
							name = "sort_artifacts"

							blockoverride "dropdown_properties"
							{
								datamodel = "[InventoryView.GetArtifactSortOptions]"
								onselectionchanged = "[InventoryView.SortArtifacts]"
								selectedindex = "[InventoryView.GetArtifactSortOptionsIndex]"
							}

							blockoverride "dropdown_active_item_properties"
							{
								text = "[Localize( CString.GetString )]"
							}

							blockoverride "dropdown_item_properties"
							{
								text = "[Localize( CString.GetString )]"
							}
						}

						expand = {}
					}

					hbox = { # claims sorting
						name = "claim_sorting"
						visible = "[VariableSystem.Exists( 'claims' )]"
						layoutpolicy_horizontal = expanding
						margin = { 10 5 }
						spacing = 5

						datacontext = "[InventoryView.GetArtifactClaimsList]"

						button_standard = {
							name = "sort_order"
							size = { 25 25 }
							tooltip = "ARTIFACT_CLAIM_SORT_ORDER_TOOLTIP"
							using = tooltip_ne
							onclick = "[ArtifactClaimsList.ToggleSortOrder]"

							button_icon = {
								size = { 25 25 }
								texture = "gfx/interface/icons/flat_icons/sort_icon.dds"
								framesize = { 66 66 }
								frame = "[BoolTo2And1( ArtifactClaimsList.IsSortOrderDescending )]"

								alwaystransparent = yes

								blockoverride "button_frames"
								{
									effectname = "NoHighlight"
								}
							}
						}

						dropdown_menu_standard = {
							name = "sort_claims"

							blockoverride "dropdown_properties"
							{
								datamodel = "[ArtifactClaimsList.GetSortOptions]"
								onselectionchanged = "[ArtifactClaimsList.SortClaims]"
								selectedindex = "[ArtifactClaimsList.GetSortOptionsIndex]"
							}

							blockoverride "dropdown_active_item_properties"
							{
								text = "[Localize( CString.GetString )]"
							}

							blockoverride "dropdown_item_properties"
							{
								text = "[Localize( CString.GetString )]"
							}
						}

						expand = {}
					}

					scrollbox = { # court artifacts
						name = "court_artifacts"
						visible = "[And( Not( InventoryView.HasSelectedSlot ), VariableSystem.Exists( 'court_artifacts' ) )]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content" {
							vbox = {
								name = "artifacts_list"
								datamodel = "[InventoryView.GetSortedArtifacts]"
								layoutpolicy_horizontal = expanding
								spacing = 6

								item = {
									widget_artifact_entry = {
										visible = "[Artifact.IsCourtArtifact]"
										datacontext = "[InventoryView.GetCharacter.GetInventory]"
										datacontext = "[InventoryView.GetSelectedSlot]"

										blockoverride "background_button_overrides"
										{
											alwaystransparent = yes
											enabled = no
										}

										blockoverride "portrait" {
											expand = { minimumsize = { 0 0 } }
										}
									}
								}
							}
						}

						blockoverride "scrollbox_empty"
						{
							visible = "[IsDataModelEmpty( InventoryView.GetSortedArtifacts )]"
							text = "CHARACTER_HAS_NO_ARTIFACTS"
						}
					}

					scrollbox = { # artifact claims
						name = "artifact_claims"
						datacontext = "[InventoryView.GetArtifactClaimsList]"
						visible = "[And( Not( InventoryView.HasSelectedSlot ), VariableSystem.Exists( 'claims' ) )]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content" {
							fixedgridbox = {
								name = "artifacts_list"
								datamodel = "[ArtifactClaimsList.GetClaims]"
								addcolumn = 570
								addrow = 122

								item = {
									artifact_claim = {
										datacontext = "[ArtifactClaim.GetArtifact]"
										datacontext = "[InventoryView.GetCharacter]"
									}
								}
							}
						}

						blockoverride "scrollbox_empty"
						{
							visible = "[IsDataModelEmpty( ArtifactClaimsList.GetClaims )]"
							text = "CHARACTER_HAS_NO_CLAIMED_ARTIFACTS"
						}
					}

					scrollbox = { # artifact list
						name = "artifacts"
						visible = "[And( Not( VariableSystem.Exists( 'court_artifacts' ) ), Not( VariableSystem.Exists( 'claims' ) ))]"
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding

						blockoverride "scrollbox_content" {
							vbox = {
								name = "equippable_artifacts_list"
								datamodel = "[InventoryView.GetSortedArtifacts]"
								layoutpolicy_horizontal = expanding
								spacing = 8

								item = {
									widget_artifact_entry = {
										datacontext = "[InventoryView.GetCharacter.GetInventory]"
										datacontext = "[InventoryView.GetSelectedSlot]"
										datacontext = "[InventoryView.GetSelectedSlot.GetType]"

										visible = "[And( Artifact.IsInventoryArtifact, Or(  Not( InventoryView.HasSelectedSlot ), InventorySlot.CanHoldArtifact( Artifact.Self ) ) )]"


										tooltipwidget = {
											artifact_tooltip = {
												blockoverride "extra_information"
												{
													hbox = {
														layoutpolicy_horizontal = expanding

														text_multi = {
															visible = "[InventoryView.GetCharacter.IsLocalPlayer]"
															text = "[InventoryView.GetArtifactOnClickTooltip( Artifact.Self )]"
															max_width = 500
															autoresize = yes
															using = Font_Size_Small
														}

														expand = {}
													}
												}
											}
										}

										using = tooltip_es

										blockoverride "background_button_overrides"
										{
											onclick = "[InventoryView.OnClickArtifact( Artifact.Self )]"
											enabled = "[InventoryView.GetCharacter.IsLocalPlayer]"
											down = "[Inventory.IsEquipped( Artifact.Self )]"
										}

										blockoverride "portrait" {
											expand = { minimumsize = { 0 0 } }
										}
									}
								}
							}
						}

						blockoverride "scrollbox_empty"
						{
							visible = "[Or( Not( Inventory.HasAnyInventoryArtifact ), And( InventoryView.HasSelectedSlot, Not( Inventory.HasArtifactsOfSlotType( InventoryView.GetSelectedSlot.GetType ) ) ) )]"
							text = "CHARACTER_HAS_NO_ARTIFACTS"
						}
					}
				}
			}
		}
	}
}