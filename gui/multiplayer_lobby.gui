JominiMultiplayerLobby = {
	state = {
		name = _show
		on_start = "[GetVariableSystem.Set( 'mp_lobby_tabs', 'show_players' )]"

		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		on_start = "[GetVariableSystem.Clear( 'tabs_open' )]"

		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
	}

	blockoverride "left_panel_properties"
	{
		size = { 390 100% }
		widgetid = "left"
		visible = "[GameIsMultiplayer]"
	}

	blockoverride "lobby_view_back_onclick" {
		onclick = "[SetIronmanEnabledStatus( '(bool)no' )]"
		onclick = "[ReturnToMenu]"
	}

	blockoverride "host_button"
	{
		text = "[SelectLocalization( IsIronmanEnabled, 'GAME_SETUP_IRONMAN_SINGLEPLAYER_ONLY', 'JOMINI_MULTIPLAYER_GUI_HOST_BUTTON' )]"
	}

	blockoverride "host_button_enabled"
	{
		enabled = "[And( And( JominiIsMultiplayerAccessible, JominiIsHostOrLocal ), Not( IsIronmanEnabled ) )]"
	}

	# blockoverride "lobby_module_background"
	# {
	# 	using = Background_Area_Dark
	# 	margin = { 10 10 }
	# }

	blockoverride "playerbackgroundstyle"
	{
		using = Background_Area
	}

	blockoverride "jominimultiplayertextbox" {
		default_format = "#medium"
	}

	blockoverride "buttonstyle" {
		gfxtype = togglepushbuttongfx
		effectname = "NoHighlight"

		upframe = 1
		uphoverframe = 2
		uppressedframe = 3
		downframe = 4
		downhoverframe = 5
		downpressedframe = 6
		texture = "gfx/interface/buttons/button_entry_02.dds"
		spriteType = Corneredstretched
		spriteborder = { 20 20 }
		framesize  = { 249 78 }

		default_format = "#medium"
	}

	blockoverride "playerlist_playable" {
	}

	blockoverride "game_info" {
		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text" {
				text = "[GetCurrentDate.GetString]"
			}

			blockoverride "button_close" {
				visible = no
			}
		}
	}

	blockoverride "selected_playable" {
		state = {
			name = "jomini_preselected_changed"
			next = "preselected_shown"
			alpha = 0.5
		}

		state = {
			name = "preselected_shown"
			alpha = 1
			duration = 0.5
			using = Animation_Curve_Default
		}

		datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			visible = "[Character.IsValid]"
			ignoreinvisible = yes

			background = { using = Background_Area_Border_Solid }

			#### MAIN PORTRAIT ###
			vbox = {
				layoutpolicy_horizontal = expanding
				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "[Character.GetUINameNoTooltip], [Character.GetAge] years."
				}

				text_single = {
					datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter.GetLiege]"
					visible = "[And(Character.IsValid, Not(Character.IsSelected))]"
					raw_text = "Liege: [Character.GetUINameNoTooltip]."
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter.GetPlayerHeir]"
					visible = "[Character.IsValid]"
					raw_text = "Heir: [Character.GetUINameNoTooltip]."
				}

				text_single = {
					visible = "[Character.HasLandedTitles]"
					layoutpolicy_horizontal = expanding
					raw_text = "[Character.GetMilitaryStrengthText] soldiers, [Character.RealmSize] counties."
				}

			}

			vbox = {
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area_Dark
						margin = { 5 0 }
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							hbox = {
							    layoutpolicy_horizontal = expanding

								hbox = {
									spacing = 3
									datamodel = "[Character.GetTraitIndices]"

									item = {

										text_single = {
											layoutpolicy_horizontal = expanding
											datacontext = "[GetTraitForIndex(int32.GetInt)]"
											visible = "[Trait.IsPersonality]"
											raw_text = "[Trait.GetName( GetNullCharacter )],"
										}
									}
								}

							    expand = { }
							}


							hbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									name = "faith_and_culture"


									hbox = {
										text_single = {
											datacontext = "[Character.GetFaith]"
											layoutpolicy_horizontal = expanding
											text = "FAITH_LOBBY_WINDOW"
											default_format = "#clickable;italic"
											align = nobaseline
											max_width = 220

											tooltipwidget = { faith_tooltip_core_tenents = { } }

											using = tooltip_ws
										}

										text_single = {
											raw_text = ","
											align = nobaseline
										}

										space = { }

										text_single = {
											datacontext = "[Character.GetCulture]"
											layoutpolicy_horizontal = expanding
											text = "CULTURE_LOBBY_WINDOW"
											default_format = "#clickable;italic"
											align = nobaseline
											max_width = 220

											tooltipwidget = { ruler_designer_culture_tooltip = { } }

											using = tooltip_ws
										}
										dot_nb = { }
									}
								}
								expand = { }
							}

							expand = { }
						}
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						datacontext = "[Character.GetHouse]"
						visible = "[Character.HasDynasty]"
						raw_text = "House [DynastyHouse.GetBaseNameNoTooltip]."
					}
				}

				### REALM ###
				hbox = {
					layoutpolicy_horizontal = expanding

					visible = "[Character.HasLandedTitles]"

					vbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "Primary title:"
						}

						text_single = {
							name = "character_title"
							layoutpolicy_horizontal = expanding
							raw_text = "[Character.GetPrimaryTitle.GetNameNoTooltip|U]."
						}

						text_single = {
							name = "government_type"
							layoutpolicy_horizontal = expanding
							raw_text = "[Character.GetGovernment.GetName] [Character.GetPrimaryTitle.GetRankConcept]."
						}
					}

					expand = { }
				}
			}

			spacer = {
				size = { 10 5 }
			}

			scrollarea = {
				layoutpolicy_horizontal = expanding
				maximumsize = { -1 150 }
				autoresizescrollarea = yes
				scrollbarpolicy_horizontal = always_off
				visible = "[Character.HasDifficultyInfo]"

				scrollwidget = {
					### DIFFICULTY ###
					vbox = {
						spacing = 5
						margin_bottom = 10
						visible = "[Character.HasDifficultyInfo]"

						background = {
							using = Background_Area
							margin = { 10 0 }
						}

						text_label_left = {
							name = "difficulty_label"
							layoutpolicy_horizontal = expanding
							margin = { 10 5 }
							text = "MULTIPLAYER_LOBBY_DIFFICULTY_HEADER"
						}

						text_multi = {
							name = "difficulty"
							layoutpolicy_horizontal = expanding
							autoresize = yes
							text = "MULTIPLAYER_LOBBY_DIFFICULTY_INFO_TEXT"
							max_width = 380
						}
					}
				}

				scrollbar_vertical = {
					using = Scrollbar_Vertical
				}
			}

			spacer = {
				size = { 10 5 }
			}

			expand = { }

			divider_light = {
				layoutpolicy_horizontal = expanding
			}

			spacer = { size = {0 8}}
		}
	}

	blockoverride "game_rules" {
		vbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin_right = 10
			margin_bottom = 15
			
			button_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "pre" {
					text_single = {
						align = nobaseline
						raw_text = "Open"
						margin_right = 3
					}
				}
			    blockoverride "text" {
			        raw_text = "GAME_RULES"
			    }
				blockoverride "dot_nb" {
				}
				onclick = "[OpenGameRules]"
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				visible = "[IsIronmanEnabled]"
				onclick = "[SetIronmanEnabledStatus( '(bool)no' )]"
				blockoverride "text" {
					raw_text = "BOOKMARK_IRONMAN_ENABLED"
					align = left
				}
				blockoverride "extra" {
					text_single = {
						raw_text = ": Enabled."
					}
				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				visible = "[Not( IsIronmanEnabled )]"
				onclick = "[SetIronmanEnabledStatus( '(bool)yes' )]"
				blockoverride "text" {
					raw_text = "BOOKMARK_IRONMAN_ENABLED"
					align = left
				}
				blockoverride "extra" {
					text_single = {
						raw_text = ": Disabled."
					}
				}
			}

			flowcontainer_game_rules_mini = {
				layoutpolicy_horizontal = expanding
				name = "game_rules_mini"
				margin_left = 5
			}

			vbox = {
				name = "select_and_customize_character"
				datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"

				button_standard = {
					name = "create_ruler"
					size = { 380 45 }
					# visible = "[IsPreparationLobby]"
					datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"

					button_edit_text = {
						size = { 30 30 }
						parentanchor = left|vcenter
						position = { 5 0 }
						alwaystransparent = yes
					}

					visible = "[And(LobbyView.CanTryStartRulerDesigning( Character.Self ), IsPreparationLobby)]"

					tooltip = "[LobbyView.GetTryStartRulerDesigningDesc( Character.Self )]"
					text = "RULER_DESIGNER_OPEN"

					onclick = "[LobbyView.UnReady]"
					onclick = "[TryStartRulerDesigning( Character.Self )]"
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Or(Or(Character.IsOtherPlayer, Character.IsLocalPlayer), And(Not(Character.IsValid), IsObserver))]"

					vbox = {
						layoutpolicy_horizontal = expanding
						margin = { 5 16 }

						background = {
							using = Background_Area_Dark
						}

						text_single = {
							name = "player"
							visible = "[Character.IsOtherPlayer]"
							text = "MULTIPLAYER_LOBBY_PLAYED_BY"
							align = nobaseline
							default_format = "#high"
						}

						text_single = {
							name = "its_you"
							visible = "[Character.IsLocalPlayer]"
							text = "MULTIPLAYER_LOBBY_PLAYED_BY_YOU"
							align = nobaseline
							default_format = "#high"
						}

						text_single = {
							visible = "[And(Not(Character.IsValid), IsObserver)]"
							size = { 380 100 }
							align = center
							text = "MULTIPLAYER_LOBBY_PLAY_OBSERVER"
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					margin = { 10 10 }
					visible = "[Not( Or( Character.IsOtherPlayer, Character.IsLocalPlayer ) )]"

					button_primary_text = {
						layoutpolicy_horizontal = expanding
						visible = "[And( GameIsMultiplayer, IsPreparationLobby )]"
						blockoverride "text" {
							text = "JOMINI_MULTIPLAYER_GUI_SELECT"
						}
						blockoverride "disabled" {
							visible = "[Not(LobbyView.CanControlSelected)]"
						}
						blockoverride "hotkey" {
							visible = "[LobbyView.CanControlSelected]"
						}

						onclick = "[LobbyView.ControlSelected]"
						tooltip = "[LobbyView.GetControlToolTip]"
						enabled = "[LobbyView.CanControlSelected]"
					}
				}
			}
		}
	}

	### Chosen character name left side ###
	blockoverride "readyness" {
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			maximumsize = { 390 -1 }

			text_multi = {
				layoutpolicy_horizontal = expanding
				text = "MULTIPLAYER_LOBBY_READY"
				visible = "[And( LobbyPlayer.HasPlayable, Not( LobbyPlayer.IsObserver ) )]"
				max_width = 245
				autoresize = yes
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "[SelectLocalization( IsMachineRulerDesigning( LobbyPlayer.GetID ), 'MULTIPLAYER_LOBBY_RULER_DESIGNING', 'MULTIPLAYER_LOBBY_NOT_READY' )]"
				visible = "[Not( Or( Or( LobbyPlayer.HasPlayable, LobbyPlayer.IsObserver ), LobbyPlayer.IsHotjoining ) )]"
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "JOMINI_MULTIPLAYER_GUI_OBSERVER"
				visible = "[LobbyPlayer.IsObserver]"
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				visible = "[LobbyPlayer.IsHotjoining]"
				text = "MULTIPLAYER_LOBBY_JOIN_PROGRESS"
			}

			expand = { }
		}
	}

	hbox = {
		layoutpolicy_horizontal = expanding
		allow_outside = yes

		expand = { }

		map_modes = {
			scale = 0.8
			filter_mouse = all
			alwaystransparent = no
			hotkeys_HUD = { }
		}
	}

	### MAPMODES, OBSERVE MODE ###
}

JominiLobbyViewEndPreparationConfirmation = { }
JominiMultiplayerJoinRequest = { }
JominiMultiplayerOosMessage = {
	blockoverride "oos_item" {
		layoutpolicy_horizontal = expanding

		hbox = {
			datacontext = "[OosData.GetPlayable.GetCharacter]"
			layoutpolicy_horizontal = expanding

			widget = {
				size = { 68 106 }

				coa_realm_medium_crown = {
					visible = "[And( Character.IsValid, Not( OosData.IsObserver ))]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 5 0 }

				text_single = {
					text = "[Character.GetName]"
					visible = "[And( Character.IsValid, Not( OosData.IsObserver ))]"
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OBSERVER"
					visible = "[OosData.IsObserver]"
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_PLAYER_NAME"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_TYPE"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_multi = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_FOLDER"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}
			}
		}
	}
}
