
######################################################
################### MILTARY VIEW #####################
######################################################

window = {
	name = "military_view"
	datacontext = "[GetVariableSystem]"
	datacontext = "[GetPlayer]"
	parentanchor = top|right

	layer = windows_layer
	movable = no

	using = Window_Size_MainTab

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab

		on_start = "[GetVariableSystem.Set( 'military_view_tabs', 'troops' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
	}

	margin_widget = {
		size = { 100% 100% }
		margin = { 0 0 }
		margin_right = 13

		widget = {
			size = { 100% 100% }

			### WINDOW CONTENT
			vbox = {
				using = Window_Margins

				header_pattern = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text" {

					}

					blockoverride "illustration_texture" {
						texture = "gfx/interface/illustrations/window_headers/header_military.dds"
					}

					blockoverride "button_close" {
						onclick = "[MilitaryView.Close]"
					}

					hbox = {
					    layoutpolicy_horizontal = expanding

					    text_single = {
					    	raw_text = "MILITARY_VIEW"
					    }

						dot = { }

					    expand = { }
					}
				}

				flowcontainer = {
					layoutpolicy_horizontal = expanding
					spacing = 3
					direction = vertical

					ignoreinvisible = yes

					button_primary_text = {
					    blockoverride "text" {
					        raw_text = "RAISE_ALL"
							align = left
					    }
						blockoverride "disabled" {
							visible = "[Not(PlayerCanRaiseAnyRallyPoint)]"
						}
						name = "tutorial_highlight_raise_troops_button"
						datacontext = "[GetPlayer]"
						onclick = "[PlayerRaiseAllRegiments]"
						enabled = "[PlayerCanRaiseAnyRallyPoint]"
						clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
						blockoverride "extra" {
							text_single = {
								tooltip = "[GetPlayerRaiseAllTooltip]"
								raw_text = ", tooltip"
							}
						}
						blockoverride "dot" {

						}
					}

					button_text_cant = {
					    blockoverride "text" {
					        raw_text = "RAISE_ALL_RAIDERS"
							align = left
					    }
						blockoverride "disabled" {
							visible = "[Not(PlayerCanRaiseAnyRaiderRallyPoint)]"
							align = left
						}
						datacontext = "[GetPlayer]"
						onclick = "[PlayerRaiseAllRaidRegiments]"
						visible = "[Character.CanRaid]"
						enabled = "[PlayerCanRaiseAnyRaiderRallyPoint]"
						tooltip = "[GetPlayerRaiseAllRaidersTooltip]"
						clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
						blockoverride "dot" {

						}
					}

					button_text_cant = {
					    blockoverride "text" {
					        raw_text = "DISBAND_ALL"
							align = left
					    }
						blockoverride "disabled" {
							visible = "[Not(PlayerCanDisbandAll)]"
							align = left
						}
						datacontext = "[GetPlayer]"

						onclick = "[PlayerDisbandAll]"
						enabled = "[PlayerCanDisbandAll]"
						tooltip = "[GetDisbandAllTooltip]"
						clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_unit_army_disband"
						blockoverride "dot" {

						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'troops' )]"

					    blockoverride "text" {
					        raw_text = "BANNER_TROOPS_TAB"
							align = left
					    }
						blockoverride "extra" {
							text_single = {
								raw_text = " tab[Select_CString(GetVariableSystem.HasValue('military_view_tabs', 'troops'), ', Selected', '')]"
							}
							dot = { }
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'mercenaries' )]"

					    blockoverride "text" {
					        raw_text = "MV_MERCENARIES"
							align = left
					    }
						blockoverride "extra" {
							text_single = {
								raw_text = " tab[Select_CString(GetVariableSystem.HasValue('military_view_tabs', 'mercenaries'), ', Selected', '')]"
							}
							dot = { }
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'holy_orders' )]"

						blockoverride "pre" {
							text_single = {
								raw_text = "[GetDataModelSize(MilitaryView.GetAllHolyOrders)]"
							}
							space = { }
						}

					    blockoverride "text" {
					        raw_text = "MV_HOLY_ORDERS"
							align = left
					    }
						blockoverride "extra" {
							text_single = {
								raw_text = " tab[Select_CString(GetVariableSystem.HasValue('military_view_tabs', 'holy_orders'), ', Selected', '')]"
							}
							dot = { }
						}
					}
				}

				vbox = {
					name = "tab_your_armies"
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'troops' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					scrollbox = {
						name = "scrollbox_troops"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						state = {
							name = _show
							using = Animation_FadeIn_Quick
						}

						state = {
							name = _hide
							alpha = 0
						}

						background = {
							texture = "gfx/interface/skinned/illustrations/moving.dds"
							fittype = end
							alpha = 0.3

							using = Mask_Rough_Edges

							using = Mask_Rough_Edges

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
								blend_mode = alphamultiply
								mirror = vertical
							}
						}

						blockoverride "scrollbox_content" {
							datacontext = "[MilitaryView.GetMilitaryItem]"

							vbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding

									vbox = {
										datacontext = "[MilitaryItem.GetComposition]"
										layoutpolicy_horizontal = expanding
										tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
										ignoreinvisible = no

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 3

											text_single = {
												text = "MV_TOTAL_SOLDIERS"
											}

											text_single = {
												text = "[ArmyComposition.GetSoldierCountString]"
											}

											text_single = {
												raw_text = "[ArmyComposition.GetArmyQualityName]."
											}

											expand = { }
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 3
											visible = "[ArmyComposition.HasRaisedSoldiers]"
											tooltip = "[ArmyComposition.GetUnraisedArmyCompositionTooltip]"

											text_single = {
												text = "MV_UNRAISED_SOLDIERS"
											}

											text_single = {
												text = "[ArmyComposition.GetUnraisedNumberOfSoldiers]"
											}

											text_single = {
												raw_text = "[ArmyComposition.GetUnraisedArmyQualityName]."
											}
											expand = { }
										}
									}
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									onclick = "[MilitaryView.ShowLevies]"
									datacontext = "[MilitaryItem.GetComposition]"
								    blockoverride "text" {
								        raw_text = "Levies [ArmyComposition.GetLeviesCountString]"
										align = left
								    }
									blockoverride "extra" {
										text_single = {
											text = MV_LEVY_MAINTENANCE
										}
										text_single = {
											raw_text = "text"
											visible = "[NotEqualTo_int32(ArmyComposition.GetCurrentNumberOfLevies, ArmyComposition.GetMaxNumberOfLevies)]"
										}
									}
									blockoverride "dot" {

									}
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									onclick = "[MilitaryView.ShowKnights]"
									datacontext = "[MilitaryItem.GetComposition]"
								    blockoverride "text" {
								        raw_text = "Knights"
										align = left
								    }
									blockoverride "extra" {
										space = { }
										text_single = {
											text = "KNIGHTS_CURRENT_MAX"
										}
										space = { }
										text_single = {
											raw_text = "Click to manage"
										}
									}
									blockoverride "dot" {
									}
								}


								vbox = {
									name = "maa_area"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									margin = { 0 0 }
									spacing = 4

									vbox = {
										layoutpolicy_horizontal = expanding
										name = "heading"

										hbox = {
											layoutpolicy_horizontal = expanding

											text_single = {
												text = "BANNER_MEN_AT_ARMS_LABEL"
											}
											space = { }

											text_single = {
												text = "[MilitaryView.GetMAACountAndCapString]"
												default_format = "#high"
												tooltip = "[MilitaryView.GetMAACountAndCapTooltip]"
												using = tooltip_ne
											}

											dot = { }

											expand = { }
										}

										button_text_cant = {
											layoutpolicy_horizontal = expanding
											blockoverride "disabled" {
												visible = "[Not(PlayerCanRaiseAnyMenAtArmsRallyPoint)]"
											}
										    blockoverride "text" {
										        raw_text = "Raise all men-at-arms."
										    }
											visible = "[Not(IsDataModelEmpty(MilitaryItem.GetMAA))]"
											using = Animation_ShowHide_Standard

											name = "raise_all_men_at_arms"
											datacontext = "[GetPlayer]"
											onclick = "[PlayerRaiseAllMenAtArmsRegiments]"
											enabled = "[PlayerCanRaiseAnyMenAtArmsRallyPoint]"

											tooltip = "[GetPlayerRaiseAllMenAtArmsTooltip]"
											using = tooltip_se
											clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
										}
									}

									button_text_cant = {
										layoutpolicy_horizontal = expanding
										onclick = "[MilitaryItem.OnClick]"
										blockoverride "disabled" {
											visible = "[Not(MilitaryItem.CanCreateAnyMAAType)]"
											# visible = "[Not(MilitaryItem.MaACanBeCreated)]"
										}
										blockoverride "text" {
											raw_text = "ADD_MEN_AT_ARMS_LABEL"
										}
										blockoverride "dot" {

										}
									}

									vbox = { # MAA
										datamodel = "[MilitaryItem.GetMAA]"
										layoutpolicy_horizontal = expanding
										visible = "[Not(GetVariableSystem.Exists('ocr'))]"
										spacing = 3

										item = {
											vbox = {
												layoutpolicy_horizontal = expanding
												button_text = {
												layoutpolicy_horizontal = expanding
												onclick = "[MAAItem.OnClick]"
												datacontext = "[MAAItem.GetMenAtArmsType]"
												datacontext = "[MAAItem.GetRegiment]"

												blockoverride "text" {
													text = "[MAAItem.GetMAAString|V]"
													align = left
												}

												blockoverride "extra" {
													datacontext = "[MAAItem.GetRegiment]"
													space = { }

													text_single = {
														raw_text = "[MAAItem.GetName],"
													}

													space = { }

													text_single = {
														visible = "[And( Not(MAAItem.GetRegiment.IsRaised), GetPlayer.IsAtWar)]"
														text = "MAA_UNRAISED"
													}

													text_single = {
														visible = "[Not(And( Not(MAAItem.GetRegiment.IsRaised), GetPlayer.IsAtWar))]"
														text = "MAA_CURRENT_SIZE"
													}

													text_single = {
														text = "TOTAL_MAA_COST"
														tooltip = "TOTAL_MAA_COST_TOOLTIP"
													}

													dot = { }
												}
											}

												siege_stat = {
													datacontext = "[MAAItem.GetMenAtArmsType]"
												}

												hbox_maa_stats = {
													datacontext = "[MAAItem.GetMenAtArmsType]"
												}
											}
										}
									}
								}

								hbox = {
									visible = "[GetVariableSystem.Exists('ocr')]"
									layoutpolicy_horizontal = expanding
									name = "maa_tiles"

									fixedgridbox = {
										datamodel = "[MilitaryItem.GetMAA]"
										flipdirection = yes
										datamodel_wrap = 3
										addcolumn = 166
										addrow = 93

										item = {
											container = {
												datacontext = "[MAAItem.GetMenAtArmsType]"
												datacontext = "[MAAItem.GetRegiment]"
												using = tooltip_ne

												background = {
													texture = "[MAAItem.GetMenAtArmsType.GetHorizontalImage]"
													alpha = 0.7
												}

												background = {
													using = Background_Button_Illustration
													visible = "[MAAItem.IsSelected]"
												}

												background = {
													texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
													spriteType = Corneredtiled
													spriteborder = { 5 5 }
													margin = { -2 -2 }
												}

												tooltipwidget = {
													using = regiment_container_text_tooltip

													blockoverride "extra_info" {
														divider_light = {
															layoutpolicy_horizontal = expanding
														}
														text_single = {
															layoutpolicy_horizontal = expanding
															text = "CLICK_TO_SELECT"
															margin = { 10 0 }
														}
													}
												}

												button_standard_clean = {
													name = "maa_entry"
													size = { 164 90 }

													vbox = {
														expand = { }

														hbox = {
															margin = { 8 4 }
															spacing = 2
															layoutpolicy_horizontal = expanding

															background = {
																using = Background_Area_Dark
															}

															icon = {
																name = "icon_maa"
																texture = [MenAtArmsType.GetIcon]
																size = { 20 20 }
															}

															text_single = {
																text = "[MAAItem.GetMAAString|V]"
																default_format = "#high"
															}

															expand = { }

															text_single = {
																datacontext = "[MAAItem.GetRegiment]"

																text = "TOTAL_MAA_COST"
																tooltip = "TOTAL_MAA_COST_TOOLTIP"

																default_format = "#high"
															}
														}
													}

													button_normal = {
														visible = "[Not(MAAItem.IsSelected)]"
														size = { 100% 100% }
														onclick = "[MAAItem.OnClick]"
													}


													text_label_right = {
														visible = "[And( Not(MAAItem.GetRegiment.IsRaised), GetPlayer.IsAtWar)]"
														text = "MAA_UNRAISED"
														using = Font_Size_Small
														default_format = "#X"
														parentanchor = top|right
														position = {-10 1}
													}

													text_label_right = {
														visible = "[Not(And( Not(MAAItem.GetRegiment.IsRaised), GetPlayer.IsAtWar))]"
														text = "MAA_CURRENT_SIZE"
														using = Font_Size_Small
														parentanchor = top|right
														position = {-10 1}
													}

													button_normal = {
														visible = "[GetVariableSystem.Exists( 'menatarms_open' )]"
														size = { 100% 100% }
														onclick = "[PdxGuiTriggerAllAnimations('menatarms_refresh')]"

														state = {
															name = _mouse_click
															delay = 0.2
															on_finish = "[MAAItem.OnClick]"
														}
													}
												}
											}
										}
									}

									expand = { }
								}

								vbox = {
									visible = "[Not(IsDataModelEmpty(MilitaryView.GetEventTroops))]"
									layoutpolicy_horizontal = expanding
									margin = { 0 5 }
									spacing = 5

									text_single = {
										layoutpolicy_horizontal = expanding
										text = "MILITARY_VIEW_EVENT_TROOPS"
									}

									divider_light = {
										layoutpolicy_horizontal = expanding
									}

									vbox = {
										datamodel = "[MilitaryView.GetEventTroops]"
										layoutpolicy_horizontal = expanding

										item = {
											hbox_event_troop_item = {
												layoutpolicy_horizontal = expanding
											}
										}
									}
								}

								vbox = {
									visible = "[Or( Not(IsDataModelEmpty(MilitaryView.GetHiredMercenaries)), Not(IsDataModelEmpty(MilitaryView.GetHiredHolyOrders)) )]"
									layoutpolicy_horizontal = expanding
									margin = { 0 5 }
									spacing = 5

									text_single = {
										layoutpolicy_horizontal = expanding
										text = "MILITARY_VIEW_HIRED_TROOPS"
									}

									divider_light = {
										layoutpolicy_horizontal = expanding
									}

									vbox = {
										datamodel = "[MilitaryView.GetHiredMercenaries]"
										layoutpolicy_horizontal = expanding
										spacing = 5
										margin = { 10 0 }
										margin_top = 5

										item = {
											button_mercenary_list_item = {
												datacontext = "[HiredTroopItem.GetMercenaryCompany]"
												layoutpolicy_horizontal = expanding

												blockoverride "HiredTroopMenAtArmsTypesDataModel"
												{
													datamodel = "[HiredTroopItem.GetRegiments]"
												}
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										margin = { 10 20 }
										visible = "[Not(IsDataModelEmpty(MilitaryView.GetHiredHolyOrders))]"

										divider_light = {
											layoutpolicy_horizontal = expanding

										}
									}

									vbox = {
										datamodel = "[MilitaryView.GetHiredHolyOrders]"
										layoutpolicy_horizontal = expanding
										spacing = 5
										margin = { 10 0 }

										item = {
											button_holyorder_list_item = {
												datacontext = "[HiredTroopItem.GetHolyOrder]"
												layoutpolicy_horizontal = expanding

												blockoverride "HiredTroopMenAtArmsTypesDataModel"
												{
													datamodel = "[HiredTroopItem.GetRegiments]"
												}
											}
										}
									}
								}
							}
						}
					}

					vbox = {
						name = "rally_points"
						layoutpolicy_horizontal = expanding
						margin = { 25 10 }
						spacing = 5

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5
							text_single = {
								raw_text = "[GetDataModelSize(MilitaryView.GetRallyPoints)]"
							}
							text_single = {
								text = "MV_RALLY_POINTS"
							}
							text_single = {
								raw_text = "Double-click to pan camera."
							}
							expand = { }
						}


						divider_light = {
							layoutpolicy_horizontal = expanding
						}

						vbox = {
							layoutpolicy_horizontal = expanding

							dynamicgridbox = {
								name = "rally_point_list"
								datamodel = "[MilitaryView.GetRallyPoints]"
								datamodel_wrap = 3
								flipdirection = yes
								layoutpolicy_horizontal = expanding

								item = {
									button_text = {
										datacontext = "[RallyPointItem.GetRallyPoint]"
									    blockoverride "text" {
									        raw_text = "[RallyPoint.GetName],"
									    }
										onclick = "[RallyPointItem.OnClick]"
										# tooltip = "MV_RALLY_POINT_TT"
									}
								}
							}

							button_text = {
							    blockoverride "text" {
							        raw_text = "Add Rally Point."
							    }
								layoutpolicy_horizontal = expanding
								visible = "[MilitaryView.CanAddRallyPoint]" #TODO
								onclick = "[MilitaryView.OnAddRallyPoint]"
								# tooltip = "[MilitaryView.GetAddRallyPointTooltip]"
							}

							# expand = { }
						}
					}

					vbox = {
						name = "footer"
						layoutpolicy_horizontal = expanding

						margin = { 10 0 }
						background = {

							using = Background_Bottom_Fade
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							margin = { 5 5 }
							spacing = 2

							background = {
								using = Background_Area
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								button_text = {
									onclick = "[MilitaryView.OnMilitaryReinforcementClick]"
								    blockoverride "text" {
								        raw_text = "MONTHLY_REINFORCEMENT_COST_LABEL"
										align = left
								    }

									blockoverride "pre" {
										# tooltip = "[MilitaryView.GetMilitaryReinforcementCostTooltip]"
										text_single = {
											raw_text = "[Select_CString(MilitaryView.IsMilitaryReinforcementsEnabled, 'Disable', 'Enable')]"
										}
										space = { }
									}
									blockoverride "dot" {

									}
								}

								expand = { }
							}


							vbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									raw_text = "Maintenance is increased due to embarked armies."
									visible = "[MilitaryView.HasEmbarkedArmies]"
									layoutpolicy_horizontal = expanding
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5

									text_single = {
										text = "MONTHLY_MAINTENANCE_LABEL"
									}

									text_single = {
										datacontext = "[MilitaryView.GetGoldMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPrestigeMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPietyMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										text = "COST_RESULT_NOTHING"
										visible = "[And(EqualTo_CFixedPoint(MilitaryView.GetGoldMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ,And( EqualTo_CFixedPoint( MilitaryView.GetPrestigeMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0'), EqualTo_CFixedPoint(MilitaryView.GetPietyMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ) ) ]"

									}
									expand = { }
								}

								hbox = {
									visible = "[MilitaryView.HasAnyRaisedMilitaryExpenses]"
									layoutpolicy_horizontal = expanding
									spacing = 4

									text_single = {
										text = "MONTHLY_MAX_MAINTENANCE_LABEL"
										maximumsize = { 400 -1 }
										tooltip = "MONTHLY_MAX_MAINTENANCE_TT"
										align = nobaseline
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedGoldMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "MONTHLY_MAX_MAINTENANCE_VIEW"
										maximumsize = { 400 -1 }
										default_format = "#weak"
										align = nobaseline
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPrestigeMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPrestigeMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPietyMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPietyMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = { }
										}
									}

									dot = { margin_left = -4 }
									expand = { }
								}
							}
						}
					}
				}

				scrollbox = {
					name = "tab_mercenaries"
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'mercenaries' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					background = {
						texture = "gfx/interface/illustrations/event_scenes/genericcamp.dds"
						margin = { -5 0 }
						fittype = end
						alpha = 0.3
						framesize = { 1200 848 }

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					blockoverride "scrollbox_content" {
						vbox = {
							name = "tutorial_highlight_mercenary_list_item"
							datamodel = "[MilitaryView.GetAllMercenaries]"
							layoutpolicy_horizontal = expanding
							spacing = 3
							margin = { 10 0 }

							spacer = {
								size = { 7 7 }
							}

							item = {
								vbox = {
									layoutpolicy_horizontal = expanding

									button_mercenary_list_item = {
										datacontext = "[HiredTroopItem.GetMercenaryCompany]"
										visible = "[MercenaryCompany.IsHired]"
										layoutpolicy_horizontal = expanding
										size = { 430 110 }

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}

									button_mercenary_list_item = {
										datacontext = "[HiredTroopItem.GetMercenaryCompany]"
										visible = "[Not(MercenaryCompany.IsHired)]"
										layoutpolicy_horizontal = expanding
										size = { 430 90 }

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}
								}
							}
						}
					}
				}

				scrollbox = {
					name = "tab_holy_orders"
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'holy_orders' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					background = {
						texture = "gfx/interface/skinned/illustrations/holy_order_bg.dds"
						margin = { -5 0 }
						fittype = centercrop
						alpha = 0.3

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					blockoverride "scrollbox_content" {
						vbox = {
							datamodel = "[MilitaryView.GetAllHolyOrders]"
							layoutpolicy_horizontal = expanding
							spacing = 3
							margin = { 10 0 }

							text_label_center = {
								name = "hired_troops_view_holy_orders_header_item"
								text = "HIRED_TROOPS_VIEW_LIST_HO_HEADER"
							}

							text_single = {
								visible = "[And( Not(MilitaryView.CanUseAnyHolyOrder), DataModelHasItems(MilitaryView.GetAllHolyOrders))]"
								text = "HOLY_ORDER_MUST_BE_AT_WAR_WITH_BAD_FAITH"
							}

							hbox = {
								visible = "[Not(DataModelHasItems(MilitaryView.GetAllHolyOrders ))]"

								text_single = {
									text = "HIRED_TROOPS_VIEW_LIST_HO_NO_HOS"
									default_format = "#weak"
								}
							}

							spacer = {
								size = { 7 7 }
							}

							button_decision_entry = {
								name = "hired_troops_view_create_holy_order_item"
								datacontext = "[GetDecisionWithKey('create_holy_order_decision')]"
								visible = "[Decision.IsShownForPlayer]"
								layoutpolicy_horizontal = expanding
								onclick = "[OpenDecisionDetailView(Decision.Self)]"
								size = { 430 50 }
							}

							item = {
								vbox = {
									layoutpolicy_horizontal = expanding

									button_holyorder_list_item = {
										visible = "[Not(And(HolyOrder.IsHired, HolyOrder.IsPledgedToGreatHolyWar))]"

										datacontext = "[HiredTroopItem.GetHolyOrder]"
										layoutpolicy_horizontal = expanding

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}

									button_holyorder_list_item = {
										visible = "[And(HolyOrder.IsHired, HolyOrder.IsPledgedToGreatHolyWar)]"
										size = { 430 120 }
										datacontext = "[HiredTroopItem.GetHolyOrder]"
										layoutpolicy_horizontal = expanding

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types MilitaryView
{
	type hbox_event_troop_item = vbox {
		background = {
			using = Background_Area
		}
		margin = { 5 5 }

		hbox  = {
			name = "header"
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area
			}

			hbox = {
				margin = { 5 5 }
				layoutpolicy_horizontal = expanding

				icon = {
					name = "event_troops"
					texture = "gfx/interface/icons/icon_special_troops.dds"
					size = { 36 36 }
				}

				spacer = { size = { 5 0 }}

				text_single = {
					text = "[MilitaryViewEventTroop.GetName]"
					default_format = "#high"
				}

				expand = { }

				soldiers_and_quality_small = {
					datacontext = "[MilitaryViewEventTroop.GetComposition]"
					blockoverride "background" {
						background = {
							using = Background_Area
							margin = { 3 0 }
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			vbox = {
				margin = { 5 5 }
				layoutpolicy_horizontal = expanding

				hbox = {
					name = "menatarms"
					layoutpolicy_horizontal = expanding

					text_single = {
						raw_text = "[men_at_arms|E]:"
					}

					text_single = {
						text = MV_MEN_AT_ARMS_NONE
						default_format = "#weak"
						visible = "[IsDataModelEmpty(MilitaryViewEventTroop.GetRegiments)]"
					}

					spacer = {
						size = { 10 5 }
					}

					hbox = {
						name = "regiment_types"
						datamodel = "[MilitaryViewEventTroop.GetRegiments]"
						layoutpolicy_vertical = expanding
						margin_top = 5

						background = {
							using = Background_Area
							margin = { 10 2 }
						}

						item = {
							container = {
								highlight_icon = {
									size = { 40 40 }
									texture = "[Regiment.GetMAAType.GetIcon]"
									tooltipwidget = regiment_container_tooltip
									using = tooltip_se
								}
							}
						}
					}

					expand = { }
				}

				text_single = {
					visible = "[Not(MilitaryViewEventTroop.IsInheritable)]"

					layoutpolicy_horizontal = expanding
					text = "MILITARY_VIEW_EVENT_TROOPS_NOT_INHERITABLE"
				}

				text_single = {
					visible = "[MilitaryViewEventTroop.IsInheritable]"

					layoutpolicy_horizontal = expanding
					text = "MILITARY_VIEW_EVENT_TROOPS_INHERITABLE"
				}

				hbox = {
					datacontext = "[MilitaryViewEventTroop.GetAssociatedWar]"
					visible = "[War.IsValid]"

					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[MilitaryViewEventTroop.IsInheritable]"
						text = "MILITARY_VIEW_EVENT_TROOPS_ASSOCIATED_WAR"
						max_width = 450
						multiline = yes
					}

					expand = { }
				}
			}

			vbox = {
				layoutpolicy_vertical = growing

				expand = {
					layoutpolicy_vertical = growing
				}

				button_standard = {
					name = "raise"
					size = { 100 32 }
					onclick = "[OnRaiseEventTroops(MilitaryViewEventTroop.Self)]"
					visible = "[MilitaryViewEventTroop.CanBeRaised]"
					tooltip = "MILITARY_VIEW_EVENT_TROOPS_RAISE_TT"

					hbox = {
						margin = { 5 0 }

						button_army_details = {
							size = { 28 28 }
							alwaystransparent = yes
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							align = center|nobaseline
							text = "MILITARY_VIEW_EVENT_TROOPS_RAISE"
							default_format = "#clickable"
						}
					}
				}
			}
		}
	}
}

types HiredTroops
{
	type button_mercenary_list_item = button {
		size = { 430 110 }

		background = {
			using = Background_Area
		}

		# tooltip = "HIRED_TROOPS_VIEW_LIST_MC_BUTTON_TOOLTIP"
		# tooltip_enabled = "[Or(Not(MercenaryCompany.IsHired), MercenaryCompany.IsHiredByLocalPlayer)]"

		down = "[IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self)]"

		button = {
			visible = "[Or( IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self), Not(GetVariableSystem.Exists( 'hired_troop_detail_view_open' )))]"
			size = { 100% 100% }
			enabled = "[Or(Not(MercenaryCompany.IsHired), MercenaryCompany.IsHiredByLocalPlayer)]"
			onclick = "[ToggleMercenaryCompanyDetailView(MercenaryCompany.Self)]"
		}

		button = {
			visible = "[And( GetVariableSystem.Exists( 'hired_troop_detail_view_open' ), Not( IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self) ) )]"
			size = { 100% 100% }
			onclick = "[PdxGuiTriggerAllAnimations('mercenary_details_refresh')]"

			state = {
				name = _mouse_click
				delay = 0.2
				on_finish = "[ToggleMercenaryCompanyDetailView(MercenaryCompany.Self)]"
			}
		}

		vbox = {
			set_parent_size_to_minimum = yes
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 5 2 }

			hbox = {
				layoutpolicy_horizontal = expanding
				allow_outside = yes

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					ignoreinvisible = yes

					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[MercenaryCompany.IsHired]"
						ignoreinvisible = no

						text_single = {
							name = "hired_by_label"
							text = "[SelectLocalization( MercenaryCompany.IsHiredByLocalPlayer, 'HIRED_TROOPS_VIEW_HIRED_BY_ME_LEFT', 'HIRED_TROOPS_VIEW_NOT_AVAILABLE' )]"
						}

						text_single = {
							name = "hired_info_time_left"
							visible = "[MercenaryCompany.IsHiredByLocalPlayer]"
							text = "HIRED_TROOPS_VIEW_MC_HIRED_TIME_LEFT"
						}

						expand = { }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[And(MercenaryCompany.WillGoInBankruptcy(GetPlayer.Self),  Not(MercenaryCompany.IsHired))]"
						raw_text = "Can't hire! It will put you into too much debt."
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							name = "cost_label"
							raw_text = "[MercenaryCompany.GetCostDesc],"
						}

						space = { }

						text_single = {
							datacontext = "[MercenaryCompany.GetComposition]"
							tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
							name = "strength"
							raw_text = "[ArmyComposition.GetSoldierCountString] men."
						}

						char_name_extra = {
							layoutpolicy_horizontal = expanding
							datacontext = "[MercenaryCompany.GetTitle.GetHolder]"
							blockoverride "text" {
								raw_text = "[Character.GetShortUINameNoTooltip], "
							}
							blockoverride "extra" {
								text_single = {
									raw_text = "[Character.GetSkill('martial')] Martial."
								}
							}
						}

						space = { }

						text_single = {
							raw_text = "[MercenaryCompany.GetName]."
							max_width = 280
						}

						expand = { }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[And(MercenaryCompany.WillGoInDebt(GetPlayer.Self), Not(MercenaryCompany.IsHired))]"
						raw_text = "Hiring will put you into debt."
					}

					expand = { }
				}

				expand = { }
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 5 0 }
				spacing = 5

				text_single = {
					raw_text = "Has"
				}

				flowcontainer = {
					name = "regiment_types"
					layoutpolicy_horizontal = expanding

					block "HiredTroopMenAtArmsTypesDataModel" { }

					item = {
						text_single = {
							margin_right = 5
							raw_text = "[Regiment.GetMAAType.GetName],"
						}
					}
				}

				expand = { }
			}

			expand = { }
		}
	}

	type button_holyorder_list_item = button_standard_clean {
		size = { 430 110 }

		background = {
			using = Background_Area
		}

		tooltip = "HIRED_TROOPS_VIEW_LIST_HO_BUTTON_TOOLTIP"

		down = "[IsHolyOrderDetailViewShown(HolyOrder.Self)]"

		button_standard_clean = {
			visible = "[Not(GetVariableSystem.Exists( 'hired_troop_detail_view_open' ))]"
			size = { 100% 100% }
			enabled = "[Or(Not(HolyOrder.IsHired), Or(HolyOrder.IsHiredByLocalPlayer, HolyOrder.IsPlayerPatron))]"
			onclick = "[OpenHolyOrderDetailView(HolyOrder.Self)]"
		}

		button_normal = {
			visible = "[GetVariableSystem.Exists( 'hired_troop_detail_view_open' )]"
			size = { 100% 100% }
			onclick = "[PdxGuiTriggerAllAnimations('mercenary_details_refresh')]"

			state = {
				name = _mouse_click
				delay = 0.2
				on_finish = "[OpenHolyOrderDetailView(HolyOrder.Self)]"
			}
		}

		vbox = {
			margin = { 5 5 }

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				minimumsize = { 80 0 }
				allow_outside = yes

				widget = {
					size = { 60 60 }
					allow_outside = yes

					vbox = {
						coa_realm_small = {
							name = "realm_flag"
							datacontext = "[HolyOrder.GetTitle.GetHolder]"
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_top = 10
					ignoreinvisible = yes

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[HolyOrder.GetName]"
						default_format = "#high"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[HolyOrder.IsHired]"
						name = "hired_by_label"
						text = "[SelectLocalization( HolyOrder.IsHiredByLocalPlayer, 'HIRED_TROOPS_VIEW_HIRED_BY_ME', 'HIRED_TROOPS_VIEW_NOT_AVAILABLE' )]"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[And(HolyOrder.IsHired, HolyOrder.IsPledgedToGreatHolyWar)]"
						text = "HIRED_TROOPS_VIEW_PLEDGED_TO_GREAT_HOLY_WAR"
						default_format = "#low"
					}

					expand = { }
				}

				expand = {
					layoutpolicy_horizontal = expanding
				}

				vbox = {
					soldiers_and_quality_small = {
						datacontext = "[HolyOrder.GetComposition]"
						blockoverride "background" {
							background = {
								using = Background_Area
								margin = { 3 0 }
							}
						}
					}

					spacer = {
						size = { 10 15 }
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 10 5 }
				margin_bottom = 0
				spacing = 5

				text_single = {
					name = "maa_type"
					align = left
					raw_text = "[men_at_arms|E]:"
				}

				spacer = {
					size = { 2 2 }
				}

				overlappingitembox = {
					name = "regiment_types"
					layoutpolicy_horizontal = expanding
					size = { -1 35 }

					background = {
						using = Background_Area
						margin = { 10 2 }
					}

					block "HiredTroopMenAtArmsTypesDataModel" { }

					item = {

						icon = {
							datacontext = "[Regiment.GetMAAType]"
							name = "men_at_arms_icon"
							size = { 35 35 }
							texture = "[MenAtArmsType.GetIcon]"
							tooltipwidget = regiment_container_tooltip

						}
					}
				}

				expand = { }

				text_single = {
					name = "cost_label"
					text = "[HolyOrder.GetCostDescForPlayer]"
				}
			}
		}
	}
}
