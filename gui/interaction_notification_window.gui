######################################################
############## INTERACTION NOTIFICATION ##############
######################################################
window = {
	name = "character_interaction_notification_window"
	# parentanchor = center
	position = { 0 0 }
	layer = top
	size = { 750 100% }

	using = Window_Background
	# using = Window_Decoration_Spike
	using = TooltipFocus

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	vbox = {
		using = Window_Margins
		# set_parent_size_to_minimum = yes

		header_pattern_interaction = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
			}

			blockoverride "button_close"
			{
				onclick = "[CharacterInteractionNotificationWindow.Close]"
			}

			text_single = {
				position = { 10 0 }
				raw_text = "[CharacterInteractionNotificationWindow.GetContextName]."
			}
		}

		vbox_sender_portrait_message = {
			layoutpolicy_horizontal = expanding
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 10 }
			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Not( CharacterInteractionNotificationWindow.IsAutoAcceptNotification )]"

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						text = "[CharacterInteractionNotificationWindow.GetAnswerRejectText]"
					}
					blockoverride "disabled" {
						visible = "[Not(CharacterInteractionNotificationWindow.CanReject)]"
					}
					blockoverride "dot" { }
					onclick = "[CharacterInteractionNotificationWindow.Reject]"
					enabled = "[CharacterInteractionNotificationWindow.CanReject]"
				}

				button_primary_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						text = "[CharacterInteractionNotificationWindow.GetAnswerAcceptText]"
					}
					blockoverride "disabled" {
						visible = "[Not(CharacterInteractionNotificationWindow.CanAccept)]"
					}
					blockoverride "hotkey" {
						visible = "[CharacterInteractionNotificationWindow.CanAccept]"
					}
					name = "accept_button"
					onclick = "[CharacterInteractionNotificationWindow.Accept]"
					enabled = "[CharacterInteractionNotificationWindow.CanAccept]"
				}
			}

			button_primary_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					text = "[CharacterInteractionNotificationWindow.GetAnswerAcknowledgeText]"
				}
				visible = "[CharacterInteractionNotificationWindow.IsAutoAcceptNotification]"
				name = "acknowledge_button"
				onclick = "[CharacterInteractionNotificationWindow.Acknowledge]"
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					text = "[CharacterInteractionNotificationWindow.GetAnswerBlockText]"
				}
				blockoverride "disabled" {
					visible = "[Not(CharacterInteractionNotificationWindow.CanBeBlocked)]"
				}
				blockoverride "dot" { }
				enabled = "[CharacterInteractionNotificationWindow.CanBeBlocked]"
				visible = "[CharacterInteractionNotificationWindow.CanPotentiallyBeBlocked]"
				tooltip = "[CharacterInteractionNotificationWindow.GetCanBeBlockedTooltip]"
				onclick = "[CharacterInteractionNotificationWindow.Block]"
			}
		}

		vbox_character_interaction_effects = {
			layoutpolicy_vertical = expanding
			visible = "[CharacterInteractionNotificationWindow.GetCharacterInteraction.ShowEffectsInNotification]"
			datacontext = "[CharacterInteractionNotificationWindow.GetEffectsDescription]"
			layoutpolicy_horizontal = expanding
		}
	}
}
