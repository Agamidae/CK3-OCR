######################################################
############## DECISIONS DETAIL VIEW #################
######################################################
@decision_width = 700

window = {
	name = "decisiondetail_view"
	# position = "[DecisionDetailView.GetDynamicPosition]" # can be changed by DECISION_DETAILS_VIEW_POSITION_DEFAULT and DECISION_DETAILS_VIEW_POSITION_COURT in 00_graphics.txt
	using = base_ocr_window

	state = {
		name = _show
		using = Sound_WindowShow_Standard
		# position = "[DecisionDetailView.GetDynamicPosition]"
		on_start = "[GetVariableSystem.Clear('show_decision_step_two')]"
	}

	state = {
		name = _hide
		using = Sound_WindowHide_Standard
	}

	window = {
		using = ocr_window

		vbox = {
			datacontext = "[DecisionDetailView.GetDecision]"
			using = ocr_margins

			state = {
				name = "decisions_detail_refresh"
				alpha = 1
				next = "b"
				on_start = "[GetVariableSystem.Clear('show_decision_step_two')]"
			}

			state = {
				name = "b"
				alpha = 1
			}

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					raw_text = "[DecisionDetailView.GetTitle]."
				}

				blockoverride "button_close"
				{
					onclick = "[DecisionDetailView.Close]"
				}
			}

			error_button = {
				layoutpolicy_horizontal = expanding
			}

			decision_detail_view_step_one_ocr = {}

			decision_detail_view_step_two_ocr = {}
		}
	}

	old_decision_details = { }
}


types DecisionDetailViewTypes
{
	type decision_detail_view_step_one_ocr = vbox
	{
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		visible = "[Not( GetVariableSystem.HasValue( 'show_decision_step_two', 'true' ) )]"

		# vbox = {
		# 	layoutpolicy_horizontal = expanding
		# 	minimumsize = { 550 220 }
		# 	visible = "[Not(DecisionDetailView.IsOpenedFromRoyalCourt) ]"

		# 	background = {
		# 		name = "illustrations"
		# 		texture = "[DecisionDetailView.GetPicture]"
		# 		margin_top = 10
		# 		alpha = 0.7
		# 		using = Mask_Rough_Edges
		# 	}
		# }
		vbox = {
			name = "footer"
			layoutpolicy_horizontal = expanding

			vbox = {
				margin_bottom = 4
				layoutpolicy_horizontal = expanding

				dynamicgridbox = {
					layoutpolicy_horizontal = expanding
					name = "custom_widgets_container"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "cost"
					visible = "[DecisionDetailView.HasCost]"
					raw_text = "[DecisionDetailView.GetCostDescription]."
					layoutpolicy_horizontal = expanding
				}


				button_primary_text = {
					layoutpolicy_horizontal = expanding
					name = "next_step"
					visible = "[DecisionDetailView.GetDecision.HasStepTwo]"
					blockoverride "text" {
						raw_text = "[DecisionDetailView.GetDecision.GetNextStepButtonLabel]"
					}

					tooltip = "[DecisionDetailView.GetConfirmTooltip]"
					onclick = "[GetVariableSystem.Set('show_decision_step_two', 'true')]"

					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_advance"
				}

				button_primary_text = {
					name = "confirm"
					layoutpolicy_horizontal = expanding
					visible = "[Not( DecisionDetailView.GetDecision.HasStepTwo )]"
					blockoverride "text" {
						raw_text = "[DecisionDetailView.GetConfirmText]"
					}

					blockoverride "disabled" {
						visible = "[Not(DecisionDetailView.CanConfirm)]"
					}

					blockoverride "hotkey" {
						visible = "[DecisionDetailView.CanConfirm]"
					}

					enabled = "[DecisionDetailView.CanConfirm]"
					tooltip = "[DecisionDetailView.GetConfirmTooltip]"
					onclick = "[DecisionDetailView.Confirm]"

					default_clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
					clicksound = "[DecisionDetailView.GetConfirmClickSound]"
				}


				button_checked_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[Decision.OnToggleImportantForPlayer]"
					blockoverride "visible" {
						visible = "[Not(Decision.IsImportantForPlayer)]"
					}

					blockoverride "text"
					{
						text = "DECISIONS_VIEW_MAJOR_TOGGLE"
					}
					blockoverride "extra_text"
					{
						raw_text = "."
					}
				}

				expand = { }
			}
		}

		scrollbox = {
			name = "description_scrollarea"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_content"
			{
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					# spacing = 10

					vbox = {
						name = "effect"
						visible = "[DecisionDetailView.HasEffect]"
						layoutpolicy_horizontal = expanding

						text_single = {
							text = "DECISION_DETAIL_EFFECTS"
							layoutpolicy_horizontal = expanding
						}

						text_multi = {
							layoutpolicy_horizontal = expanding
							max_width = @decision_width
							autoresize = yes
							raw_text = "[DecisionDetailView.GetEffectDescription]."
						}
					}

					vbox = {
						name = "requirements"
						visible = "[DecisionDetailView.HasRequirements]"
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "DECISION_DETAIL_REQUIREMENTS"
						}

						text_multi = {
							alwaystransparent = no
							minimumsize = { @decision_width -1 }
							maximumsize = { @decision_width -1 }
							autoresize = yes
							raw_text = "[DecisionDetailView.GetRequirementsDescription]."
						}
					}

					text_single = {
						raw_text = "Description:"
						layoutpolicy_horizontal = expanding
					}

					text_multi = {
						name = "description"
						minimumsize = { @decision_width -1 }
						maximumsize = { @decision_width -1 }
						autoresize = yes
						raw_text = "[DecisionDetailView.GetDescription]."
						using = Font_Size_Small
					}

					expand = { }

				}
			}

			blockoverride "scrollbox_background_fade" {}
		}

		# expand = { }

	}

	type decision_detail_view_step_two_ocr = vbox
	{
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		visible = "[GetVariableSystem.HasValue( 'show_decision_step_two', 'true' )]"

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			dynamicgridbox = {
				name = "custom_widgets_container_step_two"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
			}
		}

		vbox = {
			name = "footer"
			layoutpolicy_horizontal = expanding

			text_single = {
				name = "cost"
				visible = "[DecisionDetailView.HasCost]"
				text = "[DecisionDetailView.GetCostDescription]"
				layoutpolicy_horizontal = expanding
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				button_text = {
					shortcut = go_back
					shortcut = go_back_2
					shortcut = go_back_3
				    blockoverride "text" {
				        raw_text = "Go back, hotkey B."
						align = left
				    }
					onclick = "[GetVariableSystem.Clear('show_decision_step_two')]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
				}

				button_primary_text = {
					name = "step_two_confirm"
					blockoverride "disabled" {
						visible = "[Not(DecisionDetailView.CanConfirm)]"
					}
					blockoverride "text" {
						raw_text = "[DecisionDetailView.GetConfirmText]."
					}
					enabled = "[DecisionDetailView.CanConfirm]"
					tooltip = "[DecisionDetailView.GetConfirmTooltip]"
					tooltip_enabled = "[Not(DecisionDetailView.CanConfirm)]"
					onclick = "[DecisionDetailView.Confirm]"

					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
				}

				expand = { }
			}

			button_checked_text = {
				layoutpolicy_horizontal = expanding
				name = "step_two_major_checkbox"
				onclick = "[Decision.OnToggleImportantForPlayer]"

				blockoverride "visible"
				{
					visible = "[Not(Decision.IsImportantForPlayer)]"
				}

				blockoverride "text"
				{
					text = "DECISIONS_VIEW_MAJOR_TOGGLE"
				}
			}

			expand = { }
		}
	}
}
