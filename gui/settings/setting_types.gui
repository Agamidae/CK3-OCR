types Settings
{
	type jomini_settings_window = window {
		name = "jomini_settings_window"
		size = { 100% 100% }
		movable = no
		layer = confirmation

		state = {
			name = _hide
			on_start = "[GetVariableSystem.Clear('scaled_settings')]"
		}


		using = Animation_ShowHide_Quick
		using = TooltipFocus

		settings_window = {
			scale = "[Select_float( GetVariableSystem.Exists('scaled_settings'), '(float)2', '(float)1')]"
		}
	}

	type settings_window = window {
		size = { 100% 100% }
		button_normal = {
			size = { 100% 100% }
			onclick = "[JominiSettingsWindow.SaveAndClose]"
		}

		widget = {
			# parentanchor = center
			size = { 970 100% }
			alwaystransparent = no

			using = Window_Background_No_Edge

			vbox = {
				using = Window_Margins
				margin_bottom = 12

				header_pattern = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text" {
						raw_text = "Settings window."
					}

					blockoverride "button_close"
					{
						onclick = "[JominiSettingsWindow.SaveAndClose]"
						onclick = "[GetVariableSystem.Clear('scaled_settings')]"
						enabled = "[Not( HasOpenResetReactiveTutorialPopup )]"
					}
				}

				## CONTENT WINDOW ##
				vbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding
						# layoutpolicy_vertical = expanding

						vbox = {
							layoutpolicy_horizontal = expanding

							button_primary_text = {
								blockoverride "text" {
									text = "Save and close"
								}
								onclick = "[JominiSettingsWindow.SaveAndClose]"
								onclick = "[GetVariableSystem.Clear('scaled_settings')]"
								onclick = "[ExecuteConsoleCommand('reload gui/hud.gui')]"
								enabled = "[Not( HasOpenResetReactiveTutorialPopup )]"
								shortcut = confirm
								layoutpolicy_horizontal = expanding
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									text = "SETTINGS_DISCARD_CHANGES"
								}
								blockoverride "dot" {

								}
								onclick = "[JominiSettingsWindow.Restore]"
								onclick = "[GetVariableSystem.Clear('scaled_settings')]"
								enabled = "[JominiSettingsWindow.HasChanged]"
								alpha = "[Select_float(JominiSettingsWindow.HasChanged, '(float)1.0', '(float)0.1' )]"
								min_width = 200
							}

							text_multi = {
								layoutpolicy_horizontal = expanding
								visible = "[JominiSettingsWindow.RequireRestart]"
								margin_right = 10
								autoresize = yes
								max_width = 200
								margin_left = 10
								margin_top = 5
								text = "REQUIRE_RESTART_DESCRIPTION"
								block "require_restart_description" { }
							}

						}

						vbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[JominiSettingsWindow.AccessPages]"

							item = {
								widget = {
									size = { 200 25 }
									layoutpolicy_horizontal = expanding

									button = {
										size = { 200 25 }
										visible = "[ScopedJominiSettingsPage.GetPage.IsSelected]"
										raw_text = "[ScopedJominiSettingsPage.GetPage.GetName] tab, selected."
										default_format = "#low"
										align = left
										margin_left = 10

										frame = 4
										alwaystransparent = yes

										texture = "gfx/interface/buttons/button_tab_vertical.dds"
										spriteType = Corneredtiled
										spriteborder = { 10 10 }
										framesize = { 202 48 }
									}

									button_tab_vertical = {
										visible = "[Not(ScopedJominiSettingsPage.GetPage.IsSelected)]"
										size = { 200 25 }
										align = left

										raw_text = "[ScopedJominiSettingsPage.GetPage.GetName] tab."
										onclick = "[ScopedJominiSettingsPage.AccessPage.OnClick]"
										upframe = "[Select_int32(ScopedJominiSettingsPage.GetPage.IsSelected,'(int32)2','(int32)1')]"
									}
								}
							}
						}

						expand = { }
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_margins"
						{
							margin = { 10 10 }
							margin_bottom = 15
						}

						blockoverride "scrollbox_content"
						{
							dynamicgridbox = {
								name = "settings"
								layoutpolicy_horizontal = expanding
							}
						}
					}
				}
			}

			widget = {
				visible = "[GetVariableSystem.Exists('scaled_settings')]"
				position = { 0 75 }
				size = { 1000 290 }
				background = { using = Background_Area_Border_Solid }
			}

			widget = {
				visible = "[GetVariableSystem.Exists('scaled_settings')]"
				position = { 0 395 }
				size = { 1000 1000 }
				background = { using = Background_Area_Border_Solid }
			}
		}
	}

	type jomini_settings_grouping = container {
		name = "settings_grouping"
		block "settings_grouping" {}

		text_label_left = {
			position = { 10 10 }
			min_width = 400
			text = "[SettingCategory.GetName]"

			block "settings_grouping_name" {}
		}

		dynamicgridbox = {
			#### DO NOT TOUCH OR GAME CRASHES ###
			position = { 10 35 }
			name = "grouping_gridbox"
			block "settings_grouping_gridbox" {}
		}
	}

	type jomini_setting_desc = textbox {
		name = "setting_desc"
		text = "[JominiGUISetting.GetDesc]"
		default_format = "#low"
		fontsize = 16
		# max_width = 300
		size = { -1 20 }
		# margin = { 20 5 }
	}

	type jomini_setting_title = text_single {
		name = "setting_title"
		visible = no#"[JominiGUISetting.ShouldShow]"
		autoresize = yes
		fontsize_min = 14
		using = tooltip_ws
		margin = { 0 0 }
		block "setting_title" {}
		jomini_settings_restart_required_indicator = {
			visible = "[And(And(JominiGUISetting.ShouldShow,PdxSetting.HasChanged),PdxSetting.GetSettingPromoted.RequireRestart)]"
		}
	}

	type setting_segmented_control_button = button {
		text = "[EnumSettingEntry.GetGUIName]"
		align = left|vcenter
		default_format = "#medium"

		margin = { 10 0 }
		minimumsize = { 220 30 }

		onclick = "[SelectEnumWithString(EnumSettingEntry.GetEnumString, EnumSettingEntry.AccessSetting)]"
		visible = "[Not(EnumSettingEntry.IsSelected)]"
		tooltip = "[EnumSettingEntry.GetTooltip]"

		texture = "gfx/interface/buttons/button_sort.dds"
		framesize = { 225 33 }
		spriteType = Corneredtiled
		spriteborder = { 75 11 }
	}

	type setting_segmented_control_active_button = button {
		text = "[EnumSettingEntry.GetGUIName]"
		align = left
		default_format = "#medium"
		margin = { 10 0 }
		minimumsize = { 220 30 }

		onclick = "[SelectEnumWithString(EnumSettingEntry.GetEnumString, EnumSettingEntry.AccessSetting)]"
		visible = "[EnumSettingEntry.IsSelected]"
		tooltip = "[EnumSettingEntry.GetTooltip]"

		texture = "gfx/interface/buttons/button_sort.dds"
		framesize = { 225 33 }
		spriteType = Corneredtiled
		spriteborder = { 75 11 }
	}

	type setting_page_button = button_standard {
		text = "[ScopedJominiSettingsPage.GetPage.GetName]"
		size = { 150 30 }
		align = left
		onclick = "[ScopedJominiSettingsPage.AccessPage.OnClick]"
		upframe = "[Select_int32(ScopedJominiSettingsPage.GetPage.IsSelected,'(int32)2','(int32)1')]"
		block "setting_page_button" {}

		textbox = {
			parentanchor = vcenter|left
			position = { 5 0 }
			block "setting_page_button_text" {}
		}
	}

	type jomini_settings_restart_required_indicator = text_single {

		raw_text = "*"
		tooltip = "REQUIRES_RESTART"
		margin_left = 10
	}

	type jomini_setting_value_scrollbar = container {
		name = "setting_value"
		# minimumsize = { 460 30 }
		visible = "[JominiGUISetting.ShouldShow]"

		flowcontainer = {
			spacing = 3
			direction = vertical

			flowcontainer = {
			    ignoreinvisible = yes
				spacing = 3

				text_single = {
					raw_text = "[PdxSetting.GetTitle],"
				}

				text_single = {
					raw_text = "[PdxValueSetting.GetFormatedValue(PdxSetting.GetSetting)],"
					block "setting_value_eb" { }
				}
			}

			scrollbar = {
				name = "setting_value_scrollbar"
				direction = horizontal
				parentanchor = left
				size = { 145 25 }
				minimumsize = { -1 14 }
				value = "[PdxValueSetting.GetValue(PdxSetting.GetSetting)]"
				block "setting_value_scrollbar" { }

				track = {
					button = { }
				}

				slider = {
					button = { }
				}

				dec_button = {
					button = {
						size = { 70 30 }
						text_single = {
							position = { 1 1 }
							autoresize = yes
							raw_text = " Decrease,"
						}
					}
				}

				inc_button = {
					button = {
						size = { 70 30 }
						text_single = {
							position = { 1 1 }
							autoresize = yes
							raw_text = " Increase."
						}
					}
				}
			}

		}
	}

	type jomini_setting_bool = button {
		name = "setting_bool"
		size = { 220 30 }
		block "setting_bool" { }

		button_text = {
			# name = "setting_bool_cb"
			block "setting_bool_cb" { }
			blockoverride "text" {
				raw_text = "[PdxSetting.GetTitle],"
			}
			blockoverride "extra" {
				text_single = {
					raw_text = " [Select_CString(GetIsChecked(PdxSetting.GetSetting), 'Enabled', 'Disabled')]."
				}
			}
		}

		button_checkbox = {
			size = { 100% 24 }
			alpha = 0
			name = "setting_bool_cb"
			checked = "[GetIsChecked(PdxSetting.GetSetting)]"
			block "setting_bool_cb" {}
		}
	}

	type jomini_setting_callback = widget {
		name = "setting_callback"
		size = { 0 24 }
		allow_outside = yes

		block "setting_callback" {}

		button_standard = {
			size = { 250 28 }
			text = "[PdxSetting.GetTitle]"
			tooltip = "[PdxSetting.GetTooltip]"
			using = tooltip_ws
			name = "setting_callback_button"
			parentanchor = left|vcenter
			block "setting_callback_button" {}
		}
	}

	type jomini_setting_string = container {
		name = "setting_string"
		block "setting_string" {}

		editbox = {
			name = "setting_string_eb"
			text = "[GetStringSettingText(PdxSetting.GetSetting)]"
			using = property_editbox
			parentanchor = left|vcenter
			block "setting_string_eb" {}
		}
	}

	type jomini_setting_enum = flowcontainer {

		### SCROLLAREA DROPDOWN CONTENT ###

		name = "setting_enum"
		visible = "[JominiGUISetting.ShouldShow]"
		# direction = vertical
		ignoreinvisible = yes


		dropdown_menu_standard =
		{
			visible = "[Not(ShouldShowSegmentedControlForSetting(PdxSetting.GetSetting))]"
			name = "setting_enum_dropdown"

			blockoverride "dropdown_size"
			{
				size = { 400 25 }
			}

			blockoverride "dropdown_list_maxsize"
			{
				maximumsize = { 400 900 }
				position = { 50 32 }
			}

			blockoverride "dropdown_properties"
			{
				selectedindex = "[GetEnumIndex(PdxSetting.GetSetting)]"
			}

			blockoverride "dropdown_active_item_properties"
			{
				raw_text = "[PdxSetting.GetTitle], [EnumSettingEntry.GetGUIName]."
				# tooltip = "[EnumSettingEntry.GetTooltip]"
			}

			blockoverride "dropdown_item_properties"
			{
				raw_text = "[EnumSettingEntry.GetGUIName] option."
				# tooltip = "[EnumSettingEntry.GetTooltip]"
			}
		}


		dynamicgridbox = {
			name = "segmented_control"
			flipdirection = yes
			visible = "[ShouldShowSegmentedControlForSetting(PdxSetting.GetSetting)]"
			block "segmented_control" {}
			item = {
				container = {
					setting_segmented_control_button = {}
					setting_segmented_control_active_button = {}
				}
			}
		}
	}
}


#### 	THESE TEMPLATES DEFINE THE SLIDERS	####

template SettingsValueSlider
{
	block "settings_value_slider"
	{
		button = {
			texture = "gfx/interface/scrollbars/scrollbar_slider.dds"
			spriteType = Corneredtiled
			spriteborder = { 0 3 }
			framesize = { 12 40 }
			size = { 12 20 }
		}
	}
}

template SettingsValueTrack
{
	block "settings_value_track"
	{
		button = {
			texture ="gfx/interface/progressbars/progress_black.dds"
			size = { 20 14 }
			spriteType = Corneredtiled
			spriteborder = { 6 6 }
			alwaystransparent = yes
		}
	}
}

template SettingsValueIncButton
{
	block "settings_value_inc_button"
	{

		button_select_arrow = {
			size = { 20 20 }
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_increment"
		}
	}
}

template SettingsValueDecButton
{
	block "settings_value_dec_button"
	{

		button_select_arrow = {
			mirror = horizontal
			size = { 20 20 }
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
		}
	}
}
