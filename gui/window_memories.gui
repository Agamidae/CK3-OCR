######################################################
################# MEMORIES VIEW ######################
######################################################

window = {
	name = "memories_window"
	size = { 750 100% }
	parentanchor = center
	datacontext = "[MemoriesWindow.GetCharacter]"

	layer = top

	using = Window_Movable
	using = Window_Background
	using = Window_Decoration_Spike
	using = Animation_ShowHide_Standard
	using = TooltipFocus

	vbox = {
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding
			size = { 0 30 }

			blockoverride "header_text"
			{
				# text = "MEMORIES_WINDOW_HEADING"
				flowcontainer = {
					text_single = {
						raw_text = "MEMORIES_WINDOW_HEADING"
					}
					text_single = {
						raw_text = ", [GetDataModelSize(MemoriesWindow.GetFilteredMemories)]."
					}
				}
			}

			blockoverride "button_close"
			{
				onclick = "[MemoriesWindow.Close]"
				size = { 0 0 }
			}

			# button_pin = {
			# 	parentanchor = right|vcenter
			# 	position = { -80 -4 }
			# 	name = "button_pin"
			# 	visible = "[Not( MemoriesWindow.IsPinned )]"
			# 	onclick = "[MemoriesWindow.TogglePinned]"
			# 	tooltip = "MEMORIES_WINDOW_PIN_IT"
			# 	using = tooltip_se
			# }
			#
			# button_unpin = {
			# 	parentanchor = right|vcenter
			# 	position = { -80 -4 }
			# 	name = "button_unpin"
			# 	visible = "[MemoriesWindow.IsPinned]"
			# 	onclick = "[MemoriesWindow.TogglePinned]"
			# 	tooltip = "MEMORIES_WINDOW_PIN_IT"
			# 	using = tooltip_se
			# }
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			datacontext = "[GetIllustration( 'character_private' )]"

			background = {
				texture = "[Illustration.GetTexture( Character.Self )]"
				margin = { -5 0 }
				fittype = centercrop
				alpha = 1

				using = Mask_Rough_Edges

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
					blend_mode = alphamultiply
					mirror = vertical
				}
			}

			# hbox = {
			#
			# 	portrait_button = {
			# 		layoutpolicy_horizontal = preferred
			# 		block "portrait_size"
			# 		{
			# 			size = { 220 285 }
			# 		}
			# 		using = portrait_base
			#
			# 		portrait_texture = "[Character.GetAnimatedPortrait( 'environment_council', 'camera_torso', 'chancellor', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"
			# 		mask = "gfx/portraits/portrait_mask_council.dds"
			# 		effectname = "NoHighlight"
			#
			# 		block "mask" {
			# 			mask = "gfx/portraits/portrait_mask_council.dds"
			# 		}
			# 	}
			# }

			hbox = {
				layoutpolicy_horizontal = expanding

				button_text = {
					spacing = 3
					# layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Sorted by [Select_CString( MemoriesWindow.IsListOrderDescending, 'newest', 'oldest')]."
					}
					onclick = "[MemoriesWindow.ToggleListOrder]"
				}

				button_text = {
					blockoverride "text" {
						raw_text = "MEMORIES_WINDOW_COPY_TO_CLIPBOARD"
					}
					blockoverride "dot_nb" { }
					onclick = "[MemoriesWindow.CopyMemoriesToClipboard]"
				}

				expand = { }
			}

			hbox = {
				visible = "[Character.IsDeadAndValid]"
				layoutpolicy_horizontal = expanding
				margin_left = 10
				margin_top = 10
				margin_right = 10
				margin_bottom = 10
				background = {
					using = Background_Area_Dark
				}

				# icon = {
				# 	name = "is_dead"
				# 	size = { 20 20 }
				# 	texture = "[Character.GetDeathReasonIcon]"
				# }

				text_multi = {
					align = left
					margin_left = 10
					# layoutpolicy_horizontal = expanding
					autoresize = yes
					layoutpolicy_vertical = expanding
					text = "CHARACTER_DEAD_TOOLTIP"
					max_width = 600
				}
				dot = { }

				expand = { }
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_left = 4
			margin_right = 4

			vbox = {
				name = "paper_contract"
				margin_top = 12
				margin_bottom = 12
				margin_right = -3

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				# using = Background_Letter
				spacing = 4

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_background" {}
						blockoverride "scrollbox_background_fade" {}
						blockoverride "scrollbox_content" {
							margin_top = 0
							margin_bottom = 0

							vbox = {
								datamodel = "[MemoriesWindow.GetFilteredMemories]"
								layoutpolicy_horizontal = expanding
								spacing = 0

								item = {

									hbox = {
										layoutpolicy_horizontal = expanding
										margin_bottom = 5
										margin_left = 10
										margin_right = 10
										background = {
											using = Background_Area
											alpha = 0.4
										}

										# vbox = {
										# 	size = { 26 26 }
										# 	margin_top = 3
										# 	margin_right = 5
										# 	icon = {
										# 		size = { 26 26 }
										# 		texture = "[CharacterMemory.GetType.GetIcon]"
										# 		alwaystransparent = yes
										# 		alpha = 0.7
										# 		tooltip = "[CharacterMemory.GetName|U]"
										# 		using = tooltip_ws
										# 	}
										# }

										text_multi = {
											max_width = 630
											autoresize = yes
											align = left
											raw_text = "[CharacterMemory.GetDescription|U], [CharacterMemory.GetCreationDate.GetString]."
											margin_right = 5
											elide = right
											# default_format = "#light_background"
										}


										# text_single = {
										#
										# 	raw_text = ""
										# 	size = { 200 0 }
										# 	align = right
										# 	elide = right
										# 	# default_format = "#light_background"
										# }

										expand = {}
									}
								}
							}
						}

						blockoverride "scrollbox_empty"
						{
							visible = "[IsDataModelEmpty( MemoriesWindow.GetFilteredMemories )]"
							text = "CHARACTER_HAS_NO_MEMORIES"
						}
					}
				}
			}
		}
	}
}
