template fullscreen_window {
	margin = { 10 5 }
}

template "char_click" {
	onclick = "[DefaultOnCharacterClick(Character.GetID)]"
	onclick = "[DefaultOnCharacterClick(Character.GetID)]"
	onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
}

template realm_char_name {
	raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip], [Character.GetTitledFirstNameNicknamedNoTooltip]."
}

template realm_char_name_no_nick {
	raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip], [Character.GetTitledFirstNameNoTooltip]."
}

template title_pan {
	onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
}

template title_pan_right {
	onrightclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
	button_ignore = none
}
template title_click {
	onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
	onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
}

template prov_click {
	onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Title.GetProvince.GetId))]"
	onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetProvince.GetTitle.GetID)]"
}

types OcrSharedTypes {

	type mod_version_preview = flowcontainer {
		direction = vertical

		background = {
			texture = "gfx/interface/component_masks/mask_rough_edges.dds"
		    spriteType = Corneredtiled
		    spriteborder = { 20 20 }
		    color = { 0 0 0 0.8 }
		    texture_density = 2
			margin = { 10 5 }
		}

		mod_version = { }

		mod_changes = { }
	}

	type mod_version = text_single {
		raw_text = "mod_version"
	}
	type mod_changes = text_multi {
		autoresize = yes
		text = "mod_changes"
		max_width = 900
	}

	type dot = text_single {
		raw_text = "."
	}
	type space = text_single {
		raw_text = " "
	}

	type button_text = button {
		size = { 0 22 }
		button_ignore = none

		block "bg" {
			background = { alpha = 0.1 using = Background_Area_Border_Solid margin = { 1 1 } margin_top = -4 }
		}

		flowcontainer = {
			# margins are necessary, because NVDA places the cursor right on the edge of the word, where the button isn't clickable
			block "margins" {
				margin_left = 4
				margin_top = 1
				spacing = 0
			}

			ignoreinvisible = yes
			resizeparent = yes
			alwaystransparent = yes

			text_single = {
				raw_text = "Can't"
				margin_right = 3
				block "disabled" {
					visible = no
				}
			}

			block "pre" { }

			text_single = {
				block "text" {
					raw_text = ""
				}
			}

			block "extra" { }

			block "primary" {
				dot = {
					block "dot" {
						visible = no
					}
				}
			}
		}
	}
	type button_primary_text = button_text {
		shortcut = "confirm"

		blockoverride "primary" {
			text_single = {
				block "hotkey" { }
				raw_text = ", hotkey Enter"
			}
			block "dot" {
				dot = { }
			}
		}
	}


	type char_name = button_text {
		block "onclick" {
			onclick = "[DefaultOnCharacterClick(Character.GetID)]"
			onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
		}

		blockoverride "text" {
			raw_text = "[Character.GetNameNoTooltip]."
			block "width" {
				max_width = 450
			}
		}
	}
	type realm_name = button_text {
		block "onclick" {
			onclick = "[DefaultOnCharacterClick(Character.GetID)]"
			onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
		}
		blockoverride "text" {
			raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip], [Character.GetTitleAsName] [Character.GetFirstNameNoTooltip]."
			block "width" {
				max_width = 450
			}
		}
	}

	type button_check_text = button {
		button_ignore = none
		background = { using = Background_Area_Dark margin = { 4 2 }}

		flowcontainer = {
			margin_left = 5
			spacing = 0
			ignoreinvisible = yes
			resizeparent = yes

			flowcontainer = {
				block "enabled" {
				}
				ignoreinvisible = yes
				text_single = {
										raw_text = "Click to"
				}
				text_single = {
					raw_text = " "
				}
				text_single = {
					raw_text = "un"
					block "visible" { }
									}
				text_single = {
					raw_text = "check"
									}
				text_single = {
					raw_text = " "
									}
			}

			text_single = {
				raw_text = "Disabled, "
								block "disabled" {
					visible = no
				}
			}
		}
	}

	type button_checkbox_text = button_group {

        using = tooltip_se
        clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"

        flowcontainer = {
			ignoreinvisible = yes
			# spacing = 8
			button_check_text = {

			}

			text_single = {
				# parentanchor = vcenter
								# default_format = "#clickable"

				block "text" {
					text = "DEFAULT_TEXT"
				}
				alwaystransparent = yes
			}

			text_single = {
				block "extra_text" {
					visible = no
					raw_text = ""
				}
							}

			# text_single = {
			# 	raw_text = ",  "
			# 				# }
			#
			# text_single = {
			# 	raw_text = "Un"
			# 				# 	block "checkbox" {
			# 	}
			# }
			#
            # text_single = {
			# 	raw_text = "checked."
			# 				# }
        }
    }

	type button_checked = button {
		button_ignore = none
		background = { using = Background_Area_Dark margin = { 4 2 }}

		flowcontainer = {
			margin_left = 5
			spacing = 0
			ignoreinvisible = yes
			resizeparent = yes

			flowcontainer = {
				block "enabled" {
				}
				ignoreinvisible = yes
				text_single = {
					raw_text = " "
				}
				text_single = {
					raw_text = "un"
					block "visible" { }
				}
				text_single = {
					raw_text = "checked,"
				}
				text_single = {
					raw_text = " "
				}
			}

			text_single = {
				raw_text = "Disabled, "
				block "disabled" {
					visible = no
				}
			}
		}
	}

	type button_checked_text = button_group {

        using = tooltip_se
        clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"

        flowcontainer = {
			ignoreinvisible = yes
			# spacing = 8
			button_checked = {

			}

			text_single = {
				# parentanchor = vcenter
								# default_format = "#clickable"

				block "text" {
					text = "DEFAULT_TEXT"
				}
				alwaystransparent = yes
			}

			text_single = {
				block "extra_text" {
					visible = no
					raw_text = ""
				}
							}

			dot = {
				block "dot" {
					visible = no
				}
			}

			block "extra" { }

			# text_single = {
			# 	raw_text = ",  "
			# 				# }
			#
			# text_single = {
			# 	raw_text = "Un"
			# 				# 	block "checkbox" {
			# 	}
			# }
			#
            # text_single = {
			# 	raw_text = "checked."
			# 				# }
        }
    }

	type hotkeys_window = flowcontainer {
		direction = vertical
		parentanchor = vcenter
		margin = { 20 10 }
		position = { 750 0 }
		background = { using = Background_Area_Dark }

		text_single = {
			raw_text = "Hotkeys."
		}
		text_single = {
			raw_text = "R, your resources."
		}
		text_single = {
			raw_text = "F 1, Your character."
		}
		text_single = {
			raw_text = "F2, Realm."
		}
		text_single = {
			raw_text = "F3, Military."
		}
		text_single = {
			raw_text = "F4, Council."
		}
		text_single = {
			raw_text = "F5, Courtiers."
		}
		text_single = {
			raw_text = "F6, Intrigue."
		}
		text_single = {
			raw_text = "F7, Factions."
		}
		text_single = {
			raw_text = "F 8, Decisions."
		}
		text_single = {
			raw_text = "Escape, close any window."
		}
		text_single = {
			raw_text = "Tab, situation suggestions."
		}
		text_single = {
			raw_text = "O, outliner. Shows armies during war."
		}
		text_single = {
			raw_text = "Space, pause or unpause."
		}
		# text_single = {
		# 	raw_text = "X, hide or show all tooltips."
		# }
		text_single = {
			raw_text = "1 through 5, set game speed."
		}
		text_single = {
			raw_text = "Z and X, decrease or increase speed."
		}
		text_single = {
			raw_text = "B, go to the previous window. Works with characters, counties, titles."
		}
		text_single = {
			raw_text = "Right-click a character name, open interactions. You can also left click it in the character window."
		}
		text_single = {
			raw_text = "Shift S, your capital."
		}
		text_single = {
			raw_text = "Ctrl D, dismiss tooltips, requires Autohotkey."
		}
		text_single = {
			raw_text = "Shift 1, click in the center of the screen. Use for council tasks. Autohotkey."
		}
		text_single = {
			raw_text = "Control 2, right-click the center. Use it for moving armies. Autohotkey."
		}
		text_single = {
			raw_text = "Shift 3, same, but adds the move order, so you can queue multiple. Autohotkey."
		}
		text_single = {
			raw_text = "Control G, selects armies in the center of the screen. Press G to merge them. Autohotkey."
		}
		text_single = {
			raw_text = "Control F, performs control left click. Needed sometimes, to raise armies without splitting them. Autohotkey."
		}
		text_single = {
			raw_text = "Control L, lifestyle window."
		}
		text_single = {
			raw_text = "i, Inventory."
		}
		text_single = {
			raw_text = "F9, Encyclopedia."
		}
		text_single = {
			raw_text = "C, character finder."
		}
		text_single = {
			raw_text = "V, title finder."
		}
		text_single = {
			raw_text = "F 11, toggle debug mode. Enables the console and cheat character interactions."
		}
		# text_single = {
		# 	raw_text = "Page Down, Page Up, zoom in, zoom out."
		# }
		# text_single = {
		# 	raw_text = "Y, show tooltips."
		# }
	}

	type error_button = button_text {
		visible = "[Not(ReleaseMode)]"
		blockoverride "text" {
			raw_text = "Errors: [NumberOrErrors]"
		}
		onclick = "[ClearErrorLog]"
	}


	#experimental/unused
	type block_tooltip = button {
		visible = "[GetVariableSystem.Exists('enable_tooltips')]"
		tooltipwidget = {
			widget = {
				visible = "[GetVariableSystem.Exists('enable_tooltips')]"
			}
		}
		tooltip_enabled = "[GetVariableSystem.Exists('enable_tooltips')]"
		size = { 100% 100% }
		alwaystransparent = yes
	}

	type hide_tooltip = widget {
		alwaystransparent = yes
		size = { 0 1080 }
		visible = "[GetVariableSystem.Exists('hide_all_tooltips')]"
	}

}