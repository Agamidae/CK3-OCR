template window_focus {
	state = {
		name = _mouse_enter
		on_start = "[PdxGuiWidget.FindChild('cover').Show]"
	}

	state = {
		name = _mouse_leave
		on_start = "[PdxGuiWidget.FindChild('cover').Hide]"
	}

	widget = {
		visible = "[Not(GetVariableSystem.Exists('window_focus'))]"
		size = { 100% 100% }
		widget = {
			parentanchor = center
			name = "cover"
			visible = no
			size = { 3840 2160 }
			background = {
				margin = { 10 10 }
				using = Background_Area_Solid
			}
		}
	}
}

template fullscreen_window {
	margin = { 10 5 }
}

template "char_click" {
	onclick = "[DefaultOnCharacterClick(Character.GetID)]"
	onclick = "[DefaultOnCharacterClick(Character.GetID)]"
	onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
}

template title_pan {
	onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
}

template title_pan_right {
	onrightclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
	button_ignore = none
}
template title_click {
	onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
	onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
}

template prov_click {
	onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Title.GetProvince.GetId))]"
	onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetProvince.GetTitle.GetID)]"
}

types OcrSharedTypes {

	type mod_version_preview = flowcontainer {
		direction = vertical

		background = {
			texture = "gfx/interface/component_masks/mask_rough_edges.dds"
		    spriteType = Corneredtiled
		    spriteborder = { 20 20 }
		    color = { 0 0 0 0.8 }
		    texture_density = 2
			margin = { 10 5 }
		}

		mod_version = { }

		mod_changes = { }
	}

	type mod_version = text_single {
		raw_text = "mod_version"
	}
	type mod_changes = text_multi {
		autoresize = yes
		text = "mod_changes"
		max_width = 900
	}
	type dot = text_single {
		# align = nobaseline
		raw_text = "."
	}

	type space = text_single {
		raw_text = " "
	}
	type dot_nb = text_single {
		align = nobaseline
		raw_text = "."
	}


	type button_text = button {
		size = { 0 22 }
		button_ignore = none
		block "bg" {

			background = { using = Background_Area_Border_Solid margin = { 1 1 } margin_top = -4 }
		}

		flowcontainer = {
			block "margins" {
				margin_left = 4
				margin_top = 2
				spacing = 0
			}
			ignoreinvisible = yes
			resizeparent = yes

			block "pre" { }

			text_single = {
				align = nobaseline
				block "text" {
					raw_text = ""
					# raw_text = "[Character.GetNameNoTooltip]."
				}
			}

			text_single = {
				raw_text = ",  Disabled"
				block "disabled" {
					visible = no
				}
			}

			block "extra" {

			}

			dot = {
				# margin_top = -2
				block "dot" {
					visible = no
				}
			}
			dot_nb = {
				block "dot_nb" {
					visible = no
				}
			}
		}
	}

	type button_text_cant = button {
		size = { 0 22 }
		button_ignore = none
		background = { using = Background_Area_Dark margin = { 4 2 }}

		flowcontainer = {
			margin_left = 5
			margin_top = 1
			spacing = 0
			ignoreinvisible = yes
			resizeparent = yes

			text_single = {
				raw_text = "Can't"
				align = nobaseline
				block "disabled" {
					visible = no
				}
			}

			block "pre" { }

			text_single = {
				raw_text = " "
				block "disabled" {
					visible = no
				}
			}

			text_single = {
				align = nobaseline
				block "text" {
					raw_text = ""
					# raw_text = "[Character.GetNameNoTooltip]."
				}
			}

			block "extra" {

			}

			dot = {
				# margin_top = -2
				block "dot" {
					visible = no
				}
			}
			dot_nb = {
				block "dot_nb" {
					visible = no
				}
			}
		}
	}

	type button_primary_text = button {
		size = { 0 22 }
		button_ignore = none
		background = { using = Background_Area_Dark margin = { 4 2 }}
		shortcut = "confirm"

		flowcontainer = {
			margin_left = 5
			margin_top = 1
			spacing = 0
			ignoreinvisible = yes
			resizeparent = yes

			text_single = {
				raw_text = "Can't"
				margin_right = 3
				block "disabled" {
					visible = no
				}
			}

			text_single = {
				block "text" {
					raw_text = ""
				}
			}

			block "extra" {

			}

			text_single = {
				block "hotkey" { }
				raw_text = ", hotkey Enter"
			}
			block "dot" {
				dot = { }
			}
		}
	}

	type button_check_text = button {
		button_ignore = none
		background = { using = Background_Area_Dark margin = { 4 2 }}

		flowcontainer = {
			margin_left = 5
			spacing = 0
			ignoreinvisible = yes
			resizeparent = yes

			flowcontainer = {
				block "enabled" {
				}
				ignoreinvisible = yes
				text_single = {
					align = nobaseline
					raw_text = "Click to"
				}
				text_single = {
					raw_text = " "
				}
				text_single = {
					raw_text = "un"
					block "visible" { }
					align = nobaseline
				}
				text_single = {
					raw_text = "check"
					align = nobaseline
				}
				text_single = {
					raw_text = " "
					align = nobaseline
				}
			}

			text_single = {
				raw_text = "Disabled, "
				align = nobaseline
				block "disabled" {
					visible = no
				}
			}
		}
	}

	type button_checkbox_text = button_group {

        using = tooltip_se
        clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"

        flowcontainer = {
			ignoreinvisible = yes
			# spacing = 8
			button_check_text = {

			}

			text_single = {
				# parentanchor = vcenter
				align = nobaseline
				# default_format = "#clickable"

				block "text" {
					text = "DEFAULT_TEXT"
				}
				alwaystransparent = yes
			}

			text_single = {
				block "extra_text" {
					visible = no
					raw_text = ""
				}
				align = nobaseline
			}

			# text_single = {
			# 	raw_text = ",  "
			# 	align = nobaseline
			# }
			#
			# text_single = {
			# 	raw_text = "Un"
			# 	align = nobaseline
			# 	block "checkbox" {
			# 	}
			# }
			#
            # text_single = {
			# 	raw_text = "checked."
			# 	align = nobaseline
			# }
        }
    }

	type button_checked = button {
		button_ignore = none
		background = { using = Background_Area_Dark margin = { 4 2 }}

		flowcontainer = {
			margin_left = 5
			spacing = 0
			ignoreinvisible = yes
			resizeparent = yes

			flowcontainer = {
				block "enabled" {
				}
				ignoreinvisible = yes
				text_single = {
					raw_text = " "
				}
				text_single = {
					raw_text = "un"
					block "visible" { }
					align = nobaseline
				}
				text_single = {
					raw_text = "checked,"
					align = nobaseline
				}
				text_single = {
					raw_text = " "
					align = nobaseline
				}
			}

			text_single = {
				raw_text = "Disabled, "
				align = nobaseline
				block "disabled" {
					visible = no
				}
			}
		}
	}

	type button_checked_text = button_group {

        using = tooltip_se
        clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"

        flowcontainer = {
			ignoreinvisible = yes
			# spacing = 8
			button_checked = {

			}

			text_single = {
				# parentanchor = vcenter
				align = nobaseline
				# default_format = "#clickable"

				block "text" {
					text = "DEFAULT_TEXT"
				}
				alwaystransparent = yes
			}

			text_single = {
				block "extra_text" {
					visible = no
					raw_text = ""
				}
				align = nobaseline
			}

			dot = {
				block "dot" {
					visible = no
				}
			}

			dot_nb = {
				block "dot_nb" {
					visible = no
				}
			}

			block "extra" { }

			# text_single = {
			# 	raw_text = ",  "
			# 	align = nobaseline
			# }
			#
			# text_single = {
			# 	raw_text = "Un"
			# 	align = nobaseline
			# 	block "checkbox" {
			# 	}
			# }
			#
            # text_single = {
			# 	raw_text = "checked."
			# 	align = nobaseline
			# }
        }
    }


	type char_name = button {
		background = {
			using = Background_Area_Border_Solid
			margin_top = -1
		}
		size = { 0 22 }
		button_ignore = none
		# using = tooltip_ne
		block "onclick" {
			onclick = "[DefaultOnCharacterClick(Character.GetID)]"
			onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
		}

		text_single = {
			margin_left = 3
			align = nobaseline
			resizeparent = yes
			block "align" { }
			block "text" {
				raw_text = "[Character.GetNameNoTooltip]."
				block "width" {
					max_width = 450
				}
			}
		}
	}

	type char_name_extra = button {
		block "bg" {
			background = { using = Background_Area_Border_Solid }
		}
		size = { 0 22 }
		button_ignore = none
		# using = tooltip_ne
		block "onclick" {
			onclick = "[DefaultOnCharacterClick(Character.GetID)]"
			onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
		}
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
		# onrightclick = "[PdxGuiWidget.TriggerAnimation('sound')]"

		# state = {
		# 	name = sound
		# 	soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
		# 	# start_sound = {
		# 	# }
		# }

		flowcontainer = {
			margin_left = 3
			spacing = 3
			ignoreinvisible = yes
			resizeparent = yes

			block "pre" { }

			text_single = {
				block "text" {
					raw_text = "[Character.GetNameNoTooltip]."
				}
				block "width" {
					max_width = 300
				}
			}

			block "extra" {

			}

			# block "dot" {
			# 	dot = { }
			# }
		}
	}

	type realm_name = button {
		size = { 0 22 }
		button_ignore = none
		block "onclick" {
			onclick = "[DefaultOnCharacterClick(Character.GetID)]"
			onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
		}
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
		background = { using = Background_Area_Dark }

		flowcontainer = {
			margin_left = 3
			spacing = 3
			ignoreinvisible = yes
			resizeparent = yes

			block "pre" { }

			text_single = {
				raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip], "
			}

			text_single = {
				raw_text = " [Character.GetTitleAsName] [Character.GetFirstNameNicknamedNoTooltip]."
				block "width" {
					max_width = 300
				}
			}

			block "extra" {
			}
		}
	}

	type hotkeys_window = flowcontainer {
		direction = vertical
		parentanchor = vcenter
		margin = { 20 10 }
		position = { 750 0 }
		background = { using = Background_Area_Dark }

		text_single = {
			raw_text = "Hotkeys."
		}
		text_single = {
			raw_text = "R: your resources."
		}
		text_single = {
			raw_text = "F1: Your character."
		}
		text_single = {
			raw_text = "F2: Realm."
		}
		text_single = {
			raw_text = "F3: Military."
		}
		text_single = {
			raw_text = "F4: Council."
		}
		text_single = {
			raw_text = "F5: Courtiers."
		}
		text_single = {
			raw_text = "F6: Intrigue."
		}
		text_single = {
			raw_text = "F7: Factions."
		}
		text_single = {
			raw_text = "F8: Decisions."
		}
		text_single = {
			raw_text = "Escape: close any window."
		}
		text_single = {
			raw_text = "Tab: situation suggestions."
		}
		text_single = {
			raw_text = "O: outliner. Shows armies during war."
		}
		text_single = {
			raw_text = "Space: pause or unpause."
		}
		text_single = {
			raw_text = "Z, X: lower or raise game speed."
		}
		text_single = {
			raw_text = "1 through 5: set game speed."
		}
		text_single = {
			raw_text = "B: go to the previous window. Works with characters, counties, titles."
		}
		text_single = {
			raw_text = "Right-click a character name: open interactions."
		}
		text_single = {
			raw_text = "Shift S: your capital."
		}
		text_single = {
			raw_text = "Ctrl+Shift D: dismiss tooltips, requires Autohotkey."
		}
		text_single = {
			raw_text = "Shift 1: center the cursor and left-click. Use it for council tasks. Autohotkey."
		}
		text_single = {
			raw_text = "Shift 2: center the cursor and right-click. Use it for moving armies. Autohotkey."
		}
		text_single = {
			raw_text = "Control G: selects armies in the center of the screen. Press G to merge them. Autohotkey."
		}
		text_single = {
			raw_text = "Control F: performs control left click. Needed sometimes, to raise armies without splitting them. Autohotkey."
		}
		text_single = {
			raw_text = "Control Shift C: center the cursor, Autohotkey."
		}
		text_single = {
			raw_text = "Control L: lifestyle window."
		}
		text_single = {
			raw_text = "I: Inventory."
		}
		text_single = {
			raw_text = "F9: Encyclopedia."
		}
		text_single = {
			raw_text = "C: character finder."
		}
		text_single = {
			raw_text = "V: title finder."
		}
		text_single = {
			raw_text = "Home: zoom in and center the map on your capital."
		}
		text_single = {
			raw_text = "F11: toggle debug mode. Enables the console and cheat character interactions."
		}
		# text_single = {
		# 	raw_text = "Page Down, Page Up: zoom in, zoom out."
		# }
		# text_single = {
		# 	raw_text = "Y: show tooltips."
		# }
	}

}