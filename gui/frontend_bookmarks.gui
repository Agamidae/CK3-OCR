widget = {
	name = "frontend_bookmarks"
	size = { 100% 100% }

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		on_start = "[PdxGuiTriggerAllAnimations('bookmarks_bars_appear')]"
		on_start = "[GetVariableSystem.Clear( 'show_character_info')]"
		on_finish = "[PdxGuiTriggerAllAnimations('bookmarks_buttons_shimmer')]"
		on_finish = "[SetIronmanEnabledStatus( '(bool)no' )]"
		on_finish = "[GetVariableSystem.Set('set_last_applied_ironman_mode', 'true' )]"
		start_sound = {
			soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_topbar_slide"
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
	}

	widget = {
		parentanchor = center
		size = { 100% 100% }
		scale = 1
		allow_outside = yes

		state = {
			name = "bookmarks_game_start_selected_character"
			delay = 1.45
			on_finish = "[GameSetup.OnStart]"
		}

		state = {
			name = "bookmarks_game_start_any_character"
			delay = 1.45
			on_finish = "[GameSetup.OnCustomStart]"
		}

		widget = {
			parentanchor = center
			size = { 100% 100% }
			# scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"

			state = {
				name = "bookmark_change"
				alpha = 0.7
				next = "fadein"
			}

			state = {
				name = "fadein"
				using = Animation_FadeIn_Standard
			}

			widget = {
				name = "background_map"
				parentanchor = center
				size = { 1920 1080 }
				alpha = 0.1

				state = {
					name = "bookmarks_game_start"
					delay = 0.35
					duration = 1.1

					bezier = { 0.8 0 1 1 }
					scale = 10
				}

				state = {
					name = "bookmarks_reset"
					duration = 0.3

					bezier = { 0.8 0 1 1 }
					scale = 1
				}

				icon = {
					name = "bookmark_background"
					size = { 100% 100% }
					texture = "[GameSetup.GetSelectedBookmark.GetBackground]"

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_seamless_torn_edge_horizontal.dds"
						spriteType = corneredtiled
						spriteborder_top = 1080
						blend_mode = alphamultiply
					}

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_seamless_torn_edge_horizontal.dds"
						spriteType = corneredtiled
						spriteborder_top = 1080
						mirror = vertical
						blend_mode = alphamultiply
					}
				}

				icon = {
					name = "character_selection"
					visible = "[GameSetup.HasSelectedCharacter]"
					texture = "[GameSetup.GetSelectedCharacterGUI.GetCharacter.GetLocationImage]"
					size = { 100% 100% }

					state = {
						name = "_show"
						using = Animation_FadeIn_Quick
						next = pulse_a
					}

					state = {
						name = "pulse_a"
						alpha = 1
						duration = 1
						next = pulse_b
						using = Animation_Curve_Default
					}

					state = {
						name = "pulse_b"
						alpha = 0.7
						duration = 1
						next = pulse_a
						using = Animation_Curve_Default
					}
				}

				icon = {
					name = "character_over"
					visible = "[GameSetup.HasHoveredCharacter]"
					texture = "[GameSetup.GetHoveredCharacterGUI.GetCharacter.GetLocationImage]"
					size = { 100% 100% }
					alpha = 0.3

					state = {
						name = "_show"
						using = Animation_FadeIn_Quick
					}

					state = {
						name = "_hide"
						using = Animation_FadeOut_Standard
					}
				}
			}

			icon = {
				size = { 200 200 }
				parentanchor = center
				texture = "gfx/interface/colors/white.dds"
				color = { 0.85 0.8 0.75 1 }
				alpha = 0
				scale = 1

				modify_texture = {
					name = "mask"
					texture = "gfx/interface/icons/map_coa/ally_icon.dds"
					blend_mode = alphamultiply
					rotate_uv = 0
				}

				state = {
					name = "bookmarks_game_start"
					delay = 0.35
					duration = 1
					scale = 25

					animation = {
						bezier = { 0 1 1 1 }
						alpha = 1
					}

					animation = {
						bezier = { 0 0 1 1 }

						modify_texture = {
							name = "mask"
							rotate_uv = 180
						}
					}
				}

				state = {
					name = "bookmarks_reset"
					duration = 0.4
					scale = 1
					on_start = "[GameSetup.ResetView]"

					animation = {
						bezier = { 0 1 1 1 }
						alpha = 0
					}

					animation = {
						bezier = { 0 0 1 1 }

						modify_texture = {
							name = "mask"
							rotate_uv = 0
						}
					}
				}
			}
		}

		widget = {
			parentanchor = center
			# size = "[GetResolutionWithAspectRatio]"
			size = { 100% 100% }
			# scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"
			allow_outside = yes

			### Top Bar
			####################################################################
			vbox = {
				margin = { 5 5 }
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				flowcontainer = {
					direction = vertical
					layoutpolicy_horizontal = expanding
					ignoreinvisible = yes

					# button_text = {
					#     blockoverride "text" {
					#         raw_text = "Errors: [NumberOrErrors]"
					#     }
					# 	onclick = "[ClearErrorLog]"
					# 	visible = "[Not(ReleaseMode)]"
					# }

					button_primary_text = {
						datacontext = "[GameSetup.GetSelectedCharacterGUI]"
						visible = "[GameSetup.HasSelectedCharacter]"

						name = "start_button"
						onclick = "[GameSetup.StartGame]"
						onclick = "[PdxGuiTriggerAllAnimations('bookmarks_game_start')]"
						onclick = "[PdxGuiTriggerAllAnimations('bookmarks_game_start_selected_character')]"
						onclick = "[PdxGuiTriggerAllAnimations('bookmarks_hide_any_character')]"
						onclick = "[PdxGuiTriggerAllAnimations('start_game_audio')]"
						enabled = "[GameSetup.CanStart]"
						# tooltip = "[GameSetup.PlayTooltip]"

						blockoverride "text" {
							raw_text = "START"
						}

						blockoverride "extra" {
							text_single = {
								raw_text = " as [BookmarkCharacterGUI.GetCharacter.GetName]."
								align = left
							}
						}

						state = {
							name = start_game_audio
							duration = 0.1

							start_sound = {
								soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
							}
						}
					}

					### Custom Ruler
					button_text = {
						layoutpolicy_horizontal = expanding
						name = "pick_any_character_button"
						blockoverride "text" {
							text = "PICK_ANY_CHARACTER"
						}

						enabled = "[GameSetup.IsCurrentBookmarkPlayable]"
						onclick = "[PdxGuiTriggerAllAnimations('bookmarks_game_start')]"
						onclick = "[PdxGuiTriggerAllAnimations('bookmarks_hide_selected_character')]"
						onclick = "[PdxGuiTriggerAllAnimations('bookmarks_game_start_any_character')]"

						state = {
							name = _mouse_hierarchy_enter
							on_start = "[PdxGuiTriggerAllAnimations('unknown_character_hover_enter')]"
							on_start = "[PdxGuiWidget.FindChild('banner_hover_glow').TriggerAnimation('unknown_character_hover_enter')]"
							on_start = "[PdxGuiWidget.FindChild('unknown_portrait_glow').TriggerAnimation('unknown_character_hover_enter')]"
							on_start = "[PdxGuiWidget.FindChild('button_widget').TriggerAnimation('unknown_character_hover_enter')]"
						}

						state = {
							name = _mouse_hierarchy_leave
							on_start = "[PdxGuiTriggerAllAnimations('unknown_character_hover_leave')]"
							on_start = "[PdxGuiWidget.FindChild('banner_hover_glow').TriggerAnimation('unknown_character_hover_leave')]"
							on_start = "[PdxGuiWidget.FindChild('unknown_portrait_glow').TriggerAnimation('unknown_character_hover_leave')]"
							on_start = "[PdxGuiWidget.FindChild('button_widget').TriggerAnimation('unknown_character_hover_leave')]"
						}

						state = {
							name = _mouse_release
							duration = 0.05
							using = Animation_Curve_Default
							start_sound = {
								soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
							}
						}

						state = {
							name = "bookmarks_hide_any_character"
							duration = 0.2
							using = Animation_Curve_Default
							alpha = 0
						}

						state = {
							name = "bookmarks_reset"
							duration = 0.2
							using = Animation_Curve_Default
							alpha = 1
						}

						state = {
							name = "bookmarks_reset"
							using = Animation_Curve_Default
							duration = 0.2

							alpha = 1
							position_y = -70
						}
					}

					button_text = {
						blockoverride "text" {
							raw_text = "GAMESETUP_PLAY_TUTORIAL"
						}
						onclick = "[GameSetup.OnShowTutorialPrompt]"
						name = "play_tutorial"
						blockoverride "dot" {

						}
					}

					text_single = {
						margin_top = 5
						raw_text = "Select start date:"
						align = left
					}
				}

				vbox = {
					name = "bookmark_groups"
					datamodel = "[GameSetup.AccessBookmarkGroups]"
					layoutpolicy_horizontal = expanding

					item = {
						widget_bookmark_group_button = {
							name = "bookmark_group_tab"
						}
					}
				}

				vbox = {
					visible = "[GameSetup.HasUngroupedBookmarks]"
					name = "ungrouped_bookmarks"
					datamodel = "[GameSetup.AccessUngroupedBookmarks]"
					layoutpolicy_horizontal = expanding

					item = {
						widget_ungrouped_bookmark_button = {
							name = "bookmark_tab"
						}
					}
				}

				text_single = {
					raw_text = "Select bookmark:"
					layoutpolicy_horizontal = expanding
					align = left
				}

				vbox = {
					datamodel = "[GameSetup.AccessBookmarksInGroup(GameSetup.GetSelectedBookmarkGroup)]"
					layoutpolicy_horizontal = expanding

					item = {
						bookmark_button = { }
					}
				}

				text_single = {
					margin_top = 5
					raw_text = "Select character:"
					layoutpolicy_horizontal = expanding
					align = left
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					datamodel = "[GameSetup.GetSelectedBookmarkCharacters]"

					item = {
						button_text = {
							layoutpolicy_horizontal = expanding
							onclick = "[PdxGuiTriggerAllAnimations('bookmark_character_change')]"
							onclick = "[BookmarkCharacterGUI.Select]"
							onclick = "[GetVariableSystem.Set( 'show_character_info', 'true' )]"
							alwaystransparent = "[BookmarkCharacterGUI.IsSelected]"
							datacontext = "[BookmarkCharacterGUI.GetCharacter]"

							shortcut_bookmark = {
								visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)0')]"
								shortcut = speed_1
							}

							shortcut_bookmark = {
								visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)1')]"
								shortcut = speed_2
							}

							shortcut_bookmark = {
								visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)2')]"
								shortcut = speed_3
							}

							shortcut_bookmark = {
								visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)3')]"
								shortcut = speed_4
							}

							shortcut_bookmark = {
								visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)4')]"
								shortcut = speed_5
							}


							blockoverride "pre" {
								text_single = {
									margin_right = 3
									raw_text = "[Add_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)1')]"
								}
							}

						    blockoverride "text" {
								raw_text = "[BookmarkCharacter.GetName],"
								align = left
						    }


							# #TODO
							# state = {
							# 	trigger_on_create = yes
							# 	on_finish = "[BookmarkCharacterGUI.Select]"
							# 	on_finish = "[GetVariableSystem.Set( 'show_character_info', 'true' )]"
							# }

							blockoverride "extra" {

								text_single = {
									raw_text = " "
								}

								text_single = {
									visible = "[Not( BookmarkCharacter.HasDynastyHouse )]"
									raw_text = "[BookmarkCharacter.GetDynastyTemplate.GetName]"
								}

								text_single = {
									visible = "[BookmarkCharacter.HasDynastyHouse]"
									text = "[BookmarkCharacter.GetDynastyHouseTemplate.GetName]"
								}

								dot = { }

								space = { }

								text_single = {
									raw_text = "BOOKMARK_CHARACTER_TITLE"
								}

								dot = { }

								space = { }

								text_single = {
									raw_text = "[BookmarkCharacter.GetDifficulty]"
								}

								dot = { }
							}

						}
					}
				}

				text_single = {
					raw_text = "Bookmark description:"
					layoutpolicy_horizontal = expanding
					margin_top = 5
				}

				flowcontainer = {
					direction = vertical
					margin_bottom = 5
					layoutpolicy_horizontal = expanding

					text_single = {
						raw_text = "[GameSetup.GetBookmarkName]."
					}

					text_single = {
						raw_text = "[GameSetup.GetSelectedDate.GetStringLong]."
					}

					text_multi = {
						raw_text = "[GameSetup.GetBookmarkDescription]"
						autoresize = yes
						max_width = 500
					}
				}

				expand = { }
			}


			### Bottom Panel
			widget = {
			    name = "bottom_panel"
			    size = { 100% 60 }
			    parentanchor = bottom|hcenter

			    hbox = {
			        margin = { 10 0 }
			        margin_top = 10

					button_standard_back = {
						name = "back_button"
						shortcut = "close_window"

						enabled = "[Not(GameSetup.HasGameStarted)]"
						onclick = "[GameSetup.OnBack]"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
					}

			        hbox = {
			            spacing = 10
						margin_bottom = 5

			            background = {
			                using = Background_Area_Solid
			                margin = { 50 10 }
			                alpha = 0.7

			                modify_texture = {
			                    name = "mask"
			                    texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
			                    spriteType = Corneredstretched
			                    spriteborder = { 40 0 }
			                    blend_mode = alphamultiply
			                }
			            }

			            button_standard = {
							margin_top = 5
			                name = "game_rules_button"

			                text = "GAME_RULES"
			                onclick = "[OpenGameRules]"

			                button_rules = {
			                    size = { 25 25 }
			                    parentanchor = left|vcenter
			                    position = { 5 0 }
			                    alwaystransparent = yes
			                }
			            }

			            hbox = {
							spacing = 5
			                flowcontainer_game_rules_mini = {
								margin_top = 5
			                    name = "game_rules_mini"
			                    # margin = { 10 0 }
			                }

			                hbox = {
			                    name = "buttons"
			                    visible = "[Not( HasGameStartedForTheFirstTime )]"

								button_text = {
									visible = "[IsIronmanEnabled]"
			                        onclick = "[SetIronmanEnabledStatus( '(bool)no' )]"
								    blockoverride "text" {
								        raw_text = "BOOKMARK_IRONMAN_ENABLED"
										align = left
								    }
									blockoverride "extra" {
										text_single = {
											raw_text = ": Enabled."
										}
									}
								}

								button_text = {
									visible = "[Not( IsIronmanEnabled )]"
			                        onclick = "[SetIronmanEnabledStatus( '(bool)yes' )]"
								    blockoverride "text" {
								        raw_text = "BOOKMARK_IRONMAN_ENABLED"
										align = left
								    }
									blockoverride "extra" {
										text_single = {
											raw_text = ": Disabled."
										}
									}
								}

								space = { }

								text_single = {
									raw_text = "It only allows one save file."
								}
			                }

							spacer = { }

			                hbox_achievements_info = {
			                    using = tooltip_ne
			                    blockoverride "ai_background"
			                    {
			                        #no background
			                    }

			                    blockoverride "ai_icon_size"
			                    {
			                        size = {36 36}
			                    }
			                }
			            }
			        }

					text_single = {
						raw_text = "[GetDataModelSize(GameSetup.GetDlcCollection.GetDlcs)] DLCs enabled. See tooltip."

						tooltipwidget = {
							flowcontainer = {
								using = DefaultTooltipBackground
								using = GeneralTooltipSetup
							    ignoreinvisible = yes

							    direction = vertical
								margin = { 10 10 }
								datamodel = "[GameSetup.GetDlcCollection.GetDlcs]"

								item = {
									text_single = {
										raw_text = "[DlcItem.GetDlc.GetName]."
									}
								}
							}
						}
					}

			       expand = { }
			    }
			}


			### Character sidebar
			widget = {
				# parentanchor = right
				size = { 500 100% }
				#scissor = yes

				visible = "[GetVariableSystem.Exists( 'show_character_info' )]"

				button = {
					onclick = "[GetVariableSystem.Clear('show_character_info')]"
					shortcut = close_window
				}

				state = {
					name = "bookmarks_bars_appear"
					next = b

					alpha = 0
					position_x = 50
				}

				state = {
					name = b
					using = Animation_Curve_Default

					alpha = 1
					delay = 0.5
					position_x = 0
					duration = 0.15
				}

				state = {
					name = "bookmarks_reset"
					using = Animation_Curve_Default
					duration = 0.2

					alpha = 1
					position_x = 0
				}

				state = {
					name = "bookmarks_game_start"
					using = Animation_Curve_Default
					duration = 0.2

					alpha = 0
					position_x = 50
				}

				state = {
					name = _show
					using = Animation_FadeIn_Standard
					position_x = 0
					start_sound = {
						soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_sidebar"
					}
				}

				state = {
					name = _hide
					using = Animation_FadeOut_Standard
					position_x = 50
					start_sound = {
						soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_sidebar"
					}
				}

				state = {
					name = "bookmarks_reset"
					using = Animation_Curve_Default
					duration = 0.2

					alpha = 1
					position_x = 0
				}

				margin_widget = {
					size = { 510 100% }
					name = "selected_character_info"
					visible = "[GameSetup.HasSelectedCharacter]"

					vbox = {
						layoutpolicy_vertical = expanding
						margin_top = 25
						margin_bottom = 40

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							background = {
								using = Background_Area_Solid
							}

							vbox = { # Selected Character info
								visible = "[GameSetup.HasSelectedCharacter]"
								visible_at_creation = no

								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								background = {
									texture = "[GameSetup.GetSelectedBookmark.GetButtonIconBig]"
									alpha = 0.8
									fittype = end

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
										blend_mode = alphamultiply
										mirror = vertical
									}

									using = Mask_Rough_Edges
								}

								vbox = {
									datacontext = "[GameSetup.GetSelectedCharacterGUI.GetCharacter]"
									datacontext = "[GameSetup.GetSelectedCharacterGUI]"

									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									margin = { 10 0 }


									vbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										margin_bottom = 5

										vbox = {
											layoutpolicy_horizontal = expanding

											flowcontainer = {
												layoutpolicy_horizontal = expanding
												text_single = {
													layoutpolicy_horizontal = expanding
													name = "character_title"
													text = "BOOKMARK_CHARACTER_TITLE_TYPE"
												}
												text_single = {
													raw_text = ", [BookmarkCharacter.GetAge] years old."
												}
											}

											vbox = {
												layoutpolicy_horizontal = expanding

												text_single = {
													layoutpolicy_horizontal = expanding
													raw_text = "House [BookmarkCharacter.GetDynastyTemplate.GetName]."
													align = left
												}

												flowcontainer = {
													layoutpolicy_horizontal = expanding

													text_single = {
														text = "BOOKMARK_CHARACTER_CULTURE"
													}

													text_single = {
														raw_text = ","
													}

													space = { }

													text_single = {
														text = "BOOKMARK_CHARACTER_RELIGION"
													}

													dot = { }
												}

												flowcontainer = {
													layoutpolicy_horizontal = expanding
													text_single = {
														text = "BOOKMARK_CHARACTER_DIFFICULTY"
													}

													text_single = {
														raw_text = "."
													}
												}
											}

											#related
											flowcontainer = {
												margin_top = 5
												visible = "[DataModelHasItems(BookmarkCharacterGUI.GetRelatedCharacters)]"
												direction = vertical
												layoutpolicy_horizontal = expanding

												text_single = {
													layoutpolicy_horizontal = expanding
													raw_text = "[GetDataModelSize(BookmarkCharacterGUI.GetRelatedCharacters)] Related characters:"
												}

												flowcontainer = {
													datamodel = "[BookmarkCharacterGUI.GetRelatedCharacters]"
													direction = vertical

													item = {
														text_single = {
															layoutpolicy_horizontal = expanding
															raw_text = "BOOKMARK_RELATED_CHARACTER"
														}
													}
												}
											}

											text_multi = {
												visible = "[GetVariableSystem.Exists( 'show_character_info' )]"
												name = "character_text"
												layoutpolicy_horizontal = expanding
												text = "[BookmarkCharacter.GetDescription]"
												autoresize = yes
												maximumsize = { 490 -1 }
												margin_top = 10
											}
										}

										expand = { }
									}
								}
							}
							expand = {}
						}
						expand = {}
					}
				}

				widget = {
					name = "not_selected_character_info"
					visible = "[Not(GameSetup.HasSelectedCharacter)]"
					size = { 440 100% }
					#scissor = yes

					vbox = {
						layoutpolicy_vertical = expanding
						margin_right = 10
						margin_top = 10

						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 10

							background = {
								using = Background_Area_ExtraDark
							}

							vbox = { # bookmark info
								name = "bookmark_info"
								layoutpolicy_horizontal = expanding

								background = {
									visible = "[Not(GameSetup.HasSelectedCharacter)]"
									texture = "[GameSetup.GetSelectedBookmark.GetButtonIconBig]"
									alpha = 0.8
									fittype = end

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
										blend_mode = alphamultiply
										mirror = vertical
									}

									using = Mask_Rough_Edges
								}

								vbox = { # boomark info header
									layoutpolicy_horizontal = expanding
									margin = { 10 10}

									background = {
										using = Background_Area_ExtraDark
										margin_left = 5
										margin_right= 5
									}

									background = {
										texture = "gfx/interface/component_masks/patterns/mask_pattern_01.dds"
										spriteType = corneredtiled
										color = { 0.1 0.1 0.12 1 }
										margin_top = -10
										texture_density = 0.8
										spriteborder_top = 60

										modify_texture = {
											texture = "gfx/interface/component_masks/mask_clouds.dds"
											blend_mode = alphamultiply
											spriteType = corneredTiled
											alpha = 0.6
										}

										modify_texture = {
											texture = "gfx/interface/component_masks/mask_scratches.dds"
											blend_mode = alphamultiply
											spriteType = corneredTiled
										}
									}

									vbox = {
										spacing = 3
										margin_bottom = 5

										text_single = {
											text = "[GameSetup.GetBookmarkName]"
											default_format = "#high;glow_color:{0,0,0,1}"
											using = Font_Size_Big
											align = left
											margin_bottom = -5
										}

										text_single = {
											text = "[GameSetup.GetSelectedDate.GetStringLong]"
											default_format = "#medium;glow_color:{0,0,0,1}"
											using = Font_Size_Medium
											using = Font_Type_Flavor
										}

										hbox = {
											visible = "[GameSetup.GetSelectedBookmark.IsRecommended]"
											spacing = 5

											icon = {
												texture = "gfx/interface/icons/portraits/me_small.dds"
												size = { 18 18 }
											}

											text_single = {
												text = "RECOMMEND_START_BOOKMARK"
												default_format = "#positive_value"
												align = left
											}
										}
									}
								}

								vbox = { # bookmark info description
									layoutpolicy_horizontal = expanding
									spacing = 10
									margin = { 20 5 }
									margin_bottom = 20

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 10

										button_list_expand = {
											visible = "[GameSetup.HasSelectedCharacter]"
											size = { 25 25 }
											onclick = "[GetVariableSystem.Toggle( 'show_character_info' )]"
											checked = "[Not( GetVariableSystem.Exists( 'show_character_info' ) )]"
											clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"
										}
										expand = {}
									}

									vbox = {
										visible = "[Not( GetVariableSystem.Exists( 'show_character_info' ) )]"
										maximumsize = {390 300}

										text_multi = {
											name = "bookmark_text"
											text = "[GameSetup.GetBookmarkDescription]"
											autoresize = yes
											maximumsize = { 390 300 }
										}
									}
								}
							}
						}
						expand = {}
					}
				}
			}
		}
	}
	### TUTORIAL PROMPT
	widget = {
		visible = "[GameSetup.ShouldShowTutorialPrompt]"
		visible_at_creation = no
		name = "tutorial_prompt_overlay"
		size = { 100% 100% }
		alwaystransparent = no
		using = TooltipFocus

		state = {
			name = _show
			using = Animation_FadeIn_Standard
			using = Sound_WindowShow_Standard
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
			using = Sound_WindowHide_Standard
		}

		button_normal = {
			size = { 100% 100% }
			onclick = "[GameSetup.OnSkipTutorial]"
		}

		using = Background_Full_Dim

		gamesetup_tutorial_prompt = {
			parentanchor = center
		}
	}
}

types BookmarkPortraits
{
	type widget_ungrouped_bookmark_button = button_text {
		onclick = "[BookmarkItem.Select]"
		onclick = "[GameSetup.ClearSelectedBookmarkGroup]"
		onclick = "[PdxGuiTriggerAllAnimations('bookmark_group_reset')]"
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_change','bookmark_change')]"
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('map_characters_appear','map_characters_appear')]"

		down = "[BookmarkItem.IsSelected]"
		alwaystransparent = "[BookmarkItem.IsSelected]"

		blockoverride "text" {
			raw_text = "[BookmarkItem.GetName]."
		}

		blockoverride "extra" {
			text_single = {
				raw_text = ", Selected"
				visible = "[BookmarkItem.IsSelected]"
				align = left
			}
		}
		blockoverride "dot" {
		}

		state = {
			name = "button_selection"
			trigger_when = "[BookmarkItem.IsSelected]"
			on_start = "[PdxGuiWidget.InterruptAnimation('bookmark_group_reset')]"
			delay = 0.05
			duration = 0.1
			using = Animation_Curve_Default
			position_y = 15
		}

		state = {
			name = "bookmark_group_reset"
			duration = 0.3
			using = Animation_Curve_Default
			position_y = 5
		}

		icon = {
			state = {
				trigger_on_create = yes
				name = _show
				next = shimmer
				duration = 0.2
				delay = 5

				modify_texture = {
					name = "shimmer"
					translate_uv = { 1 -1 }
					alpha = 0.6
				}
			}

			state = {
				name = shimmer
				next = pause
				duration = 2

				bezier = { 0 0.9 1 0.4 }

				modify_texture = {
					name = "shimmer"
					translate_uv = { -1 1 }
					alpha = 0.6
				}
				start_sound = {
					soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_topbar_tab_shimmer_on_loop"
				}
			}

			state = {
				name = "pause"
				next = shimmer
				duration = 0
				delay = 5

				modify_texture = {
					name = "shimmer"
					translate_uv = { 1 -1 }
					alpha = 0.6
				}
			}

			state = {
				name = _show
				using = Animation_Curve_Default
				duration = 0.3

				alpha = 1
				start_sound = {
					soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_topbar_tab_slide_out"
				}
			}
		}
	}


	### Year Tab
	type widget_bookmark_group_button = button_text {
		layoutpolicy_horizontal = expanding

		onclick = "[BookmarkGroupItem.OnClick]"
		onclick = "[PdxGuiTriggerAllAnimations('bookmark_group_reset')]"
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_group_change','bookmark_group_change')]"
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_change','bookmark_change')]"
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('map_characters_appear','map_characters_appear')]"
		onclick = "[GetVariableSystem.Clear( 'show_character_info' )]"
		down = "[BookmarkGroupItem.IsSelected]"
		alwaystransparent = "[BookmarkGroupItem.IsSelected]"

		blockoverride "text" {
			raw_text = "[BookmarkGroupItem.GetBookmarkGroup.GetName]"
		}
		blockoverride "pre" {
			text_single = {
				raw_text = "Change to"
				align = left
				visible = "[Not(BookmarkGroupItem.IsSelected)]"
			}
			text_single = {
				raw_text = " "
			}
		}

		blockoverride "extra" {
			text_single = {
				raw_text = ", Selected"
				visible = "[BookmarkGroupItem.IsSelected]"
				align = left
			}
		}

		blockoverride "dot" {
		}

		state = {
			name = _show
			using = Animation_Curve_Default
			duration = 0.3

			alpha = 1
			start_sound = {
				soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_topbar_tab_slide_out"
			}
		}
	}

	type bookmark_button = button_text {
		layoutpolicy_horizontal = expanding
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_change','bookmark_change')]"
		onclick = "[PdxGuiTriggerAllAnimations('bookmark_tab_reset')]"
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('map_characters_appear','map_characters_appear')]"
		onclick = "[BookmarkItem.Select]"
		onclick = "[GetVariableSystem.Clear( 'show_character_info' )]"
		down = "[BookmarkItem.IsSelected]"
		alwaystransparent = "[BookmarkItem.IsSelected]"


		blockoverride "text" {
			text = "[BookmarkItem.GetName]"
		}

		blockoverride "extra" {
			text_single = {
				raw_text = ", Selected"
				visible = "[BookmarkItem.IsSelected]"
				align = left
			}
			text_single = {
				raw_text = ", Recommended start"
				visible = "[BookmarkItem.GetBookmark.IsRecommended]"
				align = left
			}
		}

		blockoverride "dot" {
		}
	}

	type button_group_map_character_selection = button_group {
		flowcontainer = {
			margin = { -15 0 }
			margin_top = 120
			margin_bottom = -95

			container = {
				alwaystransparent = yes

				icon = {
					parentanchor = top|hcenter
					widgetanchor = bottom|hcenter
					position = { 0 50 }
					size = { 80% 100% }
					texture = "gfx/interface/component_masks/mask_fade_halfcircle.dds"
					color = { 0.58 0.55 0.5 0.8 }
					mirror = vertical
				}

				bm_portrait = {
					parentanchor = top|hcenter
					widgetanchor = bottom|hcenter
					position = { 0 30 }
					size = { 250 190 }
					alwaystransparent = yes

					blockoverride "portrait_button"
					{
						portrait_texture = "[BookmarkCharacterGUI.GetPortrait( 'environment_bookmarks_map', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
					}
				}

				margin_widget = {
					parentanchor = center|hcenter
					size = { 100% 100 }
					margin = { 10 0 }
					margin_left = 15

					icon = {
						size = { 100% 100% }
						parentanchor = center
						texture = "gfx/interface/component_masks/mask_fade_halfcircle.dds"
						color = { 0.58 0.55 0.5 1 }
					}
				}

				flowcontainer = {
					margin_left = 15

					icon = {
						texture = "gfx/interface/icons/banners/banner_blue_left.dds"
						spriteType = Corneredtiled
						spriteborder = { 72 0 }
						spriteborder_right = 114
						texture_density = 2

						modify_texture = {
							name = overlay
							visible = "[Not(BookmarkCharacterGUI.IsSelected)]"
							texture = "gfx/interface/component_effects/effect_blue_shine.dds"
							blend_mode = colordodge
							translate_uv = { 0.6 0 }
						}

						state = {
							trigger_on_create = yes
							name = "start"
							next = "right"

							duration = 0

							modify_texture = {
								name = overlay
								translate_uv = { 0.6 0 }
								alpha = 0.9
							}
						}

						state = {
							name = "right"
							next = "left"

							duration = 2
							using = Animation_Curve_Default

							modify_texture = {
								name = overlay
								translate_uv = { -0.6 0 }
								alpha = 0.6
							}
						}

						state = {
							name = "left"
							next = "right"

							duration = 0
							delay = 5

							modify_texture = {
								name = overlay
								translate_uv = { 0.9 0 }
								alpha = 0.9
							}
						}

						glow = {
							color = { 0.1 0.1 0.1 0.2 }
							glow_radius = 10

							glow_generation_rules = {
								glow_alpha_mask = 0
								glow_blur_passes = 10
								glow_texture_downscale = 5.5f
								glow_ignore_inside_pixels = yes
							}
						}

						icon = {
							name = "banner_hover_glow"
							size = { 100% 100% }
							texture = "gfx/interface/icons/banners/banner_blue_left_glow.dds"
							spriteType = Corneredtiled
							spriteborder = { 72 0 }
							spriteborder_right = 114
							texture_density = 2
							alpha = 0

							state = {
								name = "bookmark_character_hover_enter"
								alpha = 1
								duration = 0.05
								using = Animation_Curve_Default
							}

							state = {
								name = "bookmark_character_hover_leave"
								alpha = 0
								duration = 0.2
								using = Animation_Curve_Default
							}
						}

						icon = {
							visible = "[BookmarkCharacterGUI.IsSelected]"
							visible_at_creation = no
							size = { 100% 100% }
							texture = "gfx/interface/icons/banners/banner_blue_left_glow.dds"
							spriteType = Corneredtiled
							spriteborder = { 72 0 }
							spriteborder_right = 114
							texture_density = 2

							state = {
								name = _show
								using = Animation_FadeIn_Quick
								next = pulse_a
								alpha = 1
							}

							state = {
								name = "pulse_a"
								alpha = 1
								duration = 1
								next = pulse_b
								using = Animation_Curve_Default
							}

							state = {
								name = "pulse_b"
								alpha = 0.7
								duration = 1
								next = pulse_a
								using = Animation_Curve_Default
							}
						}

						flowcontainer = {
							parentanchor = bottom|hcenter
							widgetanchor = center
							direction = vertical
							margin_bottom = 6

							text_single = {
								parentanchor = hcenter
								text = "BOOKMARK_CHARACTER_TITLE"
								default_format = "#light_background"
							}

							text_single = {
								parentanchor = hcenter
								text = "[BookmarkCharacter.GetDifficulty]"
							}
						}

						coa_realm_bookmark = {
							position = { 0 -25 }
						}

						flowcontainer = {
							direction = vertical
							margin_left = 70
							margin_right = 75
							margin_top = 9
							margin_bottom = 35
							spacing = -6
							resizeparent = yes
							ignoreinvisible = yes

							text_single = {
								text = "[BookmarkCharacter.GetName]"
								fontsize = 21
								default_format = "#high;bold;glow_color:{0,0,0,1}"
							}

							text_single = {
								visible = "[Not( BookmarkCharacter.HasDynastyHouse )]"
								text = "[BookmarkCharacter.GetDynastyTemplate.GetName]"
								fontsize = 16
								default_format = "#high;glow_color:{0,0,0,1}"
							}

							text_single = {
								visible = "[BookmarkCharacter.HasDynastyHouse]"
								text = "[BookmarkCharacter.GetDynastyHouseTemplate.GetName]"
								fontsize = 16
								default_format = "#high;glow_color:{0,0,0,1}"
							}
						}
					}
				}
			}
		}
	}

	type bm_portrait = widget {

		portrait_button = {
			parentanchor = center
			size = { 100% 100% }
			using = portrait_base
			name = "culture_head_portrait"
			portrait_texture = "[BookmarkCharacterGUI.GetPortrait( 'environment_bookmarks_map', 'camera_head', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
			background_texture = "gfx/portraits/portrait_transparent.dds"
			texture = "gfx/portraits/portrait_transparent.dds"
			framesize = { 86 129 }
			mask = "gfx/portraits/portrait_mask_council.dds"

			datacontext = "[BookmarkCharacterGUI.GetCharacter]"
			effectname = "NoHighlight"
			alwaystransparent = yes

			block "portrait_tooltip" {
				tooltip_enabled = no
			}

			block "portrait_button" {}

			blockoverride "portrait_button_template_tooltip"
			{
				tooltip = "[BookmarkCharacter.GetTooltip]"
			}

			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}

			blockoverride "coa" {}
			blockoverride "status_icons" {}
			blockoverride "opinion_box" {}
			blockoverride "imprisonment" {}
			blockoverride "player_overlay" {}
			blockoverride "grayscale"{}
			blockoverride "TODO_debug_info" {}
		}
	}
}

types GameSetupTypes
{
	type gamesetup_tutorial_prompt = window {
		movable = no
		resizable = no
		using = Window_Background_Subwindow

		vbox = {
			using = Window_Margins
			set_parent_size_to_minimum = yes

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					raw_text = "[Localize('GAMESETUP_TUTORIAL_PROMPT_HEADER')]."
				}
				blockoverride "button_back"
				{
					visible = no
				}
				blockoverride "button_close"
				{
					onclick = "[GameSetup.OnSkipTutorial]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				hbox = {

					vbox = {
						layoutpolicy_vertical = expanding
						margin = { 5 15 }
						margin_left = 15
						spacing = 30

						text_multi = {
							max_width = 500
							min_width = 500
							autoresize = yes
							text = "GAMESETUP_TUTORIAL_PROMPT_INTRO"
						}

						text_multi = {
							max_width = 500
							min_width = 500
							autoresize = yes
							text = "GAMESETUP_TUTORIAL_PROMPT_RECOMMEND"
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 10

							text_multi = {
								max_width = 500
								min_width = 500
								autoresize = yes
								text = "GAMESETUP_TUTORIAL_PROMPT_ABOUT_RULER"
							}

							expand = {}
						}

						expand = {}
					}

				}

				vbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 10 }
					spacing = 15

					background = {
						using = Background_Area
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "GAMESETUP_TUTORIAL_PROMPT_ASK"
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						button_text = {
							layoutpolicy_horizontal = expanding
							shortcut = close_window
							onclick = "[GameSetup.OnSkipTutorial]"
						    blockoverride "text" {
								raw_text = "[Localize('GAMESETUP_TUTORIAL_PROMPT_DISABLE')], Escape."
						    }
						}


						button_primary_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								text = "GAMESETUP_TUTORIAL_PROMPT_PLAY_TUTORIAL"
							}
							onclick = "[GameSetup.OnPlayTutorial]"
						}
					}
				}
			}
		}
	}

	type dlc_button = button {
		size = { 100% 100% }
		texture = "[DlcItem.GetDlc.GetIcon]"
		onclick = "[DlcItem.ShowInStore]"
		tooltip = "DLC_BUTTON_TOOLTIP"
		using = tooltip_nw

		modify_texture = {
			visible = "[Not( DlcItem.GetDlc.IsEnabled )]"
			texture = "gfx/interface/colors/black.dds"
			blend_mode = normal
			alpha = 0.4
		}
	}

	type shortcut_bookmark = button {
		onclick = "[PdxGuiTriggerAllAnimations('bookmark_character_change')]"
		onclick = "[BookmarkCharacterGUI.Select]"
		onclick = "[GetVariableSystem.Set( 'show_character_info', 'true' )]"
	}
}


