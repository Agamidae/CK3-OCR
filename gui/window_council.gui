
######################################################
################## COUNCIL WINDOW ####################
######################################################

window = {
	name = "council_window"
	widgetid = "council_window_id"
	parentanchor = top|right
	layer = windows_layer
	movable = no

	using = Window_Size_MainTab

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab

		on_start = "[GetVariableSystem.Set( 'council_tabs', 'my_council' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
	}

	margin_widget = {
		size = { 100% 100% }
		# margin = { 0 26 }
		margin_right = 13

		widget = {
			size = { 100% 100% }

			vbox = {
				using = Window_Margins

				header_pattern = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text"
					{
						# text = "COUNCILWINDOW_TITLE"
					}

					blockoverride "button_close"
					{
						onclick = "[CouncilWindow.Close]"
					}

					flowcontainer = {

						position = { 10 10 }
						text_single = {
							raw_text = "COUNCILWINDOW_TITLE"
							layoutpolicy_horizontal = expanding
						}
						dot = { }
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					button_tab = {
						visible = "[Not(GetPlayer.IsIndependentRuler)]"
						layoutpolicy_horizontal = expanding
						text = "COUNCIL_WINDOW_PLAYER_COUNCIL"

						down = "[CouncilWindow.IsPlayerCouncilShown]"
						onclick = "[CouncilWindow.SetPlayerCouncil]"

						# onclick = "[PdxGuiTriggerAllAnimations('council_refresh')]"

						# state = {
						# 	name = _mouse_click
						# 	delay = 0.2
						# 	on_finish = "[CouncilWindow.SetPlayerCouncil]"
						# }
					}

					button_tab = {
						visible = "[Not(GetPlayer.IsIndependentRuler)]"

						down = "[CouncilWindow.IsLiegeCouncilShown]"
						onclick = "[CouncilWindow.SetLiegeCouncil]"


						# onclick = "[PdxGuiTriggerAllAnimations('council_refresh')]"

						# state = {
						# 	name = _mouse_click
						# 	delay = 0.2
						# 	on_finish = "[CouncilWindow.SetLiegeCouncil]"
						# }

						text_single = {
							minimumsize = { 277 38 }
							margin = { 15 0 }
							text = "COUNCIL_WINDOW_LIEGE_COUNCIL"
							resizeparent = yes
							align = center|nobaseline
							default_format = "#low"
						}
					}
				}

				widget = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					vbox_council_layout = {
						name = "my_council"
						visible = "[CouncilWindow.IsPlayerCouncilShown]"

						using = Animation_Tab_Switch
					}


					vbox_council_layout = {
						name = "council_refresh"
						visible = "[CouncilWindow.IsLiegeCouncilShown]"

						using = Animation_Tab_Switch

						background = {
							using = Background_Frame
							margin = { -5 2 }
							using = Color_Grey

							spriteType = Corneredtiled
							spriteborder = { 7 7 }
							alpha = 0.7
						}
					}
				}
			}
		}
	}
}

widget = {
	name = "potential_task_location_window"
	size = { 100% 100% }

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		# position_x = 0
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		# position_x = -40
	}

	portrait_council = {
		datacontext = "[PotentialTaskLocationWindow.GetActiveTask.GetCouncillor]"
		datacontext = "[PotentialTaskLocationWindow.GetTaskType.GetCouncilPosition]"
		parentanchor = bottom|left
		scale = 2
		position = {-100 0}

		blockoverride "portrait_button"
		{
			intersectionmask = yes
		}

		blockoverride "mask" {
			mask = "gfx/portraits/portrait_mask_blank.dds"
		}


		widget = {
			parentanchor = bottom|left
			# position = { 70 -20}
			position = { 85 -5 }

			vbox = {
				set_parent_size_to_minimum = yes
				scale = 0.5
				minimumsize = { 190 0 }

				background = {
					texture = "gfx/interface/component_tiles/tile_title_bg_01.dds"
					spriteType = Corneredtiled
					spriteborder = { 40 8 }
					margin = { 10 0 }
					margin_right = 25
					texture_density = 2

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
						blend_mode = alphamultiply
					}
				}

				text_label_left = {
					text = "COUNCIL_WINDOW_MAP_COUNCILLOR_TYPE"
					margin = { 5 5 }
					layoutpolicy_horizontal = expanding
					align = nobaseline
				}

				text_label_left = {
					text = "[PotentialTaskLocationWindow.GetActiveTask.GetCouncillor.GetUINameNoTooltip]"
					margin = { 5 5 }
					layoutpolicy_horizontal = expanding
					align = nobaseline
				}
			}
		}
	}

	flowcontainer = {
		parentanchor = top|hcenter
		direction = vertical
		scale = 1.2

		position = {0 100 }

		text_label_center = {
			text = "COUNCIL_WINDOW_MAP_TASK_NAME"
			parentanchor = hcenter
			align = nobaseline
			margin = { 10 4 }
		}

		text_label_center = {
			text = "[PotentialTaskLocationWindow.GetTaskType.GetName]"
			default_format = "#high"
			using = Font_Size_Medium
			parentanchor = hcenter
			align = nobaseline
			margin = { 10 4 }
		}

		text_label_center = {
			text = "COUNCIL_WINDOW_MAP_INSTRUCTION"
			parentanchor = hcenter
			align = nobaseline|hcenter
			margin = { 50 4 }
		}
	}


	icon = {
		using = Background_Label_Center
		parentanchor = bottom|hcenter
		size = { 400 85 }
		position = { 0 10 }

		button_primary_big = {
			name = "close_assignment_window"
			text = BACK_LABEL
			parentanchor = center

			onclick = "[PotentialTaskLocationWindow.Close]"
			tooltip = "COUNCIL_TASK_CANCEL_ASSIGNMENT"
			shortcut = "close_window"
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types CouncilWindow
{

	type council_task_info = vbox
	{
		name = "task"
		datacontext = "[ActiveCouncilTask.GetTaskTypeOrDefault]"

		background = {
			using = Background_Area_Dark
			alpha = 0.7
		}

		vbox = {
			visible = "[CouncilTaskType.IsPercentageTask]"
			layoutpolicy_horizontal = expanding
			margin = { 5 3 }

			text_single = {
				name = "location"
				layoutpolicy_horizontal = expanding
				text = "[ActiveCouncilTask.GetTaskTarget]"
				default_format = "#high"
				autoresize = no
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 0 5 }

				progressbar_standard = {
					name = "progress"
					layoutpolicy_horizontal = expanding
					size = { 0 12 }
					value = "[ActiveCouncilTask.GetProgressFloat]"

					tooltipwidget = {
						council_task_progress_breakdown_widget = {}
					}

					text_single = {
						name = "eta"
						parentanchor = center
						text = "[ActiveCouncilTask.GetETA]"
						align = nobaseline
					}
				}
			}
		}

		vbox = {
			visible = "[And( CouncilTaskType.IsValueTask, Not( ActiveCouncilTask.IsFrozen ) )]"
			layoutpolicy_horizontal = expanding
			margin = { 5 3 }

			text_single = {
				name = "location"
				layoutpolicy_horizontal = expanding
				text = "[ActiveCouncilTask.GetTaskTarget]"
				default_format = "#high"
				autoresize = no
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 0 5 }

				progressbar_standard = {
					name = "progress"
					layoutpolicy_horizontal = expanding
					size = { 0 12 }
					value = "[ActiveCouncilTask.GetProgressFloat]"
					min = 0
					max = "[ActiveCouncilTask.GetProgressMaxFloat]"
					tooltipwidget = {
						council_task_progress_breakdown_widget = {}
					}
					using = tooltip_ws
					text_single = {
						name = "eta"
						parentanchor = center
						text = "[ActiveCouncilTask.GetETA]"
						align = nobaseline
					}
				}
			}
		}
	}

	type widget_councillor_item = widget {
		size = { 260 250 }

		### Required Datacontexts
		# A council position type
		# The councillor
		# The active council task
		widget = {
			visible = "[Not(GuiCouncilPosition.ArePotentialTasksVisible)]"
			size = { 100% 100% }

			state = {
				name = _show
				using = Animation_FadeIn_Quick
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
			}

			portrait_council = {
				name = "councillor_portrait"
				datacontext = "[ActiveCouncilTask.GetCouncillor]"
				visible = "[Character.IsValid]"
				parentanchor = bottom
				position = { 0 4 }
				alwaystransparent = yes

				blockoverride "portrait_button_no_character_text"
				{
					text = "PORTRAIT_NO_COUNCILLOR"
				}

				blockoverride "portrait_button"
				{
					using = tooltip_ws
				}

				icon = {
					alwaystransparent = no
					size = { 100% 100% }
					background = { using = Background_Area_Dark margin_right = 10 }
				}
			}

			block "missing_councillor"
			{
				portrait_council = {
					name = "councillor_portrait_blank"
					visible = "[And( Not(Character.IsValid), CouncilWindow.IsPlayerCouncilShown)]"
					parentanchor = center

					blockoverride "portrait_button_no_character_text"
					{
						text = "PORTRAIT_NO_COUNCILLOR"
					}

					blockoverride "portrait_button_template_onclick"
					{
						onclick = "[GuiCouncilPosition.SelectCouncillor]"
					}

					text_label_center = {
						parentanchor = bottom|hcenter
						position = { 0 -10 }
						text = "COUNCILLOR_CLICK_TO_HIRE"
						default_format = "#low;italic"
						max_width = 235
					}

					blockoverride "onclick" {
						onclick = "[GuiCouncilPosition.SelectCouncillor]"

						button_icon = {
							parentanchor = center
							alwaystransparent = yes
							size = { 40 40 }
							position = { 0 70 }
							texture = "gfx/interface/icons/flat_icons/plus.dds"
						}
					}
					blockoverride "portrait_button"
					{
						using = tooltip_ws
					}
				}

				portrait_council = {
					name = "councillor_portrait_blank_liege"
					visible = "[And( Not(Character.IsValid), CouncilWindow.IsLiegeCouncilShown )]"
					parentanchor = center

					text_label_center = {
						parentanchor = bottom|hcenter
						position = { 0 -10 }
						text = "COUNCILLOR_BLANK_LIEGE"
						default_format = "#low;italic"
					}

					blockoverride "portrait_button"
					{
						using = tooltip_ws
					}
				}
			}
		}

		vbox = {

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 0 5 }
				margin_right = 3

				background = {
					using = Background_Area_Dark
				}

				background = {
					visible = "[ObjectsEqual( Character.Self, GetPlayer )]"
					texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
					spriteType = Corneredtiled
					alpha = 0.4

					using = Color_Blue

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
						blend_mode = alphamultiply
						alpha = 0.9
						mirror = horizontal
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_texture_01.dds"
						spriteType = Corneredtiled
						spriteborder = { 15 15 }
						blend_mode = alphamultiply
					}
				}

				background = {
					visible = "[ObjectsEqual( Character.Self, GetPlayer )]"
					texture = "gfx/interface/component_masks/mask_frame.dds"
					spriteType = Corneredstretched
					spriteborder = { 15 15 }
					alpha = 0.25

					using = Color_Blue

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
						blend_mode = alphamultiply
						alpha = 0.9
						mirror = horizontal
					}
				}

				spacer = {
					visible = "[GuiCouncilPosition.CanPotentiallySelectCouncillor]"
					size = { 6 6 }
				}

				spacer = {
					visible = "[CouncilWindow.IsLiegeCouncilShown]"
					size = { 5 5 }
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					margin_left = 2
					spacing = -2

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3
						block "replace_councillor"
						{
							hbox = {

								button_text = {
									# name = "replace"
									blockoverride "text" {
										# raw_text = "Appoint "
										raw_text = "[Select_CString(Character.IsValid, '', 'Appoint')]"
										align = left
									}
									# blockoverride "disabled" {
									# 	visible = "[Not(GuiCouncilPosition.CanSelectCouncillor)]"
									# }
									visible = "[And(GuiCouncilPosition.CanPotentiallySelectCouncillor, Not(Character.IsValid))]"
									onclick = "[GuiCouncilPosition.SelectCouncillor]"
									enabled = "[GuiCouncilPosition.CanSelectCouncillor]"
									# tooltip = "[GuiCouncilPosition.GetSelectCouncillorTooltip]" #TODO #COUNCILWINDOW_TT_REPLACE
									using = tooltip_se

									# button_change = {
									# 	alwaystransparent = yes
									# 	parentanchor = center
									# }
								}

								button_text = {
									name = "replace"
									blockoverride "text" {
										raw_text = "Resign as "
									}
									# name = "leave"
									visible = "[ObjectsEqual( GetPlayer.Self, Character.Self )]"
									onclick = "[CouncilWindow.OnLeaveCouncil]"
									# tooltip = "DECISIONS_VIEW_LEAVE_COUNCIL_TT"
									using = tooltip_se

									# button_leave_council = {
									# 	mirror = horizontal
									# 	parentanchor = center
									# 	alwaystransparent = yes
									# }
								}
							}
						}

						text_single = {
							name = "title"
							# layoutpolicy_horizontal = expanding
							raw_text = "[ActiveCouncilTask.GetPositionName|E]."
							tooltip = "[ActiveCouncilTask.GetPositionTooltip]"
							# autoresize = no
							fontsize_min = 14
						}

						button_text = {
							# name = "replace"
							blockoverride "text" {
								# raw_text = "Appoint "
								align = left
								raw_text = "[Select_CString(Character.IsValid, 'Replace', '')]"
							}
							blockoverride "disabled" {
								visible = "[Not(GuiCouncilPosition.CanSelectCouncillor)]"
								tooltip = "[GuiCouncilPosition.GetSelectCouncillorTooltip]" #TODO #COUNCILWINDOW_TT_REPLACE
							}
							blockoverride "dot" { }
							visible = "[And(GuiCouncilPosition.CanPotentiallySelectCouncillor, Character.IsValid)]"
							onclick = "[GuiCouncilPosition.SelectCouncillor]"
							enabled = "[GuiCouncilPosition.CanSelectCouncillor]"
							using = tooltip_se

							# button_change = {
							# 	alwaystransparent = yes
							# 	parentanchor = center
							# }
						}

						expand = { }
					}

					hbox = {
						visible = "[Character.IsValid]"
						layoutpolicy_horizontal = expanding
						spacing = 5

						char_name = {
							blockoverride "text" {
								raw_text = "[Character.GetShortUINameNoTooltip],"
								max_width = 200
								align = nobaseline
							}
						}

						text_single = {
							datacontext = "[GuiCouncilPosition.GetMainSkillItem]"
							# visible = "[ActiveCouncilTask.HasMainSkill]"
							visible = "[And( ActiveCouncilTask.HasMainSkill, ActiveCouncilTask.HasCouncillor )]"

							raw_text = "[SkillItem.GetName] [SkillItem.GetValue]."
							tooltip = "SKILL_ITEM_TOOLTIP"
							align = nobaseline
						}
						expand = { }
					}

					hbox = {
						margin_left = 5
						layoutpolicy_horizontal = expanding
						spacing = 5
						visible = "[Character.IsValid]"

						text_single = {
							visible = "[Not(Character.IsLocalPlayer)]"
							raw_text = "Opinion [Character.GetOpinionOf(GetPlayer)]."
							tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
							align = nobaseline
						}
						text_single = {
							visible = "[Character.IsPowerfulVassal]"
							text = "MY_REALM_WINDOW_POWERFUL_VASSAL"
							align = nobaseline
							# layoutpolicy_horizontal = expanding
						}
						text_single = {
							visible = "[And(Character.HasLandedTitles, Not(Character.IsPowerfulVassal))]"
							raw_text = "Vassal,"
							align = nobaseline
							# layoutpolicy_horizontal = expanding
						}
						text_single = {
							visible = "[Character.IsTheocraticLesseeOf( GetPlayer )]"
							align = nobaseline
							raw_text = "[Select_CString( And( Character.TheocraticLesseeHasApprovalStatus, Character.TheocraticLesseeApprovesOfLiege ), 'Endorses you.', 'Does not endorse you.' )]"
							tooltip = "[Character.GetTheocraticLesseeApprovalTooltip]"
						}
						expand = { }
					}

					hbox = {
						margin_left = 5
						visible = "[Character.IsValid]"
						spacing = 5
						layoutpolicy_horizontal = expanding
						text_single = {
							visible = no#"[Character.HasLandedTitles]"
							raw_text = "Strength: [Character.GetMaxMilitaryStrength|0]."
							align = nobaseline
							# layoutpolicy_horizontal = expanding
						}
						text_single = {
							raw_text = "Other "
							align = nobaseline
						}
						hbox_skills_grid = {
							datamodel = "[GuiCouncilPosition.GetSkillItems]"
						}
						expand = { }
					}
				}
			}

			widget = {
				visible = "[GuiCouncilPosition.ArePotentialTasksVisible]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				state = {
					name = _show
					using = Animation_FadeIn_Quick
				}

				flowcontainer = {
					name = "council_position_tasks"
					datamodel = "[GuiCouncilPosition.GetPotentialCouncilTasks]"
					parentanchor = bottom|hcenter
					margin_bottom = 10
					direction = vertical
					spacing = 3
					alwaystransparent = no
					background = { using = Background_Area_Dark }

					item = {
						button_standard = {
							name = "potential_task"
							datacontext = "[GuiPotentialCouncilTask.GetCouncilTaskType]"
							datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
							visible = "[GuiPotentialCouncilTask.IsVisible]"
							size = { 220 25 }

							enabled = "[GuiPotentialCouncilTask.CanSelect]"
							onclick = "[GuiPotentialCouncilTask.SelectTaskType]"

							tooltip = "[CouncilTaskType.GetEffectDesc( ActiveCouncilTask.GetScopes )]"

							text_single = {
								parentanchor = left|vcenter
								position = { 10 0 }
								text = "[CouncilTaskType.GetName]"
								align = nobaseline
								default_format = "#clickable"
							}

							container = {
								visible = "[CouncilTaskType.HasMainSkill]"
								parentanchor = right|vcenter


								skill_icon_label_vertical = {
									datacontext = "[GuiCouncilPosition.GetSkillItemForTask(CouncilTaskType.Self)]"

									blockoverride "font_size" {
										min_width = 13
									}

									blockoverride "value"
									{
										text = "[GuiCouncilPosition.GetSkillModifierForTask(CouncilTaskType.Self)|+=]"
									}

									blockoverride "tooltip"
									{
									}
								}
							}
						}
					}
				}
			}

			vbox = {
				visible = "[Not(GuiCouncilPosition.ArePotentialTasksVisible)]"
				layoutpolicy_horizontal = expanding
				margin = { 10 0 }
				margin_top = -5
				# layoutpolicy_vertical = expanding

				state = {
					name = _show
					using = Animation_FadeIn_Quick
				}

				text_multi = {
					margin_left = 10
					margin_bottom = 10
					margin_right = 5
					autoresize = yes
					max_width = 180
					visible = "[Character.IsLocalPlayer]"
					# align = bottom|left
					# parentanchor = bottom|left
					text = "ON_COUNCIL_EFFECTS"
					background = {
						using = Background_Area_Dark
					}
					fontsize = 14
				}

				background = {
					texture = "gfx/interface/component_masks/mask_fade_corner.dds"
					color = { 0.12 0.12 0.12 1 }
					alpha = 0.5
					margin_top = -130
					margin_left = -150
				}

				block "regular_task"
				{
					flowcontainer = {
						name = "council_position_tasks"
						visible = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
						datamodel = "[GuiCouncilPosition.GetPotentialCouncilTasks]"
						direction = vertical
						layoutpolicy_horizontal = expanding

						# position = { 10 0 }

						text_single = {
							raw_text = "Tasks:"
							background = { using = Background_Area_Dark }
						}

						item = {
							container = {
								datacontext = "[GuiPotentialCouncilTask.GetCouncilTaskType]"
								ignoreinvisible = yes
								visible = "[GuiPotentialCouncilTask.IsVisible]"

								# widget = {
								# 	size = { 42 42 }
								# 	# visible = "[GuiPotentialCouncilTask.IsActive]"
								#
								# }
								button_text = {
									blockoverride "text" {
										raw_text = "[CouncilTaskType.GetName]."
									}
									blockoverride "disabled" {
										visible = "[CouncilWindow.IsLiegeCouncilShown]"
									}
									blockoverride "extra" {
										text_single = {
											raw_text = " Active."
											visible = "[GuiPotentialCouncilTask.IsActive]"
											align = nobaseline
										}
									}
									using = tooltip_ws

									tooltipwidget = {
										council_task_icon_tooltip_widget = {
											using = DefaultTooltipBackground
											using = GeneralTooltipSetup
											alwaystransparent = no
										}
									}
									visible = "[Or(And(GuiPotentialCouncilTask.CanSelect, Not(CouncilWindow.IsLiegeCouncilShown)), GuiPotentialCouncilTask.IsActive)]"
									onclick = "[GuiPotentialCouncilTask.SelectTaskType]"
									enabled = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
									down = "[GuiPotentialCouncilTask.IsActive]"
								}

								text_single = {
									size = { 40 40 }
									visible = "[And(Not(GuiPotentialCouncilTask.CanSelect), Not(CouncilWindow.IsLiegeCouncilShown))]"
									datacontext = "[GuiPotentialCouncilTask.GetCouncilTaskType]"

									blockoverride "text" {
										raw_text = "[CouncilTaskType.GetName]."
									}
									blockoverride "disabled" {
										# visible = "[CouncilWindow.IsLiegeCouncilShown]"
									}
									tooltipwidget = {
										invalid_potential_council_task_icon_tooltip_widget = {
											using = DefaultTooltipBackground
											using = GeneralTooltipSetup
											alwaystransparent = no
										}
									}
								}
							}
						}
					}
				}
			}

			vbox = {
				visible = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
				layoutpolicy_horizontal = expanding
				margin = { 7 0 }

				background = {
					using = Background_Area_Dark
				}

				council_task_info = {
					layoutpolicy_horizontal = expanding
				}

				block "spouse_task" {}
			}

			expand = { }
		}
	}
}

types CouncilTaskTypes
{

	# Requires a GuiPotentialCouncilTask data context to be provided
	type invalid_potential_council_task_icon_tooltip_widget = widget
	{
		size = { 50 50 }

		vbox = {
			restrictparent_min = yes
			minimumsize = { 280 0 }

			margin = { 15 15 }
			spacing = 5

			datacontext = "[GuiPotentialCouncilTask.GetDummyTask]"

			text_single = {
				name = "task_info"
				text = "[GuiPotentialCouncilTask.GetCouncilTaskType.GetName]"
				default_format = "#T"
				layoutpolicy_horizontal = expanding
			}

			text_multi = {
				name = "cannot_select_text"
				text = "[GuiPotentialCouncilTask.GetCannotSelectTooltip]"
				layoutpolicy_horizontal = expanding
				autoresize = yes
				max_width = 280
				align = left
			}
		}
	}

	# Requires an ActiveCouncilTask data context to be provided
	type council_task_icon_tooltip_widget_base = widget
	{
		size = { 50 50 }

		vbox = {
			restrictparent_min = yes
			minimumsize = { 280 0 }
			maximumsize = { 400 0 }

			margin = { 15 15 }
			margin_top = 10
			spacing = 7

			text_multi = {
				name = "task_info"
				block "task_info_heading"
				{
					raw_text = "#D GIVE ME SOME TEXT#!"
				}
				layoutpolicy_horizontal = expanding
				autoresize = yes
				max_width = 380
				align = left
			}

			text_single = {
				name = "progress"
				layoutpolicy_horizontal = expanding

				block "progress_visiblity"
				{
					visible = "[Not( ActiveCouncilTask.GetTaskType.IsInfiniteTask )]"
				}

				text = COUNCIL_TASK_PROGRESSBAR_TOOLTIP_HEADER
				tooltipwidget = {
					council_task_progress_breakdown_widget = {}
				}
			}

			text_multi = {
				name = "effects"
				text = COUNCIL_TASK_EFFECTS
				layoutpolicy_horizontal = expanding
				autoresize = yes
				max_width = 380
				align = left
			}
		}
	}

	# Requires an ActiveCouncilTask data context to be provided
	type council_task_icon_tooltip_widget = council_task_icon_tooltip_widget_base
	{
		datacontext = "[GuiPotentialCouncilTask.GetDummyTaskOrActualIfActive]"
		blockoverride "task_info_heading"
		{
			text = COUNCIL_TASK_TT
		}
		blockoverride "progress_visiblity"
		{
			visible = "[And( Not( ActiveCouncilTask.GetTaskType.IsInfiniteTask ), GuiPotentialCouncilTask.IsActive ) ]"
		}
	}

	type council_task_map_icon_tooltip_widget = council_task_icon_tooltip_widget_base
	{
		blockoverride "task_info_heading"
		{
			text = COUNCIL_TASK_MAP_TT
		}
	}

	type vbox_council_layout = vbox {
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			maximumsize = { -1 932 }
			spacing = 5

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 0 }
				spacing = 5

				widget_councillor_item = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[CouncilWindow.GetCouncillor('councillor_spouse')]"
					datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
					datacontext = "[ActiveCouncilTask.GetPositionType]"
					datacontext = "[ActiveCouncilTask.GetCouncillor]"

					background =  {
						texture = "gfx/interface/skinned/illustrations/council/bg_council_spouse.dds"
						fittype = centercrop
						using = Mask_Rough_Edges
						alpha = 0.8
					}

					background = {
						texture = "gfx/interface/component_masks/mask_vignette.dds"
						color = { 0.15 0.15 0.15 1 }
						alpha = 0.3
					}

					# make spouse portrait unique size, so it doesn't reuse
					# textures from other councilors during hide animation
					blockoverride "portrait_size"
					{
						size = { 260 286 }
					}

					blockoverride "replace_councillor"
					{
						spacer = {
							visible = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
							size = { 5 5 }
						}
					}

					blockoverride "regular_task" {}

					blockoverride "spouse_task"
					{
						hbox = {
							visible = "[Character.IsValid]"
							layoutpolicy_horizontal = expanding
							# margin = { 5 0 }
							spacing = 3

							button_text = {
								# size = { 190 25 }
								layoutpolicy_horizontal = expanding
								onclick = "[GuiCouncilPosition.ShowHideTasks]"
								tooltip = "[GuiCouncilPosition.GetShowHideTooltip]"
								down = "[GuiCouncilPosition.ArePotentialTasksVisible]"
								datacontext = "[ActiveCouncilTask.GetTaskTypeOrDefault]"

								blockoverride "text" {
									raw_text = "[CouncilTaskType.GetName]. Click to change."
								}
								# blockoverride "extra" {
								# 	raw_text = "Change."
								# }
							}
						}
					}

					blockoverride "missing_councillor"
					{
						text_label_center = {
							visible = "[And( Not(Character.IsValid), CouncilWindow.IsPlayerCouncilShown )]"
							parentanchor = bottom|hcenter
							position = { 0 -10 }
							text = "COUNCILLOR_MISSING_SPOUSE"
							default_format = "#low;italic"
						}

						text_label_center = {
							visible = "[And( Not(Character.IsValid), CouncilWindow.IsLiegeCouncilShown )]"
							parentanchor = bottom|hcenter
							position = { 0 -10 }
							text = "COUNCILLOR_LIEGE_MISSING_SPOUSE"
							default_format = "#low;italic"
							max_width = 250
							fontsize_min = 14
						}
					}
				}

				widget_councillor_item = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[CouncilWindow.GetCouncillor('councillor_court_chaplain')]"
					datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
					datacontext = "[ActiveCouncilTask.GetPositionType]"
					datacontext = "[ActiveCouncilTask.GetCouncillor]"
					name = "tutorial_court_chaplain"

					datacontext = "[GetIllustration( 'religion_interior' )]"

					background =  {
						texture = "[Illustration.GetTextureForFaith( ActiveCouncilTask.GetCouncillor.GetFaith )]"
						fittype = centercrop
						alpha = 0.7
						using = Mask_Rough_Edges
					}

					background = {
						texture = "gfx/interface/component_masks/mask_vignette.dds"
						color = { 0.15 0.15 0.15 1 }
						alpha = 0.3
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 0 }
				spacing = 5

				widget_councillor_item = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[CouncilWindow.GetCouncillor('councillor_chancellor')]"
					datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
					datacontext = "[ActiveCouncilTask.GetPositionType]"
					datacontext = "[ActiveCouncilTask.GetCouncillor]"

					background =  {
						texture = "gfx/interface/skinned/illustrations/council/bg_council_chancellor.dds"
						fittype = centercrop
						alpha = 0.6
						using = Mask_Rough_Edges
					}

					background = {
						texture = "gfx/interface/component_masks/mask_vignette.dds"
						color = { 0.15 0.15 0.15 1 }
						alpha = 0.3
					}
				}

				widget_councillor_item = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[CouncilWindow.GetCouncillor('councillor_steward')]"
					datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
					datacontext = "[ActiveCouncilTask.GetPositionType]"
					datacontext = "[ActiveCouncilTask.GetCouncillor]"

					background =  {
						texture = "gfx/interface/skinned/illustrations/council/bg_council_steward.dds"
						fittype = centercrop
						using = Mask_Rough_Edges
						alpha = 0.7
					}

					background = {
						texture = "gfx/interface/component_masks/mask_vignette.dds"
						color = { 0.15 0.15 0.15 1 }
						alpha = 0.3
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 0 }
				margin_bottom = 5
				spacing = 5

				widget_councillor_item = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[CouncilWindow.GetCouncillor('councillor_marshal')]"
					datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
					datacontext = "[ActiveCouncilTask.GetPositionType]"
					datacontext = "[ActiveCouncilTask.GetCouncillor]"

					background =  {
						texture = "gfx/interface/skinned/illustrations/council/bg_council_marshal.dds"
						fittype = centercrop
						using = Mask_Rough_Edges
						alpha = 0.7
					}

					background = {
						texture = "gfx/interface/component_masks/mask_vignette.dds"
						color = { 0.15 0.15 0.15 1 }
						alpha = 0.3
					}
				}

				widget_councillor_item = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[CouncilWindow.GetCouncillor('councillor_spymaster')]"
					datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
					datacontext = "[ActiveCouncilTask.GetPositionType]"
					datacontext = "[ActiveCouncilTask.GetCouncillor]"

					background =  {
						texture = "gfx/interface/skinned/illustrations/council/bg_council_spymaster.dds"
						fittype = centercrop
						using = Mask_Rough_Edges
						alpha = 0.7
					}

					background = {
						texture = "gfx/interface/component_masks/mask_vignette.dds"
						color = { 0.15 0.15 0.15 1 }
						alpha = 0.3
					}
				}
			}
		}

		expand = {
			layoutpolicy_vertical = growing
		}
	}
}
