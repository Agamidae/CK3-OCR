
######################################################
################## COUNCIL WINDOW ####################
######################################################

window = {
	name = "council_window"
	widgetid = "council_window_id"
	parentanchor = top|right
	layer = windows_layer
	movable = no

	using = Window_Size_MainTab
	background = { using = Background_Area_Border_Solid }

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab

		on_start = "[GetVariableSystem.Set( 'council_tabs', 'my_council' )]"
		# on_start = "[GetVariableSystem.Clear('council_focus')]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
	}

	margin_widget = {
		size = { 100% 100% }
		# margin = { 0 26 }
		margin_right = 13

		widget = {
			size = { 100% 100% }

			vbox = {
				using = Window_Margins
				spacing = 10

				error_button = {
					layoutpolicy_horizontal = expanding
				}

				header_pattern = {
					layoutpolicy_horizontal = expanding
					size = { 0 0 }

					blockoverride "header_text"
					{
						# text = "COUNCILWINDOW_TITLE"
					}

					blockoverride "button_close"
					{
						onclick = "[CouncilWindow.Close]"
					}

				}

				vbox = {
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding

						visible = "[Not(GetVariableSystem.Exists('council_focus'))]"

						text_single = {
							raw_text = "Your council"
							visible = "[CouncilWindow.IsPlayerCouncilShown]"
						}

						text_single = {
							raw_text = "COUNCIL_WINDOW_LIEGE_COUNCIL"
							visible = "[CouncilWindow.IsLiegeCouncilShown]"
						}

						text_single = {
							raw_text = ". Use hotkeys to select a councillor."
						}

						expand = { }
					}

					hbox = {
					    layoutpolicy_horizontal = expanding
						visible = "[Not(GetVariableSystem.Exists('council_focus'))]"

						spacing = 3
					    text_single = {
					    	raw_text = "Current skills:"
					    }

						text_single = {
							datacontext = "[CouncilWindow.GetCouncillor('councillor_chancellor')]"
							raw_text = "[GuiCouncilPosition.GetMainSkillItem.GetValue],"
						}

						text_single = {
							datacontext = "[CouncilWindow.GetCouncillor('councillor_marshal')]"
							raw_text = "[GuiCouncilPosition.GetMainSkillItem.GetValue],"
						}

						text_single = {
							datacontext = "[CouncilWindow.GetCouncillor('councillor_steward')]"
							raw_text = "[GuiCouncilPosition.GetMainSkillItem.GetValue],"
						}

						text_single = {
							datacontext = "[CouncilWindow.GetCouncillor('councillor_spymaster')]"
							raw_text = "[GuiCouncilPosition.GetMainSkillItem.GetValue],"
						}

						text_single = {
							datacontext = "[CouncilWindow.GetCouncillor('councillor_court_chaplain')]"
							raw_text = "[GuiCouncilPosition.GetMainSkillItem.GetValue]."
						}

						# text_single = {
						# 	datacontext = "[CouncilWindow.GetCouncillor('councillor_spouse')]"
						# 	raw_text = "[GuiCouncilPosition.GetMainSkillItem.GetValue],"
						# }

					    expand = { }
					}

				}

				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[And(Not(GetPlayer.IsIndependentRuler), Not(GetVariableSystem.Exists('council_focus')))]"

					button_text = {
						layoutpolicy_horizontal = expanding
						visible = "[CouncilWindow.IsLiegeCouncilShown]"
						shortcut = confirm
						blockoverride "pre" {
							spacing = 5
							text_single = {
								raw_text = "Switch to"
							}
						}
						blockoverride "text" {
							raw_text = "Your council, Enter."
							align = left
						}
						onclick = "[CouncilWindow.SetPlayerCouncil]"
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						visible = "[CouncilWindow.IsPlayerCouncilShown]"
						shortcut = confirm
						blockoverride "pre" {
							spacing = 5

							text_single = {
								raw_text = "Switch to"
							}
						}
						blockoverride "text" {
							raw_text = "Liege's Council, Enter."
						}

						blockoverride "extra" {
							text_single = {
								visible = "[Not(StringIsEmpty(CouncilWindow.GetPositionAtLiege))]"
								raw_text = "You are [GetPlayer.GetLiege.GetHerHis] [CouncilWindow.GetPositionAtLiege]."
							}
						}
						onclick = "[CouncilWindow.SetLiegeCouncil]"
					}
					expand = { }
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Not(GetVariableSystem.Exists('council_focus'))]"
					spacing = 10

					council_line_item = {
						blockoverride "pre" {
							text_single = {
								raw_text = "1."
							}
						}
						blockoverride "button" {
							shortcut = speed_1
							onclick = "[GetVariableSystem.Set('council_focus', 'chancellor')]"
						}
						datacontext = "[CouncilWindow.GetCouncillor('councillor_chancellor')]"
					}

					council_line_item = {
						blockoverride "pre" {
							text_single = {
								raw_text = "2."
							}
						}
						blockoverride "button" {
							shortcut = speed_2
							onclick = "[GetVariableSystem.Set('council_focus', 'marshal')]"
						}
						datacontext = "[CouncilWindow.GetCouncillor('councillor_marshal')]"
					}

					council_line_item = {
						blockoverride "pre" {
							text_single = {
								raw_text = "3."
							}
						}
						blockoverride "button" {
							shortcut = speed_3
							onclick = "[GetVariableSystem.Set('council_focus', 'steward')]"
						}
						datacontext = "[CouncilWindow.GetCouncillor('councillor_steward')]"
					}

					council_line_item = {
						blockoverride "pre" {
							text_single = {
								raw_text = "4."
							}
						}
						blockoverride "button" {
							shortcut = speed_4
							onclick = "[GetVariableSystem.Set('council_focus', 'spymaster')]"
						}
						datacontext = "[CouncilWindow.GetCouncillor('councillor_spymaster')]"
					}

					council_line_item = {
						blockoverride "pre" {
							text_single = {
								raw_text = "5."
							}
						}
						blockoverride "button" {
							shortcut = speed_5
							onclick = "[GetVariableSystem.Set('council_focus', 'priest')]"
						}
						datacontext = "[CouncilWindow.GetCouncillor('councillor_court_chaplain')]"
					}

					council_line_item = {
						blockoverride "pre" {
							text_single = {
								raw_text = "T."
							}
						}
						blockoverride "button" {
							shortcut = map_mode_2
							onclick = "[GetVariableSystem.Set('council_focus', 'spouse')]"
						}
						datacontext = "[CouncilWindow.GetCouncillor('councillor_spouse')]"
					}

					expand = { }
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[GetVariableSystem.Exists('council_focus')]"

					button = {
						shortcut = map_mode_2
						visible = "[Not(GetVariableSystem.HasValue('council_focus', 'spouse'))]"
						blockoverride "text" {
							raw_text = "Spouse"
						}
						onclick = "[GetVariableSystem.Set('council_focus', 'spouse')]"
					}

					button = {
						shortcut = speed_1
						blockoverride "text" {
							raw_text = "Chancellor [CouncilWindow.GetCouncillor('councillor_chancellor').GetMainSkillItem.GetValue],"
						}
						onclick = "[GetVariableSystem.Set('council_focus', 'chancellor')]"
					}
					button = {
						shortcut = speed_2
						blockoverride "text" {
							raw_text = "Marshal  [CouncilWindow.GetCouncillor('councillor_marshal').GetMainSkillItem.GetValue],"
						}
						onclick = "[GetVariableSystem.Set('council_focus', 'marshal')]"
					}
					button = {
						shortcut = speed_3
					    blockoverride "text" {
					        raw_text = "Steward [CouncilWindow.GetCouncillor('councillor_steward').GetMainSkillItem.GetValue],"
					    }
						onclick = "[GetVariableSystem.Set('council_focus', 'steward')]"
					}
					button = {
						shortcut = speed_4
					    blockoverride "text" {
					        raw_text = "Spymaster  [CouncilWindow.GetCouncillor('councillor_spymaster').GetMainSkillItem.GetValue]."
					    }
						onclick = "[GetVariableSystem.Set('council_focus', 'spymaster')]"
					}
					button = {
						shortcut = speed_5
						blockoverride "text" {
							raw_text = "Priest  [CouncilWindow.GetCouncillor('councillor_court_chaplain').GetMainSkillItem.GetValue],"
						}
						onclick = "[GetVariableSystem.Set('council_focus', 'priest')]"
					}

					expand = { }
				}

				widget = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					vbox_council_layout = {
						name = "my_council"
						visible = "[CouncilWindow.IsPlayerCouncilShown]"

						using = Animation_Tab_Switch
					}

					vbox_council_layout = {
						name = "council_refresh"
						visible = "[CouncilWindow.IsLiegeCouncilShown]"

						using = Animation_Tab_Switch
					}
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Reset view with Escape."
					}
					visible = "[GetVariableSystem.Exists('council_focus')]"
					onclick = "[GetVariableSystem.Clear('council_focus')]"
					shortcut = close_window
				}
			}
		}
	}
}

widget = {
	name = "potential_task_location_window"
	size = { 100% 100% }
	using = TooltipFocus
	alwaystransparent = yes

	state = {
		name = _show
		on_start = "[GetVariableSystem.Set('council_task', 'yes')]"
	}

	button = {
		parentanchor = center
		widgetanchor = left|vcenter
		onmousehierarchyenter = "[GetVariableSystem.Clear('council_task')]"
		visible = "[GetVariableSystem.Exists('council_task')]"
		position = { -50 0 }
		# texture = "gfx/interface/colors/white.dds"

		flowcontainer = {
			ignoreinvisible = yes
			resizeparent = yes
			margin = { 50 50 }
			direction = vertical

			text_single = {
				background = { using = Background_Area_Border_Solid }
				raw_text = "Click here to select the last viewed county."
				autoresize = yes
			}

			text_single = {
				raw_text = "Or press Shift 1 if you use Autohotkey."
			}

			text_single = {
				raw_text = "Task: [PotentialTaskLocationWindow.GetTaskType.GetName]."
			}

			text_single = {
				raw_text = "Cancel with Escape."
			}
		}
	}

	button = {
		onclick = "[PotentialTaskLocationWindow.Close]"
		shortcut = "close_window"
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types CouncilWindow
{

	type council_task_info = vbox
	{
		name = "task"
		datacontext = "[ActiveCouncilTask.GetTaskTypeOrDefault]"

		background = {
			using = Background_Area_Dark
			alpha = 0.7
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			raw_text = "Active task, [CouncilTaskType.GetName]."
			tooltip = "[CouncilTaskType.GetEffectDesc( ActiveCouncilTask.GetScopes )]"
		}

		hbox = {
			visible = "[CouncilTaskType.IsPercentageTask]"
			layoutpolicy_horizontal = expanding
			margin = { 5 0 }
			spacing = 3

			text_single = {
				raw_text = "[ActiveCouncilTask.GetTaskTarget],"
			}

			text_single = {
				tooltipwidget = {
					council_task_progress_breakdown_widget = { }
				}
				raw_text = "[ActiveCouncilTask.GetETA]."
			}
			expand = { }
		}

		hbox = {
			visible = "[And( CouncilTaskType.IsValueTask, Not( ActiveCouncilTask.IsFrozen ) )]"
			layoutpolicy_horizontal = expanding
			margin = { 5 0 }
			spacing = 3

			text_single = {
				name = "location"
				raw_text = "[ActiveCouncilTask.GetTaskTarget],"
			}

			text_single = {
				tooltipwidget = {
					council_task_progress_breakdown_widget = { }
					}
				raw_text = "[ActiveCouncilTask.GetETA]."
			}
			expand = { }
		}
	}

	type widget_councillor_item = widget {
		size = { 260 250 }

		### Required Datacontexts
		# A council position type
		# The councillor
		# The active council task
		widget = {
			visible = "[Not(GuiCouncilPosition.ArePotentialTasksVisible)]"
			size = { 100% 100% }

			state = {
				name = _show
				using = Animation_FadeIn_Quick
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
			}


			block "missing_councillor"
			{

				portrait_council = {
					name = "councillor_portrait_blank_liege"
					visible = "[And( Not(Character.IsValid), CouncilWindow.IsLiegeCouncilShown )]"
					parentanchor = center

					text_label_center = {
						parentanchor = bottom|hcenter
						position = { 0 -10 }
						text = "COUNCILLOR_BLANK_LIEGE"
						default_format = "#low;italic"
					}

					blockoverride "portrait_button"
					{
						using = tooltip_ws
					}
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding

			hbox = {
				layoutpolicy_horizontal = expanding
				margin_right = 3


				vbox = {
					layoutpolicy_horizontal = expanding
					margin_left = 2
					spacing = 10

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(GuiCouncilPosition.ArePotentialTasksVisible)]"

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3
							block "replace_councillor"
							{
								hbox = {

									button_text = {
										# name = "replace"
										blockoverride "text" {
											# raw_text = "Appoint "
											raw_text = "[Select_CString(Character.IsValid, '', 'Appoint')]"
											align = left
										}
										# blockoverride "disabled" {
										# 	visible = "[Not(GuiCouncilPosition.CanSelectCouncillor)]"
										# }
										visible = "[And(GuiCouncilPosition.CanPotentiallySelectCouncillor, Not(Character.IsValid))]"
										onclick = "[GuiCouncilPosition.SelectCouncillor]"
										enabled = "[GuiCouncilPosition.CanSelectCouncillor]"
										# tooltip = "[GuiCouncilPosition.GetSelectCouncillorTooltip]" #TODO #COUNCILWINDOW_TT_REPLACE
										using = tooltip_se

										# button_change = {
										# 	alwaystransparent = yes
										# 	parentanchor = center
										# }
									}

									button_text = {
										name = "replace"
										blockoverride "text" {
											raw_text = "Resign as "
											align = left
										}
										# name = "leave"
										visible = "[ObjectsEqual( GetPlayer.Self, Character.Self )]"
										onclick = "[CouncilWindow.OnLeaveCouncil]"
										# tooltip = "DECISIONS_VIEW_LEAVE_COUNCIL_TT"
										using = tooltip_se

										# button_leave_council = {
										# 	mirror = horizontal
										# 	parentanchor = center
										# 	alwaystransparent = yes
										# }
									}
								}
							}

							text_single = {
								name = "title"
								# layoutpolicy_horizontal = expanding
								raw_text = "[ActiveCouncilTask.GetPositionName|E]."
								tooltip = "[ActiveCouncilTask.GetPositionTooltip]"
								# autoresize = no
								fontsize_min = 14
							}

							expand = { }
						}

						hbox = {
							visible = "[Character.IsValid]"
							layoutpolicy_horizontal = expanding
							spacing = 5

							char_name = {
								blockoverride "text" {
									raw_text = "[Character.GetShortUINameNoTooltip],"
									max_width = 200
									align = left
								}
							}

							text_single = {
								datacontext = "[GuiCouncilPosition.GetMainSkillItem]"
								# visible = "[ActiveCouncilTask.HasMainSkill]"
								visible = "[And( ActiveCouncilTask.HasMainSkill, ActiveCouncilTask.HasCouncillor )]"

								raw_text = "[SkillItem.GetName] [SkillItem.GetValue]."
								tooltip = "SKILL_ITEM_TOOLTIP"
								align = left
							}
							expand = { }
						}
					}

					vbox = {
						visible = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
						layoutpolicy_horizontal = expanding
						margin = { 7 0 }

						background = {
							using = Background_Area_Dark
						}

						council_task_info = {
							layoutpolicy_horizontal = expanding
						}

					}

					vbox = {
						layoutpolicy_horizontal = expanding
						block "spouse_task" { }

						vbox = {
							visible = "[GuiCouncilPosition.ArePotentialTasksVisible]"
							layoutpolicy_horizontal = expanding

							state = {
								name = _show
								using = Animation_FadeIn_Quick
							}

							vbox = {
								name = "council_position_tasks"
								datamodel = "[GuiCouncilPosition.GetPotentialCouncilTasks]"
								layoutpolicy_horizontal = expanding
								alwaystransparent = no
								background = { using = Background_Area_Border_Solid }

								item = {
									button_standard = {
										layoutpolicy_horizontal = expanding
										name = "potential_task"
										datacontext = "[GuiPotentialCouncilTask.GetCouncilTaskType]"
										datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
										visible = "[GuiPotentialCouncilTask.IsVisible]"
										size = { 260 25 }

										enabled = "[GuiPotentialCouncilTask.CanSelect]"
										onclick = "[GuiPotentialCouncilTask.SelectTaskType]"
										# onclick = "[GuiCouncilPosition.ShowHideTasks]"

										tooltip = "[CouncilTaskType.GetEffectDesc( ActiveCouncilTask.GetScopes )]"

										hbox = {
											margin_left = 10
											layoutpolicy_horizontal = expanding
											spacing = 3
											text_single = {
												raw_text = "[CouncilTaskType.GetName],"
											}

											text_single = {
												raw_text = "see tooltip."
												visible = "[Not(CouncilTaskType.HasMainSkill)]"
											}

											text_single = {
												text = "[GuiCouncilPosition.GetSkillModifierForTask(CouncilTaskType.Self)|+=]"
												visible = "[CouncilTaskType.HasMainSkill]"
												datacontext = "[GuiCouncilPosition.GetSkillItemForTask(CouncilTaskType.Self)]"
											}

											text_single = {
												datacontext = "[GuiCouncilPosition.GetSkillItemForTask(CouncilTaskType.Self)]"
												raw_text = "[SkillItem.GetName]."
											}

											expand = { }
										}
									}
								}
							}
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "[Select_CString(Character.IsValid, 'Replace', '')]"
						}
						blockoverride "disabled" {
							visible = "[Not(GuiCouncilPosition.CanSelectCouncillor)]"
							tooltip = "[GuiCouncilPosition.GetSelectCouncillorTooltip]" #TODO #COUNCILWINDOW_TT_REPLACE
						}
						blockoverride "dot" { }
						visible = "[And(GuiCouncilPosition.CanPotentiallySelectCouncillor, Character.IsValid)]"
						onclick = "[GuiCouncilPosition.SelectCouncillor]"
						enabled = "[GuiCouncilPosition.CanSelectCouncillor]"
						using = tooltip_se
					}

					hbox = {
						margin_left = 5
						layoutpolicy_horizontal = expanding
						spacing = 5
						visible = "[Character.IsValid]"

						text_single = {
							visible = "[Not(Character.IsLocalPlayer)]"
							raw_text = "Opinion [Character.GetOpinionOf(GetPlayer)]."
							tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
							align = left
						}
						text_single = {
							visible = "[Character.IsPowerfulVassal]"
							text = "MY_REALM_WINDOW_POWERFUL_VASSAL"
							align = left
							# layoutpolicy_horizontal = expanding
						}
						text_single = {
							visible = "[And(Character.HasLandedTitles, Not(Character.IsPowerfulVassal))]"
							raw_text = "Vassal,"
							align = left
							# layoutpolicy_horizontal = expanding
						}
						text_single = {
							visible = "[Character.IsTheocraticLesseeOf( GetPlayer )]"
							align = left
							raw_text = "[Select_CString( And( Character.TheocraticLesseeHasApprovalStatus, Character.TheocraticLesseeApprovesOfLiege ), 'Endorses you.', 'Does not endorse you.' )]"
							tooltip = "[Character.GetTheocraticLesseeApprovalTooltip]"
						}
						expand = { }
					}

					hbox = {
						margin_left = 5
						visible = "[Character.IsValid]"
						spacing = 5
						layoutpolicy_horizontal = expanding
						text_single = {
							visible = no#"[Character.HasLandedTitles]"
							raw_text = "Strength: [Character.GetMaxMilitaryStrength|0]."
							align = left
							# layoutpolicy_horizontal = expanding
						}
						text_single = {
							raw_text = "Other "
							align = left
						}
						hbox_skills_grid = {
							datamodel = "[GuiCouncilPosition.GetSkillItems]"
						}
						expand = { }
					}
				}
			}

			vbox = {
				visible = "[Not(GuiCouncilPosition.ArePotentialTasksVisible)]"
				layoutpolicy_horizontal = expanding
				margin = { 10 10 }
				# layoutpolicy_vertical = expanding

				state = {
					name = _show
					using = Animation_FadeIn_Quick
				}

				text_multi = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					max_width = 600
					visible = "[Character.IsLocalPlayer]"
					text = "ON_COUNCIL_EFFECTS"
				}

				block "regular_task"
				{
					flowcontainer = {
						name = "council_position_tasks"
						visible = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
						datamodel = "[GuiCouncilPosition.GetPotentialCouncilTasks]"
						direction = vertical
						layoutpolicy_horizontal = expanding

						# position = { 10 0 }

						text_single = {
							raw_text = "Tasks:"
							background = { using = Background_Area_Dark }
							visible = "[Character.IsValid]"

						}

						item = {
							container = {
								datacontext = "[GuiPotentialCouncilTask.GetCouncilTaskType]"
								ignoreinvisible = yes
								visible = "[GuiPotentialCouncilTask.IsVisible]"

								button_text = {
									blockoverride "pre" {
										text_single = {
											raw_text = "Active,"
											margin_right = 3
											visible = "[GuiPotentialCouncilTask.IsActive]"
										}
									}
									blockoverride "text" {
										raw_text = "[CouncilTaskType.GetName]."
									}
									blockoverride "disabled" {
										visible = "[CouncilWindow.IsLiegeCouncilShown]"
									}
									using = tooltip_ws

									tooltipwidget = {
										council_task_icon_tooltip_widget = {
										}
									}
									visible = "[Or(And(GuiPotentialCouncilTask.CanSelect, Not(CouncilWindow.IsLiegeCouncilShown)), GuiPotentialCouncilTask.IsActive)]"
									onclick = "[GuiPotentialCouncilTask.SelectTaskType]"
									enabled = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
									down = "[GuiPotentialCouncilTask.IsActive]"
									# onclick = "[GetVariableSystem.Set('council_task', 'yes')]"
								}

								text_single = {
									margin_left = 3
									visible = "[And(Not(GuiPotentialCouncilTask.CanSelect), Not(CouncilWindow.IsLiegeCouncilShown))]"
									datacontext = "[GuiPotentialCouncilTask.GetCouncilTaskType]"

									raw_text = "Can't [CouncilTaskType.GetName]."

									tooltipwidget = {
										invalid_potential_council_task_icon_tooltip_widget = {
										}
									}
								}
							}
						}
					}
				}
			}

			expand = { }
		}
	}
}

types CouncilTaskTypes
{

	# Requires a GuiPotentialCouncilTask data context to be provided
	type invalid_potential_council_task_icon_tooltip_widget = widget
	{
		size = { 50 50 }

		vbox = {
			using = DefaultTooltipBackground
			using = GeneralTooltipSetup
			restrictparent_min = yes
			minimumsize = { 280 0 }

			margin = { 15 15 }
			spacing = 5

			datacontext = "[GuiPotentialCouncilTask.GetDummyTask]"

			text_single = {
				name = "task_info"
				text = "[GuiPotentialCouncilTask.GetCouncilTaskType.GetName]"
				default_format = "#T"
				layoutpolicy_horizontal = expanding
			}

			text_multi = {
				name = "cannot_select_text"
				text = "[GuiPotentialCouncilTask.GetCannotSelectTooltip]"
				layoutpolicy_horizontal = expanding
				autoresize = yes
				max_width = 800
				align = left
			}
		}
	}

	# Requires an ActiveCouncilTask data context to be provided
	type council_task_icon_tooltip_widget_base = widget
	{
		size = { 50 50 }

		vbox = {
			restrictparent_min = yes
			minimumsize = { 280 0 }
			maximumsize = { 800 0 }

			hide_tooltip = { }

			vbox = {
				using = DefaultTooltipBackground
				using = GeneralTooltipSetup

				margin = { 15 15 }
				margin_top = 10
				spacing = 7

				text_multi = {
					name = "task_info"
					block "task_info_heading"
					{
						raw_text = "#D GIVE ME SOME TEXT#!"
					}
					layoutpolicy_horizontal = expanding
					autoresize = yes
					max_width = 800
					align = left
				}

				text_single = {
					name = "progress"
					layoutpolicy_horizontal = expanding

					block "progress_visiblity"
					{
						visible = "[Not( ActiveCouncilTask.GetTaskType.IsInfiniteTask )]"
					}

					text = COUNCIL_TASK_PROGRESSBAR_TOOLTIP_HEADER
					tooltipwidget = {
						council_task_progress_breakdown_widget = { }
						}
					}

					text_multi = {
						name = "effects"
						text = COUNCIL_TASK_EFFECTS
						layoutpolicy_horizontal = expanding
						autoresize = yes
						max_width = 800
						align = left
					}
				}
		}

	}

	# Requires an ActiveCouncilTask data context to be provided
	type council_task_icon_tooltip_widget = council_task_icon_tooltip_widget_base
	{
		datacontext = "[GuiPotentialCouncilTask.GetDummyTaskOrActualIfActive]"
		blockoverride "task_info_heading"
		{
			text = COUNCIL_TASK_TT
		}
		blockoverride "progress_visiblity"
		{
			visible = "[And( Not( ActiveCouncilTask.GetTaskType.IsInfiniteTask ), GuiPotentialCouncilTask.IsActive ) ]"
		}
	}

	type council_task_map_icon_tooltip_widget = council_task_icon_tooltip_widget_base
	{
		blockoverride "task_info_heading"
		{
			text = COUNCIL_TASK_MAP_TT
		}
	}

	type vbox_council_layout = vbox {
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			maximumsize = { -1 932 }

			widget_councillor_item = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[CouncilWindow.GetCouncillor('councillor_spouse')]"
				datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
				datacontext = "[ActiveCouncilTask.GetPositionType]"
				datacontext = "[ActiveCouncilTask.GetCouncillor]"
				visible = "[GetVariableSystem.HasValue('council_focus', 'spouse')]"


				# make spouse portrait unique size, so it doesn't reuse
				# textures from other councilors during hide animation
				blockoverride "portrait_size"
				{
					size = { 260 286 }
				}

				blockoverride "replace_councillor"
				{
					spacer = {
						visible = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
						size = { 5 5 }
					}
				}

				blockoverride "regular_task" { }

				blockoverride "spouse_task"
				{
					hbox = {
						visible = "[Character.IsValid]"
						layoutpolicy_horizontal = expanding
						spacing = 3

						button_text = {
							shortcut = map_mode_2
							layoutpolicy_horizontal = expanding
							onclick = "[GuiCouncilPosition.ShowHideTasks]"
							datacontext = "[ActiveCouncilTask.GetTaskTypeOrDefault]"
							visible = "[GuiCouncilPosition.ArePotentialTasksVisible]"

							blockoverride "text" {
								raw_text = "Select new task. Close with T."
							}
						}

						button_text = {
							shortcut = map_mode_2
							layoutpolicy_horizontal = expanding
							onclick = "[GuiCouncilPosition.ShowHideTasks]"
							datacontext = "[ActiveCouncilTask.GetTaskTypeOrDefault]"
							visible = "[Not(GuiCouncilPosition.ArePotentialTasksVisible)]"

							blockoverride "text" {
								raw_text = "Task, [CouncilTaskType.GetName], hotkey T."
							}
						}
					}
				}

				blockoverride "missing_councillor"
				{
					text_label_center = {
						visible = "[And( Not(Character.IsValid), CouncilWindow.IsPlayerCouncilShown )]"
						parentanchor = bottom|hcenter
						position = { 0 -10 }
						text = "COUNCILLOR_MISSING_SPOUSE"
						default_format = "#low;italic"
					}

					text_label_center = {
						visible = "[And( Not(Character.IsValid), CouncilWindow.IsLiegeCouncilShown )]"
						parentanchor = bottom|hcenter
						position = { 0 -10 }
						text = "COUNCILLOR_LIEGE_MISSING_SPOUSE"
						default_format = "#low;italic"
						max_width = 250
						fontsize_min = 14
					}
				}
			}

			widget_councillor_item = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[CouncilWindow.GetCouncillor('councillor_court_chaplain')]"
				datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
				datacontext = "[ActiveCouncilTask.GetPositionType]"
				datacontext = "[ActiveCouncilTask.GetCouncillor]"
				name = "tutorial_court_chaplain"
				visible = "[GetVariableSystem.HasValue('council_focus', 'priest')]"

				datacontext = "[GetIllustration( 'religion_interior' )]"


			}

			widget_councillor_item = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[CouncilWindow.GetCouncillor('councillor_chancellor')]"
				datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
				datacontext = "[ActiveCouncilTask.GetPositionType]"
				datacontext = "[ActiveCouncilTask.GetCouncillor]"
				visible = "[GetVariableSystem.HasValue('council_focus', 'chancellor')]"

			}

			widget_councillor_item = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[CouncilWindow.GetCouncillor('councillor_steward')]"
				datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
				datacontext = "[ActiveCouncilTask.GetPositionType]"
				datacontext = "[ActiveCouncilTask.GetCouncillor]"
				visible = "[GetVariableSystem.HasValue('council_focus', 'steward')]"

			}

			widget_councillor_item = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[CouncilWindow.GetCouncillor('councillor_marshal')]"
				datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
				datacontext = "[ActiveCouncilTask.GetPositionType]"
				datacontext = "[ActiveCouncilTask.GetCouncillor]"
				visible = "[GetVariableSystem.HasValue('council_focus', 'marshal')]"

			}

			widget_councillor_item = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[CouncilWindow.GetCouncillor('councillor_spymaster')]"
				datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
				datacontext = "[ActiveCouncilTask.GetPositionType]"
				datacontext = "[ActiveCouncilTask.GetCouncillor]"
				visible = "[GetVariableSystem.HasValue('council_focus', 'spymaster')]"
			}
		}

		expand = {
			layoutpolicy_vertical = growing
		}
	}

	type council_line_item = vbox {
		datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
		datacontext = "[ActiveCouncilTask.GetTaskTypeOrDefault]"
		datacontext = "[ActiveCouncilTask.GetCouncillor]"
		layoutpolicy_horizontal = expanding

		button_text = {
			layoutpolicy_horizontal = expanding
			block "button" { }

			button = {
				size = { 100% 100% }
				onclick = "[GuiCouncilPosition.SelectCouncillor]"
				enabled = "[GuiCouncilPosition.CanSelectCouncillor]"
				visible = "[And(GuiCouncilPosition.CanPotentiallySelectCouncillor, Not(Character.IsValid))]"
				block "button" { }
			}
			blockoverride "text" {
				raw_text = "[AddTextIf(Not(Character.IsValid), 'No ')][ActiveCouncilTask.GetPositionName],"
			}

			blockoverride "extra" {
				spacing = 3

				text_single = {
					visible = "[And(GuiCouncilPosition.CanPotentiallySelectCouncillor, Not(Character.IsValid))]"
					raw_text = "Appoint."
				}

				flowcontainer = {
				    ignoreinvisible = yes
					spacing = 3
					visible = "[Character.IsValid]"
					text_single = {
						visible = "[ActiveCouncilTask.HasMainSkill]"
						raw_text = "[GuiCouncilPosition.GetMainSkillItem.GetValue] skill."
					}
					text_single = {
						raw_text = "Task,"
					}
					text_single = {
						visible = "[CouncilTaskType.IsProgressDefined]"
						raw_text = "[ActiveCouncilTask.GetProgress|0]%"
					}
					text_single = {
						raw_text = "[CouncilTaskType.GetName]"
						tooltip = "[CouncilTaskType.GetEffectDesc( ActiveCouncilTask.GetScopes )]"
					}

					dot_l = {
						visible = "[StringIsEmpty(ActiveCouncilTask.GetTaskTarget)]"
					}
					text_single = {
						visible = "[Not(StringIsEmpty(ActiveCouncilTask.GetTaskTarget))]"
						raw_text = "[ActiveCouncilTask.GetTaskTarget]."
					}

				}
			}
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			using = char_click
			visible = "[Character.IsValid]"

			blockoverride "pre" {
				spacing = 3
				text_single = {
					visible = "[Character.IsMyPowerfulVassal]"
					raw_text = "Powerful vassal,"
				}
				text_single = {
					raw_text = "[Character.GetTitledFirstNameOrMeNoTooltip]."
				}
				text_single = {
					raw_text = "Opinion [Character.GetOpinionOf( GetPlayer )]."
				}
				text_single = {
					visible = "[Character.IsMyPowerfulVassal]"
					raw_text = "[Character.GetMilitaryStrengthText] soldiers."
				}
			}
		}
	}
}
