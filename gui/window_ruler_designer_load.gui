window = {
	name = "load_ruler_window"
	size = { 100% 100% }
	movable = no
	layer = confirmation
	filter_mouse = all

	background = {
		texture = "gfx/interface/colors/black.dds"
		alpha = 0.9
	}

	button_normal = {
		size = { 100% 100% }
		onclick = "[RulerDesignerLoadWindow.Cancel]"
	}

	widget = {
		size = { 520 100% }
		position = { 620 0 }
		alwaystransparent = no

		using = Window_Background_No_Edge

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding


			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				spacer = {
					size = { 444 5 }
				}

				header_pattern = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text"
					{
						text = "RULER_DESIGNER_LOAD_WINDOW_TITLE"
					}

					blockoverride "button_close" {
						visible = no
					}
				}

				scrollbox = {
					layoutpolicy_horizontal = growing
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content"
					{
						vbox = {
							datamodel = "[RulerDesignerLoadWindow.GetSavedRulers]"
							spacing = 3

							item = {
								button_saved_rulers = {
									blockoverride "down_state" {
										down = "[RulerDesignerLoadWindow.IsSelectedItem(SaveRulerItem.Self)]"
									}
									blockoverride "selected" {
										visible = "[RulerDesignerLoadWindow.IsSelectedItem(SaveRulerItem.Self)]"
									}
									size = { 480 45 }
								}
							}
						}
					}
				}


				hbox = {
					layoutpolicy_horizontal = expanding

					button_standard_back = {
						shortcut = "close_window"

						onclick = "[RulerDesignerLoadWindow.Cancel]"
					}
				}
			}
		}
	}

	widget = {
		name = "character_info"
		size = { 620 100% }
		position = { 0 0 }
		datacontext = "[RulerDesignerLoadWindow.GetSelectedRuler]"
		visible = "[RulerDesignerLoadWindow.IsRulerSelected]"

		background = {
			using = Background_Area_Light
			using = Mask_Rough_Edges
		}

		vbox = {
			margin = { 10 10 }
			hbox = {
				name = "header"
				layoutpolicy_horizontal = expanding

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 3
					text_single = {
						raw_text = "[SaveRulerItem.GetFilename],"
						max_width = 320
					}

					text_single = {
						text = "[SaveRulerItem.GetUsedPoints]"
					}

					text_single = {
						raw_text = "[Localize('RULER_DESIGNER_SAVE_LOAD_USED_POINTS_LABEL')]."
					}
					expand = { }
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				button_primary_text = {
					layoutpolicy_horizontal = expanding
					name = "load_button"
					blockoverride "text" {
						text = "LOAD"
					}
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"

					onclick = "[RulerDesignerLoadWindow.Load]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[Localize('RULER_DESIGNER_LOAD_WINDOW_DELETE_FILE')]."
					}
					onclick = "[RulerDesignerLoadWindow.Delete]"
				}

			}

			hbox = {
			    layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					layoutpolicy_vertical = expanding

					vbox = {
						layoutpolicy_horizontal = expanding

						hbox = {
							margin_top = 5
							name = "age"
							spacing = 5
							layoutpolicy_horizontal = expanding
							text_single = {
								text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_AGE"
								align = left
							}
							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[SaveRulerItem.GetAge]."
								align = left
								default_format = "#high"
							}

							expand = { }
						}

						hbox = {
							name = "sex"
							spacing = 5
							layoutpolicy_horizontal = expanding

							text_single = {
								text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_SEX"
							}

							text_single = {
								raw_text = "Male."
								visible = "[Not( SaveRulerItem.IsFemale )]"
							}

							text_single = {
								raw_text = "Female."
								visible = "[SaveRulerItem.IsFemale]"
							}

							expand = { }
						}

						hbox = {
							name = "sexuality"
							layoutpolicy_horizontal = expanding
							text_single = {
								text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_SEXUALITY"
							}

							space = { }

							text_single = {
								raw_text = "Random"
								visible = "[SaveRulerItem.HasSexuality( 'none' )]"
							}

							text_single = {
								raw_text = "RULER_DESIGNER_SET_SEXUALITY_HETEROSEXUAL"
								visible = "[SaveRulerItem.HasSexuality( 'heterosexual' )]"
							}

							text_single = {
								raw_text = "RULER_DESIGNER_SET_SEXUALITY_HOMOSEXUAL"
								visible = "[SaveRulerItem.HasSexuality( 'homosexual' )]"
							}

							text_single = {
								raw_text = "RULER_DESIGNER_SET_SEXUALITY_BISEXUAL"
								visible = "[SaveRulerItem.HasSexuality( 'bisexual' )]"
							}

							text_single = {
								raw_text = "RULER_DESIGNER_SET_SEXUALITY_ASEXUAL"
								visible = "[SaveRulerItem.HasSexuality( 'asexual' )]"
							}

							dot = { }

							expand = { }
						}


						hbox = {
							datacontext = "[SaveRulerItem.GetFaith]"
							layoutpolicy_horizontal = expanding
							spacing = 3

							text_single = {
								raw_text = "Faith: [Faith.GetReligion.GetNameNoTooltip],"
							}
							text_single = {
								raw_text = "[Faith.GetNameNoTooltip]."
							}
							tooltipwidget = {
								faith_tooltip_core_tenents = { }
							}
							expand = { }
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							datacontext = "[SaveRulerItem.GetCulture]"
							raw_text = "Culture: [Culture.GetName], [Culture.GetHeritage.GetNameNoTooltip]."
						}

						vbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_FAMILY"
								layoutpolicy_horizontal = expanding
							}

							text_single = {
								text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_FAMILY_DESC"
								layoutpolicy_horizontal = expanding
							}
						}

						hbox = {
						    layoutpolicy_horizontal = expanding
							spacing = 3

							text_single = {
								raw_text = "[Localize('RULER_DESIGNER_LOAD_WINDOW_DETAILS_SKILLS')]:"
							}

							hbox = {
								datamodel = "[SaveRulerItem.GetGuiSkills]"

								item = {
									text_single = {
										datacontext = "[SaveRulerSkillGui.GetModifiedValueBreakdown]"
										raw_text = "[SaveRulerSkillGui.GetValue],"
									}
								}
							}

						    expand = { }
						}

						expand = { }
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						text_single = {
							text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_TRAITS"
							layoutpolicy_horizontal = expanding
						}

						scrollbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							datamodel = "[SaveRulerItem.GetGuiTraits]"
							blockoverride "scrollbox_margins" {
								margin_top = 20
								margin_left = 10
							}
							blockoverride "scrollbox_content"
							{
								vbox = {
									datamodel = "[SaveRulerItem.GetGuiTraits]"
									layoutpolicy_horizontal = expanding

									item = {
										text_single = {
											layoutpolicy_horizontal = expanding
											datacontext = "[SaveRulerTraitGui.GetTrait]"
											datacontext = "[GetNullCharacter]"
											datacontext = "[SaveRulerItem.GetFaith]"
											raw_text = "[Trait.GetNameNoTooltip(Character.Self)][AddTextIf(Faith.IsTraitVirtue( Trait.Self ), ' (virtue)')][AddTextIf(Faith.IsTraitSin( Trait.Self ), ' (sin)')]."
										}
									}
								}
							}
						}
					}

					expand = { }
				}

			    expand = { }
			}
		}
	}
}
