######################################################
################### COUNTY VIEW ######################
######################################################

window = {
	name = "holding_view"
	widgetid = "holding_view_id"
	parentanchor = bottom|left
	allow_outside = yes
	movable = no
	layer = windows_layer
	maximumsize = { 750 -1 }
	scissor = yes
	size = { 750 0 }
	datacontext = "[HoldingView.GetHolding]"
	datacontext = "[HoldingView.GetProvince]"
	datacontext = "[HoldingView.GetHolder]"
	datacontext = "[Province.GetCounty]"

	background = {
		texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
		spriteType = Corneredtiled
		spriteborder = { 18 18 }
		margin = { -23 -17 }
		margin_left = 20
		margin_bottom = 20
		texture_density = 2

		modify_texture = {
			name = "overlay"
			texture = "gfx/interface/component_overlay/overlay_effect.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = overlay
		}
	}

	state = {
		name = _show
		on_start = "[GetVariableSystem.Set( 'county_view_open', 'true' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"
		on_start = "[GetScriptedGui('adjacent_counties').Execute( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"
		on_start = "[DefaultOnCoatOfArmsRightClick(HoldingView.GetProvince.GetCoATitle.GetID)]"

		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
		using = Animation_FadeIn_BottomLeft
	}


	state = {
		name = adjacent_counties
		trigger_on_create = yes
		on_start = "[GetScriptedGui('adjacent_counties').Execute( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"
	}

	state = {
		name = _hide
		on_start = "[GetVariableSystem.Clear( 'county_view_open' )]"
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"

		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
		using = Animation_FadeOut_BottomLeft
	}

	widget = {
		size = { 0 0 }
		scissor = yes

		buttons_window_control = {
			blockoverride "button_go_to" {
				onclick = "[HoldingView.PanToCountyCapital]"
			}

			blockoverride "button_back" {
				visible = "[HasViewHistory]"
				onclick = "[OpenFromViewHistory]"
			}
			blockoverride "button_close" {
				onclick = "[HoldingView.Close]"
			}
		}
	}

	vbox = {
		resizeparent = yes
		name = "window_content"
		margin_right = 40
		margin_top = 25
		margin_left = 5

		hbox = {
			name = "county_header"
			layoutpolicy_horizontal = expanding
			margin_bottom = 2
			spacing = 2

			background = {
				using = Background_Area_Dark
				margin_left = 15
				margin_bottom = 5
			}

			# coa_title_small = {
			# 	datacontext = "[HoldingView.GetCountyTitle]"
			# }

			#title
			vbox = {
				hbox = {
					layoutpolicy_horizontal = expanding
					ignoreinvisible = yes

					margin_left = 3

					text_single = {
						raw_text = "[AddTextIf(HoldingView.GetHolding.IsEmpty, HoldingView.GetProvince.GetTerrain.GetNameNoTooltip)][AddTextIf(Not(HoldingView.GetHolding.IsEmpty), HoldingView.GetHolding.GetPrimaryBuildingType.GetTypeName)] of [HoldingView.GetHolding.GetNameNoTooltip] in [HoldingView.GetCountyTitle.GetNameNoTooltip]."
						max_width = 420
					}

					button_text = {
						onclick = "[DefaultOnCoatOfArmsRightClick(HoldingView.GetProvince.GetCoATitle.GetID)]"
					    blockoverride "text" {
					        raw_text = "Pan camera."
							align = left
					    }
						shortcut = map_mode_9
					}

					button_text = {
						visible = "[HoldingView.GetCountyTitle.CanPlayerCustomizeTitle]"
						onclick = "[OpenTitleCustomizationWindow(HoldingView.GetCountyTitle)]"
					    blockoverride "text" {
					        raw_text = "Rename county."
							align = left
					    }
					}

					button_text = {
						onclick = "[DefaultOnCoatOfArmsClick(HoldingView.GetCountyTitle.GetID)]"
					    blockoverride "text" {
					        raw_text = "Open title."
							align = left
					    }
					}

					expand = { }
				}

				hbox = {
					datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "your_county"
						visible = "[ObjectsEqual( Character.Self, GetPlayer )]"
						# layoutpolicy_horizontal = expanding
						text = "HOLDING_VIEW_YOUR_COUNTY"
						margin_left = 2
					}

					text_single = {
						name = "top_realm_county"
						visible = "[Character.IsOtherLiegeOrAbove( GetPlayer )]"
						# layoutpolicy_horizontal = expanding
						text = "HOLDING_VIEW_TOP_REALM_COUNTY"
						margin_left = 5
					}

					text_single = {
						name = "foreign_county"
						visible = "[Not(Or(ObjectsEqual( Character.Self, GetPlayer ),Character.IsOtherLiegeOrAbove( GetPlayer )))]"
						# layoutpolicy_horizontal = expanding
						text = "HOLDING_VIEW_FOREIGN_COUNTY"
						margin_left = 5
					}

					text_single = {
						raw_text = "."
					}

					vbox = {
						datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
						visible = "[And(HoldingView.GetProvince.HasCountyCapitalProvince, Not(ObjectsEqual(Character.Self, GetPlayer)))]"
						margin_left = 5

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "HOLDING_VIEW_COUNTY_HOLDER"
								# default_format = "#low"
							}

							char_name = {
								datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
								blockoverride "width" {
									max_width = 200
								}
							}

							text_single = {
								datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
								visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"
								layoutpolicy_horizontal = expanding
								max_width = 250
								raw_text = "[Character.GetRelationToString( GetPlayer )]."
								tooltip = "EXTENDED_RELATIONS_TOOLTIP"
							}
						}
					}

					expand = { }
				}
			}

			expand = { }

			### SIEGE AND RAID GOTO BUTTON ###
			button_group = {
				name = "open_siege_button"
				datacontext = "[HoldingView.GetProvince.GetSiege]"
				visible = "[HoldingView.GetProvince.HasActiveSiege]"
				onclick = "[DefaultOnSiegeClick(Siege.GetID)]"
				tooltip = "[Siege.GetSiegeDescription]"
				using = tooltip_se
				shortcut = county_go_to_siege
				using = siege_goto_template
			}

			button_group = {
				name = "open_raid_button"
				datacontext = "[HoldingView.GetProvince.GetRaid]"
				visible = "[HoldingView.GetProvince.HasActiveRaid]"
				onclick = "[DefaultOnRaidClick( Raid.Self )]"
				tooltip = "MAP_RAID_TOOLTIP"
				shortcut = county_go_to_siege
				using = tooltip_se
				using = raid_goto_template
				blockoverride "tooltip" { }
			}
		}

		#navigation
		vbox = {
			layoutpolicy_horizontal = expanding
			#
			# button_text = {
			# 	layoutpolicy_horizontal = expanding
			#     blockoverride "text" {
			# 		raw_text = "Coordinates: X [HoldingView.GetProvince.MakeScope.Var('pos_x').GetValue|0], Y [HoldingView.GetProvince.MakeScope.Var('pos_y').GetValue|0]. Click to hide"
			#     }
			# }
			hbox = {
				spacing = 3
				layoutpolicy_horizontal = expanding

				button_text = {
				    blockoverride "text" {
				        raw_text = "  [GetDataModelSize(HoldingView.GetCountyTitle.MakeScope.GetList('adjacent_counties'))] Adjacent counties:"
				    }
					onclick = "[GetScriptedGui('adjacent_counties').Execute( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"
				}

				button_text = {
					onclick = "[GetVariableSystem.Toggle('hide_adjacent')]"
					blockoverride "text" {
						raw_text = "Click to [Select_CString(GetVariableSystem.Exists('hide_adjacent'), 'show', 'hide')]."
					}
				}
				expand = { }
			}

			state = {
				on_start = "[GetScriptedGui('adjacent_counties').Execute( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"
				trigger_when = "[IsDataModelEmpty(HoldingView.GetCountyTitle.MakeScope.GetList('adjacent_counties'))]"
			}

			dynamicgridbox = {
				minimumsize = { 50 25 }
				datamodel_wrap = 3
				layoutpolicy_horizontal = expanding
				flipdirection = yes
				visible = "[Not(GetVariableSystem.Exists('hide_adjacent'))]"

				datamodel = "[HoldingView.GetCountyTitle.MakeScope.GetList('adjacent_counties')]"

				item = {
					button = {
						size = { 0 22 }
						onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Scope.Title.GetProvince.GetId))]"
						onclick = "[DefaultOnCoatOfArmsRightClick(Scope.Title.GetProvince.GetTitle.GetID)]"
						# onrightclick = "[DefaultOnCoatOfArmsRightClick(Scope.Title.GetProvince.GetID)]"
						button_ignore = none

						onclick = "[PdxGuiTriggerAllAnimations('adjacent_counties')]"

						flowcontainer = {
							resizeparent = yes
							spacing = 5

							widget = {
								size = { 5 0 }
							}

							text_single = {
								raw_text = "[Scope.Title.GetBaseNameNoTierNoTooltip], "
								max_width = 130
							}

							# text_single = {
							# 	raw_text = "[Scope.Title.MakeScope.Var('direction').GetValue|0]."
							# 	margin_right = 5
							# }

							text_single = {
								raw_text = "[Scope.Title.Custom('county_direction')]."
								# margin_right = 10
							}
						}
					}
				}
			}

			vbox = {
				visible = "[Not(IsDataModelEmpty(HoldingView.GetCountyTitle.MakeScope.GetList('adjacent_counties_across_water')))]"
				layoutpolicy_horizontal = expanding

				button = {
					size = { 400 22 }
					layoutpolicy_horizontal = expanding
					onclick = "[GetVariableSystem.Toggle('hide_across_water')]"

					flowcontainer = {
						ignoreinvisible = yes
						spacing = 5

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "  [GetDataModelSize(HoldingView.GetCountyTitle.MakeScope.GetList('adjacent_counties_across_water'))] Across"
						}

						text_single = {
							raw_text = "sea:"
							visible = "[GetScriptedGui('is_coastal_county').IsShown( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).End )]"
						}
						text_single = {
							raw_text = "river:"
							visible = "[GetScriptedGui('is_riverside_county').IsShown( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).End )]"
						}
						text_single = {
							raw_text = "sea or river:"
							visible = "[GetScriptedGui('is_river_and_coastal').IsShown( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).End )]"
						}

						text_single = {
							background = { using = Background_Area_Dark }
							raw_text = "Click to hide."
							visible = "[Not(GetVariableSystem.Exists('hide_across_water'))]"
						}

						text_single = {
							background = { using = Background_Area_Dark }
							raw_text = "Click to show."
							visible = "[GetVariableSystem.Exists('hide_across_water')]"
						}
					}
				}

				dynamicgridbox = {
					minimumsize = { 50 25 }
					datamodel_wrap = 3
					layoutpolicy_horizontal = expanding
					flipdirection = yes
					visible = "[Not(GetVariableSystem.Exists('hide_across_water'))]"

					datamodel = "[HoldingView.GetCountyTitle.MakeScope.GetList('adjacent_counties_across_water')]"

					item = {
						button = {
							size = { 0 22 }
							onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Scope.Title.GetProvince.GetId))]"
							onclick = "[DefaultOnCoatOfArmsRightClick(Scope.Title.GetProvince.GetTitle.GetID)]"
							# onrightclick = "[DefaultOnCoatOfArmsRightClick(Scope.Title.GetProvince.GetID)]"
							button_ignore = none

							onclick = "[PdxGuiTriggerAllAnimations('adjacent_counties')]"

							flowcontainer = {
								resizeparent = yes
								spacing = 5

								widget = {
									size = { 5 0 }
								}

								text_single = {
									raw_text = "[Scope.Title.GetBaseNameNoTierNoTooltip], "
									max_width = 130
								}

								# text_single = {
								# 	raw_text = "[Scope.Title.MakeScope.Var('direction').GetValue|0]."
								# 	margin_right = 5
								# }

								text_single = {
									raw_text = "[Scope.Title.Custom('county_direction')]."
									# margin_right = 10
								}
							}
						}
					}
				}
			}
		}

		####################################
		########### COUNTY INFO ############
		####################################

		vbox = {
			layoutpolicy_horizontal = expanding
			margin_bottom = 5
			background = {
				using = Background_Area
				margin = { 0 5 }
			}

			#hierarchy

			hbox = {
				margin_left = 10
				layoutpolicy_horizontal = expanding
				spacing = 3
				text_single = {
					raw_text = "De Jure Hierarchy:"
					default_format = "#low"
				}

				button_text = {
					onclick = "[GetVariableSystem.Toggle('hide_hierarchy')]"
					blockoverride "text" {
						raw_text = "Click to [Select_CString(GetVariableSystem.Exists('hide_hierarchy'), 'show', 'hide')]."
						align = left
					}
				}

				expand = { }
			}
			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 10

				hbox = {
					datamodel = "[HoldingView.GetDeJureLieges]"
					visible = "[Not(GetVariableSystem.Exists('hide_hierarchy'))]"

					item = {
						flowcontainer = {
							visible = "[GreaterThan_int32( Title.GetTierFrame, '(int32)3' )]"

							button_text = {
								onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
								onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
							    blockoverride "text" {
							        raw_text = "[Title.GetNameNoTooltip]"
							    }
								blockoverride "extra" {
									text_single = {
										visible = "[Not(Title.HasHolder)]"
										raw_text = ", not created"
										align = nobaseline
									}
								}
								blockoverride "dot_nb" { }
							}
						}
					}
				}

				expand = { }
			}

			hbox = {
				layoutpolicy_vertical = expanding
				visible = "[County.IsFullyOccupied]"
				datacontext = "[County.GetCountyOccupant]"

				button_text = {
				    blockoverride "text" {
				        raw_text = "Occupied by: [Character.GetNameNoTooltip]."
				    }
					using = char_click
				}
			}

			hbox = {
				name = "county_info"
				datacontext = "[HoldingView.GetProvince.GetCountyCapitalProvince]"
				layoutpolicy_horizontal = expanding

				vbox = {
					margin_left = 10

					vbox = {
						# margin = { 10 0 }
						visible = "[Not( IsDataModelEmpty(HoldingView.GetCountyModifiers))]"
						layoutpolicy_horizontal = expanding
						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[GetDataModelSize(HoldingView.GetCountyModifiers)] County modifiers:"
						}

						dynamicgridbox = {
							datamodel_wrap = 3
							datamodel = "[HoldingView.GetCountyModifiers]"

							item = {
								text_single = {
									raw_text = "[ModifierItem.GetName]."
									raw_tooltip = "[ModifierItem.GetTooltip]"
								}
							}
							layoutpolicy_horizontal = expanding
						}
					}

					#resources
					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3
						layoutpolicy_horizontal = expanding
						text_single = {
							# layoutpolicy_horizontal = expanding
							raw_text = "Total tax: [GuiScope.SetRoot(HoldingView.GetCountyTitle.MakeScope).ScriptValue('total_tax')|1]."
						}
						text_single = {
							# layoutpolicy_horizontal = expanding
							raw_text = "Total levies: [GuiScope.SetRoot(HoldingView.GetCountyTitle.MakeScope).ScriptValue('total_levies')|0]."
						}

						flowcontainer = {
							spacing = 5
							# layoutpolicy_horizontal = expanding
							datacontext = "[HoldingView.GetProvince.GetCounty]";
							# expand = { }

							text_single = {
								# layoutpolicy_horizontal = expanding
								raw_text = "[control|E]:"
							}

							text_single = {
								raw_text = "[County.GetControlLevel]."
								default_format = "#high"
								tooltip = "COUNTY_CONTROL_TOOLTIP"

								background = {
									visible = "[LessThan_CFixedPoint(County.GetControl, '(CFixedPoint)100')]"
									margin = { 5 0 }
									using = Status_Bad
								}
							}
						}

						flowcontainer = {
							spacing = 5
							# layoutpolicy_horizontal = expanding

							# expand = { }

							text_single = {
								# layoutpolicy_horizontal = expanding
								raw_text = "[development|E]:"
							}

							text_single = {
								raw_text = "[HoldingView.GetProvince.GetCounty.GetDevelopmentLevelString]."
								default_format = "#high"
								tooltip = "COUNTY_DEVELOPMENT_TOOLTIP"
							}
						}
					}

					flowcontainer = {
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes
						spacing = 5
						flowcontainer = {
							spacing = 5
							ignoreinvisible = yes
							# expand = { }

							text_single = {
								# layoutpolicy_horizontal = expanding
								raw_text = "[county_opinion|E]:"
							}

							button_normal = {
								name = "in_faction"
								visible = "[HoldingView.IsInFaction]"
								onclick = "[HoldingView.OnGotoFaction]"
								tooltip = "COUNTY_IN_FACTION_TOOLTIP"
								size = { 20 20 }
								texture = "gfx/interface/icons/symbols/icon_warning.dds"
							}

							text_single = {
								raw_text = "[HoldingView.GetCountyOpinion|=+]."
								default_format = "#high"
								tooltip = "COUNTY_OPINION_TOOLTIP"
							}
						}

						flowcontainer = {
							datacontext = "[Province.GetCounty.GetCulture]"

							using = tooltip_ne

							# expand = { }

							tooltipwidget = {

								culture_tooltip = {

									blockoverride "extra_info"
									{
										text_single = {
											fonttintcolor = "[TooltipInfo.GetTintColor]"
											using = DefaultTooltipText
											visible = "[Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) )]"
											text = "COUNTY_NOT_YOUR_CULTURE"
										}
									}
								}
							}

							text_single = {
								# layoutpolicy_horizontal = expanding
								raw_text = "[culture|E]:"
							}

							text_single = {
								raw_text = " "
							}

							button_group = {
								# shortcut = "innovations_window"
								onclick = "[DefaultOnCultureClick(Culture.GetID)]"

								text_single = {
									text = "CULTURE_COUNTY_WINDOW"
									default_format = "#high"

									background = {
										visible = "[NotEqualTo_uint32(Culture.GetID, GetPlayer.GetCulture.GetID)]"
										margin = { 5 0 }
										using = Status_Bad
										alpha = 0.5
									}
								}
							}

							text_single = {
								raw_text = "."
							}
						}

						flowcontainer = {
							datacontext = "[Province.GetCounty.GetFaith]"
							# layoutpolicy_horizontal = expanding
							spacing = 5
							using = tooltip_ne

							# expand = { }

							tooltipwidget = {

								faith_tooltip = {

									blockoverride "extra_info" {
										using = faith_tooltip_click_default_extra_info

										text_single = {
											margin = { 10 0 }
											layoutpolicy_horizontal = expanding
											fonttintcolor = "[TooltipInfo.GetTintColor]"
											using = DefaultTooltipText
											visible = "[Not( ObjectsEqual( Faith.Self, GetPlayer.GetFaith ) )]"
											text = "COUNTY_NOT_YOUR_FAITH"
										}
									}
								}
							}

							text_single = {
								# layoutpolicy_horizontal = expanding
								raw_text = "[faith|E]:"
							}

							# vbox = {
							# 	expand = { minimumsize = { 0 2 } }
							# 	icon = {
							# 		size = { 22 22 }
							# 		datacontext = "[Province.GetCounty.GetFaith]"
							# 		texture = "[Faith.GetIcon]"
							# 	}
							# }

							button_group = {
								# shortcut = "faith_window"
								onclick = "[DefaultOnFaithClick(Faith.GetID)]"

								text_single = {
									raw_text = "[Faith.GetNameNoTooltip]."
									default_format = "#high"

									background = {
										visible = "[NotEqualTo_uint32(Faith.GetID, GetPlayer.GetFaith.GetID)]"
										margin = { 5 0 }
										using = Status_Bad
										alpha = 0.5
									}
								}
							}
						}
					}

				}

				expand = { }
			}

			expand = { }
		}


		widget = {
			# layoutpolicy_horizontal = expanding
			size = { 700 26 }
			scissor = yes

			flowcontainer = {
				margin_left = 10
				spacing = 2
				datamodel = "[HoldingView.GetCountyHoldings]"

				text_single = {
					raw_text = "[GetDataModelSize(HoldingView.GetCountyHoldings)] holdings:"
				}

				item = {
					button = {
						datacontext = "[GUICountyHolding.GetHolding]"
						# size = { 45 45  }
						down = "[GUICountyHolding.IsSelected]"
						alwaystransparent = "[GUICountyHolding.IsSelected]"
						onclick = "[GUICountyHolding.OnClick]"
						onclick = "[PdxGuiTriggerAllAnimations('holding_view_refresh')]"
						using = tooltip_ne
						# tooltipwidget = { holding_tooltip_click = { } }
						background = { using = Background_Area_Dark }

						text_single = {
							raw_text = "[AddTextIf(Not(GUICountyHolding.GetHolding.IsEmpty), Concatenate(GUICountyHolding.GetHolding.GetPrimaryBuildingType.GetTypeName, ' '))][GUICountyHolding.GetHolding.GetNameNoTooltip]."
							resizeparent = yes
							margin_left = 3
						}
					}
				}
			}
		}

		####################################
		########## HOLDING INFO ############
		####################################
		margin_widget = {
			name = "holding_info"
			layoutpolicy_horizontal = expanding
			# layoutpolicy_vertical = expanding
			size = { 0 400 }
			margin = { 10 5 }
			margin_bottom = 10
			margin_right = 15
			scissor = yes

			state = {
				name = "holding_view_refresh"
				next = a
				alpha = 0.5
			}

			state = {
				name = "a"
				alpha = 1
				duration = 0.5
				using = Animation_Curve_Default
			}

			background = {
				using = Background_Area_Dark
				margin_left = 5
				margin_top = 3
			}

			background = {
				visible = "[HoldingView.HasHolding]"
				texture = "[HoldingView.GetHolding.GetIllustration]"
				alpha = 0.3

				modify_texture = {
					texture = "gfx/interface/window_county/mask_holding_illustration.dds"
					blend_mode = alphamultiply
					alpha = 0.95
				}
			}

			background = {
				visible = "[Not(HoldingView.HasHolding)]"
				texture = "[HoldingView.GetProvince.GetTerrain.GetIllustration]"
				alpha = 0.3

				modify_texture = {
					texture = "gfx/interface/window_county/mask_holding_illustration.dds"
					blend_mode = alphamultiply
					alpha = 0.95
				}
			}

			### Backgrounds ###

			#################################################
			#### Same as county owner (no background)

			#################################################
			#### Not same as county owner

			background = {
				visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"
				texture = "gfx/interface/component_masks/mask_frame.dds"
				spriteType = Corneredstretched
				spriteborder = { 15 15 }
				using = Color_Blue
				margin = { -3 -3 }
				alpha = 0.3
			}

			#################################################
			#### Leased to Church

			background = {
				#visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"
				visible = no
				texture = "gfx/interface/component_masks/mask_frame.dds"
				spriteType = Corneredstretched
				spriteborder = { 15 15 }
				using = Color_Red
				margin = { -3 -3 }
			}

			#################################################
			#### Leased to Holy Order

			background = {
				#visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"
				visible = no
				texture = "gfx/interface/component_masks/mask_frame.dds"
				spriteType = Corneredstretched
				spriteborder = { 15 15 }
				using = Color_Green
				margin = { -3 -3 }
			}


			### info
			flowcontainer = {
				direction = vertical
				margin_top = 5
				ignoreinvisible = yes

				#modifiers
				dynamicgridbox = {
					name = "holding_modifiers_grid"
					datamodel = "[HoldingView.GetHoldingModifiers]"
					flipdirection = yes

					item = {
						text_single = {
							raw_text = " [ModifierItem.GetName],"
							tooltip = "[ModifierItem.GetTooltip]"
						}
					}
				}

				flowcontainer = {
					direction = vertical
					ignoreinvisible = yes
					spacing = 3

					#holder
					flowcontainer = {
						direction = vertical
						ignoreinvisible = yes

						flowcontainer = {
							ignoreinvisible = yes
							spacing = 5

							text_single = {
								raw_text = "Selected: [AddTextIf(Not(HoldingView.GetHolding.IsEmpty), Concatenate(HoldingView.GetHolding.GetPrimaryBuildingType.GetTypeName, ' of '))][HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]."
								tooltip = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
							}

							#button
							flowcontainer = {
								visible = "[HoldingView.GetTitle.HasHolder]"
								ignoreinvisible = yes

								text_single = {
									raw_text = "County capital."
									visible = "[And(HoldingView.GetProvince.GetTitle.IsCountyCapital, Not(HoldingView.GetProvince.IsRealmCapital))]"
									tooltip = "COUNTY_CAPITAL_TOOLTIP"
								}

								text_single = {
									raw_text = "Realm capital." #TODO what realm
									visible = "[HoldingView.GetProvince.IsRealmCapital]"
									tooltip = "REALM_CAPITAL_TOOLTIP"
								}

								button_text = {
								    blockoverride "text" {
								        raw_text = "Make realm capital"
										align = left
								    }
									blockoverride "extra" {
										text_single = {
											raw_text = ", disabled."
											visible = "[Not(HoldingView.CanSetRealmCapital)]"
										}
									}
									enabled = "[HoldingView.CanSetRealmCapital]"
									visible = "[HoldingView.PotentialSetRealmCapital]"
									onclick = "[HoldingView.SetRealmCapital]"
									tooltip = "[HoldingView.GetSetRealmCapitalTooltip]"
								}

								button_text = {
								    blockoverride "text" {
								        raw_text = "Make county capital."
										align = left
								    }
									visible = "[HoldingView.CanSetCountyCapital]"
									onclick = "[HoldingView.SetCountyCapital]"
									tooltip = "SET_COUNTY_CAPITAL_TOOLTIP"
								}
							}

							button_text = {
							    blockoverride "text" {
							        raw_text = "Rename holding."
									align = left
							    }
								visible = "[HoldingView.GetProvince.GetTitle.CanPlayerCustomizeTitle]"
								onclick = "[OpenTitleCustomizationWindow(HoldingView.GetProvince.GetTitle)]"
							}
						}

						# text_single = {
						# 	raw_text = "Holding owner: [HoldingView.GetHolding.GetLesseeOrHolder.GetNameNoTooltip]"
						# }

						# holder
						flowcontainer = {
							visible = "[Not(HoldingView.GetHolding.IsEmpty)]"
							direction = vertical
							ignoreinvisible = yes

							button_text = {
							    blockoverride "text" {
							        raw_text = "FIND_VASSAL_HEADER"
									onclick = "[HoldingView.ToggleFindVassalListWindow]"
							    }
								visible = "[And( And( ObjectsEqual( HoldingView.GetTitle.GetHolder, GetPlayer ), HoldingView.GetTitle.CanUseFindVassal( GetPlayer ) ), Not(HoldingView.GetTitle.IsLeasedOut))]"
								# tooltip = "FIND_VASSAL_BUTTON_HOLDING_VIEW_TOOLTIP"
							}

							flowcontainer = {
								name = "theocracy_property"
								datacontext = "[HoldingView.GetTitle.GetLesseeOrHolder]"
								# layoutpolicy_vertical = expanding
								margin_left = 2
								spacing = 3

								text_single = {
									datacontext = "[HoldingView.GetTitle]"
									visible = "[Not(Title.IsLeasedOut)]"
									# layoutpolicy_horizontal = expanding
									text = "HOLDING_VIEW_HOLDER"
									default_format = "#low"
								}

								text_single = {
									datacontext = "[HoldingView.GetTitle]"
									visible = "[Title.IsLeasedOut]"
									# layoutpolicy_horizontal = expanding
									text = "HOLDING_VIEW_LESSEE"
									default_format = "#low"
								}

								char_name = {
									blockoverride "text" {
										raw_text = "[Character.GetShortUINameNoTooltip]."
									}
								}

								text_single = {
									visible = "[And(Character.HasRelationTo( GetPlayer ), Not(ObjectsEqual(Character.Self, GetPlayer)))]"
									# layoutpolicy_horizontal = expanding
									raw_text = "[Character.GetRelationToString( GetPlayer )]."
									tooltip = "EXTENDED_RELATIONS_TOOLTIP"
									default_format = "#low"
								}


								flowcontainer = {
									layoutpolicy_horizontal = expanding

									container = {
										name = "revoke_lease_button"
										datacontext = "[HoldingView.GetTitle]"
										visible = "[Title.IsLeasedOut]"

										button_text = {
											blockoverride "text" {
												raw_text = "Revoke lease"
												align = left
											}
											blockoverride "extra" {
												text_single = {
													raw_text = ", disabled"
													visible = "[Not(Character.IsPlayerInteractionWithTargetTitleValid('revoke_leased_title_interaction', Title.Self))]"
												}
											}
											blockoverride "dot" { }
											datacontext = "[Title.GetLessee]"
											visible = "[And( Title.GetHolder.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('revoke_leased_title_interaction', Title.Self) )]"
											enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('revoke_leased_title_interaction', Title.Self)]"
											tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('revoke_leased_title_interaction', Title.Self)]"
											onclick = "[Character.OpenPlayerInteractionWithTargetTitle('revoke_leased_title_interaction', Title.Self)]"
										}
									}

									flowcontainer = {
										datacontext = "[HoldingView.GetTitle]"
										visible = no#"[Title.IsUnderTheocraticLease]" #TODO
										tooltip = "CHURCH_PROPERTY_TOOLTIP"
										layoutpolicy_horizontal = expanding

										icon = {
											name = "church_property"
											texture = "gfx/interface/icons/icon_holding_church.dds"
											size = { 30 30 }
										}
									}
								}
							}
						}

						button_text = {
							layoutpolicy_horizontal = expanding

							blockoverride "text" {
								text = "CREATE_NEW_HOLDING_BUTTON"
								align = left
							}
							blockoverride "extra" {
								text_single = {
									raw_text = ", disabled"
									visible = "[Not(And(HoldingView.CanNewHoldingBeConstructed, Not(HoldingView.IsSelectingHoldingType)))]"
								}
							}
							blockoverride "dot" { }
							name = "construct_holding"
							visible = "[And(Not(HoldingView.HasHolding), Not(HoldingView.IsBeingConstructed))]"
							onclick = "[HoldingView.OnConstructHoldingClick]"
							# tooltip = "[HoldingView.GetHoldingConstructionTooltip]"
							enabled = "[And(HoldingView.CanNewHoldingBeConstructed, Not(HoldingView.IsSelectingHoldingType))]"
						}

						button_text  = {
							blockoverride "text" {
								raw_text = "Fuedalize tribe button"
								align = left
							}
							blockoverride "extra" {
								text_single = {
									raw_text = ", disabled"
									visible = "[Not(Character.IsPlayerInteractionWithTargetTitleValid('feudalize_tribal_holding_interaction', Title.Self))]"
								}
							}
							blockoverride "dot" { }
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('feudalize_tribal_holding_interaction', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('feudalize_tribal_holding_interaction', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('feudalize_tribal_holding_interaction', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('feudalize_tribal_holding_interaction', Title.Self)]"
						}

						#construction
						flowcontainer = {
							direction = vertical
							ignoreinvisible = yes
							spacing = 3
							name = "constructing_holding"
							visible = "[HoldingView.IsBeingConstructed]"

							text_single = {
								raw_text = "Construction: [HoldingView.GetConstructionTimeLeftForSlot('(int32)0')], [HoldingView.GetConstructionProgressForSlot('(int32)0')|0]% done."
								tooltip = "[HoldingView.GetHoldingUnderConstructionTooltip]"
							}

							button_text = {
								blockoverride "text" {
									raw_text = "CANCEL_HOLDING_CONSTRUCTION"
									align = left
								}
								blockoverride "extra" {
									text_single = {
										raw_text = ", cost will be refunded."
									}
								}
								onclick = "[HoldingView.CancelHoldingConstruction]"
								visible = "[HoldingView.CanCancelConstruction]"
								# tooltip = "CANCEL_HOLDING_CONSTRUCTION_TOOLTIP"
							}
						}

						#occupation
						text_single = {
							visible = "[HoldingView.GetProvince.IsOccupied]"
							text = "[HoldingView.GetOccupiedInfo]"
							default_format = "#high"
						}
					}


					flowcontainer = {
						spacing = 3
						ignoreinvisible = yes

						### Tax Income
						flowcontainer = {
							name = "tutorial_highlight_holding_view_taxes_box"
							visible = "[HoldingView.HasHolding]"
							ignoreinvisible = yes
							# margin = { 2 0 }
							tooltip = "[Holding.GetTaxTooltip]"

							background = {
								visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
								using = Status_Bad
								alpha = 0.6
							}

							text_single = {
								text = "HOLDING_TAX"
							}

							widget = {
								size = { 5 0 }
							}

							text_single = {
								text = "HOLDING_TAX_VALUE"
								default_format = "#V"
							}

							text_single = {
								raw_text = "."
								default_format = "#high"
							}

							text_single = {
								raw_text = " Reduced."
								visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
							}
						}

						### Raid loot
						flowcontainer = {
							name = "tutorial_highlight_holding_view_loot_box"
							visible = "[HoldingView.HasHolding]"
							margin = { 2 0 }
							tooltip = "[Holding.GetProvince.GetRaidLootTooltip]"
							ignoreinvisible = yes

							background = {
								visible = "[Holding.GetProvince.IsRecentlyLooted]"
								using = Status_Bad
							}

							text_single = {
								# layoutpolicy_horizontal = expanding
								text = "HOLDING_LOOT"
								default_format = "#high"
							}

							widget = {
								size = { 5 0 }
							}

							text_single = {
								text = "HOLDING_LOOT_VALUE"
							}

							text_single = {
								raw_text = "."
								default_format = "#high"
							}

							text_single = {
								raw_text = " Recently looted."
								visible = "[Holding.GetProvince.IsRecentlyLooted]"
							}
						}

						### Levies
						flowcontainer = {
							visible = "[HoldingView.HasHolding]"
							layoutpolicy_horizontal = expanding
							spacing = 2
							ignoreinvisible = yes

							flowcontainer = {
								# spacing = 3
								ignoreinvisible = yes
								# margin = { 2 0 }

								tooltip = "[Holding.GetLeviesTooltip]"

								background = {
									visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
									using = Status_Bad
									alpha = 0.6
								}

								text_single = {
									# layoutpolicy_horizontal = expanding
									text = "LEVIES"
								}

								widget = {
									size = { 5 0 }
								}

								text_single = {
									raw_text = "[Holding.GetMaxLevySize|0],"
								}

								widget = {
									size = { 5 0 }
								}

								text_single = {
									raw_text = "[Holding.GetUnraisedLevyRatioPercent|0]% of total"
								}

								text_single = {
									raw_text = "."
									default_format = "#high"
								}

								text_single = {
									raw_text = " Reduced."
									visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
								}
							}
						}
					}

					#winter
					flowcontainer = {
						datacontext = "[HoldingView.GetProvince]"
						ignoreinvisible = yes
						spacing = 3

						text_single = {
							raw_text = "[Terrain.GetNameNoTooltip]."
							datacontext = "[HoldingView.GetProvince.GetTerrain]"
							tooltip = "HOLDING_TERRAIN_TOOLTIP"
						}

						### Supply Level
						flowcontainer = {
							tooltip = "[HoldingView.GetSupplyLimitTooltip]"
							layoutpolicy_horizontal = expanding
							spacing = 3

							text_single = {
								# layoutpolicy_horizontal = expanding
								text = "SUPPLY_LIMIT"
								default_format = "#high"
							}

							text_single = {
								raw_text = " [HoldingView.GetSupplyLimit|V]."
								default_format = "#high"
							}
						}

						container = {
							ignoreinvisible = yes
							# margin_left = 5
							text_single = {
								raw_text = " Mild winter."
								visible = "[Province.HasWinterLevel( '(int32)1' )]"
							}

							text_single = {
								raw_text = " Winter."
								visible = "[Province.HasWinterLevel( '(int32)2' )]"
							}

							text_single = {
								raw_text = " Harsh winter."
								visible = "[Province.HasWinterLevel( '(int32)3' )]"
							}
							tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
						}
					}
				}

				@building_width = 500
				@building_height = 45
				### buildings
				flowcontainer = {
					direction = vertical
					visible = "[HoldingView.GetTitle.HasHolder]"

					button_standard = {
						datacontext = "[HoldingView.GetGUIHoldingBuilding]"
						parentanchor = right
						size = { @building_width @building_height }
						allow_outside = yes
						onclick = "[GUIBuildingItem.OnClick]"
						down = "[GUIBuildingItem.IsHighlighted]"
						enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"

						vbox = {
							# resizeparent = yes

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5
								text_single = {
									raw_text = "Main building:"
								}

								text_single = {
									text = "[HoldingView.GetHolding.GetPrimaryBuildingType.GetTypeName]"
								}

								text_single = {
									raw_text = "Tooltip."
									tooltip = "[GUIBuildingItem.GetTooltip]"
								}

								text_single = {
									visible = "[GUIBuildingItem.HasLevel]"
									raw_text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]."
								}

								text_single = {
									raw_text = "Construction: [GUIBuildingItem.GetConstructingProgress|0]%."
									tooltip = "[GUIBuildingItem.GetTooltip]"
									visible = "[GUIBuildingItem.IsConstructing]"
								}

								text_single = {
									datacontext = "[HoldingView.GetHolder]"
									raw_text = "Wrong type for the holder."
									visible = "[And(Not(HoldingView.GetHolding.IsEmpty),Not(HoldingView.GetHolding.IsValidForLesseeOrHolder))]"
									tooltip = HOLDING_VIEW_WRONG_HOLDING_TYPE
								}

								text_single = {
									raw_text = "Disabled."
									visible = "[GUIBuildingItem.IsBuildingDisabled]"
								}
								expand = { }
							}

							### Fort Info
							hbox = {
								layoutpolicy_horizontal = expanding
								tooltip = "[HoldingView.GetGarrisonTooltip]"
								visible = "[HoldingView.GetProvince.HasFort]"
								spacing = 3
								text_single = {
									raw_text = "Fort level [HoldingView.GetProvince.GetFortLevel]."
									tooltip = "[Province.GetFortLevelTooltip]"
									default_format = "#high"
								}

								text_single = {
									raw_text = "Garrison: [HoldingView.GetCurrentGarrisonSize],"
								}

								text_single = {
									raw_text = "[HoldingView.GetGarrisonRatio]% of total."
								}
								expand = { }
							}

							expand = { }
						}
					}

					text_single = {
						raw_text = "Common buildings, [GetDataModelSize(HoldingView.GetBuildings)] slots:"
					}

					flowcontainer = {
						name = "buildings_grid_special"
						ignoreinvisible = yes
						direction = vertical

						# Upgrade buildings
						flowcontainer = {
							name = "buildings_grid"
							datamodel = "[HoldingView.GetBuildings]"
							ignoreinvisible = yes
							direction = vertical

							item = {
								widget_building_text = { }
							}
						}

						flowcontainer = {
							visible = "[Or(HoldingView.HasDuchyCapitalBuildingSlot, HoldingView.HasSpecialBuildingSlot )]"
							# spacing = 3
							ignoreinvisible = yes
							direction = vertical

							text_single = {
								raw_text = "Duchy capital building:"
								datacontext = "[HoldingView.GetGUIDuchyCapitalBuilding]"
								visible = "[HoldingView.HasDuchyCapitalBuildingSlot]"
							}

							widget_building_text = {
								name = "duchy_capital_building"
								datacontext = "[HoldingView.GetGUIDuchyCapitalBuilding]"
								visible = "[HoldingView.HasDuchyCapitalBuildingSlot]"
							}

							text_single = {
								raw_text = "Special building:"
								datacontext = "[HoldingView.GetGUISpecialBuilding]"
								visible = "[HoldingView.HasSpecialBuildingSlot]"
							}

							widget_building_text = {
								name = "special_building"
								datacontext = "[HoldingView.GetGUISpecialBuilding]"
								visible = "[HoldingView.HasSpecialBuildingSlot]"
							}

							# widget = {
							# 	# This is needed to offset the building slots correctly when special building slots exist.
							# 	name = "Conditional_margin_widget"
							# 	size = { 0 0 }
							# 	visible = "[HoldingView.HasSpecialBuildingSlot]"
							# }
						}
					}
				}
			}
		}
	}

	OldCounty = {
		visible = "[GetVariableSystem.Exists('ocr')]"
	}
}

######################################################
########### CONSTRUCT NEW BUILDING WINDOW ############
######################################################

window = {
	name = "holding_tracks_view"
	size = { 100% 100% }
	movable = no
	layer = top
	datacontext = "[HoldingView.GetHolder]"
	using = TooltipFocus

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		position_x = 0
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		position_x = -50
	}

	alwaystransparent = yes

	hbox = {
		expand = {
			max_width = 610
		}

		widget = {
			layoutpolicy_vertical = expanding
			size = { 670 0 }
			allow_outside = yes

			vbox = {
				# margin_top = 170
				margin_bottom = 10

				expand = { }

				vbox = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 0 700 }

					## New Building
					vbox = {
						visible = "[Not(HoldingView.IsSelectingBuildingToConstruct)]"
						layoutpolicy_horizontal = expanding
						alwaystransparent = no
						margin = { 3 3 }
						margin_bottom = 5
						using = Window_Background_Subwindow

						header_pattern = {
							layoutpolicy_horizontal = expanding

							blockoverride "header_text"
							{
								text = "[HoldingView.GetTracksViewLabel]"
							}

							blockoverride "button_close"
							{
								onclick = "[HoldingView.CloseSubwindows]"
							}
						}

						building_in_vassal_warning_hbox = { }

						text_single = {
							layoutpolicy_horizontal = expanding
							margin_left = 10
							raw_text = "Use the preview buttons to read building effects."
						}

						text_single = {
							layoutpolicy_horizontal = shrinking
							name = "prompt"
							text = "[HoldingView.GetTracksViewPrompt]"
							margin_bottom = 10
						}

						text_single = {
							visible = "[IsDataModelEmpty(HoldingView.GetPotentialBuildings)]"
							layoutpolicy_horizontal = shrinking
							name = "no_potential_buildings_text"
							text = "NO_POTENTIAL_BUILDINGS_WARNING"
							margin_bottom = 10
						}

						## Construct New Building
						container = {
							visible = "[Not(IsDataModelEmpty(HoldingView.GetPotentialBuildings))]"
							layoutpolicy_vertical = expanding

							scrollbox = {
								visible = "[Not(HoldingView.IsSelectingBuildingToConstruct)]"
								size = { 700 300 }
								autoresizescrollarea = yes
								maximumsize = { -1 960 }

								blockoverride "scrollbox_content"
								{
									name = "tracks_grid"
									datamodel = "[HoldingView.GetPotentialBuildings]"
									datacontext = "[HoldingView.GetProvince]"
									datacontext = "[HoldingView.GetProvince.GetCounty.GetCulture]"
									visible = "[HoldingView.IsSelectingNewBuilding]"
									spacing = 10
									set_parent_size_to_minimum = yes

									block "scrollbox_margins"
									{
										using = Scrollbox_Margins
										margin_right = 15
										margin_top = 20
									}

									item = {
										vbox = {
											layoutpolicy_horizontal = expanding

											background = {
												using = Background_Area_Light
											}

											hbox = {
												name = "header"
												layoutpolicy_horizontal = expanding

												background = {
													using = Background_Area
												}

												hbox = {
													layoutpolicy_horizontal = expanding

													hbox = {
														layoutpolicy_horizontal = expanding

														button_text = {
														    blockoverride "text" {
																text = "CONSTRUCT"
																visible = "[GUIPotentialBuildingItem.CanConstruct]"
														    }
															enabled = "[GUIPotentialBuildingItem.CanConstruct]"
															onclick = "[GUIPotentialBuildingItem.Construct]"
														}

														text_single = {
															raw_text = " "
														}

														text_single = {
															raw_text = "[GUIPotentialBuildingItem.GetBuilding.GetTypeName]."
															align = nobaseline
														}

														text_single = {
															visible = "[Not(GUIPotentialBuildingItem.CanConstruct)]"
															raw_text = " Disabled, "
															align = nobaseline
														}
														text_single = {
															visible = "[Not(GUIPotentialBuildingItem.CanConstruct)]"
															raw_text = " tooltip."
															tooltip = "[GUIPotentialBuildingItem.GetTooltip]"
															align = nobaseline
														}

														button_text = {
															blockoverride "text" {
																raw_text = "CONSTRUCT_BUILDINGS_DETAILS"
															}
															onclick = "[GUIPotentialBuildingItem.ShowDetails]"
														}

														dot_nb = { }

														hbox = {
															min_width = 120
															spacing = 3
															margin_top = -6

															background = {
																using = Background_Area
																margin_bottom = 4
																margin_left = 6
															}

															text_single = {
																datacontext = "[GUIPotentialBuildingItem.GetGoldCost]"
																visible = "[GUIPotentialBuildingItem.HasGoldCost]"
																# layoutpolicy_horizontal = expanding
																raw_text = "[ValueBreakdown.GetValue], you have [GetPlayer.GetGold|0],"
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = { }
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																	alpha = 0.6
																}
															}

															text_single = {
																datacontext = "[GUIPotentialBuildingItem.GetPrestigeCost]"
																visible = "[GUIPotentialBuildingItem.HasPrestigeCost]"
																# layoutpolicy_horizontal = expanding
																raw_text = "[ValueBreakdown.GetValue], you have [GetPlayer.GetPrestige|0],"
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = { }
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetPrestige, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																	alpha = 0.6
																}
															}

															text_single = {
																# layoutpolicy_horizontal = expanding
																datacontext = "[GUIPotentialBuildingItem.GetPietyCost]"
																visible = "[GUIPotentialBuildingItem.HasPietyCost]"
																raw_text = "[ValueBreakdown.GetValue], you have [GetPlayer.GetPiety|0]."
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = { }
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetPiety, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																	alpha = 0.6
																}
															}

															text_single = {
																# layoutpolicy_horizontal = expanding
																datacontext = "[GUIPotentialBuildingItem.GetConstructionTime]"
																raw_text = "[ValueBreakdown.GetValue]."
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = { }
																}
															}

															expand = { }
														}

														expand = { }
													}
												}
											}

											hbox = {
												name = "dynamic_content"
												layoutpolicy_horizontal = expanding
												margin = {5 5}
												visible = no# "[Not(GetVariableSystem.Exists('hide_building_desc'))]"

												vbox = {
													spacing = 8

													hbox = {
														layoutpolicy_horizontal = expanding
														margin_left = 10

														text_label_left = {
															layoutpolicy_horizontal = expanding
															datacontext = "[GUIPotentialBuildingItem.GetBuilding]"
															text = CV_BUILDING_LEVEL_AND_NAME
															autoresize = no
														}
													}

													text_multi = {
														layoutpolicy_horizontal = expanding
														layoutpolicy_vertical = expanding
														autoresize = yes
														max_width = 330
														min_width = 330
														text = "[GUIPotentialBuildingItem.GetBuilding.GetEffectDescriptionAtProvince( Character.Self, Province.Self, Culture.Self )]"
														margin = { 15 10 }

														background = {
															using = Background_Frame
														}
													}
												}

												text_multi = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													margin = {5 0}
													margin_top = 30
													text = "[GUIPotentialBuildingItem.GetBuilding.GetTypeDescription]"
													default_format = "#F"
													autoresize = yes
													max_width = 280
													min_width = 280
												}
											}
										}
									}
								}
							}
						}
					}

					vbox = {
						vbox = {
							visible = "[HoldingView.IsSelectingBuildingToConstruct]"
							layoutpolicy_horizontal = expanding
							alwaystransparent = no

							## Upgrade Building
							vbox = {
								name = "upgrade"
								datacontext = "[HoldingView.GetTrack]"
								layoutpolicy_horizontal = expanding
								#minimumsize = { 0 700 }
								using = Window_Background_Subwindow
								margin_bottom = 0

									vbox = {
										datacontext = "[HoldingView.GetTrack]"
										visible = "[GUITrackItem.IsConstructing]"
										layoutpolicy_horizontal = expanding
										margin = { 0 15 }
										spacing = 10

										text_single = {
											text = "HOLDING_VIEW_IN_PROGRESS"
											margin = { 0 5 }
										}

										hbox = {
											spacing = 5

											button_text = {
												blockoverride "text" {
													raw_text = "Abort construction."
												}
												blockoverride "extra" {
													text_single = {
														raw_text = " Disabled."
														visible = "[Not(GUITrackItem.CanReplaceOrCancel)]"
														align = nobaseline
													}
												}
												visible = "[GUITrackItem.CanShowReplaceOrCancel]"
												enabled = "[GUITrackItem.CanReplaceOrCancel]"
												onclick = "[GUITrackItem.ReplaceOrCancel]"
												tooltip = "[GUITrackItem.GetReplaceOrCancelTooltip]"
											}
											text_single = {
												# parentanchor = center
												raw_text = "[GUITrackItem.GetConstructTimeLeft]."
												default_format = "#high"
												align = nobaseline
											}
										}
									}

								hbox = {
									layoutpolicy_horizontal = expanding
									margin = { 15 0 }
									spacing = 10

									background = {
										using = Background_Area
									}

									hbox = {
										layoutpolicy_horizontal = expanding

										text_single = {
											raw_text = "[GUITrackItem.GetSelectedBuilding.GetTypeName], "
										}

										building_in_vassal_warning_hbox = {
										}

										expand = { }
									}

									buttons_window_control = {
										alpha = 0.1
										blockoverride "button_close"
										{
											onclick = "[HoldingView.CloseSubwindows]"
										}
									}
								}

								text_single = {
									raw_text = "Building levels:"
									margin_left = 20
									layoutpolicy_horizontal = expanding
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									# layoutpolicy_vertical = expanding
									margin = { 15 5 }

									hbox = {
										layoutpolicy_horizontal = expanding
										margin = { 5 0 }

										### PREVIOUS BUILDINGS
										hbox = {
											name = "level_track_previous"
											datamodel = "[GUITrackItem.GetPreLevelItems]"

											item = {
												button_text = {
													    blockoverride "text" {
													        raw_text = "[BuildingLevelItem.GetBuilding.GetNameNoTooltip]"
													    }
														blockoverride "extra" {
															text_single = {
																raw_text = ", selected"
																visible = "[BuildingLevelItem.IsSelected]"
																align = nobaseline
															}
														}
														blockoverride "dot_nb" { }
														onclick = "[BuildingLevelItem.OnClick]"
													}
											}
										}

										### CURRENT BUILDING


										button_text = {
										    blockoverride "text" {
										        raw_text = "[GUITrackItem.GetCurrentBuilding.GetNameNoTooltip]"
										    }
											blockoverride "extra" {
												text_single = {
													raw_text = ", selected"
													visible = "[GUITrackItem.IsCurrentBuildingSelected]"
													align = nobaseline
												}
											}
											blockoverride "dot_nb" { }
											visible = "[GUITrackItem.HasCurrentBuilding]"
											onclick = "[GUITrackItem.OnCurrentBuildingClick]"
										}


										### NEXT BUILDING

										button_text = {
										    blockoverride "text" {
										        raw_text = "[GUITrackItem.GetNextBuilding.GetNameNoTooltip]"
										    }
											blockoverride "extra" {
												text_single = {
													raw_text = ", selected"
													visible = "[GUITrackItem.IsNextBuildingSelected]"
													align = nobaseline
												}
											}
											blockoverride "dot_nb" { }
											visible = "[GUITrackItem.HasNextBuilding]"
											onclick = "[GUITrackItem.OnNextBuildingClick]"
										}

										# button_icon = {
										# 	name = "next_building"
										# 	visible = "[GUITrackItem.HasNextBuilding]"
										# 	down = "[GUITrackItem.IsNextBuildingSelected]"
										# 	alwaystransparent = "[GUITrackItem.IsNextBuildingSelected]"
										# 	size = { 60 60 }
										# 	texture = "gfx/interface/buttons/button_round_big.dds"
										# 	onclick = "[GUITrackItem.OnNextBuildingClick]"
										# 	tooltip = "[GUITrackItem.GetNextBuildingTooltip]"
										# 	using = tooltip_ne
										# 	tooltip_offset = { 40 0 }
										#
										# 	background = {
										# 		visible = "[GUITrackItem.IsConstructing]"
										# 		texture = "gfx/interface/window_county/building_status_circle.dds"
										# 		framesize = { 120 120 }
										# 		frame = 2
										# 		alpha = 0.5
										# 		using = Master_Button_Modify_Texture
										#
										# 		blockoverride "master_color_frame" {
										# 			frame = 4
										# 		}
										# 	}
										#
										# 	button_icon_highlight = {
										# 		name = "level_icon"
										# 		parentanchor = center
										# 		size = { 41 24 }
										# 		down = "[GUITrackItem.IsNextBuildingSelected]"
										# 		alwaystransparent = yes
										# 		texture = "[GUITrackItem.GetNextLevelIcon]"
										# 		#frame = "[GUITrackItem.GetNextLevelIconFrame]"
										# 	}
										#
										# 	icon = {
										# 		visible = "[GUITrackItem.IsNextBuildingSelected]"
										# 		parentanchor = bottom|hcenter
										# 		position = { 0 8 }
										# 		texture = "gfx/interface/window_county/building_selected_arrow.dds"
										# 		size = { 18 12 }
										# 		using = Master_Button_Modify_Texture
										#
										# 		blockoverride "master_color_frame" {
										# 			frame = 2
										# 		}
										# 	}
										# }
										#
										# widget = {
										# 	visible = "[Not(IsDataModelEmpty( GUITrackItem.GetPostLevelItems ))]"
										# 	layoutpolicy_horizontal = expanding
										# 	size = { 5 6 }
										#
										# 	background = {
										# 		texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
										# 		margin = { 2 0 }
										# 		using = Master_Button_Modify_Texture
										#
										# 		blockoverride "master_color_frame" {
										# 			frame = 1
										# 		}
										# 	}
										# }

										#Post Track
										### LEVEL TRACK
										hbox = {
											name = "level_track_next"
											datamodel = "[GUITrackItem.GetPostLevelItems]"

											item = {
												button_text = {
													    blockoverride "text" {
													        raw_text = "[BuildingLevelItem.GetBuilding.GetNameNoTooltip]"
													    }
														blockoverride "extra" {
															text_single = {
																raw_text = ", selected"
																visible = "[BuildingLevelItem.IsSelected]"
																align = nobaseline
															}
														}
														blockoverride "dot_nb" { }
														onclick = "[BuildingLevelItem.OnClick]"
													}
											}
										}

										expand = { }
									}

									spacer = {
										size = { 10 0 }
									}

									# Buliding info
									vbox = {
										layoutpolicy_horizontal = expanding

										background = {
											using = Background_Frame
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											margin_top = 5
											margin_left = 15

											text_label_left = {
												layoutpolicy_horizontal = expanding
												text = "[GUITrackItem.GetSelectedBuilding.GetNameNoTooltip]"
												default_format = "#high"
												using = Font_Size_Medium
											}
										}

										vbox = {
											name = "flavor_and_effect"
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											margin = { 5 5 }

											text_multi = {
												datacontext = "[HoldingView.GetProvince.GetCounty.GetCulture]"
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												autoresize = yes
												# max_width = 330
												min_width = 330
												text = "[GUITrackItem.GetSelectedBuilding.GetEffectDescriptionAtProvince( Character.Self, HoldingView.GetProvince, Culture.Self)]"
												margin = { 15 10 }
											}

											divider_light = {
												layoutpolicy_vertical = expanding
											}

											vbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding

												hbox = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													margin = { 15 5 }

													text_multi = {
														layoutpolicy_horizontal = expanding
														layoutpolicy_vertical = expanding
														autoresize = yes
														max_width = 700
														min_width = 330
														raw_text = "[GUITrackItem.GetSelectedBuilding.GetDescription]."
													}
													expand = { }
												}


												hbox = {
													visible = "[And(And(GUITrackItem.CanReplaceOrCancel, GUITrackItem.IsCurrentBuildingSelected), Not(GUITrackItem.IsConstructing))]"
													spacing = 10
													margin_bottom = 5

													text_single = {
														text = "CURRENT_BUILDING"
														default_format = "#weak"
														align = nobaseline
													}
												}

												vbox = {
													visible = "[And(And(GreaterThan_int32(GUITrackItem.GetSelectedBuilding.GetLevel,GUITrackItem.GetCurrentBuilding.GetLevel),GreaterThan_int32(GUITrackItem.GetSelectedBuilding.GetLevel,'(int32)1')), Not(GUITrackItem.IsNextBuildingSelected))]"
													layoutpolicy_horizontal = expanding
													margin_left = 10
													margin_bottom = 5
													# spacing = 5

													text_label_left = {
														layoutpolicy_horizontal = expanding
														text = "UPGRADE_COST"
													}

													hbox = {
														layoutpolicy_horizontal = expanding
														spacing = 10
														# margin = { 10 10 }

														hbox = {
															spacing = 10

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedGoldCost]"
																visible = "[GUITrackItem.HasSelectedGoldCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = { }
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedPrestigeCost]"
																visible = "[GUITrackItem.HasSelectedPrestigeCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = { }
																}
															}

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedPietyCost]"
																visible = "[GUITrackItem.HasSelectedPietyCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = { }
																}
															}

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedConstructionTime]"
																raw_text = "[ValueBreakdown.GetValue]."
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = { }
																}
															}
														}

														expand = { }
													}

													text_single = {
														raw_text = "Warning, can't construct. See tooltip."
														tooltip = "[GUITrackItem.GetSelectedBuildingBlockReasons]"
														visible = "[Not(GUITrackItem.CanConstructSelectedBuilding)]"
														align = nobaseline
														layoutpolicy_horizontal = expanding
													}
												}

											}
										}
									}

									spacing = 5

									hbox = {
										visible = "[Not(GUITrackItem.IsConstructing)]"
										spacing = 3
										# layoutpolicy_horizontal = expanding
										margin = { 10 10 }

										button_text = {
											name = "back_button"
											blockoverride "text" {
												raw_text = "Go back button."
											}
											visible = "[And(EqualTo_int32(GUITrackItem.GetNextBuilding.GetLevel,'(int32)1'), Not(GUITrackItem.IsConstructing))]"
											onclick = "[GUITrackItem.GoBack]"
											oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
											clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
											shortcut = "go_back"
										}

										button_text = {
										    blockoverride "text" {
										        raw_text = "Replace building."
										    }
											onclick = "[GUITrackItem.ReplaceOrCancel]"
											# tooltip = "[GUITrackItem.GetReplaceOrCancelTooltip]"
											visible = "[And(GUITrackItem.IsCurrentBuildingSelected, GUITrackItem.CanReplaceOrCancel)]"
										}

										hbox = {
											visible = "[GUITrackItem.HasNextBuilding]"
											layoutpolicy_horizontal = expanding
											margin_top = -5

											text_single = {
												raw_text = " Cost: "
											}

											hbox = {
												background = {
													using = Background_Area
													margin_bottom = 4
													margin_left = 6
												}

												text_single = {
													datacontext = "[GUITrackItem.GetNextGoldCost]"
													visible = "[GUITrackItem.HasNextGoldCost]"
													text = "[ValueBreakdown.GetValue]"
													tooltip_enabled = "[ValueBreakdown.HasTooltip]"

													tooltipwidget = {
														widget_value_breakdown_tooltip = { }
													}

													background = {
														visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
														using = Status_Bad
													}
												}

												text_single = {
													datacontext = "[GUITrackItem.GetNextPrestigeCost]"
													visible = "[GUITrackItem.HasNextPrestigeCost]"
													text = "[ValueBreakdown.GetValue]"
													tooltip_enabled = "[ValueBreakdown.HasTooltip]"

													tooltipwidget = {
														widget_value_breakdown_tooltip = { }
													}

													background = {
														visible = "[LessThan_CFixedPoint(GetPlayer.GetPrestige, ValueBreakdown.GetFixedPointValue)]"
														using = Status_Bad
													}
												}


												hbox = {
													layoutpolicy_horizontal = expanding
													datacontext = "[GUITrackItem.GetNextPietyCost]"
													visible = "[GUITrackItem.HasNextPietyCost]"

													text_single = {
														text = "[ValueBreakdown.GetValue]"
														tooltip_enabled = "[ValueBreakdown.HasTooltip]"

														tooltipwidget = {
															widget_value_breakdown_tooltip = { }
														}
													}

													text_single = {
														visible = "[LessThan_CFixedPoint(GetPlayer.GetPiety, ValueBreakdown.GetFixedPointValue)]"
														raw_text = "@warning_icon!"
													}

													expand = { }
												}

												text_single = {
													layoutpolicy_horizontal = expanding
													datacontext = "[GUITrackItem.GetNextConstructionTime]"
													text = "[ValueBreakdown.GetValue]"
													tooltip_enabled = "[ValueBreakdown.HasTooltip]"

													tooltipwidget = {
														widget_value_breakdown_tooltip = { }
													}
												}
											}
										}

										button_text = {
										    blockoverride "text" {
										        raw_text = "[SelectLocalization(EqualTo_int32(GUITrackItem.GetNextBuilding.GetLevel, '(int32)1'),'CONSTRUCT','UPGRADE')]"
										    }
											blockoverride "extra" {
												text_single = {
													raw_text = ", disabled. Tooltip"
													tooltip = "[GUITrackItem.GetNextBuildingTooltip]"
													visible = "[Not(GUITrackItem.CanConstructNextBuilding)]"
													align = nobaseline
												}
											}
											blockoverride "dot_nb" { }
											onclick = "[GUITrackItem.OnClick]"
											enabled = "[GUITrackItem.CanConstructNextBuilding]"
											visible = "[GUITrackItem.HasNextBuilding]"
											shortcut = "confirm"
										}

										expand = { }
									}
								}
							}
						}

						expand = { }
					}

					expand = { }
				}
			}
		}

		expand = { }
	}
}

######################################################
############ HOLDING TYPE SELECTION VIEW #############
######################################################

window = {
	name = "holding_type_selection_view"
	movable = yes
	layer = top
	parentanchor = bottom|hcenter
	position = { 40 -50 } #40
	using = Animation_ShowHide_Quick
	using = TooltipFocus

	using = Window_Background_Subwindow

	vbox = {
		set_parent_size_to_minimum = yes
		margin = { 4 4 }
		margin_bottom = 15
		spacing = 15

		header_pattern = {
			layoutpolicy_horizontal = expanding
			size = { 0 30 }

			blockoverride "header_text"
			{
				text = "CREATE_NEW_HOLDING_HEADING"
			}

			blockoverride "button_close"
			{
				onclick = "[HoldingView.CloseHoldingConstruction]"
			}
		}

		building_in_vassal_warning_hbox = { }

		vbox = {
			name = "holding_types"
			datamodel = "[HoldingView.GetHoldingTypeItems]"
			layoutpolicy_horizontal = expanding
			spacing = 5
			# margin = { 10 10 }

			item = {
				button_standard = {
					size = { 250 148 }
					enabled = "[HoldingTypeItem.CanConstructBuilding]"
					onclick = "[HoldingTypeItem.OnClick]"
					# tooltip = "[HoldingTypeItem.GetTooltip]"
					datacontext = "[HoldingTypeItem.GetProvince]"

					# widget = {
					# 	scissor = yes
					# 	size = { 247 146 }
					#
					# 	icon = {
					# 		visible = "[HoldingTypeItem.CanConstructBuilding]"
					# 		size = { 320 146 }
					# 		texture = "[HoldingTypeItem.GetBuilding.GetIllustration(Province.Self)]"
					# 		using = Mask_Rough_Edges
					# 		alpha = 0.7
					# 	}
					#
					# 	highlight_icon = {
					# 		visible = "[Not(HoldingTypeItem.CanConstructBuilding)]"
					# 		size = { 320 146 }
					# 		texture = "[HoldingTypeItem.GetBuilding.GetIllustration(Province.Self)]"
					# 		effectname = "GreyedOut"
					# 		tintcolor = { 0.6 0.6 0.6 1 }
					# 		using = Mask_Rough_Edges
					# 	}
					# }

					flowcontainer = {
						margin = { 10 5 }
						spacing = 5
						ignoreinvisible = yes
						resizeparent = yes
						direction = vertical
						# layoutpolicy_horizontal = expanding

						text_multi = {
							raw_text = "[HoldingTypeItem.GetTooltip]."
							max_width = 400
							min_width = 400
							autoresize = yes
							alwaystransparent = yes
						}

						# text_single = {
						# 	raw_text = "[AddTextIf(Not(HoldingTypeItem.CanConstructBuilding), 'Disabled. ')]Construct [HoldingTypeItem.GetHoldingType.GetName]."
						# }

						text_multi = {
							name = "wrong_type"
							max_width = 400
							min_width = 400
							autoresize = yes
							visible = "[Not(HoldingTypeItem.IsValidForPlayer)]"
							size = { 35 35 }
							raw_text = "HOLDING_SELECTION_VIEW_WRONG_HOLDING_TYPE"
							alwaystransparent = yes
						}
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types CountyViewTypes
{
	type widget_building_text = button_standard {
		size = { @building_width 20 }
		allow_outside = yes
		onclick = "[GUIBuildingItem.OnClick]"
		down = "[GUIBuildingItem.IsHighlighted]"
		enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"

		vbox = {
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 5

				text_single = {
					text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetNameNoTooltip]"
					visible = "[GUIBuildingItem.HasLevel]"
				}

				text_single = {
					visible = "[GUIBuildingItem.HasLevel]"
					raw_text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]."
				}

				text_single = {
					raw_text = "Button disabled."
					visible = "[Not(GUIBuildingItem.IsBuildingButtonEnabled)]"
				}

				text_single = {
					raw_text = "Build new."
					visible = "[And(And(GUIBuildingItem.IsBuildNewIconShown, GUIBuildingItem.IsBuildingButtonEnabled), Not(GUIBuildingItem.HasLevel))]"
				}

				text_single = {
					raw_text = "Can upgrade."
					visible = "[GUIBuildingItem.CanUpgrade]"
				}

				text_single = {
					raw_text = "Construction: [GUIBuildingItem.GetConstructingProgress|0]%."
					tooltip = "[GUIBuildingItem.GetTooltip]"
					visible = "[GUIBuildingItem.IsConstructing]"
				}

				text_single = {
					raw_text = "Building disabled."
					visible = "[GUIBuildingItem.IsBuildingDisabled]"
				}

				text_single = {
					visible = "[GUIBuildingItem.HasLevel]"
					raw_text = "Tooltip."
					tooltip = "[GUIBuildingItem.GetTooltip]"
				}
				expand = { }
			}

			expand = { }
		}
	}

	type widget_building_item = widget {
		parentanchor = bottom
		size = { 55 55 }
		enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"
		tooltip = "[GUIBuildingItem.GetTooltip]"
		using = tooltip_ne

		button_standard = {
			name = "building_button"
			size = { 100% 100% }
			onclick = "[GUIBuildingItem.OnClick]"
			down = "[GUIBuildingItem.IsHighlighted]"

			highlight_icon = {
				name = "build_new_icon"
				visible = "[And(And(GUIBuildingItem.IsBuildNewIconShown, GUIBuildingItem.IsBuildingButtonEnabled), Not(GUIBuildingItem.HasLevel))]"
				parentanchor = center
				size = { 28 28 }
				alpha = 0.7
				texture = "gfx/interface/icons/symbols/icon_plus.dds"
			}

			icon_building = {
				name = "building_icon"
				visible = "[Not( GUIBuildingItem.CanUpgrade )]"
				parentanchor = center
				size = { 40 40 }
				texture = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetTypeIcon]"
			}

			highlight_icon_building = {
				name = "building_icon_can_upgrade"
				visible = "[GUIBuildingItem.CanUpgrade]"
				parentanchor = center
				size = { 40 40 }
				texture = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetTypeIcon]"
			}

			text_single= {
				visible = "[GUIBuildingItem.HasLevel]"
				text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]"
				parentanchor = bottom|right
				position = { -6 -3 }
				fontsize = 15
				default_format = "#low;bold"
				align = nobaseline

				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}

				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}

				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}
			}

			warning_icon = {
				name = "reduced_by_fixable_situation"
				visible = "[GUIBuildingItem.IsBuildingDisabled]"
				size = { 25 25 }
			}
		}

		icon = {
			name = "building_slot"
			size = { 100% 100% }
			using = Background_Area
			visible = "[GUIBuildingItem.IsBuildingSlotShown]"
		}

		progressbar_standard = {
			name = "construct_progressbar"
			visible = "[GUIBuildingItem.IsConstructing]"
			parentanchor = bottom
			position = { 0 8 }
			alwaystransparent = yes
			size = { 100% 10 }
			value = "[GUIBuildingItem.GetConstructingProgress]"
			direction = horizontal
			tooltip = "[GUIBuildingItem.GetTooltip]"
		}
	}

	type building_in_vassal_warning_hbox = hbox
	{
		name = "vassal_warning"
		visible = "[Not( ObjectsEqual( HoldingView.GetHolder, GetPlayer ) )]"
		layoutpolicy_horizontal = expanding
		margin = { 5 0 }

		# coa_title_tiny = {
		# 	datacontext = "[HoldingView.GetHolder.GetPrimaryTitle]"
		# }

		text_single = {
			text = "HOLDING_VIEW_BUILDING_IN_VASSAL"
			layoutpolicy_horizontal = expanding
		}
	}
}

