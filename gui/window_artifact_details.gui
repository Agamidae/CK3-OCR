window = {
	name = "artifact_details_view"
	size = { 100% 100% }
	layer = middle

	# using = Window_Movable
	using = Window_Background_No_Edge

	datacontext = "[GetVariableSystem]"
	datacontext = "[ArtifactDetailsView.GetArtifact]"

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		on_start = "[GetVariableSystem.Set( 'details_right_side_tab', 'claims' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
	}

	state = {
		name = tabs
		trigger_when = "[Not(GetVariableSystem.Exists('artifact_tabs'))]"
		on_start = "[GetVariableSystem.Set('artifact_tabs', 'desc')]"
	}

	vbox = {
		using = fullscreen_window

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "ARTIFACT_DETAILS_TITLE"
				using = Font_Size_Medium
			}

			blockoverride "button_close"
			{
				onclick = "[ArtifactDetailsView.Close]"
			}
		}

		vbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			# left vbox is the artifact details
			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[GetVariableSystem.HasValue('artifact_tabs', 'desc')]"

				hbox = {
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						vbox = {
							name = "text"
							layoutpolicy_horizontal = expanding

							flowcontainer = {
								layoutpolicy_horizontal = expanding
							    ignoreinvisible = yes

								text_single = {
									text = "[Artifact.GetNameNoTooltip]"
								}

								text_single = {
									raw_text = "[AddTextIf(StringIsEmpty(Artifact.GetNameNoTooltip), 'Unnamed')]"
								}
								text_single = {
									raw_text = ", [Artifact.GetRarityAndSlotType]."
								}
							}

							expand = { }
						}


						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Rename artifact."
							}
							visible = "[Artifact.GetOwner.IsLocalPlayer]"
							onclick = "[Artifact.OpenRenameWindow]"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "View [GetDataModelSize(Artifact.GetKills)] kills."
							}
							visible = "[DataModelHasItems( Artifact.GetKills )]"
							onclick = "[ToggleGameViewData( 'artifact_kill_list', Artifact.GetID  )]"
						}

						expand = {}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					text_multi = {
						layoutpolicy_horizontal = expanding
						text = "[Artifact.GetModifierEffects]"
						max_width = 1900
						autoresize = yes
					}

					text_multi = {
						visible = "[Not( Artifact.CanBenefitPlayer )]"
						text = "ARTIFACT_FALLBACK_EFFECT"
						max_width = 1900
						autoresize = yes
						layoutpolicy_horizontal = expanding
					}

				}

				vbox = {
					visible = "[And( Not( Artifact.GetOwner.IsLocalPlayer ), Artifact.HasClaim( GetPlayer ) )]"
					layoutpolicy_horizontal = expanding
					spacing = 2

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "You have a claim."
						align = left
					}

					button_text_cant = {
						layoutpolicy_horizontal = expanding
						blockoverride "disabled" {
							visible = "[Not(Artifact.GetOwner.IsPlayerInteractionValid('start_stealing_back_artifact'))]"
						}
						blockoverride "text" {
							raw_text = "Steal artifact."
						}
						enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('start_stealing_back_artifact')]"
						onclick = "[Artifact.GetOwner.OpenPlayerInteraction('start_stealing_back_artifact')]"
						tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip( 'start_stealing_back_artifact' )]"
					}

					button_text_cant = {
						layoutpolicy_horizontal = expanding
						blockoverride "disabled" {
							visible = "[Not(Artifact.GetOwner.IsPlayerInteractionValid('declare_war_interaction'))]"
						}
						blockoverride "text" {
							raw_text = "Declare war."
						}
						enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('declare_war_interaction')]"
						onclick = "[Artifact.GetOwner.OpenDeclareWarViewWithArtifactCB]"
						tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('declare_war_interaction')]"
					}

					button_text_cant = {
						layoutpolicy_horizontal = expanding
						blockoverride "disabled" {
							visible = "[Not(Artifact.GetOwner.IsPlayerInteractionValid('challenge_for_artifact_interaction'))]"
						}
						blockoverride "text" {
							raw_text = "Challenge in duel."
						}

						enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('challenge_for_artifact_interaction')]"
						onclick = "[Artifact.GetOwner.OpenPlayerInteraction('challenge_for_artifact_interaction')]"
						tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('challenge_for_artifact_interaction')]"
					}


					expand = { }
				}
			}

			vbox = {
				visible = "[GetVariableSystem.HasValue('artifact_tabs', 'desc')]"
				layoutpolicy_horizontal = expanding
				hbox = {
					layoutpolicy_horizontal = expanding
					text_multi = {
						layoutpolicy_horizontal = expanding
						name = "artifact_description"
						text = "[Artifact.GetDesc]"
						max_width = 610
						autoresize = yes
					}
					expand = { }
				}

				flowcontainer = {
					layoutpolicy_horizontal = expanding
					ignoreinvisible = yes
					visible = "[Artifact.IsValid]"
					tooltip = "[Artifact.GetDurabilityTooltip]"

					button_text_cant = {
						blockoverride "disabled" {
							visible = "[Not(Artifact.CanReforgeOrRepair( Artifact.GetOwner.Self ))]"
							align = left
						}
						blockoverride "text" {
							raw_text = "Repair"
							align = left
						}
						blockoverride "extra" {
							text_single = {
								raw_text = ", hotkey Tab"
								visible = "[Artifact.CanReforgeOrRepair( Artifact.GetOwner.Self )]"
							}
							dot = { }
							margin_right = 3
						}
						visible = "[And(Artifact.GetOwner.IsLocalPlayer, GreaterThan_CFixedPoint(Artifact.GetMaxDurability, Artifact.GetDurability))]"

						onclick = "[ToggleGameViewData( 'reforge_artifact', Artifact.GetID )]"
						onclick = "[LocalPlayerNewArtifacts.RemoveNewArtifact( Artifact.Self )]"
						enabled = "[Artifact.CanReforgeOrRepair( Artifact.GetOwner.Self )]"
						tooltip = "[Artifact.GetReforgeOrRepairTooltip( Artifact.GetOwner.Self )]"
						shortcut = action_list
					}

					text_single = {
						raw_text = "Does not decay."
						visible = "[Not(Artifact.ShouldDecay)]"
					}


					text_single = {
						visible = "[And( Artifact.ShouldDecay, GreaterThanOrEqualTo_int32( Artifact.GetYearsUntilDecay, '(int32)0' ) )]"
						text = "ARTIFACT_YEARS_UNTIL_DECAY"
					}

					space = { }

					text_single = {
						visible = "[And( Artifact.ShouldDecay, GreaterThanOrEqualTo_int32( Artifact.GetYearsUntilDecay, '(int32)0' ) )]"
						raw_text = "of durability left."
					}

					text_single = {
						raw_text = ""
					}

					# in case a unique gets damaged
					text_single = {
						raw_text = ", durability [Artifact.GetDurability]"
						visible = "[And(GreaterThan_CFixedPoint(Artifact.GetMaxDurability, Artifact.GetDurability), Not(Artifact.ShouldDecay))]"
					}

					text_single = {
						raw_text = " Maximum is [Artifact.GetMaxDurability]."
						visible = "[GreaterThan_CFixedPoint(Artifact.GetMaxDurability, Artifact.GetDurability)]"
					}
				}

				button_text = {
					visible = "[Artifact.GetOwner.IsLocalPlayer]"
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Destroy artifact, hotkey X."
					}
					onclick = "[GetScriptedGui('destroy_artifact').Execute( GuiScope.SetRoot( Artifact.MakeScope ).End )]"
					onclick = "[ArtifactDetailsView.Close]"
					shortcut = increase_speed_2
				}

				char_name = {
					layoutpolicy_horizontal = expanding
					visible = "[Not(Artifact.GetOwner.IsLocalPlayer)]"
					datacontext = "[Artifact.GetOwner]"
					blockoverride "pre" {
						text_single = {
							raw_text = "Owner:"
						}
					}
				}
				margin_bottom = 5
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[GetVariableSystem.Set('artifact_tabs', 'desc')]"
					shortcut = speed_1
					blockoverride "text" {
						raw_text = "Details, tab 1"
					}
					blockoverride "extra" {
						text_single = {
							raw_text = ", selected"
							align = left
							visible = "[GetVariableSystem.HasValue('artifact_tabs', 'desc')]"
						}
						dot = { }
					}
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[GetVariableSystem.Set('artifact_tabs', 'claims')]"
					shortcut = speed_2
					blockoverride "text" {
						raw_text = "[GetDataModelSize(ArtifactDetailsView.GetClaimants)] Claims, tab 2"
					}
					blockoverride "extra" {
						text_single = {
							raw_text = ", selected"
							align = left
							visible = "[GetVariableSystem.HasValue('artifact_tabs', 'claims')]"
						}
						dot = { }
					}
				}
				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[GetVariableSystem.Set('artifact_tabs', 'history')]"
					shortcut = speed_3
					blockoverride "text" {
						raw_text = "[GetDataModelSize(Artifact.GetHistory.GetEntries)] history events, tab 3"
					}
					blockoverride "extra" {
						text_single = {
							raw_text = ", selected"
							align = left
							visible = "[GetVariableSystem.HasValue('artifact_tabs', 'history')]"
						}
						dot = { }
					}
				}
				expand = { }
			}

			# right vbox is claims and history tabs
			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				scrollbox = {
					name = "history"
					visible = "[GetVariableSystem.HasValue('artifact_tabs', 'history')]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content" {
						vbox = {
							layoutpolicy_horizontal = expanding
							name = "history_list"
							datamodel = "[Artifact.GetHistory.GetEntries]"

							item = {
								button_text = {
									layoutpolicy_horizontal = expanding
									datacontext = "[HistoryEntry.GetRecipient]"
									# visible = "[And( HistoryEntry.HasRecipient, Not( ObjectsEqual( HistoryEntry.GetRecipient, HistoryEntry.GetActor ) ) )]"
									using = char_click
								    blockoverride "text" {
										raw_text = "[HistoryEntry.GetDescription]"
										max_width = 1900
								    }
									blockoverride "extra" {
										text_single = {
											align = left
											raw_text = " on [HistoryEntry.GetTitle]"
											visible = "[Not(EqualTo_string(HistoryEntry.GetTitle, 'Unknown Creation'))]"
										}
									}
									blockoverride "dot" {

									}
								}

								# hbox = {
								# 	layoutpolicy_horizontal = expanding
								#
								# 	text_single = {
								# 		raw_text = "[HistoryEntry.GetTitle],"
								# 		align = left
								# 	}
								#
								# 	space = { }
								#
								# 	text_multi = {
								# 		raw_text = "[HistoryEntry.GetDescription]."
								# 		max_width = 1900
								# 		autoresize = yes
								# 	}
								#
								# 	expand = { }
								# }
							}
						}
					}
				}

				scrollbox = {
					name = "artifact_claims"
					visible = "[GetVariableSystem.HasValue('artifact_tabs', 'claims')]"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					blockoverride "scrollbox_empty"
					{
						visible = "[IsDataModelEmpty(ArtifactDetailsView.GetClaimants)]"
						text = "DETAILS_TAB_NO_CLAIMANTS"
					}

					blockoverride "scrollbox_content" {
						fixedgridbox = {
							name = "claims_list"
							datamodel = "[ArtifactDetailsView.GetClaimants]"
							addcolumn = 500
							addrow = 142

							item = {
								widget = {
									size = { 470 138 }

									vbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding

										background = {
											using = Background_Area_With_Header
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											margin_left = 10
											margin_right = 22

											hbox = {
												layoutpolicy_horizontal = expanding
												margin_top = 5
												margin_bottom = 8

												text_single = {
													name = "character_name"
													visible = "[ClaimantEntry.IsCharacter]"
													text = "[ClaimantEntry.GetCharacter.GetUINameNoTooltip]"
													max_width = 400
												}

												text_single = {
													name = "house_name"
													visible = "[ClaimantEntry.IsHouse]"
													text = "[house|E] [ClaimantEntry.GetHouse.GetNameNoTooltip]"
													max_width = 400
												}

												expand = {}
											}

											hbox = {
												layoutpolicy_horizontal = expanding
												margin_top = 5
												margin_bottom = 9

												portrait_head_small = {
													name = "character"
													visible = "[ClaimantEntry.IsCharacter]"
													datacontext = "[ClaimantEntry.GetCharacter]"
												}

												coa_house_medium = {
													name = "house"
													visible = "[ClaimantEntry.IsHouse]"
													datacontext = "[ClaimantEntry.GetHouse]"
												}

												vbox = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding

													hbox = {
														layoutpolicy_horizontal = expanding
														visible = "[ClaimantEntry.IsHouse]"
														margin_left = 10

														text_single = {
															text = "CLAIMANT_ENTRY_HOUSE_HEAD"
															align = left
															multiline = yes
															max_width = 240
														}

														expand = {}
													}

													expand = {}

													hbox = {
														layoutpolicy_horizontal = expanding
														spacing = 6

														icon = {
															name = "flag_icon"
															visible = "[And( ClaimantEntry.IsCharacter, Not( ClaimantEntry.CanDeclareWarForClaim ) )]"
															texture = "gfx/interface/icons/icon_retreat.dds"
															size = { 30 30 }
															tooltip = "CLAIMANT_NOT_A_THREAT"
															using = tooltip_ne
														}

														text_single = {
															datacontext = "[ClaimantEntry.GetCharacter]"

															visible = "[And( ClaimantEntry.IsCharacter, Not( ClaimantEntry.CanDeclareWarForClaim ) )]"
															layoutpolicy_horizontal = expanding
															text = "CHARACTER_CANNOT_DECLARE_WAR_SHORT"
															align = left
														}
													}
												}
											}
										}
									}

									widget = {
										name = "army_composition"
										datacontext = "[ClaimantEntry.GetArmyComposition]"
										visible = "[GreaterThan_int32(ArmyComposition.GetCurrentNumberOfSoldiers, '(int32)0' )]"
										size = { 120 45 }
										parentanchor = right|bottom
										position = { -10 -10 }

										background = {
											using = Background_Area_Dark
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"

											margin = { 0 6 }

												hbox = {
													spacing = 6

													icon = {
														name = "icon_soldier"
														size = { 25 25 }
														texture = "gfx/interface/icons/icon_soldier.dds"
													}

													text_single = {
														text = "[ArmyComposition.GetSoldierCountString]"
														using = Font_Size_Medium
														default_format = "#high"
														align = left
													}

													army_quality_icon = {}
												}

												progressbar_standard = {
													name = "soldiers_max"
													size = { 40 8 }

													min = 0
													max = "[IntToFloat(ArmyComposition.GetMaxNumberOfSoldiers)]"
													value = "[IntToFloat(ArmyComposition.GetCurrentNumberOfSoldiers)]"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
