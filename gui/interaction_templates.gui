types CharacterInteraction
{
	type icon_character_interaction = icon {
		name = "interaction_icon"
		position = { 0 -5 }
		size = { 60 60 }
		texture = "[CharacterInteractionConfirmationWindow.GetInteraction.GetIcon]"
	}

	type vbox_sender_portrait_message = vbox {
		margin = { 10 5 }
		# using = Background_Letter
		datacontext = "[CharacterInteractionNotificationWindow.GetSender]"

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 15


			### TEXT ###
			vbox = {
				layoutpolicy_horizontal = expanding

				text_multi = {
					name = "description"
					max_width = 640
					autoresize = yes
					text = "[CharacterInteractionNotificationWindow.GetNotificationText]"
					default_format = "#light_background"
					using = Font_Size_Medium
				}

				hbox = {
					name = "signature"
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							name = "signed_text"
							layoutpolicy_horizontal = expanding
							text = "[CharacterInteractionNotificationWindow.GetSigned]"
							using = Font_Type_Flavor
							default_format = "#light_background"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							datacontext = "[CharacterInteractionNotificationWindow.GetSender]"
							using = char_click
						    blockoverride "text" {
								text = "[CharacterInteractionNotificationWindow.GetSignature]"
						    }
							blockoverride "dot" {
							}
						}
					}
				}
			}

		}
	}

	type vbox_arrangement_interaction_send_offer = 	vbox {
		name = "send_offer_window"
		margin = { 0 10 }

		hbox_character_interaction_acceptance = {
			layoutpolicy_horizontal = expanding
		}

		button_primary_text = {
			layoutpolicy_horizontal = expanding
			blockoverride "disabled" {
				visible = "[Not(CharacterInteractionConfirmationWindow.CanSend)]"
			}
			blockoverride "text" {
				block "button_content" { }
			}
			onclick = "[MatchmakerInteractionWindow.Send]"
			enabled = "[CharacterInteractionConfirmationWindow.CanSend]"
			tooltip = "[CharacterInteractionConfirmationWindow.GetCanSendDescription]"
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
		}

		widget = {
			size = { 0 5 }
		}

		vbox_interaction_options = {
			layoutpolicy_horizontal = expanding
		}

		text_multi_on_decline_summary = { }
	}

	type vbox_marriage_interaction_marriage_details = vbox {
		margin = { 15 15 }

		background = {
			using = Background_Area
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			icon = {
				name = "marriage_type"
				block "icon_frame"
				{
					visible = "[MatchmakerInteractionWindow.HasPickedCharacters]"
				}

				texture = "gfx/interface/icons/marriage_types.dds"
				framesize = { 60 60 }
				size = { 0 0 }
				frame = "[MarriageInfo.GetMarriageIconFrame]"
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				text_multi = {
					name = "children_house_info"
					visible = "[And( StringIsEmpty( MarriageInfo.GetMatrilinealDesc ), Not( MatchOffer.IsSameSex ) )]"
					layoutpolicy_horizontal = expanding
					max_width = 600
					autoresize = yes
					text = "MARRIAGE_CHILDREN_HOUSE_INFO"
				}

				text_multi = {
					name = "children_chance_info"
					layoutpolicy_horizontal = expanding
					max_width = 600
					autoresize = yes
					text = "MARRIAGE_CHILDREN_CHANCE_INFO"
					tooltip = "[MatchOffer.GetChanceOfChildrenTooltip]"
				}
			}
		}

		### Traits
		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 5 10 }
			# spacing = 5
			visible = "[Not( MatchOffer.IsSameSex )]"

			hbox = {
				layoutpolicy_horizontal = expanding

				text_single = {
					layoutpolicy_horizontal = expanding
					name = "traits_header"
					visible = "[MatchOffer.HasInheritableTraits]"
					raw_text = "[Localize('INHERITABLE_TRAITS')]."
				}

				expand = { }
			}

			text_single = {
				name = "no_traits"
				layoutpolicy_horizontal = expanding
				visible = "[Not(MatchOffer.HasInheritableTraits)]"
				text = "NO_INHERITABLE_TRAITS"
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				hbox = {
					name = "traits"
					datamodel = "[MatchOffer.GetInheritableTraitItems]"
					visible = "[Not(IsDataModelEmpty(MatchOffer.GetInheritableTraitItems))]"

					item = {
						text_single = {
							datacontext = "[MatchmakerTraitInfo.GetTrait]"
							datacontext = "[MatchmakerTraitInfo.GetCharacter]"
							raw_text = "[Trait.GetName(Character.Self)]. "
						}
					}
				}

				expand = { }
			}
		}

		divider_light = {
			layoutpolicy_horizontal = expanding
		}

		### Prestige
		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 10}

			hbox = {
				layoutpolicy_horizontal = expanding

				text_multi = {
					block "get_actor"
					{
						datacontext = "[MatchmakerInteractionWindow.GetActorToMatch]"
					}
					name = "prestige_desc_our"
					max_width = 510
					autoresize = yes
					text = "MARRIAGE_PRESTIGE_DESC_OUR"
					tooltip = "MARRIAGE_PRESTIGE_TOOLTIP_OUR"
				}


				expand = { }
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				text_multi = {
					block "get_recipient"
					{
						datacontext = "[MatchmakerInteractionWindow.GetRecipientToMatch]"
					}
					name = prestige_desc_their
					max_width = 510
					autoresize = yes
					text = "MARRIAGE_PRESTIGE_DESC_THEIR"
					default_format = "#low"
					tooltip = "MARRIAGE_PRESTIGE_TOOLTIP_THEIR"
				}

				expand = { }
			}
		}

		vbox = {
			visible = "[MarriageInfo.HasAlliances]"
			layoutpolicy_horizontal = expanding
			margin = { 0 15 }

			text_single = {
				layoutpolicy_horizontal = expanding
				name = alliances_label
				raw_text = "[alliances|E]."
			}

			vbox = {
				name = "alliance_grid"
				datamodel = "[MarriageInfo.GetAllianceItems]"
				layoutpolicy_horizontal = expanding

				item = {
					vbox = {
						layoutpolicy_horizontal = expanding

						char_name = {
							layoutpolicy_horizontal = expanding
							datacontext = "[AllianceInfo.GetCharacter]"
							blockoverride "pre" {
								text_single = {
									raw_text = "Alliance with"
								}
							}
						}

						hbox = {
						    layoutpolicy_horizontal = expanding
							datacontext = "[AllianceInfo.GetMilitaryInfo]"
							spacing = 3

							text_single = {
								raw_text = "STRENGTH_COMPARISON_TOTAL_STRENGTH"
							}

							text_single = {
								raw_text = "soldiers,"
							}

							text_single = {
								raw_text = "[GuiMilitaryStrength.GetRatioName]."
							}

							tooltip = "[GuiMilitaryStrength.GetRatioDescription]"

						    expand = { }
						}

						expand = { }
					}
				}
			}
		}

		expand = { }
	}

	type vbox_concubine_interaction_details = vbox {
		margin = { 15 15 }

		background = {
			using = Background_Area
		}

		text_multi = {
			name = "children_house_info"
			layoutpolicy_horizontal = expanding
			max_width = 510
			autoresize = yes
			text = "[MatchOffer.GetChanceOfChildrenDesc]"
			tooltip = "[MatchOffer.GetChanceOfChildrenTooltip]"
		}

		text_multi = {
			name = "children_chance_info"
			visible = "[Not( MatchOffer.IsSameSex )]"
			layoutpolicy_horizontal = expanding
			max_width = 510
			autoresize = yes
			text = "CONCUBINE_CHILDREN_HOUSE"
		}

		### Traits
		vbox = {
			margin = { 5 10 }
			spacing = 5
			visible = "[Not( MatchOffer.IsSameSex )]"

			text_label_center = {
				name = "traits_header"
				visible = "[MatchOffer.HasInheritableTraits]"
				#	layoutpolicy_horizontal = expanding
				text = "INHERITABLE_TRAITS"
			}

			text_single = {
				name = "no_traits"
				visible = "[Not(MatchOffer.HasInheritableTraits)]"
				text = "NO_INHERITABLE_TRAITS"
				default_format = "#low;italic"
			}

			hbox = {
				name = "traits"
				datamodel = "[MatchOffer.GetInheritableTraitItems]"
				visible = "[Not(IsDataModelEmpty(MatchOffer.GetInheritableTraitItems))]"

				item = {
					icon_trait = {
						datacontext = "[MatchmakerTraitInfo.GetTrait]"
						datacontext = "[MatchmakerTraitInfo.GetCharacter]"

						blockoverride "actual_description_text"
						{
							text = "TRAIT_ENTRY_INHERITANCE_INFO"
						}

						highlight_icon = {
							name = "guaranteed"
							visible = "[And( MatchmakerTraitInfo.IsGuaranteed, Not(MatchmakerTraitInfo.CanUpgrade) )]"
							position = { 28 30 }
							texture = "gfx/interface/icons/symbols/icon_check.dds"
							size = { 25 25 }
						}

						highlight_icon = {
							name = "upgrade"
							visible = "[MatchmakerTraitInfo.CanUpgrade]"
							texture = "gfx/interface/icons/symbols/icon_arrow_green_down.dds"
							mirror = vertical
							position = { 5 28 }
							size = { 25 25 }
						}
					}
				}
			}

			text_single = {
				name = "inbreeding_risk"
				visible = "[MatchOffer.HasInbreedingRisk]"
				max_width = 510
				text = "MATCH_OFFER_INBREEDING_WARNING"
				default_format = "#low"
			}
		}

		divider_light = {
			layoutpolicy_horizontal = expanding
		}

		expand = { }
	}

	type vbox_list_interaction_title_selection = vbox {
		name = "titles_grid"
		datamodel = "[CharacterInteractionConfirmationWindow.GetTitles]"
		layoutpolicy_horizontal = expanding
		spacing = 1

		item = {
			widget = {
				name = "title_list_item"
				layoutpolicy_horizontal = expanding
				size = { 0 22 }

				button = {
					# size = { 0 20 }
					name = "title_button"
					datacontext = "[InteractionTitleItem.GetTitle]"
					# size = "[InteractionTitleItem.GetSize]"
					onclick = "[InteractionTitleItem.OnClick]"
					onrightclick = "[InteractionTitleItem.OnRightClick]"
					button_ignore = none
					down = "[InteractionTitleItem.IsSelected]"
					enabled = "[InteractionTitleItem.IsSelectable]"

					using = tooltip_es
					# parentanchor = right

					block "button_toggles" {
						enabled = "[InteractionTitleItem.IsSelectable]"
					}

					hbox = {
						resizeparent = yes
						# margin_left = 45
						margin_left = 5
						margin_top = 1
						# margin_right = 5
						spacing = 3
						layoutpolicy_horizontal = expanding

						text_single = {
							raw_text = "Can't select"
							visible = "[Not(InteractionTitleItem.IsSelectable)]"
							tooltip = "[InteractionTitleItem.GetTooltip]"
						}

						text_single = {
							raw_text = "Selected"
							visible = "[InteractionTitleItem.IsSelected]"
						}

						text_single = {
							name = "text"
							# layoutpolicy_horizontal = expanding
							raw_text = "[InteractionTitleItem.GetTitle.GetNameNoTooltip]."
						}

						text_single = {
							raw_text = "Pressed claim."
							visible = "[GetPlayer.HasPressedClaimOnTitle( Title.Self )]"
							tooltip = "REVOKE_TITLE_PRESSED_CLAIM"
						}

						text_single = {
							raw_text = "Unpressed claim."
							visible = "[GetPlayer.HasUnpressedClaimOnTitle( Title.Self )]"
							tooltip = "REVOKE_TITLE_UNPRESSED_CLAIM"
						}

						text_single = {
							raw_text = "Leased out."
							# tooltip = "REVOKE_TITLE_UNPRESSED_CLAIM"
							visible = "[Title.HasLeasedOutVassal]"
							tooltip = "GRANT_TITLE_LEASED_OUT_VASSAL"
						}

						block "extra_title_items" { }

						expand = { }
					}
				}
			}
		}
	}

	type vbox_list_interaction_artifact_selection = vbox {
		name = "artifacts_grid"
		datamodel = "[CharacterInteractionConfirmationWindow.GetArtifacts]"
		layoutpolicy_horizontal = expanding

		item = {
			button_text = {
				layoutpolicy_horizontal = expanding
				onclick = "[CharacterInteractionConfirmationWindow.SetSelectedArtifact( Artifact.Self )]"
				blockoverride "pre" {
					text_single = {
						visible = "[ObjectsEqual( CharacterInteractionConfirmationWindow.GetSelectedArtifact, Artifact.Self )]"
						raw_text = "Selected,"
					}
				}
			    blockoverride "text" {
			        raw_text = "[Artifact.GetNameNoTooltip]."
			    }
				blockoverride "extra" {
					spacing = 3
					text_single = {
						visible = "[GetPlayer.GetInventory.IsEquipped( Artifact.Self )]"
						raw_text = "[Select_CString( Artifact.IsCourtArtifact, 'Displayed', 'Equipped' )]."
					}
				}
				tooltipwidget = {
					artifact_tooltip = { }
				}
			}
		}
	}

	type vbox_character_interaction_three_characters = vbox {
		margin = { 10 10 }

		background = {
			texture = "gfx/interface/illustrations/event_scenes/study.dds"
			alpha = 0.1
			fittype = centercrop
			using = Mask_Rough_Edges
		}

		button_text = {
			layoutpolicy_horizontal = expanding
		    blockoverride "text" {
		        raw_text = "Participants, click to hide."
		    }
			onclick = "[GetVariableSystem.Toggle('hide_x_participants')]"
			visible = "[GetVariableSystem.Exists('hide_x_participants')]"
		}

		button_text = {
			layoutpolicy_horizontal = expanding
		    blockoverride "text" {
		        raw_text = "Show participants."
		    }
			visible = "[Not(GetVariableSystem.Exists('hide_x_participants'))]"
			onclick = "[GetVariableSystem.Toggle('hide_x_participants')]"
		}

		vbox = {
			visible = "[GetVariableSystem.Exists('hide_x_participants')]"
			layoutpolicy_horizontal = expanding

			char_name = {
				layoutpolicy_horizontal = expanding
				blockoverride "pre" {
					spacing = 3
					text_single = {
						raw_text = "Sender: "
					}
				}
				datacontext = "[CharacterInteractionConfirmationWindow.GetActor]"
				visible = "[Character.IsValid]"

			}

			vbox = {
				visible = "[CharacterInteractionConfirmationWindow.ShouldPickSecondaryActor]"
				layoutpolicy_horizontal = expanding

				char_name = {
					layoutpolicy_horizontal = expanding
					datacontext = "[CharacterInteractionConfirmationWindow.GetSecondaryActor]"
					visible = "[CharacterInteractionConfirmationWindow.GetSecondaryActor.IsValid]"
				}
			}

			### Right
			vbox = {
				visible = "[CharacterInteractionConfirmationWindow.ShouldShowSecondaryRecipient]"
				layoutpolicy_horizontal = expanding

				char_name = {
					layoutpolicy_horizontal = expanding
					blockoverride "pre" {
						spacing = 3
						text_single = {
							raw_text = "Selected: "
						}
					}
					datacontext = "[CharacterInteractionConfirmationWindow.GetSecondaryRecipient]"
					visible = "[CharacterInteractionConfirmationWindow.GetSecondaryRecipient.IsValid]"
				}
			}

			char_name = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
				blockoverride "pre" {
					spacing = 3
					text_single = {
						raw_text = "Recepient:"
					}
				}

				visible = "[And( Character.IsValid, Not( ObjectsEqual( CharacterInteractionConfirmationWindow.GetActor, CharacterInteractionConfirmationWindow.GetRecipient ) ) )]"
			}
		}

		vbox = {
			visible = "[GetVariableSystem.Exists('hide_x_participants')]"
			layoutpolicy_horizontal = expanding
			allow_outside = yes

			# text_single = {
			# 	layoutpolicy_horizontal = expanding
			# 	visible = "[CharacterInteractionConfirmationWindow.ShouldPickSecondaryActor]"
			# 	text = "[CharacterInteractionConfirmationWindow.GetActorSecondaryLabel]"
			# 	min_width = 100
			# 	allow_outside = yes
			#
			# }

			change_revert_buttons = {
				layoutpolicy_horizontal = expanding
				visible = "[CharacterInteractionConfirmationWindow.ShouldPickSecondaryActor]"

				blockoverride "ReplaceClick"
				{
					onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
				}
				blockoverride "ReplaceVisible"
				{
					visible = "[CharacterInteractionConfirmationWindow.CanChangeActorCharacter]"
				}
				blockoverride "RevertClick"
				{
					onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
				}
				blockoverride "RevertVisible"
				{
					visible = "[CharacterInteractionConfirmationWindow.CanRevertActorCharacter]"
				}
			}

			# text_single = {
			# 	layoutpolicy_horizontal = expanding
			# 	visible = "[CharacterInteractionConfirmationWindow.ShouldShowSecondaryRecipient]"
			# 	text = "[CharacterInteractionConfirmationWindow.GetRecipientSecondaryLabel]"
			# 	min_width = 100
			#
			# }

			change_revert_buttons = {
				layoutpolicy_horizontal = expanding
				visible = "[CharacterInteractionConfirmationWindow.ShouldShowSecondaryRecipient]"

				blockoverride "ReplaceClick"
				{
					onclick = [CharacterInteractionConfirmationWindow.OnChangeOrRevertRecipientCharacter]
				}
				blockoverride "ReplaceVisible"
				{
					visible = [CharacterInteractionConfirmationWindow.CanChangeRecipientCharacter]
				}
				blockoverride "RevertClick"
				{
					onclick = [CharacterInteractionConfirmationWindow.OnChangeOrRevertRecipientCharacter]
				}
				blockoverride "RevertVisible"
				{
					visible = [CharacterInteractionConfirmationWindow.CanRevertRecipientCharacter]
				}
			}

			# text_single = {
			# 	visible = "[Not( ObjectsEqual( CharacterInteractionConfirmationWindow.GetActor, CharacterInteractionConfirmationWindow.GetRecipient ) )]"
			# 	text = "INTERACTION_RECIPIENT"
			# 	min_width = 100
			# 	layoutpolicy_horizontal = expanding
			# }

		}
	}

	type widget_character_interaction_four_characters = container {
		layoutpolicy_horizontal = expanding
		# size = { 0 90 }

		block "bg_illustration_datacontext" { }

		# Temp background
		background = {
			alpha = 0.1
			fittype = centercrop

			using = Mask_Rough_Edges

			block "bg_illustration"
			{
				texture = "gfx/interface/illustrations/event_scenes/sittingroom.dds"
			}
		}

		flowcontainer = {
			direction = vertical
			position = { 10 0 }
			margin_bottom = 5
			ignoreinvisible = yes

			button_text = {
				blockoverride "text" {
					raw_text = "Participants, click to hide."
				}
				onclick = "[GetVariableSystem.Toggle('hide_x_participants')]"
				visible = "[GetVariableSystem.Exists('hide_x_participants')]"
			}

			button_text = {
				blockoverride "text" {
					raw_text = "Show participants."
				}
				onclick = "[GetVariableSystem.Toggle('hide_x_participants')]"
				visible = "[Not(GetVariableSystem.Exists('hide_x_participants'))]"
			}

			flowcontainer = {
			    ignoreinvisible = yes
				direction = vertical
				visible = "[GetVariableSystem.Exists('hide_x_participants')]"


				flowcontainer = {
					spacing = 0

					block "left_small_portrait"
					{
						datacontext = "[CharacterInteractionConfirmationWindow.GetActor]"
						visible = "[Character.IsValid]"
					}

					char_name = {
						blockoverride "pre" {
							spacing = 3
							text_single = {
								raw_text = "[Localize('INTERACTION_SENDER')],"
							}
						}
						blockoverride "align" {
							align = left
						}
					}

				}

				flowcontainer = {
					spacing = 0

					char_name = {
						blockoverride "pre" {
							spacing = 3
							text_single = {
								block "left_character_label"
								{
									raw_text = "[CharacterInteractionConfirmationWindow.GetActorSecondaryLabel],"
								}
							}
						}
						blockoverride "align" {
							align = left
						}
						block "left_portrait"
						{
							datacontext = "[CharacterInteractionConfirmationWindow.GetSecondaryActor]"
						}
					}

					button_text = {
						name = "tutorial_highlight_change_left_character"
						# alwaystransparent = no
						# tooltip = "CHANGE_CHARACTER"
						blockoverride "text" {
							align = left
							raw_text = "CHANGE_CHARACTER"
						}

						blockoverride "extra" {
							dot = { }
						}


						block "button_left_change"
						{
							visible = "[CharacterInteractionConfirmationWindow.CanChangeActorCharacter]"
							onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
						}
					}

					button_text = {
						name = "revert_left_character"
						# alwaystransparent = no
						# tooltip = "CANCEL"
						blockoverride "text" {
							align = left
							raw_text = "CANCEL"
						}

						blockoverride "extra" {
							dot = { }
						}
						# using = tooltip_below

						# using = Animation_ShowHide_Quick


						block "button_left_revert"
						{
							visible = "[CharacterInteractionConfirmationWindow.CanRevertActorCharacter]"
							onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
						}
					}
				}

				flowcontainer = {
					spacing = 0
					visible = "[CharacterInteractionConfirmationWindow.GetSecondaryRecipient.IsValid]"

					char_name = {
						blockoverride "pre" {
							spacing = 3
							text_single = {
								block "right_character_label"
								{
									raw_text = "[Localize('INTERACTION_RECIPIENT')],"
								}
							}
						}
						blockoverride "align" {
							align = left
						}
						block "right_main_portrait"
						{
							datacontext = "[CharacterInteractionConfirmationWindow.GetSecondaryRecipient]"
						}
					}

					button_text = {
						name = "tutorial_highlight_change_left_character"
						# alwaystransparent = no
						# tooltip = "CHANGE_CHARACTER"
						blockoverride "text" {
							align = left
							raw_text = "CHANGE_CHARACTER"
						}

						blockoverride "extra" {
							dot = { }
						}


						block "button_right_change"
						{
							visible = "[CharacterInteractionConfirmationWindow.CanChangeRecipientCharacter]"
							onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertRecipientCharacter]"
						}
					}

					button_text = {
						name = "revert_right_character"

						blockoverride "text" {
							align = left
							raw_text = "CANCEL"
						}

						blockoverride "extra" {
							dot = { }
						}

						block "button_right_revert"
						{
							visible = "[CharacterInteractionConfirmationWindow.CanRevertActorCharacter]"
							onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
						}
					}
				}

				flowcontainer = {
					spacing = 0

					block "right_small_portrait"
					{
						datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
						visible = "[Character.IsValid]"
					}

					char_name = {
						blockoverride "pre" {
							spacing = 3
							text_single = {
								raw_text = "[Localize('INTERACTION_RECIPIENT')],"
							}
						}
						blockoverride "align" {
							align = left
						}
					}

				}

				button_text = {
				block "button_clear" {
					visible = "[CharacterInteractionConfirmationWindow.CanChangeActorCharacter]"
					enabled = "[CharacterInteractionConfirmationWindow.CanClear]"
					onclick = "[CharacterInteractionConfirmationWindow.OnClear]"
					shortcut = "go_back"
				}
				blockoverride "text" {
					raw_text = "CLEAR_MARRIED_CHARACTER"
				}
				blockoverride "extra" {
					dot = { align = left }
				}
			}
			}

		}

	}

	type vbox_character_interaction_effects_accept_contents = vbox {
		name = "affected_characters_accept"
		visible = "[InteractionEffectsDescription.IsShowingOnAcceptEffects]"
		layoutpolicy_horizontal = expanding
		spacing = 10
		### Me
		vbox_character_interaction_effects_me = {
			visible = "[InteractionEffectsDescription.HasActorAcceptEffect]"
			layoutpolicy_horizontal = expanding

			blockoverride "EffectText" {
				text = "[InteractionEffectsDescription.GetActorAcceptEffectDescription]"
			}
		}

		### Recipient
		vbox_character_interaction_effects_recipient = {
			visible = "[InteractionEffectsDescription.HasRecipientAcceptEffect]"
			layoutpolicy_horizontal = expanding

			blockoverride "EffectText" {
				text = "[InteractionEffectsDescription.GetRecipientAcceptEffectDescription]"
			}
		}

		### Others
		vbox_character_interaction_other_effects = {
			datamodel = "[InteractionEffectsDescription.GetOtherInteractionAcceptEffects]"
			layoutpolicy_horizontal = expanding
		}
	}

	type vbox_character_interaction_effects_decline_contents = vbox {
		name = "affected_characters_decline"
		visible = "[Not(InteractionEffectsDescription.IsShowingOnAcceptEffects)]"
		layoutpolicy_horizontal = expanding
		spacing = 10

		### Me
		vbox_character_interaction_effects_me = {
			visible = "[InteractionEffectsDescription.HasActorDeclineEffect]"
			layoutpolicy_horizontal = expanding

			blockoverride "EffectText" {
				text = "[InteractionEffectsDescription.GetActorDeclineEffectDescription]"
			}
		}

		### Recipient
		vbox_character_interaction_effects_recipient = {
			visible = "[InteractionEffectsDescription.HasRecipientDeclineEffect]"
			layoutpolicy_horizontal = expanding

			blockoverride "EffectText" {
				text = "[InteractionEffectsDescription.GetRecipientDeclineEffectDescription]"
			}
		}

		### Others
		vbox_character_interaction_other_effects = {
			datamodel = "[InteractionEffectsDescription.GetOtherInteractionDeclineEffects]"
			layoutpolicy_horizontal = expanding
		}
	}

	# All the interaction effects on you and on other character
	type vbox_character_interaction_effects = vbox {
		name = "effects"
		# spacing = 10

		vbox = {
			visible = "[And(InteractionEffectsDescription.IsMaybeAnswer,InteractionEffectsDescription.HasRejectionEffect)]"
			layoutpolicy_horizontal = expanding

			button_text = {
				name = "show_accept_effects"
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					text = "INTERACTION_SHOW_ACCEPT_EFFECTS"
				}
				blockoverride "extra" {
					text_single = {
						raw_text = ", tab 1"
						align = left
					}
					text_single = {
						raw_text = ", Selected"
						align = left
						visible = "[InteractionEffectsDescription.IsShowingOnAcceptEffects]"
					}
					dot = { }
				}
				onclick = "[InteractionEffectsDescription.ShowOnAcceptEffect]"
				down = "[InteractionEffectsDescription.IsShowingOnAcceptEffects]"
				using = tooltip_ne
				shortcut = speed_1
			}

			button_text = {
				name = "show_decline_effects"
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					text = "INTERACTION_SHOW_DECLINE_EFFECTS"
				}
				blockoverride "extra" {
					text_single = {
						raw_text = ", tab 2"
						align = left
					}
					text_single = {
						raw_text = ", Selected"
						align = left
						visible = "[Not(InteractionEffectsDescription.IsShowingOnAcceptEffects)]"
					}
					dot = { }
				}
				onclick = "[InteractionEffectsDescription.ShowOnDeclineEffect]"
				down = "[Not(InteractionEffectsDescription.IsShowingOnAcceptEffects)]"
				using = tooltip_ne
				shortcut = speed_2
			}
		}


		container = {
			scrollbox = {
				name = "effects_scrollarea"
				autoresizescrollarea = yes
				visible = "[InteractionEffectsDescription.HasAnyAcceptEffect]"
				scissor = yes

				block "maximumsize" {
					maximumsize = { -1 420 }
				}

				blockoverride "scrollbox_content"
				{
					set_parent_size_to_minimum = yes

					block "minimumsize" {
						minimumsize = { 640 0 }
					}

					vbox_character_interaction_effects_accept_contents = { }
					vbox_character_interaction_effects_decline_contents = { }
				}
			}
		}
	}

	# All the interaction effects on you and on other character, simpler version without portraits
	type vbox_character_interaction_effects_simple = vbox {
		name = "effects"
		# spacing = 10

		vbox = {
			visible = "[And(InteractionEffectsDescription.IsMaybeAnswer,InteractionEffectsDescription.HasRejectionEffect)]"
			layoutpolicy_horizontal = expanding

			button_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "pre" {
					text_single = {
						raw_text = "Showing"
						visible = "[InteractionEffectsDescription.IsShowingOnAcceptEffects]"
					}
					text_single = {
						raw_text = "Show"
						visible = "[Not(InteractionEffectsDescription.IsShowingOnAcceptEffects)]"
					}
					space = { }
				}
			    blockoverride "text" {
					text = "INTERACTION_SHOW_ACCEPT_EFFECTS"
					align = left
			    }
				blockoverride "dot" {

				}
				onclick = "[InteractionEffectsDescription.ShowOnAcceptEffect]"
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "pre" {
					text_single = {
						raw_text = "Showing"
						visible = "[Not(InteractionEffectsDescription.IsShowingOnAcceptEffects)]"
					}
					text_single = {
						raw_text = "Show"
						visible = "[InteractionEffectsDescription.IsShowingOnAcceptEffects]"
					}
					space = { }
				}
			    blockoverride "text" {
					text = "INTERACTION_SHOW_DECLINE_EFFECTS"
					align = left
			    }
				blockoverride "dot" {

				}
				onclick = "[InteractionEffectsDescription.ShowOnDeclineEffect]"
			}
		}

		scrollbox = {
			name = "effects_scrollarea"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			block "scrollarea_size" {
				size = { 0 170 }
			}

			blockoverride "scrollbox_content"
			{
				text_multi = {
					visible = "[InteractionEffectsDescription.IsShowingOnAcceptEffects]"
					name = "accept_effects_info"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					autoresize = yes
					block "width" {
						max_width = 435
					}
					text = "[InteractionEffectsDescription.GetAcceptEffectDescription]"
				}

				text_multi = {
					visible = "[Not(InteractionEffectsDescription.IsShowingOnAcceptEffects)]"
					name = "decline_effects_info"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					autoresize = yes
					block "width" {
						max_width = 435
					}
					text = "[InteractionEffectsDescription.GetRejectionEffectDescription]"
				}
				block "extra_content" { }
			}
		}
	}

	# Interaction effects on me
	type vbox_character_interaction_effects_me = vbox {
		name = "me"
		datacontext = "[InteractionEffectsDescription.GetActor]"

		background = {
			using = Background_Area_With_Header
		}

		flowcontainer = {
			layoutpolicy_horizontal = expanding

			text_single = {
				text = "EFFECTS_ON_ME"
				layoutpolicy_horizontal = expanding
			}
			text_single = {
				raw_text = ":"
			}
		}


		hbox = {
			layoutpolicy_horizontal = expanding

			text_multi = {
				name = "effects_info"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				autoresize = yes
				max_width = 375
				block "EffectText" { }
			}

			expand = { }
		}
	}

	# Interaction effects on the other character
	type vbox_character_interaction_effects_recipient = vbox {
		name = "recipient"
		datacontext = "[InteractionEffectsDescription.GetRecipient]"
		# margin_bottom = 5

		background = {
			using = Background_Area_With_Header
		}

		flowcontainer = {
			layoutpolicy_horizontal = expanding

			text_single = {
				raw_text = "Effects on"
			}

			char_name = {
				blockoverride "align" {
					align = left
				}
				datacontext = "[InteractionEffectsDescription.GetRecipient]"
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			text_multi = {
				name = "effects_info"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				autoresize = yes
				max_width = 375
				margin = { 5 10 }
				block "EffectText" { }
			}

			expand = { }
		}
	}

	# Interaction effects on third party characters
	type vbox_character_interaction_other_effects = vbox {
		name = "other_effects"

		item = {
			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 0 5 }
				spacing = 10

				container = {
					ignoreinvisible = yes
					icon = {
						position = { 16 0 }
						size = { 50 50 }
						texture = "gfx/interface/icons/icon_group_of_characters.dds"
						visible = "[InteractionOtherEffect.IsList]"
						tooltip = "[InteractionOtherEffect.GetListTooltip]"
					}
				}

				text_multi = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					autoresize = yes
					max_width = 375
					raw_text = "[InteractionOtherEffect.GetEffect]."
				}

				expand = { }
			}
		}
	}

	type hbox_character_interaction_acceptance = hbox {
		name = "acceptance"
		visible = "[CharacterInteractionConfirmationWindow.ShouldShowAnswer]"
		margin = { 5 0 }

		widget = {
			name = "answer_chance"
			size = { 330 60 }
			layoutpolicy_horizontal = expanding
			tooltip = "[CharacterInteractionConfirmationWindow.GetAnswerReason]"

			background = {
				margin = { 10 0 }
				using = Background_Area_Dark
			}

			text_single = {
				visible = "[CharacterInteractionConfirmationWindow.IsForcedToAccept]"
				layoutpolicy_horizontal = expanding
				name = "answer"
				text = "ANSWER_REASON_AUTO_ACCEPT"
				default_format = "#color_green"
				using = Font_Size_Medium
				align = left
			}

			vbox = {
				# maximumsize = { 120 46 }
				# parentanchor = center
				visible = "[Not( CharacterInteractionConfirmationWindow.IsForcedToAccept )]"

				text_single = {
					layoutpolicy_horizontal = expanding
					name = "answer"
					raw_text = "[CharacterInteractionConfirmationWindow.GetAnswer]."
				}

				flowcontainer = {
					ignoreinvisible = yes
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[And( Not( CharacterInteractionConfirmationWindow.IsAiMaybe ), Not( CharacterInteractionConfirmationWindow.GetRecipient.IsPlayer ) )]"
						name = "answer_score"
						text = "INTERACTION_ACCEPTANCE_SCORE"
					}

					text_single = {
						visible = "[And( And( CharacterInteractionConfirmationWindow.IsAiMaybe, Not( CharacterInteractionConfirmationWindow.GetRecipient.IsPlayer ) ), Or( Not( CharacterInteractionConfirmationWindow.IsAiAcceptNegotiation ), GreaterThan_int32( CharacterInteractionConfirmationWindow.GetAnswerScore, '(int32)0' ) ) )]"
						name = "answer_chance"
						text = "INTERACTION_ACCEPTANCE_CHANCE"
					}

					text_single = {
						raw_text = " "
					}

					text_single = {
						raw_text = "reasons, See tooltip."
					}
				}

				expand = { }
			}

			progressbar_standard = {
				position = { 0 3 }
				size = { 324 10 }
				parentanchor = bottom|hcenter
				visible = "[And( And( CharacterInteractionConfirmationWindow.IsAiMaybe, Not( CharacterInteractionConfirmationWindow.GetRecipient.IsPlayer ) ), Or( Not( CharacterInteractionConfirmationWindow.IsAiAcceptNegotiation ), GreaterThan_int32( CharacterInteractionConfirmationWindow.GetAnswerScore, '(int32)0' ) ) )]"
				value = "[CharacterInteractionConfirmationWindow.GetAnswerProgress]"
			}
		}
	}

	type text_multi_on_decline_summary = text_multi {
		autoresize = yes
		max_width = 500
		visible = "[CharacterInteractionConfirmationWindow.HasOnDeclineSummary]"
		text = "[CharacterInteractionConfirmationWindow.GetOnDeclineSummary]"
	}

	# Options to consider before accepting and interaction
	type vbox_interaction_options = vbox {
		name = "options_grid"
		visible = "[CharacterInteractionConfirmationWindow.HasOptions]"
		datamodel = "[CharacterInteractionConfirmationWindow.GetOptionItems]"

		block "margin"
		{

		}

		text_single = {
			visible = "[Not( StringIsEmpty(CharacterInteractionConfirmationWindow.GetOptionsHeading) )]"
			layoutpolicy_horizontal = expanding
			text = "[CharacterInteractionConfirmationWindow.GetOptionsHeading]"
		}

		item = {
			widget = {
				visible = "[OptionItem.IsShown]"
				layoutpolicy_horizontal = expanding
				size = { 590 25 }

				background = {
					using = Background_Area_Border
				}

				hbox = {
					visible = "[Or( GreaterThan_int32( CharacterInteractionConfirmationWindow.GetVisibleOptionsCount, '(int32)1' ), Not( CharacterInteractionConfirmationWindow.HasExclusiveOptions ) )]"
					tooltip = "[OptionItem.GetTooltip]"
					layoutpolicy_horizontal = expanding

					button_checked = {
						size = { 30 30 }
						enabled = "[And(OptionItem.IsValid, OptionItem.CanBeChanged)]"
						blockoverride "visible" {
							visible = "[Not(OptionItem.HasOption)]"
						}
						blockoverride "enabled" {
							visible = "[And(OptionItem.IsValid, OptionItem.CanBeChanged)]"
						}
						blockoverride "disabled" {
							visible = "[Not(And(OptionItem.IsValid, OptionItem.CanBeChanged))]"
						}
						onclick = "[OptionItem.OnClick]"
						visible = "[Not(OptionItem.IsExclusive)]"
					}

					button_text = {
					    blockoverride "text" {
					        raw_text = "Selected"
							visible = "[OptionItem.HasOption]"
					    }
						visible = "[OptionItem.IsExclusive]"
						enabled = "[And(OptionItem.IsValid, OptionItem.CanBeChanged)]"
						onclick = "[OptionItem.OnClick]"
					}

					button_text = {
						enabled = "[And(OptionItem.IsValid, OptionItem.CanBeChanged)]"
						onclick = "[OptionItem.OnClick]"
					    blockoverride "text" {
							raw_text = "[OptionItem.GetName]."
					    }
					}

					expand = { }
				}

				hbox = {
					margin = { 10 0 }
					spacing = 5
					tooltip = "[OptionItem.GetTooltip]"
					visible = "[And( CharacterInteractionConfirmationWindow.HasExclusiveOptions, EqualTo_int32( CharacterInteractionConfirmationWindow.GetVisibleOptionsCount, '(int32)1' ) )]"

					text_single = {
						raw_text = "[OptionItem.GetName]."
					}
				}
			}
		}
	}

	type vbox_scheme_info = vbox {
		name = "scheme_info"
		margin = {3 10 }

		hbox = {
			layoutpolicy_horizontal = expanding

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 0 10 }

				text_label_center = {
					text = "SCHEME_PREDICTION_NAME"
					using = Font_Size_Medium
					default_format = "#high"
				}
			}
		}

		vbox = { #summary
			layoutpolicy_horizontal = expanding

			hbox = {
				visible = "[InteractionSchemeInfo.HasSuccessDesc]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				min_width = 135
				tooltip = "SCHEME_PREDICTION_SUCCESS_TT"

				background = {
					using = Background_Area
				}

				text_single = {
					raw_text = "Success chance:"
				}

				text_single = {
					raw_text = " "
				}

				text_single = {
					name = "success"
					text = "SCHEME_PREDICTION_SUCCESS_CHANCE"
					using = Font_Size_Medium
				}

				dot = { }

				expand = { }
			}

			hbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				visible = "[InteractionSchemeInfo.IsSecret]"
				min_width = 135
				tooltip = "SCHEME_PREDICTION_SECRECY_TT"

				background = {
					using = Background_Area
				}

				text_single = {
					raw_text = "Secrecy:"
				}

				space = { }

				text_single = {
					name = "secrecy"
					text = "[InteractionSchemeInfo.GetSecrecy|%/V]"
				}

				dot = { }

				expand = { }
			}

			hbox = {
				name = "expected_time"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				min_width = 135

				background = {
					using = Background_Area
				}

				text_single = {
					raw_text = "Expected time:"
				}

				space = { }

				text_single = {
					text = "[InteractionSchemeInfo.GetEstimatedTime]"
				}

				dot = { }

				expand = { }
				tooltip = "SCHEME_PREDICTION_ESTIMATED_TIME_TT"
			}

			flowcontainer = {
				layoutpolicy_horizontal = expanding
				visible = "[InteractionSchemeInfo.GetScheme.UsesAgents]"

				text_single = {
					text = "SCHEME_PREDICTION_AGENTS"
					tooltip = "SCHEME_PREDICTION_AGENTS_TT"
				}

				dot = { }
			}

		}

		hbox = {
			name = "on_success"
			visible = "[InteractionSchemeInfo.HasSuccessDesc]"
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "SCHEME_PREDICTION_ON_SUCCESS"
					default_format = "#weak"
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					text_multi = {
						layoutpolicy_horizontal = expanding
						max_width = 380
						autoresize = yes
						raw_text = "[InteractionSchemeInfo.GetSuccessDesc]."
					}

					expand = { }
				}
			}
		}

		hbox = {
			name = "on_discovery"
			visible = "[InteractionSchemeInfo.HasDiscoveryDesc]"
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3

				text_single = {
					layoutpolicy_horizontal = expanding

					text = "SCHEME_PREDICTION_ON_DISCOVERY"

					default_format = "#weak"
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					text_multi = {
						layoutpolicy_horizontal = expanding
						autoresize = yes
						max_width = 600
						raw_text = "[InteractionSchemeInfo.GetDiscoveryDesc]."
					}

					expand = { }
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3

				hbox = {
					layoutpolicy_horizontal = expanding

					text_multi = {
						layoutpolicy_horizontal = expanding
						autoresize = yes
						max_width = 500
						text = "SCHEME_PREDICTION_EXPECTED_TIME_TEXT"
					}

					expand = { }
				}
			}
		}


		text_single = {
			visible = "[LessThanOrEqualTo_int32( InteractionSchemeInfo.GetSuccessChance, '(int32)0' )]"
			layoutpolicy_horizontal = expanding
			margin = { 0 10 }
			text = "SCHEME_PREDICTION_NO_SUCCESS"
			tooltip = "SCHEME_PREDICTION_SUCCESS_TT"
			using = Font_Size_Medium
			align = center

			background = {
				using = Background_Area
			}
		}

		text_single = {
			visible = "[InteractionSchemeInfo.IsReplace]"
			text = "INTERACTION_REPLACE_SCHEME"
			layoutpolicy_horizontal = expanding
			margin = { 0 10 }
			align = center

			background = {
				using = Background_Area
			}
		}
	}

	########################################
	type change_revert_buttons = vbox {

		button_text = {
			layoutpolicy_horizontal = expanding
		    blockoverride "text" {
		        raw_text = "Change character."
		    }
			block "ReplaceVisible"
			{
				visible = yes
			}
			block "ReplaceClick"
			{
				onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
			}
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			name = "revert"
			blockoverride "text" {
				raw_text = "Cancel."
			}
			alwaystransparent = no
			using = tooltip_below

			block "RevertClick"
			{
				# onclick = ?
			}

			block "RevertVisible"
			{
				visible = yes
			}
		}
	}

	type dynamicgridbox_interaction_list_enabled = dynamicgridbox {
		name = "interaction_list"
		datamodel_wrap = 15

		item = {
			container = {
				name = "interaction_widget"
				ignoreinvisible = yes

				button_text = {
					visible = "[And(Not(InteractionItem.IsMarriageSetting), InteractionItem.IsValid)]"
					tooltip = "[InteractionItem.GetTooltip]"
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				    blockoverride "text" {
				        raw_text = "[InteractionItem.GetName]"
						align = left
				    }
				    blockoverride "disabled" {
						visible = "[Not(InteractionItem.IsValid)]"
						align = left
				    }
					blockoverride "dot" { }

					blockoverride "extra" {

						text_single = {
							raw_text = ", Will not accept"
							visible = "[And(Not(InteractionItem.IsMore),Not(InteractionItem.IsPotentialAccept))]"
						}

						text_single = {
							raw_text = "Warning, see tooltip."
							visible = "[InteractionItem.HasWarningIcon]"
							tooltip = "[InteractionItem.GetWarningTooltipDesc]"
						}

						margin_right = 10
					}
				}

				button_checked_text = {
					visible = "[And(InteractionItem.IsMarriageSetting, InteractionItem.CheckboxEnabled)]"
					onclick = "[InteractionItem.OnClickCheckbox]"
					enabled = "[InteractionItem.CheckboxEnabled]"
					blockoverride "text" {
						text = "CHARACTER_INTERACTION_ALLOWED_TO_MARRY"
					}

					blockoverride "visible" {
						visible = "[EqualTo_int32(InteractionItem.GetCheckboxFrame, '(int32)1')]"
					}

					blockoverride "extra" {
						text_single = {
							raw_text = ", Tooltip."
							align = left
							tooltip = "[InteractionItem.GetCheckboxTooltip]"
						}
					}
				}
			}
		}
	}

	type dynamicgridbox_interaction_list_disabled = dynamicgridbox {
		name = "interaction_list"
		datamodel_wrap = 15

		item = {
			container = {
				name = "interaction_widget"
				ignoreinvisible = yes

				button_text = {
					visible = "[And(Not(InteractionItem.IsMarriageSetting), Not(InteractionItem.IsValid))]"
					tooltip = "[InteractionItem.GetTooltip]"
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				    blockoverride "text" {
				        raw_text = "[InteractionItem.GetName]"
						align = left
				    }
				    blockoverride "disabled" {
						visible = "[Not(InteractionItem.IsValid)]"
						align = left
				    }
					blockoverride "dot" { }

					blockoverride "extra" {

						text_single = {
							raw_text = ", Will not accept"
							visible = "[And(Not(InteractionItem.IsMore),Not(InteractionItem.IsPotentialAccept))]"
						}

						text_single = {
							raw_text = "Warning, see tooltip."
							visible = "[InteractionItem.HasWarningIcon]"
							tooltip = "[InteractionItem.GetWarningTooltipDesc]"
						}

						margin_right = 10
					}
				}

				button_checked_text = {
					visible = "[And(InteractionItem.IsMarriageSetting, Not(InteractionItem.CheckboxEnabled))]"
					onclick = "[InteractionItem.OnClickCheckbox]"
					enabled = "[InteractionItem.CheckboxEnabled]"
					blockoverride "text" {
						text = "CHARACTER_INTERACTION_ALLOWED_TO_MARRY"
					}

					blockoverride "visible" {
						visible = "[EqualTo_int32(InteractionItem.GetCheckboxFrame, '(int32)1')]"
					}

					blockoverride "extra" {
						text_single = {
							raw_text = ", Tooltip."
							align = left
							tooltip = "[InteractionItem.GetCheckboxTooltip]"
						}
					}
				}
			}
		}
	}

	type dynamicgridbox_interaction_list = dynamicgridbox {
		name = "interaction_list"
		datamodel_wrap = 15

		item = {
			container = {
				name = "interaction_widget"
				ignoreinvisible = yes

				button_text = {
					visible = "[Not(InteractionItem.IsMarriageSetting)]"
					tooltip = "[InteractionItem.GetTooltip]"
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
					# tooltip_enabled = "[Not(InteractionItem.IsValid)]"
				    blockoverride "text" {
				        raw_text = "[InteractionItem.GetName]"
						alwaystransparent = yes
						align = left
				    }
				    blockoverride "disabled" {
						visible = "[Not(InteractionItem.IsValid)]"
						align = left
				    }
					blockoverride "dot" { }

					blockoverride "extra" {

						text_single = {
							raw_text = ", Will not accept"
							visible = "[And(Not(InteractionItem.IsMore),Not(InteractionItem.IsPotentialAccept))]"
						}

						text_single = {
							raw_text = "Warning, see tooltip."
							visible = "[InteractionItem.HasWarningIcon]"
							tooltip = "[InteractionItem.GetWarningTooltipDesc]"
						}

						margin_right = 10
					}
				}

				button_checked_text = {
					visible = "[InteractionItem.IsMarriageSetting]"
					onclick = "[InteractionItem.OnClickCheckbox]"
					enabled = "[InteractionItem.CheckboxEnabled]"
					blockoverride "text" {
						text = "CHARACTER_INTERACTION_ALLOWED_TO_MARRY"
					}

					blockoverride "visible" {
						visible = "[EqualTo_int32(InteractionItem.GetCheckboxFrame, '(int32)1')]"
					}

					blockoverride "extra" {
						text_single = {
							raw_text = ", Tooltip."
							align = left
							tooltip = "[InteractionItem.GetCheckboxTooltip]"
						}
					}
				}
			}
		}
	}

	type flowcontainer_category_group = flowcontainer {
		visible = "[InteractionCategoryItem.IsVisible]"
		direction = vertical

		flowcontainer = {
			direction = vertical
			margin = { 10 0 }

			flowcontainer = {
				name = "category_gridbox_container"
				ignoreinvisible = yes
				maximumsize = { 320 30 }
				spacing = 5

				text_single = {
					name = "category_name"
					raw_text = "[InteractionCategoryItem.GetName]:"
				}
			}

			# sorted
			flowcontainer = {
				direction = vertical
				visible = "[GetVariableSystem.Exists('enabled_x')]"
				dynamicgridbox_interaction_list_enabled = {
					datamodel = "[InteractionCategoryItem.GetInteractions]"
				}
				dynamicgridbox_interaction_list_disabled = {
					datamodel = "[InteractionCategoryItem.GetInteractions]"
				}
			}

			container = {
				visible = "[Not(GetVariableSystem.Exists('enabled_x'))]"
				dynamicgridbox_interaction_list = {
					datamodel = "[InteractionCategoryItem.GetInteractions]"
				}
			}
		}
	}

	## banner for character name and portrait
	type banner_with_portrait = vbox {
		name = "header_with_divider"
		layoutpolicy_horizontal = expanding
		spacing = 5
		margin = { 0 5 }

		background = {
			using = Background_Area_Dark
			alpha = 0.7
		}

		# divider_light = {
		# 	layoutpolicy_horizontal = growing
		# 	alpha = 0.5
		# }

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			text_multi = {
				name = "header_with_divider_text"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 5 }

				autoresize = yes
				align = bottom|left
				max_width = 300

				block "banner_with_portrait_text" {
					raw_text = "#D Text#!"
				}
			}

			block "portrait" { }
		}

		# divider_light = {
		# 	layoutpolicy_horizontal = growing
		# 	alpha = 0.5
		# }
	}
}

### CHARACTER LIST
types InteractionCharacterList
{
	type vbox_interaction_character_list = vbox {
		name = "character_list"
		visible = "[Not(CharacterInteractionConfirmationWindow.HasPickedCharacters)]"

		vbox = {
			layoutpolicy_horizontal = expanding
			margin_top = 5
			margin_bottom = 10

			background = {
				using = Background_Area
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				name = "select_someone_label"
				raw_text = "[CharacterInteractionConfirmationWindow.GetPrompt]."
			}
		}

		### List
		vbox_character_list = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "claims_visibility"
			{
				visible = no
			}

			blockoverride "special_character"
			{
				vbox = {
					datacontext = "[CharacterInteractionConfirmationWindow.GetTopCharacterItem]"
					visible = "[CharacterInteractionConfirmationWindow.HasTopCharacterItem]"
					layoutpolicy_horizontal = expanding

					widget_character_list_item_finder = {
						layoutpolicy_horizontal = expanding
					}
				}
			}
		}
	}
}
