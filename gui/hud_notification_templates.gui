types Notifications {

    ######################################################
    ###################### ALERTS ########################
    ######################################################

    type alerts_text = flowcontainer {
        # set_parent_size_to_minimum = yes
        direction = vertical
        ignoreinvisible = yes

        ### Diplomatic offers
        flowcontainer = {
            name = "diplomatic_items"
            datamodel = "[InGameTopbar.GetDiplomaticItems]"

            # flipdirection = yes
            ignoreinvisible = yes
            bottomtotop = yes
            direction = vertical
            # maxhorizontalslots = 10
            # maxverticalslots = 3

            item = {
                container = {
                    visible = "[DiplomaticItem.IsVisible]"

                    button = {
                        name = "action_icon"
                        parentanchor = center

                        size = { 0 0 }
                        framesize = { 144 144 }
                        filter_mouse = right

                        # texture = "[DiplomaticItem.GetIcon]"
                        onclick = "[DiplomaticItem.OnClick]"
                        onclick = "[GetVariableSystem.Toggle('hide_alerts')]"
                        onrightclick = "[DiplomaticItem.OnRightClick]"
                        button_ignore = none

                        tooltip = "DIPLOMATIC_ITEM_TOOLTIP"

                        state = {
                            name = "dismiss_alert"
                            on_finish = "[DiplomaticItem.OnRightClick]"
                        }

                        # tooltip = "DIPLOMATIC_ITEM_TOOLTIP"

                        flowcontainer = {
                            ignoreinvisible = yes
                            resizeparent = yes

                            widget = {
                                scissor = yes
                                size = { 700 25 }
                                visible = "[Not(GetVariableSystem.Exists('hide_alert_desc'))]"

                                text_single = {
                                    visible = "[Not(GetVariableSystem.Exists('hide_alert_desc'))]"
                                    raw_text = "DIPLOMATIC_ITEM_TOOLTIP"
                                    max_width = 700
                                    alwaystransparent = yes
                                }
                            }

                            text_single = {
                                margin_bottom = 10
                                visible = "[GetVariableSystem.Exists('hide_alert_desc')]"
                                raw_text = "DIPLOMATIC_ITEM_TOOLTIP"
                                max_width = 700
                                alwaystransparent = yes
                            }
                        }

                        ### Adding animation ###
                        state = {
                            name = "when_added"
                            next = e
                            position_y = 0
                            duration = 0.2
                            size = { 1 1 }
                            using = Animation_Curve_Default
                            trigger_when = "[DiplomaticItem.IsAdding]"
                            on_start = "[DiplomaticItem.StartAnimation]"

                            start_sound = {
                                soundeffect = "event:/SFX/UI/Notifications/TopBar/sfx_ui_notifications_topbar_diplomacy"
                            }
                        }

                        state = {
                            name = e
                            next = f
                            # position_y = 60
                            duration = 0.45
                            size = { 1 1 }
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = f
                            next = a
                            position_y = 0
                            duration = 0.25

                            size = { 1 1 }
                            # bezier = { 0.43 0 0.2 2.2 }
                            on_finish = "[DiplomaticItem.AddingFinished]"
                            on_finish = "[DiplomaticItem.EndAnimation]"
                        }

                        ### idle animation ###
                        state = {
                            name = "already_added"
                            duration = 0
                            size = { 1 1 }
                            trigger_when = "[DiplomaticItem.IsAdded]"
                        }

                        state = {
                            name = "when_removed"
                            duration = 0.3
                            size = { 0 0 }
                            trigger_when = "[DiplomaticItem.IsRemoving]"
                            on_start = "[DiplomaticItem.StartAnimation]"
                            on_finish = "[DiplomaticItem.RemovingFinished]"
                            on_finish = "[DiplomaticItem.EndAnimation]"
                            start_sound = {
                                soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_show"
                            }
                        }


                        state = {
                            name = _show
                            duration = 1
                            frame = 1
                            # scale = 0.9
                            position = { 0 0 }
                            start_sound = {
                                soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_show"
                            }
                        }

                        state = {
                            name = _mouse_enter
                            duration = 0.05
                            # frame = 2
                            # position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
                        }

                        state = {
                            name = _mouse_leave
                            duration = 0.1
                            # frame = 1
                            position = { 0 0 }
                            # scale = 0.9
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
                        }

                        state = {
                            name = _mouse_press
                            duration = 0.25
                            # frame = 3
                            # position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_press"}
                        }

                        state = {
                            name = _mouse_release
                            duration = 0.25
                            # frame = 2
                            # position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_release"}
                        }
                    }
                }
            }
        }

        flowcontainer = {
            name = "alert_items"
            datamodel = "[InGameTopbar.GetAlertItems]"
            direction = vertical
            bottomtotop = yes
            # flipdirection = yes
            ignoreinvisible = yes
            # maxverticalslots = 3

            item = {
                container = {
                    button = {
                        name = "action_icon"
                        parentanchor = center
                        framesize = { 144 144 }
                        size = { 60 60 }

                        onclick = "[GUIAlertItem.OnClick]"
                        onclick = "[GetVariableSystem.Toggle('hide_alerts')]"
                        # onclick = "[GetVariableSystem.Set('hide_alerts', 'yes')]"
                        onrightclick = "[GUIAlertItem.OnRightClick]"
                        button_ignore = none

                        state = {
                            name = "dismiss_alert"
                            on_finish = "[GUIAlertItem.OnRightClick]"
                        }

                        state = {
                            name = "when_added"
                            next = e
                            position_y = 0
                            duration = 0.45
                            size = { 1 1 }
                            using = Animation_Curve_Default
                            trigger_when = "[GUIAlertItem.IsAdding]"
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_start = "[GUIAlertItem.PlayShowSound]"
                        }

                        state = {
                            name = e
                            next = f
                            # position_y = 60
                            duration = 0.45
                            size = { 1 1 }
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = f
                            next = a
                            position_y = 0
                            duration = 0.45
                            size = { 1 1 }
                            # bezier = { 0.43 0 0.2 2.2 }
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                        }

                        ### idle animation ###
                        state = {
                            name = a
                            next = b
                            duration = 0
                            delay = 10
                            size = { 1 1 }
                            position_y = 0
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = b
                            next = c
                            duration = 0.3
                            size = { 78 78 }
                            # scale = 1.6
                            bezier = { 0 1.6 0.7 1.8 }
                            # position_y = 50
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = c
                            next = d
                            duration = 0.2
                            size = { 1 1 }
                            # scale = 0.8
                            position_y = 0
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = d
                            duration = 0.2
                            # scale = 0.9
                            size = { 1 1 }
                            position_y = 0
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = "already_added"
                            duration = 0
                            size = { 1 1 }
                            # scale = 0.9
                            trigger_when = "[GUIAlertItem.IsAdded]"
                        }

                        state = {
                            name = "when_removed"
                            duration = 0.3
                            size = { 0 0 }
                            trigger_when = "[GUIAlertItem.IsRemoving]"
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.RemovingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                        }

                        tooltip = "[GUIAlertItem.GetTooltip]"
                        # tooltip_enabled = "[GetVariableSystem.Exists('hide_alert_desc')]"
                        using = tooltip_below

                        flowcontainer = {
                            direction = vertical
                            resizeparent = yes
                            alwaystransparent = yes
                            ignoreinvisible = yes

                            widget = {
                                size = { 600 24 }
                                scissor = yes

                                text_single = {
                                    raw_text = "[GUIAlertItem.GetTooltip]"
                                    alwaystransparent = yes
                                }
                            }

                            text_multi = {
                                margin_bottom = 10
                                visible = "[GetVariableSystem.Exists('hide_alert_desc')]"
                                raw_text = "[GUIAlertItem.GetImportantAction.GetDescription]"
                                autoresize = yes
                                margin_bottom = 2
                                max_width = 700
                            }
                        }
                    }
                }
            }
        }
    }

    type notifications_alerts = flowcontainer {
        # background = { using = Background_Area_Border_Solid }

        # visible = "[Not(SinglePlayerShowingPausedSuccession)]"
        direction = horizontal
        ignoreinvisible = yes
        margin = { 0 5 }
        button = {
            onclick = "[GetVariableSystem.Toggle('hide_alerts')]"
            shortcut = mapmode_faith_secondary
        }

        button = {
            onclick = "[GetVariableSystem.Toggle('hide_alerts')]"
            visible = "[GetVariableSystem.Exists('hide_alerts')]"
            shortcut = close_window
        }

        container = {
            visible = "[GetVariableSystem.Exists('hide_alerts')]"
            ignoreinvisible = yes

            flowcontainer = {
                background = { using = Background_Area_Light margin = { 15 10 } }
                direction = vertical
                ignoreinvisible = yes
                alwaystransparent = no
                visible = "[Or( DataModelHasItems(InGameTopbar.GetAlertItems), DataModelHasItems(InGameTopbar.GetDiplomaticItems) )]"

                flowcontainer = {
                    spacing = 5

                    text_single = {
                        raw_text = "[Add_int32(GetDataModelSize(InGameTopbar.GetAlertItems), GetDataModelSize(InGameTopbar.GetDiplomaticItems))] alerts."
                    }
                }


                alerts_text = {
                }

                flowcontainer = {
                    visible = "[Or(Not(IsDataModelEmpty(InGameTopbar.GetAlertItems)), Not(IsDataModelEmpty(InGameTopbar.GetDiplomaticItems)))]"
                    ignoreinvisible = yes
                    direction = vertical

                    button_text = {
                        onclick = "[GetVariableSystem.Toggle('hide_alert_desc')]"
                        blockoverride "text" {
                            raw_text = "[Select_CString( GetVariableSystem.Exists('hide_alert_desc'), 'Hide', 'Show' )] descriptions, Shift D."
                        }
                        shortcut = mapmode_house_secondary
                    }

                    text_single = {
                        raw_text = "Right click to dismiss."
                        margin_top = 2
                    }

                    button_text = {
                        blockoverride "margins" { }
                        blockoverride "text" {
                            raw_text = "Dismiss all, Control A."
                        }
                        shortcut = map_mode_6
                        onclick = "[PdxGuiTriggerAllAnimations('dismiss_alert')]"
                    }

                    button_text = {
                        blockoverride "margins" { }
                        onclick = "[GetVariableSystem.Toggle('hide_alerts')]"
                        blockoverride "text" {
                            raw_text = "Hide, Shift A or Escape."
                        }
                    }

                }
            }
        }

        scrollbox = {
            autoresizescrollarea = yes
            # visible = "[Or( DataModelHasItems(InGameTopbar.GetAlertItems), DataModelHasItems(InGameTopbar.GetDiplomaticItems) )]"
            maximumsize = { 1 1 } #TODO
            blockoverride "scrollbox_margins" {
                margin_top = 20
            }
            blockoverride "scrollbox_background" { }
            blockoverride "scrollbox_background_fade" { }
            blockoverride "scrollbox_content" {
                vbox = {
                    widget = {
                        # this is just for sound
                        size = { 0 0 }
                        # visible = "[GetVariableSystem.Exists('hide_alerts')]"

                        scissor = yes

                        dynamicgridbox = {
                            name = "alert_items"
                            datamodel = "[InGameTopbar.GetAlertItems]"
                            # flipdirection = yes
                            ignoreinvisible = yes
                            # maxverticalslots = 3

                            item = {
                                container = {
                                    button = {
                                        name = "action_icon"
                                        parentanchor = center
                                        framesize = { 144 144 }
                                        size = { 60 60 }

                                        onclick = "[GUIAlertItem.OnClick]"
                                        onrightclick = "[GUIAlertItem.OnRightClick]"
                                        button_ignore = none

                                        state = {
                                            name = "when_added"
                                            next = e
                                            position_y = 0
                                            duration = 0.45
                                            size = { 1 1 }
                                            using = Animation_Curve_Default
                                            trigger_when = "[GUIAlertItem.IsAdding]"
                                            on_start = "[GUIAlertItem.StartAnimation]"
                                            on_start = "[GUIAlertItem.PlayShowSound]"
                                        }

                                        state = {
                                            name = e
                                            next = f
                                            # position_y = 60
                                            duration = 0.45
                                            size = { 1 1 }
                                            using = Animation_Curve_Default
                                        }

                                        state = {
                                            name = f
                                            next = a
                                            position_y = 0
                                            duration = 0.45
                                            size = { 1 1 }
                                            # bezier = { 0.43 0 0.2 2.2 }
                                            on_finish = "[GUIAlertItem.AddingFinished]"
                                            on_finish = "[GUIAlertItem.EndAnimation]"
                                        }

                                        ### idle animation ###
                                        state = {
                                            name = a
                                            next = b
                                            duration = 0
                                            delay = 10
                                            size = { 1 1 }
                                            position_y = 0
                                            on_start = "[GUIAlertItem.StartAnimation]"
                                            on_finish = "[GUIAlertItem.AddingFinished]"
                                            on_finish = "[GUIAlertItem.EndAnimation]"
                                            using = Animation_Curve_Default
                                        }

                                        state = {
                                            name = b
                                            next = c
                                            duration = 0.3
                                            size = { 1 1 }
                                            # scale = 1.6
                                            bezier = { 0 1.6 0.7 1.8 }
                                            # position_y = 50
                                            on_start = "[GUIAlertItem.StartAnimation]"
                                            on_finish = "[GUIAlertItem.AddingFinished]"
                                            on_finish = "[GUIAlertItem.EndAnimation]"
                                            using = Animation_Curve_Default
                                        }

                                        state = {
                                            name = c
                                            next = d
                                            duration = 0.2
                                            size = { 1 1 }
                                            # scale = 0.8
                                            position_y = 0
                                            on_start = "[GUIAlertItem.StartAnimation]"
                                            on_finish = "[GUIAlertItem.AddingFinished]"
                                            on_finish = "[GUIAlertItem.EndAnimation]"
                                            using = Animation_Curve_Default
                                        }

                                        state = {
                                            name = d
                                            duration = 0.2
                                            # scale = 0.9
                                            size = { 1 1 }
                                            position_y = 0
                                            on_start = "[GUIAlertItem.StartAnimation]"
                                            on_finish = "[GUIAlertItem.AddingFinished]"
                                            on_finish = "[GUIAlertItem.EndAnimation]"
                                            using = Animation_Curve_Default
                                        }

                                        state = {
                                            name = "already_added"
                                            duration = 0
                                            size = { 1 1}
                                            # scale = 0.9
                                            trigger_when = "[GUIAlertItem.IsAdded]"
                                        }

                                        state = {
                                            name = "when_removed"
                                            duration = 0.3
                                            size = { 0 0 }
                                            trigger_when = "[GUIAlertItem.IsRemoving]"
                                            on_start = "[GUIAlertItem.StartAnimation]"
                                            on_finish = "[GUIAlertItem.RemovingFinished]"
                                            on_finish = "[GUIAlertItem.EndAnimation]"
                                        }

                                        # tooltip = "[GUIAlertItem.GetTooltip]"
                                        using = tooltip_below
                                    }
                                }
                            }
                        }

                        ### Diplomatic offers
                        dynamicgridbox = {
                            name = "diplomatic_items"
                            datamodel = "[InGameTopbar.GetDiplomaticItems]"

                            # flipdirection = yes
                            ignoreinvisible = yes
                            # maxhorizontalslots = 10
                            # maxverticalslots = 3

                            item = {
                                container = {
                                    visible = "[DiplomaticItem.IsVisible]"


                                    button = {
                                        name = "action_icon"
                                        parentanchor = center

                                        size = { 0 0 }
                                        filter_mouse = right

                                        texture = "[DiplomaticItem.GetIcon]"
                                        onclick = "[DiplomaticItem.OnClick]"
                                        onclick = "[GetVariableSystem.Toggle('hide_alerts')]"
                                        onrightclick = "[DiplomaticItem.OnRightClick]"
                                        button_ignore = none

                                        tooltip = "DIPLOMATIC_ITEM_TOOLTIP"

                                        state = {
                                            trigger_when = "[LessThan_int32( DiplomaticItem.GetDaysUntilTimeout, '(int32)30')]"
                                            name = "timeout"
                                            next = b

                                            using = Animation_Curve_Default
                                            duration = 0.5
                                            delay = 0.2
                                            alpha = 1
                                        }

                                        state = {
                                            name = b
                                            next = "timeout"

                                            using = Animation_Curve_Default
                                            delay = 1.5
                                            duration = 0.4
                                            alpha = 0.5
                                        }

                                        ### Adding animation ###
                                        state = {
                                            name = "when_added"
                                            next = e
                                            position_y = 0
                                            duration = 0.2
                                            size = { 1 1 }
                                            using = Animation_Curve_Default
                                            trigger_when = "[DiplomaticItem.IsAdding]"
                                            on_start = "[DiplomaticItem.StartAnimation]"

                                            start_sound = {
                                                soundeffect = "event:/SFX/UI/Notifications/TopBar/sfx_ui_notifications_topbar_diplomacy"
                                            }
                                        }

                                        state = {
                                            name = e
                                            next = f
                                            position_y = 60
                                            duration = 0.45
                                            size = { 1 1 }
                                            using = Animation_Curve_Default
                                        }

                                        state = {
                                            name = f
                                            next = a
                                            position_y = 0
                                            duration = 0.25

                                            size = { 1 1 }
                                            bezier = { 0.43 0 0.2 2.2 }
                                            on_finish = "[DiplomaticItem.AddingFinished]"
                                            on_finish = "[DiplomaticItem.EndAnimation]"
                                        }

                                        ### idle animation ###
                                        state = {
                                            name = "already_added"
                                            duration = 0
                                            size = { 1 1 }
                                            trigger_when = "[DiplomaticItem.IsAdded]"
                                        }

                                        state = {
                                            name = "when_removed"
                                            duration = 0.3
                                            size = { 0 0 }
                                            trigger_when = "[DiplomaticItem.IsRemoving]"
                                            on_start = "[DiplomaticItem.StartAnimation]"
                                            on_finish = "[DiplomaticItem.RemovingFinished]"
                                            on_finish = "[DiplomaticItem.EndAnimation]"
                                            start_sound = {
                                                soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_show"
                                            }
                                        }

                                        modify_texture = {
                                            name = "glow"
                                            texture = "gfx/interface/component_effects/effect_shimmer_blue.dds"
                                            blend_mode = colordodge
                                            translate_uv = { 0.2 0.2 }
                                        }

                                        #### Shimmer ####
                                        state = {
                                            trigger_when = "[DiplomaticItem.IsAdding]"
                                            name = _show
                                            next = shimmer
                                            duration = 0.2
                                            scale = 0.9

                                            modify_texture = {
                                                name = "glow"
                                                translate_uv = { 1 -2 }
                                            }
                                        }

                                        state = {
                                            name = shimmer
                                            next = pause
                                            duration = 1.2
                                            scale = 0.9
                                            position = { 0 0 }

                                            bezier = { 0 0.9 1 0.4 }

                                            modify_texture = {
                                                name = "glow"
                                                translate_uv = { -1 1 }
                                            }
                                        }

                                        state = {
                                            name = pause
                                            next = shimmer
                                            duration = 0
                                            delay = 5

                                            modify_texture = {
                                                name = "glow"
                                                translate_uv = { 1 -1 }
                                            }
                                        }

                                        state = {
                                            name = _show
                                            duration = 1
                                            frame = 1
                                            scale = 0.9
                                            position = { 0 0 }
                                            start_sound = {
                                                soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_show"
                                            }
                                        }

                                        state = {
                                            name = _mouse_enter
                                            duration = 0.05
                                            frame = 2
                                            position = { 0 10 }
                                            scale = 1
                                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
                                        }

                                        state = {
                                            name = _mouse_leave
                                            duration = 0.1
                                            frame = 1
                                            position = { 0 0 }
                                            scale = 0.9
                                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
                                        }

                                        state = {
                                            name = _mouse_press
                                            duration = 0.25
                                            frame = 3
                                            position = { 0 10 }
                                            scale = 1
                                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_press"}
                                        }

                                        state = {
                                            name = _mouse_release
                                            duration = 0.25
                                            frame = 2
                                            position = { 0 10 }
                                            scale = 1
                                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_release"}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    ######################################################
    ###################### TOASTS ########################
    ######################################################
    type notifications_toasts = widget {
        name = "toast_container_widget"
        visible_at_creation = no
        allow_outside = yes
        alwaystransparent = yes
        size = { 700 120 }
        position = { 0 50 }

        background = { using = Background_Area_Border_Solid }
        datacontext = "[ToastMessageHandler.GetMessage]"

        state = {
            name = _show
            on_finish = "[GetVariableSystem.Set('toasted', 'yes')]"
            on_finish = "[PdxGuiWidget.FindChild('pause').TriggerAnimation('pause_game')]"
            # on_finish = "[GetScriptedGui('add_toast').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
            # on_finish = "[PdxGuiTriggerAllAnimations('pause_game')]"
            # on_finish = "[PdxGuiTriggerAllAnimations('save_toast')]"
            next = toast_1
        }

        state = {
            name = toast_1
            on_finish = "[Set('toast_1', PlayerMessageItem.GetTitle)]"
            on_finish = "[Set('toast_desc_1', PlayerMessageItem.GetDescription)]"
        }

        state = {
            name = toast_extras
            trigger_when = "[Or(PlayerMessageItem.HasLeftIcon, PlayerMessageItem.HasRightIcon)]"
            on_finish = "[Set('toast_extras', 'yes')]"
        }

        container = {
            name = "pause"
            visible = "[Not(IsGamePaused)]"

            state = {
                name = pause_game
                on_finish = "[OnPause]"
                # trigger_when = "[Not(IsGamePaused)]"
            }
        }


        state = {
            name = _hide
            on_finish = "[GetVariableSystem.Clear('toasted')]"
            on_finish = "[GetVariableSystem.Clear('toast_1')]"
            on_finish = "[GetVariableSystem.Clear('toast_desc_1')]"
            on_finish = "[GetVariableSystem.Clear('toast_extras')]"
        }

        flowcontainer = {
            min_width = 700
            name = "toast_content"
            datacontext = "[ToastMessageHandler.GetMessage]"
            ignoreinvisible = yes
            direction = vertical
            margin_left = 10
            resizeparent = yes
            visible = "[And(Not(SinglePlayerShowingPausedSuccession), Isnt('show_feed'))]"
            # margin_bottom = 20

            # background = {
            #     using = Background_Area_Solid
            #     margin = { 5 5 }
            # }

            text_single = {
                name = "title"
                raw_text = "Popup. [PlayerMessageItem.GetTitle]."
                max_width = 700

                fontsize_min = 15
            }

            text_multi = {
                name = "desc"
                autoresize = yes
                using = wide
                fontsize_min = 15
                # size = { 700 120 }

                raw_text = "[PlayerMessageItem.GetDescription][AddTextIf(Not(StringIsEmpty(PlayerMessageItem.GetDescription)), '.')]"
                # tooltip = "[PlayerMessageItem.GetDescription]"
            }

            flowcontainer = {
                ignoreinvisible = yes
                direction = vertical

                flowcontainer = {
                    ignoreinvisible = yes
                    visible = "[PlayerMessageItem.HasLeftIcon]"

                    spacing = 3
                    button_text = {
                        blockoverride "text" {
                            raw_text = "Select [PlayerMessageItem.GetLeftCharacter.GetFirstName]."
                        }
                        using = char_click
                        datacontext = "[PlayerMessageItem.GetLeftCharacter]"
                        visible = "[And(Character.IsValid, Not(Character.IsLocalPlayer))]"
                        onclick = "[ToastMessageHandler.DismissMessage]"
                    }

                    button_text = {
                        datacontext = "[PlayerMessageItem.GetLeftTitle]"
                        blockoverride "text" {
                            raw_text = "Select [PlayerMessageItem.GetLeftTitle.GetNameNoTooltip]."
                        }
                        using = title_click
                        visible = "[And(Title.IsValid, GreaterThanOrEqualTo_int32(Title.GetTierFrame, '(int32)3'))]"
                        onclick = "[ToastMessageHandler.DismissMessage]"
                    }

                    button_text = {
                        datacontext = "[PlayerMessageItem.GetLeftTitle]"
                        blockoverride "text" {
                            raw_text = "Go to [PlayerMessageItem.GetLeftTitle.GetNameNoTooltip]."
                        }
                        using = prov_click
                        visible = "[And(Title.IsValid, LessThan_int32(Title.GetTierFrame, '(int32)3'))]"
                        onclick = "[ToastMessageHandler.DismissMessage]"
                    }

                    text_single = {
                        datacontext = "[PlayerMessageItem.GetLeftArtifact]"
                        visible = "[Artifact.IsValid]"
                        raw_text = "[Artifact.GetName]."
                        #TODO open artifact
                    }

                }

                flowcontainer = {
                    ignoreinvisible = yes
                    visible = "[PlayerMessageItem.HasRightIcon]"

                    spacing = 3
                    button_text = {
                        blockoverride "text" {
                            raw_text = "Select [PlayerMessageItem.GetRightCharacter.GetFirstName]."
                        }
                        using = char_click
                        onclick = "[ToastMessageHandler.DismissMessage]"
                        datacontext = "[PlayerMessageItem.GetRightCharacter]"
                        visible = "[And(Character.IsValid, Not(Character.IsLocalPlayer))]"
                    }

                    button_text = {
                        datacontext = "[PlayerMessageItem.GetRightTitle]"
                        blockoverride "text" {
                            raw_text = "Select [PlayerMessageItem.GetRightTitle.GetNameNoTooltip]."
                        }
                        using = title_click
                        onclick = "[ToastMessageHandler.DismissMessage]"
                        visible = "[And(Title.IsValid, GreaterThanOrEqualTo_int32(Title.GetTierFrame, '(int32)3'))]"
                    }

                    button_text = {
                        datacontext = "[PlayerMessageItem.GetRightTitle]"
                        blockoverride "text" {
                            raw_text = "Go to [PlayerMessageItem.GetRightTitle.GetNameNoTooltip]."
                        }
                        using = prov_click
                        onclick = "[ToastMessageHandler.DismissMessage]"
                        visible = "[And(Title.IsValid, LessThan_int32(Title.GetTierFrame, '(int32)3'))]"
                    }

                    text_single = {
                        datacontext = "[PlayerMessageItem.GetRightArtifact]"
                        visible = "[Artifact.IsValid]"
                        raw_text = "[Artifact.GetName]."
                        #TODO open artifact view
                    }

                }

                button_text = {
                    blockoverride "text" {
                        raw_text = "Dismiss, T."
                    }
                    onclick = "[ToastMessageHandler.DismissMessage]"
                    shortcut = map_mode_2
                }
                state = {
                    name = dismiss_toast
                    on_finish = "[ToastMessageHandler.DismissMessage]"
                }
            }
        }
    }

    ######################################################
    ################### SUGGESTIONS ######################
    ######################################################
    type notifications_suggestions = widget {
        name = "action_items"
        # visible = "[And(And(And( Not( IsPauseMenuShown ), And( Not(SinglePlayerShowingPausedSuccession), ActionItemHandler.ShouldBeVisible)), Not(IsRightWindowOpen)), Not(IsObserver))]"
        visible = "[Not(IsObserver)]"
        visible_at_creation = no
        alwaystransparent = yes
        allow_outside = yes
        size = { 100% 100% }

        # widget = {
        #     size = { 100% 100% }
        #
        #     alwaystransparent = yes
        # }

        container = {
            using = NoWindowsOpen
            position = { 15 25 }

            container = {
                visible = "[And(Not(GetScriptedGui('show_suggestions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )), Isnt('show_feed'))]"
                ignoreinvisible = yes

                button_text = {
                    background = {
                        using = Background_Area_Border_Solid
                        margin = { 5 0 }
                    }
                    onclick = "[ActionItemHandler.ToggleList]"
                    visible = "[Not(GetVariableSystem.Exists('ocr'))]"
                    shortcut = "action_list"
                    blockoverride "text" {
                        margin_right = 5
                        raw_text = "[ActionItemHandler.GetNumberOfActions] suggestions, Tab."
                    }
                }
            }
        }

        container = {
            using = AnyWindowOpen
            parentanchor = right|bottom
            position = { -115 -3 }

            container = {
                visible = "[Not(GetScriptedGui('show_suggestions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ))]"
                ignoreinvisible = yes

                button_text = {
                    background = {
                        using = Background_Area_Border_Solid
                        margin = { 5 0 }
                    }
                    onclick = "[ActionItemHandler.ToggleList]"
                    visible = "[Not(GetVariableSystem.Exists('ocr'))]"
                    shortcut = "action_list"
                    blockoverride "text" {
                        margin_right = 5
                        raw_text = "[ActionItemHandler.GetNumberOfActions] suggestions, Tab."
                    }
                }
            }
        }


        container = {
    		visible = "[GetScriptedGui('show_suggestions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
            button = {
                onclick = "[ActionItemHandler.ToggleList]"
                visible = "[Not(GetVariableSystem.Exists('ocr'))]"
                shortcut = "action_list"
            }
        }

        using = Animation_ShowHide_Quick

        ## Suggestions / Current Situation toggle button
        button = {
            name = "suggestions_button"
            parentanchor = top|hcenter
            size = { 79 69 }
            position = { 0 -10 }
            gfxtype = togglepushbuttongfx
            effectname = "NoHighlight"
            shaderfile = "gfx/FX/pdxgui_pushbutton.shader"

            onclick = "[ActionItemHandler.ToggleList]"
            shortcut = "action_list"

            texture = "gfx/interface/hud/button_hud_suggestions.dds"

            tooltip = "ACTIONS_TT"
            using = tooltip_se
            visible = "[GetVariableSystem.Exists('ocr')]"

            modify_texture = {
                name = "mouseover"
                visible = "[GreaterThan_int32(ActionItemHandler.GetNumberOfUnreadActions, '(int32)0')]"
                texture = "gfx/interface/component_effects/effect_shimmer.dds"
                blend_mode = colordodge
                alpha = 0
            }

            state = {
                name = _mouse_enter
                duration = 0.05
                frame = 2
                position = { 0 0 }

                modify_texture = {
                    name = "mouseover"
                    alpha = 1
                }
            }

            state = {
                name = _mouse_leave
                duration = 0.1
                position = { 0 -10 }

                modify_texture = {
                    name = "mouseover"
                    alpha = 0
                }
            }

            state = {
                name = _mouse_press
                scale = 1
                position = { 0 -5 }
            }

            state = {
                name = _mouse_release
                scale = 1
            }

            glow = {
                using = Color_Bright_Yellow
                glow_radius = 5
                using = Glow_Standard
                alpha = 0
            }

            state = {
                name = "up_start"
                next = "up_end"
                position = { 0 0 }
                duration = 0.5
                trigger_when = "[ActionItemHandler.ActionsWentUp]"

                using = Animation_Curve_Default
                glow_alpha = 1
            }

            state = {
                name = "up_end"
                duration = 0.3
                position = { 0 -15 }

                using = Animation_Curve_Default
                glow_alpha = 0
            }

            modify_texture = {
                name = "shimmer"
                visible = "[And(GreaterThan_int32(ActionItemHandler.GetNumberOfUnreadActions, '(int32)0'), Not(ActionItemHandler.HasVisibleDangerousAction))]"
                texture = "gfx/interface/component_effects/effect_shimmer.dds"
                blend_mode = colordodge
                translate_uv = { 0.2 0.2 }
            }

            state = {
                name = shimmer
                next = pause
                delay = 0.5

                trigger_when = "[ActionItemHandler.ActionsWentUp]"

                bezier = { 0 0.9 1 0.4 }

                modify_texture = {
                    name = "shimmer"
                    translate_uv = { 1 -1 }
                }
            }

            state = {
                name = pause
                next = inbetween
                duration = 1.5

                modify_texture = {
                    name = "shimmer"
                    translate_uv = { -1 1 }
                }
            }

            state = {
                name = inbetween
                next = shimmer
                duration = 3

                modify_texture = {
                    name = "shimmer"
                    translate_uv = { -1 -1 }
                }
            }

            modify_texture = {
                name = "shimmer_dangerous"
                visible = "[And(GreaterThan_int32(ActionItemHandler.GetNumberOfUnreadActions, '(int32)0'), ActionItemHandler.HasVisibleDangerousAction)]"
                texture = "gfx/interface/component_effects/effect_shimmer_dangerous.dds"
                blend_mode = colordodge
                translate_uv = { 1 1 }
            }

            state = {
                name = shimmer_2
                next = pause_2
                trigger_on_create = yes
                delay = 0.5

                trigger_when = "[ActionItemHandler.ActionsWentUp]"

                bezier = { 0 0.9 1 0.4 }

                modify_texture = {
                    name = "shimmer_dangerous"
                    translate_uv = { 1 -1 }
                }
            }

            state = {
                name = pause_2
                next = inbetween_2
                duration = 1.5

                modify_texture = {
                    name = "shimmer_dangerous"
                    translate_uv = { -1 1 }
                }
            }

            state = {
                name = inbetween_2
                next = shimmer_2
                duration = 2

                modify_texture = {
                    name = "shimmer_dangerous"
                    translate_uv = { -1 -1 }
                }
            }

            ## dangerous action
            text_single = {
                name = "actions_number_dangerous"
                visible = "[ActionItemHandler.HasVisibleDangerousAction]"
                parentanchor = center

                text = "[ActionItemHandler.GetNumberOfUnreadActions]"
                align = left
                using = Font_Size_Big
                default_format = "#high;glow_color:{0.9,0.1,0.1,1.0}"
                snap_to_pixels = no
                alpha = "[Select_float(GreaterThan_int32(ActionItemHandler.GetNumberOfUnreadActions, '(int32)0'),'(float)1.0','(float)0.5')]"

                state = {
                    name = "up_start"
                    next = "up_end"
                    scale = 1.5
                    duration = 0.25
                    trigger_when = "[ActionItemHandler.ActionsWentUp]"
                }

                state = {
                    name = "up_end"
                    scale = 1
                    duration = 0.25
                }
            }

            text_single = {
                name = "actions_number"
                visible = "[Not(ActionItemHandler.HasVisibleDangerousAction)]"
                parentanchor = center

                text = "[ActionItemHandler.GetNumberOfUnreadActions]"
                align = left
                using = Font_Size_Big
                default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
                snap_to_pixels = no

                state = {
                    name = "up_start"
                    next = "up_end"
                    scale = 1.5
                    duration = 0.25
                    trigger_when = "[ActionItemHandler.ActionsWentUp]"
                }

                state = {
                    name = "up_end"
                    scale = 1
                    duration = 0.25
                }
            }
        }

        widget = {
            # parentanchor = right
            visible = "[ActionItemHandler.IsListVisible]"
            visible_at_creation = no
            # parentanchor = right
            # position = { 30 0 }
            alwaystransparent = no
            filter_mouse = all


            state = {
                name = _show
                on_start = "[GetVariableSystem.Set('suggestions', 'open')]"
            }

            state = {
                name = _hide
                on_start = "[GetVariableSystem.Clear('suggestions')]"
            }
            state = {
                name = _show
                using = Animation_FadeIn_Quick
                using = Sound_WindowShow_Suggestion
                position_y = 0
            }

            state = {
                name = _hide
                using = Animation_FadeOut_Quick
                using = Sound_WindowHide_Suggestion
                position_y = -20
            }

            background = { using = Background_Area_Border_Solid }

            widget = {
                name = "button"
                parentanchor = top|right
                position = { -5 5 }

                background = {
                    using = Background_Area
                    mirror = vertical
                    margin_left = 55
                    margin_bottom = 55
                    modify_texture = {
                        texture = "gfx/interface/component_masks/mask_fade_corner.dds"
                        blend_mode = alphamultiply
                    }
                }

                buttons_window_control = {
                    name = "close_suggestions_button"
                    resizeparent = yes

                    blockoverride "button_close" {
                        onclick = "[ActionItemHandler.ToggleList]"
                        shortcut = "close_window"
                        tooltip = "CLOSE_TOOLTIP"
                    }
                }
            }

            vbox = {
                name = "action_items_container"
                set_parent_size_to_minimum = yes
                minimumsize = { 440 50 }
                margin_top = 5
                spacing = 15
                ignoreinvisible = yes

                @sug_width = 700

                vbox = {
                    name = "suggestions"
                    visible = "[Or( Not(IsDataModelEmpty(AccessSuggestionItems) ), IsDataModelEmpty(ActionItemHandler.GetGuiActionItems ) )]"
                    layoutpolicy_horizontal = expanding
                    spacing = 10
                    ignoreinvisible = yes

                    text_single = {
                        text = "CURRENT_SITUATION_SUGGESTIONS"
                    }

                    text_single = {
                        visible = "[IsDataModelEmpty(AccessSuggestionItems)]"
                        text = "CURRENT_SITUATION_SUGGESTIONS_EMPTY"
                    }

                    flowcontainer = {
                        name = "suggestion_items"
                        datamodel = "[AccessSuggestionItems]"
                        layoutpolicy_horizontal = expanding
                        direction = vertical
                        margin_left = 20
                        ignoreinvisible = yes

                        item = {
                            button_suggestion_item = {
                                minimumsize = { @sug_width 0 }
                            }
                        }
                    }
                }

                vbox = {
                    name = "actions"
                    layoutpolicy_horizontal = expanding
                    margin = { 8 0 }
                    margin_bottom = 8

                    hbox = {
                        layoutpolicy_horizontal = expanding

                        text_single = {
                            text = "CURRENT_SITUATION_HEADER"
                            max_width = 220
                        }

                        text_single = {
                            raw_text = ", [ActionItemHandler.GetNumberOfActions] suggestions."
                        }

                        expand = { }
                    }

                    # text_single = {
                    #     layoutpolicy_horizontal = expanding
                    #     raw_text = "Every entry has a tooltip."
                    # }

                    text_single = {
                        layoutpolicy_horizontal = expanding
                        visible = "[Not( ActionItemHandler.HasAvailableCurrentSituationItems )]"
                        text = "CURRENT_SITUATION_SUGGESTIONS_EMPTY"
                    }

                    scrollbox = {
                        layoutpolicy_horizontal = expanding
                        visible = "[ActionItemHandler.HasAvailableCurrentSituationItems]"
                        maximumsize = { -1 940 }

                        blockoverride "scrollbox_background_fade" { }
                            blockoverride "scrollbox_background" { }

                                blockoverride "scrollbox_margins"
                                {
                                    margin_top = 20
                                }

                                blockoverride "scrollbox_content" {
                                    set_parent_size_to_minimum = yes
                                    spacing = 10

                                    vbox = {
                                        datamodel = "[ActionItemHandler.GetGuiActionItems]"

                                        item = {
                                            flowcontainer = {
                                                ignoreinvisible = yes
                                                minimumsize = { @sug_width 0 }
                                                direction = vertical

                                                flowcontainer = {
                                                    name = "expanded_action_items"
                                                    datamodel = "[GuiActionItem.GetImportantActionItems]"
                                                    visible = "[GuiActionItem.IsExpanded]"
                                                    direction = vertical
                                                    margin_left = 10

                                                    button_current_situation_item_multiple = {
                                                        visible = "[And(GuiActionItem.IsVisible, GuiActionItem.HasMultipleActions)]"
                                                        minimumsize = { @sug_width 0 }
                                                    }

                                                    ignoreinvisible = yes

                                                    item = {
                                                        button_current_situation_item_combined = {
                                                            datacontext = "[GuiActionImportantActionItem.GetImportantAction]"
                                                            minimumsize = { @sug_width 0 }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    vbox = {
                                        datamodel = "[ActionItemHandler.GetGuiActionItems]"

                                        item = {
                                            flowcontainer = {
                                                ignoreinvisible = yes
                                                minimumsize = { @sug_width 0 }
                                                direction = vertical

                                                flowcontainer = {
                                                    ignoreinvisible = yes
                                                    minimumsize = { @sug_width 0 }
                                                    direction = vertical

                                                    button_current_situation_item = {
                                                        visible = "[And(GuiActionItem.IsVisible, Not(GuiActionItem.HasMultipleActions))]"
                                                        datacontext = "[GuiActionItem.GetFirstVisibleActionItem]"
                                                        minimumsize = { @sug_width 0 }
                                                    }

                                                    button_current_situation_item_multiple = {
                                                        visible = "[And(And(GuiActionItem.IsVisible, GuiActionItem.HasMultipleActions), Not(GuiActionItem.IsExpanded))]"
                                                        minimumsize = { @sug_width 0 }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                    widget = {
                        size = { 0 5 }
                    }

                    text_single = {
                        margin_left = 5
                        layoutpolicy_horizontal = expanding
                        raw_text = "Right click to dismiss a suggestion."
                    }

                    button_text = {
                        layoutpolicy_horizontal = expanding
                        blockoverride "text" {
                            raw_text = "Reset dismissed."
                        }
                        onclick = "[ActionItemHandler.ResetAllDismissed]"
                        tooltip = "RESET_DISMISSED_TOOLTIP"
                    }

                    button_text = {
                        layoutpolicy_horizontal = expanding
                        onclick = "[GetScriptedGui('show_suggestions').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
                        blockoverride "pre" {
                            spacing = 3
                            text_single = {
                                raw_text = "[Select_CString(GetScriptedGui('show_suggestions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ), 'unchecked', 'checked')],"
                            }
                        }
                        blockoverride "text" {
                            raw_text = "show the number of suggestions on screen."
                        }
                    }
                }
            }
        }
    }

    ######################################################
    ################### MESSAGE FEED #####################
    ######################################################
    type notifications_message_feed = widget {
        size = { 100% 100% }
        name = "message_feed_widget"
        visible_at_creation = no
        alwaystransparent = yes
        # state = {
        #     name = _show
        #     on_finish = "[Set('updates', 'yes')]"
        # }
        # state = {
        #     name = _show
        #     on_finish = "[Clear('updates')]"
        # }

        window = {
            using = ocr_window_bg
            # visible = "[And(Or(DataModelHasItems(MessageFeedHandler.GetItems), GetVariableSystem.Exists('toasted')), Not(GetVariableSystem.Exists('show_feed')))]"
            visible = "[And(DataModelHasItems(MessageFeedHandler.GetItems), Is('show_feed'))]"

            vbox = {
                layoutpolicy_horizontal = expanding
                layoutpolicy_vertical = expanding
                using = ocr_margins

                vbox = {
                    # visible = "[Is('show_feed')]"
                    layoutpolicy_horizontal = expanding
                    layoutpolicy_vertical = expanding
                    margin = { 5 5 }

                    hbox = {
                        layoutpolicy_horizontal = expanding
                        visible = "[Not(IsDataModelEmpty(MessageFeedHandler.GetItems))]"

                        text_single = {
                            visible = "[EqualTo_int32(GetDataModelSize(MessageFeedHandler.GetItems), '(int32)1')]"
                            raw_text = "Update."
                        }
                        text_single = {
                            visible = "[GreaterThan_int32(GetDataModelSize(MessageFeedHandler.GetItems), '(int32)1')]"
                            raw_text = "[GetDataModelSize(MessageFeedHandler.GetItems)] Updates."
                        }

                        expand = { }
                    }

                    error_button = {
                      layoutpolicy_horizontal = expanding
                    }

                    scrollbox = {
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding
                        visible = "[Not(IsDataModelEmpty(MessageFeedHandler.GetItems))]"

                        blockoverride "scrollbox_background_fade" {

                        }
                        blockoverride "scrollbox_margins" {
                            margin_top = 20
                        }
                        blockoverride "scrollbox_content" {

                            vbox = {
                                layoutpolicy_horizontal = expanding
                                layoutpolicy_vertical = expanding

                                vbox = {
                                    # background = { using = Background_Area_Light margin = { 5 0 } }
                                    name = "message_feed"
                                    layoutpolicy_horizontal = expanding
                                    datamodel = "[MessageFeedHandler.GetItems]"
                                    # set_parent_size_to_minimum = yes
                                    bottomtotop = yes

                                    item = {
                                        vbox = {
                                            layoutpolicy_horizontal = expanding
                                            datacontext = "[FeedMessageItem.GetPlayerMessageItem]"

                                            state = {
                                                name = "mark_to_delete"
                                                trigger_when = "[FeedMessageItem.IsSetToDelete]"
                                                on_finish = "[FeedMessageItem.StartAnimation]"
                                                on_finish = "[FeedMessageItem.EndAnimation]"
                                                on_finish = "[FeedMessageItem.Delete]"
                                                # duration = 0.3
                                                # alpha = 0
                                                # using = Animation_Curve_Default
                                            }

                                            vbox = {
                                                layoutpolicy_horizontal = expanding
                                                name = "text_and_icons"

                                                text_multi = {
                                                    layoutpolicy_horizontal = expanding
                                                    raw_text = "[PlayerMessageItem.GetTitle], [Subtract_int32(GetCurrentDate.GetDateAsTotalDays, PlayerMessageItem.GetDate.GetDateAsTotalDays)] days ago."
                                                    using = wide
                                                    autoresize = yes
                                                }

                                                text_multi = {
                                                    layoutpolicy_horizontal = expanding
                                                    visible = "[Not(StringIsEmpty(PlayerMessageItem.GetDescription))]"

                                                    raw_text = "[PlayerMessageItem.GetDescription]."
                                                    using = wide
                                                    autoresize = yes
                                                }

                                                vbox = {
                                                    layoutpolicy_horizontal = expanding

                                                    button_text = {
                                                        layoutpolicy_horizontal = expanding
                                                        datacontext = "[PlayerMessageItem.GetLeftArtifact]"
                                                        onclick = "[Toggle('show_feed')]"
                                                        visible = "[Artifact.IsValid]"
                                                        blockoverride "text" {
                                                            raw_text = "Select [Artifact.GetNameNoTooltip]."
                                                        }
                                                        onclick = "[ToggleGameViewData('artifact_details', Artifact.Self)]"
                                                    }

                                                    button_text = {
                                                        layoutpolicy_horizontal = expanding
                                                        datacontext = "[PlayerMessageItem.GetRightArtifact]"
                                                        onclick = "[Toggle('show_feed')]"
                                                        visible = "[Artifact.IsValid]"
                                                        blockoverride "text" {
                                                            raw_text = "Select [Artifact.GetNameNoTooltip]."
                                                        }
                                                        onclick = "[ToggleGameViewData('artifact_details', Artifact.Self)]"
                                                    }

                                                    button_text = {
                                                        layoutpolicy_horizontal = expanding
                                                        blockoverride "text" {
                                                            raw_text = "Select [PlayerMessageItem.GetLeftCharacter.GetFirstNameNoTooltip]."
                                                        }
                                                        using = char_click
                                                        onclick = "[GetVariableSystem.Toggle('show_feed')]"
                                                        datacontext = "[PlayerMessageItem.GetLeftCharacter]"
                                                        visible = "[And(Character.IsValid, Not(Character.IsLocalPlayer))]"
                                                    }

                                                    button_text = {
                                                        layoutpolicy_horizontal = expanding
                                                        blockoverride "text" {
                                                            raw_text = "Select [PlayerMessageItem.GetRightCharacter.GetFirstNameNoTooltip]."
                                                        }
                                                        using = char_click
                                                        onclick = "[GetVariableSystem.Toggle('show_feed')]"
                                                        datacontext = "[PlayerMessageItem.GetRightCharacter]"
                                                        visible = "[Character.IsValid]"
                                                    }

                                                    button_text = {
                                                        layoutpolicy_horizontal = expanding
                                                        datacontext = "[PlayerMessageItem.GetLeftTitle]"
                                                        datacontext = "[PlayerMessageItem.GetLeftTitle.GetProvince]"
                                                        blockoverride "text" {
                                                            raw_text = "Go to [PlayerMessageItem.GetLeftTitle.GetNameNoTierNoTooltip]."
                                                        }
                                                        using = prov_click
                                                        onclick = "[GetVariableSystem.Toggle('show_feed')]"
                                                        visible = "[And(Title.IsValid, LessThan_int32(Title.GetTierFrame, '(int32)4'))]"
                                                    }

                                                    button_text = {
                                                        layoutpolicy_horizontal = expanding
                                                        datacontext = "[PlayerMessageItem.GetLeftTitle]"
                                                        blockoverride "text" {
                                                            raw_text = "Select title of [PlayerMessageItem.GetLeftTitle.GetNameNoTierNoTooltip]."
                                                        }
                                                        using = title_click
                                                        onclick = "[GetVariableSystem.Toggle('show_feed')]"
                                                        visible = "[And(Title.IsValid, GreaterThanOrEqualTo_int32(Title.GetTierFrame, '(int32)4'))]"
                                                    }

                                                    button_text = {
                                                      layoutpolicy_horizontal = expanding
                                                        datacontext = "[PlayerMessageItem.GetRightTitle]"
                                                        blockoverride "text" {
                                                            raw_text = "Select [PlayerMessageItem.GetRightTitle.GetNameNoTooltip]."
                                                        }
                                                        using = title_click
                                                        onclick = "[GetVariableSystem.Toggle('show_feed')]"
                                                        visible = "[And(Title.IsValid, GreaterThanOrEqualTo_int32(Title.GetTierFrame, '(int32)4'))]"
                                                    }

                                                    button_text = {
                                                        layoutpolicy_horizontal = expanding
                                                        datacontext = "[PlayerMessageItem.GetRightTitle]"
                                                        blockoverride "text" {
                                                            raw_text = "Go to [PlayerMessageItem.GetRightTitle.GetNameNoTooltip]."
                                                        }
                                                        using = prov_click
                                                        onclick = "[GetVariableSystem.Toggle('show_feed')]"
                                                        visible = "[And(Title.IsValid, LessThan_int32(Title.GetTierFrame, '(int32)4'))]"
                                                    }

                                                    hbox = {
                                                        visible = no

                                                        portrait_head_small = {
                                                            name = "portrait_left"
                                                            datacontext = "[PlayerMessageItem.GetLeftCharacter]"
                                                            visible = "[Character.IsValid]"
                                                        }

                                                        coa_title_medium = {
                                                            name = "title_left"
                                                            datacontext = "[PlayerMessageItem.GetLeftTitle]"
                                                            visible = "[Title.IsValid]"
                                                        }

                                                        icon_artifact = {
                                                            name = "artifact_left"
                                                            datacontext = "[PlayerMessageItem.GetLeftArtifact]"
                                                            visible = "[Artifact.IsValid]"
                                                        }

                                                        portrait_head_small = {
                                                            name = "portrait_right"
                                                            datacontext = "[PlayerMessageItem.GetRightCharacter]"
                                                            visible = "[Character.IsValid]"
                                                        }

                                                        coa_title_medium = {
                                                            name = "title_right"
                                                            datacontext = "[PlayerMessageItem.GetRightTitle]"
                                                            visible = "[Title.IsValid]"
                                                        }

                                                        icon_artifact = {
                                                            name = "artifact_right"
                                                            datacontext = "[PlayerMessageItem.GetRightArtifact]"
                                                            visible = "[Artifact.IsValid]"
                                                        }
                                                    }

                                                    expand = { }
                                                }
                                            }
                                        }
                                    }
                                }

                                expand = { }

                            }
                        }
                    }

                    button_text = {
                        layoutpolicy_horizontal = expanding
                        visible = "[Not(IsDataModelEmpty(MessageFeedHandler.GetItems))]"
                        blockoverride "text" {
                            raw_text = "Dismiss all, Shift D."
                            align = left
                        }
                        onclick = "[MessageFeedHandler.MarkAllForDelete]"
                        onclick = "[PdxGuiTriggerAllAnimations('close_feed')]"
                        # onclick = "[Toggle('show_feed')]"
                        # onclick = "[PdxGuiTriggerAllAnimations('dismiss_toast')]"
                        shortcut = mapmode_house_secondary

                    }
                }

                state = {
                    name = "close_feed"
                    delay = 0.2
                    on_finish = "[Clear('show_feed')]"
                }

                button_text = {
                    layoutpolicy_horizontal = expanding
                    shortcut = close_window
                    shortcut = go_back_2
                    # visible = "[Not(GetVariableSystem.Exists('show_feed'))]"
                    onclick = "[GetVariableSystem.Toggle('show_feed')]"
                    blockoverride "text" {
                        raw_text = "Hide, backspace Or Escape."
                    }
                }

                expand = { }
            }
        }

        widget = {
            parentanchor = right
            size = { 650 200 }
            alwaystransparent = yes
            visible = "[And(DataModelHasItems(MessageFeedHandler.GetItems), Isnt('show_feed'))]"
            # visible = "[Isnt('show_feed')]"
            position = { 0 5 }


            flowcontainer = {
                background = { using = Background_Area_Border_Solid }
                margin = { 5 0 }
                margin_bottom = 5
                direction = vertical

                button_text = {
                    shortcut = go_back_2
                    onclick = "[Toggle('show_feed')]"
                    blockoverride "extra" {
                        text_single = {
                            raw_text = "[GetDataModelSize(MessageFeedHandler.GetItems)]"
                        }

                        text_single = {
                            raw_text = "Update[AddTextIf( GreaterThan_int32(GetDataModelSize(MessageFeedHandler.GetItems), '(int32)1'), 's' )],"
                        }

                        text_single = {
                            raw_text = "Backspace."
                        }
                    }
                }

                # button = {
                #     onclick = "[MessageFeedHandler.MarkAllForDelete]"
                #     shortcut = mapmode_house_secondary
                # }


                text_single = {
                    visible = "[GreaterThan_int32(GetDataModelSize(MessageFeedHandler.GetItems), '(int32)3')]"
                    raw_text = "3 Most recent:"
                }

                flowcontainer = {
                    ignoreinvisible = yes
                    direction = vertical
                    bottomtotop = yes

                    datamodel = "[DataModelLast(MessageFeedHandler.GetItems, Min_int32('(int32)3', GetDataModelSize(MessageFeedHandler.GetItems)))]"

                    item = {
                        text_single = {
                            state = {
                                name = "mark_to_delete"
                                trigger_when = "[FeedMessageItem.IsSetToDelete]"
                                on_finish = "[FeedMessageItem.StartAnimation]"
                                on_finish = "[FeedMessageItem.EndAnimation]"
                                on_finish = "[FeedMessageItem.Delete]"
                            }
                            datacontext = "[FeedMessageItem.GetPlayerMessageItem]"
                            raw_text = "[PlayerMessageItem.GetTitle]."
                            max_width = 650
                            margin_right = 15
                            fontsize_min = 15
                        }
                    }
                }
            }
        }

        container = {
            parentanchor = bottom|right
            # visible = "[Isnt('show_feed')]"
            visible = no
            position = { -120 -3 }
            flowcontainer = {
                visible = "[DataModelHasItems(MessageFeedHandler.GetItems)]]"
                background = { using = Background_Area_Dark }
                spacing = 3

                flowcontainer = {
                    spacing = 3
                    ignoreinvisible = yes

                    text_single = {
                        raw_text = "[GetDataModelSize(MessageFeedHandler.GetItems)]"
                    }

                    text_single = {
                        raw_text = "Update[AddTextIf( GreaterThan_int32(GetDataModelSize(MessageFeedHandler.GetItems), '(int32)1'), 's' )],"
                    }
                }

                text_single = {
                    raw_text = "Backspace."
                }
            }
        }
    }
}

template message_feed_text
{
    direction = vertical

    container = {

        widget = {
            block "WidgetSize"
            {
                size = { 200 22 }
            }
            name = "header"
        }
    }

    container = {
        text_multi = {
            position = { 12 4 }
            name = "effect"
            autoresize = yes
            block "MaxEffectSize"
            {
                maximumsize = { 200 -1 }
            }
            minimumsize = { -1 -1 }
            align = left
            parentanchor = left
            text = "[PlayerMessageItem.GetTooltip]"
        }
    }
}

template situation_entry_parent_hover_states
{
    state = {
        name = _mouse_hierarchy_enter
        on_start = "[PdxGuiWidget.FindChild('button_dismiss').TriggerAnimation('hover_enter')]"
    }

    state = {
        name = _mouse_hierarchy_leave
        on_start = "[PdxGuiWidget.FindChild('button_dismiss').TriggerAnimation('hover_leave')]"
    }
}

template situation_entry_child_hover_states
{
    name = "button_dismiss"
    alpha = 0

    state = {
        name = hover_enter
        alpha = 1
        duration = 0.05
        using = Animation_Curve_Default
    }

    state = {
        name = hover_leave
        alpha = 0
        duration = 0.2
        using = Animation_Curve_Default
    }
}

types Suggestions
{
    type button_suggestion_item = button {
        onclick = "[SuggestionItem.OnClick]"
        onclick = "[ActionItemHandler.ToggleList]"
        onrightclick = "[SuggestionItem.Dismiss]"
        button_ignore = none
        tooltip = "[SuggestionItem.GetTooltip]"

        background = {
            using = Status_Suggestion
        }

        background = {
            texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
            spriteType = Corneredtiled
            spriteborder = { 5 5 }
            margin = { -2 -2 }
            alpha = 0.3
        }

        using = situation_entry_parent_hover_states

        hbox = {
            margin = { 10 3 }
            margin_right = 5
            restrictparent_min = yes

            text_single = {
                layoutpolicy_horizontal = expanding
                text = "[SuggestionItem.GetLabel]"
            }

            button_cancel_small = {
                tooltip = "DISMISS_SUGGESTION_TT"
                onclick = "[SuggestionItem.Dismiss]"
                inherit_visual_state = no

                using = situation_entry_child_hover_states
            }
        }
    }

    type button_current_situation_item = button {
        visible = "[ImportantActionItem.IsVisible]"
        minimumsize = { @sug_width 0 }

        onclick = "[ImportantActionItem.OnClick]"
        onrightclick = "[ImportantActionItem.Dismiss]"
        onclick = "[ActionItemHandler.ToggleList]"
        button_ignore = none
        onmousehierarchyenter = "[ImportantActionItem.MarkAsRead]"

        using = situation_entry_parent_hover_states

        background = {
            visible = "[And(Not(ImportantActionItem.IsUnimportant), ImportantActionItem.GetActionType.IsDangerous)]"
            using = Status_Suggestion_Bad
        }

        background = {
            visible = "[And(Not(ImportantActionItem.IsUnimportant), Not(ImportantActionItem.GetActionType.IsDangerous))]"
            using = Status_Suggestion_Good
        }

        flowcontainer = {
            ignoreinvisible = yes
            resizeparent = yes
            minimumsize = { @sug_width 0 }
            margin_left = 5
            margin_top = 1

            text_multi = {
                autoresize = yes
                max_width = @sug_width
                text = "ACTION_IS_VISIBLE_READ_UNREAD"
                # align = left
            }

            text_single = {
                tooltip = "[ImportantActionItem.GetTooltip]"
                raw_text = " Tooltip."
            }
        }
    }

    type button_current_situation_item_multiple = button {
        onclick = "[GuiActionItem.OnClick]"
        onrightclick = "[GuiActionItem.Dismiss]"
        button_ignore = none
        onmousehierarchyenter = "[GuiActionItem.MarkAsRead]"

        background = {
            visible = "[And(Not(GuiActionItem.IsUnimportant), GuiActionItem.HasAnyActionIsDangerous)]"
            using = Status_Suggestion_Bad
        }

        background = {
            visible = "[And(Not(GuiActionItem.IsUnimportant), Not(GuiActionItem.HasAnyActionIsDangerous))]"
            using = Status_Suggestion_Good
        }

        flowcontainer = {
            minimumsize = { @sug_width 0 }
            margin_left = 5
            margin_top = 1
            resizeparent = yes
            ignoreinvisible = yes


            text_single = {
                margin_right = 3
                raw_text = "[AddTextIf(GuiActionItem.IsExpanded, 'Expanded,')]"
            }

            text_multi = {
                autoresize = yes
                max_width = @sug_width
                text = "IMPORTANT_ACTION_COMBINED_LABEL"
                align = left
            }

            text_single = {
                raw_text = ", [GuiActionItem.GetNumberOfVisibleItems]."
            }


            text_single = {
                raw_text = " Tooltip."
                tooltip = "[GuiActionItem.GetCombinedTooltip]"
            }
        }
    }

    type button_current_situation_item_combined = button {
        visible = "[ImportantActionItem.IsVisible]"
        onclick = "[ImportantActionItem.OnClick]"
        onclick = "[ActionItemHandler.ToggleList]"
        onrightclick = "[ImportantActionItem.Dismiss]"
        button_ignore = none

        onmousehierarchyenter = "[ImportantActionItem.MarkAsRead]"

        background = {
            visible = "[And(Not(ImportantActionItem.IsUnimportant), ImportantActionItem.GetActionType.IsDangerous)]"
            using = Status_Suggestion_Bad
        }

        background = {
            visible = "[And(Not(ImportantActionItem.IsUnimportant), Not(ImportantActionItem.GetActionType.IsDangerous))]"
            using = Status_Suggestion_Good
        }

        using = situation_entry_parent_hover_states

        flowcontainer = {
            resizeparent = yes
            minimumsize = { @sug_width 0 }

            text_multi = {
                margin_left = 5
                margin_top = 1
                autoresize = yes
                max_width = @sug_width

                align = left
                text = "ACTION_IS_VISIBLE_READ_UNREAD_COMBINED"
                alwaystransparent = yes
            }
            text_single = {
                margin_top = 1
                tooltip = "[ImportantActionItem.GetTooltip]"
                raw_text = " Tooltip."
            }
        }
    }
}
