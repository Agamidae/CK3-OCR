
widget = {
	name = "mainmenu_panel_bottom"
	parentanchor = center
	size = { 100% 100% }

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		on_start = "[GetVariableSystem.Clear('mod_changes')]"
		start_sound = {
			soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_window_show"
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		start_sound = {
			soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_window_hide"
		}
	}

	widget = {
		parentanchor = center
		size = { 1920 1080 }
		scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"

		state = {
			name = "main_menu_continue"
			duration = 0.1
			# delay = 1
			# using = Animation_Curve_Default

			alpha = 0
		}

		icon = {
			parentanchor = center
			size = { 100% 100% }
			texture = "[FrontEndMainView.GetBackground]"

			modify_texture = {
				name = "fade"
				texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
				blend_mode = alphamultiply
				translate_uv = { 1 0 }
				alpha = 0
			}

			state = {
				name = "main_menu_continue"
				duration = 0.1
				bezier = { 0.5 0 1 0.5 }

				modify_texture = {
					name = "fade"
					translate_uv = { -1 0 }
					alpha = 1
				}
			}
		}
	}

	widget = {
		visible = "[GetVariableSystem.Exists('ocr')]"
		parentanchor = center
		size = { 1920 1080 }
		scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"

		state = {
			name = "main_menu_continue"
			duration = 0.6
			delay = 1
			using = Animation_Curve_Default

			alpha = 0
		}

		icon = {
			name = "shadow_left"
			visible = "[And( FrontEndMainView.ShowSecondaryCharacter, GreaterThan_int32( FrontEndMainView.GetSecondaryCharacterAge, '(int32)1' ) )]"
			parentanchor = bottom|hcenter
			position = { 170 -90 }
			texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
			scale = 0.7
		}

		icon = {
			name = "shadow_left_sitting_child"
			visible = "[And( FrontEndMainView.ShowSecondaryCharacter, LessThanOrEqualTo_int32( FrontEndMainView.GetSecondaryCharacterAge, '(int32)1' ) )]"
			parentanchor = bottom|hcenter
			position = { 150 -135 }
			texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
			scale = 0.35
		}

		icon = {
			name = "shadow_center"
			visible = "[GreaterThan_int32( FrontEndMainView.GetMainCharacterAge, '(int32)1' )]"
			parentanchor = bottom|hcenter
			position = { 335 -40 }
			texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
			scale = 0.7
		}

		icon = {
			name = "shadow_center_sitting_child"
			visible = "[LessThanOrEqualTo_int32( FrontEndMainView.GetMainCharacterAge, '(int32)1' )]"
			parentanchor = bottom|hcenter
			position = { 325 -80 }
			texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
			scale = 0.35
		}

		icon = {
			name = "shadow_right"
			visible = "[And( FrontEndMainView.ShowHeirCharacter, GreaterThan_int32( FrontEndMainView.GetHeirCharacterAge, '(int32)1' ) )]"
			parentanchor = bottom|hcenter
			position = { 515 -75 }
			texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
			scale = 0.7
		}

		icon = {
			name = "shadow_right_sitting_child"
			visible = "[And( FrontEndMainView.ShowHeirCharacter, LessThanOrEqualTo_int32( FrontEndMainView.GetHeirCharacterAge, '(int32)1' ) )]"
			parentanchor = bottom|hcenter
			position = { 490 -45 }
			texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
			scale = 0.35
		}

		@frontend_portrait_y = -240
		@frontend_portrait_y_child = -190

		# Secondary
		portrait_button = {
			name = "menu_portrait_left"
			visible = "[And(FrontEndMainView.ShowSecondaryCharacter , GreaterThan_int32( FrontEndMainView.GetSecondaryCharacterAge, '(int32)1' ))]"
			parentanchor = center
			position = { 0 @frontend_portrait_y }
			using = portrait_base
			size = { 1920 1400 }
			alwaystransparent = yes

			portrait_texture = "[FrontEndMainView.GetSecondaryCharacterTexture('camera_main_menu_secondary', PdxGetWidgetScreenSize(PdxGuiWidget.Self), '(bool)yes'))]"
			mask = "gfx/portraits/portrait_mask_solid.dds"

			blockoverride "grayscale" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}
			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onrightclick" {}
			blockoverride "portrait_button_template_tooltip" {}
		}

		# Secondary child, sitting child version
		portrait_button = {
			name = "menu_portrait_left_sitting_child"
			visible = "[And(FrontEndMainView.ShowSecondaryCharacter , LessThanOrEqualTo_int32( FrontEndMainView.GetSecondaryCharacterAge, '(int32)1' ))]"
			parentanchor = center
			position = { 0 @frontend_portrait_y }
			using = portrait_base
			size = { 1920 1400 }
			alwaystransparent = yes

			portrait_texture = "[FrontEndMainView.GetSecondaryCharacterTexture('camera_main_menu_secondary_sitting_child', PdxGetWidgetScreenSize(PdxGuiWidget.Self), '(bool)yes'))]"
			mask = "gfx/portraits/portrait_mask_solid.dds"

			blockoverride "grayscale" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}
			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onrightclick" {}
			blockoverride "portrait_button_template_tooltip" {}
		}

		# Heir
		portrait_button = {
			name = "menu_portrait_right"
			visible = "[And( FrontEndMainView.ShowHeirCharacter, GreaterThan_int32( FrontEndMainView.GetHeirCharacterAge, '(int32)1' ) )]"
			parentanchor = center
			position = { 0 @frontend_portrait_y }
			using = portrait_base
			size = { 1920 1400 }
			alwaystransparent = yes

			portrait_texture = "[FrontEndMainView.GetHeirCharacterTexture('camera_main_menu_heir', PdxGetWidgetScreenSize(PdxGuiWidget.Self), '(bool)yes')]"
			mask = "gfx/portraits/portrait_mask_solid.dds"

			blockoverride "grayscale" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}
			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onrightclick" {}
			blockoverride "portrait_button_template_tooltip" {}
		}

		# Main Character
		portrait_button = {
			name = "menu_portrait_center"
			visible = "[GreaterThan_int32( FrontEndMainView.GetMainCharacterAge, '(int32)1' )]"
			parentanchor = center
			position = { 0 @frontend_portrait_y }
			using = portrait_base
			size = { 1920 1400 }
			alwaystransparent = yes

			portrait_texture = "[FrontEndMainView.GetMainCharacterTexture('camera_main_menu_main', PdxGetWidgetScreenSize(PdxGuiWidget.Self), '(bool)yes'))]"
			mask = "gfx/portraits/portrait_mask_solid.dds"

			blockoverride "grayscale" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}
			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onrightclick" {}
			blockoverride "portrait_button_template_tooltip" {}
		}

		# Main Character, sitting child version
		portrait_button = {
			name = "menu_portrait_center_sitting_child"
			visible = "[LessThanOrEqualTo_int32( FrontEndMainView.GetMainCharacterAge, '(int32)1' )]"
			parentanchor = center
			position = { 0 @frontend_portrait_y }
			using = portrait_base
			size = { 1920 1400 }
			alwaystransparent = yes

			portrait_texture = "[FrontEndMainView.GetMainCharacterTexture('camera_main_menu_main_sitting_child', PdxGetWidgetScreenSize(PdxGuiWidget.Self), '(bool)yes'))]"
			mask = "gfx/portraits/portrait_mask_solid.dds"

			blockoverride "grayscale" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}
			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onrightclick" {}
			blockoverride "portrait_button_template_tooltip" {}
		}

		# Heir, sitting child version
		portrait_button = {
			name = "menu_portrait_heir_sitting_child"
			visible = "[And( FrontEndMainView.ShowHeirCharacter, LessThanOrEqualTo_int32( FrontEndMainView.GetHeirCharacterAge, '(int32)1' ) )]"
			parentanchor = center
			position = { 0 @frontend_portrait_y_child }
			using = portrait_base
			size = { 1920 1400 }
			alwaystransparent = yes

			portrait_texture = "[FrontEndMainView.GetHeirCharacterTexture('camera_main_menu_heir_sitting_child', PdxGetWidgetScreenSize(PdxGuiWidget.Self), '(bool)yes')]"
			mask = "gfx/portraits/portrait_mask_solid.dds"

			blockoverride "grayscale" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}
			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onrightclick" {}
			blockoverride "portrait_button_template_tooltip" {}
		}
	}

	widget = {
		size = { 100% 100% }
		# scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"

		icon = {
			name = "left_panel"
			size = { 700 100% }
			visible = "[Not(GetVariableSystem.Exists('ocr'))]"

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_top = 10
				datacontext = "[FrontEndMainView.AccessLoadView]"
				background = { using = Background_Area_Border_Solid }

				vbox = {
					layoutpolicy_horizontal = expanding
					margin_left = 10
					spacing = 15

					vbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "Main menu."
						}

						button_text = {
							layoutpolicy_horizontal = expanding
						    blockoverride "text" {
						        raw_text = "mod_version"
						    }
							blockoverride "extra" {
								text_single = {
									raw_text = " View change notes."
								}
							}
							onclick = "[GetVariableSystem.Toggle('mod_changes')]"
						}

						error_button = {
							layoutpolicy_horizontal = expanding
						}

						widget = {
							size = { 0 10 }
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							name = "continue_button"
							datacontext = "[FrontEndLoadView.GetContinueSave]"
							visible = "[FrontEndLoadView.CanDoContinue]"
							enabled = "[Not( SaveGameItem.HasMissingDLCs )]"
							onclick = "[PdxGuiTriggerAllAnimations('main_menu_continue')]"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
							shortcut = confirm

							blockoverride "extra" {
								flowcontainer = {
								    ignoreinvisible = yes
								    direction = vertical

									text_single = {
										raw_text = "[AddTextIf(SaveGameItem.HasMissingDLCs, 'Can\'t ')]Continue[AddTextIf(Not(SaveGameItem.HasMissingDLCs), ', hotkey Enter')]."
									}
									text_single = {
										raw_text = "Last save: [SaveGameItem.GetName]."
										max_width = 300
									}

									text_single = {
										raw_text = "LOAD_IRONMAN_TOOLTIP"
										visible = "[SaveGameItem.IsIronmanSave]"
									}

									text_single = {
										raw_text = "Missing DLCs, see tooltip."
										tooltip = "[SaveGameItem.GetMissingDLCInfo]"
										visible = "[SaveGameItem.HasMissingDLCs]"
									}
								}
							}

							state = {
								name = "main_menu_continue"
								# delay = 1.5
								on_finish = "[FrontEndLoadView.OnContinue]"
							}

							state = {
								name = _mouse_release
								on_start = "[FrontEndLoadView.PreContinueSaveCheck]"
							}
						}

						text_single = {
							margin_left = 10
							layoutpolicy_horizontal = expanding
							raw_text = "Can't continue,"
							visible = "[Not(FrontEndLoadView.CanDoContinue)]"
						}

						widget = {
							size = { 0 10 }
						}

						button_text = {
							name = "new_game_button"
							onclick = "[FrontEndMainView.OnNewGame]"
							shortcut = speed_1
							layoutpolicy_horizontal = expanding

							state = {
								name = _mouse_hierarchy_enter
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_new_leave','main_menu_glow_new_enter')]"
							}

							state = {
								name = _mouse_hierarchy_leave
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_new_enter','main_menu_glow_new_leave')]"
							}
							blockoverride "text" {
								raw_text = "Start new Game, hotkey 1."
							}
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							enabled = "[FrontEndLoadView.CanDoContinue]"
							blockoverride "disabled" {
								visible = "[Not(FrontEndLoadView.CanDoContinue)]"
							}
							blockoverride "text" {
								raw_text = "[Localize('LOAD')], 2."
							}
							tooltip = FRONTEND_NO_CONTINUE_TT
							onclick = "[FrontEndMainView.OnLoad]"
							shortcut = speed_2
						}

						flowcontainer = {
							margin_left = 10
							layoutpolicy_horizontal = expanding
							visible = "[Not(FrontEndLoadView.CanDoContinue)]"
							text_single = {
								raw_text = "FRONTEND_NO_CONTINUE_TT"
							}
							dot = { }
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "SETTINGS"
							}
							blockoverride "extra" {
								text_single = {
									raw_text = ", 3"
								}
							}
							shortcut = speed_3
							blockoverride "dot" { }
							onclick = "[FrontEndMainView.OnSettings]"
						}
					}
					hbox = {
						layoutpolicy_horizontal = expanding
						visible = no

						button = {
							scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"
							background = { using = Background_Area_Border_Solid }

							text_multi = {
								margin = { 0 15 }
								margin_left = 5
								fontsize = 18
								max_width = 680
								autoresize = yes
								resizeparent = yes
								raw_text = "If your screen reader can't read the text above, click here to open settings and increase gui scaling to one hundred percent."

							}
							onclick = "[FrontEndMainView.OnSettings]"
							onclick = "[GetVariableSystem.Set('scaled_settings', 'yes')]"
						}

						expand = { }
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						hbox = {
						    layoutpolicy_horizontal = expanding
							spacing = 3

							text_single = {
								raw_text = "[Localize('MULTI_PLAYER')],"
							}

							text_single = {
								raw_text = "[Select_CString(POPSStatusIsLoggedIn, 'Online', 'Offline')]."
							}

						    expand = { }
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							visible = "[Or( Not( POPSStatusIsLoggedIn ), POPStatusIsUserNameEmpty )]"
						    blockoverride "text" {
						        raw_text = "Log in to access multiplayer."
						    }
							onclick = "[FrontEndMainView.OnLogin]"
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[And( POPSStatusIsLoggedIn, Not( POPStatusIsUserNameEmpty ) )]"

							button_text = {
								layoutpolicy_horizontal = expanding
								name = "host_button"
								onclick = "[FrontEndMainView.OnHost]"
								onclick = "[RefreshIllustration]"
								enabled = "[JominiIsMultiplayerAccessible]"
								tooltip = "[JominiGetMultiplayerAccessibleString]"
								tooltip_enabled = "[Not(JominiIsMultiplayerAccessible)]"
								shortcut = speed_4

								blockoverride "text" {
									raw_text = "[Localize('HOST_GAME')], 4."
								}
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								name = "join_button"
								onclick = "[FrontEndMainView.OnMultiPlayer]"
								onclick = "[RefreshIllustration]"
								enabled = "[JominiIsMultiplayerAccessible]"
								tooltip = "[JominiGetMultiplayerAccessibleString]"
								tooltip_enabled = "[Not(JominiIsMultiplayerAccessible)]"
								shortcut = speed_5

								blockoverride "text" {
									raw_text = "[Localize('FRONTEND_JOIN_MULTIPLAYER')], 5."
								}
							}
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							onclick = "[FrontEndMainView.OnLogin]"
							visible = "[And( POPSStatusIsLoggedIn, Not( POPStatusIsUserNameEmpty ) )]"

							blockoverride "pre" {
								text_single = {
									margin_right = 3
									raw_text = "View"
								}
							}
							blockoverride "text" {
								raw_text = "ACCOUNT"
							}
							blockoverride "dot" { }
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						name = "exit_game_button"
						onclick = "[FrontEndMainView.OnQuit]"
						blockoverride "text" {
							raw_text = "EXIT_TO_DESKTOP"
						}
						blockoverride "extra" {
							text_single = {
								raw_text = " Alt F4."
							}

						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						button_text = {
							visible = no
							layoutpolicy_horizontal = expanding
							onclick = "[OpenAchievements]"
							# enabled = "[AreAchievementsAvailable]"
							tooltip = "[GetAchievementsAvailableString]"
							blockoverride "text" {
								text = "ACHIEVEMENTS"
							}
							blockoverride "dot" { }
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							shortcut = encyclopedia
						    blockoverride "text" {
						        raw_text = "[Localize('HEADING_ENCYCLOPEDIA')], F10"
						    }
							onclick = "[ToggleEncyclopedia]"
							blockoverride "dot" { }
						}
						button_text = {
							visible = no
							layoutpolicy_horizontal = expanding
							onclick = "[FrontEndMainView.OnCredits]"
						    blockoverride "text" {
						        raw_text = "CREDITS"
						    }
							blockoverride "dot" { }
						}
					}

					#
					# text_multi = {
					# 	autoresize = yes
					# 	background = { using = Background_Area_Border_Solid }
					# 	margin_left = 5
					# 	max_width = 700
					# 	min_width = 700
					# 	raw_text = "[GetLoadedMods]."
					# }

					vbox = {
						margin_left = 5
						layoutpolicy_horizontal = expanding
						datamodel = "[FrontEndMainView.GetDlcCollection.GetDlcs]"

						item = {
							text_single = {
								visible = "[Not(DlcItem.GetDlc.IsEnabled)]"
								layoutpolicy_horizontal = expanding
								raw_text = "Disabled DLC, [DlcItem.GetDlc.GetName]."
							}
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "Disable OCR mode,  Shift F 11."

						}
						shortcut = screenshot_map
						onclick = "[GetVariableSystem.Toggle('ocr')]"
					}
				}


				expand = { }
			}
		}

		left_panel_old = {
			visible = "[GetVariableSystem.Exists('ocr')]"
		}

		widget = {
			parentanchor = bottom|left
			size = { 800 100 }
			visible = "[GetVariableSystem.Exists('ocr')]"

			hbox = { # DLCs
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_left = 20
				spacing = 10

				text_single = {
					max_width = 150
					minimumsize = { 0 25 }

					text = "DLC"
					align = nobaseline
					using = Font_Size_Medium
				}

				scrollarea = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					scrollbarpolicy_vertical = always_off
					scrollbarpolicy_horizontal = as_needed

					scrollbar_horizontal = {
						scrollbar = {
							wheelstep = 60
							direction = horizontal

							track = {
								button = {}
							}

							slider = {
								button = {}
							}

							dec_button = {
								button = {
								}
							}

							inc_button = {
								button = {
								}
							}
						}
					}

					scrollwidget = {
						hbox = {
							hbox = {
								datamodel = "[FrontEndMainView.GetDlcCollection.GetDlcs]"
								spacing = 5

								item = {
									hbox = {
										widget = {
											visible = "[DlcItem.GetDlc.IsMajor]"
											size = { 47 47 }
											dlc_button = {}
										}

										widget = {
											visible = "[Not( DlcItem.GetDlc.IsMajor )]"
											size = { 33 33 }
											dlc_button = {}
										}
									}
								}
							}

							expand = {}
						}
					}
				}
			}
		}
	}

	window = {
		size = { 100% 100% }
		background = { using = Background_Area_Border_Solid }

		visible = "[GetVariableSystem.Exists('mod_changes')]"

		scrollbox = {
			size = { 100% 100% }

			blockoverride "scrollbox_content" {
				button_text = {
					shortcut = close_window
					onclick = "[GetVariableSystem.Toggle('mod_changes')]"
					layoutpolicy_horizontal = expanding
				    blockoverride "text" {
						raw_text = "Change notes. Close with Escape."
				    }
				}
				hbox = {
				    layoutpolicy_horizontal = expanding

					text_multi = {
						max_width = 900
						autoresize = yes
						raw_text = "mod_changes"
					}

				    expand = { }
				}
			}
		}
	}

	clickable_version_number = {
		background = { using = Background_Area_Border_Solid }

		parentanchor = bottom|right
		position = { -15 -15 }

		using = tooltip_se

		blockoverride "background"
		{

		}


	}

	state = {
		name = sound
		start_sound = {
			soundeffect = "event:/DLC/FP2/SFX/UI/fp2_struggle_view_open"
		}
	}

	# error_horse = {
	# 	visible = "[Not(ReleaseMode)]"
	# 	parentanchor = bottom|right
	# 	position = { -80 -90 }
	# }
	loaded_mods_icon = {
		visible = "[And( HasLoadedMods, Not(ReleaseMode))]"
		parentanchor = bottom|right
		tooltip = "[GetLoadedMods]"
		position = { -120 -85 }
	}

	# window = {
	# 	size = { 100% 100% }
	# 	background = { using = Background_Area_Border_Solid }
	#
	# 	widget_loading_screen = { }
	# }
}

types FrontendTypes {
	type left_panel_old = icon {
		parentanchor = left|vcenter
		position = { 200 -700 }
		size = { 500 915 }
		alpha = 0
		texture = "gfx/interface/frontend/frontend_main_menu_bg.dds"

		modify_texture = {
			texture = "gfx/interface/frontend/frontend_main_menu_bg_mask.dds"
			blend_mode = mask
		}

		modify_texture = {
			name = "glow_main"
			texture = "gfx/interface/frontend/frontend_main_menu_bg_glow.dds"
			blend_mode = colordodge
			alpha = 0
			translate_uv = { 0.29 -0.5 }
		}

		modify_texture = {
			name = "glow_continue"
			texture = "gfx/interface/frontend/frontend_main_menu_bg_button_glow.dds"
			blend_mode = colordodge
			translate_uv = { 0 -0.14 }
			alpha = 1
		}

		modify_texture = {
			name = "glow_new"
			texture = "gfx/interface/frontend/frontend_main_menu_bg_button_glow.dds"
			blend_mode = colordodge
			translate_uv = { 0 -0.07 }
			alpha = 0
		}

		modify_texture = {
			name = "glow_load"
			texture = "gfx/interface/frontend/frontend_main_menu_bg_button_glow.dds"
			blend_mode = colordodge
			translate_uv = { 0 -0.14 }
			alpha = 0
		}

		modify_texture = {
			name = "glow_host"
			texture = "gfx/interface/frontend/frontend_main_menu_bg_button_glow.dds"
			blend_mode = colordodge
			translate_uv = { 0 -0.28 }
			alpha = 0
		}

		modify_texture = {
			name = "glow_join"
			texture = "gfx/interface/frontend/frontend_main_menu_bg_button_glow.dds"
			blend_mode = colordodge
			translate_uv = { 0 -0.31 }
			alpha = 0
		}

		# modify_texture = {
		# 	name = "glow_exit"
		# 	texture = "gfx/interface/frontend/frontend_main_menu_bg_button_glow.dds"
		# 	blend_mode = colordodge
		# 	translate_uv = { 0 -0.41 }
		# 	alpha = 0
		# }

		@duration_button_enter = 0.1
		@duration_button_leave = 0.5

		# Continue
		state = {
			name = "main_menu_glow_continue_enter"
			duration = 0.05
			using = Animation_Curve_Default

			modify_texture = {
				name = "glow_continue"
				alpha = 1
			}
		}

		state = {
			name = "main_menu_glow_continue_leave"
			duration = @duration_button_leave
			using = Animation_Curve_Default

			modify_texture = {
				name = "glow_continue"
				alpha = 0
			}
		}

		# New
		state = {
			name = "main_menu_glow_new_enter"
			duration = @duration_button_enter
			using = Animation_Curve_Default

			modify_texture = {
				name = "glow_new"
				translate_uv = { 0 -0.07 }
				alpha = 1
			}
		}

		state = {
			name = "main_menu_glow_new_leave"
			duration = @duration_button_leave
			using = Animation_Curve_Default

			modify_texture = {
				name = "glow_new"
				translate_uv = { 0 -0.07 }
				alpha = 0
			}
		}

		# Load
		state = {
			name = "main_menu_glow_load_enter"
			duration = @duration_button_enter
			using = Animation_Curve_Default

			modify_texture = {
				name = "glow_load"
				translate_uv = { 0 -0.14 }
				alpha = 1
			}
		}

		state = {
			name = "main_menu_glow_load_leave"
			duration = @duration_button_leave
			using = Animation_Curve_Default

			modify_texture = {
				name = "glow_load"
				translate_uv = { 0 -0.14 }
				alpha = 0
			}
		}

		# Load
		state = {
			name = "main_menu_glow_host_enter"
			duration = @duration_button_enter
			using = Animation_Curve_Default

			modify_texture = {
				name = "glow_host"
				translate_uv = { 0 -0.28 }
				alpha = 1
			}
		}

		state = {
			name = "main_menu_glow_host_leave"
			duration = @duration_button_leave
			using = Animation_Curve_Default

			modify_texture = {
				name = "glow_host"
				translate_uv = { 0 -0.28 }
				alpha = 0
			}
		}

		# Load
		state = {
			name = "main_menu_glow_join_enter"
			duration = @duration_button_enter
			using = Animation_Curve_Default

			modify_texture = {
				name = "glow_join"
				translate_uv = { 0 -0.31 }
				alpha = 1
			}
		}

		state = {
			name = "main_menu_glow_join_leave"
			duration = @duration_button_leave
			using = Animation_Curve_Default

			modify_texture = {
				name = "glow_join"
				translate_uv = { 0 -0.31 }
				alpha = 0
			}
		}

		# Exit
		state = {
			name = "main_menu_glow_exit_enter"
			duration = 0.05
			using = Animation_Curve_Default

			modify_texture = {
				name = "glow_continue"
				translate_uv = { 0 -0.41 }
				alpha = 1
			}
		}

		state = {
			name = "main_menu_glow_exit_leave"
			duration = @duration_button_leave
			using = Animation_Curve_Default

			modify_texture = {
				name = "glow_continue"
				translate_uv = { 0 -0.41 }
				alpha = 0
			}
		}

		# Appear bounce animation
		state = {
			name = a
			next = b
			duration = 1
			trigger_on_create = yes
			position_y = -700
		}

		state = {
			name = b
			next = c
			duration = 0.4
			bezier = { 0.5 0 1 0.5 }

			position_y = 0
			alpha = 1
		}

		state = {
			name = c
			next = d
			duration = 0.1
			bezier = { 0 0.5 0.5 1 }

			position_y = -20
		}

		state = {
			name = d
			next = e
			duration = 0.1
			bezier = { 0.5 0 1 0.5 }

			position_y = 0
		}

		state = {
			name = e
			next = f
			duration = 0.05
			bezier = { 0 0.5 0.5 1 }

			position_y = -5
		}

		state = {
			name = f
			next = "glow_1"
			duration = 0.05
			bezier = { 0.5 0 1 0.5 }

			position_y = 0
		}

		# Main Glow Animation
		# state = {
		# 	name = "glow_1"
		# 	next = "glow_2"

		# 	modify_texture = {
		# 		name = "glow_main"
		# 		alpha = 0
		# 		translate_uv = { 0.29 -0.5 }
		# 	}

		# }

		state = {
			name = "glow_1"
			next = "glow_3"
			duration = 0.3

			modify_texture = {
				name = "glow_main"
				alpha = 0
				translate_uv = { 0.25 -0.22 }
			}
		}

		state = {
			name = "glow_3"
			next = "glow_4"
			duration = 0.5

			modify_texture = {
				name = "glow_main"
				alpha = 0.4
				translate_uv = { 0.19 -0.03 }
			}
		}

		state = {
			name = "glow_4"
			next = "glow_5"
			duration = 0.25

			modify_texture = {
				name = "glow_main"
				alpha = 0.8
				translate_uv = { 0.1 0.1 }
			}
		}

		state = {
			name = "glow_5"
			next = "glow_6"
			duration = 0.25

			modify_texture = {
				name = "glow_main"
				alpha = 0.5
				translate_uv = { 0.03 0.19 }
			}
		}

		state = {
			name = "glow_6"
			next = "glow_7"
			duration = 0.3

			modify_texture = {
				name = "glow_main"
				alpha = 0.2
				translate_uv = { -0.15 0.25 }
			}
		}

		state = {
			name = "glow_7"
			duration = 0.4

			modify_texture = {
				name = "glow_main"
				alpha = 0
				translate_uv = { -0.3 0.29 }
			}
		}

		# Continue Game
		state = {
			name = "main_menu_continue"
			duration = 0.4
			bezier = { 0.5 0 1 0.5 }
			delay = 0.4
			alpha = 0

			position_x = -100
		}

		icon = {
			size = { 100% 100% }
			texture = "gfx/interface/frontend/frontend_main_menu_frame.dds"
		}

		vbox = {
			datacontext = "[FrontEndMainView.AccessLoadView]"
			margin = { 90 0 }


			vbox = {
				margin_top = 255
				margin_bottom = 15
				spacing = 10

				vbox = {
					spacing = 5

					text_single = {
						layoutpolicy_horizontal = expanding
						margin_left = 5
						text = "SINGLE_PLAYER"
						default_format = "#weak;italic;glow_color:{0.1,0.1,0.1,1}"
					}

					vbox = {
						button_frontend = {
							name = "continue_button_disabled"
							visible = "[Not(FrontEndLoadView.CanDoContinue)]"
							enabled = no

							text = "CONTINUE"
							default_format = "#weak"
							fontsize = 20
							tooltip = FRONTEND_NO_CONTINUE_TT

						}

						button_frontend = {
							name = "continue_button"
							datacontext = "[FrontEndLoadView.GetContinueSave]"
							visible = "[FrontEndLoadView.CanDoContinue]"
							enabled = "[Not( SaveGameItem.HasMissingDLCs )]"
							onclick = "[PdxGuiTriggerAllAnimations('main_menu_continue')]"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"

							state = {
								name = _mouse_hierarchy_enter
								on_start = "[PdxGuiInterruptAllAnimations('main_menu_glow_exit_leave')]"
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_continue_leave','main_menu_glow_continue_enter')]"
							}

							state = {
								name = _mouse_hierarchy_leave
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_continue_enter','main_menu_glow_continue_leave')]"
							}

							state = {
								name = "main_menu_continue"
								delay = 1.5
								on_finish = "[FrontEndLoadView.OnContinue]"
							}

							state = {
								name = _mouse_release
								on_start = "[FrontEndLoadView.PreContinueSaveCheck]"
							}

							text = "CONTINUE"
							fontsize = 20
							tooltip = FRONTEND_CONTINUE_TT

							hbox = {
								parentanchor = right|vcenter
								alwaystransparent = yes
								margin_right = 10

								ironman_save_icon = {
									visible = "[SaveGameItem.IsIronmanSave]"
									tooltip = "LOAD_IRONMAN_TOOLTIP"
								}

								invalid_save_icon = {
									visible = "[SaveGameItem.HasMissingDLCs]"
									tooltip = "[SaveGameItem.GetMissingDLCInfo]"
								}

								achievements_disabled_icon = {
									visible = "[SaveGameItem.HasAchievementBlockingGameRules]"
									tooltip = "[SaveGameItem.GetAchievementBlockingGameRulesInfo]"
								}

								achievements_disabled_icon = {
									visible = "[And( SaveGameItem.CanGetAchievements, Not( IsGameChecksumOk ) )]"
									tooltip = "GAME_CHECKSUM_CHANGED_FROM_SAVE_FILE"
								}

								expand = {
									alwaystransparent = yes
								}

								coat_of_arms_icon = {
									name = "realm_flag"
									alwaystransparent = yes

									size = { 62 62 }
									coat_of_arms_slot = "[SaveGameItem.GetCoatOfArms.GetSlot('(int32)124','(int32)124')]"
									coat_of_arms = "[SaveGameItem.GetCoatOfArms.GetTexture('(int32)124','(int32)124')]"
									coat_of_arms_mask = "[SaveGameItem.GetPlayerGovernment.GetRealmMask]"

									coa_realm_overlay  = {
										texture = "[SaveGameItem.GetPlayerGovernment.GetRealmFrame('(int32)62')]"
										frame = "[SaveGameItem.GetPlayerTier]"
										framesize = { 62 71 }
										size = { 62 71 }
									}

									coa_realm_topframe  = {
										texture = "gfx/interface/coat_of_arms/topframe_62.dds"
										frame = "[SaveGameItem.GetPlayerTier]"
										framesize = { 62 71 }
										size = { 62 71 }
									}
								}
							}
						}
					}

					button_frontend = {
						name = "new_game_button"
						text = "NEW_GAME"
						fontsize = 20
						onclick = "[FrontEndMainView.OnNewGame]"

						state = {
							name = _mouse_hierarchy_enter
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_new_leave','main_menu_glow_new_enter')]"
						}

						state = {
							name = _mouse_hierarchy_leave
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_new_enter','main_menu_glow_new_leave')]"
						}
					}

					vbox = {
						button_frontend = {
							name = "load_game_button_disabled"
							visible = "[Not(FrontEndLoadView.CanDoContinue)]"
							enabled = no

							text = "LOAD"
							default_format = "#weak"
							fontsize = 20
							tooltip = FRONTEND_NO_CONTINUE_TT

						}

						button_frontend = {
							name = "load_game_button"
							visible = "[FrontEndLoadView.CanDoContinue]"
							text = "LOAD"
							fontsize = 20
							onclick = "[FrontEndMainView.OnLoad]"

							state = {
								name = _mouse_hierarchy_enter
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_load_leave','main_menu_glow_load_enter')]"
							}

							state = {
								name = _mouse_hierarchy_leave
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_load_enter','main_menu_glow_load_leave')]"
							}
						}
					}
				}

				vbox = {
					text_single = {
						layoutpolicy_horizontal = expanding
						margin_left = 5
						text = "MULTI_PLAYER"
						default_format = "#weak;italic;glow_color:{0.1,0.1,0.1,1}"
					}

					spacer = {
						size = { 5 5 }
					}

					vbox = {
						visible = "[And( POPSStatusIsLoggedIn, Not( POPStatusIsUserNameEmpty ) )]"
						spacing = 5

						button_frontend = {
							name = "host_button"
							text = "HOST_GAME"
							fontsize = 20
							onclick = "[FrontEndMainView.OnHost]"
							onclick = "[RefreshIllustration]"
							enabled = "[JominiIsMultiplayerAccessible]"
							tooltip = "[JominiGetMultiplayerAccessibleString]"

							state = {
								name = _mouse_hierarchy_enter
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_leave','main_menu_glow_host_enter')]"
							}

							state = {
								name = _mouse_hierarchy_leave
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_enter','main_menu_glow_host_leave')]"
							}
						}

						button_frontend = {
							name = "join_button"
							text = "FRONTEND_JOIN_MULTIPLAYER"
							fontsize = 20
							onclick = "[FrontEndMainView.OnMultiPlayer]"
							onclick = "[RefreshIllustration]"
							enabled = "[JominiIsMultiplayerAccessible]"
							tooltip = "[JominiGetMultiplayerAccessibleString]"

							state = {
								name = _mouse_hierarchy_enter
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_leave','main_menu_glow_join_enter')]"
							}

							state = {
								name = _mouse_hierarchy_leave
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_enter','main_menu_glow_join_leave')]"
							}
						}
					}

					vbox = {
						visible = "[Or( Not( POPSStatusIsLoggedIn ), POPStatusIsUserNameEmpty )]"
						spacing = 5

						button_frontend = {
							name = "host_button"
							text = "HOST_GAME"
							default_format = "#weak"
							fontsize = 20
							onclick = "[FrontEndMainView.OnLogin]"
							tooltip = "[JominiGetMultiplayerAccessibleString]"

							state = {
								name = _mouse_hierarchy_enter
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_leave','main_menu_glow_host_enter')]"
							}

							state = {
								name = _mouse_hierarchy_leave
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_enter','main_menu_glow_host_leave')]"
							}

							icon_online_offline = {
								parentanchor = right|vcenter
								position = { -15 0 }
								frame = 2
							}
						}

						button_frontend = {
							name = "join_button"
							text = "FRONTEND_JOIN_MULTIPLAYER"
							default_format = "#weak"
							fontsize = 20
							onclick = "[FrontEndMainView.OnLogin]"
							tooltip = "[JominiGetMultiplayerAccessibleString]"

							state = {
								name = _mouse_hierarchy_enter
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_leave','main_menu_glow_join_enter')]"
							}

							state = {
								name = _mouse_hierarchy_leave
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_enter','main_menu_glow_join_leave')]"
							}

							icon_online_offline = {
								parentanchor = right|vcenter
								position = { -15 0 }
								frame = 2
							}
						}
					}
				}


				button_frontend = {
					name = "exit_game_button"
					visible = yes
					text = "EXIT_TO_DESKTOP"
					fontsize = 20
					onclick = "[FrontEndMainView.OnQuit]"

					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiInterruptAllAnimations('main_menu_glow_continue_leave')]"
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_exit_leave','main_menu_glow_exit_enter')]"
					}

					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_exit_enter','main_menu_glow_exit_leave')]"
					}
				}


				button_frontend = {
					raw_text = "Enable OCR mode, Shift F11."
					onclick = "[GetVariableSystem.Toggle('ocr')]"
					shortcut = screenshot_map
				}
			}

			expand = {}

			hbox = {
				spacing = 10

				button_group = {
					onclick = "[OpenAchievements]"
					enabled = "[AreAchievementsAvailable]"
					tooltip = "[GetAchievementsAvailableString]"

					flowcontainer = {
						direction = vertical

						button_achievements = {
							name = "achievements"
							parentanchor = hcenter
							size = { 30 30 }
							alpha = 0.7
							enabled = "[AreAchievementsAvailable]"
						}

						text_single = {
							parentanchor = hcenter
							max_width = 80
							min_width = 80
							align = center
							fontsize = 13

							text = "ACHIEVEMENTS"
							default_format = "#low;glow_color:{0.1,0.1,0.1,1}"
						}
					}
				}

				button_group = {
					onclick = "[ToggleEncyclopedia]"

					flowcontainer = {
						direction = vertical

						button_encyclopedia = {
							parentanchor = hcenter
							size = { 30 30 }
							alpha = 0.7
						}

						text_single = {
							parentanchor = hcenter
							max_width = 80
							min_width = 80
							align = center
							fontsize = 13
							fontsize_min = 10

							text = "HEADING_ENCYCLOPEDIA"
							default_format = "#low;glow_color:{0.1,0.1,0.1,1}"
						}
					}
				}

				button_group = {
					onclick = "[FrontEndMainView.OnCredits]"

					flowcontainer = {
						direction = vertical

						button_credits = {
							parentanchor = hcenter
							size = { 25 25 }
							alpha = 0.7
						}

						text_single = {
							parentanchor = hcenter
							max_width = 80
							min_width = 80
							autoresize = yes
							align = center
							fontsize = 13

							text = "CREDITS"
							default_format = "#low;glow_color:{0.1,0.1,0.1,1}"
						}
					}
				}
			}

			hbox = {
				margin_top = 33
				margin_bottom = 92
				spacing = 20

				button_group = {
					onclick = "[FrontEndMainView.OnLogin]"

					flowcontainer = {
						spacing = 18

						pops_login_accountwidget = {
							parentanchor = vcenter
							size = { 25 25 }
							alpha = 0.7

							blockoverride "properties" {
								onclick = "[FrontEndMainView.OnLogin]"
							}
						}

						text_single = {
							parentanchor = vcenter
							max_width = 80
							min_width = 80
							fontsize = 13

							text = "ACCOUNT"
							default_format = "#clickable;glow_color:{0.1,0.1,0.1,1}"
							align = nobaseline
						}
					}
				}

				button_group = {
					onclick = "[FrontEndMainView.OnSettings]"

					flowcontainer = {
						spacing = 5

						button_settings = {
							name = "settings"
							parentanchor = vcenter
							size = { 25 25 }
							alpha = 0.7
						}

						text_single = {
							parentanchor = vcenter
							max_width = 80
							min_width = 60
							autoresize = yes
							fontsize = 13

							text = "SETTINGS"
							default_format = "#clickable;glow_color:{0.1,0.1,0.1,1}"
							align = nobaseline
						}
					}
				}
			}
		}
	}
}

