
widget = {
	name = "mainmenu_panel_bottom"
	parentanchor = center
	size = { 100% 100% }

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		start_sound = {
			soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_window_show"
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		start_sound = {
			soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_window_hide"
		}
	}

	widget = {
		parentanchor = center
		size = { 1920 1080 }
		scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"

		state = {
			name = "main_menu_continue"
			duration = 0.6
			delay = 1
			using = Animation_Curve_Default

			alpha = 0
		}

		icon = {
			parentanchor = center
			size = { 100% 100% }
			texture = "[FrontEndMainView.GetBackground]"

			modify_texture = {
				name = "fade"
				texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
				blend_mode = alphamultiply
				translate_uv = { 1 0 }
				alpha = 0
			}

			state = {
				name = "main_menu_continue"
				duration = 1
				bezier = { 0.5 0 1 0.5 }

				modify_texture = {
					name = "fade"
					translate_uv = { -1 0 }
					alpha = 1
				}
			}
		}

		icon = {
			name = "shadow_left"
			visible = "[And( FrontEndMainView.ShowSecondaryCharacter, GreaterThan_int32( FrontEndMainView.GetSecondaryCharacterAge, '(int32)1' ) )]"
			parentanchor = bottom|hcenter
			position = { 170 -90 }
			texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
			scale = 0.7
		}

		icon = {
			name = "shadow_left_sitting_child"
			visible = "[And( FrontEndMainView.ShowSecondaryCharacter, LessThanOrEqualTo_int32( FrontEndMainView.GetSecondaryCharacterAge, '(int32)1' ) )]"
			parentanchor = bottom|hcenter
			position = { 150 -135 }
			texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
			scale = 0.35
		}

		icon = {
			name = "shadow_center"
			visible = "[GreaterThan_int32( FrontEndMainView.GetMainCharacterAge, '(int32)1' )]"
			parentanchor = bottom|hcenter
			position = { 335 -40 }
			texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
			scale = 0.7
		}

		icon = {
			name = "shadow_center_sitting_child"
			visible = "[LessThanOrEqualTo_int32( FrontEndMainView.GetMainCharacterAge, '(int32)1' )]"
			parentanchor = bottom|hcenter
			position = { 325 -80 }
			texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
			scale = 0.35
		}

		icon = {
			name = "shadow_right"
			visible = "[And( FrontEndMainView.ShowHeirCharacter, GreaterThan_int32( FrontEndMainView.GetHeirCharacterAge, '(int32)1' ) )]"
			parentanchor = bottom|hcenter
			position = { 515 -75 }
			texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
			scale = 0.7
		}

		icon = {
			name = "shadow_right_sitting_child"
			visible = "[And( FrontEndMainView.ShowHeirCharacter, LessThanOrEqualTo_int32( FrontEndMainView.GetHeirCharacterAge, '(int32)1' ) )]"
			parentanchor = bottom|hcenter
			position = { 490 -45 }
			texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
			scale = 0.35
		}

		@frontend_portrait_y = -240
		@frontend_portrait_y_child = -190

		# Secondary
		portrait_button = {
			name = "menu_portrait_left"
			visible = "[And(FrontEndMainView.ShowSecondaryCharacter , GreaterThan_int32( FrontEndMainView.GetSecondaryCharacterAge, '(int32)1' ))]"
			parentanchor = center
			position = { 0 @frontend_portrait_y }
			using = portrait_base
			size = { 1920 1400 }
			alwaystransparent = yes

			portrait_texture = "[FrontEndMainView.GetSecondaryCharacterTexture('camera_main_menu_secondary', PdxGetWidgetScreenSize(PdxGuiWidget.Self), '(bool)yes'))]"
			mask = "gfx/portraits/portrait_mask_solid.dds"

			blockoverride "grayscale" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}
			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onrightclick" {}
			blockoverride "portrait_button_template_tooltip" {}
		}

		# Secondary child, sitting child version
		portrait_button = {
			name = "menu_portrait_left_sitting_child"
			visible = "[And(FrontEndMainView.ShowSecondaryCharacter , LessThanOrEqualTo_int32( FrontEndMainView.GetSecondaryCharacterAge, '(int32)1' ))]"
			parentanchor = center
			position = { 0 @frontend_portrait_y }
			using = portrait_base
			size = { 1920 1400 }
			alwaystransparent = yes

			portrait_texture = "[FrontEndMainView.GetSecondaryCharacterTexture('camera_main_menu_secondary_sitting_child', PdxGetWidgetScreenSize(PdxGuiWidget.Self), '(bool)yes'))]"
			mask = "gfx/portraits/portrait_mask_solid.dds"

			blockoverride "grayscale" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}
			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onrightclick" {}
			blockoverride "portrait_button_template_tooltip" {}
		}

		# Heir
		portrait_button = {
			name = "menu_portrait_right"
			visible = "[And( FrontEndMainView.ShowHeirCharacter, GreaterThan_int32( FrontEndMainView.GetHeirCharacterAge, '(int32)1' ) )]"
			parentanchor = center
			position = { 0 @frontend_portrait_y }
			using = portrait_base
			size = { 1920 1400 }
			alwaystransparent = yes

			portrait_texture = "[FrontEndMainView.GetHeirCharacterTexture('camera_main_menu_heir', PdxGetWidgetScreenSize(PdxGuiWidget.Self), '(bool)yes')]"
			mask = "gfx/portraits/portrait_mask_solid.dds"

			blockoverride "grayscale" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}
			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onrightclick" {}
			blockoverride "portrait_button_template_tooltip" {}
		}

		# Main Character
		portrait_button = {
			name = "menu_portrait_center"
			visible = "[GreaterThan_int32( FrontEndMainView.GetMainCharacterAge, '(int32)1' )]"
			parentanchor = center
			position = { 0 @frontend_portrait_y }
			using = portrait_base
			size = { 1920 1400 }
			alwaystransparent = yes

			portrait_texture = "[FrontEndMainView.GetMainCharacterTexture('camera_main_menu_main', PdxGetWidgetScreenSize(PdxGuiWidget.Self), '(bool)yes'))]"
			mask = "gfx/portraits/portrait_mask_solid.dds"

			blockoverride "grayscale" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}
			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onrightclick" {}
			blockoverride "portrait_button_template_tooltip" {}
		}

		# Main Character, sitting child version
		portrait_button = {
			name = "menu_portrait_center_sitting_child"
			visible = "[LessThanOrEqualTo_int32( FrontEndMainView.GetMainCharacterAge, '(int32)1' )]"
			parentanchor = center
			position = { 0 @frontend_portrait_y }
			using = portrait_base
			size = { 1920 1400 }
			alwaystransparent = yes

			portrait_texture = "[FrontEndMainView.GetMainCharacterTexture('camera_main_menu_main_sitting_child', PdxGetWidgetScreenSize(PdxGuiWidget.Self), '(bool)yes'))]"
			mask = "gfx/portraits/portrait_mask_solid.dds"

			blockoverride "grayscale" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}
			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onrightclick" {}
			blockoverride "portrait_button_template_tooltip" {}
		}

		# Heir, sitting child version
		portrait_button = {
			name = "menu_portrait_heir_sitting_child"
			visible = "[And( FrontEndMainView.ShowHeirCharacter, LessThanOrEqualTo_int32( FrontEndMainView.GetHeirCharacterAge, '(int32)1' ) )]"
			parentanchor = center
			position = { 0 @frontend_portrait_y_child }
			using = portrait_base
			size = { 1920 1400 }
			alwaystransparent = yes

			portrait_texture = "[FrontEndMainView.GetHeirCharacterTexture('camera_main_menu_heir_sitting_child', PdxGetWidgetScreenSize(PdxGuiWidget.Self), '(bool)yes')]"
			mask = "gfx/portraits/portrait_mask_solid.dds"

			blockoverride "grayscale" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}
			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onrightclick" {}
			blockoverride "portrait_button_template_tooltip" {}
		}
	}

	widget = {
		parentanchor = center
		size = { 1920 1080 }
		scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"

		icon = {
			name = "left_panel"
			parentanchor = left|vcenter
			position = { 200 -700 }
			size = { 500 915 }
			alpha = 0
			texture = "gfx/interface/frontend/frontend_main_menu_bg.dds"

			modify_texture = {
				texture = "gfx/interface/frontend/frontend_main_menu_bg_mask.dds"
				blend_mode = mask
			}

			modify_texture = {
				name = "glow_main"
				texture = "gfx/interface/frontend/frontend_main_menu_bg_glow.dds"
				blend_mode = colordodge
				alpha = 0
				translate_uv = { 0.29 -0.5 }
			}

			modify_texture = {
				name = "glow_continue"
				texture = "gfx/interface/frontend/frontend_main_menu_bg_button_glow.dds"
				blend_mode = colordodge
				translate_uv = { 0 -0.14 }
				alpha = 1
			}

			modify_texture = {
				name = "glow_new"
				texture = "gfx/interface/frontend/frontend_main_menu_bg_button_glow.dds"
				blend_mode = colordodge
				translate_uv = { 0 -0.07 }
				alpha = 0
			}

			modify_texture = {
				name = "glow_load"
				texture = "gfx/interface/frontend/frontend_main_menu_bg_button_glow.dds"
				blend_mode = colordodge
				translate_uv = { 0 -0.14 }
				alpha = 0
			}

			modify_texture = {
				name = "glow_host"
				texture = "gfx/interface/frontend/frontend_main_menu_bg_button_glow.dds"
				blend_mode = colordodge
				translate_uv = { 0 -0.28 }
				alpha = 0
			}

			modify_texture = {
				name = "glow_join"
				texture = "gfx/interface/frontend/frontend_main_menu_bg_button_glow.dds"
				blend_mode = colordodge
				translate_uv = { 0 -0.31 }
				alpha = 0
			}

			# modify_texture = {
			# 	name = "glow_exit"
			# 	texture = "gfx/interface/frontend/frontend_main_menu_bg_button_glow.dds"
			# 	blend_mode = colordodge
			# 	translate_uv = { 0 -0.41 }
			# 	alpha = 0
			# }

			@duration_button_enter = 0.1
			@duration_button_leave = 0.5

			# Continue
			state = {
				name = "main_menu_glow_continue_enter"
				duration = 0.05
				using = Animation_Curve_Default

				modify_texture = {
					name = "glow_continue"
					alpha = 1
				}
			}

			state = {
				name = "main_menu_glow_continue_leave"
				duration = @duration_button_leave
				using = Animation_Curve_Default

				modify_texture = {
					name = "glow_continue"
					alpha = 0
				}
			}

			# New
			state = {
				name = "main_menu_glow_new_enter"
				duration = @duration_button_enter
				using = Animation_Curve_Default

				modify_texture = {
					name = "glow_new"
					translate_uv = { 0 -0.07 }
					alpha = 1
				}
			}

			state = {
				name = "main_menu_glow_new_leave"
				duration = @duration_button_leave
				using = Animation_Curve_Default

				modify_texture = {
					name = "glow_new"
					translate_uv = { 0 -0.07 }
					alpha = 0
				}
			}

			# Load
			state = {
				name = "main_menu_glow_load_enter"
				duration = @duration_button_enter
				using = Animation_Curve_Default

				modify_texture = {
					name = "glow_load"
					translate_uv = { 0 -0.14 }
					alpha = 1
				}
			}

			state = {
				name = "main_menu_glow_load_leave"
				duration = @duration_button_leave
				using = Animation_Curve_Default

				modify_texture = {
					name = "glow_load"
					translate_uv = { 0 -0.14 }
					alpha = 0
				}
			}

			# Load
			state = {
				name = "main_menu_glow_host_enter"
				duration = @duration_button_enter
				using = Animation_Curve_Default

				modify_texture = {
					name = "glow_host"
					translate_uv = { 0 -0.28 }
					alpha = 1
				}
			}

			state = {
				name = "main_menu_glow_host_leave"
				duration = @duration_button_leave
				using = Animation_Curve_Default

				modify_texture = {
					name = "glow_host"
					translate_uv = { 0 -0.28 }
					alpha = 0
				}
			}

			# Load
			state = {
				name = "main_menu_glow_join_enter"
				duration = @duration_button_enter
				using = Animation_Curve_Default

				modify_texture = {
					name = "glow_join"
					translate_uv = { 0 -0.31 }
					alpha = 1
				}
			}

			state = {
				name = "main_menu_glow_join_leave"
				duration = @duration_button_leave
				using = Animation_Curve_Default

				modify_texture = {
					name = "glow_join"
					translate_uv = { 0 -0.31 }
					alpha = 0
				}
			}

			# Exit
			state = {
				name = "main_menu_glow_exit_enter"
				duration = 0.05
				using = Animation_Curve_Default

				modify_texture = {
					name = "glow_continue"
					translate_uv = { 0 -0.41 }
					alpha = 1
				}
			}

			state = {
				name = "main_menu_glow_exit_leave"
				duration = @duration_button_leave
				using = Animation_Curve_Default

				modify_texture = {
					name = "glow_continue"
					translate_uv = { 0 -0.41 }
					alpha = 0
				}
			}

			# Appear bounce animation
			state = {
				name = a
				next = b
				duration = 0.3
				trigger_on_create = yes
				position_y = -700
			}

			state = {
				name = b
				next = c
				duration = 0.15
				bezier = { 0.5 0 1 0.5 }

				position_y = 0
				alpha = 1
			}

			state = {
				name = c
				next = d
				duration = 0.1
				bezier = { 0 0.5 0.5 1 }

				position_y = -20
			}

			state = {
				name = d
				next = e
				duration = 0.1
				bezier = { 0.5 0 1 0.5 }

				position_y = 0
			}

			state = {
				name = e
				next = f
				duration = 0.05
				bezier = { 0 0.5 0.5 1 }

				position_y = -5
			}

			state = {
				name = f
				next = "glow_1"
				duration = 0.05
				bezier = { 0.5 0 1 0.5 }

				position_y = 0
			}

			# Main Glow Animation
			# state = {
			# 	name = "glow_1"
			# 	next = "glow_2"

			# 	modify_texture = {
			# 		name = "glow_main"
			# 		alpha = 0
			# 		translate_uv = { 0.29 -0.5 }
			# 	}

			# }

			state = {
				name = "glow_1"
				next = "glow_3"
				duration = 0.3

				modify_texture = {
					name = "glow_main"
					alpha = 0
					translate_uv = { 0.25 -0.22 }
				}
			}

			state = {
				name = "glow_3"
				next = "glow_4"
				duration = 0.5

				modify_texture = {
					name = "glow_main"
					alpha = 0.4
					translate_uv = { 0.19 -0.03 }
				}
			}

			state = {
				name = "glow_4"
				next = "glow_5"
				duration = 0.25

				modify_texture = {
					name = "glow_main"
					alpha = 0.8
					translate_uv = { 0.1 0.1 }
				}
			}

			state = {
				name = "glow_5"
				next = "glow_6"
				duration = 0.25

				modify_texture = {
					name = "glow_main"
					alpha = 0.5
					translate_uv = { 0.03 0.19 }
				}
			}

			state = {
				name = "glow_6"
				next = "glow_7"
				duration = 0.3

				modify_texture = {
					name = "glow_main"
					alpha = 0.2
					translate_uv = { -0.15 0.25 }
				}
			}

			state = {
				name = "glow_7"
				duration = 0.4

				modify_texture = {
					name = "glow_main"
					alpha = 0
					translate_uv = { -0.3 0.29 }
				}
			}

			# Continue Game
			state = {
				name = "main_menu_continue"
				duration = 0.4
				bezier = { 0.5 0 1 0.5 }
				delay = 0.4
				alpha = 0

				position_x = -100
			}

			icon = {
				size = { 100% 100% }
				texture = "gfx/interface/frontend/frontend_main_menu_frame.dds"
			}

			vbox = {
				datacontext = "[FrontEndMainView.AccessLoadView]"
				# margin = { 90 0 }
				margin_top = 180


				vbox = {
					margin_bottom = 0
					# margin_top = 90
					spacing = 10
					background = { using = Background_Area_Light }

					vbox = {
						spacing = 5

						# text_single = {
						# 	layoutpolicy_horizontal = expanding
						# 	margin_left = 5
						# 	text = "SINGLE_PLAYER"
						# 	default_format = "#weak;italic;glow_color:{0.1,0.1,0.1,1}"
						# }

						mod_version = { }

						button_frontend = {
							name = "continue_button"
							datacontext = "[FrontEndLoadView.GetContinueSave]"
							visible = "[FrontEndLoadView.CanDoContinue]"
							enabled = "[Not( SaveGameItem.HasMissingDLCs )]"
							onclick = "[PdxGuiTriggerAllAnimations('main_menu_continue')]"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
							shortcut = confirm

							state = {
								name = _mouse_hierarchy_enter
								on_start = "[PdxGuiInterruptAllAnimations('main_menu_glow_exit_leave')]"
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_continue_leave','main_menu_glow_continue_enter')]"
							}

							state = {
								name = _mouse_hierarchy_leave
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_continue_enter','main_menu_glow_continue_leave')]"
							}

							state = {
								name = "main_menu_continue"
								delay = 1.5
								on_finish = "[FrontEndLoadView.OnContinue]"
							}

							state = {
								name = _mouse_release
								on_start = "[FrontEndLoadView.PreContinueSaveCheck]"
							}

							text = ""
							# tooltip = FRONTEND_CONTINUE_TT

							flowcontainer = {
								resizeparent = yes
								direction = vertical
								ignoreinvisible = yes
								margin = { 10 10 }
								margin_top = 5
								minimumsize = { 310 -1 }

								text_single = {
									raw_text = "Continue, hotkey Enter."
									parentanchor = hcenter
									fontsize = 20
								}
								text_single = {
									parentanchor = hcenter
									raw_text = "Save: [SaveGameItem.GetName]."
									max_width = 300
									fontsize = 20
								}

								text_single = {
									parentanchor = hcenter
									raw_text = "LOAD_IRONMAN_TOOLTIP"
									visible = "[SaveGameItem.IsIronmanSave]"
								}

								text_single = {
									parentanchor = hcenter
									raw_text = "Missing DLCs, see tooltip."
									tooltip = "[SaveGameItem.GetMissingDLCInfo]"
									visible = "[SaveGameItem.HasMissingDLCs]"
								}
							}

						}

						button_frontend = {
							name = "new_game_button"
							# text = "NEW_GAME"

							onclick = "[FrontEndMainView.OnNewGame]"
							shortcut = pause

							state = {
								name = _mouse_hierarchy_enter
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_new_leave','main_menu_glow_new_enter')]"
							}

							state = {
								name = _mouse_hierarchy_leave
								on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_new_enter','main_menu_glow_new_leave')]"
							}

							text_single = {
								parentanchor = center
								raw_text = "Start new Game, hotkey Space."
								fontsize = 20
								align = nobaseline
							}
						}

						vbox = {
							button_frontend = {
								name = "load_game_button_disabled"
								visible = "[Not(FrontEndLoadView.CanDoContinue)]"
								enabled = no
								fontsize = 20

								text = "LOAD"
								default_format = "#weak"
								tooltip = FRONTEND_NO_CONTINUE_TT

							}

							button_frontend = {
								name = "load_game_button"
								visible = "[FrontEndLoadView.CanDoContinue]"
								# text = "LOAD"
								onclick = "[FrontEndMainView.OnLoad]"

								text_single = {
									fontsize = 20
									raw_text = "Load."
									parentanchor = center
									align = nobaseline
								}
								state = {
									name = _mouse_hierarchy_enter
									on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_load_leave','main_menu_glow_load_enter')]"
								}

								state = {
									name = _mouse_hierarchy_leave
									on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_load_enter','main_menu_glow_load_leave')]"
								}
							}
						}

						text_single = {
							raw_text = "Can't continue,"
							visible = "[Not(FrontEndLoadView.CanDoContinue)]"
						}

						flowcontainer = {
							visible = "[Not(FrontEndLoadView.CanDoContinue)]"
							text_single = {
								raw_text = "FRONTEND_NO_CONTINUE_TT"
							}
							dot = { }
						}
					}

					vbox = {
						text_single = {
							layoutpolicy_horizontal = expanding
							margin_left = 5
							text = "MULTI_PLAYER"
							default_format = "#weak;italic;glow_color:{0.1,0.1,0.1,1}"
						}

						spacer = {
							size = { 5 5 }
						}

						vbox = {
							visible = "[And( POPSStatusIsLoggedIn, Not( POPStatusIsUserNameEmpty ) )]"
							spacing = 5

							button_frontend = {
								name = "host_button"
								text = "HOST_GAME"
								fontsize = 20
								onclick = "[FrontEndMainView.OnHost]"
								onclick = "[RefreshIllustration]"
								enabled = "[JominiIsMultiplayerAccessible]"
								tooltip = "[JominiGetMultiplayerAccessibleString]"

								state = {
									name = _mouse_hierarchy_enter
									on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_leave','main_menu_glow_host_enter')]"
								}

								state = {
									name = _mouse_hierarchy_leave
									on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_enter','main_menu_glow_host_leave')]"
								}
							}

							button_frontend = {
								name = "join_button"
								text = "FRONTEND_JOIN_MULTIPLAYER"
								fontsize = 20
								onclick = "[FrontEndMainView.OnMultiPlayer]"
								onclick = "[RefreshIllustration]"
								enabled = "[JominiIsMultiplayerAccessible]"
								tooltip = "[JominiGetMultiplayerAccessibleString]"

								state = {
									name = _mouse_hierarchy_enter
									on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_leave','main_menu_glow_join_enter')]"
								}

								state = {
									name = _mouse_hierarchy_leave
									on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_enter','main_menu_glow_join_leave')]"
								}
							}
						}

						vbox = {
							visible = "[Or( Not( POPSStatusIsLoggedIn ), POPStatusIsUserNameEmpty )]"
							spacing = 5

							button_frontend = {
								name = "host_button"
								text = "HOST_GAME"
								default_format = "#weak"
								fontsize = 20
								onclick = "[FrontEndMainView.OnLogin]"
								tooltip = "[JominiGetMultiplayerAccessibleString]"

								state = {
									name = _mouse_hierarchy_enter
									on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_leave','main_menu_glow_host_enter')]"
								}

								state = {
									name = _mouse_hierarchy_leave
									on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_enter','main_menu_glow_host_leave')]"
								}

								icon_online_offline = {
									parentanchor = right|vcenter
									position = { -15 0 }
									frame = 2
								}
							}

							button_frontend = {
								name = "join_button"
								text = "FRONTEND_JOIN_MULTIPLAYER"
								default_format = "#weak"
								fontsize = 20
								onclick = "[FrontEndMainView.OnLogin]"
								tooltip = "[JominiGetMultiplayerAccessibleString]"

								state = {
									name = _mouse_hierarchy_enter
									on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_leave','main_menu_glow_join_enter')]"
								}

								state = {
									name = _mouse_hierarchy_leave
									on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_enter','main_menu_glow_join_leave')]"
								}

								icon_online_offline = {
									parentanchor = right|vcenter
									position = { -15 0 }
									frame = 2
								}
							}
						}
					}


					button_frontend = {
						name = "exit_game_button"
						visible = yes
						text = "EXIT_TO_DESKTOP"
						fontsize = 20
						onclick = "[FrontEndMainView.OnQuit]"

						state = {
							name = _mouse_hierarchy_enter
							on_start = "[PdxGuiInterruptAllAnimations('main_menu_glow_continue_leave')]"
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_exit_leave','main_menu_glow_exit_enter')]"
						}

						state = {
							name = _mouse_hierarchy_leave
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_exit_enter','main_menu_glow_exit_leave')]"
						}
					}
				}

				expand = {}

				hbox = {
					spacing = 10

					button_group = {
						onclick = "[OpenAchievements]"
						enabled = "[AreAchievementsAvailable]"
						tooltip = "[GetAchievementsAvailableString]"

						flowcontainer = {
							direction = vertical

							button_achievements = {
								name = "achievements"
								parentanchor = hcenter
								size = { 30 30 }
								alpha = 0.7
								enabled = "[AreAchievementsAvailable]"
							}

							text_single = {
								parentanchor = hcenter
								max_width = 80
								min_width = 80
								align = center
								fontsize = 13

								text = "ACHIEVEMENTS"
								default_format = "#low;glow_color:{0.1,0.1,0.1,1}"
							}
						}
					}

					button_group = {
						onclick = "[ToggleEncyclopedia]"

						flowcontainer = {
							direction = vertical

							button_encyclopedia = {
								parentanchor = hcenter
								size = { 30 30 }
								alpha = 0.7
							}

							text_single = {
								parentanchor = hcenter
								max_width = 80
								min_width = 80
								align = center
								fontsize = 13
								fontsize_min = 10

								text = "HEADING_ENCYCLOPEDIA"
								default_format = "#low;glow_color:{0.1,0.1,0.1,1}"
							}
						}
					}

					button_group = {
						onclick = "[FrontEndMainView.OnCredits]"

						flowcontainer = {
							direction = vertical

							button_credits = {
								parentanchor = hcenter
								size = { 25 25 }
								alpha = 0.7
							}

							text_single = {
								parentanchor = hcenter
								max_width = 80
								min_width = 80
								autoresize = yes
								align = center
								fontsize = 13

								text = "CREDITS"
								default_format = "#low;glow_color:{0.1,0.1,0.1,1}"
							}
						}
					}
				}

				hbox = {
					margin_top = 33
					margin_bottom = 92
					spacing = 20

					button_group = {
						onclick = "[FrontEndMainView.OnLogin]"

						flowcontainer = {
							spacing = 18

							pops_login_accountwidget = {
								parentanchor = vcenter
								size = { 25 25 }
								alpha = 0.7

								blockoverride "properties" {
									onclick = "[FrontEndMainView.OnLogin]"
								}
							}

							text_single = {
								parentanchor = vcenter
								max_width = 80
								min_width = 80
								fontsize = 13

								text = "ACCOUNT"
								default_format = "#clickable;glow_color:{0.1,0.1,0.1,1}"
								align = nobaseline
							}
						}
					}

					button_group = {
						onclick = "[FrontEndMainView.OnSettings]"

						flowcontainer = {
							spacing = 5

							button_settings = {
								name = "settings"
								parentanchor = vcenter
								size = { 25 25 }
								alpha = 0.7
							}

							text_single = {
								parentanchor = vcenter
								max_width = 80
								min_width = 60
								autoresize = yes
								fontsize = 13

								text = "SETTINGS"
								default_format = "#clickable;glow_color:{0.1,0.1,0.1,1}"
								align = nobaseline
							}
						}
					}
				}
			}
		}
	}

	hotkeys_window = {
		parentanchor = bottom
		position = { 750 -150 }
	}

	clickable_version_number = {

		parentanchor = bottom|right
		position = { -15 -15 }

		using = tooltip_se

		blockoverride "background"
		{

		}


	}

	error_horse = {
		visible = "[Not(ReleaseMode)]"
		parentanchor = bottom|right
		position = { -80 -90 }
	}
	loaded_mods_icon = {
		visible = "[And( HasLoadedMods, Not(ReleaseMode))]"
		parentanchor = bottom|right
		tooltip = "[GetLoadedMods]"
		position = { -120 -85 }
	}
}

