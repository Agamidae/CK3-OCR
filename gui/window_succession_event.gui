######################################################
################# SUCCESSION EVENT ###################
######################################################

window = {
	name = "succession_event_window"
	size = { 100% 100% }
	movable = no
	layer = confirmation
	alwaystransparent = yes
	using = TooltipFocus

	state = {
		name =_show
		on_finish = "[PdxGuiTriggerAllAnimations('ruler_transition_appear')]"
		on_start = "[GetVariableSystem.Clear( 'ruler_transition_remove_fade')]"
	}

	state = {
		name = ruler_transition_reset
		# delay = 0.15
		on_finish = "[SuccessionEventWindow.Close]"
	}

	button = {
		size = { 100% 100% }
		alpha = 0
		visible = "[Not(GetVariableSystem.Exists( 'ruler_transition_remove_fade'))]"

		state = {
			name = _show
			trigger_on_create = yes
			duration = 0.1
			alpha = 0.7
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Standard
		}

		state = {
			name = _mouse_click
			on_start = "[GetVariableSystem.Set( 'ruler_transition_remove_fade', 'true')]"
		}

		background = {
			using = Background_Area_Dark
			margin = { 20 20 }
		}
	}

	widget = {
		parentanchor = center
		position = { 0 0 }
		alpha = 1
		size = { 700 100% }
		filter_mouse = all
		alwaystransparent = no

		using = Window_Background_Subwindow

		state = {
			name = _hide
			position = { 0 -500 }
			alpha = 0
		}

		state = {
			name = ruler_transition_reset
			next = reset_position
			using = Animation_FadeOut_Standard
		}

		state = {
			name = reset_position
			position = { 0 -500 }
		}

		state = {
			name = ruler_transition_appear
			duration = 0.1
			trigger_on_create = yes

			start_sound = {
				soundeffect = "event:/SFX/UI/Character/sfx_ui_character_death"
			}
		}


		icon = {
			parentanchor = center
			size = { 200% 200% }
			alwaystransparent = yes
			texture = "gfx/interface/component_masks/mask_fade_circle.dds"
			color = { 0.1 0.1 0.1 1 }
			alpha = 0

			state = {
				name = ruler_transition_reset
				using = Animation_FadeOut_Standard
			}

			state = {
				name = ruler_transition_appear
				trigger_on_create = yes
				delay = 0.8
				using = Animation_Curve_Default
				alpha = 0.6
				duration = 1.4
			}

			state = {
				name = _hide
				using = Animation_Curve_Default
				duration = 3
				alpha = 0
			}
		}


		vbox = {
			using = Window_Margins
			layoutpolicy_horizontal = expanding
			error_button = {
				layoutpolicy_horizontal = expanding
			}

			vbox = {
				visible = "[SuccessionEventWindow.IsSuccession]"
				layoutpolicy_horizontal = expanding

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "[SuccessionEventWindow.GetHeader]."
				}

				vbox = {
					visible = "[SuccessionEventWindow.IsSuccessorTabOpen]"
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding

						### Center box
						vbox = {
							name = "center"
							datacontext = "[SuccessionEventWindow.GetDeadCharacter]"
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "And inherited the primary title."
								visible = "[ObjectsEqual(SuccessionEventWindow.GetPlayerHeir.GetPrimaryTitle, SuccessionEventWindow.GetDeadCharacter.GetPrimaryTitle)]"
							}

							hbox = {
							    layoutpolicy_horizontal = expanding

								visible = "[Not(ObjectsEqual(SuccessionEventWindow.GetPlayerHeir.GetPrimaryTitle, SuccessionEventWindow.GetDeadCharacter.GetPrimaryTitle))]"

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "Your primary title changed to [SuccessionEventWindow.GetPlayerHeir.GetPrimaryTitle.GetNameNoTooltip]."
								}

							    expand = { }
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								margin_top = 10
								spacing = 5

								text_multi = {
									name = "dead_description"
									autoresize = yes
									max_width = 650
									text = "[SuccessionEventWindow.GetDeadDesc]"
									visible = "[And(Not(SuccessionEventWindow.IsEndDateReached), Not(SuccessionEventWindow.GetDeadCharacter.IsAlive))]"
								}

								text_multi = {
									name = "heir_description"
									autoresize = yes
									max_width = 650
									text = "[SuccessionEventWindow.GetHeirDesc]"
									visible = "[Not(SuccessionEventWindow.IsEndDateReached)]"
								}

								text_multi = {
									name = "end_date_description"
									autoresize = yes
									max_width = 650
									text = "SUCCESSION_EVENT_WINDOW_END_DATE_DESC"
									visible = "[SuccessionEventWindow.IsEndDateReached]"
								}
							}
						}


						# Left Character
						vbox = {
							name = "left"
							layoutpolicy_horizontal = expanding
							datacontext = "[SuccessionEventWindow.GetDeadCharacterLegacy]"

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "Previous ruler,"
							}
							datacontext = "[SuccessionEventWindow.GetDeadCharacter]"

							button_text = {
								layoutpolicy_horizontal = expanding
								using = char_click
								blockoverride "text" {
									text = "LEGACY_NAME"
								}
								blockoverride "dot" { }
							}
							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[Localize('LEGACY_REIGN')]."
								tooltip = "LEGACY_REIGN_TT"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								margin_left = 3
								raw_text = "View legacy, tooltip."

								tooltipwidget = {
									container = {
										using = DefaultTooltipBackground
										alwaystransparent = no

										legacy_status_ocr = {
											margin = { 10 10 }
											layoutpolicy_horizontal = expanding
										}
									}
								}
							}


							spacer = {
								size = { 20 10 }
							}

							expand = {
								layoutpolicy_vertical = expanding
							}
						}

						### Right Character
						vbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding
								visible = "[SuccessionEventWindow.GetPlayerHeir.IsValid]"
								text = "LEGACY_CONTINUE_PLAYING"
							}

							vbox_heir_ocr = {
								layoutpolicy_horizontal = expanding
								name = "right"
								datacontext = "[SuccessionEventWindow.GetPlayerHeirLegacy]"
								visible = "[SuccessionEventWindow.GetPlayerHeir.IsValid]"
							}


							vbox = {
								layoutpolicy_horizontal = expanding
								margin_top = 5
								datacontext = "[SuccessionEventWindow.GetDeadCharacter.GetDynasty]"
								visible = "[Not(SuccessionEventWindow.GetPlayerHeir.IsValid)]"


								text_multi = {
									layoutpolicy_horizontal = expanding
									text = "SUCCESSION_NO_HEIR"
									visible = "[Not( SuccessionEventWindow.GetDeadCharacter.IsAlive )]"
									autoresize = yes
									max_width = 650
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "Dynasty."
								}

								text_multi = {
									layoutpolicy_horizontal = expanding
									text = "SUCCESSION_DYNASTY_INFO"
									autoresize = yes
									max_width = 650
									min_width = 650
								}
							}
						}
					}
				}
			}

			widget = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				scissor = yes

				state = {
					name = "ruler_transition_tab_switch"
					alpha = 0
					duration = 0.1
					next = "b"
					using = Animation_Curve_Default
				}

				state = {
					name = "b"
					alpha = 1
					duration = 0.1
					using = Animation_Curve_Default
				}

				vbox = {
					name = "top_lineage"
					visible = "[SuccessionEventWindow.IsLineage]"

					text_single = {
						text = "SUCCESSION_INHERITED_TITLES"
						default_format = "#light_background"
						align = left
						layoutpolicy_horizontal = expanding
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						fixedgridbox = {
							name = "inherited"
							datamodel = "[SuccessionEventWindow.GetInheritedTitles]"
							datamodel_wrap = 11
							addcolumn = 56
							addrow = 56
							flipdirection = yes

							item = {
								coa_title_small_crown = {
								}
							}
						}

						expand = { }
					}

					spacer = {
						size = { 5 5 }
					}

					hbox = {
						text_single = {
							name = "dynasty_name"
							text = "SUCCESSION_EVENT_WINDOW_HEADING_LINEAGE"
							default_format = "#high"
							using = Font_Type_Flavor
							align = center
							fontsize = 30
						}

						button_icon = {
							name = "close_button"
							shortcut = "close_window"
							tooltip = "CLOSE_TOOLTIP"
							texture = "gfx/interface/icons/flat_icons/window_close.dds"
							onclick = "[SuccessionEventWindow.Close]"
						}
					}

					divider_light = {
						layoutpolicy_horizontal = expanding
					}
				}

				widget = {
					size = { 100% 100% }

					state = {
						name = "ruler_transition_tab_switch"
						next = "left"
						position_x = -200
						duration = 0.1
						using = Animation_Transition_Start
					}

					state = {
						name = "left"
						next = "center"
						position_x = 200
						duration = 0
					}

					state = {
						name = "center"
						position_x = 0
						duration = 0.1
						using = Animation_Transition_End
					}


					### TITLES
					widget = {
						visible = "[SuccessionEventWindow.IsTitlesTabOpen]"
						size = { 100% 100% }

						hbox = {
							scrollbox = {
								name = "scrollbox_titles"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								blockoverride "scrollbox_background_fade" { }
								blockoverride "scrollbox_background" { }
								blockoverride "scrollbox_content" {

									vbox = {
										name = "titles"
										layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding
										margin = { 16 4 }
										spacing = 6

										text_single = {
											layoutpolicy_horizontal = expanding
											raw_text = "[GetDataModelSize(SuccessionEventWindow.GetInheritedTitles)] [Localize('SUCCESSION_INHERITED_TITLES')]."
										}

										background = {
											using = Background_Area_With_Header_Dark
										}

										hbox = {
											layoutpolicy_horizontal = expanding

											fixedgridbox = { # hbox doesn't work with datamodel_wrap
												name = "inherited"
												datamodel = "[SuccessionEventWindow.GetInheritedTitles]"
												addcolumn = 500
												addrow = 22

												item = {
													text_single = {
														raw_text = "[Title.GetNameNoTooltip],"
													}
												}
											}

											expand = { }
										}

										hbox = {
											visible = "[SuccessionEventWindow.HasLostTitles]"
											layoutpolicy_horizontal = expanding

											text_single = {
												text = "SUCCESSION_LOST_TITLES"
											}

											expand = { }
										}

										vbox = {
											name = "lost_titles"
											visible = "[And( SuccessionEventWindow.ShowLostTitles, SuccessionEventWindow.HasLostTitles )]"
											layoutpolicy_horizontal = expanding
											margin_top = 5

											vbox = {
												datamodel = "[SuccessionEventWindow.GetLostTitles]"
												layoutpolicy_horizontal = expanding

												item = {
													vbox = {
														layoutpolicy_horizontal = expanding

														char_name = {
															layoutpolicy_horizontal = expanding
															blockoverride "pre" {
																spacing = 3
																text_single = {
																	raw_text = "[GetDataModelSize(SuccessionEventWindowLostTitlesItem.GetTitles)] to"
																}
															}
															datacontext = "[SuccessionEventWindowLostTitlesItem.GetHeir]"
														}

														vbox = {
															layoutpolicy_horizontal = expanding
															datamodel = "[SuccessionEventWindowLostTitlesItem.GetTitles]"
															item = {
																text_single = {
																	layoutpolicy_horizontal = expanding
																	raw_text = "[Title.GetNameNoTooltip]."
																}
															}
														}
													}
												}
											}
										}

										expand = {
											layoutpolicy_vertical = expanding
										}
									}
								}
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						visible = "[SuccessionEventWindow.IsLineageTabOpen]"

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "Your lineage, [GetDataModelSize(SuccessionEventWindow.GetLegacy)] predecessors."
						}

						scrollbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							blockoverride "scrollbox_content" {

								vbox = {
									layoutpolicy_horizontal = expanding
									datamodel = "[SuccessionEventWindow.GetLegacy]"

									item = {
										vbox_legacy_item_ocr = {
											layoutpolicy_horizontal = expanding
										}
									}
								}

								vbox_current_lineage_ocr = {
									layoutpolicy_horizontal = expanding
									visible = "[SuccessionEventWindow.GetPlayerHeir.IsValid]"
									datacontext = "[SuccessionEventWindow.GetPlayerHeirLegacy]"
								}
							}
						}
					}
				}
			}

			vbox = {
				visible = "[SuccessionEventWindow.IsSuccession]"
				layoutpolicy_horizontal = expanding

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Tabs."
				}

				button_text = {
					shortcut = speed_1
					layoutpolicy_horizontal = expanding
					down = "[SuccessionEventWindow.IsSuccessorTabOpen]"
					onclick = "[PdxGuiTriggerAllAnimations('ruler_transition_tab_switch')]"

					state = {
						name = _mouse_click
						delay = 0.1
						on_finish = "[SuccessionEventWindow.OpenSuccessorTab]"
					}

					blockoverride "pre" {
						spacing = 3
						text_single = {
							raw_text = "Selected,"
							visible = "[SuccessionEventWindow.IsSuccessorTabOpen]"
						}
						text_single = {
							raw_text = "1,"
						}
						text_single = {
							raw_text = "SUCCESSION_SUCCESSOR_TAB_TT"
						}
					}
				}

				button_text = {
					shortcut = speed_2
					layoutpolicy_horizontal = expanding
					down = "[SuccessionEventWindow.IsTitlesTabOpen]"
					visible = "[DataModelHasItems( SuccessionEventWindow.GetInheritedTitles )]"
					onclick = "[PdxGuiTriggerAllAnimations('ruler_transition_tab_switch')]"
					state = {
						name = _mouse_click
						delay = 0.1
						on_finish = "[SuccessionEventWindow.OpenTitlesTab]"
					}

					blockoverride "pre" {
						spacing = 3
						text_single = {
							raw_text = "Selected,"
							visible = "[SuccessionEventWindow.IsTitlesTabOpen]"
						}
						text_single = {
							raw_text = "2,"
						}
						text_single = {
							raw_text = "SUCCESSION_TITLES_TAB_TT"
						}
					}
				}

				button_text = {
					shortcut = speed_3
					layoutpolicy_horizontal = expanding
					down = "[SuccessionEventWindow.IsLineageTabOpen]"
					onclick = "[PdxGuiTriggerAllAnimations('ruler_transition_tab_switch')]"

					state = {
						name = _mouse_click
						delay = 0.1
						on_finish = "[SuccessionEventWindow.OpenLineageTab]"
					}

					blockoverride "pre" {
						spacing = 3
						text_single = {
							raw_text = "Selected,"
							visible = "[SuccessionEventWindow.IsLineageTabOpen]"
						}
						text_single = {
							raw_text = "3,"
						}
						text_single = {
							raw_text = "SUCCESSION_LINEAGE_TAB_TT"
						}
					}
				}
			}

			hbox = {
				name = "bottom"
				visible = "[SuccessionEventWindow.IsSuccession]"
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_horizontal = expanding

					button_primary_text = {
						layoutpolicy_horizontal = expanding
						name = "close_button"
						visible = "[SuccessionEventWindow.GetPlayerHeir.IsValid]"
						onclick = "[PdxGuiTriggerAllAnimations('ruler_transition_reset')]"
						blockoverride "text" {
							text = "SUCCESSION_EVENT_WINDOW_CLOSE"
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						name = "observer_button"
						visible = "[And( Not(SuccessionEventWindow.GetPlayerHeir.IsValid), SuccessionEventWindow.CanChangeCharacter)]"
						blockoverride "text" {
							text = "SUCCESSION_EVENT_WINDOW_OBSERVER"
						}
						onclick = "[SuccessionEventWindow.GoToObserver]"
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						name = "change_button"
						visible = "[And( Not(SuccessionEventWindow.GetPlayerHeir.IsValid), SuccessionEventWindow.CanChangeCharacter)]"
						blockoverride "text" {
							text = "SUCCESSION_EVENT_WINDOW_CHANGE_CHARACTER"
						}
						onclick = "[SuccessionEventWindow.ChooseNewCharacter]"
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						name = "menu_button"
						visible = "[Not(SuccessionEventWindow.GetPlayerHeir.IsValid)]"
						blockoverride "text" {
							text = "[SuccessionEventWindow.GetExitName]"
						}
						tooltip = "[SuccessionEventWindow.GetExitTooltip]"
						onclick = "[SuccessionEventWindow.GoToMenu]"
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types Legacy
{
	type tree_background = background {
		texture = "gfx/interface/window_ruler_transition/illustration_tree.dds"
		margin = { -35 -50 }
		fittype = centercrop
		spriteType = corneredTiled
		spriteborder = { 30 0 }
		alpha = 0.8

		using = Mask_Rough_Edges

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_brushed.dds"
			blend_mode = alphamultiply
		}

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_fade_halfcircle_inverted.dds"
			blend_mode = alphamultiply
			alpha = 0.6
		}

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
			blend_mode = alphamultiply
			alpha = 0.3
		}

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
			blend_mode = alphamultiply
			alpha = 0.4
		}
	}

	type vbox_dynasty = vbox {
		spacing = 20
		spacer = {
			size = { 240 0 }
		}

		coa_dynasty_huge = { }

		text_label_center = {
			text = "SUCCESSION_DYNASTY_INFO"
			autoresize = yes
			max_width = 200
			min_width = 200
		}
		text_multi = {
			text = "SUCCESSION_NO_HEIR"
			visible = "[Not( SuccessionEventWindow.GetDeadCharacter.IsAlive )]"
			autoresize = yes
			max_width = 220
			align = center
		}

		expand = {
			layoutpolicy_vertical = expanding
		}
	}

	type vbox_heir = vbox {
		margin_bottom = 5

		widget = {
			size = { 250 340 }

			portrait_body = {
				datacontext = "[SuccessionEventWindow.GetPlayerHeir]"
				blockoverride "status_icons" { }
				blockoverride "opinion_box" { }
				blockoverride "coa" { }
				blockoverride "dead_icon" { }
				scale = 1.2
			}
		}

		spacer = {
			size = { 20 10 }
		}

		hbox_legacy_status = { }

		text_single = {
			layoutpolicy_horizontal = expanding
			autoresize = no
			text = "LEGACY_NAME"
			default_format = "#high"
			align = center
		}

		text_single = {
			text = "[SuccessionEventWindow.GetPlayerHeir.GetSuccessionRelation( SuccessionEventWindow.GetDeadCharacter)]"
		}

		spacer = {
			size = { 20 10 }
		}

		text_label_center = {
			visible = "[SuccessionEventWindow.GetPlayerHeir.IsAtWar]"
			text = "LEGACY_IS_AT_WAR"
		}

		text_label_center = {
			visible = "[Not(SuccessionEventWindow.GetPlayerHeir.GetPlayerHeir.IsValid)]"
			text = "LEGACY_NO_HEIR"
		}

		expand = { }
	}

	type vbox_heir_ocr = vbox {

		button_text = {
			layoutpolicy_horizontal = expanding
			using = char_click
		    blockoverride "text" {
		        raw_text = "LEGACY_NAME"
		    }
			blockoverride "dot" { }
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			raw_text = "[SuccessionEventWindow.GetPlayerHeir.GetSuccessionRelation( SuccessionEventWindow.GetDeadCharacter)]."
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			margin_left = 3
			raw_text = "View legacy, tooltip."

			tooltipwidget = {
				container = {
					using = DefaultTooltipBackground
					alwaystransparent = no

					legacy_status_ocr = {
						margin = { 10 10 }
						layoutpolicy_horizontal = expanding
					}
				}
			}
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			visible = "[SuccessionEventWindow.GetPlayerHeir.IsAtWar]"
			text = "LEGACY_IS_AT_WAR"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(SuccessionEventWindow.GetPlayerHeir.GetPlayerHeir.IsValid)]"
			text = "LEGACY_NO_HEIR"
		}

		expand = { }
	}

	type vbox_current_lineage = vbox {
		datacontext = "[SuccessionEventWindow.GetPlayerHeir]"

		portrait_body = {
			blockoverride "status_icons" { }
			blockoverride "opinion_box" { }
			blockoverride "coa" { }
			blockoverride "dead_icon" { }

			blockoverride "portrait_button"
			{
				size = { 300 444 }
			}

			blockoverride "portrait_glow" { }
		}

		hbox_legacy_status = { }

		text_single = {
			text = "LEGACY_NAME"
			default_Format = "#high"
		}

		text_single = {
			text = "LEGACY_LINEAGE_YOU"
		}
	}

	type vbox_current_lineage_ocr = vbox {
		datacontext = "[SuccessionEventWindow.GetPlayerHeir]"


		text_single = {
			layoutpolicy_horizontal = expanding
			text = "LEGACY_NAME"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			text = "LEGACY_LINEAGE_YOU"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			margin_left = 3
			raw_text = "View legacy, tooltip."

			tooltipwidget = {
				container = {
					using = DefaultTooltipBackground
					alwaystransparent = no

					legacy_status_ocr = {
						margin = { 10 10 }
						layoutpolicy_horizontal = expanding
					}
				}
			}
		}
	}

	type hbox_legacy_status = hbox {
		spacing = 2

		icon = {
			datacontext = "[LegacyItem.GetCharacter]"
			visible = "[Not(Character.IsAlive)]"
			name = "death"
			size = { 24 24 }
			tooltip = "CHARACTER_DEAD_TOOLTIP"
			texture = "[Character.GetDeathReasonIcon]"
			using = tooltip_se
		}

		widget = {
			visible = "[LegacyItem.GetFoundedHouse.IsValid]"
			name = "house"
			size = { 24 24 }
			tooltip = "LEGACY_FOUNDED_HOUSE"
			using = tooltip_se

			coa_house_microscopic = {
				datacontext = "[LegacyItem.GetFoundedHouse]"
				blockoverride "coa_button" { }
			}
		}

		icon = {
			visible = "[LegacyItem.GetFoundedFaith.IsValid]"
			name = "faith"
			size = { 24 24 }
			texture = "[LegacyItem.GetFoundedFaith.GetIcon]"
			tooltip = "LEGACY_FOUNDED_FAITH"
			using = tooltip_se
		}

		icon = {
			visible = "[And(LegacyItem.GetCharacter.IsAlive, LegacyItem.WasCulturalHead)]"
			name = "cultural_head"
			size = { 24 24 }
			texture = "gfx/interface/icons/icon_culture.dds"
			tooltip = "LEGACY_CULTURAL_HEAD"
			using = tooltip_se
		}

		icon = {
			visible = "[And(Not(LegacyItem.GetCharacter.IsAlive), LegacyItem.WasCulturalHead)]"
			name = "cultural_head_dead"
			size = { 24 24 }
			texture = "gfx/interface/icons/icon_culture.dds"
			tooltip = "LEGACY_CULTURAL_HEAD_DEAD"
			using = tooltip_se
		}

		icon = {
			visible = "[GreaterThanOrEqualTo_CFixedPoint(LegacyItem.GetDread, GetDefine('NCharacter', 'BOLD_LEVEL_INTIMIDATED') )]"
			name = "dreaded"
			size = { 24 24 }
			texture = "gfx/interface/icons/icon_dread.dds"
			tooltip = "LEGACY_DREADED"
			using = tooltip_se
		}

		icon = {
			name = "renowned"
			size = { 24 24 }
			texture = "[GetPrestigeLevelIcon(LegacyItem.GetPrestigeLevel)]"
			tooltip = "LEGACY_RENOWNED"
			using = tooltip_se
		}


		icon = {
			name = "pious"
			size = { 24 24 }
			texture = "[GetPietyLevelIcon(LegacyItem.GetPietyLevel)]"
			tooltip = "LEGACY_PIOUS"
			using = tooltip_se
		}

		icon = {
			name = "lifestyle"
			visible = "[LegacyItem.GetLifestyle.IsValid]"
			size = { 24 24 }
			texture = "[LegacyItem.GetLifestyle.GetIcon]"
			framesize = { 160 160 }

			tooltip = "LEGACY_LIFESTYLE"
			using = tooltip_se

		}

		icon = {
			name = "wars"
			visible = "[LegacyItem.HasFoughtInWar]"
			size = { 24 24 }
			texture = "gfx/interface/icons/character_interactions/declare_war_interaction.dds"
			tooltip = "LEGACY_WARS"
			using = tooltip_se
		}
	}

	type vbox_legacy_item = vbox {
		datacontext = "[LegacyItem.GetCharacter]"
		layoutpolicy_vertical = expanding

		portrait_body = {
			blockoverride "status_icons" { }
			blockoverride "opinion_box" { }
			blockoverride "coa" { }
			blockoverride "dead_icon" { }

			blockoverride "portrait_button"
			{
				size = { 300 444 }
			}
		}

		hbox_legacy_status = { }

		text_single = {
			text = "LEGACY_NAME"
			default_Format = "#high"
		}

		text_single = {
			text = "LEGACY_REIGN"
			tooltip = "LEGACY_REIGN_TT"
		}
	}

	type vbox_legacy_item_ocr = vbox {
		datacontext = "[LegacyItem.GetCharacter]"
		text_single = {
			layoutpolicy_horizontal = expanding
			text = "LEGACY_NAME"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			text = "LEGACY_REIGN"
			tooltip = "LEGACY_REIGN_TT"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			margin_left = 3
			raw_text = "View legacy, tooltip."
			tooltipwidget = {
				container = {
					using = DefaultTooltipBackground
					alwaystransparent = no

					legacy_status_ocr = {
						margin = { 10 10 }
						layoutpolicy_horizontal = expanding
					}
				}
			}
		}
	}

	type legacy_status_ocr = flowcontainer {

		ignoreinvisible = yes
		direction = vertical
		text_single = {
			datacontext = "[LegacyItem.GetCharacter]"
			visible = "[Not(Character.IsAlive)]"
			raw_text = "[Localize('CHARACTER_DEAD_TOOLTIP')]."
		}

		text_single = {
			visible = "[LegacyItem.GetFoundedHouse.IsValid]"
			text = "LEGACY_FOUNDED_HOUSE"
		}

		text_single = {
			visible = "[LegacyItem.GetFoundedFaith.IsValid]"
			text = "LEGACY_FOUNDED_FAITH"
		}

		text_single = {
			visible = "[And(LegacyItem.GetCharacter.IsAlive, LegacyItem.WasCulturalHead)]"
			text = "LEGACY_CULTURAL_HEAD"
		}

		text_single = {
			visible = "[And(Not(LegacyItem.GetCharacter.IsAlive), LegacyItem.WasCulturalHead)]"
			text = "LEGACY_CULTURAL_HEAD_DEAD"
		}

		text_single = {
			visible = "[GreaterThanOrEqualTo_CFixedPoint(LegacyItem.GetDread, GetDefine('NCharacter', 'BOLD_LEVEL_INTIMIDATED') )]"
			text = "LEGACY_DREADED"
		}

		text_single = {
			raw_text = "[Localize('LEGACY_RENOWNED')]."
		}

		text_single = {
			raw_text = "[Localize('LEGACY_PIOUS')]."
		}

		text_single = {
			visible = "[LegacyItem.GetLifestyle.IsValid]"
			text = "LEGACY_LIFESTYLE"
		}

		text_single = {
			visible = "[LegacyItem.HasFoughtInWar]"
			text = "LEGACY_WARS"
		}
	}
}