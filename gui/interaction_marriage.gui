
######################################################
############### MARRIAGE INTERACTION #################
######################################################

window = {
	name = "marriage_interaction_window"
	datacontext = "[MarriageInteractionWindow.GetBaseWindow]"
	datacontext = "[MatchmakerInteractionWindow.GetCharacterInteractionConfirmationWindow]"
	position = { 0 0 }
	allow_outside = yes
	layer = top

	using = Window_Size_CharacterList
	using = Window_Background_No_Edge

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	vbox = {
		using = Window_Margins
		margin_top = 10

		hbox = {
			layoutpolicy_horizontal = expanding

			header_pattern_interaction = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{

				}

				blockoverride "button_close"
				{
					onclick = "[MatchmakerInteractionWindow.Close]"

				}

				blockoverride "button_back"
				{
					size = { 0 0 }
					visible = "[MarriageInteractionWindow.CanClear]"
					onclick = "[MatchmakerInteractionWindow.OnClear]"
					tooltip = "CLEAR_MARRIED_CHARACTERS"
				}
				datacontext = "[MarriageInteractionWindow.GetMarriageInfo]"

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "[CharacterInteractionConfirmationWindow.GetSendName][AddTextIf(MarriageInfo.IsMatrilineal, ', Matrilineal')]."
				}
			}
		}

		vbox = {
			visible = "[MatchmakerInteractionWindow.HasPickedCharacters]"
			datacontext = "[MarriageInteractionWindow.GetMarriageInfo]"
			layoutpolicy_horizontal = expanding

			widget = {
				size = { 0 5 }
			}

			text_multi = {
				name = "marriage_info"
				minimumsize = { 650 -1 }
				maximumsize = { 650 -1 }
				autoresize = yes
				text = "MARRIAGE_INFO"
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				datacontext = "[MarriageInfo.GetBaseOffer]"

				visible = "[Not( MatchOffer.IsSameSex )]"

				text_multi = {
					name = "matrilineal_desc"
					layoutpolicy_horizontal = expanding
					max_width = 630
					min_width = 630
					autoresize = yes
					text = "[MarriageInfo.GetMatrilinealDesc]"
				}

				text_single = {
					name = "inbreeding_risk"
					visible = "[MatchOffer.HasInbreedingRisk]"
					max_width = 630
					min_width = 630
					text = "MATCH_OFFER_INBREEDING_WARNING"
					default_format = "#low"
				}
			}

		}

		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[MatchmakerInteractionWindow.HasPickedCharacters]"

			### Send offer info
			vbox_arrangement_interaction_send_offer = {
				layoutpolicy_horizontal = expanding

				blockoverride "button_content" {
					name = "tutorial_highlight_send_proposal_button"
					text = "send_marriage_proposal_button_name"
				}
			}

			vbox = {
				visible = "[CharacterInteractionConfirmationWindow.HasCost]"
				tooltip = "[CharacterInteractionConfirmationWindow.GetCostTooltip]"

				text_single = {
					margin_bottom = 10
					text = "INTERACTION_COST_MARRIAGE"
				}
			}
		}

		widget_character_interaction_four_characters = {
			layoutpolicy_horizontal = expanding

			blockoverride "bg_illustration_datacontext"
			{
				datacontext = "[GetIllustration( 'religion_interior' )]"
			}

			blockoverride "bg_illustration"
			{
				texture = "[Illustration.GetTexture( CharacterInteractionConfirmationWindow.GetActor )]"
				alpha = 0.1
			}

			blockoverride "left_small_portrait"
			{
				datacontext = "[CharacterInteractionConfirmationWindow.GetActor]"
				visible = "[And( Character.IsValid, Not( ObjectsEqual( Character.Self, MatchmakerInteractionWindow.GetActorToMatch ) ) )]"
			}

			blockoverride "left_portrait"
			{
				datacontext = "[MatchmakerInteractionWindow.GetActorToMatch]"
			}

			blockoverride "left_interaction_portrait_glow"
			{
				visible = "[MatchmakerInteractionWindow.IsPickingSecondaryActor]"
			}

			blockoverride "right_small_portrait"
			{
				datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
				visible = "[And( Character.IsValid, Not( ObjectsEqual( Character.Self, MatchmakerInteractionWindow.GetRecipientToMatch ) ) )]"
			}

			blockoverride "right_portrait"
			{
				datacontext = "[MatchmakerInteractionWindow.GetRecipientToMatch]"
			}

			blockoverride "right_character_label"
			{
				raw_text = "[Localize('INTERACTION_SPOUSE')],"
			}

			blockoverride "right_interaction_portrait_glow"
			{
				visible = "[MatchmakerInteractionWindow.IsPickingSecondaryRecipient]"
			}

			blockoverride "button_left_change"
			{
				visible = "[MatchmakerInteractionWindow.CanChangeActorCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertActorCharacter]"
			}

			blockoverride "button_left_revert"
			{
				visible = "[MatchmakerInteractionWindow.CanRevertActorCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertActorCharacter]"
			}

			blockoverride "button_right_change"
			{
				visible = "[MatchmakerInteractionWindow.CanChangeRecipientCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertRecipientCharacter]"
			}

			blockoverride "button_right_revert"
			{
				visible = "[MatchmakerInteractionWindow.CanRevertRecipientCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertRecipientCharacter]"
			}

			blockoverride "button_clear"
			{
				visible = "[MarriageInteractionWindow.CanClear]"
				onclick = "[MatchmakerInteractionWindow.OnClear]"
			}
		}

		vbox = {
			name = "marriage_info_and_send_offer"
			visible = "[MatchmakerInteractionWindow.HasPickedCharacters]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			scrollbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				blockoverride = "scrollbox_content"
				{
					## Info about marriage after picking characters
					name = "info_about_marriage"

					vbox = {
						datacontext = "[MarriageInteractionWindow.GetMarriageInfo]"
						layoutpolicy_horizontal = expanding
						margin = { 10 10 }
						spacing = 10

						vbox_marriage_interaction_marriage_details = {
							datacontext = "[MarriageInfo.GetBaseOffer]"
							layoutpolicy_horizontal = expanding
						}
					}
				}
			}
		}

		### Character List
		vbox = {
			name = "character_list"
			visible = "[Not(MatchmakerInteractionWindow.HasPickedCharacters)]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			spacing = 5

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 8
				margin_left = 17
				# margin_right = 130
				# margin_top = 3
				ignoreinvisible = no

				button_checked_text = {
					datacontext = "[MarriageInteractionWindow.GetMarriageInfo]"
					onclick = "[MarriageInfo.ToggleMatrilineal]"
					tooltip = "MARRIAGE_MATRILINEAL_TOGGLE_TOOLTIP"

					blockoverride "visible"
					{
						visible = "[Not(MarriageInfo.IsMatrilineal)]"
					}

					blockoverride "text"
					{
						text = "MARRIAGE_MATRILINEAL_TOGGLE"
					}
				}

				expand = { }

				# text_single = {
				# 	visible = "[Or( MatchmakerInteractionWindow.GetCharacterList.HasItems, MatchmakerInteractionWindow.HasTopCharacterItem )]"
				# 	layoutpolicy_horizontal = expanding
				# 	text = "[MarriageInteractionWindow.GetPrompt]"
				#
				# 	align = center
				# 	autoresize = no
				# }
			}

			vbox_character_list = {
				datacontext = "[MatchmakerInteractionWindow.GetCharacterList]"
				datacontext = "[CharacterSelectionList.GetFilterWithDefault('fertility_filter', '(int32)1')]"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				blockoverride "count_extra" {
					text_single = {
						raw_text = " Left-click to select a character, right-click to view them."
						align = left
					}
				}

				blockoverride "container_implementation" {
					fixedgridbox = {
						addcolumn = 650
						addrow = 65
						name = "characters_grid"
						datamodel_reuse_widgets = yes

						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"

						item = {
							widget_character_list_item_finder = {
								size = { 650 70 }
								blockoverride "small_traits" { }
								blockoverride "click" {
									onclick = "[CharacterListItem.OnClick('character')]"
									onrightclick = "[DefaultOnCharacterClick(CharacterListItem.GetCharacter.GetID)]"
									enabled = "[CharacterListItem.IsSelectable]"
								}
								blockoverride "expand_traits" {
									flowcontainer = {
										spacing = 2
										name = "traits_grid"
										datamodel = "[CharacterListItem.GetTraits]"
										ignoreinvisible = yes
										righttoleft = yes
										# layoutpolicy_horizontal = expanding

										item = {
											widget = {
												tooltip = "trait_tooltip"

												text_single = {
													resizeparent = yes
													margin_left = 3
													margin_top = 1
													visible = "[Trait.IsValid]"
													datacontext = "[Character.GetFaith]"
													raw_text = "[Trait.GetNameNoTooltip(Character.Self)][AddTextIf(Faith.IsTraitVirtue( Trait.Self ), ' (virtue)')][AddTextIf(Faith.IsTraitSin( Trait.Self ), ' (sin)')][AddTextIf(Trait.IsInheritable, ' (inheritable)')],"
												}
											}
										}
									}
								}
							}
						}
					}

					blockoverride "bottom_middle_box" {
						hbox = {
							name = "alliances_grid"
							datamodel = "[CharacterListItem.GetOtherCharacterItems]"
							margin_right = 3

							item = {
								button_text = {
									using = char_click
								    blockoverride "text" {
								        raw_text = "Alliance with [Character.GetPrimaryTitle.GetNameNoTierNoTooltip], [Character.GetMaxMilitaryStrength|0] men."
								    }
								}
							}
						}
					}
				}

				blockoverride "scrollbox_empty_visibility"
				{
					layoutpolicy_vertical = expanding
					visible = "[And( IsDataModelEmpty( CharacterSelectionList.GetList ), Not( MatchmakerInteractionWindow.HasTopCharacterItem ) )]"
					text = "NO_CHARACTERS_TO_SELECT"
				}

				blockoverride "special_character" {
					vbox = {
						datacontext = "[MatchmakerInteractionWindow.GetTopCharacterItem]"
						visible = "[MatchmakerInteractionWindow.HasTopCharacterItem]"
						layoutpolicy_horizontal = expanding

						widget_character_list_item = {
							layoutpolicy_horizontal = expanding
						}
					}
				}
			}
		}
	}

	window_character_filter = {
		layer = top
		name = "filter_window"
		datacontext = "[MatchmakerInteractionWindow.GetCharacterList]"
		size = { 600 100% }
		blockoverride "addition_filter" {
			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('age_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('age_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('age_diff_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('adult_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('personal_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('fertility_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('health_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('trait_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('sexuality_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('gender_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('politics_filter_category')]"

				blockoverride "filters" {

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('alliance_filter')]"
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('prestige_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('claim_filter')]"
					}
				}
			}
		}
	}
}
