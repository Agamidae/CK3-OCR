######################################################
##################### MY REALM #######################
######################################################

window = {
	name = "my_realm_window"
	datacontext = "[GetVariableSystem]"
	datacontext = "[GetPlayer]"
	parentanchor = top|right
	allow_outside = yes
	movable = no
	layer = windows_layer

	using = Window_Size_MainTab

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
	}

	state = {
		name = dismiss
		next = _hide

		trigger_when = "[GetVariableSystem.Exists( 'hide_right_windows' )]"
	}

	margin_widget = {
		visible = "[Not(GetVariableSystem.Exists('ocr'))]"
		size = { 100% 100% }
		# margin = { 0 26 }
		margin_right = 13

		widget = {
			size = { 100% 100% }

			### WINDOW CONTENT
			vbox = {
				using = Window_Margins

				button_close = {
					onclick = "[MyRealmWindow.Close]"
					shortcut = close_window

				}

				vbox = {
					layoutpolicy_horizontal = expanding
					#margin_bottom = 5

					hbox = {
						layoutpolicy_horizontal = expanding
						# spacing = 20

						text_single = {
							text = "[GetPlayer.GetPrimaryTitle.GetNameNoTooltip|U]"
							tooltip = "[Character.GetDefaultRealmFlagTooltip]"
						}

						text_single = {
							raw_text = ",  "
						}

						text_single = {
							name = "realm_type"
							text = "MY_REALM_WINDOW_TYPE"
						}

						text_single = {
							raw_text = ",  "
						}

						text_single = {
							text = "REALM_WINDOW_SIZE"
							tooltip = "REALM_WINDOW_SIZE_TT"
						}

						expand = { }
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						# margin_top = 10

						hbox = {
							name = "crown_authority"
							datamodel = "[MyRealmWindow.GetRealmLaws]"
							ignoreinvisible = yes
							margin_top = 5

							layoutpolicy_horizontal = expanding
							# margin_left = 10

							item = {
								vbox = {
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding
									datacontext = "[GuiLawGroup.GetLawGroup]"
									visible = "[And( GuiLawGroup.GetLawGroup.HasFlag( 'realm_law' ), GuiLawGroup.IsAvailable )]"
									ignoreinvisible = yes
									spacing = 3

									button_text = {
										layoutpolicy_horizontal = expanding
										blockoverride "text" {
											raw_text = "[Select_CString(GetVariableSystem.Exists('crown_law'), 'Click to show', 'Showing')] [LawGroup.GetName].[Select_CString(GetVariableSystem.Exists('crown_law'), '', ' Click to hide.')]"
											alwaystransparent = yes
										}
										onclick = "[GetVariableSystem.Toggle('crown_law')]"
									}

									flowcontainer = {
										visible = "[Not(GetVariableSystem.Exists('crown_law'))]"
										layoutpolicy_horizontal = expanding
										direction = vertical
										datamodel = "[GuiLawGroup.GetLaws]"

										item = {
											button_text = {
												datacontext = "[GuiLaw.GetLaw]"
												blockoverride "pre" {
													text_single = {
														raw_text = "Switch to  "
														align = nobaseline
														visible = "[GuiLaw.CanEnact]"
													}
													text_single = {
														raw_text = "Current:  "
														align = nobaseline
														visible = "[GuiLaw.IsEnacted]"
													}
												}
												blockoverride "text" {
													raw_text = "[GuiLaw.GetLaw.GetNameNoTooltip]"
												}

												blockoverride "dot_nb" {
													# visible = "[GuiLaw.IsEnacted]"
												}
												enabled = "[GuiLaw.CanEnact]"
												onclick = "[GuiLaw.Enact]"

												blockoverride "disabled" {
													visible = "[And(Not(GuiLaw.CanEnact), Not(GuiLaw.IsEnacted))]"
													align = nobaseline
												}
												tooltipwidget = { pass_law_tooltip = { } }
											}
										}
									}
								}
							}
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							datacontext = "[MyRealmWindow.GetCharacter.GetLiege]"
							visible = "[GetPlayer.HasLiege]"
							datacontext = "[Character.GetActiveLawInGroupWithFlag( 'realm_law' )]"
							raw_text = "Liege's authority: [Law.GetName]."
						}
					}
				}

				flowcontainer = {
					name = "vassals_succession_tabs"
					layoutpolicy_horizontal = expanding
					spacing = 2

					button_text = {
						onclick = "[MyRealmWindow.ShowDomain]"
						blockoverride "extra" {
							text_single = {
								raw_text = " tab 1"
							}
							text_single = {
								raw_text = ", selected"
								visible = "[MyRealmWindow.IsShowingDomain]"
							}
							dot = { }
						}
					    blockoverride "text" {
					        text = "MY_REALM_WINDOW_DOMAIN_TAB"
							align = left
					    }
						shortcut = speed_1
					}

					button_text = {
						onclick = "[MyRealmWindow.ShowVassals]"
						blockoverride "extra" {
							text_single = {
								raw_text = " tab 2"
							}
							text_single = {
								raw_text = ", selected"
								visible = "[MyRealmWindow.IsShowingVassals]"
							}
							dot = { }
						}
					    blockoverride "text" {
					        text = "MY_REALM_WINDOW_VASSALS_TAB"
							align = left
					    }
						shortcut = speed_2
					}

					button_text = {
						onclick = "[MyRealmWindow.ShowSuccession]"
						blockoverride "extra" {
							text_single = {
								raw_text = " tab 3"
							}
							text_single = {
								raw_text = ", selected"
								visible = "[MyRealmWindow.IsShowingSuccession]"
							}
							dot = { }
						}
					    blockoverride "text" {
					        text = "MY_REALM_WINDOW_SUCCESSION_TAB"
							align = left
					    }
						shortcut = speed_3
					}
				}

				### DOMAIN TAB
				vbox = {
					name = "tab_domain"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[MyRealmWindow.IsShowingDomain]"

					using = Animation_Tab_Switch

					button_text = {
						layoutpolicy_horizontal = expanding
					    blockoverride "text" {
					        raw_text = "[Select_CString(GetVariableSystem.Exists('county_focus'), 'Show all', 'Show only counties')]."
					    }
						onclick = "[GetVariableSystem.Toggle('county_focus')]"
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content" {
							vbox = {
								datamodel = "[MyRealmWindow.GetDomainItems]"
								layoutpolicy_horizontal = expanding

								item = {
									vbox = {
										layoutpolicy_horizontal = expanding
										name = "duchy_group"

										button_text = {
											layoutpolicy_horizontal = expanding
										    blockoverride "text" {
										        raw_text = "[DuchyGroup.GetDuchy.GetNameNoTooltip],"
										    }
											blockoverride "extra" {
												text_single = {
													raw_text = " [GetDataModelSize(DuchyGroup.GetCounties)] counties."
													align = nobaseline
												}
											}
											datacontext = "[DuchyGroup.GetDuchy]"
											using = title_click
										}

										vbox = {
											name = "county_group"
											datamodel = "[DuchyGroup.GetCounties]"
											layoutpolicy_horizontal = expanding

											item = {
												vbox = {
													layoutpolicy_horizontal = expanding
													datacontext = "[CountyGroup.GetCounty]"
													datacontext = "[CountyGroup.GetCapitalProvince.GetCounty]"

													hbox = {
														layoutpolicy_horizontal = expanding
														spacing = 5

														button_text = {
														    blockoverride "text" {
														        raw_text = "[Title.GetNameNoTooltip]."
																align = left
														    }
															using = title_click
														}

														flowcontainer = {
															text_single = {
																name = "development"
																text = "MY_REALM_WINDOW_DEVELOPMENT"
																tooltip = "COUNTY_DEVELOPMENT_TOOLTIP"
															}

															text_single = {
																raw_text = ","
															}
														}

														text_single = {
															raw_text = "Opinion [GuiScope.SetRoot( County.GetTitle.MakeScope ).ScriptValue('county_opinion_val')|0+],"
															# tooltip = "COUNTY_OPINION_TOOLTIP_REALM" #TODO
														}

														text_single = {
															name = "tutorial_highlight_control"
															raw_text = "[CountyGroup.GetCountyControlColored]."
															tooltip = "MY_REALM_WINDOW_CONTROL_TOOLTIP"
														}

														expand = { }
													}

													hbox = {
													    layoutpolicy_horizontal = expanding
														margin_left = 5
													    spacing = 5

														text_single = {
															raw_text = "[County.GetFaith.GetAdjective], "
														}

														text_single = {
															raw_text = "[County.GetCulture.GetNameNoTooltip]."
														}

													    expand = { }
													}

													vbox = {
														visible = "[Not(GetVariableSystem.Exists('county_focus'))]"
														datamodel = "[CountyGroup.GetHoldings]"
														layoutpolicy_horizontal = expanding


														item = {
															vbox = {
																layoutpolicy_horizontal = expanding
																datacontext = "[HoldingItem.GetHolding]"

																hbox = {
																    layoutpolicy_horizontal = expanding
																	spacing = 3
																	button_text = {
																		blockoverride "text" {
																			text = "MY_REALM_WINDOW_HOLDING_NAME"
																			align = left
																		}
																		blockoverride "extra" {
																			text_single = {
																				raw_text = ", Realm capital"
																				visible = "[HoldingItem.IsRealmCapital]"
																				tooltip = "REALM_CAPITAL_TOOLTIP"
																			}
																			dot = { }
																		}
																		onclick = "[HoldingItem.OnClick]"
																		# onclick = "[MyRealmWindow.Close]" #TODO
																	}

																	hbox = {
																		layoutpolicy_horizontal = expanding
																		spacing = 3
																		text_single = {
																			raw_text = "Tax [Holding.GetIncome|1V], "
																			tooltip = "[Holding.GetTaxTooltip]"
																		}

																		text_single = {
																			raw_text = "Levies [Holding.GetMaxLevySize|0]."
																			tooltip = "[Holding.GetLeviesTooltip]"
																		}

																		text_single = {
																			visible = "[LessThan_float(Holding.GetUnraisedLevyRatioPercent, '(float)1')]"
																			raw_text = "[Holding.GetUnraisedLevyRatioPercent|0]% of total"
																		}

																		expand = { }
																	}

																    expand = { }
																}

																hbox = {
																    layoutpolicy_horizontal = expanding
																	spacing = 5
																	text_single = {
																		raw_text = "Can construct,"
																		visible = "[HoldingItem.GetHolding.CanConstructAnyBuilding(GetPlayer)]"
																	}
																	text_single = {
																		raw_text = "Empty slots [GuiScope.SetRoot(HoldingItem.GetHolding.GetProvince.MakeScope).ScriptValue('free_building_slots_sval')],"
																	}

																	text_single = {
																		raw_text = "Buildings [GuiScope.SetRoot(HoldingItem.GetHolding.GetProvince.MakeScope).ScriptValue('num_buildings_sval')]."
																	}

																	hbox = {
																		spacing = 3
																		tooltip = "MY_REALM_WINDOW_BUILDING_CONSTRUCTION_TT"

																		text_single = {
																			raw_text = "[HoldingItem.GetStatusText]."
																		}

																		text_single = {
																			raw_text = "[HoldingItem.GetHolding.GetConstructionProgress|%0]."
																		}
																		visible = "[HoldingItem.GetHolding.IsConstructionInProgress]"
																	}

																    expand = { }
																}
															}
														}
													}

													vbox = {
														layoutpolicy_horizontal = expanding
														visible = "[Not(GetVariableSystem.Exists('county_focus'))]"

														flowcontainer = {
															visible = "[DataModelHasItems(CountyGroup.GetEmptyHoldings)]"
															datamodel = "[CountyGroup.GetEmptyHoldings]"
															layoutpolicy_horizontal = expanding
															spacing = 3

															text_single = {
																raw_text = "[GetDataModelSize(CountyGroup.GetEmptyHoldings)] empty holdings"
															}

															item = {
																button_text = {
																	blockoverride "text" {
																		margin_left = -3
																		raw_text = "[HoldingItem.GetBarony.GetNameNoTierNoTooltip],"
																		visible = "[Not(Or(HoldingItem.GetHolding.CanConstructAnyBuilding(GetPlayer), HoldingItem.GetHolding.IsConstructionInProgress))]"
																		align = left
																	}
																	blockoverride "extra" {
																		text_single = {
																			raw_text = "Build new."
																			visible = "[HoldingItem.GetHolding.CanConstructAnyBuilding(GetPlayer)]"
																		}
																		text_single = {
																			visible = "[HoldingItem.GetHolding.IsConstructionInProgress]"
																			raw_text = "Building, [HoldingItem.GetHolding.GetConstructionProgress|%0]."
																		}
																	}
																	datacontext = "[HoldingItem.GetHolding]"
																	onclick = "[HoldingItem.OnClick]"
																}
															}
														}
													}

													expand = { }
												}
											}
										}
									}
								}
							}
						}
					}
				}

				### VASSALS TAB
				vbox = {
					name = "tab_vassals"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[MyRealmWindow.IsShowingVassals]"

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					hbox = {
						name = "government_filters_container"
						margin = { 0 7 }

						hbox = {
							name = "government_filters"
							datamodel = "[MyRealmWindow.GetGovernmentTypeHeaders]"
							visible = "[LessThan_int32(GetDataModelSize(MyRealmWindow.GetGovernmentTypeHeaders), '(int32)3')]"
							spacing = 5
							layoutpolicy_horizontal = expanding

							button_standard_clean = {
								name = "all_governments"
								size = { 60 33 }
								default_format = "#low"

								text = "MRW_GOVERNMENT_FILTER_ALL"
								tooltip = "MRW_GOVERNMENT_FILTER_ALL_TT"
								using = tooltip_above
								down = "[Not(MyRealmWindow.HasGovernmentTypeFilter)]"
								onclick = "[MyRealmWindow.ResetGovernmentTypeFilter]"
							}

							item = {
								button_standard_clean = {
									name = "government_filter"
									datacontext = "[GovernmentTypeHeader.GetGovernmentType]"

									text = "MRW_GOVERNMENT_FILTER"
									default_format = "#low"

									tooltip = "MRW_GOVERNMENT_FILTER_TT"
									using = tooltip_above
									down = "[GovernmentTypeHeader.IsSelected]"
									onclick = "[GovernmentTypeHeader.OnClick]"
								}
							}
						}

						hbox = {
							name = "small_government_filters"
							datamodel = "[MyRealmWindow.GetGovernmentTypeHeaders]"
							visible = "[GreaterThanOrEqualTo_int32(GetDataModelSize(MyRealmWindow.GetGovernmentTypeHeaders), '(int32)3')]"
							spacing = 2
							layoutpolicy_horizontal = expanding

							button_standard_clean = {
								name = "all_governments"
								size = { 56 33 }
								default_format = "#low"

								text = "MRW_GOVERNMENT_FILTER_ALL"
								tooltip = "MRW_GOVERNMENT_FILTER_ALL_TT"
								using = tooltip_above
								down = "[Not(MyRealmWindow.HasGovernmentTypeFilter)]"
								onclick = "[MyRealmWindow.ResetGovernmentTypeFilter]"
							}

							item = {
								button_standard_clean = {
									name = "small_government_filter"
									datacontext = "[GovernmentTypeHeader.GetGovernmentType]"
									size = { 96 33 }

									text = "[GovernmentType.GetNameNoTooltip]"
									default_format = "#low"

									tooltip = "MRW_GOVERNMENT_FILTER_TT"
									using = tooltip_above
									down = "[GovernmentTypeHeader.IsSelected]"
									onclick = "[GovernmentTypeHeader.OnClick]"
								}
							}
						}
					}

					text_single = {
						visible = "[MyRealmWindow.HasGovernmentTypeFilter]"
						margin_top = 5
						margin_bottom = 10

						text = "[MyRealmWindow.GetGovernmentTypeFilter.GetVassalsLabel]"
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_margins" {
							margin = { 5 5 }
							margin_top = 20
						}

						blockoverride "scrollbox_content"
						{
							visible = "[GreaterThan_int32( MyRealmWindow.GetVassalCount, '(int32)0' )]"

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[MyRealmWindow.GetPowerfulVassals]"
								datamodel = "[CharacterSelectionList.GetList]"
								visible = "[Not(CharacterSelectionList.IsBuildingList)]"
								addcolumn = 545
								addrow = 115
								setitemsizefromcell = yes

								item = {
									widget_vassal_list_item = {
										datacontext = "[CharacterListItem.GetCharacter]"
										datacontext = "[MyRealmWindow.GetVassalInfo( Character.Self )]"
										datacontext = "[MyRealmWindowVassalItem.GetContract]"

										blockoverride "vassal_portrait"
										{
											portrait_shoulders = { }
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[MyRealmWindow.GetRegularVassals]"
								datamodel = "[CharacterSelectionList.GetList]"
								visible = "[Not(CharacterSelectionList.IsBuildingList)]"
								addcolumn = 545
								addrow = 115
								setitemsizefromcell = yes

								item = {
									widget_vassal_list_item = {
										datacontext = "[CharacterListItem.GetCharacter]"
										datacontext = "[MyRealmWindow.GetVassalInfo( Character.Self )]"
										datacontext = "[MyRealmWindowVassalItem.GetContract]"
									}
								}
							}
							expand = { }
						}

						vbox = {
							visible = "[EqualTo_int32( MyRealmWindow.GetVassalCount, '(int32)0' )]"
							text_single = {
								text = "NO_VASSALS_TO_DISPLAY"
								default_format = "#weak"
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						margin = { 15 0 }
						# margin_top = 15
						# margin_bottom = 15

						vbox = {
							layoutpolicy_horizontal = expanding
							# margin = { 0 5 }

							background = {
								using = Background_Area
								margin = { -20 0 }
								margin_bottom = 10
								margin_top = 3
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									default_format = "#high"
									text = "MY_REALM_WINDOW_VASSAL_OPINION"
									tooltip = "MY_REALM_WINDOW_VASSAL_OPINION_TT"
								}

								text_single = {
									raw_text = ",  "
								}

								hbox = {

									tooltip = "[GetPlayer.GetDreadBreakdown]"

									text_single = {
										name = "dread_name"
										text = "[dread|E]: [GetPlayer.GetDread|0]"
										default_format = "#high"
									}
								}

								text_single = {
									raw_text = ",  "
								}

								hbox = {
									spacing = 2
									tooltip = "[Character.GetVassalLimitTooltip]"
									name = "tutorial_highlight_vassal_limit"

									background = {
										visible = "[GreaterThan_int32( Character.GetNumVassalsTowardsLimit, Character.GetVassalLimit )]"
										using = Status_Bad
									}

									text_single = {
										text = "MY_REALM_WINDOW_VASSAL_LIMIT"
									}

									text_single = {
										text = "MY_REALM_WINDOW_VASSAL_LIMIT_VALUE"
									}
								}

								text_single = {
									raw_text = "."
								}
								expand = { }
							}
						}
					}
				}

				### SUCCESSION TAB
				vbox = {
					name = "tab_succession"
					visible = "[MyRealmWindow.IsShowingSuccession]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					vbox = {
						margin = { 20 15 }
						margin_bottom = 10
						spacing = 4
						layoutpolicy_horizontal = expanding

						text_label_center = {
							text = "MY_REALM_WINDOW_CURRENT_SUCCESSION"
						}

						vbox = {
							datamodel = "[MyRealmWindow.GetRealmLaws]"
							spacing = 10
							margin_bottom = 5
							ignoreinvisible = yes
							layoutpolicy_horizontal = expanding

							item = {
								hbox = {
									visible = "[And( Not( GuiLawGroup.GetLawGroup.HasFlag( 'realm_law' ) ), GuiLawGroup.IsAvailable )]"
									layoutpolicy_horizontal = growing

									vbox = {
										layoutpolicy_horizontal = growing

										text_single = {
											layoutpolicy_horizontal = growing
											max_width = 350
											raw_text = "[GuiLawGroup.GetLawGroup.GetNameSingular]:"
										}

										text_single = {
											layoutpolicy_horizontal = growing
											max_width = 350
											text = "[GuiLawGroup.GetCurrentLevel.GetLaw.GetName]"
											default_format = "#high"
										}

										text_single = {
											layoutpolicy_horizontal = growing
											max_width = 350
											visible = "[GuiLawGroup.GetCurrentLevel.GetLaw.HasSubName]"
											text = "[GuiLawGroup.GetCurrentLevel.GetLaw.GetSubName]"
											default_format = "#F"
										}
									}
									expand = {
										layoutpolicy_horizontal = growing
									}

									button_standard = {
										datacontext = "[GuiLawGroup]"
										size = { 150 32 }
										onclick = "[OpenSuccessionLawChangeWindow(GuiLawGroup.Self)]"
										text = "MRW_CHANGE_LAW"
										tooltip = "MRW_CHANGE_LAW_TT"
									}
								}
							}
						}

						divider_light = {
							layoutpolicy_horizontal = growing
						}

						hbox = {
							layoutpolicy_horizontal = growing

							vbox = {
								layoutpolicy_horizontal = growing


								text_single = {
									layoutpolicy_horizontal = growing
									max_width = 350
									text = "MRW_DESIGNATED_HEIR_LABEL"
								}

								text_single = {
									visible = "[MyRealmWindow.GetCharacter.GetDesignatedHeir.IsValid]"
									layoutpolicy_horizontal = growing
									text = "MRW_DESIGNATED_HEIR"
									max_width = 350
								}

								text_single = {
									visible = "[Not(MyRealmWindow.GetCharacter.GetDesignatedHeir.IsValid)]"
									layoutpolicy_horizontal = growing
									text = "MRW_NO_DESIGNATED_HEIR"
									max_width = 350
								}
							}

							button_standard = {
								text = "MY_REALM_WINDOW_DESIGNATE_HEIR"
								size = { 150 32 }
								tooltip = "MRW_DESIGNATE_HEIR_TT"
								enabled = "[MyRealmWindow.CanDesignateHeir]"
								onclick = "[OpenDesignateHeirWindow]"
							}
						}
					}

					scrollbox = {
						name = "succession_scrollbox"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						minimumsize = { 0 350 }

						blockoverride "scrollbox_content"
						{
							margin = { 20 10 }
							spacing = 10

							hbox = {
								name = "current_heir"
								layoutpolicy_horizontal = expanding

								background = {
									using =  Background_Area_Dark
									alpha = 0.8

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
										blend_mode = alphamultiply
										mirror = horizontal
									}
								}

								portrait_head = {
									datacontext = "[MyRealmWindow.GetCharacter.GetPlayerHeir]"
									blockoverride "glow_visible"
									{
										visible = no
									}
								}

								vbox = {
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding
									margin = { 5 0 }
									margin_top = 5

									vbox = {
										layoutpolicy_horizontal = expanding

										text_single = {
											visible = "[MyRealmWindow.HasHeir]"
											layoutpolicy_horizontal = expanding
											autoresize = no
											using = Font_Size_Medium
											fontsize_min = 14

											text = "[MyRealmWindow.GetCharacter.GetPlayerHeir.GetUINameNoTooltip]"
											default_format = "#low"
										}

										text_single = {
											visible = "[MyRealmWindow.HasHeir]"
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											autoresize = no

											text = "MRW_YOUR_PLAYER_HEIR"
											default_format = "#weak"
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										text_single = {
											name = "no_heir_warning"
											visible = "[Not( MyRealmWindow.HasHeir )]"
											layoutpolicy_horizontal = expanding
											text = "MY_REALM_WINDOW_NO_HEIR_FLAVOR"
										}

										text_single = {
											name = "not_primary_heir"
											visible = "[And( MyRealmWindow.HasHeir, Not( ObjectsEqual( MyRealmWindow.GetCharacter.GetPlayerHeir, MyRealmWindow.GetCharacter.GetPrimaryTitle.GetHeir.Self ) ) )]"
											layoutpolicy_horizontal = expanding
											text = "MY_REALM_WINDOW_NOT_PRIMARY_HEIR"
										}
									}

									expand = { }
								}
							}

							##### FROM REALM'S PARTITION #####
							vbox = {
								layoutpolicy_horizontal = expanding

								vbox = {
									name = "their_partition_share"
									visible = "[And(MyRealmWindow.HasPartition, DataModelHasItems(MyRealmWindow.GetMyPartitionShare))]"
									layoutpolicy_horizontal = expanding
									margin_left = 5

									hbox = {
										layoutpolicy_horizontal = expanding

										text_single = {
											raw_text = "You will inherit,  "
										}

										text_single = {
											# layoutpolicy_horizontal = expanding
											text = "MY_REALM_WINDOW_PARTITION_SHARE"
										}

										dot = { }

										expand = { }
									}

									vbox = {
										name = "partition_share_box"
										datamodel = "[MyRealmWindow.GetMyPartitionShare]"
										layoutpolicy_horizontal = expanding
										# size = { 460 55 }
										# spacing = 10

										item = {
											button = {
												onclick = "[DefaultOnCoatOfArmsClick(TitleItem.GetTitle.GetID)]"
												onclick = "[DefaultOnCoatOfArmsRightClick(TitleItem.GetTitle.GetID)]"
												button_ignore = none
												layoutpolicy_horizontal = expanding

												text_single = {
													layoutpolicy_horizontal = expanding
													raw_text = "[TitleItem.GetTitle.GetNameNoTooltip]."
													resizeparent = yes
													margin_left = 5
												}
											}
										}
									}
								}

								spacer = {
									size = { 5 5 }
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									visible = "[DataModelHasItems(MyRealmWindow.GetTitleSuccession)]"
									margin = { 5 0 }

									button_group = {
										onclick = "[GetVariableSystem.Toggle( 'expand_partition' )]"

										flowcontainer = {
											ignoreinvisible = yes
											# spacing = 5
											#
											# widget = {
											# 	size = { 18 22 }
											#
											# 	button_expand = {
											# 		visible = "[Not(GetVariableSystem.Exists( 'expand_partition' ))]"
											# 		parentanchor = center
											# 		frame = 1
											# 	}
											#
											# 	button_expand = {
											# 		visible = "[GetVariableSystem.Exists( 'expand_partition' )]"
											# 		parentanchor = center
											# 		frame = 2
											# 	}
											# }

											text_single = {
												text = "MY_REALM_WINDOW_TITLES_LOST_ON_SUCCESSION"
												align = nobaseline
											}

											dot = { }
										}
									}

									expand = { }
								}

								spacer = {
									# visible = "[GetVariableSystem.Exists( 'expand_partition' )]"
									size = { 5 5 }
								}

								vbox = {
									name = "title_succession"
									datamodel = "[MyRealmWindow.GetTitleSuccession]"
									# visible = "[GetVariableSystem.Exists( 'expand_partition' )]"
									layoutpolicy_horizontal = expanding

									item = {
										hbox = {
											# maximumsize = { -1 100 }
											layoutpolicy_horizontal = expanding
											margin_left = 10
											margin_bottom = 5
											datacontext = "[TitleSuccessionItem.GetHeir]"

											background = {
												using = Background_Area_With_Header
											}

											vbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = growing
												# margin_bottom = 5

												button = {
													onclick = "[DefaultOnCharacterClick(Character.GetID)]"
													onclick = "[DefaultOnCharacterClick(Character.GetID)]"
													# onclick = "[DefaultOnCoatOfArmsRightClick(Character.CapitalLocation.GetCoATitle.GetID)]"
													onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
													button_ignore = none
													layoutpolicy_horizontal = expanding

													text_single = {
														name = "heir_name"
														raw_text = "[Character.GetUINameNoTooltip],"
														layoutpolicy_horizontal = expanding
														margin_left = 5
														resizeparent = yes
														# using = Font_Size_Medium
														# max_width = 400
														# fontsize_min = 14
													}
												}


												text_single = {
													name = "heir_not_your_dynasty"
													layoutpolicy_horizontal = expanding

													text = "MY_REALM_WINDOW_HEIR_NOT_MY_DYNASTY"
													visible = "[Not(ObjectsEqual(Character.GetHouse.GetDynasty.Self, GetPlayer.GetHouse.GetDynasty.Self))]"
													using = Font_Size_Small
												}

												# text_single = {
												# 	name = "heir_share"
												# 	datacontext = "[GetPlayer]"
												# 	visible = "[DataModelHasItems(TitleSuccessionItem.GetPartitionTitles)]"
												# 	layoutpolicy_horizontal = expanding
												#
												# 	text = "MY_REALM_WINDOW_PARTITION_SHARE"
												# }

												vbox = {
													name = "titles_box"
													layoutpolicy_horizontal = expanding
													datamodel = "[TitleSuccessionItem.GetPartitionTitles]"
													visible = "[DataModelHasItems(TitleSuccessionItem.GetPartitionTitles)]"
													# minimumsize = { 350 50 }
													spacing = 0

													item = {
														hbox = {
															layoutpolicy_horizontal = expanding

															button = {
																onclick = "[DefaultOnCoatOfArmsClick(TitleItem.GetTitle.GetID)]"
																onclick = "[DefaultOnCoatOfArmsRightClick(TitleItem.GetTitle.GetID)]"
																button_ignore = none
																layoutpolicy_horizontal = expanding
																text_single = {
																	layoutpolicy_horizontal = expanding
																	raw_text = "[TitleItem.GetTitle.GetNameNoTooltip]."
																	resizeparent = yes
																	margin_left = 5
																}
															}

															# coa_title_tiny_crown = {
															# 	datacontext = "[TitleItem.GetTitle]"
															# 	using = tooltip_ne
															# }

															# icon = {
															# 	name = "has_laws"
															# 	visible = "[TitleItem.GetTitle.HasLaws]"
															# 	parentanchor = bottom|right
															# 	size = { 25 25 }
															# 	position = { 5 0 }
															# 	texture = "gfx/interface/icons/title_status/icon_title_law.dds"
															# }
														}
													}
												}

												text_single = {
													name = "exception_label"
													visible = "[DataModelHasItems(TitleSuccessionItem.GetExceptionTitles)]"
													layoutpolicy_horizontal = expanding

													text = "MY_REALM_WINDOW_EXCEPTIONS"
												}

												vbox = {
													layoutpolicy_horizontal = expanding
													name = "exception_box"
													datamodel = "[TitleSuccessionItem.GetExceptionTitles]"
													visible = "[DataModelHasItems(TitleSuccessionItem.GetExceptionTitles)]"
													# minimumsize = { 350 50 }
													# spacing = 10

													item = {
														button = {
															onclick = "[DefaultOnCoatOfArmsClick(TitleItem.GetTitle.GetID)]"
															onclick = "[DefaultOnCoatOfArmsRightClick(TitleItem.GetTitle.GetID)]"
															button_ignore = none
															layoutpolicy_horizontal = expanding

															text_single = {
																layoutpolicy_horizontal = expanding
																raw_text = "[TitleItem.GetTitle.GetNameNoTooltip]."
																resizeparent = yes
																margin_left = 5
															}
														}
													}
												}
											}

											# vbox = {
											# 	portrait_head = {
											# 		name = "primary_spouse_portrait"
											# 		blockoverride "portrait_button" {
											# 			using = tooltip_ws
											# 		}
											# 	}
											#
											# 	expand = { }
											# }
										}
									}
								}
							}

							vbox = {
								name = "exceptions"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = growing
								margin_left = 5

								visible = "[DataModelHasItems(MyRealmWindow.GetSuccessionExceptions)]"

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										layoutpolicy_horizontal = expanding
										text = "MY_REALM_WINDOW_EXCEPTIONS"
									}

									expand = { }
								}

								vbox = {
									name = "exceptions_box"
									layoutpolicy_horizontal = expanding
									# size = { 460 55 }
									# spacing = 10

									datamodel = "[MyRealmWindow.GetSuccessionExceptions]"

									item = {
										button = {
											onclick = "[DefaultOnCoatOfArmsClick(TitleItem.GetTitle.GetID)]"
											onclick = "[DefaultOnCoatOfArmsRightClick(TitleItem.GetTitle.GetID)]"
											button_ignore = none
											layoutpolicy_horizontal = expanding

											text_single = {
												layoutpolicy_horizontal = expanding
												raw_text = "[TitleItem.GetTitle.GetNameNoTooltip]."
												resizeparent = yes
												margin_left = 5
											}
										}
									}
								}
							}

							vbox = {
								name = "line_of_succession"
								visible = "[MyRealmWindow.HasSingleHeir]"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = growing
								spacing = 10

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										name = "line_of_succession_label"
										layoutpolicy_horizontal = expanding
										text = "MY_REALM_WINDOW_LINE_OF_SUCCESSION"
									}

									expand = { }
								}

								flowcontainer = {
									name = "line_of_succession_box"
									layoutpolicy_horizontal = expanding
									spacing = 0
									margin_right = 10

									datamodel = "[MyRealmWindow.GetLineOfSuccession]"

									item = {
										portrait_head = {
											name = "heir_portrait"
										}
									}
								}
							}

							#### ELECTIONS ####
							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[MyRealmWindow.CanVote]"
								margin_left = 5

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										layoutpolicy_horizontal = expanding
										text = "MY_REALM_WINDOW_ELECTIONS"
									}

									expand = { }
								}

								flowcontainer = {
									name = "elections"
									direction = vertical

									fixedgridbox = {
										name = "exceptions_box"
										addcolumn = 510
										addrow = 90
										datamodel = "[MyRealmWindow.GetTitlesCanVote]"

										item = {
											widget = {
												name = "election_title"
												size = { 510 90 }
												datacontext = "[TitleItem.GetTitle]"

												hbox = {
													spacing = 10

													coa_title_small_crown = {
														datacontext = "[Title]"
														using = tooltip_ne
													}

													vbox = {
														spacing = 7

														text_single = {
															layoutpolicy_horizontal = expanding
															text = "[Title.GetNameNoTooltip]"
														}

														hbox = {
															layoutpolicy_horizontal = expanding

															button_standard_select_arrow = {
																name = "go_to_vote"
																onclick = "[OpenSuccessionElectionWindowForTitle(Title.Self)]"

																blockoverride "button_text"{
																	text = "MY_REALM_WINDOW_VOTE"
																}

																tooltip = "MY_REALM_WINDOW_VOTE_TOOLTIP"
															}

															expand = { }
														}
													}

													expand = { }
												}
											}
										}
									}
								}
							}

							expand = {
								layoutpolicy_vertical = expanding
							}
						}
					}
				}

				vbox = {
					visible = "[Or( MyRealmWindow.IsShowingDomain, MyRealmWindow.IsShowingVassals)]"
					layoutpolicy_horizontal = expanding
					# margin_bottom = 15
					spacing = 8

					hbox = {
						margin = { 10 0 }
						visible = "[MyRealmWindow.IsShowingDomain]"
						tooltip = "[GetPlayer.GetDomainLimitTooltip]"
						spacing = 2
						layoutpolicy_horizontal = expanding

						text_single = {
							text = "[SelectLocalization(MyRealmWindow.IsOverDomainLimit, 'MY_REALM_WINDOW_DOMAIN_LIMIT_WARNING', 'MY_REALM_WINDOW_DOMAIN_LIMIT')]"
						}

						text_single = {
							text = "[SelectLocalization(MyRealmWindow.IsOverDomainLimit, 'MY_REALM_WINDOW_DOMAIN_LIMIT_VALUE_WARNING', 'MY_REALM_WINDOW_DOMAIN_LIMIT_VALUE')]"
						}
						dot = { }
						expand = { }
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						margin = { 10 0 }

						background = {
							using = Background_Area
							margin = { -65 0 }
							margin_bottom = 8
							margin_top = 3
						}


						hbox = {
							name = "domain_income_row"
							layoutpolicy_horizontal = expanding

							# background = {
							# 	visible = "[MyRealmWindow.IsShowingDomain]"
							# 	using = Status_Highlight
							# }
							spacing = 5

							flowcontainer = {

								text_single = {
									# layoutpolicy_horizontal = expanding
									text = "MY_REALM_WINDOW_FROM_HOLDINGS"
								}


								text_single = {
									raw_text = ", Over the limit!"
									visible = "[MyRealmWindow.IsOverDomainLimit]"
									tooltip = "[Character.GetDomainLimitTooltip]"
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetDomainIncome]"
								raw_text = "[ValueBreakdown.GetValue] gold,"
								# min_width = 100
								# max_width = 100
								# align = right

								tooltipwidget = {
									widget_gold_breakdown_tooltip = {
										blockoverride "income"
										{
											visible = no
										}
									}
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetDomainLevy]"
								raw_text = "[ValueBreakdown.GetValue] levies."
								# minimumsize = { 100 0 }
								# align = right
								tooltipwidget = {
									widget_gold_breakdown_tooltip = {
										blockoverride "income"
										{
											visible = no
										}
									}
								}
							}

							expand = { }
						}

						hbox = {
							name = "vassals_income_row"
							layoutpolicy_horizontal = expanding

							# background = {
							# 	visible = "[MyRealmWindow.IsShowingVassals]"
							# 	using = Status_Highlight
							# }
							spacing = 5

							flowcontainer = {

								text_single = {
									# layoutpolicy_horizontal = expanding
									text = "MY_REALM_WINDOW_FROM_VASSALS"
									# align = bottom
								}

								text_single = {
									raw_text = ", Over the limit!"
									visible = "[GreaterThan_int32( Character.GetNumVassalsTowardsLimit, Character.GetVassalLimit )]"
									tooltip = "[Character.GetVassalLimitTooltip]"
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetVassalsIncome]"
								raw_text = "[ValueBreakdown.GetValue] gold,"

								tooltipwidget = {
									widget_gold_breakdown_tooltip = {
										blockoverride "income"
										{
											visible = no
										}
									}
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetVassalsLevy]"
								raw_text = "[ValueBreakdown.GetValue] levies."

								tooltipwidget = {
									widget_gold_breakdown_tooltip = {
										blockoverride "income"
										{
											visible = no
										}
									}
								}
							}

							expand = { }
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[GetPlayer.HasLiege]"
							spacing = 5

							text_single = {
								# layoutpolicy_horizontal = expanding
								text = "MY_REALM_WINDOW_FROM_TO_LIEGE"
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetIncomeTax]"
								raw_text = "[ValueBreakdown.GetValue] gold,"
								# min_width = 100
								# max_width = 100
								# align = right

								tooltipwidget = {
									my_realm_window_contribution_tooltip = {
										datacontext = "[MyRealmWindow.GetCharacter]"
										blockoverride "contribution_tooltip_header"
										{
											text = "MRW_TT_TAXES_TO_MY_LIEGE"
										}
										blockoverride "contribution_tooltip_content_suffix" { }
									}
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetLevyTax]"
								raw_text = "[ValueBreakdown.GetValue] levies."
								# min_width = 100
								# max_width = 100
								# align = right

								tooltipwidget = {
									my_realm_window_contribution_tooltip = {
										datacontext = "[MyRealmWindow.GetCharacter]"
										blockoverride "contribution_tooltip_header"
										{
											text = "MRW_TT_LEVIES_TO_MY_LIEGE"
										}
										blockoverride "contribution_tooltip_content_suffix" { }
									}
								}
							}

							expand = { }
						}

						hbox = {
							name = "vassal_contract"
							datacontext = "[MyRealmWindow.GetCharacter.GetLiege]"
							datacontext = "[MyRealmWindow.GetCharacter.GetVassalContract]"
							visible = "[Character.IsPlayerInteractionShown('vassal_modify_vassal_contract_interaction')]"
							margin_left = 3
							spacing = 10

							button_replace = {
								enabled = "[Character.IsPlayerInteractionValid('vassal_modify_vassal_contract_interaction')]"
								onclick = "[Character.OpenPlayerInteraction('vassal_modify_vassal_contract_interaction')]"
								tooltip = "[Character.GetPlayerInteractionTooltip('vassal_modify_vassal_contract_interaction')]"
							}

							text_single = {
								visible = "[VassalContract.UsesObligationLevels]"
								layoutpolicy_horizontal = expanding
								align = center
								text = "MY_REALM_WINDOW_MY_OBLIGATIONS"
							}

							vassal_contract_not_default_icon = { }
						}
					}
				}
			}
		}
	}

	window_realm_old = {
		visible = "[GetVariableSystem.Exists('ocr')]"
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types MyRealmWindow
{
	type my_realm_window_contribution_tooltip = container {
		alwaystransparent = no
		widget = {
			name = "background"
			using = Background_Tooltip
			size = { 100% 100% }
			alwaystransparent = no
		}

		flowcontainer = {
			margin = { 10 0 }
			margin_top = 10
			spacing = 15
			direction = vertical
			ignoreinvisible = yes

			text_single = {
				margin = { 5 0 }
				block "contribution_tooltip_header" { }
			}

			widget_gold_breakdown_tooltip = {
				layoutpolicy_horizontal = expanding
				blockoverride "income"
				{
					visible = no
				}

				blockoverride "background" { }
			}

			block "contribution_tooltip_content_suffix" {
				text_single = {
					multiline = yes
					maximumsize = { 250 -1 }
					text = "MY_REALM_WINDOW_CONTRIBUTION_TO_THEOCRATIC_LIEGE"
					visible = "[Character.IsTheocraticLessee]"
				}
			}

			flowcontainer = {
				spacing = 15
				direction = vertical
				ignoreinvisible = yes
				block "tax_info_visible" { }
				block "tax_info" { }
			}

			flowcontainer = {
				spacing = 15
				direction = vertical
				ignoreinvisible = yes
				block "levy_info_visible" { }
				block "levy_info" { }
			}
		}
	}

	type vassal_contract_not_default_icon = icon
	{
		texture = "gfx/interface/icons/icon_contract_modification.dds"
		framesize = { 60 60 }
		frame = 1
		name = "vassal_contract_not_default"
		size = { 25 25 }
		visible = "[Not( VassalContract.IsContractDefault )]"
		tooltip = "VASSAL_CONTRACT_NOT_DEFAULT"
	}
}
