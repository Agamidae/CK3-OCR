######################################################
##################### MY REALM #######################
######################################################

window = {
	name = "my_realm_window"
	datacontext = "[GetVariableSystem]"
	datacontext = "[GetPlayer]"
	parentanchor = top|right
	allow_outside = yes
	movable = no
	layer = windows_layer

	using = Window_Size_MainTab

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab
		on_start = "[PdxGuiTriggerAllAnimations('refresh_holdings')]"
		on_start = "[PdxGuiTriggerAllAnimations('refresh_rulers')]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
	}

	state = {
		name = dismiss
		next = _hide

		trigger_when = "[GetVariableSystem.Exists( 'hide_right_windows' )]"
	}

	widget = {
		visible = "[And(GetVariableSystem.HasValue('realm_tabs', 'holdings'), IsDataModelEmpty(GetPlayer.MakeScope.GetList('special_buildings'))))]"

		state = {
			name = refresh_holdings
			on_start = "[GetScriptedGui('special_buildings_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
		}
	}

	widget = {
		visible = "[GetVariableSystem.HasValue('realm_tabs', 'rulers')]"

		state = {
			name = refresh_rulers
			on_start = "[GetScriptedGui('all_rulers').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
		}
	}


	margin_widget = {
		visible = "[Not(GetVariableSystem.Exists('ocr'))]"
		size = { 100% 100% }
		# margin = { 0 26 }
		margin_right = 13

		widget = {
			size = { 100% 100% }

			### WINDOW CONTENT
			vbox = {
				using = Window_Margins
				margin_bottom = 30

				button_close = {
					onclick = "[MyRealmWindow.Close]"
					shortcut = close_window
				}

				# header
				vbox = {
					layoutpolicy_horizontal = expanding
					#margin_bottom = 5
					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('special_buildings'))] special [Select_CString(GetPlayer.MakeScope.Var('empty_sp_slots').IsSet, 'slots', 'buildings')] in the world, refresh list, Shift E."
						}
						shortcut = map_mode_11
						onclick = "[GetScriptedGui('special_buildings_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						visible = "[GetVariableSystem.HasValue('realm_tabs', 'holdings')]"
					}

					hbox = {
						visible = "[Not(GetVariableSystem.Exists('realm_tabs'))]"
						layoutpolicy_horizontal = expanding
						# spacing = 20

						text_single = {
							raw_text = "Realm: [GetPlayer.GetPrimaryTitle.GetNameNoTooltip|U]"
							tooltip = "[Character.GetDefaultRealmFlagTooltip]"
						}

						text_single = {
							raw_text = ","
						}
						space = { }

						text_single = {
							name = "realm_type"
							text = "[Character.GetGovernment.GetAdjective]"
						}

						text_single = {
							raw_text = ","
						}
						space = { }

						text_single = {
							raw_text = "[GetPlayer.RealmSize] counties."
							tooltip = "REALM_WINDOW_SIZE_TT"
						}

						expand = { }
					}

					hbox = {
					    layoutpolicy_horizontal = expanding
						visible = "[GetVariableSystem.HasValue('realm_tabs', 'vassals')]"

						text_single = {
							datacontext = "[MyRealmWindow.GetRegularVassals]"
							raw_text = "[GetDataModelSize(CharacterSelectionList.GetList)] vassals."
						}

						hbox = {
							space = { }
							text_single = {
								text = "MY_REALM_WINDOW_VASSAL_OPINION"
								tooltip = "MY_REALM_WINDOW_VASSAL_OPINION_TT"
							}

							text_single = {
								raw_text = ",  "
							}

							hbox = {

								tooltip = "[GetPlayer.GetDreadBreakdown]"

								text_single = {
									name = "dread_name"
									text = "[dread|E]: [GetPlayer.GetDread|0]"
									default_format = "#high"
								}
							}

							text_single = {
								raw_text = ",  "
							}

							hbox = {
								spacing = 2
								tooltip = "[Character.GetVassalLimitTooltip]"
								name = "tutorial_highlight_vassal_limit"

								background = {
									visible = "[GreaterThan_int32( Character.GetNumVassalsTowardsLimit, Character.GetVassalLimit )]"
									using = Status_Bad
								}

								text_single = {
									text = "MY_REALM_WINDOW_VASSAL_LIMIT"
								}

								text_single = {
									text = "MY_REALM_WINDOW_VASSAL_LIMIT_VALUE"
								}
							}

							text_single = {
								raw_text = "."
							}
						}

					    expand = { }
					}

				}

				flowcontainer = {
					visible = "[Not(GetVariableSystem.HasValue('realm_tabs', 'rulers'))]"
					name = "vassals_succession_tabs"
					layoutpolicy_horizontal = expanding
					spacing = 2

					text_single = {
						raw_text = "Tabs:"
						margin_top = 2
					}

					button_text = {
						# onclick = "[MyRealmWindow.ShowDomain]"
						onclick = "[GetVariableSystem.Clear('realm_tabs')]"
						blockoverride "pre" {
							text_single = {
								raw_text = "1,"
							}
							text_single = {
								raw_text = " showing"
								visible = "[Not(GetVariableSystem.Exists('realm_tabs'))]"
							}
							space = { }
						}
					    blockoverride "text" {
					        text = "MY_REALM_WINDOW_DOMAIN_TAB"
							align = left
					    }
						blockoverride "dot" {

						}
						shortcut = speed_1
					}

					button_text = {
						# onclick = "[MyRealmWindow.ShowVassals]"
						onclick = "[GetVariableSystem.Set('realm_tabs', 'vassals')]"
						blockoverride "pre" {
							text_single = {
								raw_text = "2, "
							}
							text_single = {
								raw_text = " showing"
								visible = "[GetVariableSystem.HasValue('realm_tabs', 'vassals')]"
							}
							space = { }
						}
					    blockoverride "text" {
					        text = "MY_REALM_WINDOW_VASSALS_TAB"
							align = left
					    }
						blockoverride "dot" {

						}
						shortcut = speed_2
					}

					button_text = {
						# onclick = "[MyRealmWindow.ShowSuccession]"
						onclick = "[GetVariableSystem.Set('realm_tabs', 'succession')]"
						blockoverride "pre" {
							text_single = {
								raw_text = "3,"
							}
							text_single = {
								raw_text = " showing"
								visible = "[GetVariableSystem.HasValue('realm_tabs', 'succession')]"
							}
							space = { }
						}
					    blockoverride "text" {
					        text = "MY_REALM_WINDOW_SUCCESSION_TAB"
							align = left
					    }
						blockoverride "dot" {

						}
						shortcut = speed_3
					}

					button_text = {
						# onclick = "[MyRealmWindow.ShowSuccession]"
						onclick = "[GetVariableSystem.Set('realm_tabs', 'holdings')]"
						onclick = "[GetScriptedGui('special_buildings_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						blockoverride "pre" {
							text_single = {
								raw_text = "4,"
							}
							text_single = {
								raw_text = " showing"
								visible = "[GetVariableSystem.HasValue('realm_tabs', 'holdings')]"
							}
							space = { }
						}
					    blockoverride "text" {
					        raw_text = "Special buildings"
							align = left
					    }
						blockoverride "dot" {

						}
						shortcut = speed_4
					}
				}

				button_text = {
					visible = "[Not(GetVariableSystem.HasValue('realm_tabs', 'rulers'))]"
					layoutpolicy_horizontal = expanding
					onclick = "[GetVariableSystem.Set('realm_tabs', 'rulers')]"
					onclick = "[GetScriptedGui('all_rulers').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					blockoverride "pre" {
						text_single = {
							raw_text = "G,"
						}
						text_single = {
							raw_text = " showing"
							visible = "[GetVariableSystem.HasValue('realm_tabs', 'rulers')]"
						}
						space = { }
					}
					blockoverride "text" {
						raw_text = "Browse rulers by region"
						align = left
					}
					blockoverride "dot" {

					}
					shortcut = army_merge
				}

				vbox = {
					visible = "[Or( Not(GetVariableSystem.Exists('realm_tabs')), GetVariableSystem.HasValue('realm_tabs', 'vassals'))]"
					layoutpolicy_horizontal = expanding
					# margin_bottom = 15
					spacing = 8

					hbox = {
						margin = { 10 0 }
						visible = "[Not(GetVariableSystem.Exists('realm_tabs'))]"
						tooltip = "[GetPlayer.GetDomainLimitTooltip]"
						spacing = 2
						layoutpolicy_horizontal = expanding

						text_single = {
							text = "[SelectLocalization(MyRealmWindow.IsOverDomainLimit, 'MY_REALM_WINDOW_DOMAIN_LIMIT_WARNING', 'MY_REALM_WINDOW_DOMAIN_LIMIT')]"
						}

						text_single = {
							text = "[SelectLocalization(MyRealmWindow.IsOverDomainLimit, 'MY_REALM_WINDOW_DOMAIN_LIMIT_VALUE_WARNING', 'MY_REALM_WINDOW_DOMAIN_LIMIT_VALUE')]"
						}
						dot = { }
						expand = { }
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[GetVariableSystem.HasValue('realm_tabs', 'vassals')]"
						# margin_top = 10

						hbox = {
							# visible = "[Not(GetVariableSystem.Exists('realm_tabs'))]"
							name = "crown_authority"
							datamodel = "[MyRealmWindow.GetRealmLaws]"
							ignoreinvisible = yes
							margin_top = 5

							layoutpolicy_horizontal = expanding
							# margin_left = 10

							item = {
								vbox = {
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding
									datacontext = "[GuiLawGroup.GetLawGroup]"
									visible = "[And( GuiLawGroup.GetLawGroup.HasFlag( 'realm_law' ), GuiLawGroup.IsAvailable )]"
									ignoreinvisible = yes
									spacing = 3

									button_text = {
										layoutpolicy_horizontal = expanding
										blockoverride "text" {
											raw_text = "[Select_CString(Not(GetVariableSystem.Exists('crown_law')), 'Click to show', 'Showing')] [LawGroup.GetName].[Select_CString(Not(GetVariableSystem.Exists('crown_law')), '', ' Click to hide.')]"
											alwaystransparent = yes
										}
										onclick = "[GetVariableSystem.Toggle('crown_law')]"
									}

									flowcontainer = {
										visible = "[GetVariableSystem.Exists('crown_law')]"
										layoutpolicy_horizontal = expanding
										direction = vertical
										datamodel = "[GuiLawGroup.GetLaws]"

										item = {
											button_text = {
												datacontext = "[GuiLaw.GetLaw]"
												blockoverride "pre" {
													text_single = {
														raw_text = "Switch to  "
														align = left
														visible = "[GuiLaw.CanEnact]"
													}
													text_single = {
														raw_text = "Current:  "
														align = left
														visible = "[GuiLaw.IsEnacted]"
													}
												}
												blockoverride "text" {
													raw_text = "[GuiLaw.GetLaw.GetNameNoTooltip]"
												}

												blockoverride "dot_nb" {
													# visible = "[GuiLaw.IsEnacted]"
												}
												enabled = "[GuiLaw.CanEnact]"
												onclick = "[GuiLaw.Enact]"

												blockoverride "disabled" {
													visible = "[And(Not(GuiLaw.CanEnact), Not(GuiLaw.IsEnacted))]"
													align = left
												}
												tooltipwidget = { pass_law_tooltip = { } }
											}
										}
									}
								}
							}
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							datacontext = "[MyRealmWindow.GetCharacter.GetLiege]"
							visible = "[GetPlayer.HasLiege]"
							datacontext = "[Character.GetActiveLawInGroupWithFlag( 'realm_law' )]"
							raw_text = "Liege's authority: [Law.GetName]."
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "[Select_CString(GetVariableSystem.Exists('realm_income'), 'Show income', 'Income, click to hide')], hotkey E."
						}
						onclick = "[GetVariableSystem.Toggle('realm_income')]"
						shortcut = map_mode_1
					}

					vbox = {
						visible = "[Not(GetVariableSystem.Exists('realm_income'))]"
						layoutpolicy_horizontal = expanding
						margin = { 10 0 }

						hbox = {
							name = "domain_income_row"
							layoutpolicy_horizontal = expanding

							# background = {
							# 	visible = "[Not(GetVariableSystem.Exists('realm_tabs'))]"
							# 	using = Status_Highlight
							# }
							spacing = 5


							flowcontainer = {

								text_single = {
									# layoutpolicy_horizontal = expanding
									text = "MY_REALM_WINDOW_FROM_HOLDINGS"
								}


								text_single = {
									raw_text = ", Over the limit!"
									visible = "[MyRealmWindow.IsOverDomainLimit]"
									tooltip = "[Character.GetDomainLimitTooltip]"
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetDomainIncome]"
								raw_text = "[ValueBreakdown.GetValue] gold,"
								# min_width = 100
								# max_width = 100
								# align = right

								tooltipwidget = {
									widget_gold_breakdown_tooltip = {
										blockoverride "income"
										{
											visible = no
										}
									}
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetDomainLevy]"
								raw_text = "[ValueBreakdown.GetValue] levies."
								# minimumsize = { 100 0 }
								# align = right
								tooltipwidget = {
									widget_gold_breakdown_tooltip = {
										blockoverride "income"
										{
											visible = no
										}
									}
								}
							}

							expand = { }
						}

						hbox = {
							name = "vassals_income_row"
							layoutpolicy_horizontal = expanding

							# background = {
							# 	visible = "[GetVariableSystem.HasValue('realm_tabs', 'vassals')]"
							# 	using = Status_Highlight
							# }
							spacing = 5

							flowcontainer = {

								text_single = {
									# layoutpolicy_horizontal = expanding
									text = "MY_REALM_WINDOW_FROM_VASSALS"
									# align = bottom
								}

								text_single = {
									raw_text = ", Over the limit!"
									visible = "[GreaterThan_int32( Character.GetNumVassalsTowardsLimit, Character.GetVassalLimit )]"
									tooltip = "[Character.GetVassalLimitTooltip]"
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetVassalsIncome]"
								raw_text = "[ValueBreakdown.GetValue] gold,"

								tooltipwidget = {
									widget_gold_breakdown_tooltip = {
										blockoverride "income"
										{
											visible = no
										}
									}
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetVassalsLevy]"
								raw_text = "[ValueBreakdown.GetValue] levies."

								tooltipwidget = {
									widget_gold_breakdown_tooltip = {
										blockoverride "income"
										{
											visible = no
										}
									}
								}
							}

							expand = { }
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[GetPlayer.HasLiege]"
							spacing = 5

							text_single = {
								# layoutpolicy_horizontal = expanding
								text = "MY_REALM_WINDOW_FROM_TO_LIEGE"
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetIncomeTax]"
								raw_text = "[ValueBreakdown.GetValue] gold,"
								# min_width = 100
								# max_width = 100
								# align = right

								tooltipwidget = {
									my_realm_window_contribution_tooltip = {
										datacontext = "[MyRealmWindow.GetCharacter]"
										blockoverride "contribution_tooltip_header"
										{
											text = "MRW_TT_TAXES_TO_MY_LIEGE"
										}
										blockoverride "contribution_tooltip_content_suffix" { }
									}
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetLevyTax]"
								raw_text = "[ValueBreakdown.GetValue] levies."
								# min_width = 100
								# max_width = 100
								# align = right

								tooltipwidget = {
									my_realm_window_contribution_tooltip = {
										datacontext = "[MyRealmWindow.GetCharacter]"
										blockoverride "contribution_tooltip_header"
										{
											text = "MRW_TT_LEVIES_TO_MY_LIEGE"
										}
										blockoverride "contribution_tooltip_content_suffix" { }
									}
								}
							}

							expand = { }
						}

						vbox = {
							name = "vassal_contract"
							datacontext = "[MyRealmWindow.GetCharacter.GetLiege]"
							datacontext = "[MyRealmWindow.GetCharacter.GetVassalContract]"
							visible = "[Character.IsPlayerInteractionShown('vassal_modify_vassal_contract_interaction')]"
							margin_left = 3
							layoutpolicy_horizontal = expanding

							text_single = {
								visible = "[VassalContract.UsesObligationLevels]"
								layoutpolicy_horizontal = expanding
								text = "MY_REALM_WINDOW_MY_OBLIGATIONS"
							}

							button_text_cant = {
								layoutpolicy_horizontal = expanding
								# visible = "[VassalContract.IsContractDefault]"
							    blockoverride "text" {
							        raw_text = "Change contract."
							    }
								# blockoverride "disabled" {
								# 	visible = "[Not(Character.IsPlayerInteractionValid('vassal_modify_vassal_contract_interaction'))]"
								# }
								onclick = "[Character.OpenPlayerInteraction('vassal_modify_vassal_contract_interaction')]"
								tooltip = "[Character.GetPlayerInteractionTooltip('vassal_modify_vassal_contract_interaction')]"
								# enabled = "[Character.IsPlayerInteractionValid('vassal_modify_vassal_contract_interaction')]"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[Localize('VASSAL_CONTRACT_NOT_DEFAULT')]."
								visible = "[Not( VassalContract.IsContractDefault )]"
							}
						}
					}
				}

				### DOMAIN TAB
				vbox = {
					name = "tab_domain"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[Not(GetVariableSystem.Exists('realm_tabs'))]"

					using = Animation_Tab_Switch

					button_text = {
						layoutpolicy_horizontal = expanding
					    blockoverride "text" {
					        raw_text = "[Select_CString(GetVariableSystem.Exists('county_focus'), 'Show all', 'Show only counties')]."
					    }
						onclick = "[GetVariableSystem.Toggle('county_focus')]"
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content" {
							vbox = {
								datamodel = "[MyRealmWindow.GetDomainItems]"
								layoutpolicy_horizontal = expanding

								item = {
									vbox = {
										layoutpolicy_horizontal = expanding
										name = "duchy_group"

										button_text = {
											layoutpolicy_horizontal = expanding
										    blockoverride "text" {
										        raw_text = "[DuchyGroup.GetDuchy.GetNameNoTooltip],"
										    }
											blockoverride "extra" {
												text_single = {
													raw_text = " [GetDataModelSize(DuchyGroup.GetCounties)] counties."
													align = left
												}
											}
											datacontext = "[DuchyGroup.GetDuchy]"
											using = title_click
										}

										vbox = {
											name = "county_group"
											datamodel = "[DuchyGroup.GetCounties]"
											layoutpolicy_horizontal = expanding

											item = {
												vbox = {
													layoutpolicy_horizontal = expanding
													datacontext = "[CountyGroup.GetCounty]"
													datacontext = "[CountyGroup.GetCapitalProvince.GetCounty]"

													hbox = {
														layoutpolicy_horizontal = expanding
														spacing = 5

														button_text = {
														    blockoverride "text" {
														        raw_text = "[Title.GetNameNoTooltip]."
																align = left
														    }
															using = title_click
														}

														flowcontainer = {
															text_single = {
																name = "development"
																text = "MY_REALM_WINDOW_DEVELOPMENT"
																tooltip = "COUNTY_DEVELOPMENT_TOOLTIP"
															}

															text_single = {
																raw_text = ","
															}
														}

														text_single = {
															raw_text = "Opinion [GuiScope.SetRoot( County.GetTitle.MakeScope ).ScriptValue('county_opinion_val')|0+],"
															# tooltip = "COUNTY_OPINION_TOOLTIP_REALM" #TODO
														}

														text_single = {
															name = "tutorial_highlight_control"
															raw_text = "[CountyGroup.GetCountyControlColored]."
															tooltip = "MY_REALM_WINDOW_CONTROL_TOOLTIP"
														}

														expand = { }
													}

													hbox = {
													    layoutpolicy_horizontal = expanding
														margin_left = 5
													    spacing = 5

														text_single = {
															raw_text = "[County.GetFaith.GetAdjective], "
														}

														text_single = {
															raw_text = "[County.GetCulture.GetNameNoTooltip]."
														}

													    expand = { }
													}

													vbox = {
														visible = "[Not(GetVariableSystem.Exists('county_focus'))]"
														datamodel = "[CountyGroup.GetHoldings]"
														layoutpolicy_horizontal = expanding


														item = {
															vbox = {
																layoutpolicy_horizontal = expanding
																datacontext = "[HoldingItem.GetHolding]"

																hbox = {
																    layoutpolicy_horizontal = expanding
																	spacing = 3
																	button_text = {
																		blockoverride "text" {
																			text = "MY_REALM_WINDOW_HOLDING_NAME"
																			align = left
																		}
																		blockoverride "extra" {
																			text_single = {
																				raw_text = ", Realm capital"
																				visible = "[HoldingItem.IsRealmCapital]"
																				tooltip = "REALM_CAPITAL_TOOLTIP"
																			}
																			dot = { }
																		}
																		onclick = "[HoldingItem.OnClick]"
																		# onclick = "[MyRealmWindow.Close]" #TODO
																	}

																	hbox = {
																		layoutpolicy_horizontal = expanding
																		spacing = 3
																		text_single = {
																			raw_text = "Tax [Holding.GetIncome|1V], "
																			tooltip = "[Holding.GetTaxTooltip]"
																		}

																		text_single = {
																			raw_text = "Levies [Holding.GetMaxLevySize|0]."
																			tooltip = "[Holding.GetLeviesTooltip]"
																		}

																		text_single = {
																			visible = "[LessThan_float(Holding.GetUnraisedLevyRatioPercent, '(float)1')]"
																			raw_text = "[Holding.GetUnraisedLevyRatioPercent|0]% of total"
																		}

																		expand = { }
																	}

																    expand = { }
																}

																hbox = {
																    layoutpolicy_horizontal = expanding
																	spacing = 5
																	text_single = {
																		raw_text = "Can construct,"
																		visible = "[HoldingItem.GetHolding.CanConstructAnyBuilding(GetPlayer)]"
																	}
																	text_single = {
																		raw_text = "Empty slots [GuiScope.SetRoot(HoldingItem.GetHolding.GetProvince.MakeScope).ScriptValue('free_building_slots_sval')],"
																	}

																	text_single = {
																		raw_text = "Buildings [GuiScope.SetRoot(HoldingItem.GetHolding.GetProvince.MakeScope).ScriptValue('num_buildings_sval')]."
																	}

																	hbox = {
																		spacing = 3
																		tooltip = "MY_REALM_WINDOW_BUILDING_CONSTRUCTION_TT"

																		text_single = {
																			raw_text = "[HoldingItem.GetStatusText]."
																		}

																		text_single = {
																			raw_text = "[HoldingItem.GetHolding.GetConstructionProgress|%0]."
																		}
																		visible = "[HoldingItem.GetHolding.IsConstructionInProgress]"
																	}

																    expand = { }
																}
															}
														}
													}

													vbox = {
														layoutpolicy_horizontal = expanding
														visible = "[Not(GetVariableSystem.Exists('county_focus'))]"

														flowcontainer = {
															visible = "[DataModelHasItems(CountyGroup.GetEmptyHoldings)]"
															datamodel = "[CountyGroup.GetEmptyHoldings]"
															layoutpolicy_horizontal = expanding
															spacing = 3

															text_single = {
																raw_text = "[GetDataModelSize(CountyGroup.GetEmptyHoldings)] empty holdings"
															}

															item = {
																button_text = {
																	blockoverride "text" {
																		margin_left = -3
																		raw_text = "[HoldingItem.GetBarony.GetNameNoTierNoTooltip],"
																		visible = "[Not(Or(HoldingItem.GetHolding.CanConstructAnyBuilding(GetPlayer), HoldingItem.GetHolding.IsConstructionInProgress))]"
																		align = left
																	}
																	blockoverride "extra" {
																		text_single = {
																			raw_text = "Build new."
																			visible = "[HoldingItem.GetHolding.CanConstructAnyBuilding(GetPlayer)]"
																		}
																		text_single = {
																			visible = "[HoldingItem.GetHolding.IsConstructionInProgress]"
																			raw_text = "Building, [HoldingItem.GetHolding.GetConstructionProgress|%0]."
																		}
																	}
																	datacontext = "[HoldingItem.GetHolding]"
																	onclick = "[HoldingItem.OnClick]"
																}
															}
														}
													}

													expand = { }
												}
											}
										}
									}
								}
							}
						}
					}
				}

				### VASSALS TAB
				vbox = {
					name = "tab_vassals"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[GetVariableSystem.HasValue('realm_tabs', 'vassals')]"

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					hbox = {
						name = "government_filters_container"
						margin = { 0 7 }
						layoutpolicy_horizontal = expanding

						hbox = {
							name = "government_filters"
							datamodel = "[MyRealmWindow.GetGovernmentTypeHeaders]"
							spacing = 5

							button_text = {
							    blockoverride "text" {
									text = "MRW_GOVERNMENT_FILTER_ALL"
							    }
								blockoverride "extra" {
									text_single = {
										raw_text = ", selected"
										align = left
										visible = "[Not(MyRealmWindow.HasGovernmentTypeFilter)]"
									}
								}
								blockoverride "dot_nb" { }
								onclick = "[MyRealmWindow.ResetGovernmentTypeFilter]"
							}
							item = {
								button_text = {
								    blockoverride "text" {
										text = "MRW_GOVERNMENT_FILTER"
								    }
									blockoverride "extra" {
										text_single = {
											raw_text = ", selected"
											align = left
											visible = "[GovernmentTypeHeader.IsSelected]"
										}
									}
									blockoverride "dot_nb" { }
									onclick = "[GovernmentTypeHeader.OnClick]"
									datacontext = "[GovernmentTypeHeader.GetGovernmentType]"
								}
							}
						}

						expand = { }
					}

					text_single = {
						visible = "[MyRealmWindow.HasGovernmentTypeFilter]"
						margin_top = 5
						margin_bottom = 10

						text = "[MyRealmWindow.GetGovernmentTypeFilter.GetVassalsLabel]"
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_margins" {
							margin = { 5 5 }
							margin_top = 20
						}

						blockoverride "scrollbox_content"
						{
							visible = "[GreaterThan_int32( MyRealmWindow.GetVassalCount, '(int32)0' )]"

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[MyRealmWindow.GetPowerfulVassals]"
								datamodel = "[CharacterSelectionList.GetList]"
								visible = "[Not(CharacterSelectionList.IsBuildingList)]"
								addcolumn = 545
								addrow = 115
								setitemsizefromcell = yes

								item = {
									widget_vassal_list_item = {
										datacontext = "[CharacterListItem.GetCharacter]"
										datacontext = "[MyRealmWindow.GetVassalInfo( Character.Self )]"
										datacontext = "[MyRealmWindowVassalItem.GetContract]"

										blockoverride "vassal_portrait"
										{
											portrait_shoulders = { }
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[MyRealmWindow.GetRegularVassals]"
								datamodel = "[CharacterSelectionList.GetList]"
								visible = "[Not(CharacterSelectionList.IsBuildingList)]"
								addcolumn = 545
								addrow = 115
								setitemsizefromcell = yes

								item = {
									widget_vassal_list_item = {
										datacontext = "[CharacterListItem.GetCharacter]"
										datacontext = "[MyRealmWindow.GetVassalInfo( Character.Self )]"
										datacontext = "[MyRealmWindowVassalItem.GetContract]"
									}
								}
							}
							expand = { }
						}

						vbox = {
							visible = "[EqualTo_int32( MyRealmWindow.GetVassalCount, '(int32)0' )]"
							text_single = {
								text = "NO_VASSALS_TO_DISPLAY"
								default_format = "#weak"
							}
						}
					}
				}

				### SUCCESSION TAB
				vbox = {
					name = "tab_succession"
					visible = "[GetVariableSystem.HasValue('realm_tabs', 'succession')]"

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						vbox = {
							datamodel = "[MyRealmWindow.GetRealmLaws]"
							ignoreinvisible = yes
							layoutpolicy_horizontal = expanding

							item = {
								vbox = {
									visible = "[And( Not( GuiLawGroup.GetLawGroup.HasFlag( 'realm_law' ) ), GuiLawGroup.IsAvailable )]"
									layoutpolicy_horizontal = growing

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 3

										button_text = {
											onclick = "[OpenSuccessionLawChangeWindow(GuiLawGroup.Self)]"
											blockoverride "text" {
												text = "MRW_CHANGE_LAW"
												margin_top = 4
											}
											# tooltip = "MRW_CHANGE_LAW_TT"
											datacontext = "[GuiLawGroup]"
										}

										text_single = {
											raw_text = "[GuiLawGroup.GetLawGroup.GetNameSingular]:"
										}

										text_single = {
											raw_text = "[GuiLawGroup.GetCurrentLevel.GetLaw.GetName]."
										}

										expand = { }

									}

									text_single = {
										layoutpolicy_horizontal = expanding
										visible = "[GuiLawGroup.GetCurrentLevel.GetLaw.HasSubName]"
										raw_text = "[GuiLawGroup.GetCurrentLevel.GetLaw.GetSubName]."
									}
								}
							}
						}

						hbox = {
							layoutpolicy_horizontal = growing

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3


								button_text_cant = {
									blockoverride "text" {
										text = "MY_REALM_WINDOW_DESIGNATE_HEIR"
										margin_top = 3
									}
									blockoverride "disabled" {
										margin_top = 3
										visible = "[Not(MyRealmWindow.CanDesignateHeir)]"
									}
									tooltip = "MRW_DESIGNATE_HEIR_TT"
									enabled = "[MyRealmWindow.CanDesignateHeir]"
									onclick = "[OpenDesignateHeirWindow]"
								}

								text_single = {
									max_width = 350
									text = "MRW_DESIGNATED_HEIR_LABEL"
								}

								text_single = {
									visible = "[MyRealmWindow.GetCharacter.GetDesignatedHeir.IsValid]"
									text = "MRW_DESIGNATED_HEIR"
									max_width = 350
								}
								hbox = {
									text_single = {
										visible = "[Not(MyRealmWindow.GetCharacter.GetDesignatedHeir.IsValid)]"
										text = "MRW_NO_DESIGNATED_HEIR"
										max_width = 350
									}
									dot = { }
								}
								expand = { }
							}
						}
					}

					scrollbox = {
						name = "succession_scrollbox"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						minimumsize = { 0 350 }
						blockoverride "scrollbox_margins" {
							margin_top = 20
							margin_left = 5
						}

						blockoverride "scrollbox_content"
						{
							hbox = {
								name = "current_heir"
								layoutpolicy_horizontal = expanding

								background = {
									using =  Background_Area_Dark
									alpha = 0.8

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
										blend_mode = alphamultiply
										mirror = horizontal
									}
								}

								vbox = {
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding

									vbox = {
										layoutpolicy_horizontal = expanding

										text_single = {
											visible = "[MyRealmWindow.HasHeir]"
											layoutpolicy_horizontal = expanding

											raw_text = "[MyRealmWindow.GetCharacter.GetPlayerHeir.GetUINameNoTooltip]."
										}

										hbox = {
										    layoutpolicy_horizontal = expanding

											text_single = {
												visible = "[MyRealmWindow.HasHeir]"

												text = "MRW_YOUR_PLAYER_HEIR"
											}

											dot = { }

										    expand = { }
										}

									}

									vbox = {
										layoutpolicy_horizontal = expanding

										text_single = {
											name = "no_heir_warning"
											visible = "[Not( MyRealmWindow.HasHeir )]"
											layoutpolicy_horizontal = expanding
											text = "MY_REALM_WINDOW_NO_HEIR_FLAVOR"
										}

										text_single = {
											name = "not_primary_heir"
											visible = "[And( MyRealmWindow.HasHeir, Not( ObjectsEqual( MyRealmWindow.GetCharacter.GetPlayerHeir, MyRealmWindow.GetCharacter.GetPrimaryTitle.GetHeir.Self ) ) )]"
											layoutpolicy_horizontal = expanding
											text = "MY_REALM_WINDOW_NOT_PRIMARY_HEIR"
										}
									}

									expand = { }
								}
							}

							##### FROM REALM'S PARTITION #####
							vbox = {
								layoutpolicy_horizontal = expanding

								vbox = {
									name = "their_partition_share"
									visible = "[And(MyRealmWindow.HasPartition, DataModelHasItems(MyRealmWindow.GetMyPartitionShare))]"
									layoutpolicy_horizontal = expanding
									margin_left = 5

									hbox = {
										layoutpolicy_horizontal = expanding

										text_single = {
											raw_text = "You will inherit,  "
										}

										text_single = {
											# layoutpolicy_horizontal = expanding
											text = "MY_REALM_WINDOW_PARTITION_SHARE"
										}

										dot = { }

										expand = { }
									}

									vbox = {
										name = "partition_share_box"
										datamodel = "[MyRealmWindow.GetMyPartitionShare]"
										layoutpolicy_horizontal = expanding
										# size = { 460 55 }
										# spacing = 10

										item = {
											button = {
												onclick = "[DefaultOnCoatOfArmsClick(TitleItem.GetTitle.GetID)]"
												onclick = "[DefaultOnCoatOfArmsRightClick(TitleItem.GetTitle.GetID)]"
												button_ignore = none
												layoutpolicy_horizontal = expanding

												text_single = {
													layoutpolicy_horizontal = expanding
													raw_text = "[TitleItem.GetTitle.GetNameNoTooltip]."
													resizeparent = yes
													margin_left = 5
												}
											}
										}
									}
								}

								spacer = {
									size = { 5 5 }
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									visible = "[DataModelHasItems(MyRealmWindow.GetTitleSuccession)]"
									margin = { 5 0 }

									button_group = {
										onclick = "[GetVariableSystem.Toggle( 'expand_partition' )]"

										flowcontainer = {
											ignoreinvisible = yes

											text_single = {
												text = "MY_REALM_WINDOW_TITLES_LOST_ON_SUCCESSION"
												align = left
											}

											dot = { }
										}
									}

									expand = { }
								}

								spacer = {
									# visible = "[GetVariableSystem.Exists( 'expand_partition' )]"
									size = { 5 5 }
								}

								vbox = {
									name = "title_succession"
									datamodel = "[MyRealmWindow.GetTitleSuccession]"
									# visible = "[GetVariableSystem.Exists( 'expand_partition' )]"
									layoutpolicy_horizontal = expanding

									item = {
										hbox = {
											# maximumsize = { -1 100 }
											layoutpolicy_horizontal = expanding
											margin_left = 10
											margin_bottom = 5
											datacontext = "[TitleSuccessionItem.GetHeir]"

											background = {
												using = Background_Area_With_Header
											}

											vbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = growing
												# margin_bottom = 5

												button = {
													onclick = "[DefaultOnCharacterClick(Character.GetID)]"
													onclick = "[DefaultOnCharacterClick(Character.GetID)]"
													# onclick = "[DefaultOnCoatOfArmsRightClick(Character.CapitalLocation.GetCoATitle.GetID)]"
													onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
													button_ignore = none
													layoutpolicy_horizontal = expanding

													text_single = {
														name = "heir_name"
														raw_text = "To [Character.GetUINameNoTooltip],"
														layoutpolicy_horizontal = expanding
														margin_left = 5
														resizeparent = yes
														# using = Font_Size_Medium
														# max_width = 400
														# fontsize_min = 14
													}
												}

												text_single = {
													name = "heir_not_your_dynasty"
													layoutpolicy_horizontal = expanding

													text = "MY_REALM_WINDOW_HEIR_NOT_MY_DYNASTY"
													visible = "[Not(ObjectsEqual(Character.GetHouse.GetDynasty.Self, GetPlayer.GetHouse.GetDynasty.Self))]"
													using = Font_Size_Small
												}

												vbox = {
													name = "titles_box"
													layoutpolicy_horizontal = expanding
													datamodel = "[TitleSuccessionItem.GetPartitionTitles]"
													visible = "[DataModelHasItems(TitleSuccessionItem.GetPartitionTitles)]"
													# minimumsize = { 350 50 }
													spacing = 0

													item = {
														hbox = {
															layoutpolicy_horizontal = expanding

															button = {
																onclick = "[DefaultOnCoatOfArmsClick(TitleItem.GetTitle.GetID)]"
																onclick = "[DefaultOnCoatOfArmsRightClick(TitleItem.GetTitle.GetID)]"
																button_ignore = none
																layoutpolicy_horizontal = expanding
																text_single = {
																	layoutpolicy_horizontal = expanding
																	raw_text = "[TitleItem.GetTitle.GetNameNoTooltip]."
																	resizeparent = yes
																	margin_left = 5
																}
															}

															# coa_title_tiny_crown = {
															# 	datacontext = "[TitleItem.GetTitle]"
															# 	using = tooltip_ne
															# }

															# icon = {
															# 	name = "has_laws"
															# 	visible = "[TitleItem.GetTitle.HasLaws]"
															# 	parentanchor = bottom|right
															# 	size = { 25 25 }
															# 	position = { 5 0 }
															# 	texture = "gfx/interface/icons/title_status/icon_title_law.dds"
															# }
														}
													}
												}

												text_single = {
													name = "exception_label"
													visible = "[DataModelHasItems(TitleSuccessionItem.GetExceptionTitles)]"
													layoutpolicy_horizontal = expanding

													text = "MY_REALM_WINDOW_EXCEPTIONS"
												}

												vbox = {
													layoutpolicy_horizontal = expanding
													name = "exception_box"
													datamodel = "[TitleSuccessionItem.GetExceptionTitles]"
													visible = "[DataModelHasItems(TitleSuccessionItem.GetExceptionTitles)]"
													# minimumsize = { 350 50 }
													# spacing = 10

													item = {
														button = {
															onclick = "[DefaultOnCoatOfArmsClick(TitleItem.GetTitle.GetID)]"
															onclick = "[DefaultOnCoatOfArmsRightClick(TitleItem.GetTitle.GetID)]"
															button_ignore = none
															layoutpolicy_horizontal = expanding

															text_single = {
																layoutpolicy_horizontal = expanding
																raw_text = "[TitleItem.GetTitle.GetNameNoTooltip]."
																resizeparent = yes
																margin_left = 5
															}
														}
													}
												}
											}

											# vbox = {
											# 	portrait_head = {
											# 		name = "primary_spouse_portrait"
											# 		blockoverride "portrait_button" {
											# 			using = tooltip_ws
											# 		}
											# 	}
											#
											# 	expand = { }
											# }
										}
									}
								}
							}

							vbox = {
								name = "exceptions"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = growing
								margin_left = 5

								visible = "[DataModelHasItems(MyRealmWindow.GetSuccessionExceptions)]"

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										layoutpolicy_horizontal = expanding
										text = "MY_REALM_WINDOW_EXCEPTIONS"
									}

									expand = { }
								}

								vbox = {
									name = "exceptions_box"
									layoutpolicy_horizontal = expanding
									# size = { 460 55 }
									# spacing = 10

									datamodel = "[MyRealmWindow.GetSuccessionExceptions]"

									item = {
										button = {
											onclick = "[DefaultOnCoatOfArmsClick(TitleItem.GetTitle.GetID)]"
											onclick = "[DefaultOnCoatOfArmsRightClick(TitleItem.GetTitle.GetID)]"
											button_ignore = none
											layoutpolicy_horizontal = expanding

											text_single = {
												layoutpolicy_horizontal = expanding
												raw_text = "[TitleItem.GetTitle.GetNameNoTooltip]."
												resizeparent = yes
												margin_left = 5
											}
										}
									}
								}
							}

							vbox = {
								name = "line_of_succession"
								visible = "[MyRealmWindow.HasSingleHeir]"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = growing
								spacing = 10

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										name = "line_of_succession_label"
										layoutpolicy_horizontal = expanding
										text = "MY_REALM_WINDOW_LINE_OF_SUCCESSION"
									}

									expand = { }
								}

								flowcontainer = {
									name = "line_of_succession_box"
									layoutpolicy_horizontal = expanding
									spacing = 0
									direction = vertical
									margin_right = 10

									datamodel = "[MyRealmWindow.GetLineOfSuccession]"

									item = {
										char_name = {

										}
									}
								}
							}

							#### ELECTIONS ####
							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[MyRealmWindow.CanVote]"
								margin_left = 5

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										layoutpolicy_horizontal = expanding
										text = "MY_REALM_WINDOW_ELECTIONS"
									}

									expand = { }
								}

								flowcontainer = {
									name = "elections"
									direction = vertical

									fixedgridbox = {
										name = "exceptions_box"
										addcolumn = 600
										addrow = 42
										datamodel = "[MyRealmWindow.GetTitlesCanVote]"

										item = {
											widget = {
												name = "election_title"
												size = { 510 40 }
												datacontext = "[TitleItem.GetTitle]"

												hbox = {

													vbox = {
														layoutpolicy_horizontal = expanding
														button_text = {
															layoutpolicy_horizontal = expanding
															using = title_click
														    blockoverride "text" {
														       text = "[Title.GetNameNoTooltip]"
														    }
														}
														hbox = {
															layoutpolicy_horizontal = expanding

															button_text = {
																layoutpolicy_horizontal = expanding
															    blockoverride "text" {
																	text = "MY_REALM_WINDOW_VOTE"
															    }
																onclick = "[OpenSuccessionElectionWindowForTitle(Title.Self)]"
															}

															expand = { }
														}
													}

													expand = { }
												}
											}
										}
									}
								}
							}

							expand = {
								layoutpolicy_vertical = expanding
							}
						}
					}
				}

				# special
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					visible = "[GetVariableSystem.HasValue('realm_tabs', 'holdings')]"

					# button_text = {
					# 	layoutpolicy_horizontal = expanding
					# 	blockoverride "text" {
					# 		raw_text = "Sorted by [GetPlayer.MakeScope.Var('sort_sp_buildings').GetFlagName]. Change, hotkey T."
					# 	}
					# 	shortcut = map_mode_2
					# 	onclick = "[GetVariableSystem.Set('sp_sorting', 'yes')]"
					# }

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						button_text = {
							blockoverride "text" {
							}
							blockoverride "extra" {
								text_single = {
									raw_text = "[Select_CString(ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ), 'Sorted by distance, sort by tax', 'Sorted by tax, sort by distance')], hotkey T."
								}
							}
							onclick = "[GetScriptedGui('sort_sp_tax').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
							onclick = "[GetScriptedGui('special_buildings_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
							# onclick = "[GetVariableSystem.Clear('sp_sorting')]"
							datacontext = "[GetScriptedGui('sort_sp_tax')]"
							shortcut = map_mode_2
						}

						button_text = {
						    blockoverride "text" {
						        raw_text = "[Select_CString(GetPlayer.MakeScope.Var('empty_sp_slots').IsSet, 'Show special buildings', 'Show empty special slots')] , hotkey E."
								align = left
						    }
							shortcut = map_mode_1
							onclick = "[GetScriptedGui('filter_sp_slots').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
							onclick = "[GetScriptedGui('special_buildings_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						}

						expand = { }
					}

					widget = {
						size = { 0 5 }
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						blockoverride "scrollbox_margins" {
							margin_top = 20
						}

						blockoverride "scrollbox_content" {
							fixedgridbox = {
								datamodel = "[GetPlayer.MakeScope.GetList('special_buildings')]"

								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								addrow = 25
								addcolumn = 600

								item = {
									button_text = {
										datacontext = "[Scope.GetProvince]"
										onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Scope.Province.GetId))]"
										onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"

										blockoverride "text" {
										}

										blockoverride "extra" {
											text_single = {
												max_width = 300
												alwaystransparent = yes
												raw_text = "[Localize(AddTextIf(Province.MakeScope.Var('special_building').IsSet, Concatenate( 'building_', Province.MakeScope.Var('special_building').GetFlagName)))]"
												raw_tooltip = "[Localize(AddTextIf(Province.MakeScope.Var('special_building').IsSet, Concatenate( Concatenate( 'building_', Province.MakeScope.Var('special_building').GetFlagName), '_desc')))]"
												tooltip_enabled = "[Not(IsGameViewOpen('holding_view'))]"
											}

											text_single = {
												raw_text = "[AddTextIf(Not(Province.MakeScope.Var('special_building').IsSet), 'Empty slot')]"
											}

											text_single = {
												raw_text = ", in [Province.GetNameNoTooltip]"
											}

											text_single = {
												raw_text = ". Tax [Province.GetHolding.GetIncome|1=]"
												tooltip = "[Province.GetHolding.GetTaxTooltip]"

											}
											text_single = {
												raw_text = ", levies [Province.GetHolding.GetMaxLevySize|0]."
												tooltip = "[Province.GetHolding.GetLeviesTooltip]"
												# [GuiScope.SetRoot(Province.MakeScope).ScriptValue('building_levies')]
											}

											# text_single = {
											# 	raw_text = "[Province.GetTitle.GetDeFactoTopLiege.GetNameNoTierNoTooltip]."
											# }

											# char_name = {
											# 	datacontext = "[Province.GetTitle.GetDeFactoTopLiege.GetHolder]"
											# 	blockoverride "pre" {
											# 		text_single = {
											# 			raw_text = "Owner: "
											# 		}
											# 	}
											#
											# }
										}
									}
								}
							}
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					#TODO show your own region

					visible = "[GetVariableSystem.HasValue('realm_tabs', 'rulers')]"

					# close
					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "Ruler browser tab, close with G."
						}
						onclick = "[GetVariableSystem.Clear('realm_tabs')]"
						shortcut = army_merge
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						blockoverride "scrollbox_margins" {
							margin_top = 20
						}
						blockoverride "scrollbox_content" {

							vbox = {
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								vbox = {
									visible = "[Not(GetVariableSystem.Exists('region'))]"
									layoutpolicy_horizontal = expanding

									vbox = {
										visible = "[Not(Or(GetVariableSystem.Exists('major_region'), GetVariableSystem.Exists('second_region') ) )]"
										layoutpolicy_horizontal = expanding

										text_single = {
											layoutpolicy_horizontal = expanding
											raw_text = "There are [GetGlobalVariable('all_landed_rulers').GetValue] independent rulers."
										}
										text_single = {
											layoutpolicy_horizontal = expanding
											margin_left = 5
											raw_text = "You can use number keys to select."
										}
										# major regions
										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "1. [Localize('world_europe')], [GetDataModelSize(GetGlobalList('world_europe'))] rulers."
											}
											onclick = "[GetVariableSystem.Set('major_region', 'world_europe')]"
											shortcut = speed_1
										}

										# region
										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "2. [Localize('world_asia_minor')], [GetDataModelSize(GetGlobalList('world_asia_minor'))]."
											}
											onclick = "[GetVariableSystem.Set('region', 'world_asia_minor')]"
											shortcut = speed_2
										}

										# major regions
										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "3. [Localize('world_middle_east')], [GetDataModelSize(GetGlobalList('world_middle_east'))]."
											}
											onclick = "[GetVariableSystem.Set('major_region', 'world_middle_east')]"
											shortcut = speed_3
										}
										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "4. [Localize('world_india')], [GetDataModelSize(GetGlobalList('world_india'))]."
											}
											onclick = "[GetVariableSystem.Set('major_region', 'world_india')]"
											shortcut = speed_4
										}
										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "5. [Localize('world_africa')], [GetDataModelSize(GetGlobalList('world_africa'))]."
											}
											onclick = "[GetVariableSystem.Set('major_region', 'world_africa')]"
											shortcut = speed_5
										}
										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "[Localize('world_steppe')], [GetDataModelSize(GetGlobalList('world_steppe'))]."
											}
											onclick = "[GetVariableSystem.Set('major_region', 'world_steppe')]"
											shortcut = map_mode_2
										}

										# regions

										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "[Localize('world_tibet')], [GetDataModelSize(GetGlobalList('world_tibet'))]."
											}
											onclick = "[GetVariableSystem.Set('region', 'world_tibet')]"
											shortcut = map_mode_4
										}
										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "[Localize('world_burma')], [GetDataModelSize(GetGlobalList('world_burma'))]."
											}
											onclick = "[GetVariableSystem.Set('region', 'world_burma')]"
											shortcut = mapmode_duchies_secondary
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										visible = "[And(GetVariableSystem.Exists('major_region'), Not(GetVariableSystem.Exists('second_region')))]"

										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "[Localize(GetVariableSystem.Get('major_region'))], [GetDataModelSize(GetGlobalList(GetVariableSystem.Get('major_region')))] rulers. Go back, hotkey B."
											}
											onclick = "[GetVariableSystem.Clear('major_region')]"
											onclick = "[GetVariableSystem.Clear('second_region')]"
											onclick = "[GetVariableSystem.Clear('region')]"
											shortcut = go_back
										}

										# europe
										vbox = {
											visible = "[GetVariableSystem.HasValue('major_region', 'world_europe')]"
											layoutpolicy_horizontal = expanding

											vbox = {
												layoutpolicy_horizontal = expanding

												button_text = {
													layoutpolicy_horizontal = expanding
													blockoverride "text" {
														raw_text = "1. [Localize('world_europe_west')], [GetDataModelSize(GetGlobalList('world_europe_west'))]."
													}
													onclick = "[GetVariableSystem.Set('second_region', 'world_europe_west')]"
													shortcut = speed_1
												}

												button_text = {
													layoutpolicy_horizontal = expanding
													blockoverride "text" {
														raw_text = "2. [Localize('world_europe_north')], [GetDataModelSize(GetGlobalList('world_europe_north'))]."
													}
													onclick = "[GetVariableSystem.Set('region', 'world_europe_north')]"
													shortcut = speed_2
												}

												button_text = {
													layoutpolicy_horizontal = expanding
													blockoverride "text" {
														raw_text = "3. [Localize('world_europe_east')], [GetDataModelSize(GetGlobalList('world_europe_east'))]."
													}
													onclick = "[GetVariableSystem.Set('region', 'world_europe_east')]"
													shortcut = speed_3
												}

												button_text = {
													layoutpolicy_horizontal = expanding
													blockoverride "text" {
														raw_text = "4. [Localize('world_europe_south_east')], [GetDataModelSize(GetGlobalList('world_europe_south_east'))]."
													}
													onclick = "[GetVariableSystem.Set('region', 'world_europe_south_east')]"
													shortcut = speed_4
												}

												button_text = {
													layoutpolicy_horizontal = expanding
													blockoverride "text" {
														raw_text = "5. [Localize('world_europe_south_italy')], [GetDataModelSize(GetGlobalList('world_europe_south_italy'))]."
													}
													onclick = "[GetVariableSystem.Set('region', 'world_europe_south_italy')]"
													shortcut = speed_5
												}
											}
										}

										# ME
										vbox = {
											visible = "[GetVariableSystem.HasValue('major_region', 'world_middle_east')]"
											layoutpolicy_horizontal = expanding

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "1. [Localize('world_middle_east_arabia')], [GetDataModelSize(GetGlobalList('world_middle_east_arabia'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_middle_east_arabia')]"
												shortcut = speed_1
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "2. [Localize('world_middle_east_persia')], [GetDataModelSize(GetGlobalList('world_middle_east_persia'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_middle_east_persia')]"
												shortcut = speed_2
											}
											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "3. [Localize('world_middle_east_jerusalem')], [GetDataModelSize(GetGlobalList('world_middle_east_jerusalem'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_middle_east_jerusalem')]"
												shortcut = speed_3
											}
										}

										# India
										vbox = {
											visible = "[GetVariableSystem.HasValue('major_region', 'world_india')]"
											layoutpolicy_horizontal = expanding

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "1. [Localize('world_india_bengal')], [GetDataModelSize(GetGlobalList('world_india_bengal'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_india_bengal')]"
												shortcut = speed_1
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "2. [Localize('world_india_rajastan')], [GetDataModelSize(GetGlobalList('world_india_rajastan'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_india_rajastan')]"
												shortcut = speed_2
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "3. [Localize('world_india_deccan')], [GetDataModelSize(GetGlobalList('world_india_deccan'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_india_deccan')]"
												shortcut = speed_3
											}

										}

										# Africa
										vbox = {
											visible = "[GetVariableSystem.HasValue('major_region', 'world_africa')]"
											layoutpolicy_horizontal = expanding

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "1. [Localize('world_africa_north_west')], [GetDataModelSize(GetGlobalList('world_africa_north_west'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_africa_north_west')]"
												shortcut = speed_1
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "2. [Localize('world_africa_west')], [GetDataModelSize(GetGlobalList('world_africa_west'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_africa_west')]"
												shortcut = speed_2
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "3. [Localize('world_africa_north_east')], [GetDataModelSize(GetGlobalList('world_africa_north_east'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_india_deccan')]"
												shortcut = speed_3
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "4. [Localize('world_africa_east')], [GetDataModelSize(GetGlobalList('world_africa_east'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_africa_east')]"
												shortcut = speed_4
											}

										}

										# steppe
										vbox = {
											visible = "[GetVariableSystem.HasValue('major_region', 'world_steppe')]"
											layoutpolicy_horizontal = expanding

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "1. [Localize('world_steppe_west')], [GetDataModelSize(GetGlobalList('world_steppe_west'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_steppe_west')]"
												shortcut = speed_1
											}
											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "2. [Localize('world_steppe_east')], [GetDataModelSize(GetGlobalList('world_steppe_east'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_steppe_east')]"
												shortcut = speed_2
											}
											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "3. [Localize('world_steppe_tarim')], [GetDataModelSize(GetGlobalList('world_steppe_tarim'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_steppe_tarim')]"
												shortcut = speed_3
											}

										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										visible = "[GetVariableSystem.Exists('second_region')]"

										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "[Localize(GetVariableSystem.Get('second_region'))], [GetDataModelSize(GetGlobalList(GetVariableSystem.Get('second_region')))] rulers. Go back, hotkey B."
											}
											onclick = "[GetVariableSystem.Clear('second_region')]"
											onclick = "[GetVariableSystem.Clear('region')]"
											shortcut = go_back
										}

										# western europe
										vbox = {
											visible = "[GetVariableSystem.HasValue('second_region', 'world_europe_west')]"
											layoutpolicy_horizontal = expanding

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "1. [Localize('world_europe_west_britannia')], [GetDataModelSize(GetGlobalList('world_europe_west_britannia'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_europe_west_britannia')]"
												shortcut = speed_1
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "2. [Localize('world_europe_west_germania')], [GetDataModelSize(GetGlobalList('world_europe_west_germania'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_europe_west_germania')]"
												shortcut = speed_2
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "3. [Localize('world_europe_west_francia')], [GetDataModelSize(GetGlobalList('world_europe_west_francia'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_europe_west_francia')]"
												shortcut = speed_3
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "4. [Localize('world_europe_west_iberia')], [GetDataModelSize(GetGlobalList('world_europe_west_iberia'))]."
												}
												onclick = "[GetVariableSystem.Set('region', 'world_europe_west_iberia')]"
												shortcut = speed_4
											}
										}
									}
								}

								# list of regions
								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[GetVariableSystem.Exists('region')]"

									button_text = {
										layoutpolicy_horizontal = expanding
										blockoverride "text" {
											raw_text = "[Localize(GetVariableSystem.Get('region'))], [GetDataModelSize(GetGlobalList(GetVariableSystem.Get('region')))] rulers. Go back, hotkey B."
										}
										onclick = "[GetVariableSystem.Clear('region')]"
										shortcut = go_back
									}

									### Europe ###

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_europe_west_britannia')]"
										datamodel = "[GetGlobalList('world_europe_west_britannia')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_europe_west_germania')]"
										datamodel = "[GetGlobalList('world_europe_west_germania')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_europe_west_francia')]"
										datamodel = "[GetGlobalList('world_europe_west_francia')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_europe_west_iberia')]"
										datamodel = "[GetGlobalList('world_europe_west_iberia')]"
									}

									#

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_europe_south_east')]"
										datamodel = "[GetGlobalList('world_europe_south_east')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_europe_south_italy')]"
										datamodel = "[GetGlobalList('world_europe_south_italy')]"
									}


									###


									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_africa_north_west')]"
										datamodel = "[GetGlobalList('world_africa_north_west')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_africa_north_east')]"
										datamodel = "[GetGlobalList('world_africa_north_east')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_africa_west')]"
										datamodel = "[GetGlobalList('world_africa_west')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_africa_east')]"
										datamodel = "[GetGlobalList('world_africa_east')]"
									}

									###

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_middle_east_jerusalem')]"
										datamodel = "[GetGlobalList('world_middle_east_jerusalem')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_middle_east_arabia')]"
										datamodel = "[GetGlobalList('world_middle_east_arabia')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_middle_east_persia')]"
										datamodel = "[GetGlobalList('world_middle_east_persia')]"
									}


									###

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_steppe_tarim')]"
										datamodel = "[GetGlobalList('world_steppe_tarim')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_steppe_west')]"
										datamodel = "[GetGlobalList('world_steppe_west')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_steppe_east')]"
										datamodel = "[GetGlobalList('world_steppe_east')]"
									}

									###


									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_india_deccan')]"
										datamodel = "[GetGlobalList('world_india_deccan')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_india_bengal')]"
										datamodel = "[GetGlobalList('world_india_bengal')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_india_rajastan')]"
										datamodel = "[GetGlobalList('world_india_rajastan')]"
									}

									###

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_europe_north')]"
										datamodel = "[GetGlobalList('world_europe_north')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_europe_east')]"
										datamodel = "[GetGlobalList('world_europe_east')]"
									}


									###

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_asia_minor')]"
										datamodel = "[GetGlobalList('world_asia_minor')]"
									}

									####

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_tibet')]"
										datamodel = "[GetGlobalList('world_tibet')]"
									}

									region_list = {
										visible = "[GetVariableSystem.HasValue('region', 'world_burma')]"
										datamodel = "[GetGlobalList('world_burma')]"
									}

								}

								expand = { }
							}
						}
					}

					expand = { }
				}
			}
			# sp sorting
			vbox = {
				using = Window_Background_No_Edge
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				visible = no# "[GetVariableSystem.Exists('sp_sorting')]"
				margin = { 5 0 }
				alwaystransparent = no

				button = {
					onclick = "[GetVariableSystem.Clear('sp_sorting')]"
					shortcut = close_window
					shortcut = map_mode_2
				}

				vbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					spacing = 3

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "Sort buildings by:"
						margin_bottom = 5
						background = { using = Background_Area_Border_Solid }
					}


					# button_text = {
					# 	layoutpolicy_horizontal = expanding
					# 	blockoverride "text" {
					# 		raw_text = "Levies."
					# 	}
					# 	onclick = "[GetScriptedGui('sort_sp_levies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					# 	onclick = "[GetScriptedGui('special_buildings_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					# 	onclick = "[GetVariableSystem.Clear('sp_sorting')]"
					# }



					expand = { }
				}
			}
		}
	}

	window_realm_old = {
		visible = "[GetVariableSystem.Exists('ocr')]"
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types MyRealmWindow
{
	type my_realm_window_contribution_tooltip = container {
		alwaystransparent = no
		widget = {
			name = "background"
			using = Background_Tooltip
			size = { 100% 100% }
			alwaystransparent = no
		}

		flowcontainer = {
			margin = { 10 0 }
			margin_top = 10
			spacing = 15
			direction = vertical
			ignoreinvisible = yes

			text_single = {
				margin = { 5 0 }
				block "contribution_tooltip_header" { }
			}

			widget_gold_breakdown_tooltip = {
				layoutpolicy_horizontal = expanding
				blockoverride "income"
				{
					visible = no
				}

				blockoverride "background" { }
			}

			block "contribution_tooltip_content_suffix" {
				text_single = {
					multiline = yes
					maximumsize = { 250 -1 }
					text = "MY_REALM_WINDOW_CONTRIBUTION_TO_THEOCRATIC_LIEGE"
					visible = "[Character.IsTheocraticLessee]"
				}
			}

			flowcontainer = {
				spacing = 15
				direction = vertical
				ignoreinvisible = yes
				block "tax_info_visible" { }
				block "tax_info" { }
			}

			flowcontainer = {
				spacing = 15
				direction = vertical
				ignoreinvisible = yes
				block "levy_info_visible" { }
				block "levy_info" { }
			}
		}
	}

	type vassal_contract_not_default_icon = icon
	{
		texture = "gfx/interface/icons/icon_contract_modification.dds"
		framesize = { 60 60 }
		frame = 1
		name = "vassal_contract_not_default"
		size = { 25 25 }
		visible = "[Not( VassalContract.IsContractDefault )]"
		tooltip = "VASSAL_CONTRACT_NOT_DEFAULT"
	}
}
