types OCRTypes {

	type ocr_character_vbox = vbox {
		visible = "[Not(GetVariableSystem.Exists('ocr'))]"
		name = "main_content_ocr"
		# using = Window_Margins_Sidebar
		# alpha = "[Select_float(  ), '(float)1.0', '(float)0.5' )]"

		widget = {
			layoutpolicy_horizontal = expanding
			size = { 0 0 }
			alpha = 0

			button = {
				size = { 0 0 }
				shortcut = "map_mode_1"
				onclick = "[GetVariableSystem.Set('expand_view', 'family')]"
			}
			# button = {
			# 	size = { 0 0 }
			# 	shortcut = "map_mode_3"
			# 	onclick = "[GetVariableSystem.Clear('expand_view')]"
			# }

			buttons_window_control = {
				parentanchor = top|right

				blockoverride "button_close"
				{
					onclick = "[CharacterWindow.Close]"
				}

				blockoverride "button_back"
				{
					visible = "[HasViewHistory]"
					onclick = "[OpenFromViewHistory]"
					tooltip = "[GetViewHistoryTooltip]"
					onclick = "[PdxGuiTriggerAllAnimations('pan_to_previos_ruler')]"

					state = {
						name = "pan_to_previos_ruler"
						delay = 0.1
						# on_start = "[DefaultOnCoatOfArmsRightClick(CharacterWindow.GetCharacter.GetCapitalLocation.GetCoATitle.GetID)]"
						on_start = "[DefaultOnCharacterClick(CharacterWindow.GetCharacter.GetID)]"
						on_start = "[DefaultOnCharacterClick(CharacterWindow.GetCharacter.GetID)]"
					}
				}

				blockoverride "button_me"
				{
					visible = "[Not(Character.IsLocalPlayer)]"
					onclick = "[DefaultOnCharacterClick(GetPlayer.GetID)]"
				}

				blockoverride "button_pin" { }
			}

			button_normal = {
				name = "open_royal_court"
				size = { 70 70 }
				visible = no#"[Character.HasRoyalCourt]"

				position = { -30 -30 }

				onclick = "[CharacterWindow.Close]"
				onclick = "[Character.OpenRoyalCourtView( 'characters' )]"
				datacontext = "[Character.GetCourtGrandeurData]"
				tooltip = OPEN_ROYAL_COURT_TOOLTIP

				icon = {
					texture = "gfx/interface/buttons/button_lifestyles_base.dds"
					size = { 100% 100% }
				}

				button_royal_court = {
					onclick = "[CharacterWindow.Close]"
					onclick = "[Character.OpenRoyalCourtView( 'characters' )]"

					size = { 30 30 }
					parentanchor = center
					position = { 9 10 }

					modify_texture = {
						texture = "gfx/interface/icons/focuses/hud_icon_mask.dds"
						blend_mode = alphamultiply
					}
				}
			}
		}

		############################
		### Character internal info

		#main view
		vbox = {
			# size = { 0 560 }
			layoutpolicy_horizontal = preferred
			scissor = yes

			vbox = {
				layoutpolicy_horizontal = expanding
				# resizeparent = yes
				margin = { 10 10 }

				background = {
					using = Background_Area_Dark
					margin_left = 3
				}
				# #
				# text_single = {
				# 	layoutpolicy_horizontal = expanding
				# 	raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('height_value')]"
				# }

				# text_single = {
				# 	layoutpolicy_horizontal = expanding
				# 	raw_text = "teet"
				# 	visible = "[GreaterThan_float(Character.CalcMorphGeneAttribute('gene_bs_nose_size', 'bs_nose_size_max'), '(float)0')]"
				# }

				# datacontext = "[GetIllustration( 'character_view_bg' )]"

				widget = {
					size = { 600 900 }
					visible = no

					portrait_button = {
						size = { 700 900 }
						using = portrait_base
						position = { -400 0 }

						portrait_texture = "[Character.GetAnimatedPortrait('environment_council', 'camera_main_menu_main', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
						mask = "gfx/portraits/portrait_mask_council.dds"
						effectname = "NoHighlight"

						block "mask" {
							mask = "gfx/portraits/portrait_mask_council.dds"
						}

						text_single = {
							parentanchor = right
							position = { -200 0 }
							raw_text = "[Multiply_float( Add_float( Character.CalcMorphGeneAttribute('gene_height', 'body_height'), '(float)1' ), FixedPointToFloat(GuiScope.SetRoot(Character.MakeScope).ScriptValue('sex_height')) )|0],"
						}
					}

					portrait_button = {
						visible = "[Character.IsValid]"
						position = { -200 0 }
						datacontext = "[CharacterWindow.GetCharacter.GetPrimarySpouse]"
						size = { 700 900 }
						using = portrait_base

						portrait_texture = "[Character.GetAnimatedPortrait('environment_council', 'camera_main_menu_main', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
						mask = "gfx/portraits/portrait_mask_council.dds"
						effectname = "NoHighlight"

						block "mask" {
							mask = "gfx/portraits/portrait_mask_council.dds"
						}

						text_single = {
							parentanchor = hcenter
							raw_text = "[Multiply_float( Add_float( Character.CalcMorphGeneAttribute('gene_height', 'body_height'), '(float)1' ), FixedPointToFloat(GuiScope.SetRoot(Character.MakeScope).ScriptValue('sex_height')) )|0],"
						}
					}
				}

				#name
				hbox = {
					layoutpolicy_horizontal = expanding
					# margin = { 3 0 }
					spacing = 3

					text_single = {
						visible = "[Character.IsDeadAndValid]"
						raw_text = "Dead."
						margin_right = -3
					}
					text_single = {
						visible = "[Character.IsImprisoned]"
						raw_text = "In prison."
						margin_right = -3
					}

					button = {
						size = { 0 20 }
						# raw_tooltip = "Click to pan camera. Right-click to open interactions."
						button_ignore = none
						using = tooltip_ne
						onclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
						onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"

						flowcontainer = {
							resizeparent = yes
							ignoreinvisible = yes
							spacing = 3
							margin_left = 5

							# text_single = {
							# 	raw_text = "[Character.GetPrimaryTitle.GetNameNoTooltip]."
							# 	visible = "[Character.HasLandedTitle]"
							# }

							text_single = {
								name = "character_name"
								raw_text = "[Character.GetTitledFirstNameNicknamedNoTooltipRegnal]." #Character.GetNameNicknamedNoTooltipRegnal
								#GetUINameNotMeNoTooltip
								# GetTitledFirstNameNicknamedNoTooltipRegnal
								max_width = 370
								fontsize_min = 14
							}
						}
					}

					text_single = {
						raw_text = "[Character.GetAge] years,"
						tooltip = "[Character.GetDeathOrBirthDateInfo]"
						# visible = "[Character.IsAlive]"
					}

					text_single = {
						raw_text = "[Character.Custom('character_health')] health."
						visible = "[Not(Character.IsDeadAndValid)]"

						tooltipwidget = {
							health_tooltip = { }
						}


						# tooltip = "[Character.GetHealthInfo]"
					}

					button = {
						visible = "[Not(Character.IsLocalPlayer)]"
						onclick = "[Character.ToggleCharacterPinned]"
						text_single = {
							margin_left = 2
							resizeparent = yes
							raw_text = "[AddTextIf(Character.IsPinned, 'Un')]pin [Select_CString(Character.IsPinned, 'from', 'to')] outliner."
						}
					}

					# button_text = {
					#     blockoverride "text" {
					#         raw_text = "Interact, Enter."
					# 		align = left
					#     }
					# 	onclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
					# 	shortcut = confirm
					# }

					expand = { }
				}

				widget = {
					size = { 0 23 }
					layoutpolicy_horizontal = expanding
					scissor = yes
					raw_tooltip = "[Character.GetDebugTooltip]"

					text_single = {
						margin_left = 5
						raw_text = "View debug tooltip."
					}

					text_single = {
						margin_left = 5
						raw_text = "[Character.GetDebugTooltip]."
						position = { 145 -21 }
					}

					visible = "[InDebugMode]"
				}

				# ruler
				button_text = {
					layoutpolicy_horizontal = expanding
					visible = "[Character.HasLandedTitles]"
				    blockoverride "text" {
				        raw_text = "Ruler of [Character.GetPrimaryTitle.GetNameNoTierNoTooltip]"
						align = left
				    }
					blockoverride "extra" {

						text_single = {
							raw_text = ", "
						}

						text_single = {
							raw_text = " Independent"
							visible = "[Character.IsIndependentRuler]"
						}

						text_single = {
							visible = "[Character.IsAlive]"
							name = "character_title"
							raw_text = " [Character.GetGovernment.GetAdjective]"
							max_width = 330
						}

						text_single = {
							raw_text = " [Character.GetPrimaryTitle.GetRankConcept]."
							max_width = 330
						}

						button_text = {
							visible = "[Character.IsAlive]"
						    blockoverride "text" {
						    	raw_text = " [Character.RealmSize] counties."
								align = left
								margin_left = -3
						    }
							onclick = "[GetVariableSystem.Set('expand_view', 'counties')]"
							onclick = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
						}
					}
					datacontext = "[Character.GetPrimaryTitle]"
					using = title_click
				}

				# vassal
				realm_name_and_type_vbox_ocr = {
					layoutpolicy_horizontal = expanding
					visible = "[And(And(Character.HasLandedTitles, Not(GetVariableSystem.Exists('expand_view'))), Character.IsAlive)]"
					datacontext = "[Character.GetPrimaryTitle]"
					# max_width = 250
					margin_right = -5
				}

				# imprisoned
				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[And(Character.IsImprisoned, Not(GetVariableSystem.Exists('expand_view')))]"
					text_single = {
						datacontext = "[CharacterWindow.GetCharacter.GetImprisonedBy]"
						raw_text = "Imprisoned by"
					}
					char_name = {
						datacontext = "[CharacterWindow.GetCharacter.GetImprisonedBy]"
					}
					expand = { }
				}
				## dead
				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Character.IsDeadAndValid]"

					text_single = {
						raw_text = "CHARACTER_DEAD_TOOLTIP"
						max_width = 600
						fontsize_min = 14
					}

					dot = { }
					expand = { }
				}

				vbox = {
					margin_left = 5
					layoutpolicy_horizontal = expanding
					visible = "[And(CharacterWindow.AreNoneExpanded, Not(GetVariableSystem.Exists('expand_view')))]"
					# opinion
					hbox = {
						name = "AI_personality"
						layoutpolicy_horizontal = expanding
						visible = "[Character.IsAlive]"
						# margin = { 3 0 }
						spacing = 3
						text_single = {
							raw_text = "Opinion [Character.GetOpinionOf(GetPlayer)]."
							visible = "[Not(Character.IsLocalPlayer)]"
							tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
						}
						text_single = {
							name = "character_relation_to_you"
							max_width = 480
							raw_text = "[Character.GetRelationToString( GetPlayer )][AddTextIf(And(Not(Character.IsLocalPlayer), Character.IsAlive), Concatenate(', ', Character.GetAIPersonality))]."
							fontsize_min = 13
							# align = left
							default_format = "#high"
							alwaystransparent = yes
						}
						tooltip = "EXTENDED_RELATIONS_TOOLTIP"
						expand = { }
					}

					# status
					hbox = {
						visible = "[Character.IsValid]"
						spacing = 3
						layoutpolicy_horizontal = expanding

						button_text = {
						    blockoverride "text" {
								raw_text = "Unmarried."
								align = left
						    }
							visible = "[Not(Character.GetPrimarySpouseOrBetrothed.IsValid)]"
							onclick = "[Character.OpenPlayerInteraction('marry_off_interaction')]"
							onclick = "[CharacterWindow.Close]"
							enabled = "[Character.IsPlayerInteractionValid('marry_off_interaction')]"
						}

						button = {
							name = "marry_off_button"
							layoutpolicy_horizontal = expanding
							# visible = "[And(And( Not( ObjectsEqual( GetPlayer, Character.Self ) ), CharacterWindow.ShouldShowFindSpouse ), Not(Character.IsConcubine))]"
							visible = "[Character.IsPlayerInteractionValid('marry_off_interaction')]"

							onclick = "[Character.OpenPlayerInteraction('marry_off_interaction')]"
							onclick = "[CharacterWindow.Close]"
							tooltip = "CHARACTER_WINDOW_FIND_SPOUSE"
							# enabled = "[Character.IsPlayerInteractionValid('marry_off_interaction')]"
							size = { 0 22 }

							raw_text = "Click to find Spouse."
							align = left
							default_format = "#high"
						}

						text_single = {
							raw_text = "No heir."
							visible = "[And(Not(Character.GetPrimaryTitle.GetHeir.IsValid), Character.HasLandedTitles)]"
						}
						expand = { }
					}

					# resources
					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(Character.IsDeadAndValid)]"
							spacing = 3

							text_single = {
								raw_text = "Soldiers: [Character.GetMilitaryStrengthText]."
								tooltip = "[CharacterWindow.GetMilitaryStrengthTooltip]"
								visible = "[Character.HasLandedTitles]"
							}

							text_single = {
								raw_text = "Gold: [Character.GetGold|0], income: [Character.GetBalance|1=]."
								# tooltipwidget = {
								# 	widget = {
								# 		size = { 450 100% }
								#
								# 		scrollbox = {
								# 			size = { 450 100% }
								# 			using = DefaultTooltipBackground
								#
								# 			blockoverride "scrollbox_content" {
								# 				text_single = {
								# 					text = "[Character.GetBalanceBreakdown]"
								# 				}
								# 			}
								# 		}
								# 	}
								# }
							}

							text_single = {
								raw_text = "Prestige: [Character.GetPrestige|0]."
								tooltip = "[Character.GetPrestigeTooltipWithBalance]"
							}

							text_single = {
								raw_text = "Piety: [Character.GetPiety|0]."
								tooltip = "[Character.GetPietyTooltipWithBalance]"
							}

							text_single = {
								raw_text = "Dread: [Character.GetDread|0]."
								tooltip = "[Character.GetDreadBreakdown]"
								visible = "[Character.HasLandedTitles]"
							}
							expand = { }
						}

						expand = { }
					}

					#diplo
					hbox = {
						layoutpolicy_horizontal = expanding

						button = {
							visible = "[And( Character.HasLandedTitles, Character.IsAlive )]"
							onclick = "[GetVariableSystem.Set('expand_view', 'diplomacy')]"
							using = expanded_view
							shortcut = mapmode_house_secondary

							flowcontainer = {
								margin = { 3 1 }
								resizeparent = yes
								ignoreinvisible = yes

								# text_single = {
								# 	raw_text = "At peace"
								# 	visible = "[EqualTo_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_wars'), '(CFixedPoint)0')]"
								# }

								text_single = {
									raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_wars')] wars"
									visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_wars'), '(CFixedPoint)0')]"
								}

								text_single = {
									visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_raids'), '(CFixedPoint)0')]"
									raw_text = ", [GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_raids')] raids"
								}

								text_single = {
									visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_allies'), '(CFixedPoint)0')]"
									raw_text = ", [GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_allies')] allies"
								}

								text_single = {
									visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_truces'), '(CFixedPoint)0')]"
									raw_text = ", [GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_truces')] truces"
								}

								text_single = {
									raw_text = ", Involved"
									visible = "[GetScriptedGui('is_involved').IsShown( GuiScope.SetRoot( Character.MakeScope ).End )]"
								}

								text_single = {
									raw_text = ", Interloper"
									visible = "[GetScriptedGui('is_interloper').IsShown( GuiScope.SetRoot( Character.MakeScope ).End )]"
								}

								text_single = {
									raw_text = ", hotkey Shift D"
								}
								visible = "[DataModelHasItems(CharacterWindow.GetDiplomacyItems)]"
								dot = { }
							}
						}

						expand = { }
					}

					# skills
					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						hbox = {
							name = "skills_grid"
							datamodel = "[CharacterWindow.GetSkills]"
							spacing = 3
							item = {
								container = {
									text_single = {
										raw_text = "[SkillItem.GetName] [SkillItem.GetValue|+],"
										alwaystransparent = yes
										default_format = "#high"
									}

									widget = {
										size = { 100% 100% }
										tooltip = "SKILL_ITEM_TOOLTIP"

										block_tooltip = { }
									}
								}
							}
						}

						text_single = {
							using = tooltip_ne
							tooltip = "[CharacterWindow.GetCharacter.GetProwessBreakdown]"
							raw_text = "Prowess [CharacterWindow.GetCharacter.GetProwess|0]."
							default_format = "#high"
						}

						expand = { }
					}


					hbox = {
						layoutpolicy_horizontal = expanding

						hbox = {
							datamodel = "[CharacterWindow.GetPersonalityTraits]"
							# layoutpolicy_horizontal = expanding
							spacing = 3

							text_single = {
								raw_text = "Personality:"
							}

							item = {
								text_single = {
									# layoutpolicy_horizontal = expanding
									datacontext = "[Character.GetFaith]"
									raw_text = "[Trait.GetName(Character.Self)][AddTextIf(Faith.IsTraitVirtue( Trait.Self ), ' (virtue)')][AddTextIf(Faith.IsTraitSin( Trait.Self ), ' (sin)')]."
								}
							}
						}
						expand = { }
					}


					#faith
					flowcontainer = {
						direction = vertical
						layoutpolicy_horizontal = expanding

						button_text = {
							blockoverride "pre" {
								text_single = {
									raw_text = "Faith:"
									margin_right = 3
								}
							}
						    blockoverride "text" {
								tooltipwidget = { faith_tooltip_click = { } }
								raw_text = "[Faith.GetName], Hotkey F."
								align = left
						    }
							datacontext = "[Character.GetFaith]"
							shortcut = army_split_half
							onclick = "[DefaultOnFaithClick(Faith.GetID)]"
						}

						button_text = {
							datacontext = "[Character.GetCulture]"
							blockoverride "pre" {
								text_single = {
									raw_text = "Culture:"
									margin_right = 3
								}
							}
						    blockoverride "text" {
								raw_text = "[Culture.GetName]"
								align = left
								tooltipwidget = {
									culture_tooltip_click = { }
								}
						    }
							visible = "[IsGameViewOpen('character_finder')]"
							onclick = "[DefaultOnCultureClick(Culture.GetID)]"
						}


						button_text = {
							datacontext = "[Character.GetCulture]"
							blockoverride "pre" {
								text_single = {
									raw_text = "Culture:"
									margin_right = 3
								}
							}
						    blockoverride "text" {
								raw_text = "[Culture.GetName], hotkey C."
								align = left
								tooltipwidget = {
									culture_tooltip_click = { }
								}
						    }
							visible = "[Not(IsGameViewOpen('character_finder'))]"
							shortcut = character_finder
							onclick = "[DefaultOnCultureClick(Culture.GetID)]"
						}
					}

					# Traits
					vbox = {
						layoutpolicy_horizontal = expanding


						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[GetDataModelSize(CharacterWindow.GetTraits)] traits:"
							visible = "[DataModelHasItems(CharacterWindow.GetTraits)]"
						}

						dynamicgridbox = {
							datamodel = "[CharacterWindow.GetTraits]"
							layoutpolicy_horizontal = expanding
							size = { 380 0 }
							# max_width = 380
							# spacing = 10
							datamodel_wrap = 4
							# flipdirection = yes

							item = {
								text_single = {
									# layoutpolicy_horizontal = expanding
									raw_text = "[Trait.GetName(Character.Self)]."
									margin_right = 10
									max_width = 170
								}
							}
						}
					}


					# spouse, liege, heir
					vbox = {
						layoutpolicy_horizontal = expanding

						# liege block
						vbox = {
							layoutpolicy_horizontal = expanding
							vbox = {
								visible = "[CharacterWindow.ShouldShowSpouses]"
								layoutpolicy_horizontal = expanding

								hbox = {
									spacing = 3
									visible = "[CharacterWindow.GetSpouse.IsValid]"
									datacontext = "[CharacterWindow.GetSpouse]"
									layoutpolicy_horizontal = expanding


									char_name = {
										blockoverride "text" {
											raw_text = "[AddTextIf(CharacterWindow.GetSpouse.IsDeadAndValid, 'Dead ')]Spouse: [Character.GetNameNoTooltip]."
											alwaystransparent = yes
											max_width = 550
										}
									}

									text_single = {
										align = left
										visible = "[Character.IsAlive]"
										raw_text = "Opinion of you: [Character.GetOpinionOf(GetPlayer)]."
										tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
									}

									expand = { }
								}

								hbox = { #TODO
								# visible = "[CharacterWindow.ShouldShowSpouseButtons]"
									spacing = 10
									layoutpolicy_horizontal = expanding
									visible = no

									button = {
										enabled = "[CharacterWindow.IsShowPrevious]"
										onclick = "[CharacterWindow.PreviousSpouse]"
										onclick = "[PdxGuiTriggerAllAnimations('cw_spouse_cycle')]"
										tooltip = "[CharacterWindow.GetPreviousSpouseTooltip]"
										raw_text = "#high Click to show previous spouse."
										align = left
										size = { 0 22 }
										layoutpolicy_horizontal = expanding
										alpha = "[Select_float( CharacterWindow.IsShowPrevious, '(float)1.0', '(float)0.0' )]"
									}


									button = {
										enabled = "[CharacterWindow.IsShowNext]"
										onclick = "[CharacterWindow.NextSpouse]"
										onclick = "[PdxGuiTriggerAllAnimations('cw_spouse_cycle')]"
										raw_text = "#high Click to show next spouse."
										tooltip = "[CharacterWindow.GetNextSpouseTooltip]"
										align = left
										size = { 0 22 }
										layoutpolicy_horizontal = expanding
										alpha = "[Select_float( CharacterWindow.IsShowNext, '(float)1.0', '(float)0.0' )]"
									}
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "No spouse."
									visible = "[And(Not(Character.IsPlayerInteractionValid('marry_off_interaction')), Not(CharacterWindow.GetSpouse.IsValid))]"
								}

								# button = {
								# 	name = "marry_off_button"
								# 	layoutpolicy_horizontal = expanding
								# 	# visible = "[And(And( Not( ObjectsEqual( GetPlayer, Character.Self ) ), CharacterWindow.ShouldShowFindSpouse ), Not(Character.IsConcubine))]"
								# 	visible = "[Character.IsPlayerInteractionValid('marry_off_interaction')]"
								#
								# 	onclick = "[Character.OpenPlayerInteraction('marry_off_interaction')]"
								# 	onclick = "[CharacterWindow.Close]"
								# 	tooltip = "CHARACTER_WINDOW_FIND_SPOUSE"
								# 	# enabled = "[Character.IsPlayerInteractionValid('marry_off_interaction')]"
								# 	size = { 0 22 }
								#
								# 	raw_text = "Click to find Spouse."
								# 	align = left
								# 	default_format = "#high"
								# }

								expand = { }
							}
						}

						#liege
						vbox = {
							layoutpolicy_horizontal = expanding
							datacontext = "[CharacterWindow.GetCharacter.GetLiegeEvenWhenDead]"
							visible = "[CharacterWindow.HasLiegeEvenWhenDead]"

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								char_name = {
									blockoverride "text" {
										raw_text = "Liege: [Character.GetNameNoTooltip]."
									}
								}

								text_single = {
									align = left
									visible = "[Not(Character.IsLocalPlayer)]"
									raw_text = "Opinion of you: [Character.GetOpinionOf(GetPlayer)]."
									tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
								}

								expand = { }
							}

							#liege opinion
							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3
								datacontext = "[CharacterWindow.GetCharacter]"
								visible = "[And( Character.GetLiege.IsValid, And( Character.IsAlive, Not(Character.IsLocalPlayer ) ) )]"

								text_single = {
									raw_text = "[Character.GetHerHis|U] opinion of liege: [Character.GetOpinionOf( Character.GetLiege )]."
									tooltip = "[Character.GetOpinionBreakdownText( CharacterWindow.GetCharacter.GetLiege )]"
								}

								text_single = {
									visible = "[Character.ShouldShowDreadEffectIconFor( Character.GetLiege )]"
									raw_text = "[CharacterWindow.GetCharacter.GetSheHe|U] is intimidated."
									tooltip = "[Character.GetDreadEffectTooltipFor( Character.GetLiege )]"
								}

								expand = { }
							}

						}

						#host
						vbox = {
							layoutpolicy_horizontal = expanding
							datacontext = "[CharacterWindow.GetCourtOwner]"
							visible = "[And( Not( CharacterWindow.HasLiegeEvenWhenDead ), And( CharacterWindow.GetCourtOwner.IsValid, Not( CharacterWindow.GetCharacter.IsRuler ) ) )]"

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								char_name = {
									blockoverride "text" {
										raw_text = "Host: [Character.GetNameNoTooltip]."
										max_width = 450
									}
								}

								text_single = {
									visible = "[Not(Character.IsLocalPlayer)]"
									raw_text = "Opinion of you: [Character.GetOpinionOf(GetPlayer)]."
									tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
								}
								expand = { }
							}

							#liege opinion
							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3
								datacontext = "[CharacterWindow.GetCharacter]"
								visible = "[And(Character.IsAlive, Not(Character.IsLocalPlayer))]"

								text_single = {
									raw_text = "[Character.GetHerHis|U] opinion of host: [Character.GetOpinionOf( CharacterWindow.GetCourtOwner )]."
									tooltip = "[Character.GetOpinionBreakdownText( CharacterWindow.GetCourtOwner )]"
								}

								text_single = {
									visible = "[Character.ShouldShowDreadEffectIconFor( CharacterWindow.GetCourtOwner )]"
									raw_text = "[CharacterWindow.GetCharacter.GetSheHe|U] is intimidated."
									tooltip = "[Character.GetDreadEffectTooltipFor( CharacterWindow.GetCourtOwner )]"
								}

								expand = { }
							}
						}

						#heir
						hbox = {
							datacontext = "[CharacterWindow.GetCharacter.GetPlayerHeir]"
							visible = "[And( Character.IsValid, CharacterWindow.GetCharacter.IsLocalPlayer )]"
							layoutpolicy_horizontal = expanding
							spacing = 3

							char_name = {
								blockoverride "text" {
									raw_text = "Player heir: [Character.GetNameNoTooltip]."
									max_width = 450
								}
							}

							text_single = {
								align = left
								visible = "[Not(Character.IsLocalPlayer)]"
								raw_text = "Opinion of you: [Character.GetOpinionOf(GetPlayer)]."
								tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
							}
							expand = { }
						}

						#heir 2
						hbox = {
							datacontext = "[CharacterWindow.GetCharacter.GetPrimaryTitle.GetHeir]"
							visible = "[And( And( Character.IsValid, Not(CharacterWindow.GetCharacter.IsLocalPlayer) ), CharacterWindow.GetCharacter.IsAlive )]"
							layoutpolicy_horizontal = expanding
							spacing = 3


							char_name = {
								blockoverride "text" {
									alwaystransparent = yes
									raw_text = "[primary_heir|E]: [Character.GetNameNoTooltip]."
									max_width = 450
								}
							}

							text_single = {
								align = left
								visible = "[Not(Character.IsLocalPlayer)]"
								raw_text = "Opinion of you: [Character.GetOpinionOf(GetPlayer)]."
								tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
							}
							expand = { }
						}
					}

					# house
					hbox = {
						layoutpolicy_horizontal = expanding

						button = {
							visible = "[Not(GetVariableSystem.Exists('expand_view'))]"
							datacontext = "[Character.GetHouse]"
							onclick = "[OpenGameViewData('dynasty_house_view', Character.GetHouse.GetID))]"
							enabled = "[DynastyHouse.IsValid]"
							shortcut = "army_create_new"

							flowcontainer = {
								resizeparent = yes
								spacing = 3
								ignoreinvisible = yes

								text_single = {
									visible = "[DynastyHouse.IsValid]"
									raw_text = "House [DynastyHouse.GetBaseNameNoTooltip],"
								}

								text_single = {
									visible = "[Not(DynastyHouse.IsValid)]"
									raw_text = "[lowborn|E]."
								}

								text_single = {
									visible = "[Not(Character.IsLegitimateMemberOfHouse)]"
									raw_text = "Bastard."
									tooltip = "CV_TT_BASTARD"
								}

								text_single = {
									visible = "[LessThan_int32(Character.GetDynastyHeadRelationFrame('(bool)no'), '(int32)9')]"
									tooltip = "[Character.GetDynastyHeadTooltip]"
									raw_text = "Head of House."
								}

								text_single = {
									raw_text = "Hotkey H."
								}
							}
						}

						expand = { }
					}
				}


				# relation
				vbox = {
					visible = "[And(CharacterWindow.AreNoneExpanded, Not(GetVariableSystem.Exists('expand_view')))]"
					name = "name_etc"
					layoutpolicy_horizontal = expanding

					#location
					widget = {
						size = { 0 20 }
						layoutpolicy_horizontal = expanding


						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3

							hbox = {
								visible = "[Character.HasLandedTitles]"

								button = {
									size = { 0 0 }
									onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Character.GetCapitalLocation.GetId))]"
									onclick = "[DefaultOnCoatOfArmsRightClick(Character.GetCapitalLocation.GetCoATitle.GetID)]"
									shortcut = map_mode_9
									text_single = {
										resizeparent = yes
										margin_left = 3
										raw_text = "Capital: [Character.GetCapitalLocation.GetNameNoTooltip]."
									}
								}

								text_single = {
									margin_left = 3
									raw_text = "[GuiScope.SetRoot(Character.GetCapitalLocation.MakeScope).ScriptValue('distance_to_player')|0] points [Character.GetCapitalLocation.Custom('county_direction_from_capital')] from your capital."
									layoutpolicy_horizontal = expanding
									visible = "[Not(ObjectsEqual(Character.Self, GetPlayer))]"
								}
							}

							hbox = {
								visible = "[Not(Character.HasLandedTitles)]"
								button = {
									size = { 0 0 }
									onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Character.GetCurrentLocation.GetId))]"
									onclick = "[DefaultOnCoatOfArmsRightClick(Character.GetCurrentLocation.GetCoATitle.GetID)]"
									visible = "[And(Not(Character.HasLandedTitles), Character.HasLocation)]"
									shortcut = map_mode_9
									text_single = {
										resizeparent = yes
										margin_left = 3
										raw_text = "Location: [Character.GetCurrentLocation.GetNameNoTooltip]."
									}
								}

								text_single = {
									margin_left = 3
									raw_text = "[GuiScope.SetRoot(Character.GetCurrentLocation.MakeScope).ScriptValue('distance_to_player')|0] points [Character.GetCurrentLocation.Custom('county_direction_from_capital')] from your capital."
									layoutpolicy_horizontal = expanding
									visible = "[Not(ObjectsEqual(Character.GetCurrentLocation, GetPlayer.GetCapitalLocation))]"
								}
							}

							text_single = {
								raw_text = "Shift Q."
							}

							expand = { }
						}
					}

					#buttons
					hbox = {
						spacing = 0
						layoutpolicy_horizontal = expanding

						hbox = {
							# layoutpolicy_horizontal = expanding
							visible = "[And(Character.HasLandedTitles, Character.IsAlive)]"

							hbox = {
								datacontext = "[CharacterWindow.GetCharacter]"
								visible = "[And( Not( Character.GetPrimaryTitle.HasFaction ), And( Character.HasLandedTitles, Character.IsAlive ) )]"

								button = {
									onclick = "[GetVariableSystem.Set('expand_view', 'holdings')]"
									using = expanded_view
									onclick = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"

									text_single = {
										resizeparent = yes
										name = "domain_limit"
										raw_text = "[Character.GetDomainSize] holdings, [GuiScope.SetRoot(Character.MakeScope).ScriptValue('realm_holdings')] total."
										margin_left = 3
									}
								}
							}

							button = {
								onclick = "[GetVariableSystem.Set('expand_view', 'counties')]"
								onclick = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
								using = expanded_view
								text_single = {
									resizeparent = yes
									raw_text = "[Character.RealmSize] counties."
									margin_left = 3
									# [GuiScope.SetRoot(Character.MakeScope).ScriptValue('my_counties')]
								}
							}

							expand = { }
						}

						hbox = {
							# layoutpolicy_horizontal = expanding

							button = {
								onclick = "[GetVariableSystem.Set('expand_view', 'titles')]"
								# onclick = "[CharacterWindow.ToggleExpandedTitles]"
								visible = "[GreaterThan_int32(GetDataModelSize(CharacterWindow.GetTitles), '(int32)0' )]"
								using = expanded_view
								text_single = {
									resizeparent = yes
									raw_text = "[GetDataModelSize(CharacterWindow.GetTitles)] Titles."
									margin_left = 3
								}
							}

							button = {
								onclick = "[GetVariableSystem.Set('expand_view', 'claims')]"
								visible = "[GreaterThan_int32(GetDataModelSize(CharacterWindow.GetClaims), '(int32)0' )]"
								using = expanded_view
								text_single = {
									resizeparent = yes
									raw_text = "[GetDataModelSize(CharacterWindow.GetClaims)] Claims."
									margin_left = 3
								}
							}

							expand = { }
						}

						expand = { }
					}

					button = {
						layoutpolicy_horizontal = expanding
						visible = "[And( Character.HasLandedTitles, Character.IsAlive )]"
						onclick = "[GetVariableSystem.Set('expand_view', 'neighbours')]"
						using = expanded_view
						shortcut = map_mode_6

						text_single = {
							resizeparent = yes
							raw_text = "[GetDataModelSize(Character.MakeScope.GetList('adjacent_rulers'))] Neighbours, Control A."
							# margin_left = 3
						}
					}

					hbox = {
						spacing = 3
						layoutpolicy_horizontal = expanding

						button = {
							visible = "[And(Or( Character.IsLocalPlayer, Or( Character.HasArtifacts, Character.HasAnyArtifactClaims ) ), Character.IsAlive)]"
							# enabled = "[Or(  Or( Character.IsLocalPlayer, Character.HasArtifacts), Character.HasAnyArtifactClaims )]"
							onclick = "[ToggleGameViewData( 'inventory', Character.GetID )]"
							onclick = "[CloseGameView('character')]"

							shortcut = mapmode_kingdoms_secondary

							flowcontainer = {
								ignoreinvisible = yes
								resizeparent = yes
								margin_left = 3
								spacing = 3

								text_single = {
									raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_artifacts')] Artifacts,"
									visible = "[Character.HasArtifacts]"
								}

								text_single = {
									raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_artifacts_claims')] Artifact claims,"
									visible = "[Character.HasAnyArtifactClaims]"
								}

								text_single = {
									raw_text = "Open Inventory, Hotkey i."
								}
							}
						}

						button_text = {
						    blockoverride "text" {
						        raw_text = "Open memories"
								align = left
						    }
							blockoverride "dot" { }
							datacontext = "[Character]"
							onclick = "[ToggleGameViewData( 'memories', Character.GetID  )]"
						}

						button = {
							name = "open_kill_list"
							visible = "[Character.HasKillsKnownTo( GetPlayer )]"

							size = { 0 22 }

							datacontext = "[Character]"
							# tooltip = "OPEN_KILL_LIST_TOOLTIP"
							using = tooltip_es
							onclick = "[ToggleGameViewData( 'kill_list', Character.GetID  )]"

							text_single = {
								resizeparent = yes
								raw_text = "[GetDataModelSize(Character.GetKills)] known kill[AddTextIf(GreaterThan_int32(GetDataModelSize(Character.GetKills), '(int32)1'), 's')]."
								margin_left = 3
							}
						}

						expand = { }
					}
				}

				# extra, hidden when you open lists
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[And(CharacterWindow.AreNoneExpanded, Not(GetVariableSystem.Exists('expand_view')))]"

					# health
					hbox = {
						spacing = 3
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes

						text_single = {
							raw_text = "Stress level: [Character.GetStressLevel],"
							visible = "[And(Not(Character.IsDeadAndValid), GreaterThan_int32(Character.GetStress, '(int32)0'))]"
							tooltip = "[Character.GetHealthInfo]"
						}

						text_single = {
							visible = "[And(Not(Character.IsDeadAndValid), GreaterThan_int32(Character.GetStress, '(int32)0'))]"
							raw_text = "[GetPlayer.GetStressProgress]% to next level."
						}

						text_single = {
							raw_text = "Stress: [Character.GetStress]."
							visible = "[Not(Character.IsDeadAndValid)]"
							tooltip = "[Character.GetHealthInfo]"
						}

						text_single = {
							raw_text = "[Select_CString( Character.IsFemale, 'Female', 'Male' )],"
						}

						text_single = {
							raw_text = "[Character.GetSexuality]."
						}
						expand = { }
					}

					#modiifers
					vbox = {
						visible = "[Not(IsDataModelEmpty(CharacterWindow.GetTimedModifiers))]"
						layoutpolicy_horizontal = expanding
						text_single = {
							raw_text = "[GetDataModelSize(CharacterWindow.GetTimedModifiers)] Modifiers:"
							layoutpolicy_horizontal = expanding
						}
						dynamicgridbox = {
							name = "modifiers_grid"
							datamodel = "[CharacterWindow.GetTimedModifiers]"
							datamodel_wrap = 2
							flipdirection = yes
							layoutpolicy_horizontal = expanding
							# maxhorizontalslots = 2
							item = {
								text_single = {
									raw_text = "[ModifierItem.GetName]."
									max_width = 250
									tooltip = "[ModifierItem.GetTooltip]"
									margin_right = 10
									fontsize_min = 14
								}
							}
						}
					}

					#focus
					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						button = {
							name = "open_focus_button"
							size = { 35 35 }

							visible = "[Or( Character.GetFocus.IsValid, Character.PlayerCanManageFocus )]"
							# tooltip = "PLAYER_LIFESTYLE_TOOLTIP"
							# using = tooltip_ne

							onclick = "[CharacterWindow.OnClickFocusButton]"
							enabled = "[CharacterWindow.CanClickFocusButton]"
							# tooltip = "[CharacterWindow.GetFocusButtonTooltip]"

							text_single = {
								raw_text = "[AddTextIf(And(CharacterWindow.CanClickFocusButton, Not(Character.PlayerCanManageFocus)), 'Open ')][AddTextIf(Character.PlayerCanManageFocus, 'Change ')]Lifestyle: [CharacterWindow.GetCharacter.GetFocus.GetName]."
								alwaystransparent = yes
								margin_left = 3
								resizeparent = yes
							}
						}

						text_single = {
							visible = "[GreaterThan_int32(GetDataModelSize(Character.GetKnownLanguages), '(int32)1')]"
							# parentanchor = hcenter
							tooltip = "KNOWN_LANGUAGES_TOOLTIP"

							raw_text = "Knows [GetDataModelSize(Character.GetKnownLanguages)] languages, see tooltip."
						}
						expand = { }
					}

					#location
					hbox = {
						name = "name_and_stats"
						layoutpolicy_horizontal = expanding
						margin_right = 10

						using = Animation_Character_Window_Refresh

						hbox = {
							visible = "[Not(Character.HasLandedTitles)]"
							layoutpolicy_horizontal = expanding
							# margin = { 10 0 }
							# max_width = 280

							text_single = {
								name = "character_title"
								# layoutpolicy_horizontal = expanding
								raw_text = "Unlanded. "
								# using = Font_Size_Medium
								# align = left
							}

							text_single = {
								name = "government_type"
								# layoutpolicy_horizontal = expanding
								raw_text = "  [Character.GetLocationDesc]"
								# default_format = "#low"
								# format_override = { high medium }
								# format_override = { V medium }
								# align = left
								# autoresize = no
							}

							expand = { }
						}

						expand = { }
					}

					expand = { }
				}

				expand = { }
			}
		}

		######################################################

		button = {
			visible = "[GetVariableSystem.Exists('expand_view')]"
			onclick = "[GetVariableSystem.Clear('expand_view')]"
			onclick = "[GetScriptedGui('close_expanded_view').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
			shortcut = "close_window"
			shortcut = "map_mode_1"
			layoutpolicy_horizontal = expanding
			minimumsize = { 600 25 }

			flowcontainer = {
				ignoreinvisible = yes
				direction = vertical
				layoutpolicy_horizontal = expanding
				resizeparent = yes
				margin_left = 10

				flowcontainer = {
					margin = { 3 0 }
					ignoreinvisible = yes
					layoutpolicy_horizontal = expanding

					text_single = {
						raw_text = "Expanded"
					}

					space = { }

					text_single = {
						raw_text = "Holdings"
						visible = "[GetVariableSystem.HasValue('expand_view', 'holdings')]"
					}

					text_single = {
						raw_text = "[GetDataModelSize(Character.MakeScope.GetList('counties'))] personal counties, [Character.RealmSize] total"
						visible = "[GetVariableSystem.HasValue('expand_view', 'counties')]"
					}

					text_single = {
						raw_text = "[Add_int32( GetDataModelSize(Character.MakeScope.GetList('adjacent_vassals')), Add_int32( GetDataModelSize(Character.MakeScope.GetList('adjacent_rulers')), GetDataModelSize(Character.MakeScope.GetList('adjacent_rulers_across_water'))))] Neighbours"
						visible = "[GetVariableSystem.HasValue('expand_view', 'neighbours')]"
					}

					text_single = {
						raw_text = "[GetDataModelSize(CharacterWindow.GetClaims)] Claims"
						visible = "[GetVariableSystem.HasValue('expand_view', 'claims')]"
					}

					text_single = {
						raw_text = "[GetDataModelSize(CharacterWindow.GetDiplomacyItems)] Diplomatic items"
						visible = "[GetVariableSystem.HasValue('expand_view', 'diplomacy')]"
					}
					text_single = {
						raw_text = "[GetDataModelSize(CharacterWindow.GetTitles)] Titles"
						visible = "[GetVariableSystem.HasValue('expand_view', 'titles')]"
					}
					text_single = {
						raw_text = "Characters"
						visible = "[GetVariableSystem.HasValue('expand_view', 'family')]"
					}

					text_single = {
						raw_text = ", close with Escape or E."
					}

					button_text = {
					    blockoverride "text" {
							align = left
					        raw_text = "Reload list with Shift E."
					    }
						shortcut = map_mode_11
						onclick = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
						visible = "[Or(Or(GetVariableSystem.HasValue('expand_view', 'holdings'), GetVariableSystem.HasValue('expand_view', 'counties')), GetVariableSystem.HasValue('expand_view', 'neighbours'))]"
					}
					button_text = {
						blockoverride "text" {
							raw_text = "[Select_CString(GetVariableSystem.Exists('show_diplo_descriptions'), 'Hide', 'Show')] detailed descriptions."
							# align = left
						}
						onclick = "[GetVariableSystem.Toggle('show_diplo_descriptions')]"
						visible = "[GetVariableSystem.HasValue('expand_view', 'diplomacy')]"
					}
				}

				text_single = {
					raw_text = "Click an entry to open character view and pan the camera to their capital."
					visible = "[GetVariableSystem.HasValue('expand_view', 'neighbours')]"
				}

				text_single = {
					raw_text = "Click a title to open title view. Right-click to open de-jure capital."
					visible = "[GetVariableSystem.HasValue('expand_view', 'titles')]"
				}
			}
		}

		# vanilla expanded lists? unused?
		scrollbox = {
			visible = "[And(And(GetVariableSystem.Exists('expand_view'), CharacterWindow.AreNoneExpanded), Not(GetVariableSystem.HasValue('expand_view', 'family')))]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding


			blockoverride "scrollbox_content" {

				flowcontainer = {
					direction = vertical
					ignoreinvisible = yes
					layoutpolicy_horizontal = expanding
					margin = { 10 0 }

					#holdings
					flowcontainer = {
						visible = "[GetVariableSystem.HasValue('expand_view', 'holdings')]"
						direction = vertical
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes

						# button = {
						# 	size = { 0 0 }
						# 	onclick = "[GetVariableSystem.Clear('expand_view')]"
						# 	onclick = "[GetScriptedGui('close_expanded_view').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						# 	shortcut = "close_window"
						# }

						flowcontainer = {
							spacing = 3
							ignoreinvisible = yes
							text_single = {
								raw_text = "[Character.GetDomainSize] personal holdings. Limit: [Character.GetDomainLimit]. Total: [GuiScope.SetRoot(Character.MakeScope).ScriptValue('realm_holdings')]"
								# visible = "[GetScriptedGui('realm_holdings').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
							}

							# text_single = {
							# 	raw_text = "Sorted by income."
							# }
						}

						char_expanded_list = {
							datamodel = "[Character.MakeScope.GetList('holdings')]"
						}

						widget = {
							size = { 0 5 }
						}
						text_single = {
							raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('vassal_holdings')] vassal holdings."
						}
						char_expanded_list = {
							datamodel = "[Character.MakeScope.GetList('realm_holdings')]"
						}
					}

					#counties
					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical
						visible = "[GetVariableSystem.HasValue('expand_view', 'counties')]"

						#counties
						flowcontainer = {
							datamodel = "[Character.MakeScope.GetList('counties')]"
							direction = vertical
							layoutpolicy_horizontal = expanding
							item = {
								button = {
									onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Scope.GetLandedTitle.GetProvince.GetId))]"
									onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetLandedTitle.GetID)]"

									flowcontainer = {
										resizeparent = yes
										ignoreinvisible = yes
										spacing = 3
										text_single = {
											raw_text = "[Scope.GetLandedTitle.GetBaseNameNoTierNoTooltip],"
										}
										text_single = {
											raw_text = "tax: [Scope.GetLandedTitle.MakeScope.Var('total_tax').GetValue|1],"
										}
										text_single = {
											raw_text = "levies: [Scope.GetLandedTitle.MakeScope.Var('total_levies').GetValue|0]."
										}
										text_single = {
											raw_text = "Control: [Scope.GetLandedTitle.GetCountyData.GetControl]."
										}
										text_single = {
											raw_text = "[Scope.GetLandedTitle.GetCountyData.GetCulture.GetName],"
										}
										text_single = {
											raw_text = "[Scope.GetLandedTitle.GetCountyData.GetFaith.GetName]."
										}
									}
								}
							}
						}

						widget = {
							size = { 0 5 }
						}

						text_single = {
							raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('vassal_counties')] vassal counties."
						}

						divider_light = {
							size = { 500 3 }
						}
						#counties
						flowcontainer = {
							datamodel = "[Character.MakeScope.GetList('vassal_counties')]"
							direction = vertical
							layoutpolicy_horizontal = expanding
							item = {
								button = {
									onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Scope.GetLandedTitle.GetProvince.GetId))]"
									onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetLandedTitle.GetID)]"

									flowcontainer = {
										resizeparent = yes
										ignoreinvisible = yes
										spacing = 3
										text_single = {
											raw_text = "[Scope.GetLandedTitle.GetBaseNameNoTierNoTooltip],"
										}
										text_single = {
											raw_text = "tax: [Scope.GetLandedTitle.MakeScope.Var('total_tax').GetValue|1],"
										}
										text_single = {
											raw_text = "levies: [Scope.GetLandedTitle.MakeScope.Var('total_levies').GetValue|0]."
										}
										char_name = {
											datacontext = "[Scope.GetLandedTitle.GetHolder]"
											blockoverride "pre" {
												text_single = {
													raw_text = "Holder"
												}
											}
										}
									}
								}
							}
						}

					}

					#titles
					flowcontainer = {
						datacontext = "[CharacterWindow.GetCharacter]"
						direction = vertical
						visible = "[GetVariableSystem.HasValue('expand_view', 'titles')]"

						datamodel = "[CharacterWindow.GetTitles]"

						item = {
							button = {
								onclick = "[DefaultOnCoatOfArmsClick(TitleItem.GetTitle.GetID)]"
								onclick = "[DefaultOnCoatOfArmsRightClick(TitleItem.GetTitle.GetPreferredCapital.GetID)]"
								onrightclick = "[DefaultOnCoatOfArmsRightClick(TitleItem.GetTitle.GetPreferredCapital.GetID)]"
								onrightclick =  "[OpenGameViewData('holding_view', IntToUnsigned(TitleItem.GetTitle.GetPreferredCapital.GetProvince.GetId))]"
								button_ignore = none

								flowcontainer = {
									resizeparent = yes
									datacontext = "[TitleItem.GetTitle]"
									spacing = 3

									text_single = {
										raw_text = "[Title.GetNameNoTooltip]."
										# using = tooltip_se
									}
									# text_single = {
									# 	raw_text = "unlanded"
									# 	visible = "[Not(Title.IsLanded)]"
									# }
								}
							}
						}
					}

					#diplo
					flowcontainer = {
						direction = vertical
						visible = "[GetVariableSystem.HasValue('expand_view', 'diplomacy')]"
						name = "diplomacy_items"
						datamodel = "[CharacterWindow.GetDiplomacyItems]"
						ignoreinvisible = yes

						item = {
							button = {
								onclick = "[DiplomacyItem.OnClick]"

								flowcontainer = {
									direction = vertical
									resizeparent = yes
									spacing = 0
									ignoreinvisible = yes

									# text_single = {
									# 	raw_text = "[DiplomacyItem.GetDiplomacyFrame]"
									# }
									#
									# text_single = {
									# 	raw_text = ""
									# }

									widget = {
										size = { 550 45 }
										scissor = yes

										visible = "[Not(GetVariableSystem.Exists('show_diplo_descriptions'))]"

										text_multi = {
											raw_text = "[DiplomacyItem.GetWarScoreFraction|%0] [DiplomacyItem.GetInfo]"
											autoresize = yes
											max_width = 550
											alwaystransparent = yes
											visible = "[DiplomacyItem.HasWarScore]"
										}

										text_multi = {
											raw_text = "[DiplomacyItem.GetInfo]"
											autoresize = yes
											max_width = 550
											alwaystransparent = yes
											visible = "[Not(DiplomacyItem.HasWarScore)]"
										}
									}

									text_multi = {
										visible = "[GetVariableSystem.Exists('show_diplo_descriptions')]"
										text = "[DiplomacyItem.GetInfo]"
										autoresize = yes
										max_width = 550
										alwaystransparent = yes
									}

									# container = {
									# 	ignoreinvisible = yes
									# 	visible = "[DiplomacyItem.IsStruggle]"
									# 	datacontext = "[DiplomacyItem.GetStruggle]"
									#
									# 	text_single = {
									# 		raw_text = "Involved in Iberian struggle"
									# 		visible = "[Struggle.IsInvolvedCharacter(Character.Self)]"
									# 	}
									# 	text_single = {
									# 		raw_text = "Interloper in Iberian struggle"
									# 		visible = "[Struggle.IsInterloperCharacter(Character.Self)]"
									# 	}
									# }

									flowcontainer = {
										visible = no#"[DiplomacyItem.HasReasonCharacters]"
										direction = vertical

										text_single = {
											datacontext = "[DiplomacyItem.GetLeftReasonCharacter]"
											raw_text = "[Character.GetName]"
										}
										text_single = {
											datacontext = "[DiplomacyItem.GetRightReasonCharacter]"
											raw_text = "[Character.GetName]"
										}
									}
								}
							}
						}
					}

					#neighbours
					flowcontainer = {
						visible = "[GetVariableSystem.HasValue('expand_view', 'neighbours')]"
						datamodel = "[Character.MakeScope.GetList('adjacent_rulers')]"
						direction = vertical
						layoutpolicy_horizontal = expanding

						text_single = {
							raw_text = "[GetDataModelSize(Character.MakeScope.GetList('adjacent_rulers'))] Independent."
						}
						item = {
							button = {
								onclick = "[DefaultOnCharacterClick(Scope.GetCharacter.GetID)]"
								onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetCharacter.GetCapitalLocation.GetCoATitle.GetID)]"
								onrightclick = "[DefaultOnCharacterRightClick(Scope.GetCharacter.GetID)]"
								button_ignore = none

								flowcontainer = {
									resizeparent = yes
									ignoreinvisible = yes
									spacing = 3
									text_single = {
										raw_text = "[Scope.GetCharacter.GetMaxMilitaryStrength|0] men,"
									}
									text_single = {
										raw_text = "[Scope.GetCharacter.GetPrimaryTitle.GetNameNoTooltip],"
									}
									text_single = {
										raw_text = "[Scope.GetCharacter.GetFirstNameNicknamedOrMe],"
									}
									text_single = {
										raw_text = "[GuiScope.SetRoot(Scope.GetCharacter.GetCapitalLocation.MakeScope).ScriptValue('distance_to_player')|0] points"
									}
									text_single = {
										raw_text = "[Scope.GetCharacter.Custom('ruler_direction')]."
									}
								}
							}
						}
					}
					flowcontainer = {
						visible = "[GetVariableSystem.HasValue('expand_view', 'neighbours')]"
						datamodel = "[Character.MakeScope.GetList('adjacent_rulers_across_water')]"
						direction = vertical
						layoutpolicy_horizontal = expanding

						text_single = {
							raw_text = "[GetDataModelSize(Character.MakeScope.GetList('adjacent_rulers_across_water'))] Across water."
						}
						item = {
							button = {
								onclick = "[DefaultOnCharacterClick(Scope.GetCharacter.GetID)]"
								onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetCharacter.GetPrimaryTitle.GetPreferredCapital.GetID)]"
								onrightclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetCharacter.GetPrimaryTitle.GetPreferredCapital.GetID)]"
								button_ignore = none

								flowcontainer = {
									resizeparent = yes
									ignoreinvisible = yes
									spacing = 3
									text_single = {
										raw_text = "[Scope.GetCharacter.GetMaxMilitaryStrength|0] men,"
									}
									text_single = {
										raw_text = "[Scope.GetCharacter.GetPrimaryTitle.GetNameNoTooltip],"
									}
									text_single = {
										raw_text = "[Scope.GetCharacter.GetFirstNameNicknamedOrMe],"
									}
									text_single = {
										raw_text = "[GuiScope.SetRoot(Scope.GetCharacter.GetCapitalLocation.MakeScope).ScriptValue('distance_to_player')|0] points"
									}
									text_single = {
										raw_text = "[Scope.GetCharacter.Custom('ruler_direction')]."
									}
								}
							}
						}
					}

					#neighbours
					flowcontainer = {
						visible = "[And(GetVariableSystem.HasValue('expand_view', 'neighbours'), Not(Character.IsIndependentRuler))]"
						datamodel = "[Character.MakeScope.GetList('adjacent_vassals')]"
						direction = vertical
						layoutpolicy_horizontal = expanding

						text_single = {
							raw_text = "[GetDataModelSize(Character.MakeScope.GetList('adjacent_vassals'))] fellow vassals."
						}
						item = {
							button = {
								onclick = "[DefaultOnCharacterClick(Scope.GetCharacter.GetID)]"
								onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetCharacter.GetPrimaryTitle.GetPreferredCapital.GetID)]"
								onrightclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetCharacter.GetPrimaryTitle.GetPreferredCapital.GetID)]"
								button_ignore = none

								flowcontainer = {
									resizeparent = yes
									ignoreinvisible = yes
									spacing = 3
									text_single = {
										raw_text = "[Scope.GetCharacter.GetMaxMilitaryStrength|0] men,"
									}
									text_single = {
										raw_text = "[Scope.GetCharacter.GetPrimaryTitle.GetNameNoTooltip],"
									}
									text_single = {
										raw_text = "[Scope.GetCharacter.GetFirstNameNicknamedOrMe],"
									}
									text_single = {
										raw_text = "[Scope.GetCharacter.Custom('ruler_direction')]."
									}
								}
							}
						}
					}

					flowcontainer = {
						name = "titles_box_bishop"
						visible = "[GetVariableSystem.HasValue('expand_view', 'claims')]"
						datacontext = "[CharacterWindow.GetCharacter]"
						datamodel = "[CharacterWindow.GetClaims]"
						direction = vertical
						spacing = 3

						item = {
							button = {
								onclick = "[DefaultOnCoatOfArmsClick(Claim.GetTitle.GetID)]"
								onclick = "[DefaultOnCoatOfArmsRightClick(Claim.GetTitle.GetID)]"
								flowcontainer = {
									resizeparent = yes

									using = tooltip_ne
									# tooltip = "[Claim.GetTooltip]"

									flowcontainer = {
										direction = vertical
										ignoreinvisible = yes

										text_single = {
											raw_text = "[Claim.GetTitle.GetNameNoTooltip]."
											default_format = "#high"
											# using = Font_Size_Big
										}

										text_single = {
											name = "pressed_claim"
											visible = "[And(Claim.IsPressed, Not(Claim.IsImplicit))]"
											raw_text = "[pressed_claim|E], see tooltip."
										}

										text_single = {
											name = "unpressed_claim"
											visible = "[And(Not(Claim.IsPressed), Not(Claim.IsImplicit))]"
											raw_text = "[unpressed_claim|E], see tooltip."
										}

										text_single = {
											name = "implicit_claim"
											visible = "[Claim.IsImplicit]"
											raw_text = "[implicit_claim|E], see tooltip."
										}

										flowcontainer = {
											button = {
												onclick = "[DefaultOnCharacterClick(Claim.GetTitle.GetHolder.GetID)]"
												onclick = "[DefaultOnCoatOfArmsRightClick(Claim.GetTitle.GetID)]"

												text_single = {
													visible = "[Claim.GetTitle.GetHolder.IsValid]"
													text = "CLAIM_TITLE_HOLDER"
													max_width = 500
													resizeparent = yes
													margin_left = 3
													# autoresize = yes
												}

											}

											text_single = {
												visible = "[Not(Claim.GetTitle.GetHolder.IsValid)]"
												text = "CLAIM_TITLE_NOT_CREATED"
												# default_format = "#weak"
												# align = left
											}
											dot = { }
										}

									}
								}
							}
						}
					}
				}
			}
		}

		### TABS
		hbox = {
			name = "tabs"
			margin_left = 10
			# visible = "[And(CharacterWindow.AreNoneExpanded, Not(GetVariableSystem.Exists('expand_view')))]"
			visible = "[Or(Not(GetVariableSystem.Exists('expand_view')), GetVariableSystem.HasValue('expand_view', 'family'))]"
			layoutpolicy_horizontal = expanding
			spacing = 3

			button_tab = {
				shortcut = speed_1
				name = "family_button"
				datacontext = "[CharacterWindow.GetCharacter]"
				# layoutpolicy_horizontal = expanding

				onclick = "[GetVariableSystem.Set('char_tab', 'family')]"
				down = "[GetVariableSystem.HasValue('char_tab','family')]"

				using = tooltip_above

				flowcontainer = {
					resizeparent = yes
					ignoreinvisible = yes

					text_single = {
						raw_text = "Tab 1,"
						margin_right = 3
					}
					text_single = {
						# layoutpolicy_horizontal = expanding
						text = "CV_TAB_FAMILY"
						default_format = "#low"
						margin_right = 3
					}

					text_single = {
						text = "[CharacterWindow.GetTabItemsCount('family')]"
						default_format = "#low"
						using = Animation_Character_Window_Refresh
					}
					text_single = {
						raw_text = ", selected"
						visible = "[Or(Not(GetVariableSystem.Exists('char_tab')), GetVariableSystem.HasValue('char_tab','family'))]"
					}
					dot = { }
					# expand = { }
				}
			}

			button_tab = {
				shortcut = speed_2
				name = "relations_button"
				datacontext = "[CharacterWindow.GetCharacter]"
				# layoutpolicy_horizontal = expanding

				onclick = "[GetVariableSystem.Set('char_tab', 'relations')]"
				down = "[GetVariableSystem.HasValue('char_tab','relations')]"

				using = tooltip_above

				flowcontainer = {
					resizeparent = yes
					ignoreinvisible = yes

					text_single = {
						raw_text = "Tab 2, "
						margin_right = 3
					}
					text_single = {
						text = "CV_TAB_RELATIONS"
						margin_right = 3
					}

					text_single = {
						text = "[CharacterWindow.GetTabItemsCount('relations')]"
						default_format = "#low"
						using = Animation_Character_Window_Refresh
					}
					text_single = {
						raw_text = ", selected"
						visible = "[GetVariableSystem.HasValue('char_tab','relations')]"
					}
					dot = { }
					# expand = { }
				}
			}

			button_tab = {
				name = "court_button"
				shortcut = speed_3
				datacontext = "[CharacterWindow.GetCharacter]"
				#	visible = "[Not(Character.IsPlayer)]"
				# layoutpolicy_horizontal = expanding

				onclick = "[GetVariableSystem.Set('char_tab', 'court')]"
				down = "[GetVariableSystem.HasValue('char_tab','court')]"

				using = tooltip_above

				flowcontainer = {
					resizeparent = yes
					ignoreinvisible = yes
					text_single = {
						raw_text = "Tab 3, "
						margin_right = 3
					}

					text_single = {
						text = "CV_TAB_COURT"
						margin_right = 3
					}
					text_single = {
						text = "[CharacterWindow.GetTabItemsCount('court')]"
						using = Animation_Character_Window_Refresh
					}
					text_single = {
						raw_text = ", selected"
						visible = "[GetVariableSystem.HasValue('char_tab','court')]"
					}
					dot = { }
					# expand = { }
				}
			}

			button_tab = {
				shortcut = speed_4
				name = "vassals_button"
				datacontext = "[CharacterWindow.GetCharacter]"
				visible = "[Character.IsRuler]"
				#	visible = "[And(Character.IsRuler, Not(Character.IsPlayer))]"
				# layoutpolicy_horizontal = expanding

				onclick = "[GetVariableSystem.Set('char_tab', 'vassals')]"
				down = "[GetVariableSystem.HasValue('char_tab','vassals')]"

				using = tooltip_above

				flowcontainer = {
					ignoreinvisible = yes
					resizeparent = yes
					text_single = {
						raw_text = "Tab 4, "
						margin_right = 3
					}
					text_single = {
						text = "CV_TAB_VASSALS"
						margin_right = 3
					}
					text_single = {
						text = "[CharacterWindow.GetTabItemsCount('vassals')]"
						using = Animation_Character_Window_Refresh
					}
					text_single = {
						raw_text = ", selected"
						visible = "[GetVariableSystem.HasValue('char_tab','vassals')]"
					}
					dot = { }
					# expand = { }
				}
			}

			expand = { }
		}

		spacer = { size = { 0 2 } }

		vbox = {
			margin_left = 10
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			visible = "[Or(Not(GetVariableSystem.Exists('expand_view')), GetVariableSystem.HasValue('expand_view', 'family'))]"

			button = {
				onclick = "[GetVariableSystem.Set('expand_view', 'family')]"
				visible = "[Not(GetVariableSystem.Exists('expand_view'))]"
				layoutpolicy_horizontal = expanding
				text_single = {
					margin_left = 3
					resizeparent = yes
					raw_text = " Expand this view, Shortcut E."
					layoutpolicy_horizontal = expanding
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				visible = "[Or(Not(GetVariableSystem.Exists('char_tab')), GetVariableSystem.HasValue('char_tab','family'))]"
				blockoverride "scrollbox_margins" {
					margin_top = 20
				}
				blockoverride "scrollbox_content" {
					vbox = {
						# margin_top = -10
						# margin_bottom = 10
						layoutpolicy_horizontal = expanding
						spacing = 3

						#children
						vbox_character_row_item_ocr = {
							name = "children"
							layoutpolicy_horizontal = expanding

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetChildren]"
							}

							blockoverride "header_text"
							{
								raw_text = "Children [GetDataModelSize(CharacterWindow.GetChildren)]."
							}

							blockoverride "remaining_items"
							{
								# visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetChildren), '(int32)7' )]"
								# text = "[GetNumberAbove_int32( GetDataModelSize(CharacterWindow.GetChildren), '(int32)7' )|=]"
							}

							blockoverride "expand_button_inside" {
								# visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetChildren), '(int32)7' )]"
								# onclick = "[CharacterWindow.ToggleExpandedRelation( 'children' )]"
							}
							blockoverride "extra2" {
								text_single = {
									raw_text = "[Select_CString( Character.IsFemale, 'Female', 'Male' )],"
								}
								text_single = {
									raw_text = "Unmarried."
									visible = "[Not(Character.GetPrimarySpouseOrBetrothed.IsValid)]"
								}
								flowcontainer = {
									ignoreinvisible = yes
									spacing = 3
									visible = "[Character.GetPrimarySpouseOrBetrothed.IsValid]"
									text_single = {
										raw_text = "[Select_CString( Character.IsBetrothed, 'Betrothed', 'Married' )] to"
									}
									text_single = {
										raw_text = " [Character.GetPrimarySpouseOrBetrothed.GetName], [Character.GetPrimarySpouseOrBetrothed.GetAge]."
									}
								}
							}
						}

						#spouses
						vbox_character_row_item_ocr = {
							name = "secondary_spouses"
							visible = "[GreaterThan_int32( Character.GetMaxSpouses, '(int32)1' )]"
							# layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetSecondarySpouses]"
							}

							blockoverride "header_text"
							{
								raw_text = "Secondary spouses [GetDataModelSize(CharacterWindow.GetSecondarySpouses)]."
							}

							blockoverride "expand_button" { }

							blockoverride "find_partner"
							{
								hbox = {
									visible = "[Character.IsPlayerInteractionShown('marry_off_interaction')]"
									layoutpolicy_horizontal = expanding
									spacing = 3

									text_single = {
										margin_left = 3
										raw_text = "[Character.CalcUnusedSecondarySpouseSlots] more slots. "
									}

									button = {
										size = { 0 20 }
										onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('marry_off_interaction')]"
										onclick = "[CharacterWindow.Close]"
										text_single = {
											resizeparent = yes
											raw_text = " Find spouse."
										}
									}

									expand = { }
								}
							}
						}

						#consorts
						vbox_character_row_item_ocr = {
							name = "consorts"
							visible = "[GreaterThan_int32( Character.GetMaxConsorts, '(int32)0' )]"
							# layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding


							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetConcubines]"
							}

							blockoverride "header_text"
							{
								raw_text = "Concubines [GetDataModelSize(CharacterWindow.GetConcubines)]."
							}

							blockoverride "expand_button" { }

							blockoverride "find_partner"
							{
								hbox = {
									visible = "[Character.IsPlayerInteractionShown('find_concubine')]"
									layoutpolicy_horizontal = expanding
									spacing = 3

									text_single = {
										margin_left = 3
										raw_text = "[Character.CalcUnusedConsortSlots] more slots. "
									}

									button = {
										size = { 0 20 }
										onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('find_concubine')]"
										enabled = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('find_concubine')]"

										flowcontainer = {
											resizeparent = yes
											ignoreinvisible = yes

											text_single = {
												raw_text = " Find concubine."
												visible = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('find_concubine')]"
											}
											text_single = {
												raw_text = " Disabled, see tooltip."
												visible = "[Not(CharacterWindow.GetCharacter.IsPlayerInteractionValid('find_concubine'))]"
												tooltip = "[CharacterWindow.GetCharacter.GetPlayerInteractionTooltip('find_concubine')]"
											}
										}
									}

									expand = { }
								}
							}
						}

						#parents
						vbox_character_row_item_ocr = {
							name = "parents"
							layoutpolicy_horizontal = expanding

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetParents]"
							}

							blockoverride "header_text"
							{
								raw_text = "Parents [GetDataModelSize(CharacterWindow.GetParents)]."
							}

							blockoverride "expand_button" { }
						}

						# siblings
						vbox_character_row_item_ocr = {
							name = "siblings"
							layoutpolicy_horizontal = expanding

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetSiblings]"
							}

							blockoverride "header_text"
							{
								raw_text = "Siblings [GetDataModelSize(CharacterWindow.GetSiblings)]."
							}

							blockoverride "remaining_items"
							{
								# visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetSiblings), '(int32)7' )]"
								# text = "[GetNumberAbove_int32( GetDataModelSize(CharacterWindow.GetSiblings), '(int32)7' )|=]"
							}

							blockoverride "expand_button_inside" {
								# visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetSiblings), '(int32)7' )]"
								# onclick = "[CharacterWindow.ToggleExpandedRelation( 'siblings' )]"
							}
						}

						#grandparents
						vbox_character_row_item_ocr = {
							layoutpolicy_horizontal = expanding
							name = "grandparents"
							# visible = "[Not(Or(GreaterThan_int32( Character.GetMaxSpouses, '(int32)1' ), GreaterThan_int32( Character.GetMaxConsorts, '(int32)0' )))]"
							# layoutpolicy_vertical = expanding

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetGrandparents]"
							}

							blockoverride "header_text"
							{
								raw_text = "Grandparents [GetDataModelSize(CharacterWindow.GetGrandparents)]."
							}

							blockoverride "expand_button" { }
						}

						expand = { }
					}
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[GetVariableSystem.HasValue('char_tab','relations')]"
				blockoverride "scrollbox_margins" {
					margin_top = 20
				}
				blockoverride "scrollbox_content" {
					vbox = {
						margin_top = 15
						spacing = 3
						layoutpolicy_horizontal = expanding

						vbox_character_row_item_ocr = {
							layoutpolicy_horizontal = expanding
							name = "wards"
							visible = "[CharacterWindow.GetCharacter.IsAdult]"
							# layoutpolicy_vertical = expanding

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'ward' ) )]"
							}

							blockoverride "extra2" {
								text_single = {
									raw_text = "[Character.GetRelationToString( GetPlayer )]."
								}
							}

							blockoverride "header_text"
							{
								raw_text = "Wards, [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'ward' ) ))]."
							}

							blockoverride "expand_button" { }

							### WARD FINDER
							blockoverride "find_partner"
							{
								hbox = {
									visible = "[Character.IsPlayerInteractionShown('educate_child_interaction')]"
									layoutpolicy_horizontal = expanding
									spacing = 3


									text_single = {
										margin_left = 3
										raw_text = "[CharacterWindow.CalcUnusedRelationSlots( GetRelation( 'ward' ), '(int32)2' )] more slots. "
									}

									button = {
										size = { 0 20 }
										onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('educate_child_interaction')]"
										# enabled = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('educate_child_interaction')]"

										flowcontainer = {
											resizeparent = yes
											ignoreinvisible = yes

											text_single = {
												raw_text = " Educate child."
												# visible = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('educate_child_interaction')]"
											}
											# text_single = {
											# 	raw_text = " Disabled, see tooltip."
											# 	visible = "[Not(CharacterWindow.GetCharacter.IsPlayerInteractionValid('educate_child_interaction'))]"
											# 	# tooltip = "[CharacterWindow.GetCharacter.GetPlayerInteractionTooltip('educate_child_interaction')]"
											# }
										}
									}

									expand = { }
								}
							}
						}

						vbox_character_row_item_ocr = {
							name = "lovers"
							visible = "[CharacterWindow.GetCharacter.IsAdult]"
							# layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) )]"
							}

							blockoverride "extra2" {
								text_single = {
									raw_text = "[Character.GetRelationToString( GetPlayer )]."
								}
							}

							blockoverride "header_text"
							{
								raw_text = "Lovers. [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ))]."
							}

							blockoverride "remaining_items"
							{
								# visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ) ), '(int32)5' ) )]"
								# margin = { 167 }
								# text = "[GetNumberAbove_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ) ), '(int32)5' )|=]"

							}

							blockoverride "expand_button_inside" {
								# visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ) ), '(int32)5' )]"
								# onclick = "[CharacterWindow.ToggleExpandedRelation( 'lovers' )]"
							}

						}

						vbox_character_row_item_ocr = {
							name = "guardian"
							layoutpolicy_horizontal = expanding
							visible = "[Not(CharacterWindow.GetCharacter.IsAdult)]"
							# layoutpolicy_vertical = expanding

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'guardian' ) )]"
							}

							blockoverride "extra2" {
								text_single = {
									raw_text = "[Character.GetRelationToString( GetPlayer )]."
								}
							}

							blockoverride "header_text"
							{
								raw_text = "Guardian, [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'guardian' ) ))]."
							}


							blockoverride "expand_button" { }

							### GUARDIAN FINDER
							blockoverride "find_partner"
							{

								hbox = {
									layoutpolicy_horizontal = expanding
									hbox = {
										visible = "[Character.IsPlayerInteractionShown('educate_child_interaction')]"
										layoutpolicy_horizontal = expanding
										spacing = 3


										text_single = {
											margin_left = 3
											raw_text = "[CharacterWindow.CalcUnusedRelationSlots( GetRelation( 'guardian' ), '(int32)1' )] more slots. "
										}

										button = {
											size = { 0 20 }
											onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('educate_child_interaction')]"
											# enabled = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('educate_child_interaction')]"

											flowcontainer = {
												resizeparent = yes
												ignoreinvisible = yes

												text_single = {
													raw_text = " Educate child."
													# visible = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('educate_child_interaction')]"
												}
												# text_single = {
												# 	raw_text = " Disabled, see tooltip."
												# 	visible = "[Not(CharacterWindow.GetCharacter.IsPlayerInteractionValid('educate_child_interaction'))]"
												# 	# tooltip = "[CharacterWindow.GetCharacter.GetPlayerInteractionTooltip('educate_child_interaction')]"
												# }
											}
										}

										expand = { }
									}

									hbox = {
										visible = "[Character.IsPlayerInteractionShown('offer_guardianship_interaction')]"
										layoutpolicy_horizontal = expanding
										spacing = 3


										text_single = {
											margin_left = 3
											raw_text = "[CharacterWindow.CalcUnusedRelationSlots( GetRelation( 'guardian' ), '(int32)1' )] more slots. "
										}

										button = {
											size = { 0 20 }
											onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('offer_guardianship_interaction')]"
											enabled = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid( 'offer_guardianship_interaction' )]"
											# enabled = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('educate_child_interaction')]"

											flowcontainer = {
												resizeparent = yes
												ignoreinvisible = yes

												text_single = {
													raw_text = " Educate child."
													visible = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('offer_guardianship_interaction')]"
												}
												text_single = {
													raw_text = " Disabled, see tooltip."
													visible = "[Not(CharacterWindow.GetCharacter.IsPlayerInteractionValid('offer_guardianship_interaction'))]"
													tooltip = "[CharacterWindow.GetCharacter.GetPlayerInteractionTooltip('offer_guardianship_interaction')]"
												}
											}
										}

										expand = { }
									}
								}
							}
						}

						vbox_character_row_item_ocr = {
							name = "crushes"
							visible = "[Not(CharacterWindow.GetCharacter.IsAdult)]"
							layoutpolicy_horizontal = expanding
							# layoutpolicy_vertical = expanding

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'crush' ) )]"
							}

							blockoverride "extra2" {
								text_single = {
									raw_text = "[Character.GetRelationToString( GetPlayer )]."
								}
							}

							blockoverride "header_text"
							{
								raw_text = "Crushes, [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'crush' ) ))]."
							}

							blockoverride "expand_button" { }
						}

						vbox_character_row_item_ocr = {
							name = "friends"
							# layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) )]"
							}

							blockoverride "extra2" {
								text_single = {
									raw_text = "[Character.GetRelationToString( GetPlayer )]."
								}
							}

							blockoverride "header_text"
							{
								raw_text = "Friends, [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ))]."
							}

							blockoverride "remaining_items"
							{
								# visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)7' ) )]"
								# text = "[GetNumberAbove_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)7' )|=]"
							}

							blockoverride "expand_button_inside" {
								# visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)7' )]"
								# onclick = "[CharacterWindow.ToggleExpandedRelation( 'friends' )]"
							}
						}

						vbox_character_row_item_ocr = {
							name = "rivals"
							# visible = "[CharacterWindow.GetCharacter.IsAdult]"
							# layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) )]"
							}

							blockoverride "extra2" {
								text_single = {
									raw_text = "[Character.GetRelationToString( GetPlayer )]."
								}
							}

							blockoverride "header_text"
							{
								raw_text = "Rivals, [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) ))]."
							}

							blockoverride "remaining_items"
							{
								# visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) )), '(int32)7' ))]"
								# text = "[GetNumberAbove_int32( GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) )), '(int32)7' )|=]"
							}

							blockoverride "expand_button_inside" {
								# visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) )), '(int32)7' )]"
								# onclick = "[CharacterWindow.ToggleExpandedRelation( 'rivals' )]"
							}
						}

						vbox_character_row_item_ocr = {
							name = "bullies"
							visible = "[Not( CharacterWindow.GetCharacter.IsAdult )]"
							# layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'bully' ) )]"
							}

							blockoverride "header_text"
							{
								raw_text = "Bullies, [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'bully' ) ))]."
							}

							blockoverride "expand_button" { }
						}

						vbox_character_row_item_ocr = {
							name = "victims"
							visible = "[Not( CharacterWindow.GetCharacter.IsAdult )]"
							# layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'victim' ) )]"
							}

							blockoverride "header_text"
							{
								raw_text = "Victims, [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'victim' ) ))]."
							}

							blockoverride "expand_button" { }
						}

						expand = { }
					}
				}
			}

			####################################
			############ COURT TAB #############
			####################################

			vbox_character_list = {
				datacontext = "[CharacterWindow.GetCourt]"
				visible = "[GetVariableSystem.HasValue('char_tab','court')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "sort_dropdown" {
					dropdown_sort_characterlist = {
						# unique name needed to distinct from vassal sort options
						name = "court_sort_options"
					}
				}

				blockoverride "scrollbox_margins" {
					margin_top = 20
				}

				blockoverride "container_implementation" {
					fixedgridbox = {
						name = "characters_grid"
						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"
						addcolumn = 590
						addrow = 90
						setitemsizefromcell = yes

						item = {
							widget_character_list_item_finder = {
								datacontext = "[CharacterListItem.GetCharacter]"

								blockoverride "gridbox_items"
								{
									datamodel_wrap = 7
									maxverticalslots = 2
								}

								blockoverride "action_buttons" { }
							}
						}
					}
				}
			}

			####################################
			########### VASSALS TAB ############
			####################################

			vbox_character_list = {
				visible = "[GetVariableSystem.HasValue('char_tab','vassals')]"
				datacontext = "[CharacterWindow.GetVassals]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "sort_dropdown" {
					dropdown_sort_characterlist = {
						# unique name needed to distinct from court sort options
						name = "vassal_sort_options"
					}
				}

				blockoverride "scrollbox_margins" {
					margin_top = 20
				}

				blockoverride "container_implementation" {
					fixedgridbox = {
						name = "characters_grid"
						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"
						addcolumn = 590
						addrow = 70
						setitemsizefromcell = yes

						item = {
							widget_vassal_list_item = {
								datacontext = "[CharacterListItem.GetCharacter]"

								blockoverride "own_vassal" { }
							}
						}
					}
				}
			}


			# scrollbox = {
			# 	visible = "[GetVariableSystem.HasValue('char_tab','relations')]"
			# 	layoutpolicy_horizontal = expanding
			# 	layoutpolicy_vertical = expanding
			# 	blockoverride "scrollbox_content" {
			#
			#
			# 	}
			# }
		}


		widget = {
			visible = no
			# visible = "[And(CharacterWindow.AreNoneExpanded, Not(GetVariableSystem.Exists('expand_view')))]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			# size = { 0 350 }

			using = Animation_Tab_Switch

			####################################
			########### FAMILY TAB #############
			####################################



			# widget = {
			# 	name = "family"
			# 	size = { 100% 100% }
			#
			#
			# 	using = Animation_Tab_Switch
			#
			#
			# 	### SIBLINGS EXPANDED
			# 	scrollbox = {
			# 		name = "family_siblings_expanded"
			# 		visible = "[CharacterWindow.IsRelationExpanded( 'siblings' )]"
			# 		size = { 100% 100% }
			#
			# 		blockoverride "scrollbox_replace_vbox" {
			# 			vbox_character_row_item = {
			# 				name = "siblings"
			# 				margin_top = 10
			# 				spacing = 3
			#
			#
			# 				blockoverride "portrait_datamodel" {
			# 					datamodel = "[CharacterWindow.GetSiblings]"
			# 				}
			#
			# 				blockoverride "header_text"
			# 				{
			# 					text = "CV_SIBLINGS_HEADING"
			# 				}
			#
			# 				blockoverride "expand_button_inside" {
			# 					onclick = "[CharacterWindow.ToggleExpandedRelation( 'siblings' )]"
			# 					down = "[CharacterWindow.IsRelationExpanded( 'siblings' )]"
			# 				}
			#
			# 				blockoverride "gridbox_slots" { }
			# 			}
			# 		}
			# 	}
			#
			# 	### CHILDREN EXPANDED
			# 	scrollbox = {
			# 		name = "family_children_expanded"
			# 		visible = "[CharacterWindow.IsRelationExpanded( 'children' )]"
			# 		size = { 100% 100% }
			#
			# 		blockoverride "scrollbox_replace_vbox" {
			# 			vbox_character_row_item = {
			# 				name = "children"
			# 				margin_top = 10
			# 				spacing = 3
			#
			# 				blockoverride "portrait_datamodel" {
			# 					datamodel = "[CharacterWindow.GetChildren]"
			# 				}
			#
			# 				blockoverride "header_text"
			# 				{
			# 					text = "CV_CHILDREN_HEADING"
			# 				}
			#
			# 				blockoverride "expand_button_inside" {
			# 					onclick = "[CharacterWindow.ToggleExpandedRelation( 'children' )]"
			# 					down = "[CharacterWindow.IsRelationExpanded( 'children' )]"
			# 				}
			#
			# 				blockoverride "gridbox_slots" { }
			# 			}
			# 		}
			# 	}
			# }

			####################################
			########## RELATIONS TAB ###########
			####################################

			widget = {
				name = "relations"
				size = { 100% 100% }

				using = Animation_Tab_Switch


				### RIVALS EXPANDED
				scrollbox = {
					name = "rivals_expanded"
					visible = "[CharacterWindow.IsRelationExpanded( 'rivals' )]"
					size = { 100% 100% }

					blockoverride "scrollbox_replace_vbox" {
						vbox_character_row_item = {
							name = "rivals"
							margin_top = 10
							spacing = 3


							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) )]"
							}

							blockoverride "header_text"
							{
								text = "RIVALS_LABEL"
							}

							blockoverride "expand_button_inside" {
								onclick = "[CharacterWindow.ToggleExpandedRelation( 'rivals' )]"
								down = "[CharacterWindow.IsRelationExpanded( 'rivals' )]"
							}

							blockoverride "gridbox_slots" { }
						}
					}
				}

				### FRIENDS EXPANDED
				scrollbox = {
					name = "friends_expanded"
					visible = "[CharacterWindow.IsRelationExpanded( 'friends' )]"
					size = { 100% 100% }

					blockoverride "scrollbox_replace_vbox" {
						vbox_character_row_item = {
							name = "friends"
							margin_top = 10
							spacing = 3


							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) )]"
							}

							blockoverride "header_text"
							{
								text = "FRIENDS_LABEL"
							}

							blockoverride "expand_button_inside" {
								onclick = "[CharacterWindow.ToggleExpandedRelation( 'friends' )]"
								down = "[CharacterWindow.IsRelationExpanded( 'friends' )]"
							}

							blockoverride "gridbox_slots" { }
						}
					}
				}

				### LOVERS EXPANDED
				scrollbox = {
					name = "lovers_expanded"
					visible = "[CharacterWindow.IsRelationExpanded( 'lovers' )]"
					size = { 100% 100% }

					blockoverride "scrollbox_replace_vbox" {
						vbox_character_row_item = {
							name = "friends"
							margin_top = 10
							spacing = 3

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) )]"
							}

							blockoverride "header_text"
							{
								text = "LOVERS_LABEL"
							}

							blockoverride "expand_button_inside" {
								onclick = "[CharacterWindow.ToggleExpandedRelation( 'lovers' )]"
								down = "[CharacterWindow.IsRelationExpanded( 'lovers' )]"
							}

							blockoverride "gridbox_slots" { }
						}
					}
				}
			}
		}

		# TRAITS EXPANDED
		scrollbox = {
			name = "traits_expanded"
			visible = "[CharacterWindow.AreTraitsExpanded]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			using = Animation_Tab_Switch

			blockoverride "scrollbox_content"
			{
				spacing = 10

				vbox = {
					spacing = 10

					text_label_center = {
						text = "MODIFIERS"
					}

					text_single = {
						visible = "[IsDataModelEmpty(CharacterWindow.GetTimedModifiers)]"
						text = "CV_NO_MODIFIERS"
						default_format = "#low;italic"
					}

					dynamicgridbox = {
						name = "modifiers_grid"
						datamodel = "[CharacterWindow.GetTimedModifiers]"
						datamodel_wrap = 8
						flipdirection = yes

						item = {
							icon = {
								size = { 35 35 }
								alwaystransparent = no
								texture = "[ModifierItem.GetIcon]"
								tooltip = "[ModifierItem.GetTooltip]"
							}
						}
					}
				}

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				vbox = {
					spacing = 10

					text_label_center = {
						text = "TRAITS"
					}

					fixedgridbox = {
						name = "personality_traits_grid"
						datamodel = "[CharacterWindow.GetPersonalityTraits]"
						addcolumn = 85
						addrow = 105
						flipdirection = yes
						datamodel_wrap = 6

						item = {
							icon_trait = {
								text_multi = {
									parentanchor = bottom|hcenter
									widgetanchor = top|hcenter
									position = { 0 -5 }
									autoresize = yes
									max_width = 80
									text = "[Trait.GetNameNoTooltip(Character.Self)]"
									default_format = "#high"
									align = hcenter
								}
							}
						}
					}

					fixedgridbox = {
						name = "traits_grid"
						datamodel = "[CharacterWindow.GetTraits]"
						addcolumn = 85
						addrow = 105
						flipdirection = yes
						datamodel_wrap = 6

						item = {
							icon_trait = {
								text_multi = {
									parentanchor = bottom|hcenter
									widgetanchor = top|hcenter
									position = { 0 -5 }
									autoresize = yes
									max_width = 80
									text = "[Trait.GetNameNoTooltip(Character.Self)]"
									default_format = "#high"
									align = hcenter
								}
							}
						}
					}
				}
			}
		}

		expand = { }
	}

	type char_expanded_list = flowcontainer {
		direction = vertical
		# layoutpolicy_horizontal = expanding
		ignoreinvisible = yes

		divider_light = {
			size = { 400 3 }
		}
		item = {
			button = {
				size = { 0 25 }
				onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Scope.GetProvince.GetId))]"
				onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
				flowcontainer = {
					resizeparent = yes
					ignoreinvisible = yes
					datacontext = "[Scope.GetProvince]"
					spacing = 3
					text_single = {
						raw_text = "[Province.GetHolding.GetType.GetName]"
						visible = "[Not(EqualTo_string(Province.GetHolding.GetType.GetKey, ''))]"
					}
					text_single = {
						raw_text = "[Province.GetNameNoTooltip],"
					}
					text_single = {
						raw_text = "Tax: [Province.GetHolding.GetIncome|1],"
						visible = "[Not(EqualTo_string(Province.GetHolding.GetType.GetKey, ''))]"
					}
					text_single = {
						raw_text = "Levies: [Province.GetHolding.GetMaxLevySize|0]."
						visible = "[Not(EqualTo_string(Province.GetHolding.GetType.GetKey, ''))]"
					}
					text_single = {
						raw_text = "Fort level: [Province.GetFortLevel]."
						visible = "[Province.HasFort]"
					}

					text_single = {
						raw_text = "Empty."
						visible = "[EqualTo_string(Province.GetHolding.GetType.GetKey, '')]"
					}

					text_single = {
						raw_text = "In county of [Province.GetCounty.GetName]."
					}
				}
			}
		}

		# text_single = {
		# 	layoutpolicy_horizontal = expanding
		# 	raw_text = ""
		# }
		#
		# flowcontainer = {
		# 	datamodel = "[Character.MakeScope.GetList('realm_holdings')]"
		# }
	}

	type realm_name_and_type_vbox_ocr = hbox {
		# layoutpolicy_horizontal = expanding
		spacing = 3
		margin_left = 3

		text_single = {
			name = "faction"
			visible = "[Title.HasFaction]"
			text = "CV_CIVIL_WAR_FACTION"
			fontsize_min = 14
		}

		text_single = {
			raw_text = "Vassal of"
			visible = "[Not(Character.IsIndependentRuler)]"
			margin_right = -3
		}

		button_text = {
		    blockoverride "text" {
		        raw_text = "[Character.GetLiege.GetPrimaryTitle.GetNameNoTooltip]."
				align = left
		    }
			visible = "[Not(Character.IsIndependentRuler)]"
			onclick = "[DefaultOnCharacterClick(Character.GetLiege.GetID)]"
			onclick = "[DefaultOnCharacterClick(Character.GetLiege.GetID)]"
			onrightclick = "[DefaultOnCharacterRightClick(Character.GetLiege.GetID)]"
		}


		# text_single = {
		# 	raw_text = " Capital in [Character.GetCapitalLocation.GetCounty.GetName], [Character.GetCapitalLocation.GetCounty.GetTitle.GetDeFactoTopLiege.GetBaseNameNoTierNoTooltip]."
		# }

		# text_single = {
		# 	raw_text = "."
		# }

		expand = { }
	}

	type health_tooltip = flowcontainer {
		margin = { 15 10 }
		using = DefaultTooltipBackground
		ignoreinvisible = yes
		direction = vertical

		 text_single = {
			raw_text = "[Character.GetHealthInfo]."
		 }

		 physical_appearance = { }
	}

	type physical_appearance = flowcontainer {
		direction = vertical
		ignoreinvisible = yes

		flowcontainer = {
			spacing = 3
			text_single = {
				raw_text = "Height, [Multiply_float( Add_float( Character.CalcMorphGeneAttribute('gene_height', 'body_height'), '(float)1' ), FixedPointToFloat(GuiScope.SetRoot(Character.MakeScope).ScriptValue('sex_height')) )|0] centimeters"
			}

			text_single = {
				raw_text = "or [Multiply_float( Add_float( Character.CalcMorphGeneAttribute('gene_height', 'body_height'), '(float)1' ), FixedPointToFloat(GuiScope.SetRoot(Character.MakeScope).ScriptValue('height_feet')) )|1] feet,"
			}

			# text_single = {
			# 	raw_text = "[Add_float(Character.CalcMorphGeneAttribute('gene_height', 'body_height'), '(float)1')|0%]."
			# }
		}

		 text_single = {
			raw_text = "Weight, [Character.GetCurrentWeight|=]% [Select_CString(GreaterThan_int32(Character.GetCurrentWeight, '(int32)0'), 'above', 'below')] average."
		 }

		 text_single = {
			 visible = "[And(Character.IsFemale, Character.IsAdult)]"
			 raw_text = "Breast size, [Multiply_float(Character.CalcMorphGeneAttribute('gene_bs_bust', 'bs_body_breast_size_2_max'), '(float)2')|0%]."
		 }
	 }

	type vbox_character_row_item_ocr = vbox {
		# spacing = -3

		widget = {
			layoutpolicy_horizontal = expanding
			size = { 0 20 }
			min_width = 110

			block "expand_button" {
				button_standard_hover = {
					size = { 100% 100% }

					block "expand_button_inside" { }
				}
			}

			hbox = {
				margin = { 10 0 }

				background = {
					using = Text_Label_Background
					alpha = 0.5
					margin = { 0 -2 }
				}

				text_single = {
					align = left
					fontsize = 15

					block "header_text"
					{
						raw_text = "#D NEEDS TEXT#!"
					}
				}

				expand = { }

				text_single = {
					align = left
					# default_format = "#weak"

					block "remaining_items" {
						visible = no
					}
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding

			using = Animation_Character_Window_Refresh

			block "gridbox" {
				vbox = {
					layoutpolicy_horizontal = expanding
					# flipdirection = yes
					# addcolumn = 85
					# addrow = 90
					# datamodel_wrap = 7

					block "gridbox_slots"
					{
						# maxverticalslots = 1
					}

					block "portrait_datamodel" {
						datamodel = "[CharacterWindow.GetParents]"
					}

					item = {
						char_name = {
							layoutpolicy_horizontal = expanding
							blockoverride "extra" {
								spacing = 3
								text_single = {
									raw_text = "Dead,"
									visible = "[Character.IsDeadAndValid]"
								}
								text_single = {
									raw_text = "[Character.GetAge]."
								}
								block "extra2" { }
								expand = { }
							}
						}
					}
				}
			}

			block "find_partner" { }

			expand = { }
		}

		expand = { }
	}
}


template "expanded_view" {
	onclick = "[GetScriptedGui('expanded_view').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
	onclick = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
}

template "holdings_list" {
}