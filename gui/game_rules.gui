window = {
	name = "game_rules"
	size = { 100% 100% }
	movable = no
	layer = confirmation

	using = Background_Full_Dim

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		on_start = "[PdxGuiWidget.FindChild('game_rules_window').TriggerAnimation('appear')]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		on_start = "[PdxGuiWidget.FindChild('game_rules_window').TriggerAnimation('disappear')]"
	}

	button_normal = {
		size = { 100% 100% }
		onclick = "[JominiGameRules.Hide]"
	}

	widget = {
		name = "game_rules_window"
		parentanchor = center
		size = { 100% 99% }
		alwaystransparent = no
		allow_outside = yes
		using = TooltipFocus

		using = Window_Decoration_Frontend_Spike
		using = Window_Background

		state = {
			name = appear
			duration = 0.15
			using = Animation_Curve_Default

			position_y = 0
			start_sound = {
				soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_standard_show"
			}
		}

		state = {
			name = disappear
			duration = 0.15
			using = Animation_Curve_Default

			position_y = 50
			start_sound = {
				soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_standard_hide"
			}
		}

		vbox = {
			using = Window_Margins
			# spacing = 5

			header_pattern = {
				size = { 0 35 }
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "GAME_RULES_HEADER"
				}

				blockoverride "button_close"
				{
					onclick = "[JominiGameRules.Hide]"
					shortcut = "close_window"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
				}
			}

			hbox_ironman_achievements_info = {
				name = "ironman_and_achievements"
				visible = "[Not( GameHasMultiplePlayers )]"
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
				# spacing = 10
				dropdown_menu_standard = {
					blockoverride "dropdown_properties"
					{
						datamodel = "[JominiGameRules.GetRulePresets]"
						onselectionchanged = "[JominiGameRules.OnSelectPreset]"
						onselectionchanged = "[SetIronmanEnabledStatus(JominiGameRules.GetSelectedPreset.IsIronmanEnabled)]"
					}


					blockoverride "dropdown_active_item_properties"
					{
						text = "[SelectLocalization( JominiGameRules.HasValidPresetSelected, JominiGameRules.GetSelectedPreset.GetName, 'GAME_RULES_PRESET_DROPDOWN_NO_SELECTED' )]"
					}

					blockoverride "dropdown_item_properties"
	                {
	                    widget = {
							size = { 100% 100% }

	                        hbox = {
								margin_right = 10

	                            text_single = {
	                                layoutpolicy_horizontal = expanding
									max_width = 145
									margin_left = 4
									default_format = "#clickable"
									text = "[GuiGameRulePreset.GetName]"
	                            }

	                            achievements_enabled_icon = {
									visible = "[And( GuiGameRulePreset.IsIronmanEnabled, Not( GuiGameRulePreset.HasRuleWithFlag('blocks_achievements') ) )]"
									size = { 20 20 }
	                            }

	                            achievements_disabled_icon = {
	                                visible = "[Or( Not( GuiGameRulePreset.IsIronmanEnabled ), GuiGameRulePreset.HasRuleWithFlag('blocks_achievements') )]"
	                                size = { 20 20 }
	                            }
	                        }
	                    }
	                }

					blockoverride "dropdown_list_properties"
					{
						minimumsize = { 192 50 }
						hbox = {
							visible = "[IsDataModelEmpty(JominiGameRules.GetRulePresets)]"
							textbox = {
								text = "GAME_RULES_PRESET_DROPDOWN_NO_SELECTED_BODY"
								align = center
							}
						}
					}
				}

				button_text = {
					onclick = "[JominiGameRules.ShowPresetWindow]"
					onclick = "[JominiGameRules.SetPresetSaveName]"
					blockoverride "text" {
						text = "SAVE"
					}
					tooltip = "SAVE_PRESET_BUTTON_TOOLTIP"
				}

				dot = { }

				spacer = {
					size = { 5 0 }
				}

				button_text = {
					enabled = "[JominiGameRules.HasValidPresetSelected]"
					onclick = "[JominiGameRules.DeletePresetAtIndex( JominiGameRules.GetSelectedPresetIndex )]"
					blockoverride "text" {
						text = "DELETE"
					}
					tooltip = "DELETE_SELECTED_PRESET_BUTTON_TOOLTIP"
				}
				dot = { }

				expand = { }
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					# margin_top = 30
					# margin_left = 25

					vbox = {
						datamodel = "[JominiGameRules.GetSettings]"
						layoutpolicy_horizontal = expanding
						# addcolumn = 450
						# addrow = 170
						# datamodel_wrap = 1
						# maxhorizontalslots = 1
						# flipdirection = yes

						item = {
							widget = {
								size = { 0 0 }
								layoutpolicy_horizontal = expanding
								datacontext = "[GuiGameRule.GetRule]"
								datacontext = "[GuiGameRule.GetSetting]"

								# background = {
								# 	using = Background_Area_With_Header
								# 	alpha = 0.8
								# 	margin = { 10 5 }
								# 	margin_bottom = 0
								# }

								flowcontainer = {
									margin_bottom = 2
									direction = vertical
									ignoreinvisible = yes
									resizeparent = yes

									text_single = {
										text = "[GameRule.GetName]"
										max_width = 420
									}

									spacer = {
										size = { 5 5 }
									}

									widget_game_rule_option = { }

									text_multi = {
										# layoutpolicy_horizontal = expanding
										# layoutpolicy_vertical = expanding
										text = "[GameRuleSetting.GetDescription]"
										# default_format = "#low"
										# margin = { 10 0 }
										margin_right = 20
										fontsize_min = 14
										autoresize = yes
										max_width = 1900
									}
								}
							}
						}
					}
				}
			}

			expand = {}
		}

		game_rules_preset_window = {}
	}

}

types GameRuleTypes
{
	type widget_game_rule_option = widget {
		size = { 240 30 }

		background = {
			using = Background_Area_Dark
			margin = { 5 5 }
		}

		flowcontainer = {
			ignoreinvisible = yes
			resizeparent = yes

			text_single = {
				raw_text = "[GameRuleSetting.GetName]."
				# default_format = "#medium"
				align = nobaseline
			}

			button_text = {
				blockoverride "text" {
					raw_text = "Previous,"
				}
				visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
				block "onclick_prev" {
					onclick = "[GuiGameRule.Prev]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
				}
			}

			button_text = {
				blockoverride "text" {
					raw_text = "Next."
				}
				visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
				block "onclick_next" {
					onclick = "[GuiGameRule.Next]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
				}
			}
		}
		# achievements_disabled_icon = {
		# 	visible = "[GameRuleSetting.HasFlag( 'blocks_achievements' )]"
		# 	parentanchor = right
		# 	position = { -30 4 }
		# 	size = { 22 22 }
		# 	tooltip = "GAME_RULE_BLOCKS_ACHIEVEMENTS"
		# }
	}

	type flowcontainer_game_rules_mini = flowcontainer {
		name = "difficulty_setting"
		datacontext = "[AccessGameRules]"
		datacontext = "[JominiGameRules.AccessNamedGameRule( 'difficulty' )]"
		datacontext = "[GuiGameRule.GetRule]"
		datacontext = "[GuiGameRule.GetSetting]"
		spacing = 10

		text_single = {
			align = left|nobaseline
			raw_text = "[GameRule.GetName]:"
			# tooltip = "[GameRule.GetSettings.GetDescription]"
			# default_format = "#medium"
			max_width = 150
			# minimumsize = { 0 25 }
		}

		widget_game_rule_option = {
			blockoverride "onclick_prev"
			{
				onclick = "[GuiGameRule.Prev]"
				onclick = "[JominiGameRules.ApplySettings]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"

			}
			blockoverride "onclick_next"
			{
				onclick = "[GuiGameRule.Next]"
				onclick = "[JominiGameRules.ApplySettings]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
			}
		}
	}

	type hbox_achievements_info = hbox {
		name = "achievements"
		visible = no
		tooltip = "[SelectLocalization( CanGetAchievements, 'ACHIEVEMENTS_ENABLED', 'ACHIEVEMENTS_DISABLED' )]"

		block "ai_background"
		{

		}


		achievements_enabled_icon = {
			visible = no#"[CanGetAchievements]"
			block "ai_icon_size"
			{

			}
		}

		achievements_disabled_icon = {
			visible = no#"[Not( CanGetAchievements )]"
			block "ai_icon_size"
			{

			}
		}

		hbox = {
			name = "text"

			text_single = {
				text = "ACHIEVEMENTS_LABEL"
				max_width = 150
				align = left|nobaseline
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "[SelectLocalization( CanGetAchievements, 'ACHIEVEMENTS_ENABLED_NO_HEADER', 'ACHIEVEMENTS_DISABLED_NO_HEADER' )]"
				default_format = "#warning"
				max_width = 150
				align = left|nobaseline
			}
		}

	}

	type hbox_ironman_achievements_info = hbox {
		layoutpolicy_horizontal = expanding
		# margin = { 30 6 }
		# spacing = 20


		button_text = {
			blockoverride "text" {
				text = "APPLY"
			}
			visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
			onclick = "[JominiGameRules.ApplySettings]"
			onclick = "[JominiGameRules.Hide]"
			shortcut = "close_window"
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
		}
		dot_nb = { }
		# spacer = {
		# 	size = { 5 0 }
		# }

		hbox = {
			name = "ironman"

			tooltip = "IRONMAN_PAUSE_MENU_TOOLTIP"

			hbox = {
				hbox = {
					margin_left = 10
					spacing = 5

					text_single = {
						text = "IRONMAN_LABEL"
						max_width = 150
						align = left|nobaseline
					}

					text_single = {
						text = "[SelectLocalization( IsIronmanEnabled, 'IRONMAN_ENABLED_NO_HEADER', 'IRONMAN_DISABLED_NO_HEADER' )]"
						# default_format = "#warning"
						max_width = 150
						# min_width = 60
						align = left|nobaseline
						layoutpolicy_horizontal = expanding
					}
				}
				dot_nb = { }
			}

			hbox = {
				# margin = { 3 5 }
				name = "buttons"
				visible = "[Not( HasGameStartedForTheFirstTime )]"

				button_text = {
					name = "enable"
					blockoverride "text" {
						text = "ENABLE_IRONMAN"
					}
					visible = "[Not( IsIronmanEnabled )]"
					enabled = "[Not( IsIronmanEnabled )]"
					onclick = "[SetIronmanEnabledStatus( '(bool)yes' )]"
					onclick = "[JominiGameRules.SetIronman( '(bool)yes' )]"
				}

				button_text = {
					name = "disable"
					blockoverride "text" {
						text = "DISABLE_IRONMAN"
					}
					visible = "[IsIronmanEnabled]"
					enabled = "[IsIronmanEnabled]"
					onclick = "[SetIronmanEnabledStatus( '(bool)no' )]"
					onclick = "[JominiGameRules.SetIronman( '(bool)no' )]"
				}

				dot_nb = { }

			}

		}

		# hbox_achievements_info = {}

		# expand = {}

		hbox = {
			# margin = { 0 10 }
			# margin_top = 5

			# spacing = 20

			button_text = {
				visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
				blockoverride "text" {
					text = "GAME_RULES_RESET_TO_DEFAULTS_TEXT"
				}
				onclick = "[JominiGameRules.ResetAllToDefaults]"
			}
			# spacer = {
			# 	size = { 5 0 }
			# }

			button_text = {
				blockoverride "text" {
					text = "CLOSE_LABEL"
				}
				visible = "[Not( And( IsHost, Not( HasGameStartedForTheFirstTime ) ) )]"
				onclick = "[JominiGameRules.Hide]"
				shortcut = "close_window"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
			}
			dot_nb = { }
			# spacer = {
			# 	size = { 5 0 }
			# }

			expand = { }
		}


		expand = { }
	}

	type game_rules_preset_window = window  {
		name = "game_rules_preset"

		visible = "[And( And( IsHost, Not( HasGameStartedForTheFirstTime ) ), JominiGameRules.IsPresetWindowShown )]"

		size = { 400 510 }
		position = { 385 25 }
		parentanchor = right

		layer = confirmation
		alwaystransparent = no
		movable = no

		using = Window_Background_Subwindow

		vbox = {
			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "SAVE_PRESET_HEADER"
				}

				blockoverride "button_close"
				{
					onclick = "[JominiGameRules.HidePresetWindow]"
					shortcut = "close_window"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
				}
			}

			editbox_standard_with_label = {
				margin = { 30 0 }
				margin_bottom = 14
				layoutpolicy_horizontal = expanding

				blockoverride "editbox_label"
				{
					text = "SAVE_PRESET_SAVE_AS_LABEL"
				}

				blockoverride "editbox_properties"
				{
					name = "preset_name_edit"
					multiline = no
					maxcharacters = 40
					text = "[JominiGameRules.GetPresetSaveName]"
					ontextedited = "[JominiGameRules.OnPresetSaveNameEdit]"
				}
			}

			scrollbox = {
				size = { 390 0 }
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					margin_top = 20
					margin_left = 20

					fixedgridbox = {
						datamodel = "[JominiGameRules.GetRulePresets]"
						addcolumn = 350
						addrow = 70
						datamodel_wrap = 1
						maxhorizontalslots = 1
						flipdirection = yes

						item = {
							button_standard = {
								size = { 350 60 }

								onclick = "[JominiGameRules.OnPresetSaveNameChange( GuiGameRulePreset.GetName )]"
								down = "[EqualTo_string(JominiGameRules.GetPresetSaveName, GuiGameRulePreset.GetName)]"

								hbox = {
									vbox = {
										margin_left = 10

										text_single = {
											text = "[GuiGameRulePreset.GetName]"
											layoutpolicy_horizontal = expanding
											align = nobaseline
											max_width = 280
										}

										text_single = {
											datacontext = "[GuiGameRulePreset.GetSettingForRule( 'difficulty' )]"
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											minimumsize = { 240 0 }

											text = "GAME_RULES_PRESET_DIFFICULTY"
											default_format = "#low"
											align = nobaseline
										}
									}

									expand = {}

									hbox = {
										margin_right = 10

										achievements_enabled_icon = {
											visible = "[And( GuiGameRulePreset.IsIronmanEnabled, Not( GuiGameRulePreset.HasRuleWithFlag('blocks_achievements') ) )]"
										}

										achievements_disabled_icon = {
											visible = "[Or( Not( GuiGameRulePreset.IsIronmanEnabled ), GuiGameRulePreset.HasRuleWithFlag('blocks_achievements') )]"
										}
									}
								}
							}
						}
					}
				}
			}

			hbox = {
				margin = { 0 16 }
				margin_top = 10

				button_standard = {
					size = { 150 33 }

					enabled = "[JominiGameRules.HasPresetWithName(JominiGameRules.GetPresetSaveName)]"
					onclick = "[JominiGameRules.DeletePresetWithName( JominiGameRules.GetPresetSaveName )]"

					text = "DELETE"
					tooltip = "DELETE_PRESET_WITH_NAME_BUTTON_TOOLTIP"
				}

				spacer = {
					size = { 20 0 }
				}

				button_standard = {
					visible = "[Not(JominiGameRules.HasPresetWithName(JominiGameRules.GetPresetSaveName))]"
					size = { 150 33 }

					enabled = "[JominiGameRules.IsValidPresetName]"
					onclick = "[JominiGameRules.SavePreset]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"

					text = "SAVE"
					tooltip = "[SelectLocalization( JominiGameRules.IsValidPresetName, 'SAVE_PRESET_BUTTON_TOOLTIP', JominiGameRules.GetInvalidPresetNameTooltip )]"
				}

				button_standard = {
					visible = "[JominiGameRules.HasPresetWithName(JominiGameRules.GetPresetSaveName)]"
					size = { 150 33 }

					onclick = "[JominiGameRules.SavePreset]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"

					text = "OVERWRITE_GAME_RULES_PRESET_ACCEPT"
					tooltip = "OVERWRITE_PRESET_BUTTON_TOOLTIP"
				}
			}
			expand = {}
		}
	}
}




