window = {
	name = "army_window"
	datacontext = "[ArmyWindow.GetArmy]"

	# parentanchor = bottom|left
	size = { 750 100% }
	filter_mouse = left|right
	movable = no
	# allow_outside = yes
	alwaystransparent = yes
	layer = middle

	state = {
		name = hide_army_window
		position = { -1500 0 }
	}
	state = {
		name = show_army_window
		position = { 0 0 }
	}

	state = {
		name = refresh_first_army
		on_start = "[GetScriptedGui('sort_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'location', Army.GetLocation.MakeScope ).End )]"
		on_start = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
		on_start = "[GetScriptedGui('raid_targets').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
	}

	widget = {
		visible = "[And(IsGamePaused, Not(GetVariableSystem.Exists('ocr')))]"

		state = {
			trigger_on_create = yes
			name = daily_tick

			# on_start = "[GetScriptedGui('save_army_position').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Army.MakeScope).End )]"
			on_start = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
			on_start = "[GetScriptedGui('raid_targets').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
			on_start = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
		}
	}

	state = {
		trigger_on_create = yes

		# on_start = "[GetScriptedGui('save_army_position').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Army.MakeScope).End )]"
		on_start = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
		# on_start = "[GetScriptedGui('raid_targets').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
		on_start = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
	}

	# using = Window_Background_No_Edge

	state = {
		name = _show
		on_start = "[GetVariableSystem.Set( 'county_view_open', 'true' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"
		onclick = "[GetVariableSystem.Clear('war_selector')]"
		on_start = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
		on_start = "[PdxGuiTriggerAllAnimations('show_army_window')]"
		on_start = "[GetScriptedGui('sort_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'location', Army.GetLocation.MakeScope ).End )]"


		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
		using = Animation_FadeIn_BottomLeft
	}

	state = {
		name = _hide
		on_start = "[GetVariableSystem.Clear( 'county_view_open' )]"
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"


		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
		using = Animation_FadeOut_BottomLeft
	}

	button = {
		onclick = "[ArmyWindow.CloseAndDeselect]"
		size = { 0 0 }
		shortcut = "close_window"
		visible = "[Not(GetVariableSystem.Exists('army_tabs'))]"
	}

	vbox = {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		visible = "[Not(GetVariableSystem.Exists('ocr'))]"

		# all tabs
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			alwaystransparent = yes
			visible = "[Not(GetVariableSystem.Exists('war_selector'))]"

			vbox = {
				layoutpolicy_horizontal = expanding
				alwaystransparent = no
				layoutpolicy_vertical = expanding

				# header
				vbox = {
					margin_left = 10
					layoutpolicy_horizontal = expanding
					background = { using = Background_Area_Border_Solid }

					error_button = {
						shortcut = map_mode_6
						layoutpolicy_horizontal = expanding
					}

					# multi unit header
					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
						margin_left = 5

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_top = 2

							text_single = {
								align = left
								visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
								name = "strength"
								tooltip = "[ArmyWindow.GetAllArmiesCompositionString]"
								raw_text = "[GetDataModelSize(ArmyWindow.GetSelectedUnitItems)] armies selected, total soldiers: [ArmyWindow.GetTotalSoldierCountString]."
							}

							hbox = {
								visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
								button_text = {
									blockoverride "text" {
										raw_text = "Merge, hotkey G."
									}
									blockoverride "disabled" {
										visible = "[Not(ArmyWindow.CanMerge)]"
										tooltip = "[ArmyWindow.BuildMergeTooltip]"
									}
									onclick = "[ArmyWindow.MergeSelected]"
									shortcut = "army_merge"
								}

								button_text = {
									blockoverride "text" {
										raw_text = "Reorganize, hotkey Y."
									}
									blockoverride "disabled" {
										visible = "[Not(ArmyWindow.CanReorgSelected)]"
										tooltip = "[ArmyWindow.BuildReorgTooltip]"
									}
									onclick = "[ArmyWindow.ToggleReorganizationWindow]"
									enabled = "[ArmyWindow.CanReorgSelected]"
									shortcut = map_mode_4
								}
							}

							expand = { }
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								raw_text = "Armies: "
							}

							dynamicgridbox = {
								layoutpolicy_horizontal = expanding
								name = "banner_items_grid"
								datamodel = "[ArmyWindow.GetSelectedUnitItems]"
								visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
								datamodel_wrap = 8
								flipdirection = yes

								item = {
									button_text = {
										blockoverride "text" {
											raw_text = "[SelectedUnitItem.GetArmy.GetSoldierCount|*],"
											align = left
										}
										# blockoverride "extra" {
										# 	text_single = {
										# 		raw_text = " selected."
										# 		visible = "[SelectedUnitItem.IsShown]"
										# 	}
										# }
										onclick = "[PdxGuiTriggerAllAnimations('army_change')]"
										onrightclick = "[SelectedUnitItem.OnRightClick]"
										down = "[SelectedUnitItem.IsShown]"

										state = {
											name = _mouse_click
											delay = 0.2
											on_finish = "[SelectedUnitItem.OnClick]"
										}
										tooltip = "[SelectedUnitItem.GetTooltip]"
										using = tooltip_ne
									}
								}
							}
						}
						## Armies flag
					}

					# header
					vbox = {
						layoutpolicy_horizontal = expanding

						# name
						hbox = {
							layoutpolicy_horizontal = expanding

							spacing = 3

							text_single = {
								raw_text = "Selected:"
								visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
							}

							text_single = {
								name = "strength"
								datacontext = "[Army.GetComposition]"
								raw_text = "[ArmyComposition.GetSoldierCountString] men,"
							}

							hbox = {
								spacing = 3
								visible = "[Army.IsGathering]"

								text_single = {
									name = "status_text"
									raw_text = "[ArmyWindow.GetUnitItem.GetStatusDescription],"
									default_format = "#high"
								}

								button_text = {
									blockoverride "text" {
										raw_text = "STOP_GATHERING"
									}
									blockoverride "dot" {

									}
									visible = "[ArmyWindow.CanStopGathering]"
									onclick = "[ArmyWindow.StopGathering]"
								}
							}

							hbox = {
								name = "loot"
								visible = "[Army.IsRaidArmy]"
								tooltip = "ARMY_RAID_LOOT_TOOLTIP"

								text_single = {
									raw_text = "Loot:"
								}

								text_single = {
									raw_text = " "
								}

								text_single = {
									name = "loot"
									raw_text = "[Army.GetRaidLoot|0] out of [Army.GetLootCap|0]."
								}
							}

							text_single = {
								name = "name"
								raw_text = "[Army.GetNameNoTooltip]."
								max_width = 500
							}

							expand = { }
						}

						# order
						hbox = {
							spacing = 3
							layoutpolicy_horizontal = expanding

							visible = "[Not(Army.IsGathering)]"

							text_single = {
								name = "status_text"
								raw_text = "[ArmyWindow.GetUnitItem.GetStatusDescription],"
								default_format = "#high"
							}

							text_single = {
								visible = "[And(Army.IsMoving, Not(GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End )))]"
								raw_text = "to [Army.GetMovementInfoForTooltip]."
							}

							container = {
								name = "open_raid_button"
								visible = "[Army.IsTakingRaidAction]"
								datacontext = "[Army.GetRaid]"
								using = raid_goto_template
								blockoverride "key" {
									shortcut = confirm
								}
								blockoverride "extra" {
									text_single = {
										raw_text = " hotkey Enter"
									}
								}
							}

							vbox = {
								name = "open_siege_button"
								visible = "[Army.IsSieging]"
								datacontext = "[Army.GetLocation.GetSiege]"
								using = siege_goto_template
								blockoverride "key" {
									shortcut = confirm
								}
								blockoverride "extra" {
									text_single = {
										raw_text = " hotkey Enter"
									}
								}
							}

							button_text = {
								blockoverride "text" {
									raw_text = "STOP_GATHERING"
									align = left
								}
								visible = "[ArmyWindow.CanStopGathering]"
								onclick = "[ArmyWindow.StopGathering]"
							}

							expand = { }
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Or(Not(GetVariableSystem.Exists('army_tabs')), GetVariableSystem.Exists('mini_army'))]"
							# supply
							#TODO
							hbox = {
								visible = no#"[Not(GetVariableSystem.Exists('army_tabs'))]"
							    layoutpolicy_horizontal = expanding

								hbox = {
									tooltip = "ARMY_ATTRITION_TT"
									spacing = 3

									visible = "[GreaterThan_CFixedPoint(Army.GetArmyAttritionPercentage, '(CFixedPoint)0')]"

									text_single = {
										raw_text = "Attrition:"
									}

									text_single = {
										name = "attrition"
										raw_text = "[Army.GetArmyAttritionPercentage|%0-]."
									}
								}

								hbox = {
									name = "supplies"
									tooltip = "[Army.GetSupplyStateTooltip]"

									text_single = {
										raw_text = "Supply:"
									}

									text_single = {
										raw_text = " "
									}

									text_single = {
										name = "supply_text"
										raw_text = "[ArmyWindow.GetCurrentSupply]"
									}

									text_single = {
										visible = "[GreaterThan_int32(ArmyWindow.GetFullSupplyCapacity, ArmyWindow.GetCurrentSupply)]"
										raw_text = " out of [ArmyWindow.GetFullSupplyCapacity]"
									}

									text_single = {
										visible = "[EqualTo_int32(ArmyWindow.GetFullSupplyCapacity, ArmyWindow.GetCurrentSupply)]"
										raw_text = ", full"
									}

									text_single = {
										raw_text = ", decreasing"
										visible = "[ArmyWindow.ShowSupplyTrend]"
									}

									dot = { }

								}

								space = { }

								text_single = {
									raw_text = "Supply limit here: [Army.GetLocation.GetSupplyLimitFor( GetPlayer )]."
								}

							    expand = { }
							}

							# select one unit
							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Click to select only this unit."
								}
								onclick = "[ArmyWindow.SelectThisUnitOnly]"
								visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
							}

							# UNUSED?
							button = {
								name = "select_this_only"
								visible = no# "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
								layoutpolicy_horizontal = expanding
								minimumsize = { 0 48  }
								onclick = "[ArmyWindow.SelectThisUnitOnly]"

								tooltip = "ARMY_SELECT_THIS_ONLY"

								state = {
									name = "army_change"
									alpha = 0
									duration = 0.2
									next = "b"
									using = Animation_Curve_Default
								}

								state = {
									name = "b"
									alpha = 1
									duration = 0.2
									using = Animation_Curve_Default
								}

								### name ###
								hbox = {
									margin_left = 10
									margin_right = 20

									spacing = 5

									background = {
										margin_left = 15
										margin_right = -6
										using = Background_Area_Dark
									}

									hbox = {
										layoutpolicy_vertical = expanding
										spacing = 5

										text_single = {
											name = "name"
											text = "[Army.GetNameNoTooltip]"
											align = left
											using = Font_Size_Medium
											max_width = 600
										}

										button_select_arrow = {
											alwaystransparent = yes
											size = { 20 20 }
										}
									}

									expand = { }

									hbox = {
										name = "loot"
										visible = "[Army.IsRaidArmy]"
										tooltip = "ARMY_RAID_LOOT_TOOLTIP"

										icon = {
											name = "loot_icon"
											size = { 35 35 }
											texture = "gfx/interface/icons/icon_gold.dds"
										}

										text_single = {
											name = "loot"
											text = "[Army.GetRaidLoot|0]/[Army.GetLootCap|0]"
										}
									}

									hbox = {
										tooltip = "ARMY_ATTRITION_TT"

										icon = {
											texture = "gfx/interface/icons/map_icons/attrition_icon.dds"
											size = { 35 35 }
										}

										text_single = {
											name = "attrition"
											text = "[Army.GetArmyAttritionPercentage|%0-]"
										}
									}

									hbox = {
										name = "supplies"
										tooltip = "[Army.GetSupplyStateTooltip]"

										icon = {
											name = "supply_icon"
											size = { 40 40 }
											framesize = { 60 60 }
											frame = "[ArmyWindow.GetSupplyStateFrame]"
											texture = "gfx/interface/icons/icon_supplies.dds"
										}

										icon = {
											name = "supply_trend_icon"
											size = { 25 25 }
											visible = "[ArmyWindow.ShowSupplyTrend]"
											texture = "gfx/interface/icons/symbols/icon_supplies_trend.dds"
										}

										text_single = {
											name = "supply_text"
											text = "[ArmyWindow.GetCurrentSupply]/[ArmyWindow.GetFullSupplyCapacity]"
											minimumsize = { 60 0 }
											align = right
										}
									}
								}
							}

							hbox = {
							    layoutpolicy_horizontal = expanding

								text_single = {
									raw_text = "ArmyDistance"
								}

								text_single = {
									margin_left = 2
									raw_text = "[GuiScope.SetRoot(GetPlayer.GetCapitalLocation.MakeScope).AddScope('second', Army.GetLocation.MakeScope).Custom('province_direction')] from your capital."
								}

								fixedgridbox = {
									datamodel = "[ArmyWindow.GetSelectedUnitItems]"
									maxverticalslots = 1
									addrow = 22
									addcolumn = 200

									item = {
										button_text = {
											blockoverride "text" {
												raw_text = "Pan camera, Shift Q."
												align = left
											}
											# onclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
											onclick = "[SelectedUnitItem.OnRightClick]"
											shortcut = map_mode_9
										}
									}
								}

							    expand = { }
							}

							# location
							hbox = {
								layoutpolicy_horizontal = expanding

								#TODO
								text_single = {
									raw_text = "In your capital."
									visible = "[ObjectsEqual(Army.GetLocation.GetId, GetPlayer.GetCapitalLocation.GetId)]"
								}

								hbox = {
									visible = "[Not(ObjectsEqual(Army.GetLocation.GetId, GetPlayer.GetCapitalLocation.GetId))]"
									spacing = 3

									text_single = {
										visible = "[Army.GetLocation.GetCounty.GetTitle.IsValid]"
										raw_text = "In [Army.GetLocation.GetCounty.GetTitle.GetNameNoTierNoTooltip],"
									}

									text_single = {
										visible = "[Not(Army.IsEmbarked)]"
										raw_text = "[Army.GetLocation.GetTerrain.GetName] of"
									}

									text_single = {
										raw_text = "[Army.GetLocation.GetNameNoTooltip],"
									}

									text_single = {
										visible = "[Not(Army.IsEmbarked)]"
										raw_text = "[Army.GetLocation.GetCounty.GetTitle.GetHolder.GetTopLiege.GetPrimaryTitle.GetNameNoTierNoTooltip]."
									}
									# text_single = {
									# 	raw_text = "ArmyDistance"
									# }
									#
									# text_single = {
									# 	margin_left = 2
									# 	raw_text = "[GuiScope.SetRoot(GetPlayer.GetCapitalLocation.MakeScope).AddScope('second', Army.GetLocation.MakeScope).Custom('province_direction')] from your capital."
									# }
								}

								expand = { }
							}
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
					    blockoverride "text" {
					        raw_text = "Show details, E."
					    }
						visible = "[GetVariableSystem.Exists('mini_army')]"
						onclick = "[GetVariableSystem.Toggle('mini_army')]"
						shortcut = map_mode_1
					}
				}

				# tabs
				vbox = {
					margin_left = 10
					margin_bottom = 5
					background = { using = Background_Area_Border_Solid }
					layoutpolicy_horizontal = expanding
					visible = "[Not(GetVariableSystem.Exists('mini_army'))]"

					vbox = {
						visible = "[Not(GetVariableSystem.Exists('army_tabs'))]"
						layoutpolicy_horizontal = expanding
						margin = { 0 5 }
						spacing = 5

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "Overview."
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[GetPlayer.MakeScope.Var('closest_enemy').IsSet]"

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "Closest enemy,"
							}

							army_button_o = {
								datacontext = "[GetPlayer.MakeScope.Var('closest_enemy').Army]"
							}
							#
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "No enemies detected."
							visible = "[Not(GetPlayer.MakeScope.Var('closest_enemy').IsSet)]"
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[GetPlayer.MakeScope.Var('closest_hostile_county').IsSet]"
							# visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('hostile_forts'))]"

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "Closest hostile county,"
							}
							#
							hostile_fort_item = {
								datacontext = "[GetPlayer.MakeScope.Var('closest_hostile_county').Province]"
								# blockoverride "capital" {
								# 	text_single = {
								# 		raw_text = "Occupied by [Province.GetController.GetPrimaryTitle.GetNameNoTierNoTooltip],"
								# 		visible = "[Province.IsOccupied]"
								# 	}
								# }
							}
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "No hostile counties."
							# visible = "[IsDataModelEmpty(GetPlayer.MakeScope.GetList('hostile_forts'))]"
							visible = "[Not(GetPlayer.MakeScope.Var('closest_hostile_county').IsSet)]"
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[GetPlayer.MakeScope.Var('enemy_capital').IsSet]"

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[AddTextIf( GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_wars')), '(int32)1'), 'Closest ')]Enemy capital,"
							}

							hostile_fort_item = {
								datacontext = "[GetPlayer.MakeScope.Var('enemy_capital').Province]"
								blockoverride "capital" {
									text_single = {
										raw_text = "Occupied by [Province.GetController.GetPrimaryTitle.GetNameNoTierNoTooltip],"
										visible = "[Province.IsOccupied]"
									}
								}
							}
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "No enemy capital found."
							visible = "[Not(GetPlayer.MakeScope.Var('enemy_capital').IsSet)]"
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Army.IsRaidArmy]"

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "Closest raid target,"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "Richest county within 2 months,"
							}
						}

					}

					vbox = {
						layoutpolicy_horizontal = expanding

						button_text = {
							visible = "[GetVariableSystem.Exists('army_tabs')]"
							layoutpolicy_horizontal = expanding
							shortcut = close_window
							onclick = "[GetVariableSystem.Clear('army_tabs')]"

						    blockoverride "extra" {
								text_single = {
									raw_text = "Showing"
								}

								text_single = {
									raw_text = " [Select_CString(Army.IsRaidArmy, 'raid', 'siege')]"
									visible = "[GetVariableSystem.HasValue('army_tabs', 'targets')]"
								}

								text_single = {
									raw_text = " [GetVariableSystem.Get('army_tabs')]"
								}

								container = {
									visible = "[Or(GetVariableSystem.HasValue('army_tabs', 'targets'), GetVariableSystem.HasValue('army_tabs', 'armies'))]"

									text_single = {
										visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_wars')), '(int32)1')]"
										raw_text = " in war against [GetPlayer.MakeScope.Var('selected_war').War.GetPrimaryPlayerEnemy.GetPrimaryTitle.GetNameNoTierNoTooltip]"
									}
								}

								text_single = {
									raw_text = ". Close, escape."
								}
						    }
						}

						# tabs
						hbox = {
							visible = "[Not(GetVariableSystem.Exists('army_tabs'))]"
							layoutpolicy_horizontal = expanding
							# alpha = "[Select_int32(GetVariableSystem.Exists('army_tabs'), '(int32)0', '(int32)1')]"
							spacing = 3

							text_single = {
								raw_text = "Tabs:"
							}

							button_text = {
								blockoverride "text" {
									raw_text = "1, Army info."
								}
								onclick = "[GetVariableSystem.Set('army_tabs', 'info')]"
								shortcut = speed_1
							}

							button_text = {
								visible = "[GetPlayer.IsAtWar]"
								blockoverride "text" {
									raw_text = "2, [Select_CString(Army.IsRaidArmy, 'Raid', 'Siege')] targets."
								}
								onclick = "[GetVariableSystem.Set('army_tabs', 'targets')]"
								onclick = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
								shortcut = speed_2
							}

							button_text = {
								blockoverride "text" {
									raw_text = "3, other armies."
								}
								onclick = "[GetVariableSystem.Set('army_tabs', 'armies')]"
								shortcut = speed_3
							}

							button_text = {
								blockoverride "text" {
									raw_text = "4, adjacent counties."
								}
								onclick = "[GetVariableSystem.Set('army_tabs', 'adjacent counties')]"
								shortcut = speed_4
							}

							button_text = {
								blockoverride "text" {
									raw_text = "5, other holdings."
								}
								onclick = "[GetVariableSystem.Set('army_tabs', 'holdings')]"
								shortcut = speed_5
							}
							margin_bottom = 5

							expand = { }
						}

						# reload lists
						button_text = {
							# visible = "[GetVariableSystem.Exists('army_tabs')]"
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Reload, Shift E."
							}
							shortcut = map_mode_11
							onclick = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"
						}

						# current war
						vbox = {
						    layoutpolicy_horizontal = expanding
							visible = "[Or(GetVariableSystem.HasValue('army_tabs', 'targets'), GetVariableSystem.HasValue('army_tabs', 'armies'))]"


							button_text = {
								visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_wars')), '(int32)2')]"
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Select another war."
								}
								onclick = "[GetVariableSystem.Toggle('war_selector')]"
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[EqualTo_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_wars')), '(int32)2')]"

								datamodel = "[GetPlayer.MakeScope.GetList('your_wars')]"

								item = {
									button_text = {
										datacontext = "[Scope.War]"
										layoutpolicy_horizontal = expanding
										visible = "[GetScriptedGui('select_war_army_view').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('this_war', Scope.War.MakeScope).End )]"
										onclick = "[GetScriptedGui('select_war_army_view').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('this_war', Scope.War.MakeScope).End )]"
										onclick = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
										blockoverride "text" {
											raw_text = "Change to war against [War.GetPrimaryPlayerEnemy.GetPrimaryTitle.GetNameNoTierNoTooltip]."
										}
									}
								}
							}
						}
					}

					# hide details
					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Toggle('mini_army')]"
					    blockoverride "text" {
					        raw_text = "Hide all details, E."
					    }
						shortcut = map_mode_1
					}
				}

				# lists
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					background = { using = Background_Area_Border_Solid }
					visible = "[And(Not(GetVariableSystem.Exists('mini_army')), GetVariableSystem.Exists('army_tabs'))]"

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content" {

							vbox = {
								visible = "[GetVariableSystem.HasValue('army_tabs', 'info')]"
								layoutpolicy_horizontal = expanding

								vbox = {
									layoutpolicy_horizontal = expanding
									datacontext = "[Army.GetCommander]"

									### Info ###

									hbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										minimumsize = { 280 0 }

										vbox = {
											layoutpolicy_vertical = expanding

											hbox = {
												layoutpolicy_horizontal = expanding
												spacing = 3

												soldiers_and_quality_big = {
													datacontext = "[Army.GetComposition]"
												}
												text_single = {
													visible = "[Army.HasEventTroops]"
													raw_text = "Has special soldiers."
												}
												expand = { }
											}

											hbox = {
												layoutpolicy_horizontal = expanding

												dynamicgridbox = {
													name = "troops"
													datamodel = "[ArmyWindow.GetTroopItems]"
													datamodel_wrap = 4
													flipdirection = yes
													#TODO might need to make verticl

													item = {
														flowcontainer = {
															ignoreinvisible = yes
															tooltip = "ARMY_VIEW_TROOP_TT"
															margin_left = 5
															spacing = 3

															text_single = {
																name = "men_at_arms_icon"
																visible = "[TroopItem.IsMaa]"
																raw_text = "[TroopItem.GetRegiment.GetRegiment.GetMAAType.GetName],"
															}

															text_single = {
																raw_text = "Levies:"
																visible = "[TroopItem.IsLevies]"
															}

															text_single = {
																raw_text = "Knights:"
																visible = "[TroopItem.IsKnight]"
															}

															text_single = {
																layoutpolicy_horizontal = growing
																raw_text = "[TroopItem.GetCount|*],"
															}
														}
													}
												}

												expand = { }
											}
										}
										expand = { }
									}

									### Commmander ###
									hbox = {
										# layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding
										margin_left = 5

										button_text = {
											visible = "[Not( Character.IsValid )]"
											blockoverride "text" {
												raw_text = "Assign commander."
											}
											onclick = "[ArmyWindow.ShowCommanders]"
										}

										flowcontainer = {
											visible = "[Character.IsValid]"
											direction = vertical
											ignoreinvisible = yes

											# text_single = {
											# 	raw_text = "[Character.]"
											# }
											char_name = {
												blockoverride "pre" {
													text_single = {
														margin_right = 3
														raw_text = "Commander,"
													}
												}
											}
											text_single = {
												tooltip = "[Character.GetCommanderAdvantageDesc]"
												raw_text = "Advantage, [Character.GetCommanderAdvantage]."
											}

											flowcontainer = {
												ignoreinvisible = yes
												spacing = 2
												text_single = {
													visible = "[Not(IsDataModelEmpty(ArmyWindow.GetCommanderTraits))]"
													raw_text = "[GetDataModelSize(ArmyWindow.GetCommanderTraits)] traits:"
												}

												dynamicgridbox = {
													name = "commander_traits"
													datamodel = "[ArmyWindow.GetCommanderTraits]"
													flipdirection = yes
													datamodel_wrap = 5

													item = {
														container = {
															visible = "[Trait.IsValid]"

															text_single = {
																tooltip = "trait_tooltip"
																margin_left = 5
																raw_text = "[Trait.GetNameNoTooltip(Character.Self)],"
															}
														}
													}
												}
											}
											widget = {
												size = { 0 3 }
											}

											button_text = {
												blockoverride "text" {
													raw_text = "Change commander"
												}
												blockoverride "extra" {
													text_single = {
														raw_text = ", disabled. Tooltip"
														tooltip = "[ArmyWindow.GetShowCommandersTooltip]"
														visible = "[Not(ArmyWindow.CanShowCommanders)]"
													}
													dot = { }
												}
												enabled = "[ArmyWindow.CanShowCommanders]"
												onclick = "[ArmyWindow.ShowCommanders]"
											}
										}

										expand = { }
									}
								}

								vbox = {
									name = "hundred"
									margin = { 10 0 }
									layoutpolicy_horizontal = expanding

									state = {
										name = "army_change"
										alpha = 0.5
										duration = 0.2
										next = "b"
										using = Animation_Curve_Default
									}

									state = {
										name = "b"
										alpha = 1
										duration = 0.2
										using = Animation_Curve_Default
									}

									### Manage buttons

									vbox = {
										layoutpolicy_horizontal = expanding

										text_single = {
											name = "attached_to_name"
											visible = "[ArmyWindow.IsAttachedToAnyUnit]"
											datacontext = "[ArmyWindow.GetAttachedToArmy]"
											text = "ATTACHED_ARMY_NAME"
											align = left
											max_width = 250
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											spacing = 1

											button_text = {
												layoutpolicy_horizontal = expanding
											    blockoverride "text" {
											        raw_text = "Attach to army"
													align = left
											    }
												blockoverride "disabled" {
													visible = "[Not(ArmyWindow.CanAttachToAnyLocalUnit)]"
													align = left
												}
												blockoverride "dot" { }

												visible = "[And( Not( ArmyWindow.CanAttachToMultipleLocalUnits ), Not( ArmyWindow.IsAttachedToAnyUnit ) )]"
												enabled = "[ArmyWindow.CanAttachToAnyLocalUnit]"
												tooltip = "[ArmyWindow.BuildAttachToUnitTooltip]"
												tooltip_enabled = "[Not(ArmyWindow.CanAttachToAnyLocalUnit)]"
												onclick = "[ArmyWindow.AttachToLocalUnit]"
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												name = "attach_to_unit_window_button"
												visible = "[And( ArmyWindow.CanAttachToMultipleLocalUnits, Not( ArmyWindow.IsAttachedToAnyUnit ) )]"
												tooltip = "TOGGLE_ATTACH_TO_UNIT_WINDOW"
												onclick = "[ArmyWindow.ToggleAttachToWindow]"
											    blockoverride "text" {
											        raw_text = "Attach to other"
													align = left
											    }
												blockoverride "dot" { }
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												name = "detach_from_unit_button"
												visible = "[ArmyWindow.IsAttachedToAnyUnit]"
												enabled = "[ArmyWindow.CanDetachFromUnit]"
												tooltip = "[ArmyWindow.BuildDetachFromUnitTooltip]"
												onclick = "[ArmyWindow.DetachFromUnit]"
											    blockoverride "text" {
											        raw_text = "Detach unit"
													align = left
											    }
												blockoverride "extra" {
													text_single = {
														raw_text = ", disabled"
														visible = "[Not(ArmyWindow.CanDetachFromUnit)]"
													}
												}
												blockoverride "dot" { }
											}

											button_checked_text = {
												layoutpolicy_horizontal = expanding
												visible = "[Army.IsRaidArmy]"
												onclick = "[ArmyWindow.ToggleLooting]"
												tooltip = "TOGGLE_LOOTER_STANCE"

												blockoverride "visible"
												{
													visible = "[Not(Army.HasLooterStance)]"
												}

												blockoverride "text"
												{
													text = "AV_ALWAYS_RAID"
												}
											}
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											spacing = 1

											button_text = {
												layoutpolicy_horizontal = expanding
												# name = "unit_custom_split_button"
												enabled = "[ArmyWindow.CanSplitHalfSelected]"

												onclick = "[ArmyWindow.SplitHalfSelected]"
												shortcut = map_mode_5
												tooltip = "[ArmyWindow.BuildSplitHalfTooltip]"
												tooltip_enabled = "[Not(ArmyWindow.CanSplitHalfSelected)]"
												blockoverride "text" {
													raw_text = "Split in half"
													align = left
												}
												blockoverride "disabled" {
													visible = "[Not(ArmyWindow.CanSplitHalfSelected)]"
													align = left
												}
												blockoverride "extra" {
													text_single = {
														raw_text = ", Control Q"
														visible = "[ArmyWindow.CanSplitHalfSelected]"
													}
												}
												blockoverride "dot" { }
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												name = "unit_custom_split_button"
												enabled = "[ArmyWindow.CanSplitCustomSelected]"
												tooltip_enabled = "[Not(ArmyWindow.CanSplitCustomSelected)]"
												shortcut = map_mode_13

												tooltip = "[ArmyWindow.BuildSplitCustomTooltip]"
												onclick = "[ArmyWindow.ToggleSplitArmyWindow]"
												blockoverride "text" {
													raw_text = "Make new army"
													align = left
												}
												blockoverride "disabled" {
													visible = "[Not(ArmyWindow.CanSplitCustomSelected)]"
													align = left
												}
												blockoverride "extra" {
													text_single = {
														visible = "[ArmyWindow.CanSplitCustomSelected]"
														raw_text = ", Control W"
													}
												}
												# shortcut = army_create_new
												blockoverride "dot" { }
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												name = "split_off_button"
												onclick = "[ArmyWindow.SplitSelectedHiredAndEventTroops]"
												tooltip = "[ArmyWindow.BuildSplitHiredAndEventTroopsTooltip]"
												enabled = "[ArmyWindow.CanSplitSelectedHiredAndEventTroops]"
												using = tooltip_ne
												tooltip_enabled = "[Not(ArmyWindow.CanSplitSelectedHiredAndEventTroops)]"

												blockoverride "text" {
													raw_text = "Split off hired"
													align = left
												}
												blockoverride "disabled" {
													align = left
													visible = "[Not(ArmyWindow.CanSplitSelectedHiredAndEventTroops)]"
												}
												blockoverride "dot" { }
											}

											expand = { }
										}

										vbox = {
											layoutpolicy_horizontal = expanding

											button_text = {
												layoutpolicy_horizontal = expanding
												name = "split_for_siege_button"
												visible = "[Army.IsSieging]"

												onclick = "[ArmyWindow.SplitSelectedForSiege]"
												tooltip = "[ArmyWindow.BuildSplitForSiegeTooltip]"
												enabled = "[ArmyWindow.CanSplitSelectedForSiege]"
												using = tooltip_ne

												blockoverride "text" {
													raw_text = "Station besiegers"
													align = left
												}
												blockoverride "extra" {
													text_single = {
														raw_text = ", disabled"
														visible = "[Not(ArmyWindow.CanSplitSelectedForSiege)]"
													}
												}
												blockoverride "dot" { }
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												name = "toggle_raiding"
												enabled = "[ArmyWindow.CanToggleRaiding]"
												tooltip = "[ArmyWindow.BuildToggleRaidingTooltip]"
												# tooltip_enabled = "[Not(ArmyWindow.CanToggleRaiding)]"
												using = tooltip_ne
												visible = "[GetPlayer.CanRaid]"
												onclick = "[ArmyWindow.ToggleRaiding]"

												blockoverride "text" {
													raw_text = "Toggle raid"
												}
												blockoverride "extra" {
													text_single = {
														raw_text = ", disabled"
														visible = "[Not(ArmyWindow.CanToggleRaiding)]"
													}
												}
												blockoverride "dot" { }
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												name = "disband_button"
												using = tooltip_ne

												enabled = [ArmyWindow.CanDisband]
												tooltip = [ArmyWindow.BuildDisbandTooltip]
												onclick = [ArmyWindow.DisbandSelected]
												shortcut = army_disband

												blockoverride "text" {
													raw_text = "Disband"
													align = left
												}
												blockoverride "disabled" {
													visible = "[Not(ArmyWindow.CanDisband)]"
													align = left
												}
												blockoverride "extra" {
													text_single = {
														raw_text = ", hotkey J"
														visible = "[ArmyWindow.CanDisband]"
													}
												}
												blockoverride "dot" { }
											}

											expand = { }
										}
									}
								}
							}

							# enemies
							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[GetVariableSystem.HasValue('army_tabs', 'armies')]"

								# battles
								button_outliner_header = {
									layoutpolicy_horizontal = expanding
									visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('battles'))))]"


									blockoverride "button_expand_frame"
									{
										frame = "[BoolTo2And1(GetVariableSystem.Exists('battles'))]"
									}

									blockoverride "oh_button"
									{
										onclick = "[GetVariableSystem.Toggle('battles')]"
										oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
										clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
									}

									blockoverride "oh_toggle_frame"
									{
										frame = "[BoolTo2And1(GetVariableSystem.Exists('battles'))]"
									}

									blockoverride "oh_name"
									{
										raw_text = "unit[AddTextIf(GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('battles')), '(int32)1'), 's')] in battle[AddTextIf(GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('battles')), '(int32)1'), 's')]"

									}

									blockoverride "extra" {
										text_single = {
											raw_text = ", click to [Select_CString(GetVariableSystem.Exists('battles'), 'show', 'hide')]"
											# visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('battles')), '(int32)1')]"
										}
									}

									blockoverride "oh_count"
									{
										raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('battles'))]"
									}
									blockoverride "expanded"
									{
										frame = "[BoolTo2And1(GetVariableSystem.Exists('battles'))]"
									}
								}

								# battles
								vbox = {
									layoutpolicy_horizontal = expanding
									margin = { 8 0 }
									visible = "[And(And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('battles')))), Not(GetVariableSystem.Exists('battles')))]"

									vbox = {
										datamodel = "[GetPlayer.MakeScope.GetList('your_armies')]"
										layoutpolicy_horizontal = expanding
										spacing = -2

										item = {
											army_button_o = {
												visible = "[GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End )]"
												blockoverride "war_filter" {
												}
												blockoverride "click" {
													# onclick = "[UnitItem.SelectAndPanUnit]"
													# # onclick = "[UnitItem.PanToUnit]"
													# onrightclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
													# # onrightclick = "[UnitItem.PanToUnit]"
													# down = "[UnitItem.IsSelected]"
													# button_ignore = none
													onclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
												}
												blockoverride "hide_at_capital" {
													visible = "[Not(ObjectsEqual(ArmyWindow.GetArmy.GetLocation.GetId, Scope.Army.GetLocation.GetId))]"
												}
												blockoverride "selected" {
													text_single = {
														raw_text = "Selected."
														visible = "[ObjectsEqual(ArmyWindow.GetArmy.GetArmyId, Scope.Army.GetArmyId)]"
													}
												}
												blockoverride "distance" {
													datacontext = "[ArmyWindow.GetArmy.GetLocation]"
													text_single = {
														raw_text = "[GuiScope.SetRoot(Province.MakeScope).AddScope('saved_distance', MakeScopeValue(GuiScope.SetRoot(Province.MakeScope).AddScope('second', Army.GetLocation.MakeScope).ScriptValue('province_distance'))).Custom('ProvinceDistance')]"
													}

													text_single = {
														raw_text = " [GuiScope.SetRoot( Province.MakeScope).AddScope('second', Army.GetLocation.MakeScope).Custom('province_direction')],"
													}
												}
											}
										}
									}

									vbox = {
										datamodel = "[GetPlayer.MakeScope.GetList('allied_units')]"
										layoutpolicy_horizontal = expanding
										spacing = -2

										item = {
											army_button_o = {
												blockoverride "war_filter" {
												}
												visible = "[GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End )]"
												blockoverride "fighting" {
												}
											}
										}
									}
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_armies')), '(int32)1')]"
									# your own
									button_outliner_header = {
										visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('your_armies'))))]"
										layoutpolicy_horizontal = expanding

										blockoverride "button_expand_frame"
										{
											frame = "[BoolTo2And1(GetVariableSystem.Exists('your_armies'))]"
										}

										blockoverride "oh_button"
										{
											onclick = "[GetVariableSystem.Toggle('your_armies')]"
											oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
											clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
										}

										blockoverride "oh_toggle_frame"
										{
											frame = "[BoolTo2And1(GetVariableSystem.Exists('your_armies'))]"
										}

										blockoverride "oh_name"
										{
											raw_text = ""
										}

										blockoverride "extra" {
											# text_single = {
											# 	raw_text = ", [GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('your_armies')] total"
											# 	visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_armies')), '(int32)1')]"
											# }
											text_single = {
												raw_text = "Your"
											}

											space = { }

											text_single = {
												visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_armies')), '(int32)1')]"
												raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('your_armies'))]"
											}
											text_single = {
												raw_text = "army"
												visible = "[EqualTo_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_armies')), '(int32)1')]"
											}
											text_single = {
												raw_text = " armies"
												visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_armies')), '(int32)1')]"
											}
											text_single = {
												raw_text = ", click to [Select_CString(GetVariableSystem.Exists('your_armies'), 'show', 'hide')]"
												# visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_inside')), '(int32)1')]"
											}
										}

										blockoverride "oh_count"
										{
											# raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('your_armies'))]"
										}
										blockoverride "expanded"
										{
											frame = "[BoolTo2And1(GetVariableSystem.Exists('your_armies'))]"
										}
									}

									# your armies
									vbox = {
										datamodel = "[GetPlayer.MakeScope.GetList('your_armies')]"
										visible = "[And(Not(GetVariableSystem.Exists('your_armies')), GetPlayer.IsValid)]"
										layoutpolicy_horizontal = expanding
										margin = { 8 0 }
										spacing = -2

										item = {
											army_button_o = {
												visible = "[Not(GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End ))]"
												blockoverride "war_filter" {
												}
												blockoverride "click" {
													# onclick = "[UnitItem.SelectAndPanUnit]"
													# # onclick = "[UnitItem.PanToUnit]"
													# onrightclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
													# # onrightclick = "[UnitItem.PanToUnit]"
													# down = "[UnitItem.IsSelected]"
													# button_ignore = none
													onclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
												}
												#TODO copy to other places
												blockoverride "same_province" {
													text_single = {
														raw_text = " Same location."
														visible = "[ObjectsEqual(ArmyWindow.GetArmy.GetLocation.GetId, Scope.Army.GetLocation.GetId)]"
													}
												}
												blockoverride "hide_at_capital" {
													visible = "[Not(ObjectsEqual(ArmyWindow.GetArmy.GetLocation.GetId, Scope.Army.GetLocation.GetId))]"
												}
												blockoverride "selected" {
													text_single = {
														raw_text = "Selected."
														visible = "[ObjectsEqual(ArmyWindow.GetArmy.GetArmyId, Scope.Army.GetArmyId)]"
													}
												}
												blockoverride "distance" {
													datacontext = "[ArmyWindow.GetArmy.GetLocation]"
													text_single = {
														raw_text = "[GuiScope.SetRoot(Province.MakeScope).AddScope('saved_distance', MakeScopeValue(GuiScope.SetRoot(Province.MakeScope).AddScope('second', Army.GetLocation.MakeScope).ScriptValue('province_distance'))).Custom('ProvinceDistance')]"
													}

													text_single = {
														raw_text = " [GuiScope.SetRoot( Province.MakeScope).AddScope('second', Army.GetLocation.MakeScope).Custom('province_direction')],"
													}
												}
											}
										}
									}
								}

								outliner_armies = {
									blockoverride "hide_at_capital" {
										visible = "[Not(ObjectsEqual(ArmyWindow.GetArmy.GetLocation.GetId, Scope.Army.GetLocation.GetId))]"
									}
									blockoverride "distance" {
										datacontext = "[ArmyWindow.GetArmy.GetLocation]"
										text_single = {
											raw_text = "[GuiScope.SetRoot(Province.MakeScope).AddScope('saved_distance', MakeScopeValue(GuiScope.SetRoot(Province.MakeScope).AddScope('second', Army.GetLocation.MakeScope).ScriptValue('province_distance'))).Custom('ProvinceDistance')]"
										}

										text_single = {
											raw_text = " [GuiScope.SetRoot( Province.MakeScope).AddScope('second', Army.GetLocation.MakeScope).Custom('province_direction')],"
										}
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[GetVariableSystem.HasValue('army_tabs', 'targets')]"

								vbox = {
									visible = "[Not(Army.IsRaidArmy)]"
									layoutpolicy_horizontal = expanding
									alwaystransparent = no
									background = { using = Background_Area_Border_Solid margin = { 20 20 } }

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "Enemy capital."
									}

									hostile_fort_item = {
										datacontext = "[GetPlayer.MakeScope.Var('enemy_capital').Province]"
										blockoverride "capital" {
											text_single = {
												raw_text = "Occupied by [Province.GetController.GetPrimaryTitle.GetNameNoTierNoTooltip],"
												visible = "[Province.IsOccupied]"
											}
										}
									}

									# text_single = {
									# 	layoutpolicy_horizontal = expanding
									# 	raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('path_to_capital'))] county away."
									# }
									#
									# vbox = {
									# 	layoutpolicy_horizontal = expanding
									# 	datamodel = "[GetPlayer.MakeScope.GetList('path_to_capital')]"
									#
									# 	item = {
									# 		hostile_fort_item = { }
									# 	}
									# }

									button_text = {
										visible = no
										blockoverride "text" {
											raw_text = "View adjacent counties."
										}
									}

									text_single = {
										visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('closest_counties'))]"
										layoutpolicy_horizontal = expanding
										raw_text = "Your closest county to it:"
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										datamodel = "[GetPlayer.MakeScope.GetList('closest_counties')]"

										item = {
											friendly_county_item = {
												datacontext = "[Scope.GetProvince]"
												layoutpolicy_horizontal = expanding

												blockoverride "extra2" {
													text_single = {
														raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope.Var('enemy_capital').Province.MakeScope).AddScope('second', Province.MakeScope).ScriptValue('square_root_of_distance_2')|0] days"
													}
													text_single = {
														raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope.Var('enemy_capital').Province.MakeScope).AddScope('second', Province.MakeScope).Custom('province_direction')|0] from [GetPlayer.MakeScope.Var('enemy_capital').Province.GetCoATitle.GetNameNoTierNoTooltip]."
													}
												}
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('hostile_war_targets'))]"

										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												align = left
												raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('hostile_war_targets'))] war goals. Click to [Select_CString(GetVariableSystem.Exists('war_targets'), 'Show', 'Hide')]."
											}
											onclick = "[GetVariableSystem.Toggle('war_targets')]"
										}

										vbox = {
											visible = "[Not(GetVariableSystem.Exists('war_targets'))]"
											layoutpolicy_horizontal = expanding
											datamodel = "[GetPlayer.MakeScope.GetList('hostile_war_targets')]"

											item = {
												hostile_fort_item = { }
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('captured_war_targets'))]"

										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												align = left
												raw_text = "You control [GetDataModelSize(GetPlayer.MakeScope.GetList('captured_war_targets'))] war targets. Click to [Select_CString(GetVariableSystem.Exists('captured_war_targets'), 'Hide', 'Show')]."
											}
											onclick = "[GetVariableSystem.Toggle('captured_war_targets')]"
										}

										vbox = {
											visible = "[GetVariableSystem.Exists('captured_war_targets')]"
											layoutpolicy_horizontal = expanding
											datamodel = "[GetPlayer.MakeScope.GetList('captured_war_targets')]"

											item = {
												hostile_fort_item = {
													blockoverride "border" { }
												}
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('adjacent_hostile_forts'))]"

										text_single = {
											layoutpolicy_horizontal = expanding
											raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('adjacent_hostile_forts'))] counties which can be safely entered."
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											datamodel = "[GetPlayer.MakeScope.GetList('adjacent_hostile_forts')]"

											item = {
												hostile_fort_item = {
													blockoverride "border" {

													}
												}
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('adjacent_across_water_hostile_forts')))]"

										text_single = {
											raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('adjacent_across_water_hostile_forts'))] adjacent across water."

											layoutpolicy_horizontal = expanding
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											datamodel = "[GetPlayer.MakeScope.GetList('adjacent_across_water_hostile_forts')]"

											item = {
												hostile_fort_item = { }
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('your_hostile_forts')))]"
										text_single = {
											background = { using = Background_Area_Dark }
											raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('your_hostile_forts'))] of your own forts captured by enemies."

											layoutpolicy_horizontal = expanding
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											datamodel = "[GetPlayer.MakeScope.GetList('your_hostile_forts')]"

											item = {
												hostile_fort_item = {
													blockoverride "controller" { }
												}
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('personal_forts')))]"

										text_single = {
											background = { using = Background_Area_Dark }
											raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('personal_forts'))] personal enemy forts."

											layoutpolicy_horizontal = expanding
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											datamodel = "[GetPlayer.MakeScope.GetList('personal_forts')]"

											item = {
												hostile_fort_item = { }
											}
										}
									}

									widget = {
										size = { 0 5 }
									}

									vbox = {
										visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('hostile_forts')))]"
										layoutpolicy_horizontal = expanding

										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('hostile_forts'))] Other hostile forts. Click to [Select_CString(GetVariableSystem.Exists('other_hostile_forts'), 'Hide', 'Show')]."
											}
											onclick = "[GetVariableSystem.Toggle('other_hostile_forts')]"
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											visible = "[GetVariableSystem.Exists('other_hostile_forts')]"
											datamodel = "[GetPlayer.MakeScope.GetList('hostile_forts')]"

											item = {
												hostile_fort_item = {
													blockoverride "controller" { }
												}
											}
										}
									}
								}

								vbox = {
									visible = "[Army.IsRaidArmy]"
									layoutpolicy_horizontal = expanding

									button_text = {
										layoutpolicy_horizontal = expanding
										blockoverride "text" {
											raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('raid_targets'))] raid targets, reload with Control E."
										}
										onclick = "[GetScriptedGui('raid_targets').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
										shortcut = map_mode_12
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										datamodel = "[GetPlayer.MakeScope.GetList('raid_targets')]"

										item = {
											raid_target_item = {
												visible = "[GreaterThan_int32(Army.GetSoldierCount, Scope.GetProvince.GetHolding.GetCurrentGarrisonSize)]"
											}
										}
									}

									button_text = {
										layoutpolicy_horizontal = expanding
										blockoverride "text" {
											raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('strong_raid_targets'))] targets whose owners are stronger than you, be careful."
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										datamodel = "[GetPlayer.MakeScope.GetList('strong_raid_targets')]"

										item = {
											raid_target_item = {
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										margin_top = 5

										datamodel = "[GetPlayer.MakeScope.GetList('raid_targets')]"

										item = {
											raid_target_item = {
												visible = "[Not(GreaterThan_int32(Army.GetSoldierCount, Scope.GetProvince.GetHolding.GetCurrentGarrisonSize))]"
												blockoverride "garrison" {
													visible = "[Not(Army.IsGathering)]"
												}
											}
										}
									}

									button_text = {
										layoutpolicy_horizontal = expanding
										visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('looted_raid_targets'))]"
										blockoverride "text" {
											raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('looted_raid_targets'))] looted raid targets. Click to [Select_CString(GetVariableSystem.Exists('looted_raid_targets'), 'Hide', 'Show')]"
										}
										onclick = "[GetVariableSystem.Toggle('looted_raid_targets')]"
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										visible = "[GetVariableSystem.Exists('looted_raid_targets')]"

										datamodel = "[GetPlayer.MakeScope.GetList('looted_raid_targets')]"

										item = {
											raid_target_item = {
												visible = "[Not(GreaterThan_int32(Army.GetSoldierCount, Scope.GetProvince.GetHolding.GetCurrentGarrisonSize))]"
												blockoverride "garrison" {
													visible = "[Not(Army.IsGathering)]"
												}
											}
										}
									}
								}
							}
						}
					}
				}

				expand = { }

			}


			expand = { }
		}

		# war selector
		vbox = {
			layoutpolicy_horizontal = expanding
			margin_left = 10

			visible = "[GetVariableSystem.Exists('war_selector')]"

			vbox = {
				background = { using = Background_Area_Border_Solid margin = { 10 10 } }
				layoutpolicy_horizontal = expanding
				datamodel = "[GetPlayer.MakeScope.GetList('your_wars')]"

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Select a war:"
				}

				item = {
					button_text = {
						datacontext = "[Scope.War]"
						layoutpolicy_horizontal = expanding
						# visible = "[GetScriptedGui('select_war_army_view').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('this_war', Scope.War.MakeScope).End )]"
						onclick = "[GetScriptedGui('select_war_army_view').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('this_war', Scope.War.MakeScope).End )]"
						onclick = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
						onclick = "[GetVariableSystem.Clear('war_selector')]"
						blockoverride "pre" {
							text_single = {
								margin_right = 4
								visible = "[GetScriptedGui('is_civil_war').IsShown( GuiScope.SetRoot( War.MakeScope ).End )]"
								raw_text = "Civil"
							}
						}
						blockoverride "text" {
							raw_text = "War against [War.GetPrimaryPlayerEnemy.GetPrimaryTitle.GetNameNoTierNoTooltip]."
						}
					}
				}

				button = {
					shortcut = close_window
					onclick = "[GetVariableSystem.Clear('war_selector')]"
				}
			}

			expand = { }
		}

		expand = { }
	}

	army_old = {
		visible = "[GetVariableSystem.Exists('ocr')]"
	}
}

types FortTypes {

	type raid_target_item = button_text {
		layoutpolicy_horizontal = expanding
		datacontext = "[Scope.GetProvince.GetTitle]"
		using = title_pan

		blockoverride "text" {
		}

		blockoverride "extra" {
			flowcontainer = {
				ignoreinvisible = yes

				text_single = {
					raw_text = "Can't siege"
					block "garrison" {
						visible = no
					}
				}

				text_single = {
					raw_text = "[Scope.GetProvince.GetCounty.GetName],"
				}

				spacing = 3


				text_single = {
					raw_text = "[Scope.GetProvince.GetRaidLoot|0] loot,"
				}

				text_single = {
					raw_text = "[GuiScope.SetRoot(Army.GetLocation.MakeScope).AddScope('second', Scope.GetProvince.MakeScope).ScriptValue('province_distance')|0]"
				}

				text_single = {
					raw_text = "[GuiScope.SetRoot(Army.GetLocation.MakeScope).AddScope('second', Scope.GetProvince.MakeScope).Custom('province_direction')]."
				}

				text_single = {
					raw_text = "need more than"
					block "garrison" {
						visible = no
					}
				}

				text_single = {
					raw_text = "[Scope.GetProvince.GetHolding.GetCurrentGarrisonSize] garrison."
				}

				text_single = {
					visible = "[Scope.GetProvince.IsRecentlyLooted]"
					raw_text = "Unavailable until [Scope.GetProvince.GetEndOfRecentlyLooted.GetString],"
				}

				flowcontainer = {
					spacing = 3

					visible = "[Title.GetHolder.IsIndependentRuler]"

					text_single = {
						raw_text = "Owner has [Title.GetHolder.GetMilitaryStrengthText] soldiers,"
					}


					button_text = {
						datacontext = "[Title.GetHolder]"
						using = char_click
					    blockoverride "text" {
							margin_top = -1
							align = left
					        raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip], [Character.GetShortUINameNoTooltip]"
					    }
					}
				}

				flowcontainer = {
					spacing = 3
					visible = "[Not(Title.GetHolder.IsIndependentRuler)]"

					text_single = {
						raw_text = "Liege has [Title.GetHolder.GetTopLiege.GetMilitaryStrengthText] soldiers,"
					}

					button_text = {
						datacontext = "[Title.GetHolder.GetTopLiege]"
						using = char_click
					    blockoverride "text" {
							align = left
							margin_top = -1
					        raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip], [Character.GetShortUINameNoTooltip]"
					    }
					}
				}
				dot = {
					margin_left = -3
				}
			}
		}
	}

	type hostile_fort_item = button {
		size = { 0 22 }
		layoutpolicy_horizontal = expanding
		datacontext = "[Scope.GetProvince]"

		button_ignore = none
		# onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Scope.GetProvince.GetId))]"
		onclick = "[DefaultOnCoatOfArmsRightClick(Province.GetCoATitle.GetID)]"
		onrightclick = "[DefaultOnCoatOfArmsRightClick(Province.GetCoATitle.GetID)]"
		onclick = "[GetVariableSystem.Set('sending_army', Province.GetNameNoTooltip)]"
		onclick = "[PdxGuiTriggerAllAnimations('hide_army_window')]"

		hbox = {
			# background = { using = Background_Area_Light }
			layoutpolicy_horizontal = expanding
			spacing = 3

			# button_text = {
			#     blockoverride "text" {
			#         raw_text = "Teleport"
			#     }
			# 	onclick = "[GetScriptedGui('teleport_army').Execute( GuiScope.SetRoot( Army.MakeScope ).AddScope('target', Province.MakeScope).End )]"
			# }

			block "controller" {
				# text_single = {
				# 	raw_text = "You control"
				# 	visible = "[GetScriptedGui('you_control').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End )]"
				# }
				#
				# text_single = {
				# 	raw_text = "Enemy controls"
				# 	visible = "[Not(GetScriptedGui('you_control').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End )]"
				# }
				#
				# text_single = {
				# 	raw_text = ""
				# }
			}

			block "capital" {

			}

			# text_single = {
			# 	raw_text = "War target "
			# 	visible = "[GetScriptedGui('is_war_target').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End )]"
			# }

			text_single = {
				raw_text = "FortDistance"
			}

			text_single = {
				margin_left = 2
				raw_text = "[GuiScope.SetRoot(Army.GetLocation.MakeScope).AddScope('second', Province.MakeScope).Custom('province_direction')]."
			}

			text_single = {
				raw_text = "[Province.GetCounty.GetTitle.GetNameNoTierNoTooltip], "
			}

			text_single = {
				raw_text = "[Province.GetNameNoTooltip]."
			}

			block "border" {
				text_single = {
					raw_text = "on border,"
					visible = "[GetScriptedGui('adjacent_to_ally').IsShown( GuiScope.SetRoot( Province.MakeScope ).AddScope('me', GetPlayer.MakeScope).End )]"
				}
			}



			text_single = {
				visible = "[Province.MakeScope.Var('enemy_here').IsSet]"
				raw_text = "Enemies [Province.MakeScope.Var('enemy_here').Army.GetSoldierCount]."
			}

			text_single = {
				visible = no# "[InDebugMode]"
				raw_text = "X [Province.MakeScope.Var('pos_x').GetValue|0], Y [Province.MakeScope.Var('pos_y').GetValue|0]. "
			}

			# text_single = {
			# 	raw_text = "Capital,"
			# 	visible = "[Province.IsRealmCapital]"
			# }

			text_single = {
				raw_text = "Coastal,"
				visible = "[GetScriptedGui('is_coastal_county').IsShown( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End )]"
			}

			text_single = {
				raw_text = "Riverside,"
				visible = "[GetScriptedGui('is_riverside_county').IsShown( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End )]"
			}

			container = {
				visible = "[Not(GetScriptedGui('is_war_target').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End ))]"
				ignoreinvisible = yes
				text_single = {
					raw_text = "Adjacent to a war goal,"
					visible = "[GetScriptedGui('adjacent_to_war_target').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End )]"
				}
			}


			text_single = {
				raw_text = "Fort level [Province.GetFortLevel],"
			}

			hbox = {
				visible = "[Not(Army.IsGathering)]"
				text_single = {
					raw_text = "Too large,"
					visible = "[GreaterThan_int32( Province.GetHolding.GetCurrentGarrisonSize, Army.GetComposition.GetCurrentNumberOfSoldiers)]"
				}
			}

			text_single = {
				visible = "[GreaterThan_int32( Province.GetHolding.GetCurrentGarrisonSize, Army.GetComposition.GetCurrentNumberOfSoldiers)]"
				raw_text = "garrison [Province.GetHolding.GetCurrentGarrisonSize],"
			}

			text_single = {
				visible = "[Province.HasSiege]"
				raw_text = "Sieged, [Province.GetSiege.GetProgress|0]%."
			}

			button_text = {
			    blockoverride "text" {
			        raw_text = "View county."
					align = left
					margin_left = -3
			    }
				blockoverride "bg" {

				}
				onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Province.GetId))]"
			}

			expand = { }
		}
	}

	type friendly_county_item = button_text {
		onclick = "[DefaultOnCoatOfArmsRightClick(Province.GetCoATitle.GetID)]"
		onrightclick = "[DefaultOnCoatOfArmsRightClick(Province.GetCoATitle.GetID)]"
		onclick = "[GetVariableSystem.Set('sending_army', Province.GetNameNoTooltip)]"
		onclick = "[PdxGuiTriggerAllAnimations('hide_army_window')]"
		datacontext = "[Scope.GetProvince]"

	    blockoverride "text" {
	        raw_text = "[Province.GetCounty.GetTitle.GetNameNoTierNoTooltip],"
	    }
		blockoverride "extra" {
			spacing = 3
			text_single = {
				raw_text = "FortDistance"
			}
			text_single = {
				raw_text = "[GuiScope.SetRoot(Army.GetLocation.MakeScope).AddScope('second', Province.MakeScope).Custom('province_direction')]."
			}
			text_single = {
				raw_text = "[Province.GetSupplyLimitFor( GetPlayer )] supply."
			}
			block "extra2" { }
		}
	}
}

window = {
	name = "army_reorganization_window"
	size = { 100% 100% }
	layer = top

	attachto = {
		widgetid = "army_window"
		stackmode = top
		inherit_data_context = yes
	}

	state = {
		name = _show
		on_start = "[GetVariableSystem.Clear('moving_to_old')]"
	}

	using = Window_Background_No_Edge
	background = { using = Background_Area_Border_Solid }

	# using = Animation_ShowHide_Quick

	vbox = {
		margin = { 5 5 }
		margin_bottom = 10
		# button_text = {
		# 	layoutpolicy_horizontal = expanding
		# 	blockoverride "text" {
		# 		raw_text = "Errors: [NumberOrErrors]"
		# 	}
		# 	onclick = "[ClearErrorLog]"
		# 	#TODO
		# }

		spacing = 5

		# header_pattern = {
		# 	layoutpolicy_horizontal = expanding
		#
		# 	blockoverride "header_text"
		# 	{
		# 		raw_text = "[Localize('ARMY_REORGANIZATION')]."
		# 	}
		#
		# 	blockoverride "button_close"
		# 	{
		# 		onclick = "[ArmyReorgWindow.Hide]"
		#
		# 	}
		# }

		hbox = {
		    layoutpolicy_horizontal = expanding

			text_single = {
				raw_text = "[Localize('ARMY_REORGANIZATION')]."
				visible = "[Not(Or(GetVariableSystem.Exists('move_to_new'), GetVariableSystem.Exists('move_to_old')))]"
			}

			button_text = {
				datacontext = "[ArmyReorgWindow.GetRightArmyComposition]"
			    blockoverride "text" {
					raw_text = "Moving [GetVariableSystem.Get('move_to_new')] to [ArmyComposition.GetName]. Close with Escape."
			    }
				visible = "[GetVariableSystem.Exists('move_to_new')]"
				onclick = "[GetVariableSystem.Clear('move_to_new')]"
				shortcut = close_window
			}

			button_text = {
				datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
			    blockoverride "text" {
					raw_text = "Moving [GetVariableSystem.Get('move_to_old')] to [ArmyComposition.GetName]. Close with Escape."
			    }
				visible = "[GetVariableSystem.Exists('move_to_old')]"
				onclick = "[GetVariableSystem.Clear('move_to_old')]"
				shortcut = close_window
			}

		    expand = { }
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(Or(GetVariableSystem.Exists('move_to_new'), GetVariableSystem.Exists('move_to_old')))]"
			spacing = 5
			margin_left = 10

			# armies
			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = 5

				widget = {
					size = { 0 70 }
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding
						name = "right"
						datacontext = "[ArmyReorgWindow.GetRightArmyComposition]"
						visible = "[DataModelHasItems( ArmyReorgWindow.GetRightItems )]"

						hbox = {
						    layoutpolicy_horizontal = expanding

							text_single = {
								margin_top = 1
								name = "army_name"
								raw_text = "[ArmyComposition.GetName]."
							}

							button_text = {
								visible = "[DataModelHasItems( ArmyReorgWindow.GetRightItems )]"
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Select and close, Enter."
									align = left
								}
								shortcut = confirm
								onclick = "[ArmyReorgWindow.SelectRight]"
							}

						    expand = { }
						}


						hbox = {
							layoutpolicy_horizontal = expanding

							soldiers_and_quality_small_text = {
							}

							text_single = {
								name = "army_maintenance"
								text = "ARMY_REORG_RIGHT_MAINTENANCE"
							}

							dot = { }

							expand = { }
						}

						vbox = {
							name = "right_buttons"
							layoutpolicy_horizontal = expanding
							visible = "[DataModelHasItems( ArmyReorgWindow.GetRightItems )]"

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Disband this army."
									align = left
								}
								blockoverride "disabled" {
									visible = "[Not(ArmyReorgWindow.CanDisband)]"
								}
								enabled = "[ArmyReorgWindow.CanDisband]"
								onclick = "[ArmyReorgWindow.DisbandRight]"
							}
						}

						expand = { }
					}
				}

				widget = {
					size = { 0 70 }
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding
						name = "left"
						datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
						visible = "[DataModelHasItems( ArmyReorgWindow.GetLeftItems )]"

						hbox = {
						    layoutpolicy_horizontal = expanding
							visible = "[DataModelHasItems( ArmyReorgWindow.GetLeftItems )]"

							text_single = {
								margin_top = 1
								name = "army_name"
								raw_text = "[ArmyComposition.GetName]."
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Select and close, Escape."
									align = left
								}
								shortcut = close_window
								onclick = "[ArmyReorgWindow.SelectLeft]"
							}

						    expand = { }
						}


						hbox = {
							layoutpolicy_horizontal = expanding


							soldiers_and_quality_small_text = {
							}

							text_single = {
								name = "army_maintenance"
								text = "ARMY_REORG_LEFT_MAINTENANCE"
							}

							dot = { }

							expand = { }
						}

						vbox = {
							name = "left_buttons"
							layoutpolicy_horizontal = expanding
							visible = "[DataModelHasItems( ArmyReorgWindow.GetLeftItems )]"

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Disband this army."
									align = left
								}
								blockoverride "disabled" {
									visible = "[Not(ArmyReorgWindow.CanDisband)]"
								}
								enabled = "[ArmyReorgWindow.CanDisband]"
								onclick = "[ArmyReorgWindow.DisbandLeft]"
							}
						}

						expand = { }
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Not(GetVariableSystem.Exists('ungrouped_units'))]"

				#types to new
				vbox = {
					visible = "[GetVariableSystem.Exists('moving_to_old')]"
					layoutpolicy_horizontal = expanding
					datacontext = "[ArmyReorgWindow.GetLeftArmy]"
					datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
					datamodel = "[CalculateBreakdownItems(Army.Self)]"

					text_single = {
						datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
						raw_text = "Select units to move to [ArmyComposition.GetName]:"
						layoutpolicy_horizontal = expanding
					}

					item = {
						hbox = {
							layoutpolicy_horizontal = expanding

							button_text = {
								visible = "[TroopItem.IsMaa]"
							    blockoverride "text" {
									raw_text = "[TroopItem.GetRegiment.GetRegiment.GetMAAType.GetNameNoTooltip]."
							    }
								onclick = "[GetVariableSystem.Set('move_to_old', TroopItem.GetRegiment.GetRegiment.GetMAAType.GetNameNoTooltip)]"
							}

							button_text = {
								visible = "[TroopItem.IsLevies]"
							    blockoverride "text" {
									raw_text = "Levies."
							    }
								onclick = "[GetVariableSystem.Set('move_to_old', 'levies')]"
							}

							button_text = {
								visible = "[TroopItem.IsKnight]"
							    blockoverride "text" {
									raw_text = "Knights."
							    }
								onclick = "[GetVariableSystem.Set('move_to_old', 'knights')]"
							}

							expand = { }
						}
					}
				}

				# types to old
				vbox = {
					visible = "[Not(GetVariableSystem.Exists('moving_to_old'))]"
					layoutpolicy_horizontal = expanding
					datacontext = "[ArmyReorgWindow.GetLeftArmy]"
					datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
					datamodel = "[CalculateBreakdownItems(Army.Self)]"

					text_single = {
						datacontext = "[ArmyReorgWindow.GetRightArmyComposition]"
						raw_text = "Select units to move to [ArmyComposition.GetName]:"
						layoutpolicy_horizontal = expanding
					}

					item = {
						hbox = {
							layoutpolicy_horizontal = expanding

							button_text = {
								visible = "[TroopItem.IsMaa]"
							    blockoverride "text" {
									raw_text = "[TroopItem.GetRegiment.GetRegiment.GetMAAType.GetNameNoTooltip]."
							    }
								onclick = "[GetVariableSystem.Set('move_to_new', TroopItem.GetRegiment.GetRegiment.GetMAAType.GetNameNoTooltip)]"
							}

							button_text = {
								visible = "[TroopItem.IsLevies]"
							    blockoverride "text" {
									raw_text = "Levies."
							    }
								onclick = "[GetVariableSystem.Set('move_to_new', 'levies')]"
							}

							button_text = {
								visible = "[TroopItem.IsKnight]"
							    blockoverride "text" {
									raw_text = "Knights."
							    }
								onclick = "[GetVariableSystem.Set('move_to_new', 'knights')]"
							}

							expand = { }
						}
					}
				}
			}

			# switch
			hbox = {
			    layoutpolicy_horizontal = expanding
				visible = "[GetVariableSystem.Exists('moving_to_old')]"
				datacontext = "[ArmyReorgWindow.GetRightArmyComposition]"

				button_text = {
					# visible = "[IsDataModelEmpty( ArmyReorgWindow.GetRightItems )]"
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Move units to [ArmyComposition.GetName], hotkey Tab."
					}
					onclick = "[GetVariableSystem.Clear('moving_to_old')]"
					shortcut = action_list
				}

			    expand = { }
			}

			# switch
			hbox = {
			    layoutpolicy_horizontal = expanding
				visible = "[Not(GetVariableSystem.Exists('moving_to_old'))]"

				button_text = {
					visible = "[DataModelHasItems( ArmyReorgWindow.GetRightItems )]"
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
						raw_text = "Move units to [ArmyComposition.GetName], hotkey Tab."
						# raw_text = "Move units to , hotkey Tab."
					}
					onclick = "[GetVariableSystem.Set('moving_to_old', 'yes')]"
					shortcut = action_list
				}

			    expand = { }
			}

			button_text = {
				layoutpolicy_horizontal = expanding
			    blockoverride "text" {
			        raw_text = "Show groupped units, hotkey G."
			    }
				visible = "[GetVariableSystem.Exists('ungrouped_units')]"
				onclick = "[GetVariableSystem.Toggle('ungrouped_units')]"
				shortcut = army_merge
			}

			button_text = {
				layoutpolicy_horizontal = expanding
			    blockoverride "text" {
			        raw_text = "Show all units ungrouped, hotkey G."
			    }
				visible = "[Not(GetVariableSystem.Exists('ungrouped_units'))]"
				onclick = "[GetVariableSystem.Toggle('ungrouped_units')]"
				shortcut = army_merge
			}
		}

		# subunits
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 20

			visible = "[Not(GetVariableSystem.Exists('ungrouped_units'))]"

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[GetVariableSystem.Exists('move_to_new')]"
				blockoverride "scrollbox_margins" {
					margin_top = 20
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						datamodel = "[ArmyReorgWindow.GetLeftItems]"
						layoutpolicy_horizontal = expanding

						item = {
							container = {
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes

								move_regiment = {
									visible = "[And(GetVariableSystem.HasValue('move_to_new', 'levies'), Not(Or(RegimentReorgEntry.IsMaA, Character.IsValid)))]"
								}
								move_regiment = {
									visible = "[And(GetVariableSystem.HasValue('move_to_new', 'knights'),  Character.IsValid)]"
								}

								move_regiment = {
									visible = "[EqualTo_string(GetVariableSystem.Get('move_to_new'), RegimentReorgEntry.GetMaAType.GetNameNoTooltip)]"
								}
							}
						}
					}
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[GetVariableSystem.Exists('move_to_old')]"
				blockoverride "scrollbox_margins" {
					margin_top = 20
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						datamodel = "[ArmyReorgWindow.GetRightItems]"
						layoutpolicy_horizontal = expanding

						item = {
							container = {
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes

								move_regiment = {
									visible = "[And(GetVariableSystem.HasValue('move_to_old', 'levies'), Not(Or(RegimentReorgEntry.IsMaA, Character.IsValid)))]"
								}
								move_regiment = {
									visible = "[And(GetVariableSystem.HasValue('move_to_old', 'knights'),  Character.IsValid)]"
								}

								move_regiment = {
									visible = "[EqualTo_string(GetVariableSystem.Get('move_to_old'), RegimentReorgEntry.GetMaAType.GetNameNoTooltip)]"
								}
							}
						}
					}
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[GetVariableSystem.Exists('ungrouped_units')]"

			text_single = {
				visible = "[Not(GetVariableSystem.Exists('moving_to_old'))]"
				datacontext = "[ArmyReorgWindow.GetRightArmyComposition]"
				raw_text = "Select units to move to [ArmyComposition.GetName]:"
				layoutpolicy_horizontal = expanding
			}

			text_single = {
				visible = "[GetVariableSystem.Exists('moving_to_old')]"
				datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
				raw_text = "Select units to move to [ArmyComposition.GetName]:"
				layoutpolicy_horizontal = expanding
			}

		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 20

			visible = "[GetVariableSystem.Exists('ungrouped_units')]"

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[Not(GetVariableSystem.Exists('moving_to_old'))]"
				blockoverride "scrollbox_margins" {
					margin_top = 20
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						datamodel = "[ArmyReorgWindow.GetLeftItems]"
						layoutpolicy_horizontal = expanding

						item = {
							container = {
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes

								move_regiment = {
								}
							}
						}
					}
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[GetVariableSystem.Exists('moving_to_old')]"
				blockoverride "scrollbox_margins" {
					margin_top = 20
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						datamodel = "[ArmyReorgWindow.GetRightItems]"
						layoutpolicy_horizontal = expanding

						item = {
							container = {
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes

								move_regiment = {
								}
							}
						}
					}
				}
			}
		}
	}
}

window = {
	name = "attach_to_army_window"
	size = { 600 700 }
	parentanchor = center
	layer = top

	attachto = {
		widgetid = "army_window"
		stackmode = top
		inherit_data_context = yes
	}

	using = Window_Background
	using = Window_Decoration_Spike

	using = Animation_ShowHide_Quick

	vbox = {
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "ATTACH_TO_ARMY_WINDOW_HEADER"
			}

			blockoverride "button_close"
			{
				onclick = "[AttachToArmyWindow.Hide]"
			}
		}

		text_multi = {
			text = "ATTACH_TO_ARMY_WINDOW_TEXT"
			layoutpolicy_horizontal = expanding
			align = center
			margin = { 10 0 }
			default_format = "#I"
		}

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = growing

			blockoverride "scrollbox_content"
			{

				vbox = {
					layoutpolicy_horizontal = expanding
					ignoreinvisible = yes
					spacing = 3

					datamodel = "[AttachToArmyWindow.AccessLocalUnits]"

					item = {
						button_standard_list = {
							name = "local_unit_item"
							layoutpolicy_horizontal = expanding
							size = { 0 50 }
							onclick = "[AttachToArmyWindow.SelectUnit( UnitItem.Self )]"
							down = "[AttachToArmyWindow.IsSelectedUnit( UnitItem.Self )]"

							hbox = {
								margin = { 10 0 }
								spacing = 10

								coa_realm_tiny = {
									datacontext = "[UnitItem.GetOwner]"
								}

								soldiers_and_quality_small = {
									datacontext = "[UnitItem.GetArmy.GetComposition]"
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "[UnitItem.GetArmy.GetNameNoTooltip]"
									default_format = "#clickable"
									align = left
									autoresize = no
								}

								expand = { }
							}
						}
					}
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin = { 10 0 }
			margin_bottom = 10

			spacer = {
				visible = "[Not(AttachToArmyWindow.HasSelectedUnit)]"
				size = { 10 10 }
			}

			text_multi = {
				layoutpolicy_horizontal = expanding
				visible = "[AttachToArmyWindow.HasSelectedUnit]"
				text = "ATTACH_TO_UNIT_WINDOW_TEXT"
				align = center
			}

			hbox = {
				spacing = 3

				button_standard = {
					name = "close_button"
					text = "CANCEL"
					align = center
					onclick = "[AttachToArmyWindow.Hide]"
				}

				button_primary = {
					name = "select_button"
					text = "ATTACH"
					align = center
					enabled = "[AttachToArmyWindow.HasSelectedUnit]"
					onclick = "[AttachToArmyWindow.AttachToSelected]"
					onclick = "[AttachToArmyWindow.Hide]"
					clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_unit_army_attach"
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################
template reorg_regiment_tooltips {
	hbox = {
		datacontext = "[RegimentReorgEntry.GetKnight]"
		visible = "[Character.IsValid]"

		block "knight_placement" {
			using = tooltip_ws
		}

		tooltipwidget = {
			container_character_tooltip = {
				blockoverride "interaction_info" {
					text = "REORG_INSTRUCTION"
				}
			}
		}
	}

	hbox = {
		datacontext = "[RegimentReorgEntry.GetRegiment.GetRegiment]"
		visible = "[RegimentReorgEntry.IsMaA]"

		block "maa_placement" {
			using = tooltip_ws
		}

		tooltipwidget = {
			using = regiment_container_tooltip

			blockoverride "extra_info" {
				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "REORG_INSTRUCTION"
					margin = { 10 0 }
				}
			}
		}
	}

	hbox = {
		datacontext = "[RegimentReorgEntry.GetRegiment.GetRegiment]"
		visible = "[And( Not( Or( RegimentReorgEntry.IsMaA, RegimentReorgEntry.GetKnight.IsValid ) ), RegimentReorgEntry.GetRegiment.GetFromVassal.IsValid )]"

		block "vassal_placement" {
			using = tooltip_ws
		}
		tooltip = TT_REORG_VASSAL_LEVIES
	}

	hbox = {
		datacontext = "[RegimentReorgEntry.GetRegiment.GetRegiment]"
		visible = "[And( Not( Or( RegimentReorgEntry.IsMaA, RegimentReorgEntry.GetKnight.IsValid ) ), Not( RegimentReorgEntry.GetRegiment.GetFromVassal.IsValid ) )]"

		block "levies_placement" {
			using = tooltip_ws
		}
		tooltip = TT_REORG_LEVIES
	}
}

types ArmyWindow
{
	type multi_unit_button = button {
		gfxtype = updownframedbuttongfx
		framesize = { 50 50 }
		onclick = "[SelectedUnitItem.OnClick]"
		onrightclick = "[SelectedUnitItem.OnRightClick]"
		button_ignore = none
		down = "[SelectedUnitItem.IsShown]"
		effectname = "NoHighlight"

		upframe = 1
		overframe = 2
		downframe = 3
	}

	type army_quality_icon = icon {
		name = "quality_icon"
		texture = "gfx/interface/icons/army_quality_icon.dds"
		framesize = { 32 32 }
		size = { 22 22 }
		frame = "[ArmyComposition.CalcQualityLevel]"
		tooltip = "[ArmyComposition.GetArmyQualityName|T]"
	}

	type unraised_army_quality_icon = icon {
		name = "quality_icon"
		texture = "gfx/interface/icons/army_quality_icon.dds"
		framesize = { 32 32 }
		size = { 22 22 }
		frame = "[ArmyComposition.CalcUnraisedQualityLevel]"
		tooltip = "[ArmyComposition.GetUnraisedArmyQualityName|T]"
	}

	type soldiers_and_quality_big = hbox {
		margin = { 0 2 }
		#TODO check
		# margin_right = 20
		spacing = 5

		vbox = {
			spacing = 2
			layoutpolicy_vertical = expanding

			hbox = {
				text_single = {
					name = "quality_label"
					raw_text = "[ArmyComposition.GetArmyQualityName]."
					tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
				}
				text_single = {
					raw_text = " [Subtract_int32(ArmyComposition.GetMaxNumberOfSoldiers, ArmyComposition.GetCurrentNumberOfSoldiers)] men missing."
					visible = "[GreaterThan_int32(ArmyComposition.GetMaxNumberOfSoldiers, ArmyComposition.GetCurrentNumberOfSoldiers)]"
				}
			}
		}
	}

	type soldiers_and_quality_small = hbox
	{
		margin = {5 5}
		spacing = 5

		tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"

		expand = {
			layoutpolicy_horizontal = expanding
		}

		icon = {
			name = "icon_soldier"
			texture = "gfx/interface/icons/icon_soldier.dds"
			size = { 30 30 }
		}

		vbox = {

			text_single = {
				name = "strength"
				text = "[ArmyComposition.GetSoldierCountString]"
				default_format = "#high"
				align = left
				using = Font_Size_Medium
			}

			progressbar_standard = {
				name = "soldiers_max"
				visible = "[And( NotEqualTo_int32(ArmyComposition.GetCurrentNumberOfSoldiers, ArmyComposition.GetMaxNumberOfSoldiers), NotEqualTo_int32(ArmyComposition.GetMaxNumberOfSoldiers, '(int32)0' ) )]"

				block "spacing"
				{
					size = { 50 8 }
				}

				min = 0
				max = "[IntToFloat(ArmyComposition.GetMaxNumberOfSoldiers)]"
				value = "[IntToFloat(ArmyComposition.GetCurrentNumberOfSoldiers)]"
			}
		}

		army_quality_icon = {
			tooltip_enabled = no
		}

		expand = {
			layoutpolicy_horizontal = expanding
		}
	}

	type hbox_reorg_regiment_entry_core_ocr = flowcontainer {
	    ignoreinvisible = yes
		spacing = 4

		text_single = {
			name = "soldiers"
			raw_text = "[RegimentReorgEntry.GetSoldierCount]"
			visible = "[Not( Character.IsValid )]"
		}

		text_single = {
			name = "prowess"
			visible = "[Character.IsValid]"
			raw_text = "[Character.GetSkill( 'prowess' )] prowess,"
		}

		text_single = {
			name = "name"
			raw_text = "[RegimentReorgEntry.GetName],"
		}

		text_single = {
			raw_text = "from [ArmyRegiment.GetFromVassal.GetNameNoTooltip]."
			visible = "[ArmyRegiment.GetFromVassal.IsValid]"
		}

		text_single = {
			raw_text = "Hired."
			visible = "[RegimentReorgEntry.ShowCoA]"
		}

		text_single = {
			raw_text = "Event troops."
			visible = "[ArmyRegiment.IsEventTroops]"
			tooltip = "TT_REORG_EVENT_TROOPS"
		}

		flowcontainer = {
		    ignoreinvisible = yes
			visible = "[Not( Character.IsValid )]"

			text_single = {
				raw_text = "[Subtract_int32(RegimentReorgEntry.GetMaxSoldierCount, RegimentReorgEntry.GetSoldierCount)] missing."
				visible = "[GreaterThan_int32(RegimentReorgEntry.GetMaxSoldierCount, RegimentReorgEntry.GetSoldierCount)]"
			}
		}
	}

	type move_regiment = button_text {
		datacontext = "[RegimentReorgEntry.GetKnight]"
		datacontext = "[RegimentReorgEntry.GetRegiment]"
		layoutpolicy_horizontal = expanding

		blockoverride "text" {
			raw_text = ""
		}

		blockoverride "extra" {
			hbox_reorg_regiment_entry_core_ocr = { }
		}
		block "onclick" {
			onclick = "[RegimentReorgEntry.MoveRegiment]"
		}
	}

	type hbox_reorg_regiment_entry_core = hbox
	{
		datacontext = "[RegimentReorgEntry.GetKnight]"
		datacontext = "[RegimentReorgEntry.GetRegiment]"

		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		margin = { 5 0 }
		spacing = 5

		hbox = {
			name = "icon"

			highlight_icon = {
				name = "men_at_arms_icon"
				datacontext = "[RegimentReorgEntry.GetMaAType]"
				visible = "[RegimentReorgEntry.IsMaA]"
				size = { 35 35 }
				texture = "[MenAtArmsType.GetIcon]"
			}

			highlight_icon = {
				name = "levies_icon"
				visible = "[Not( Or( RegimentReorgEntry.IsMaA, Character.IsValid ) )]"
				size = { 35 35 }
				texture = "gfx/interface/icons/icon_soldier.dds"
			}

			highlight_icon = {
				name = "knight_icon"
				visible = "[Character.IsValid]"
				size = { 35 35 }
				texture = "gfx/interface/icons/icon_knight_small.dds"
			}
		}

		text_single = {
			name = "name"
			layoutpolicy_horizontal = expanding
			text = "[RegimentReorgEntry.GetName]"
		}

		coa_realm_tiny = {
			name = "hired_coa"
			visible = "[RegimentReorgEntry.ShowCoA]"
			datacontext = "[RegimentReorgEntry.GetCoATitle.GetHolder]"
		}

		icon = {
			name = "event_troops"
			visible = "[ArmyRegiment.IsEventTroops]"
			texture = "gfx/interface/icons/icon_special_troops.dds"
			size = { 36 36 }
			tooltip = "TT_REORG_EVENT_TROOPS"
		}

		text_single = {
			name = "prowess"
			visible = "[Character.IsValid]"
			text = "[prowess_i][Character.GetSkill( 'prowess' )]"
			default_format = "#high"
		}

		vbox = {
			name = "soldiers"
			visible = "[Not( Character.IsValid )]"
			tooltip = "TT_REORG_SOLDIERS"

			text_single = {
				name = "soldiers"
				text = "[RegimentReorgEntry.GetSoldierCount]"
				default_format = "#high"
			}

			progressbar_standard = {
				name = "soldiers_max"
				# visible = "[NotEqualTo_int32(RegimentReorgEntry.GetMaxSoldierCount, RegimentReorgEntry.GetSoldierCount)]"
				size = { 50 10 }
				min = 0
				max = "[IntToFloat(RegimentReorgEntry.GetMaxSoldierCount)]"
				value = "[IntToFloat(RegimentReorgEntry.GetSoldierCount)]"
			}
		}
	}
}
