window = {
	name = "army_window"
	datacontext = "[ArmyWindow.GetArmy]"

	# parentanchor = bottom|left
	size = { 700 100% }
	filter_mouse = left|right
	movable = no
	layer = middle

	state = {
		trigger_on_create = yes
		name = daily_tick

		on_start = "[GetScriptedGui('save_army_position').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Army.MakeScope).End )]"
		on_start = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
		on_start = "[GetScriptedGui('raid_targets').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
	}
	using = Window_Background_No_Edge

	state = {
		name = _show
		on_start = "[GetVariableSystem.Set( 'county_view_open', 'true' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"
		on_start = "[GetScriptedGui('save_army_position').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Army.MakeScope).End )]"
		on_start = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
		on_start = "[GetScriptedGui('raid_targets').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"

		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
		using = Animation_FadeIn_BottomLeft
	}

	state = {
		name = _hide
		on_start = "[GetVariableSystem.Clear( 'county_view_open' )]"
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"


		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
		using = Animation_FadeOut_BottomLeft
	}

	button = {
		onclick = "[ArmyWindow.CloseAndDeselect]"
		size = { 0 0 }
		shortcut = "close_window"
	}

	vbox = {
		margin = { 5 5 }

		### close button row
		hbox = {
			layoutpolicy_horizontal = expanding
			margin_right = 8

			header_pattern = {
				layoutpolicy_horizontal = expanding
				visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
				blockoverride "header_text" { }

				vbox = {
					layoutpolicy_horizontal = expanding
					resizeparent = yes
					margin_left = 5

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_top = 2
						text_single = {
							align = nobaseline
							visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
							name = "strength"
							tooltip = "[ArmyWindow.GetAllArmiesCompositionString]"
							raw_text = "[GetDataModelSize(ArmyWindow.GetSelectedUnitItems)] armies selected, total soldiers: [ArmyWindow.GetTotalSoldierCountString]."
						}

						hbox = {
							visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
							button_text_cant = {
								blockoverride "text" {
									raw_text = "Merge, hotkey G."
								}
								blockoverride "disabled" {
									visible = "[Not(ArmyWindow.CanMerge)]"
									tooltip = "[ArmyWindow.BuildMergeTooltip]"
								}
								onclick = "[ArmyWindow.MergeSelected]"
								shortcut = "army_merge"
							}

							button_text_cant = {
							    blockoverride "text" {
							        raw_text = "Reorganize."
							    }
								blockoverride "disabled" {
									visible = "[Not(ArmyWindow.CanReorgSelected)]"
									tooltip = "[ArmyWindow.BuildReorgTooltip]"
								}
								onclick = "[ArmyWindow.ToggleReorganizationWindow]"
								enabled = "[ArmyWindow.CanReorgSelected]"
							}

						}

						expand = { }
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							raw_text = "Armies: "
						}

						dynamicgridbox = {
							layoutpolicy_horizontal = expanding
							name = "banner_items_grid"
							datamodel = "[ArmyWindow.GetSelectedUnitItems]"
							visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
							datamodel_wrap = 8
							flipdirection = yes

							item = {
								button_text = {
									blockoverride "text" {
										raw_text = "[SelectedUnitItem.GetArmy.GetSoldierCount|*],"
										align = left
									}
									# blockoverride "extra" {
									# 	text_single = {
									# 		raw_text = " selected."
									# 		visible = "[SelectedUnitItem.IsShown]"
									# 	}
									# }
									onclick = "[PdxGuiTriggerAllAnimations('army_change')]"
									onrightclick = "[SelectedUnitItem.OnRightClick]"
									down = "[SelectedUnitItem.IsShown]"

									state = {
										name = _mouse_click
										delay = 0.2
										on_finish = "[SelectedUnitItem.OnClick]"
									}
									tooltip = "[SelectedUnitItem.GetTooltip]"
									using = tooltip_ne
								}
							}
						}
					}
					## Armies flag
				}
			}

			blockoverride "button_close"
			{
				# size = { 0 0 }
				onclick = "[ArmyWindow.CloseAndDeselect]"
				size = { 0 0 }
			}
		}

		### info row
		vbox = {
			layoutpolicy_horizontal = expanding
			# layoutpolicy_vertical = expanding

			### Dark header row
			hbox = {
				### name
				# visible = "[Not(GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1'))]"
				layoutpolicy_horizontal = expanding
				minimumsize = { 0 30 }
				margin = { 10 4 }
				margin_right = 20

				spacing = 3

				background = {
					margin_left = 15
					margin_right = -7
					using = Background_Area_Dark
				}

				text_single = {
					raw_text = "Selected:"
					visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
				}

				text_single = {
					name = "strength"
					datacontext = "[Army.GetComposition]"
					raw_text = "[ArmyComposition.GetSoldierCountString] men,"
				}

				text_single = {
					name = "name"
					raw_text = "[Army.GetNameNoTooltip]."
					max_width = 190
				}

				# expand = {}

				hbox = {
					name = "loot"
					visible = "[Army.IsRaidArmy]"
					tooltip = "ARMY_RAID_LOOT_TOOLTIP"

					text_single = {
						raw_text = "Loot:"
					}

					text_single = {
						raw_text = " "
					}

					text_single = {
						name = "loot"
						raw_text = "[Army.GetRaidLoot|0] out of [Army.GetLootCap|0]."
					}
				}

				hbox = {
					tooltip = "ARMY_ATTRITION_TT"
					spacing = 3

					text_single = {
						raw_text = "Attrition:"
					}

					text_single = {
						name = "attrition"
						raw_text = "[Army.GetArmyAttritionPercentage|%0-]."
					}
				}

				hbox = {
					name = "supplies"
					tooltip = "[Army.GetSupplyStateTooltip]"

					text_single = {
						raw_text = "Supply:"
					}

					text_single = {
						raw_text = " "
					}

					text_single = {
						name = "supply_text"
						raw_text = "[ArmyWindow.GetCurrentSupply] out of [ArmyWindow.GetFullSupplyCapacity]"
						minimumsize = { 60 0 }
						align = right
					}

					text_single = {
						raw_text = ", decreasing"
						visible = "[ArmyWindow.ShowSupplyTrend]"
					}

					dot = { }

				}

				expand = { }
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					raw_text = "Click to select only this unit."
				}
				onclick = "[ArmyWindow.SelectThisUnitOnly]"
				visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
			}

			### selected Dark header row
			button = {
				name = "select_this_only"
				visible = no# "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
				layoutpolicy_horizontal = expanding
				minimumsize = { 0 48  }
				onclick = "[ArmyWindow.SelectThisUnitOnly]"

				tooltip = "ARMY_SELECT_THIS_ONLY"

				state = {
					name = "army_change"
					alpha = 0
					duration = 0.2
					next = "b"
					using = Animation_Curve_Default
				}

				state = {
					name = "b"
					alpha = 1
					duration = 0.2
					using = Animation_Curve_Default
				}

				### name ###
				hbox = {
					margin_left = 10
					margin_right = 20

					spacing = 5

					background = {
						margin_left = 15
						margin_right = -6
						using = Background_Area_Dark
					}

					hbox = {
						layoutpolicy_vertical = expanding
						spacing = 5

						text_single = {
							name = "name"
							text = "[Army.GetNameNoTooltip]"
							align = left|nobaseline
							using = Font_Size_Medium
							max_width = 600
						}

						button_select_arrow = {
							alwaystransparent = yes
							size = { 20 20 }
						}
					}

					expand = {}

					hbox = {
						name = "loot"
						visible = "[Army.IsRaidArmy]"
						tooltip = "ARMY_RAID_LOOT_TOOLTIP"

						icon = {
							name = "loot_icon"
							size = { 35 35 }
							texture = "gfx/interface/icons/icon_gold.dds"
						}

						text_single = {
							name = "loot"
							text = "[Army.GetRaidLoot|0]/[Army.GetLootCap|0]"
						}
					}

					hbox = {
						tooltip = "ARMY_ATTRITION_TT"

						icon = {
							texture = "gfx/interface/icons/map_icons/attrition_icon.dds"
							size = { 35 35 }
						}

						text_single = {
							name = "attrition"
							text = "[Army.GetArmyAttritionPercentage|%0-]"
						}
					}

					hbox = {
						name = "supplies"
						tooltip = "[Army.GetSupplyStateTooltip]"

						icon = {
							name = "supply_icon"
							size = { 40 40 }
							framesize = { 60 60 }
							frame = "[ArmyWindow.GetSupplyStateFrame]"
							texture = "gfx/interface/icons/icon_supplies.dds"
						}

						icon = {
							name = "supply_trend_icon"
							size = { 25 25 }
							visible = "[ArmyWindow.ShowSupplyTrend]"
							texture = "gfx/interface/icons/symbols/icon_supplies_trend.dds"
						}

						text_single = {
							name = "supply_text"
							text = "[ArmyWindow.GetCurrentSupply]/[ArmyWindow.GetFullSupplyCapacity]"
							minimumsize = { 60 0 }
							align = right
						}
					}
				}
			}

			datacontext = "[Army.GetCommander]"

			hbox = {
				layoutpolicy_horizontal = expanding

				text_single = {
					max_width = 580
					margin_left = 10
					fontsize_min = 14
					# layoutpolicy_horizontal = expanding
					raw_text = "In [Army.GetLocation.GetHolding.GetName], [Army.GetLocation.GetCounty.GetName][AddTextIf(Army.GetLocation.GetCounty.GetTitle.GetDeJureLiege.IsValid, ', ')][Army.GetLocation.GetCounty.GetTitle.GetDeFactoTopLiege.GetBaseNameNoTierNoTooltip],"
				}

				space = { }

				text_single = {
					raw_text = "[GuiScope.SetRoot(Army.GetLocation.MakeScope).ScriptValue('distance_to_player')|0] points [Army.GetLocation.Custom('county_direction_from_capital')] from capital."
				}
				button_text = {
					blockoverride "text" {
						raw_text = "Pan camera, Shift Q."
						align = left
					}
					onclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
					shortcut = map_mode_9
				}
				expand = { }
			}

			text_single = {
				margin_left = 10
				layoutpolicy_horizontal = expanding
				visible = no#"[InDebugMode]"
				raw_text = "X [ArmyWindow.GetArmy.GetLocation.MakeScope.Var('pos_x').GetValue|0], Y [ArmyWindow.GetArmy.GetLocation.MakeScope.Var('pos_y').GetValue|0]. "
			}

			vbox = {
				margin_left = 10
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area_Dark
					alpha = 0.7
				}

				hbox = {
					spacing = 3
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "status_text"
						raw_text = "[ArmyWindow.GetUnitItem.GetStatusDescription],"
						default_format = "#high"
					}

					text_single = {
						visible = "[And(Army.IsMoving, Not(GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End )))]"
						raw_text = "to [Army.GetMovementInfoForTooltip]."
					}

					container = {
						name = "open_raid_button"
						visible = "[Army.IsTakingRaidAction]"
						datacontext = "[Army.GetRaid]"
						using = raid_goto_template
						blockoverride "key" {
							shortcut = confirm
						}
						blockoverride "extra" {
							text_single = {
								raw_text = " hotkey Enter"
							}
						}
					}

					vbox = {
						name = "open_siege_button"
						visible = "[Army.IsSieging]"
						datacontext = "[Army.GetLocation.GetSiege]"
						using = siege_goto_template
						blockoverride "key" {
							shortcut = confirm
						}
						blockoverride "extra" {
							text_single = {
								raw_text = " hotkey Enter"
							}
						}
					}

					button_text = {
						blockoverride "text" {
							raw_text = "STOP_GATHERING"
							align = left
						}
						visible = "[ArmyWindow.CanStopGathering]"
						onclick = "[ArmyWindow.StopGathering]"
					}

					expand = { }
				}
			}

			widget = {
				size = { 0 5 }
			}

			hbox = {
			    layoutpolicy_horizontal = expanding
				spacing = 3

				button_text = {
					# visible = "[Not(GetVariableSystem.Exists('expand_forts'))]"
					blockoverride "text" {
						raw_text = "[Select_CString(GetVariableSystem.Exists('expand_forts'), 'Show', 'Hide')] details, hotkey E."
					}
					onclick = "[GetVariableSystem.Toggle('expand_forts')]"
					onclick = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('raid_targets').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
					shortcut = map_mode_1
				}

				button_text = {
					visible = "[GetPlayer.IsAtWar]"
					blockoverride "text" {
						raw_text = "[Select_CString(GetVariableSystem.Exists('hide_forts'), 'Show', 'Hide')] forts, F."
					}
					onclick = "[GetVariableSystem.Toggle('hide_forts')]"
					onclick = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					shortcut = army_split_half
				}

				button_text = {
					visible = "[Army.IsRaidArmy]"
					blockoverride "text" {
						raw_text = "[Select_CString(GetVariableSystem.Exists('hide_raid_targets'), 'Show', 'Hide')] raid targets, T."
					}
					onclick = "[GetVariableSystem.Toggle('hide_raid_targets')]"
					onclick = "[GetScriptedGui('raid_targets').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
					shortcut = map_mode_2
				}

			    expand = { }
			}

			widget = {
				size = { 0 5 }
			}

			vbox = {
				visible = "[Not(GetVariableSystem.Exists('expand_forts'))]"
				layoutpolicy_horizontal = expanding

				margin_right = 5

				### Info ###

				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					minimumsize = { 280 0 }

					background = {
						name = "army_state_background"
						texture = "[Army.GetArmyStatusIcon]"
						margin_top = 5
						margin_right = -5
						using = Mask_Rough_Edges
						fittype = centercrop
						alpha = 0.2

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							rotate_uv = -90
							mirror = vertical
						}
					}

					vbox = {
						layoutpolicy_vertical = expanding

						hbox = {
							margin_left = 10
							layoutpolicy_horizontal = expanding
							soldiers_and_quality_big = {
								datacontext = "[Army.GetComposition]"
							}

							expand = { }
						}

						divider_light = {
							layoutpolicy_horizontal = expanding
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							margin_left = 10

							vbox = {
								layoutpolicy_vertical = expanding

								### Hired Troops
								hbox = {
									name = "hired_and_event_troops"
									visible = no#"[Or( DataModelHasItems(ArmyWindow.GetHiredTroopItems), Army.HasEventTroops )]"
									ignoreinvisible = yes
									layoutpolicy_horizontal = expanding

									widget = {
										visible = "[Army.HasEventTroops]"
										size = { 150 25 }
										layoutpolicy_horizontal = expanding
										scissor = yes
										text_single = {
											raw_text = "ARMY_VIEW_ARMY_HAS_EVENT_TROOPS"
										}
									}

									overlappingitembox = {
										size = { 350 42 }
										visible = no
										name = "hired_troops"
										datamodel = "[ArmyWindow.GetHiredTroopItems]"

										item = {
											container = {
												ignoreinvisible = yes

												container = {
													name = "mercenary_item"
													visible = "[HiredTroopItem.IsMercenaryCompany]"
													datacontext = "[HiredTroopItem.GetMercenaryCompany]"

													coa_title_tiny = {
														name = "mercenary_coa"
														datacontext = "[MercenaryCompany.GetTitle]"
													}
												}

												container = {
													name = "holy_order_item"
													visible = "[HiredTroopItem.IsHolyOrder]"
													datacontext = "[HiredTroopItem.GetHolyOrder]"

													coa_title_tiny = {
														name = "holy_order_coa"
														datacontext = "[HolyOrder.GetTitle]"
													}
												}
											}
										}
									}

									expand = { }
								}

								### MAA ###
								vbox = {
									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding

										dynamicgridbox = {
											name = "troops"
											datamodel = "[ArmyWindow.GetTroopItems]"
											datamodel_wrap = 4
											flipdirection = yes

											item = {
												widget = {
													tooltip = "ARMY_VIEW_TROOP_TT"

													hbox = {
														set_parent_size_to_minimum = yes
														margin_left = 5
														spacing = 3

														text_single = {
															name = "men_at_arms_icon"
															visible = "[TroopItem.IsMaa]"
															raw_text = "[TroopItem.GetRegiment.GetRegiment.GetMAAType.GetName]:"
														}

														text_single = {
															raw_text = "Levies:"
															visible = "[TroopItem.IsLevies]"
														}

														text_single = {
															raw_text = "Knights:"
															visible = "[TroopItem.IsKnight]"
														}

														text_single = {
															layoutpolicy_horizontal = growing
															raw_text = "[TroopItem.GetCount|*],"
														}
													}
												}
											}
										}

										# widget = {
										# 	visible = "[Army.HasEventTroops]"
										# 	size = { 150 24 }
										# 	layoutpolicy_horizontal = expanding
										# 	scissor = yes
										# 	text_single = {
										# 		margin_left = 4
										# 		raw_text = "ARMY_VIEW_ARMY_HAS_EVENT_TROOPS"
										# 	}
										# }

										expand = {}
									}
								}

								expand = { }
							}

							expand = { }
						}
					}

					expand = { }
				}

				### Commmander ###
				hbox = {
					# layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					margin_left = 5

					button_text = {
						visible = "[Not( Character.IsValid )]"
						blockoverride "text" {
							raw_text = "Assign commander."
						}
						onclick = "[ArmyWindow.ShowCommanders]"
					}

					flowcontainer = {
						visible = "[Character.IsValid]"
						direction = vertical
						ignoreinvisible = yes

						# text_single = {
						# 	raw_text = "[Character.]"
						# }
						char_name = {
							blockoverride "text" {
								raw_text = "Commander: [Character.GetNameOrMeNoTooltip]."
								# max_width = 250
							}
						}
						text_single = {
							tooltip = "[Character.GetCommanderAdvantageDesc]"
							raw_text = "Advantage: [Character.GetCommanderAdvantage]."
						}

						flowcontainer = {
							ignoreinvisible = yes
							spacing = 2
							text_single = {
								visible = "[Not(IsDataModelEmpty(ArmyWindow.GetCommanderTraits))]"
								raw_text = "[GetDataModelSize(ArmyWindow.GetCommanderTraits)] traits:"
							}

							dynamicgridbox = {
								name = "commander_traits"
								datamodel = "[ArmyWindow.GetCommanderTraits]"
								flipdirection = yes
								datamodel_wrap = 5

								item = {
									container = {
										visible = "[Trait.IsValid]"

										text_single = {
											tooltip = "trait_tooltip"
											margin_left = 5
											raw_text = "[Trait.GetNameNoTooltip(Character.Self)],"
										}
									}
								}
							}
						}
						widget = {
							size = { 0 3 }
						}

						button_text = {
							blockoverride "text" {
								raw_text = "Change commander"
							}
							blockoverride "extra" {
								text_single = {
									raw_text = ", disabled. Tooltip"
									tooltip = "[ArmyWindow.GetShowCommandersTooltip]"
									visible = "[Not(ArmyWindow.CanShowCommanders)]"
								}
								dot_nb = { }
							}
							enabled = "[ArmyWindow.CanShowCommanders]"
							onclick = "[ArmyWindow.ShowCommanders]"
						}
					}

					expand = { }
				}
			}

			vbox = {
				visible = "[Not(GetVariableSystem.Exists('expand_forts'))]"
				name = "hundred"
				margin = { 10 0 }
				layoutpolicy_horizontal = expanding

				state = {
					name = "army_change"
					alpha = 0.5
					duration = 0.2
					next = "b"
					using = Animation_Curve_Default
				}

				state = {
					name = "b"
					alpha = 1
					duration = 0.2
					using = Animation_Curve_Default
				}

				### Manage buttons

				vbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "attached_to_name"
						visible = "[ArmyWindow.IsAttachedToAnyUnit]"
						datacontext = "[ArmyWindow.GetAttachedToArmy]"
						text = "ATTACHED_ARMY_NAME"
						align = left
						max_width = 250
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 1

						button_text_cant = {
							layoutpolicy_horizontal = expanding
						    blockoverride "text" {
						        raw_text = "Attach to army"
								align = left
						    }
							blockoverride "disabled" {
								visible = "[Not(ArmyWindow.CanAttachToAnyLocalUnit)]"
								align = left
							}
							blockoverride "dot" { }

							visible = "[And( Not( ArmyWindow.CanAttachToMultipleLocalUnits ), Not( ArmyWindow.IsAttachedToAnyUnit ) )]"
							enabled = "[ArmyWindow.CanAttachToAnyLocalUnit]"
							tooltip = "[ArmyWindow.BuildAttachToUnitTooltip]"
							tooltip_enabled = "[Not(ArmyWindow.CanAttachToAnyLocalUnit)]"
							onclick = "[ArmyWindow.AttachToLocalUnit]"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							name = "attach_to_unit_window_button"
							visible = "[And( ArmyWindow.CanAttachToMultipleLocalUnits, Not( ArmyWindow.IsAttachedToAnyUnit ) )]"
							tooltip = "TOGGLE_ATTACH_TO_UNIT_WINDOW"
							onclick = "[ArmyWindow.ToggleAttachToWindow]"
						    blockoverride "text" {
						        raw_text = "Attach to other"
								align = left
						    }
							blockoverride "dot" { }
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							name = "detach_from_unit_button"
							visible = "[ArmyWindow.IsAttachedToAnyUnit]"
							enabled = "[ArmyWindow.CanDetachFromUnit]"
							tooltip = "[ArmyWindow.BuildDetachFromUnitTooltip]"
							onclick = "[ArmyWindow.DetachFromUnit]"
						    blockoverride "text" {
						        raw_text = "Detach unit"
								align = left
						    }
							blockoverride "extra" {
								text_single = {
									raw_text = ", disabled"
									visible = "[Not(ArmyWindow.CanDetachFromUnit)]"
								}
							}
							blockoverride "dot" { }
						}

						button_checked_text = {
							layoutpolicy_horizontal = expanding
							visible = "[Army.IsRaidArmy]"
							onclick = "[ArmyWindow.ToggleLooting]"
							tooltip = "TOGGLE_LOOTER_STANCE"

							blockoverride "visible"
							{
								visible = "[Not(Army.HasLooterStance)]"
							}

							blockoverride "text"
							{
								text = "AV_ALWAYS_RAID"
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 1

						button_text_cant = {
							layoutpolicy_horizontal = expanding
							# name = "unit_custom_split_button"
							enabled = "[ArmyWindow.CanSplitHalfSelected]"

							onclick = "[ArmyWindow.SplitHalfSelected]"
							shortcut = map_mode_5
							tooltip = "[ArmyWindow.BuildSplitHalfTooltip]"
							tooltip_enabled = "[Not(ArmyWindow.CanSplitHalfSelected)]"
							blockoverride "text" {
								raw_text = "Split in half"
								align = left
							}
							blockoverride "disabled" {
								visible = "[Not(ArmyWindow.CanSplitHalfSelected)]"
								align = left
							}
							blockoverride "extra" {
								text_single = {
									raw_text = ", Control Q"
									visible = "[ArmyWindow.CanSplitHalfSelected]"
								}
							}
							blockoverride "dot" { }
						}

						button_text_cant = {
							layoutpolicy_horizontal = expanding
							name = "unit_custom_split_button"
							enabled = "[ArmyWindow.CanSplitCustomSelected]"
							tooltip_enabled = "[Not(ArmyWindow.CanSplitCustomSelected)]"

							tooltip = "[ArmyWindow.BuildSplitCustomTooltip]"
							onclick = "[ArmyWindow.ToggleSplitArmyWindow]"
							blockoverride "text" {
								raw_text = "Make new army"
								align = left
							}
							blockoverride "disabled" {
								visible = "[Not(ArmyWindow.CanSplitCustomSelected)]"
								align = left
								# text_single = {
								# 	raw_text = ", hotkey H"
								# }
							}
							# shortcut = army_create_new
							blockoverride "dot" { }
						}


						button_text_cant = {
							layoutpolicy_horizontal = expanding
							name = "split_off_button"
							onclick = "[ArmyWindow.SplitSelectedHiredAndEventTroops]"
							tooltip = "[ArmyWindow.BuildSplitHiredAndEventTroopsTooltip]"
							enabled = "[ArmyWindow.CanSplitSelectedHiredAndEventTroops]"
							using = tooltip_ne
							tooltip_enabled = "[Not(ArmyWindow.CanSplitSelectedHiredAndEventTroops)]"

							blockoverride "text" {
								raw_text = "Split off hired"
								align = left
							}
							blockoverride "disabled" {
								align = left
								visible = "[Not(ArmyWindow.CanSplitSelectedHiredAndEventTroops)]"
							}
							blockoverride "dot" { }
						}

						expand = { }
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						button_text = {
							layoutpolicy_horizontal = expanding
							name = "split_for_siege_button"
							visible = "[Army.IsSieging]"

							onclick = "[ArmyWindow.SplitSelectedForSiege]"
							tooltip = "[ArmyWindow.BuildSplitForSiegeTooltip]"
							enabled = "[ArmyWindow.CanSplitSelectedForSiege]"
							using = tooltip_ne

							blockoverride "text" {
								raw_text = "Station besiegers"
								align = left
							}
							blockoverride "extra" {
								text_single = {
									raw_text = ", disabled"
									visible = "[Not(ArmyWindow.CanSplitSelectedForSiege)]"
								}
							}
							blockoverride "dot" { }
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							name = "toggle_raiding"
							enabled = "[ArmyWindow.CanToggleRaiding]"
							tooltip = "[ArmyWindow.BuildToggleRaidingTooltip]"
							using = tooltip_ne
							visible = "[GetPlayer.CanRaid]"
							onclick = "[ArmyWindow.ToggleRaiding]"

							blockoverride "text" {
								raw_text = "Toggle raid."
								align = left
							}
							blockoverride "extra" {
								text_single = {
									raw_text = ", disabled"
									visible = "[Not(ArmyWindow.CanToggleRaiding)]"
								}
							}
							blockoverride "dot" { }
						}

						button_text_cant = {
							layoutpolicy_horizontal = expanding
							name = "disband_button"
							using = tooltip_ne

							enabled = [ArmyWindow.CanDisband]
							tooltip = [ArmyWindow.BuildDisbandTooltip]
							onclick = [ArmyWindow.DisbandSelected]
							shortcut = army_disband

							blockoverride "text" {
								raw_text = "Disband"
								align = left
							}
							blockoverride "disabled" {
								visible = "[Not(ArmyWindow.CanDisband)]"
								align = left
							}
							blockoverride "extra" {
								text_single = {
									raw_text = ", hotkey J"
									visible = "[ArmyWindow.CanDisband]"
								}
							}
							blockoverride "dot" { }
						}

						expand = { }
					}
				}
			}

			expand = { }
		}

		# button_text = {
		#     blockoverride "text" {
		#         raw_text = "Close expanded fort view, hotkey Escape."
		#     }
		# 	visible = "[And(GetVariableSystem.Exists('expand_forts'), Not(GetPlayer.IsAtWar))]"
		# 	onclick = "[GetVariableSystem.Clear('expand_forts')]"
		# }

		vbox = {
			visible = "[GetPlayer.IsAtWar]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			scrollbox = {
				visible = "[Not(GetVariableSystem.Exists('hide_forts'))]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				# minimumsize = { 500 500 }

				blockoverride "scrollbox_content" {

					vbox = {
						# visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('adjacent_hostile_forts')))]"
						layoutpolicy_horizontal = expanding

						# button = {
						# 	visible = "[GetVariableSystem.Exists('expand_forts')]"
						# 	onclick = "[GetVariableSystem.Clear('expand_forts')]"
						# 	shortcut = "close_window"
						# 	# shortcut = map_mode_1
						# }
						hbox = {
							layoutpolicy_horizontal = expanding
							margin_top = 5


							button_text = {
								blockoverride "text" {
									raw_text = "Reload forts, Control E."
								}
								onclick = "[GetScriptedGui('save_army_position').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Army.MakeScope).End )]"
								onclick = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
								onclick = "[GetScriptedGui('raid_targets').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
								shortcut = map_mode_12
							}

							expand = { }
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(GetVariableSystem.Exists('expand_forts'))]"
							raw_text = "Forts are sorted by distance from the army."
						}

						text_single = {
							raw_text = "Click on a fort, then press Control 2 to send the army there."
							layoutpolicy_horizontal = expanding
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(GetVariableSystem.Exists('expand_forts'))]"
							raw_text = "Avoid walking through hostile forts, as you will lose men. Prefer those bordering your land."
						}

					}

					vbox = {
						layoutpolicy_horizontal = expanding

						vbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[GetPlayer.MakeScope.GetList('enemy_capitals')]"

							item = {
								hostile_fort_item = {
									blockoverride "capital" {
										text_single = {
											raw_text = "Enemy capital,"
										}
										text_single = {
											raw_text = "occupied,"
											visible = "[Province.IsOccupied]"
										}
									}
								}
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('hostile_war_targets'))]"

						button_text = {
							layoutpolicy_horizontal = expanding
						    blockoverride "text" {
								align = left
								raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('hostile_war_targets'))] war goals. Click to [Select_CString(GetVariableSystem.Exists('war_targets'), 'Show', 'Hide')]."
						    }
							onclick = "[GetVariableSystem.Toggle('war_targets')]"
						}

						vbox = {
							visible = "[Not(GetVariableSystem.Exists('war_targets'))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetPlayer.MakeScope.GetList('hostile_war_targets')]"

							item = {
								hostile_fort_item = { }
								# vbox = {
								# 	layoutpolicy_horizontal = expanding
								# 	button_text = {
								# 		layoutpolicy_horizontal = expanding
								# 		datacontext = "[Scope.Title]"
								# 		visible = "[Not(ObjectsEqual(Title.GetHolder.GetPrimaryTitle, Scope.Title))]"
								# 		blockoverride "pre" {
								# 			text_single = {
								# 				raw_text = "[Title.GetPreferredCapital.GetProvince.GetName],"
								# 				margin_right = 3
								# 			}
								# 		}
								# 	    blockoverride "text" {
								# 	        raw_text = "[Title.GetName]"
								# 			align = left
								# 	    }
								# 		blockoverride "extra" {
								# 			text_single = {
								# 				raw_text = ", [GuiScope.SetRoot(Title.GetPreferredCapital.GetProvince.MakeScope).ScriptValue('distance_to_player')|0] [Title.GetPreferredCapital.GetProvince.Custom('county_direction_from_capital')]."
								# 			}
								# 		}
								# 	}
								# 	button_text = {
								# 		layoutpolicy_horizontal = expanding
								# 		datacontext = "[Scope.Title]"
								# 		visible = "[ObjectsEqual(Title.GetHolder.GetPrimaryTitle, Scope.Title)]"
								# 		blockoverride "pre" {
								# 			text_single = {
								# 				raw_text = "[Title.GetHolder.GetCapitalLocation.GetName],"
								# 				margin_right = 3
								# 			}
								# 		}
								# 	    blockoverride "text" {
								# 	        raw_text = "[Title.GetName]"
								# 			align = left
								# 	    }
								# 		blockoverride "extra" {
								# 			text_single = {
								# 				raw_text = ", [GuiScope.SetRoot(Title.GetHolder.GetCapitalLocation.MakeScope).ScriptValue('distance_to_player')|0] [Title.GetHolder.GetCapitalLocation.Custom('county_direction_from_capital')]."
								# 			}
								# 		}
								# 	}
								# }
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('captured_war_targets'))]"

						button_text = {
							layoutpolicy_horizontal = expanding
						    blockoverride "text" {
								align = left
								raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('captured_war_targets'))] Captured war goals. Click to [Select_CString(GetVariableSystem.Exists('captured_war_targets'), 'Hide', 'Show')]."
						    }
							onclick = "[GetVariableSystem.Toggle('captured_war_targets')]"
						}

						vbox = {
							visible = "[GetVariableSystem.Exists('captured_war_targets')]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetPlayer.MakeScope.GetList('captured_war_targets')]"

							item = {
								hostile_fort_item = {
									blockoverride "border" { }
								}
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('adjacent_hostile_forts'))]"

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('adjacent_hostile_forts'))] forts on the border with you or ally."
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[GetPlayer.MakeScope.GetList('adjacent_hostile_forts')]"

							item = {
								hostile_fort_item = {
									blockoverride "border" {

									}
								}
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('adjacent_across_water_hostile_forts')))]"

						text_single = {
							raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('adjacent_across_water_hostile_forts'))] adjacent across water."

							layoutpolicy_horizontal = expanding
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[GetPlayer.MakeScope.GetList('adjacent_across_water_hostile_forts')]"

							item = {
								hostile_fort_item = { }
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('your_hostile_forts')))]"
						text_single = {
							background = { using = Background_Area_Dark }
							raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('your_hostile_forts'))] of your own forts captured by enemies."

							layoutpolicy_horizontal = expanding
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[GetPlayer.MakeScope.GetList('your_hostile_forts')]"

							item = {
								hostile_fort_item = {
									blockoverride "controller" { }
								}
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('personal_forts')))]"

						text_single = {
							background = { using = Background_Area_Dark }
							raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('personal_forts'))] personal enemy forts."

							layoutpolicy_horizontal = expanding
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[GetPlayer.MakeScope.GetList('personal_forts')]"

							item = {
								hostile_fort_item = { }
							}
						}
					}

					widget = {
						size = { 0 5 }
					}

					vbox = {
						visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('hostile_forts')))]"
						layoutpolicy_horizontal = expanding

						button_text = {
							layoutpolicy_horizontal = expanding
						    blockoverride "text" {
								raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('hostile_forts'))] Other hostile forts. Click to [Select_CString(GetVariableSystem.Exists('other_hostile_forts'), 'Hide', 'Show')]."
						    }
							onclick = "[GetVariableSystem.Toggle('other_hostile_forts')]"
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[GetVariableSystem.Exists('other_hostile_forts')]"
							datamodel = "[GetPlayer.MakeScope.GetList('hostile_forts')]"

							item = {
								hostile_fort_item = {
									blockoverride "controller" { }
								}
							}
						}
					}
				}
			}

			expand = { }
		}


		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			visible = "[Army.IsRaidArmy]"

			button_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('raid_targets'))] raid targets, reload with Control E."
				}
				onclick = "[GetScriptedGui('raid_targets').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
				shortcut = map_mode_12
			}

			scrollbox = {
				visible = "[Not(GetVariableSystem.Exists('hide_raid_targets'))]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				blockoverride "scrollbox_margins" {
					margin_top = 20
				}

				blockoverride "scrollbox_content" {

					vbox = {
						layoutpolicy_horizontal = expanding

						vbox = {
							layoutpolicy_horizontal = expanding

							datamodel = "[GetPlayer.MakeScope.GetList('raid_targets')]"

							item = {
								raid_target_item = {
									visible = "[GreaterThan_int32(Army.GetSoldierCount, Scope.GetProvince.GetHolding.GetCurrentGarrisonSize)]"
								}
							}
						}

						button_text = {
							layoutpolicy_horizontal = expanding
						    blockoverride "text" {
						        raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('strong_raid_targets'))] targets whose owners are stronger than you, be careful."
						    }
						}

						vbox = {
							layoutpolicy_horizontal = expanding

							datamodel = "[GetPlayer.MakeScope.GetList('strong_raid_targets')]"

							item = {
								raid_target_item = {
								}
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							margin_top = 5

							datamodel = "[GetPlayer.MakeScope.GetList('raid_targets')]"

							item = {
								raid_target_item = {
									visible = "[Not(GreaterThan_int32(Army.GetSoldierCount, Scope.GetProvince.GetHolding.GetCurrentGarrisonSize))]"
									blockoverride "garrison" {
										visible = "[Not(Army.IsGathering)]"
									}
								}
							}
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('looted_raid_targets'))]"
						    blockoverride "text" {
						        raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('looted_raid_targets'))] looted raid targets. Click to [Select_CString(GetVariableSystem.Exists('looted_raid_targets'), 'Hide', 'Show')]"
						    }
							onclick = "[GetVariableSystem.Toggle('looted_raid_targets')]"
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[GetVariableSystem.Exists('looted_raid_targets')]"

							datamodel = "[GetPlayer.MakeScope.GetList('looted_raid_targets')]"

							item = {
								raid_target_item = {
									visible = "[Not(GreaterThan_int32(Army.GetSoldierCount, Scope.GetProvince.GetHolding.GetCurrentGarrisonSize))]"
									blockoverride "garrison" {
										visible = "[Not(Army.IsGathering)]"
									}
								}
							}
						}
					}
				}
			}

			expand = { }
		}

		expand = { }
	}
}

types FortTypes {

	type raid_target_item = button_text {
		layoutpolicy_horizontal = expanding
		datacontext = "[Scope.GetProvince.GetTitle]"
		using = title_pan

		blockoverride "text" {
		}

		blockoverride "extra" {
			flowcontainer = {
				ignoreinvisible = yes

				text_single = {
					raw_text = "Can't siege"
					block "garrison" {
						visible = no
					}
				}

				text_single = {
					raw_text = "[Scope.GetProvince.GetCounty.GetName],"
				}

				spacing = 3


				text_single = {
					raw_text = "[Scope.GetProvince.GetRaidLoot|0] loot,"
				}

				text_single = {
					raw_text = "[GuiScope.SetRoot(Scope.GetProvince.MakeScope).ScriptValue('distance_to_army')|0] [Scope.GetProvince.Custom('county_direction_from_army')]."
				}

				# text_single = {
				# 	raw_text = "[GuiScope.SetRoot(Scope.GetProvince.MakeScope).ScriptValue('direction_from_army')]"
				# }

				text_single = {
					raw_text = "need more than"
					block "garrison" {
						visible = no
					}
				}

				text_single = {
					raw_text = "[Scope.GetProvince.GetHolding.GetCurrentGarrisonSize] garrison."
				}

				text_single = {
					visible = "[Scope.GetProvince.IsRecentlyLooted]"
					raw_text = "Unavailable until [Scope.GetProvince.GetEndOfRecentlyLooted.GetString],"
				}

				flowcontainer = {
					spacing = 3
					visible = "[Title.GetHolder.IsIndependentRuler]"

					text_single = {
						raw_text = "Owner has [Title.GetHolder.GetMilitaryStrengthText] soldiers,"
					}


					button_text = {
						datacontext = "[Title.GetHolder]"
						using = char_click
					    blockoverride "text" {
							margin_top = -1
							align = left
					        raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip], [Character.GetShortUINameNoTooltip]"
					    }
					}
				}

				flowcontainer = {
					spacing = 3
					visible = "[Not(Title.GetHolder.IsIndependentRuler)]"

					text_single = {
						raw_text = "Liege has [Title.GetHolder.GetTopLiege.GetMilitaryStrengthText] soldiers,"
					}

					button_text = {
						datacontext = "[Title.GetHolder.GetTopLiege]"
						using = char_click
					    blockoverride "text" {
							align = left
							margin_top = -1
					        raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip], [Character.GetShortUINameNoTooltip]"
					    }
					}
				}
				dot = {
					margin_left = -3
				}
			}
		}
	}

	type hostile_fort_item = button {
		size = { 0 20 }
		layoutpolicy_horizontal = expanding
		datacontext = "[Scope.GetProvince]"

		button_ignore = none
		# onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Scope.GetProvince.GetId))]"
		onclick = "[DefaultOnCoatOfArmsRightClick(Province.GetCoATitle.GetID)]"
		onrightclick = "[DefaultOnCoatOfArmsRightClick(Province.GetCoATitle.GetID)]"

		hbox = {
			# background = { using = Background_Area_Light }
			layoutpolicy_horizontal = expanding
			spacing = 3

			block "controller" {
				# text_single = {
				# 	raw_text = "You control"
				# 	visible = "[GetScriptedGui('you_control').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End )]"
				# }
				#
				# text_single = {
				# 	raw_text = "Enemy controls"
				# 	visible = "[Not(GetScriptedGui('you_control').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End )]"
				# }
				#
				# text_single = {
				# 	raw_text = ""
				# }
			}

			block "capital" {

			}

			# text_single = {
			# 	raw_text = "War target "
			# 	visible = "[GetScriptedGui('is_war_target').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End )]"
			# }

			text_single = {
				raw_text = "[Province.GetHolding.GetNameNoTooltip], "
			}

			# text_single = {
			# 	raw_text = "[Province.GetCounty.GetName]."
			# }

			block "border" {
				text_single = {
					raw_text = "Bordering."
					visible = "[GetScriptedGui('adjacent_to_ally').IsShown( GuiScope.SetRoot( Province.MakeScope ).AddScope('me', GetPlayer.MakeScope).End )]"
				}
			}


			# text_single = {
			# 	raw_text = "Captured."
			# 	visible = "[]"
			# }

			text_single = {
				# raw_text = "[GuiScope.SetRoot(Province.MakeScope).ScriptValue('distance_to_player')|0] [Province.Custom('county_direction_from_capital')]."
				raw_text = "[GuiScope.SetRoot(Province.MakeScope).ScriptValue('distance_to_army')|0] [Province.Custom('county_direction_from_army')]."
				visible = "[GetPlayer.MakeScope.Var('army_position').IsSet]"
				# layoutpolicy_horizontal = expanding
				# visible = "[Not(ObjectsEqual(HoldingView.GetProvince, GetPlayer.GetCapitalLocation))]"
			}

			text_single = {
				# raw_text = "[GuiScope.SetRoot(Province.MakeScope).ScriptValue('distance_to_player')|0] [Province.Custom('county_direction_from_capital')]."
				raw_text = "[GuiScope.SetRoot(Province.MakeScope).ScriptValue('distance_to_player')|0*] [Province.Custom('county_direction_from_capital')] from capital."
				visible = "[Not(GetPlayer.MakeScope.Var('army_position').IsSet)]"
				# layoutpolicy_horizontal = expanding
				# visible = "[Not(ObjectsEqual(HoldingView.GetProvince, GetPlayer.GetCapitalLocation))]"
			}

			text_single = {
				visible = no# "[InDebugMode]"
				raw_text = "X [Province.MakeScope.Var('pos_x').GetValue|0], Y [Province.MakeScope.Var('pos_y').GetValue|0]. "
			}

			# text_single = {
			# 	raw_text = "Capital,"
			# 	visible = "[Province.IsRealmCapital]"
			# }

			text_single = {
				raw_text = "Coastal,"
				visible = "[GetScriptedGui('is_coastal_county').IsShown( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End )]"
			}

			text_single = {
				raw_text = "Riverside,"
				visible = "[GetScriptedGui('is_riverside_county').IsShown( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End )]"
			}

			container = {
				visible = "[Not(GetScriptedGui('is_war_target').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End ))]"
				text_single = {
					raw_text = "Adjacent to a war goal,"
					visible = "[GetScriptedGui('adjacent_to_war_target').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End )]"
				}
			}

			text_single = {
				raw_text = "Fort level [Province.GetFortLevel],"
			}

			hbox = {
				visible = "[Not(Army.IsGathering)]"
				text_single = {
					raw_text = "Too large,"
					visible = "[GreaterThan_int32( Province.GetHolding.GetCurrentGarrisonSize, Army.GetComposition.GetCurrentNumberOfSoldiers)]"
				}
			}

			text_single = {
				raw_text = "garrison [Province.GetHolding.GetCurrentGarrisonSize],"
			}

			text_single = {
				visible = "[Province.HasSiege]"
				raw_text = "Sieged, [Province.GetSiege.GetProgress|0]%."
			}

			button_text = {
			    blockoverride "text" {
			        raw_text = "View county."
					align = left
					margin_left = -3
			    }
				blockoverride "bg" {

				}
				onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Province.GetId))]"
			}

			expand = { }
		}
	}
}

window = {
	name = "army_reorganization_window"
	size = { 900 700 }
	parentanchor = center
	layer = top

	attachto = {
		widgetid = "army_window"
		stackmode = top
		inherit_data_context = yes
	}

	using = Window_Background
	using = Window_Decoration_Spike

	using = Animation_ShowHide_Quick

	vbox = {
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "ARMY_REORGANIZATION"
			}

			blockoverride "button_close"
			{
				onclick = "[ArmyReorgWindow.Hide]"

			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 25 10 }

			widget = {
				size = { 300 100 }
				vbox = {
					name = "left"
					datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
					visible = "[DataModelHasItems( ArmyReorgWindow.GetLeftItems )]"

					vbox = {
						text_label_center = {
							name = "army_name"
							text = "[ArmyComposition.GetName]"
							layoutpolicy_horizontal = expanding
							default_format = "#high"
							using = Font_Size_Medium
							align = center
						}

						soldiers_and_quality_small = {
							layoutpolicy_horizontal = expanding
						}

						text_single = {
							name = "army_maintenance"
							text = "ARMY_REORG_LEFT_MAINTENANCE"
							layoutpolicy_horizontal = expanding
							align = center|nobaseline
						}
					}

					expand = {}
				}
			}

			divider_light = {
				layoutpolicy_vertical = expanding
			}

			widget = {
				size = { 300 100 }

				vbox = {
					name = "right"
					datacontext = "[ArmyReorgWindow.GetRightArmyComposition]"
					visible = "[DataModelHasItems( ArmyReorgWindow.GetRightItems )]"

					vbox = {
						text_label_center = {
							name = "army_name"
							text = "[ArmyComposition.GetName]"
							layoutpolicy_horizontal = expanding
							default_format = "#high"
							using = Font_Size_Medium
							align = center
						}

						soldiers_and_quality_small = {
							layoutpolicy_horizontal = expanding
						}

						text_single = {
							name = "army_maintenance"
							text = "ARMY_REORG_RIGHT_MAINTENANCE"
							layoutpolicy_horizontal = expanding
							align = center|nobaseline
						}
					}

					expand = {}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 20

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_empty"
				{
					visible = "[IsDataModelEmpty(ArmyReorgWindow.GetLeftItems)]"
					text = "REORG_EMPTY_LIST"
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						datamodel = "[ArmyReorgWindow.GetLeftItems]"
						layoutpolicy_horizontal = expanding
						spacing = 3

						item = {
							button_standard_list = {
								name = "regiment_item"
								layoutpolicy_horizontal = expanding
								size = { 0 50 }
								onclick = "[RegimentReorgEntry.MoveRegiment]"

								using = reorg_regiment_tooltips

								hbox = {
									margin_right = 5

									hbox_reorg_regiment_entry_core = {
										name = "info"
									}

									button_select_arrow = {
										alwaystransparent = yes
										size = { 20 20 }
									}
								}
							}
						}
					}
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_empty"
				{
					visible = "[IsDataModelEmpty(ArmyReorgWindow.GetRightItems)]"
					text = "REORG_EMPTY_LIST"
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						datamodel = "[ArmyReorgWindow.GetRightItems]"
						layoutpolicy_horizontal = expanding
						spacing = 3

						item = {
							button_standard_list = {
								name = "regiment_item"
								layoutpolicy_horizontal = expanding
								size = { 0 50 }
								onclick = "[RegimentReorgEntry.MoveRegiment]"

								using = reorg_regiment_tooltips
								blockoverride "levies_placement" {
									using = tooltip_es
								}
								blockoverride "maa_placement" {
									using = tooltip_es
								}
								blockoverride "knight_placement" {
									using = tooltip_es
								}
								blockoverride "vassal_placement" {
									using = tooltip_es
								}
								hbox = {
									margin_left = 5
									button_select_arrow = {
										alwaystransparent = yes
										size = { 20 20 }
										mirror = horizontal
									}

									hbox_reorg_regiment_entry_core = {
										name = "info"
									}
								}
							}
						}
					}
				}
			}

		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 0 15 }

			vbox = {
				name = "left_buttons"
				enabled = "[DataModelHasItems( ArmyReorgWindow.GetLeftItems )]"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				hbox = {
					spacing = 3

					button_standard = {
						name = "select"
						text = "SELECT"
						default_format = "#high"
						onclick = "[ArmyReorgWindow.SelectLeft]"
						tooltip = "SELECT_TOOLTIP"
					}

					button_round = {
						name = "disband_button"
						size = { 38 38 }

						enabled = "[ArmyReorgWindow.CanDisband]"
						tooltip = "DISBAND_TOOLTIP"

						button_army_disband = {
							parentanchor = center
							onclick = "[ArmyReorgWindow.DisbandLeft]"
						}
					}
				}
			}

			vbox = {
				name = "right_buttons"
				enabled = "[DataModelHasItems( ArmyReorgWindow.GetRightItems )]"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				hbox = {
					spacing = 3

					button_standard = {
						name = "select"
						text = "SELECT"
						default_format = "#high"
						onclick = "[ArmyReorgWindow.SelectRight]"
						tooltip = "SELECT_TOOLTIP"
					}

					button_round = {
						name = "disband_button"
						size = { 38 38 }

						enabled = "[ArmyReorgWindow.CanDisband]"
						tooltip = "DISBAND_TOOLTIP"

						button_army_disband = {
							parentanchor = center
							onclick = "[ArmyReorgWindow.DisbandRight]"
						}
					}
				}
			}
		}
	}
}

window = {
	name = "attach_to_army_window"
	size = { 600 700 }
	parentanchor = center
	layer = top

	attachto = {
		widgetid = "army_window"
		stackmode = top
		inherit_data_context = yes
	}

	using = Window_Background
	using = Window_Decoration_Spike

	using = Animation_ShowHide_Quick

	vbox = {
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "ATTACH_TO_ARMY_WINDOW_HEADER"
			}

			blockoverride "button_close"
			{
				onclick = "[AttachToArmyWindow.Hide]"
			}
		}

		text_multi = {
			text = "ATTACH_TO_ARMY_WINDOW_TEXT"
			layoutpolicy_horizontal = expanding
			align = center
			margin = { 10 0 }
			default_format = "#I"
		}

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = growing

			blockoverride "scrollbox_content"
			{

				vbox = {
					layoutpolicy_horizontal = expanding
					ignoreinvisible = yes
					spacing = 3

					datamodel = "[AttachToArmyWindow.AccessLocalUnits]"

					item = {
						button_standard_list = {
							name = "local_unit_item"
							layoutpolicy_horizontal = expanding
							size = { 0 50 }
							onclick = "[AttachToArmyWindow.SelectUnit( UnitItem.Self )]"
							down = "[AttachToArmyWindow.IsSelectedUnit( UnitItem.Self )]"

							hbox = {
								margin = { 10 0 }
								spacing = 10

								coa_realm_tiny = {
									datacontext = "[UnitItem.GetOwner]"
								}

								soldiers_and_quality_small = {
									datacontext = "[UnitItem.GetArmy.GetComposition]"
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "[UnitItem.GetArmy.GetNameNoTooltip]"
									default_format = "#clickable"
									align = nobaseline
									autoresize = no
								}

								expand = {}
							}
						}
					}
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin = { 10 0 }
			margin_bottom = 10

			spacer = {
				visible = "[Not(AttachToArmyWindow.HasSelectedUnit)]"
				size = { 10 10 }
			}

			text_multi = {
				layoutpolicy_horizontal = expanding
				visible = "[AttachToArmyWindow.HasSelectedUnit]"
				text = "ATTACH_TO_UNIT_WINDOW_TEXT"
				align = center
			}

			hbox = {
				spacing = 3

				button_standard = {
					name = "close_button"
					text = "CANCEL"
					align = center|nobaseline
					onclick = "[AttachToArmyWindow.Hide]"
				}

				button_primary = {
					name = "select_button"
					text = "ATTACH"
					align = center|nobaseline
					enabled = "[AttachToArmyWindow.HasSelectedUnit]"
					onclick = "[AttachToArmyWindow.AttachToSelected]"
					onclick = "[AttachToArmyWindow.Hide]"
					clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_unit_army_attach"
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################
template reorg_regiment_tooltips {
	hbox = {
		datacontext = "[RegimentReorgEntry.GetKnight]"
		visible = "[Character.IsValid]"

		block "knight_placement" {
			using = tooltip_ws
		}

		tooltipwidget = {
			container_character_tooltip = {
				blockoverride "interaction_info" {
					text = "REORG_INSTRUCTION"
				}
			}
		}
	}

	hbox = {
		datacontext = "[RegimentReorgEntry.GetRegiment.GetRegiment]"
		visible = "[RegimentReorgEntry.IsMaA]"

		block "maa_placement" {
			using = tooltip_ws
		}

		tooltipwidget = {
			using = regiment_container_tooltip

			blockoverride "extra_info" {
				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "REORG_INSTRUCTION"
					margin = { 10 0 }
				}
			}
		}
	}

	hbox = {
		datacontext = "[RegimentReorgEntry.GetRegiment.GetRegiment]"
		visible = "[And( Not( Or( RegimentReorgEntry.IsMaA, RegimentReorgEntry.GetKnight.IsValid ) ), RegimentReorgEntry.GetRegiment.GetFromVassal.IsValid )]"

		block "vassal_placement" {
			using = tooltip_ws
		}
		tooltip = TT_REORG_VASSAL_LEVIES
	}

	hbox = {
		datacontext = "[RegimentReorgEntry.GetRegiment.GetRegiment]"
		visible = "[And( Not( Or( RegimentReorgEntry.IsMaA, RegimentReorgEntry.GetKnight.IsValid ) ), Not( RegimentReorgEntry.GetRegiment.GetFromVassal.IsValid ) )]"

		block "levies_placement" {
			using = tooltip_ws
		}
		tooltip = TT_REORG_LEVIES
	}
}

types ArmyWindow
{
	type multi_unit_button = button {
		gfxtype = updownframedbuttongfx
		framesize = { 50 50 }
		onclick = "[SelectedUnitItem.OnClick]"
		onrightclick = "[SelectedUnitItem.OnRightClick]"
		button_ignore = none
		down = "[SelectedUnitItem.IsShown]"
		effectname = "NoHighlight"

		upframe = 1
		overframe = 2
		downframe = 3
	}

	type army_quality_icon = icon {
		name = "quality_icon"
		texture = "gfx/interface/icons/army_quality_icon.dds"
		framesize = { 32 32 }
		size = { 22 22 }
		frame = "[ArmyComposition.CalcQualityLevel]"
		tooltip = "[ArmyComposition.GetArmyQualityName|T]"
	}

	type unraised_army_quality_icon = icon {
		name = "quality_icon"
		texture = "gfx/interface/icons/army_quality_icon.dds"
		framesize = { 32 32 }
		size = { 22 22 }
		frame = "[ArmyComposition.CalcUnraisedQualityLevel]"
		tooltip = "[ArmyComposition.GetUnraisedArmyQualityName|T]"
	}

	type soldiers_and_quality_big = hbox {
		margin = { 0 2 }
		margin_right = 20
		spacing = 5

		vbox = {
			spacing = 2
			layoutpolicy_vertical = expanding

			hbox = {
				text_single = {
					name = "quality_label"
					raw_text = "[ArmyComposition.GetArmyQualityName]."
					tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
				}
				text_single = {
					raw_text = " [Subtract_int32(ArmyComposition.GetMaxNumberOfSoldiers, ArmyComposition.GetCurrentNumberOfSoldiers)] men missing."
					visible = "[GreaterThan_int32(ArmyComposition.GetMaxNumberOfSoldiers, ArmyComposition.GetCurrentNumberOfSoldiers)]"
				}
			}
		}
	}

	type soldiers_and_quality_small = hbox
	{
		margin = {5 5}
		spacing = 5

		tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"

		expand = {
			layoutpolicy_horizontal = expanding
		}

		icon = {
			name = "icon_soldier"
			texture = "gfx/interface/icons/icon_soldier.dds"
			size = { 30 30 }
		}

		vbox = {

			text_single = {
				name = "strength"
				text = "[ArmyComposition.GetSoldierCountString]"
				default_format = "#high"
				align = left|nobaseline
				using = Font_Size_Medium
			}

			progressbar_standard = {
				name = "soldiers_max"
				visible = "[And( NotEqualTo_int32(ArmyComposition.GetCurrentNumberOfSoldiers, ArmyComposition.GetMaxNumberOfSoldiers), NotEqualTo_int32(ArmyComposition.GetMaxNumberOfSoldiers, '(int32)0' ) )]"

				block "spacing"
				{
					size = { 50 8 }
				}

				min = 0
				max = "[IntToFloat(ArmyComposition.GetMaxNumberOfSoldiers)]"
				value = "[IntToFloat(ArmyComposition.GetCurrentNumberOfSoldiers)]"
			}
		}

		army_quality_icon = {
			tooltip_enabled = no
		}

		expand = {
			layoutpolicy_horizontal = expanding
		}
	}

	type hbox_reorg_regiment_entry_core = hbox
	{
		datacontext = "[RegimentReorgEntry.GetKnight]"
		datacontext = "[RegimentReorgEntry.GetRegiment]"

		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		margin = { 5 0 }
		spacing = 5

		hbox = {
			name = "icon"

			highlight_icon = {
				name = "men_at_arms_icon"
				datacontext = "[RegimentReorgEntry.GetMaAType]"
				visible = "[RegimentReorgEntry.IsMaA]"
				size = { 35 35 }
				texture = "[MenAtArmsType.GetIcon]"
			}

			highlight_icon = {
				name = "levies_icon"
				visible = "[Not( Or( RegimentReorgEntry.IsMaA, Character.IsValid ) )]"
				size = { 35 35 }
				texture = "gfx/interface/icons/icon_soldier.dds"
			}

			highlight_icon = {
				name = "knight_icon"
				visible = "[Character.IsValid]"
				size = { 35 35 }
				texture = "gfx/interface/icons/icon_knight_small.dds"
			}
		}

		text_single = {
			name = "name"
			layoutpolicy_horizontal = expanding
			text = "[RegimentReorgEntry.GetName]"
		}

		coa_realm_tiny = {
			name = "hired_coa"
			visible = "[RegimentReorgEntry.ShowCoA]"
			datacontext = "[RegimentReorgEntry.GetCoATitle.GetHolder]"
		}


		icon = {
			name = "event_troops"
			visible = "[ArmyRegiment.IsEventTroops]"
			texture = "gfx/interface/icons/icon_special_troops.dds"
			size = { 36 36 }
			tooltip = "TT_REORG_EVENT_TROOPS"
		}

		text_single = {
			name = "prowess"
			visible = "[Character.IsValid]"
			text = "[prowess_i][Character.GetSkill( 'prowess' )]"
			default_format = "#high"
		}

		vbox = {
			name = "soldiers"
			visible = "[Not( Character.IsValid )]"
			tooltip = "TT_REORG_SOLDIERS"

			text_single = {
				name = "soldiers"
				text = "[RegimentReorgEntry.GetSoldierCount]"
				default_format = "#high"
			}

			progressbar_standard = {
				name = "soldiers_max"
				# visible = "[NotEqualTo_int32(RegimentReorgEntry.GetMaxSoldierCount, RegimentReorgEntry.GetSoldierCount)]"
				size = { 50 10 }
				min = 0
				max = "[IntToFloat(RegimentReorgEntry.GetMaxSoldierCount)]"
				value = "[IntToFloat(RegimentReorgEntry.GetSoldierCount)]"
			}
		}
	}
}
