window = {
	name = "army_window"
	datacontext = "[ArmyWindow.GetArmy]"

	# parentanchor = bottom|left
	size = { 750 100% }
	filter_mouse = left|right
	movable = no
	# allow_outside = yes
	alwaystransparent = yes
	layer = middle

	state = {
		name = hide_army_window
		position = { -1500 0 }
	}
	state = {
		name = show_army_window
		# on_start = "[PdxGuiTriggerAllAnimations('pan_to_army')]"
		position = { 0 0 }
	}

	# dirty hack to get rid of errors generated by non-existent armies, appearing for a second
	# ideally need to find a way to get rid of them properly #TODO
	state = {
		name = monthly_tick
		on_finish = "[ExecuteConsoleCommand('Log.ClearErrorLog')]"
	}

	state = {
		name = refresh_first_army
		# on_start = "[PdxGuiTriggerAllAnimations('pan_to_army')]"

		on_start = "[GetScriptedGui('sort_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'location', Army.GetLocation.MakeScope ).End )]"
		on_start = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
		on_start = "[GetScriptedGui('raid_targets').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
		# on_start = "[GetScriptedGui('adjacent_counties').Execute( GuiScope.SetRoot( Army.GetLocation.GetCounty.GetTitle.MakeScope ).AddScope( 'player', GetPlayer.MakeScope).AddScope('target', Army.GetLocation.MakeScope).End )]"
		on_start = "[GetScriptedGui('find_resupply_place').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', Army.MakeScope ).End )]"
		# on_start = "[GetScriptedGui('army_holdings').Execute( GuiScope.SetRoot( Army.MakeScope ).AddScope( 'province', Army.GetLocation.MakeScope ).End )]"

		# on_start = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
		on_start = "[GetVariableSystem.Clear('war_selector')]"
		on_start = "[GetVariableSystem.Clear('sending_army')]"
		on_start = "[GetVariableSystem.Clear('sending_army_county')]"
		on_start = "[PdxGuiTriggerAllAnimations('show_army_window')]"
	}

	widget = {
		visible = "[And(IsGamePaused, Not(GetVariableSystem.Exists('ocr')))]"

		state = {
			trigger_on_create = yes
			name = daily_tick
			on_start = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"
		}
	}

	state = {
		trigger_on_create = yes
		on_start = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"
	}

	# using = Window_Background_No_Edge

	state = {
		name = _show
		on_start = "[GetVariableSystem.Set( 'county_view_open', 'true' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"
		on_start = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"

		# using = Animation_FadeIn_Standard
		alpha = 1
		using = Sound_WindowShow_Standard
		using = Animation_FadeIn_BottomLeft
	}

	state = {
		name = _hide
		on_start = "[GetVariableSystem.Clear( 'county_view_open' )]"
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"


		# using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
		using = Animation_FadeOut_BottomLeft
	}

	button = {
		onclick = "[ArmyWindow.CloseAndDeselect]"
		size = { 0 0 }
		shortcut = "close_window"
		visible = "[Not(GetVariableSystem.Exists('army_tabs'))]"
	}

	widget = {
		size = { 200 100% }

		widget = {
			size = { 750 100% }

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[Not(GetVariableSystem.Exists('ocr'))]"

				# all tabs
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					alwaystransparent = yes
					visible = "[Not(GetVariableSystem.Exists('war_selector'))]"

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						hbox = {
							layoutpolicy_horizontal = expanding
							background = { using = Background_Area_Border_Solid }
							visible = "[GetVariableSystem.Exists('hide_army_info')]"

							text_single = {
								margin_left = 10
								datacontext = "[Army.GetComposition]"
								raw_text = "[ArmyComposition.GetSoldierCountString] men,"
							}

							error_button = {
								shortcut = map_mode_6
							}

							expand = { }

						}


						# header
						vbox = {

							alwaystransparent = no
							margin_left = 10
							layoutpolicy_horizontal = expanding
							background = { using = Background_Area_Border_Solid }

							error_button = {
								layoutpolicy_horizontal = expanding
								shortcut = map_mode_6
							}


							# multi unit header
							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
								margin_left = 5

								hbox = {
									layoutpolicy_horizontal = expanding
									margin_top = 2

									text_single = {
										align = left
										visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
										name = "strength"
										tooltip = "[ArmyWindow.GetAllArmiesCompositionString]"
										raw_text = "[GetDataModelSize(ArmyWindow.GetSelectedUnitItems)] armies selected, total soldiers: [ArmyWindow.GetTotalSoldierCountString]."
									}

									hbox = {
										visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
										button_text = {
											blockoverride "text" {
												raw_text = "Merge, hotkey G."
											}
											blockoverride "disabled" {
												visible = "[Not(ArmyWindow.CanMerge)]"
												tooltip = "[ArmyWindow.BuildMergeTooltip]"
											}
											onclick = "[ArmyWindow.MergeSelected]"
											onclick = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"
											shortcut = "army_merge"
										}

										button_text = {
											blockoverride "text" {
												raw_text = "Reorganize, hotkey Y."
											}
											blockoverride "disabled" {
												visible = "[Not(ArmyWindow.CanReorgSelected)]"
												tooltip = "[ArmyWindow.BuildReorgTooltip]"
											}
											onclick = "[ArmyWindow.ToggleReorganizationWindow]"
											enabled = "[ArmyWindow.CanReorgSelected]"
											shortcut = map_mode_4
										}
									}

									expand = { }
								}

								hbox = {
									visible = "[Not(GetVariableSystem.Exists('hide_army_info'))]"
									layoutpolicy_horizontal = expanding

									text_single = {
										raw_text = "Armies: "
									}

									dynamicgridbox = {
										layoutpolicy_horizontal = expanding
										name = "banner_items_grid"
										datamodel = "[ArmyWindow.GetSelectedUnitItems]"
										visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
										datamodel_wrap = 8
										flipdirection = yes

										item = {
											button_text = {
												blockoverride "text" {
													raw_text = "[SelectedUnitItem.GetArmy.GetSoldierCount|*],"
													align = left
												}
												# blockoverride "extra" {
												# 	text_single = {
												# 		raw_text = " selected."
												# 		visible = "[SelectedUnitItem.IsShown]"
												# 	}
												# }
												onclick = "[PdxGuiTriggerAllAnimations('army_change')]"
												onrightclick = "[SelectedUnitItem.OnRightClick]"
												down = "[SelectedUnitItem.IsShown]"

												state = {
													name = _mouse_click
													delay = 0.2
													on_finish = "[SelectedUnitItem.OnClick]"
												}
												tooltip = "[SelectedUnitItem.GetTooltip]"
												using = tooltip_ne
											}
										}
									}
								}
								## Armies flag
							}

							# header
							vbox = {
								visible = "[Not(GetVariableSystem.Exists('hide_army_info'))]"
								layoutpolicy_horizontal = expanding

								# name
								hbox = {
									layoutpolicy_horizontal = expanding

									spacing = 3

									text_single = {
										raw_text = "Selected:"
										visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
									}

									text_single = {
										name = "strength"
										datacontext = "[Army.GetComposition]"
										raw_text = "[ArmyComposition.GetSoldierCountString] men,"
									}

									hbox = {
										visible = "[Not(GetVariableSystem.Exists('army_details'))]"

										text_single = {
											visible = "[Army.GetLocation.GetTitle.IsValid]"
											raw_text = "In [Army.GetLocation.GetCounty.GetTitle.GetNameNoTierNoTooltip], [Army.GetLocation.GetTerrain.GetName] of"
										}

										text_single = {
											raw_text = " [Army.GetLocation.GetNameNoTooltip]."
										}
									}


									text_single = {
										name = "name"
										raw_text = "[Army.GetNameNoTooltip]."
										max_width = 500
									}

									text_single = {
										raw_text = "Led by you."
										visible = "[Army.GetCommander.IsLocalPlayer]"
									}

									text_single = {
										datacontext = "[Army.GetCommander]"
										# visible = "[And(Character.IsValid, Not(GetVariableSystem.Exists('army_details')))]"
										tooltip = "[Character.GetCommanderAdvantageDesc]"
										raw_text = "[Character.GetCommanderAdvantage] advantage."
									}

									expand = { }
								}

								hbox = {
									layoutpolicy_horizontal = expanding

									hbox = {
										spacing = 3
										visible = "[Army.IsGathering]"

										text_single = {
											visible = "[Not(ArmyWindow.CanStopGathering)]"
											raw_text = "[ArmyWindow.GetUnitItem.GetStatusDescription],"
										}

										button_text = {
											blockoverride "pre" {
												spacing = 3
												text_single = {
													raw_text = "[ArmyWindow.GetUnitItem.GetStatusDescription],"
												}
											}
											blockoverride "text" {
												raw_text = "STOP_GATHERING"
											}
											blockoverride "dot" {

											}
											visible = "[ArmyWindow.CanStopGathering]"
											onclick = "[ArmyWindow.StopGathering]"
										}
									}

									hbox = {
										name = "loot"
										visible = "[Army.IsRaidArmy]"
										tooltip = "ARMY_RAID_LOOT_TOOLTIP"

										text_single = {
											raw_text = "Loot:"
										}

										text_single = {
											raw_text = " "
										}

										text_single = {
											name = "loot"
											raw_text = "[Army.GetRaidLoot|0] out of [Army.GetLootCap|0]."
										}
									}

									expand = { }
								}

								# distance
								button_text = {
									layoutpolicy_horizontal = expanding
									datacontext = "[GetPlayer.GetCapitalLocation]"
									visible = "[Not(ObjectsEqual(Army.GetLocation.GetId, GetPlayer.GetCapitalLocation.GetId))]"
									using = send_army_click
									blockoverride "pre" {
										spacing = 3
										text_single = {
											raw_text = "ArmyDistance"
										}

										text_single = {
											raw_text = "[GuiScope.SetRoot(GetPlayer.GetCapitalLocation.MakeScope).AddScope('second', Army.GetLocation.MakeScope).Custom('province_direction')] from capital. Click to go back."
										}
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding

									#TODO
									text_single = {
										raw_text = "In your capital."
										visible = "[ObjectsEqual(Army.GetLocation.GetId, GetPlayer.GetCapitalLocation.GetId)]"
									}

									expand = { }
								}

								# siege
								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[Not(Army.IsEmbarked)]"

									button_group = {
										layoutpolicy_horizontal = expanding
										name = "open_siege_button"
										datacontext = "[Army.GetLocation.GetSiege]"
										visible = "[And(Army.GetLocation.HasActiveSiege, Not(Army.IsSieging))]"
										onclick = "[DefaultOnSiegeClick(Siege.GetID)]"
										tooltip = "[Siege.GetSiegeDescription]"
										using = tooltip_se
										# shortcut = confirm
										shortcut = confirm
										using = siege_goto_template
										blockoverride "key" {
											shortcut = confirm
										}
										blockoverride "extra" {
											spacing = 3
											text_single = {
												raw_text = "hotkey Enter."
											}
											text_single = {
												raw_text = "[Siege.GetSiegingRealmCharacter.GetNameNoTooltip]."
											}
										}
									}

								}

								# warnings
								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 3

									hbox = {
									    layoutpolicy_horizontal = expanding

										visible = "[Army.IsRecentlyDisembarked]"
									    text_single = {
									    	text = "[Army.GetEmbarkInfoForTooltip]"
									    }

									    expand = { }
									}

									hbox = {
										tooltip = "ARMY_ATTRITION_TT"
										spacing = 3

										visible = "[GreaterThan_CFixedPoint(Army.GetArmyAttritionPercentage, '(CFixedPoint)0.03')]"

										text_single = {
											raw_text = "[Army.GetArmyAttritionPercentage|%0-]"
										}

										text_single = {
											raw_text = "attrition,"
										}
									}

									button_text = {
										visible = "[Not(Army.GetCommander.IsValid)]"
										blockoverride "text" {
											raw_text = "Assign commander!"
										}
										blockoverride "disabled" {
											visible = "[Not(ArmyWindow.CanShowCommanders)]"
										}
										enabled = "[ArmyWindow.CanShowCommanders]"
										onclick = "[ArmyWindow.ShowCommanders]"
									}

									hbox = {
										visible = "[Not(GetVariableSystem.Exists('army_tabs'))]"
										tooltip = "[Army.GetSupplyStateTooltip]"
										text_single = {
											visible = "[EqualTo_int32(ArmyWindow.GetSupplyStateFrame, '(int32)3')]"
											raw_text = "SUPPLY_STATE_2"
										}

										text_single = {
											visible = "[EqualTo_int32(ArmyWindow.GetSupplyStateFrame, '(int32)2')]"
											raw_text = "SUPPLY_STATE_1"
										}

										# text_single = {
										# 	visible = "[EqualTo_int32(ArmyWindow.GetSupplyStateFrame, '(int32)1')]"
										# 	raw_text = "SUPPLY_STATE_0"
										# }
										hbox = {
											visible = "[GreaterThan_int32(ArmyWindow.GetSupplyStateFrame, '(int32)1')]"
											text_single = {
												raw_text = ", [ArmyWindow.GetCurrentSupply]"
											}

											text_single = {
												visible = "[GreaterThan_int32(ArmyWindow.GetFullSupplyCapacity, ArmyWindow.GetCurrentSupply)]"
												raw_text = " out of [ArmyWindow.GetFullSupplyCapacity] supplies."
											}
										}
									}

									expand = { }
								}

								# order
								hbox = {
									margin_bottom = 5
									spacing = 3
									layoutpolicy_horizontal = expanding

									# text_single = {
									# 	visible = "[ArmyWindow.GetUnitItem.IsMovementLocked]"
									# 	raw_text = "[movement_locked|E]"
									# }

									text_single = {
										visible = "[And(Not(Or(Army.IsGathering, Army.IsRetreating)), Not(Army.IsEmbarked))]"
										name = "status_text"
										raw_text = "[ArmyWindow.GetUnitItem.GetStatusDescription],"
									}

									text_single = {
										visible = "[And(Army.IsMoving, Army.IsGathering)]"
										raw_text = "Will move to"
									}

									container = {
										ignoreinvisible = yes
										visible = "[Not(GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End ))]"
										text_single = {
											raw_text = "Retreating to"
											visible = "[And(Army.IsRetreating, Not(Army.IsEmbarked))]"
										}
									}

									text_single = {
										raw_text = "Sailing to"
										visible = "[And(Army.IsEmbarked, Army.IsMoving)]"
									}


									text_single = {
										visible = "[And(Army.IsMoving, Not(GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End )))]"
										raw_text = "to [Army.GetMovementInfoForTooltip]."
									}

									container = {
										name = "open_raid_button"
										visible = "[Army.IsTakingRaidAction]"
										datacontext = "[Army.GetRaid]"
										using = raid_goto_template
										blockoverride "key" {
											shortcut = confirm
										}
										blockoverride "extra" {
											text_single = {
												raw_text = " hotkey Enter"
											}
										}
									}

									vbox = {
										name = "open_siege_button"
										visible = "[Army.IsSieging]"
										datacontext = "[Army.GetLocation.GetSiege]"
										using = siege_goto_template
										blockoverride "key" {
											shortcut = confirm
										}
										blockoverride "extra" {
											text_single = {
												raw_text = " hotkey Enter"
											}
										}
									}

									expand = { }
								}

								# attached
								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[Not(GetVariableSystem.Exists('army_tabs'))]"

									text_single = {
										layoutpolicy_horizontal = expanding
										name = "attached_to_name"
										visible = "[ArmyWindow.IsAttachedToAnyUnit]"
										datacontext = "[ArmyWindow.GetAttachedToArmy]"
										raw_text = "Following [Army.GetName], [Army.GetOwner.GetPrimaryTitle.GetNameNoTierNoTooltip]."
									}

									button_text = {
										layoutpolicy_horizontal = expanding
										name = "detach_from_unit_button"
										visible = "[ArmyWindow.IsAttachedToAnyUnit]"
										enabled = "[ArmyWindow.CanDetachFromUnit]"
										tooltip_enabled = "[Not(ArmyWindow.CanDetachFromUnit)]"
										tooltip = "[ArmyWindow.BuildDetachFromUnitTooltip]"
										onclick = "[ArmyWindow.DetachFromUnit]"
										blockoverride "text" {
											raw_text = "Detach unit"
											align = left
										}
										blockoverride "extra" {
											text_single = {
												raw_text = ", disabled"
												visible = "[Not(ArmyWindow.CanDetachFromUnit)]"
											}
										}
										blockoverride "dot" { }
									}
								}

								text_single = {
									state = {
										name = _show
										start_sound = {
											soundeffect = "event:/SFX/UI/Unit/Army/sfx_ui_unit_army_attach"
										}
										on_start = "[PdxGuiTriggerAllAnimations('pan_to_army')]"
									}
									layoutpolicy_horizontal = expanding
									raw_text = "Army moved!"
									visible = "[ObjectsEqual( GetPlayer.MakeScope.Var('army_moved').Army, Army.Self)]"
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[Not(Or(GetVariableSystem.Exists('army_tabs'), Not(GetVariableSystem.Exists('army_details'))))]"

									# supply
									#TODO
									hbox = {
										# visible = no#"[Not(GetVariableSystem.Exists('army_tabs'))]"
										layoutpolicy_horizontal = expanding
										visible = "[GetVariableSystem.HasValue('army_tabs', 'info')]"

										hbox = {
											tooltip = "ARMY_ATTRITION_TT"
											spacing = 3

											visible = "[GreaterThan_CFixedPoint(Army.GetArmyAttritionPercentage, '(CFixedPoint)0')]"

											text_single = {
												raw_text = "Attrition:"
											}

											text_single = {
												name = "attrition"
												raw_text = "[Army.GetArmyAttritionPercentage|%0-]."
											}
										}

										hbox = {
											name = "supplies"
											tooltip = "[Army.GetSupplyStateTooltip]"

											text_single = {
												raw_text = "Supply:"
											}

											text_single = {
												raw_text = " "
											}

											text_single = {
												name = "supply_text"
												raw_text = "[ArmyWindow.GetCurrentSupply]"
											}

											text_single = {
												visible = "[GreaterThan_int32(ArmyWindow.GetFullSupplyCapacity, ArmyWindow.GetCurrentSupply)]"
												raw_text = " out of [ArmyWindow.GetFullSupplyCapacity]"
											}

											text_single = {
												visible = "[EqualTo_int32(ArmyWindow.GetFullSupplyCapacity, ArmyWindow.GetCurrentSupply)]"
												raw_text = ", full"
											}

											text_single = {
												raw_text = ", decreasing"
												visible = "[ArmyWindow.ShowSupplyTrend]"
											}

											dot = { }

										}

										space = { }

										text_single = {
											visible = "[Not(Army.IsEmbarked)]"
											raw_text = "Supply limit here: [Army.GetLocation.GetSupplyLimitFor( GetPlayer )]."
										}

										expand = { }
									}

									# select one unit
									button_text = {
										layoutpolicy_horizontal = expanding
										blockoverride "text" {
											raw_text = "Click to select only this unit."
										}
										onclick = "[ArmyWindow.SelectThisUnitOnly]"
										visible = "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
									}

									# UNUSED?
									button = {
										name = "select_this_only"
										visible = no# "[GreaterThan_int32(GetDataModelSize(ArmyWindow.GetSelectedUnitItems), '(int32)1')]"
										layoutpolicy_horizontal = expanding
										minimumsize = { 0 48  }
										onclick = "[ArmyWindow.SelectThisUnitOnly]"

										tooltip = "ARMY_SELECT_THIS_ONLY"

										state = {
											name = "army_change"
											alpha = 0
											duration = 0.2
											next = "b"
											using = Animation_Curve_Default
										}

										state = {
											name = "b"
											alpha = 1
											duration = 0.2
											using = Animation_Curve_Default
										}

										### name ###
										hbox = {
											margin_left = 10
											margin_right = 20

											spacing = 5

											background = {
												margin_left = 15
												margin_right = -6
												using = Background_Area_Dark
											}

											hbox = {
												layoutpolicy_vertical = expanding
												spacing = 5

												text_single = {
													name = "name"
													text = "[Army.GetNameNoTooltip]"
													align = left
													using = Font_Size_Medium
													max_width = 600
												}

												button_select_arrow = {
													alwaystransparent = yes
													size = { 20 20 }
												}
											}

											expand = { }

											hbox = {
												name = "loot"
												visible = "[Army.IsRaidArmy]"
												tooltip = "ARMY_RAID_LOOT_TOOLTIP"

												icon = {
													name = "loot_icon"
													size = { 35 35 }
													texture = "gfx/interface/icons/icon_gold.dds"
												}

												text_single = {
													name = "loot"
													text = "[Army.GetRaidLoot|0]/[Army.GetLootCap|0]"
												}
											}

											hbox = {
												tooltip = "ARMY_ATTRITION_TT"

												icon = {
													texture = "gfx/interface/icons/map_icons/attrition_icon.dds"
													size = { 35 35 }
												}

												text_single = {
													name = "attrition"
													text = "[Army.GetArmyAttritionPercentage|%0-]"
												}
											}

											hbox = {
												name = "supplies"
												tooltip = "[Army.GetSupplyStateTooltip]"

												icon = {
													name = "supply_icon"
													size = { 40 40 }
													framesize = { 60 60 }
													frame = "[ArmyWindow.GetSupplyStateFrame]"
													texture = "gfx/interface/icons/icon_supplies.dds"
												}

												icon = {
													name = "supply_trend_icon"
													size = { 25 25 }
													visible = "[ArmyWindow.ShowSupplyTrend]"
													texture = "gfx/interface/icons/symbols/icon_supplies_trend.dds"
												}

												text_single = {
													name = "supply_text"
													text = "[ArmyWindow.GetCurrentSupply]/[ArmyWindow.GetFullSupplyCapacity]"
													minimumsize = { 60 0 }
													align = right
												}
											}
										}
									}

									widget = {
										size = { 0 5 }
									}

									# location
									hbox = {
										layoutpolicy_horizontal = expanding


										hbox = {
											visible = "[Not(ObjectsEqual(Army.GetLocation.GetId, GetPlayer.GetCapitalLocation.GetId))]"
											spacing = 3

											text_single = {
												visible = "[Army.GetLocation.GetCounty.GetTitle.IsValid]"
												raw_text = "In [Army.GetLocation.GetCounty.GetTitle.GetNameNoTierNoTooltip],"
											}

											text_single = {
												visible = "[Not(Army.IsEmbarked)]"
												raw_text = "[Army.GetLocation.GetTerrain.GetName] of"
											}

											text_single = {
												raw_text = "[Army.GetLocation.GetNameNoTooltip],"
											}

											text_single = {
												visible = "[Not(Army.IsEmbarked)]"
												raw_text = "[Army.GetLocation.GetCounty.GetTitle.GetHolder.GetTopLiege.GetPrimaryTitle.GetNameNoTierNoTooltip]."
											}
											# text_single = {
											# 	raw_text = "ArmyDistance"
											# }
											#
											# text_single = {
											# 	margin_left = 2
											# 	raw_text = "[GuiScope.SetRoot(GetPlayer.GetCapitalLocation.MakeScope).AddScope('second', Army.GetLocation.MakeScope).Custom('province_direction')] from your capital."
											# }
										}

										fixedgridbox = {
											datamodel = "[ArmyWindow.GetSelectedUnitItems]"
											maxverticalslots = 1
											addrow = 22
											addcolumn = 200

											item = {
												button_text = {
													blockoverride "text" {
														raw_text = "Pan camera, Shift Q."
														align = left
													}
													onclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
													onclick = "[SelectedUnitItem.OnRightClick]"
													shortcut = map_mode_9
												}
											}
										}

										expand = { }
									}
								}
							}
						}

						vbox = {
							alwaystransparent = no
							margin_left = 10
							margin_bottom = 5
							margin_top = 5
							background = { using = Background_Area_Border_Solid margin_bottom = 20 }
							layoutpolicy_horizontal = expanding
							visible = "[Not(GetVariableSystem.Exists('mini_army'))]"
							# visible = no

							# active tab
							button_text = {
								visible = "[GetVariableSystem.Exists('army_tabs')]"
								layoutpolicy_horizontal = expanding
								shortcut = close_window
								onclick = "[GetVariableSystem.Clear('army_tabs')]"

								blockoverride "extra" {
									text_single = {
										raw_text = "Showing"
									}

									text_single = {
										raw_text = " [Select_CString(Army.IsRaidArmy, 'raid', 'siege')]"
										visible = "[GetVariableSystem.HasValue('army_tabs', 'targets')]"
									}

									text_single = {
										raw_text = " [Select_CString(GetScriptedGui('army_sorting').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ), 'strongest', 'closest')]"
										visible = "[GetVariableSystem.HasValue('army_tabs', 'armies')]"
									}

									text_single = {
										raw_text = " [GetVariableSystem.Get('army_tabs')]"
									}

									text_single = {
										raw_text = ", grouped by [GetPlayer.Custom('army_grouping')]"
										visible = "[GetVariableSystem.HasValue('army_tabs', 'armies')]"
									}

									text_single = {
										visible = "[GetVariableSystem.HasValue('army_tabs', 'holdings')]"
										raw_text = " in [GetVariableSystem.Get('army_county')]"
									}

									container = {
										visible = no
										# visible = "[Or(GetVariableSystem.HasValue('army_tabs', 'targets'), GetVariableSystem.HasValue('army_tabs', 'armies'))]"

										text_single = {
											visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_wars')), '(int32)1')]"
											raw_text = " in war against [GetPlayer.MakeScope.Var('selected_war').War.GetPrimaryPlayerEnemy.GetPrimaryTitle.GetNameNoTierNoTooltip]"
										}
									}

									text_single = {
										raw_text = ". Close, escape."
									}
								}
							}

							button_text = {
								visible = "[Not(GetVariableSystem.Exists('army_tabs'))]"
								layoutpolicy_horizontal = expanding
								onclick = "[GetVariableSystem.Set('army_tabs', 'info')]"
								onclick = "[GetScriptedGui('find_resupply_place').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', Army.MakeScope ).End )]"
								shortcut = speed_1
								blockoverride "text" {
									raw_text = "All army info, hotkey 1."
								}
							}

							# text_single = {
							# 	layoutpolicy_horizontal = expanding
							# 	raw_text = "[GetPlayer.MakeScope.ScriptValue('num_of_wars')] wars"
							# }
							#
							# text_single = {
							# 	layoutpolicy_horizontal = expanding
							# 	raw_text = "[GetPlayer.MakeScope.ScriptValue('num_of_primary_enemies')] enemies"
							# }

							vbox = {
								visible = "[Not(GetVariableSystem.Exists('army_tabs'))]"
								layoutpolicy_horizontal = expanding
								margin = { 0 20 }

								spacing = 10



								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "Overview."
								}

								vbox = {
									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding
										visible = "[Not(Army.IsEmbarked)]"

										text_single = {
											raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).AddScope( 'county', Army.GetLocation.GetCounty.GetTitle.MakeScope ).ScriptValue('enemies_total_nearby')] enemies nearby."
											visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope( 'county', Army.GetLocation.GetCounty.GetTitle.MakeScope ).ScriptValue('enemies_total_nearby'), '(CFixedPoint)0')]"
										}

										expand = { }
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										visible = "[Army.IsEmbarked)]"

										text_single = {
											raw_text = "[Army.MakeScope.ScriptValue('enemies_total_nearby_sea')] enemies nearby."
											visible = "[GreaterThan_CFixedPoint( Army.MakeScope.ScriptValue('enemies_total_nearby_sea'), '(CFixedPoint)0')]"
										}

										expand = { }
									}

									# allies
									hbox = {
									    layoutpolicy_horizontal = expanding
										visible = "[Not(Army.IsEmbarked)]"

										text_single = {
											layoutpolicy_horizontal = expanding
											raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).AddScope( 'county', Army.GetLocation.GetCounty.GetTitle.MakeScope ).AddScope( 'army', Army.MakeScope ).ScriptValue('allies_total_nearby')] allies nearby."
											visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope( 'county', Army.GetLocation.GetCounty.GetTitle.MakeScope ).AddScope( 'army', Army.MakeScope ).ScriptValue('allies_total_nearby'), '(CFixedPoint)0')]"
										}

									    expand = { }
									}

									hbox = {
									    layoutpolicy_horizontal = expanding
										visible = "[Army.IsEmbarked]"

										text_single = {
											layoutpolicy_horizontal = expanding
											raw_text = "[Army.MakeScope.ScriptValue('allies_total_nearby_sea')|0] allies nearby."
											visible = "[GreaterThan_CFixedPoint(Army.MakeScope.ScriptValue('allies_total_nearby_sea'), '(CFixedPoint)0')]"
										}

									    expand = { }
									}


									vbox = {
										layoutpolicy_horizontal = expanding
										visible = "[GetPlayer.MakeScope.Var('closest_enemy').IsSet]"
										text_single = {
											layoutpolicy_horizontal = expanding
											raw_text = "Closest enemy."
										}

										# army itself
										button_text = {
											# shortcut = character_finder
											datacontext = "[GetPlayer.MakeScope.Var('closest_enemy').Army]"
											datacontext = "[Army.GetLocation]"

											layoutpolicy_horizontal = expanding
											using = send_army_click
											enabled = "[Not(GetScriptedGui('is_army_in_the_fog').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'army', Army.MakeScope ).End ))]"

											blockoverride "text" {
												raw_text = " led by [Army.GetOwner.GetPrimaryTitle.GetNameNoTierNoTooltip],"
											}
											blockoverride "pre" {
												flowcontainer = {
													datacontext = "[ArmyWindow.GetArmy.GetLocation]"
													spacing = 3
													ignoreinvisible = yes

													flowcontainer = {
														ignoreinvisible = yes
														spacing = 3
														visible = "[Not(ObjectsEqual(Army.GetLocation.GetId, Province.GetId))]"

														text_single = {
															raw_text = "Hiding"
															visible = "[GetScriptedGui('is_army_in_the_fog').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'army', Army.MakeScope ).End )]"
														}

														text_single = {
															visible = "[Not(GetScriptedGui('is_army_in_the_fog').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'army', Army.MakeScope ).End ))]"
															raw_text = "[GuiScope.SetRoot(Province.MakeScope).AddScope('saved_distance', MakeScopeValue(GuiScope.SetRoot(Province.MakeScope).AddScope('second', Army.GetLocation.MakeScope).ScriptValue('province_distance'))).Custom('ProvinceDistance')]"
														}

														text_single = {
															raw_text = "[GuiScope.SetRoot( Province.MakeScope).AddScope('second', Army.GetLocation.MakeScope).Custom('province_direction')],"
														}
													}

													text_single = {
														raw_text = "Here."
														visible = "[ObjectsEqual(Army.GetLocation.GetId, Province.GetId)]"
													}

													# text_single = {
													# 	raw_text = "[Army.GetSoldierCountString] men,"
													# 	# visible = "[EqualTo_CFixedPoint(Army.MakeScope.Var('armies').GetValue,]"
													# 	visible = "[Not(Army.MakeScope.Var('armies').IsSet)]"
													# }

													text_single = {
														raw_text = "[GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', Army.GetLocation.MakeScope).ScriptValue('enemies_in_the_province')] men,"
													}

													# text_single = {
													# 	raw_text = "[Army.MakeScope.Var('army_strength').GetValue|0] men,"
													# 	visible = "[Army.MakeScope.Var('armies').IsSet]"
													# }

													text_single = {
														raw_text = "Raiders, "
														visible = "[Army.IsRaidArmy]"
													}
												}
											}

											blockoverride "extra" {
												flowcontainer = {
													ignoreinvisible = yes
													visible = "[Not(GetScriptedGui('is_army_in_the_fog').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'army', Army.MakeScope ).End ))]"

													text_single = {
														raw_text = " in"
													}

													text_single = {
														visible = "[Not(Army.IsEmbarked)]"
														raw_text = " [Army.GetLocation.GetTerrain.GetNameNoTooltip] of"
													}

													text_single = {
														raw_text = " [Army.GetLocation.GetNameNoTooltip]."
													}
												}
											}
										}
										# orders
										button_text = {
											visible = "[Not(GetScriptedGui('is_army_in_the_fog').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'army', Army.MakeScope ).End ))]"
											datacontext = "[GetPlayer.MakeScope.Var('closest_enemy').Army]"
											datacontext = "[Army.GetLocation]"

											layoutpolicy_horizontal = expanding
											using = send_army_click
											enabled = "[Not(GetScriptedGui('is_army_in_the_fog').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'army', Army.MakeScope ).End ))]"

											blockoverride "extra" {
												flowcontainer = {
													ignoreinvisible = yes
													spacing = 3

													text_single = {
														raw_text = "Moving to"
														visible = "[And(And(And(Army.IsMoving, Not(Army.IsEmbarked)), Not(GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End ))), Not(Army.IsRetreating))]"
													}

													container = {
														ignoreinvisible = yes
														visible = "[Not(GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End ))]"
														text_single = {
															raw_text = "Retreating to"
															visible = "[And(Army.IsRetreating, Not(Army.IsEmbarked))]"
														}
													}

													text_single = {
														raw_text = "Sailing to"
														visible = "[And(Army.IsEmbarked, Army.IsMoving)]"
													}


													text_single = {
														raw_text = "[Army.GetMovementInfoForTooltip]. View tooltip to pan there."
														visible = "[And(Army.IsMoving, Not(GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End )))]"
														max_width = 480
														fontsize_min = 14
													}
												}
											}

											text_single = {
												raw_text = "[Army.GetMovementInfoForTooltip]"
												alpha = 0
												alwaystransparent = yes
											}
										}
									}

									# [GetDataModelSize(GetPlayer.MakeScope.GetList('all_enemies'))]
									#TODO hide the number if less than 2
									#TODO hide in the fog of war
									# army_button_o = {
									# 	datacontext = "[GetPlayer.MakeScope.Var('closest_enemy').Army]"
									# 	blockoverride "hide_at_capital" {
									# 	}
									# 	blockoverride "army_window_show" {
									# 	}
									# 	blockoverride "fog" {
									# 		visible = no
									# 	}
									# 	blockoverride "distance" {
									# 		datacontext = "[ArmyWindow.GetArmy.GetLocation]"
									# 		text_single = {
									# 			raw_text = "[GuiScope.SetRoot(Province.MakeScope).AddScope('saved_distance', MakeScopeValue(GuiScope.SetRoot(Province.MakeScope).AddScope('second', Army.GetLocation.MakeScope).ScriptValue('province_distance'))).Custom('ProvinceDistance')]"
									# 		}
									#
									# 		text_single = {
									# 			raw_text = " [GuiScope.SetRoot( Province.MakeScope).AddScope('second', Army.GetLocation.MakeScope).Custom('province_direction')],"
									# 		}
									# 	}
									# }

									text_single = {
										layoutpolicy_horizontal = expanding
										visible = "[GreaterThan_CFixedPoint(GetPlayer.MakeScope.ScriptValue('enemies_total'), '(CFixedPoint)0')]"
										raw_text = "Total enemies, [GetPlayer.MakeScope.ScriptValue('enemies_total')]."
									}

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "No enemies detected."
										visible = "[Not(GetPlayer.MakeScope.Var('closest_enemy').IsSet)]"
									}

									button_text = {
										# visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('all_enemies')), '(int32)1')]"
										layoutpolicy_horizontal = expanding
										onclick = "[GetVariableSystem.Set('army_tabs', 'armies')]"
										shortcut = speed_2

										blockoverride "text" {
											raw_text = "View all armies, hotkey 2."
											# [GetPlayer.MakeScope.ScriptValue('enemies_total')] enemies total.
											# [GetPlayer.MakeScope.ScriptValue('armies_total')]
										}
									}
								}


								vbox = {
									layoutpolicy_horizontal = expanding

									# visible = "[GetPlayer.IsAtWar]"

									vbox = {
										layoutpolicy_horizontal = expanding
										visible = "[GetPlayer.MakeScope.Var('closest_hostile_county').IsSet]"

										hbox = {
											layoutpolicy_horizontal = expanding

											text_single = {
												raw_text = "Closest hostile fort,"
											}

											text_single = {
												raw_text = ", war target"
												visible = "[ObjectsEqual( GetPlayer.MakeScope.Var('closest_hostile_war_target').Province, GetPlayer.MakeScope.Var('closest_hostile_county').Province )]"
											}

											# text_single = {
											# 	raw_text = ", F."
											# }

											expand = { }
										}

										hostile_fort_item = {
											# shortcut = army_split_half
											datacontext = "[GetPlayer.MakeScope.Var('closest_hostile_county').Province]"
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										visible = "[And(GetPlayer.MakeScope.Var('closest_hostile_war_target').IsSet, Not( ObjectsEqual( GetPlayer.MakeScope.Var('closest_hostile_war_target').Province, GetPlayer.MakeScope.Var('closest_hostile_county').Province ) ))]"

										text_single = {
											layoutpolicy_horizontal = expanding
											raw_text = "Closest war target,"
										}

										hostile_fort_item = {
											datacontext = "[GetPlayer.MakeScope.Var('closest_hostile_war_target').Province]"
										}
									}

									text_single = {
										visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('war_targets'))]"
										layoutpolicy_horizontal = expanding
										raw_text = "Your side controls [GetDataModelSize(GetPlayer.MakeScope.GetList('captured_war_targets'))] out of [GetDataModelSize(GetPlayer.MakeScope.GetList('war_targets'))] war targets."
									}

									button_text = {
										visible = "[Not(Army.IsRaidArmy)]"
										layoutpolicy_horizontal = expanding
										onclick = "[GetVariableSystem.Set('army_tabs', 'targets')]"
										shortcut = speed_3

										blockoverride "text" {
											raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('all_forts'))] hostile forts. View all, hotkey 3."
										}
									}

									# text_single = {
									# 	layoutpolicy_horizontal = expanding
									# 	raw_text = "No hostile counties."
									# 	visible = "[Not(GetPlayer.MakeScope.Var('closest_hostile_county').IsSet)]"
									# }
								}


								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[GetPlayer.MakeScope.Var('enemy_capital').IsSet]"

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "[AddTextIf( GreaterThan_CFixedPoint(GetPlayer.MakeScope.ScriptValue('num_of_wars'), '(CFixedPoint)1'), 'Closest ')]Enemy capital,"
									}

									hostile_fort_item = {
										datacontext = "[GetPlayer.MakeScope.Var('enemy_capital').Province]"
										blockoverride "capital" { }
									}
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "No enemy capital found."
									visible = "[And(Not(GetPlayer.MakeScope.Var('enemy_capital').IsSet), GetPlayer.IsAtWar)]"
								}

								button_text = {
									visible = "[Army.IsRaidArmy]"
									layoutpolicy_horizontal = expanding
									onclick = "[GetVariableSystem.Set('army_tabs', 'targets')]"
									shortcut = speed_3

									blockoverride "text" {
										raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('raid_targets'))] raid targets. View all, hotkey 3."
									}
								}

								button_text = {
									visible = "[Not(Army.IsEmbarked)]"
									layoutpolicy_horizontal = expanding
									blockoverride "text" {
										raw_text = "View [Army.GetLocation.GetCounty.GetTitle.MakeScope.ScriptValue('adjacent_counties')] adjacent counties"
									}
									blockoverride "extra" {
										text_single = {
											visible = "[GreaterThan_CFixedPoint( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('county', Army.GetLocation.GetCounty.GetTitle.MakeScope ).ScriptValue('num_of_hostile_adjacent_counties'), '(CFixedPoint)0')]"
											raw_text = ", [GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('county', Army.GetLocation.GetCounty.GetTitle.MakeScope ).ScriptValue('num_of_hostile_adjacent_counties')] of them hostile"
										}
										text_single = {
											raw_text = ", hotkey 4."
										}
									}
									shortcut = speed_4
									onclick = "[GetScriptedGui('adjacent_counties').Execute( GuiScope.SetRoot( Army.GetLocation.GetCounty.GetTitle.MakeScope ).AddScope( 'player', GetPlayer.MakeScope).AddScope('target', Army.GetLocation.MakeScope).End )]"
									onclick = "[GetVariableSystem.Set('army_tabs', 'adjacent counties')]"
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									visible = "[Not(Army.IsEmbarked)]"
									blockoverride "text" {
										raw_text = "View [Army.GetLocation.GetCounty.GetTitle.MakeScope.ScriptValue('holdings_in_county')] holdings in this county"
									}
									blockoverride "extra" {
										text_single = {
											raw_text = ", hotkey 5."
										}
									}
									shortcut = speed_5
									onclick = "[GetScriptedGui('army_holdings').Execute( GuiScope.SetRoot( Army.MakeScope ).AddScope( 'province', Army.GetLocation.MakeScope ).End )]"
									onclick = "[GetVariableSystem.Set('army_tabs', 'holdings')]"
									onclick = "[GetVariableSystem.Set('army_county', Army.GetLocation.GetTitle.GetNameNoTierNoTooltip )]"
								}
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								shortcut = find_title_shortcut
							    blockoverride "text" {
							        raw_text = "View this holding, V."
							    }
								visible = "[And(Not(Army.IsEmbarked), Not(GetVariableSystem.Exists('army_tabs')))]"
								datacontext = "[Army.GetLocation.GetCoATitle]"
								using = prov_click
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								# tabs
								hbox = {
									margin_top = 5
									visible = no
									# visible = "[Not(GetVariableSystem.Exists('army_tabs'))]"
									layoutpolicy_horizontal = expanding
									# alpha = "[Select_int32(GetVariableSystem.Exists('army_tabs'), '(int32)0', '(int32)1')]"
									spacing = 3

									text_single = {
										raw_text = "Tabs:"
									}

									button_text = {
										blockoverride "text" {
											raw_text = "1, Army info."
										}
										onclick = "[GetVariableSystem.Set('army_tabs', 'info')]"
										shortcut = speed_1
									}

									button_text = {
										blockoverride "text" {
											raw_text = "2, Overview."
										}
										onclick = "[GetVariableSystem.Set('army_tabs', 'overview')]"
										shortcut = speed_2
									}

									button_text = {
										blockoverride "text" {
											raw_text = "3, other armies."
										}
										onclick = "[GetVariableSystem.Set('army_tabs', 'armies')]"
										shortcut = speed_3
									}

									button_text = {
										visible = "[GetPlayer.IsAtWar]"
										blockoverride "text" {
											raw_text = "4, [Select_CString(Army.IsRaidArmy, 'Raid', 'Siege')] targets."
										}
										onclick = "[GetVariableSystem.Set('army_tabs', 'targets')]"
										onclick = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
										shortcut = speed_4
									}

									button_text = {
										blockoverride "text" {
											raw_text = "5, adjacent counties."
										}
										onclick = "[GetVariableSystem.Set('army_tabs', 'adjacent counties')]"
										shortcut = speed_5
									}

									# button_text = {
									# 	blockoverride "text" {
									# 		raw_text = "5, other holdings."
									# 	}
									# 	onclick = "[GetVariableSystem.Set('army_tabs', 'holdings')]"
									# 	shortcut = speed_5
									# }
									margin_bottom = 5

									expand = { }
								}

								# current war
								vbox = {
									layoutpolicy_horizontal = expanding
									visible = no
									# visible = "[Or(GetVariableSystem.HasValue('army_tabs', 'targets'), GetVariableSystem.HasValue('army_tabs', 'armies'))]"


									button_text = {
										visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_wars')), '(int32)2')]"
										layoutpolicy_horizontal = expanding
										blockoverride "text" {
											raw_text = "Select another war."
										}
										onclick = "[GetVariableSystem.Toggle('war_selector')]"
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										visible = "[EqualTo_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_wars')), '(int32)2')]"

										datamodel = "[GetPlayer.MakeScope.GetList('your_wars')]"

										item = {
											button_text = {
												datacontext = "[Scope.War]"
												layoutpolicy_horizontal = expanding
												visible = "[GetScriptedGui('select_war_army_view').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('this_war', Scope.War.MakeScope).End )]"
												onclick = "[GetScriptedGui('select_war_army_view').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('this_war', Scope.War.MakeScope).End )]"
												onclick = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
												blockoverride "text" {
													raw_text = "Change to war against [War.GetPrimaryPlayerEnemy.GetPrimaryTitle.GetNameNoTierNoTooltip]."
												}
											}
										}
									}
								}
							}
						}

						# lists
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							visible = "[Not(GetVariableSystem.Exists('mini_army'))]"

							scrollbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								alwaystransparent = yes
								# I want the area below the army to be clickable
								# so this is an invisible scrollbox, and its children add their own backgrounds

								blockoverride "scrollbox_background" { }

								blockoverride "scrollbox_content" {

									vbox = {
										alwaystransparent = no
										background = { using = Background_Area_Border_Solid margin = { 20 20 } }
										visible = "[GetVariableSystem.HasValue('army_tabs', 'info')]"
										layoutpolicy_horizontal = expanding

										vbox = {
											layoutpolicy_horizontal = expanding
											datacontext = "[Army.GetCommander]"

											spacing = 10

											### Info ###

											# distance

											text_single = {
												layoutpolicy_horizontal = expanding
												visible = "[Not(Army.IsEmbarked)]"
												raw_text = "Inside [Army.GetLocation.GetCounty.GetTitle.GetHolder.GetTopLiege.GetPrimaryTitle.GetNameNoTierNoTooltip]."
											}

											vbox = {
												layoutpolicy_horizontal = expanding

												hbox = {
													# visible = no
													layoutpolicy_horizontal = expanding
													visible = "[GreaterThan_CFixedPoint(Army.GetArmyAttritionPercentage, '(CFixedPoint)0')]"

													hbox = {
														tooltip = "ARMY_ATTRITION_TT"
														spacing = 3

														text_single = {
															name = "attrition"
															raw_text = "[Army.GetArmyAttritionPercentage|%0-]"
														}

														text_single = {
															raw_text = "attrition."
														}

													}

													space = { }

													expand = { }
												}

												hbox = {
													layoutpolicy_horizontal = expanding

													tooltip = "[Army.GetSupplyStateTooltip]"

													text_single = {
														raw_text = "[Army.GetSupplyInfoForTooltip]"
													}

													# text_single = {
													# 	visible = "[EqualTo_int32(ArmyWindow.GetSupplyStateFrame, '(int32)3')]"
													# 	raw_text = "SUPPLY_STATE_2"
													# }
													#
													# text_single = {
													# 	visible = "[EqualTo_int32(ArmyWindow.GetSupplyStateFrame, '(int32)2')]"
													# 	raw_text = "SUPPLY_STATE_1"
													# }
													#
													# text_single = {
													# 	visible = "[EqualTo_int32(ArmyWindow.GetSupplyStateFrame, '(int32)1')]"
													# 	raw_text = "SUPPLY_STATE_0"
													# }
													# text_single = {
													# 	raw_text = ", [ArmyWindow.GetCurrentSupply]"
													# }


													# dot = { }

													text_single = {
														visible = "[EqualTo_int32(ArmyWindow.GetFullSupplyCapacity, ArmyWindow.GetCurrentSupply)]"
														raw_text = " At max."
													}


													text_single = {
														visible = "[GreaterThan_int32(ArmyWindow.GetFullSupplyCapacity, ArmyWindow.GetCurrentSupply)]"
														raw_text = " Max is [ArmyWindow.GetFullSupplyCapacity]."
													}

													text_single = {
														raw_text = " Decreasing."
														visible = "[ArmyWindow.ShowSupplyTrend]"
													}

													text_single = {
														visible = "[Not(Army.IsEmbarked)]"
														raw_text = " Supply here: [Army.GetLocation.GetSupplyLimitFor( GetPlayer )]."
													}

													expand = { }
												}

												#TODO effective supply
												#TODO add next closest place

												hbox = {
													layoutpolicy_horizontal = expanding
													container = {
														datacontext = "[Army.GetLocation]"
														ignoreinvisible = yes
														text_single = {
															raw_text = "Mild winter."
															visible = "[Province.HasWinterLevel( '(int32)1' )]"
														}

														text_single = {
															raw_text = "Winter."
															visible = "[Province.HasWinterLevel( '(int32)2' )]"
														}

														text_single = {
															raw_text = "Harsh winter."
															visible = "[Province.HasWinterLevel( '(int32)3' )]"
														}
														tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
													}

													expand = { }
												}

												vbox = {
													layoutpolicy_horizontal = expanding
													visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('friendly_provinces'))]"

													text_single = {
														layoutpolicy_horizontal = expanding
														raw_text = "Closest place to resupply,"
													}

													fixedgridbox = {
														layoutpolicy_horizontal = expanding
														addrow = 23
														addcolumn = 500
														maxverticalslots = 1

														datamodel = "[GetPlayer.MakeScope.GetList('friendly_provinces')]"

														item = {
															resupply_item = { }
														}
													}

													button_text = {
														onclick = "[GetVariableSystem.Set('army_tabs', 'resupply')]"
														layoutpolicy_horizontal = expanding
														blockoverride "text" {
															raw_text = "View all [GetDataModelSize(GetPlayer.MakeScope.GetList('friendly_provinces'))] places."
														}
													}
												}

												text_single = {
													layoutpolicy_horizontal = expanding
													visible = "[IsDataModelEmpty(GetPlayer.MakeScope.GetList('friendly_provinces'))]"
													raw_text = "Could not find a place to resupply. Try splitting the army."
												}

												vbox = {
													layoutpolicy_horizontal = expanding
													visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('friendly_provinces_no_supply'))]"

													text_single = {
														layoutpolicy_horizontal = expanding
														raw_text = "Other closest option,"
													}

													fixedgridbox = {
														layoutpolicy_horizontal = expanding
														addrow = 23
														addcolumn = 500
														maxverticalslots = 1

														datamodel = "[GetPlayer.MakeScope.GetList('friendly_provinces_no_supply')]"

														item = {
															resupply_item = { }
														}
													}

													button_text = {
														onclick = "[GetVariableSystem.Set('army_tabs', 'retreat')]"
														layoutpolicy_horizontal = expanding
														blockoverride "text" {
															raw_text = "View all [GetDataModelSize(GetPlayer.MakeScope.GetList('friendly_provinces_no_supply'))] places."
														}
													}
												}
												text_single = {
													layoutpolicy_horizontal = expanding
													visible = "[IsDataModelEmpty(GetPlayer.MakeScope.GetList('friendly_provinces_no_supply'))]"
													raw_text = "Could not find another safe place."
												}
											}

											hbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding

												vbox = {
													layoutpolicy_vertical = expanding
													spacing = -3

													hbox = {
														layoutpolicy_horizontal = expanding
														spacing = 3

														soldiers_and_quality_big = {
															datacontext = "[Army.GetComposition]"
														}
														text_single = {
															visible = "[Army.HasEventTroops]"
															raw_text = "Has special soldiers."
														}
														expand = { }
													}

													hbox = {
														layoutpolicy_horizontal = expanding

														dynamicgridbox = {
															name = "troops"
															datamodel = "[ArmyWindow.GetTroopItems]"
															datamodel_wrap = 4
															flipdirection = yes
															#TODO might need to make verticl

															item = {
																flowcontainer = {
																	ignoreinvisible = yes
																	tooltip = "ARMY_VIEW_TROOP_TT"
																	margin_left = 5
																	spacing = 3

																	text_single = {
																		name = "men_at_arms_icon"
																		visible = "[TroopItem.IsMaa]"
																		raw_text = "[TroopItem.GetRegiment.GetRegiment.GetMAAType.GetName],"
																	}

																	text_single = {
																		raw_text = "Levies:"
																		visible = "[TroopItem.IsLevies]"
																	}

																	text_single = {
																		raw_text = "Knights:"
																		visible = "[TroopItem.IsKnight]"
																	}

																	text_single = {
																		layoutpolicy_horizontal = growing
																		raw_text = "[TroopItem.GetCount|*],"
																	}
																}
															}
														}

														expand = { }
													}
												}
												expand = { }
											}

											### Commmander ###
											hbox = {
												# layoutpolicy_vertical = expanding
												layoutpolicy_horizontal = expanding
												margin_left = 5

												button_text = {
													visible = "[Not( Character.IsValid )]"
													blockoverride "text" {
														raw_text = "Assign commander."
													}
													blockoverride "disabled" {
														visible = "[Not(ArmyWindow.CanShowCommanders)]"
													}
													enabled = "[ArmyWindow.CanShowCommanders]"
													onclick = "[ArmyWindow.ShowCommanders]"
												}

												flowcontainer = {
													visible = "[Character.IsValid]"
													direction = vertical
													ignoreinvisible = yes

													# text_single = {
													# 	raw_text = "[Character.]"
													# }
													char_name = {
														blockoverride "pre" {
															text_single = {
																margin_right = 3
																raw_text = "Commander,"
															}
														}
													}
													text_single = {
														tooltip = "[Character.GetCommanderAdvantageDesc]"
														raw_text = "[Character.GetCommanderAdvantage] advantage."
													}

													flowcontainer = {
														ignoreinvisible = yes
														spacing = 2
														text_single = {
															visible = "[Not(IsDataModelEmpty(ArmyWindow.GetCommanderTraits))]"
															raw_text = "[GetDataModelSize(ArmyWindow.GetCommanderTraits)] traits:"
														}

														dynamicgridbox = {
															name = "commander_traits"
															datamodel = "[ArmyWindow.GetCommanderTraits]"
															flipdirection = yes
															datamodel_wrap = 5

															item = {
																container = {
																	visible = "[Trait.IsValid]"

																	text_single = {
																		tooltip = "trait_tooltip"
																		margin_left = 5
																		raw_text = "[Trait.GetNameNoTooltip(Character.Self)],"
																	}
																}
															}
														}
													}
													widget = {
														size = { 0 3 }
													}

													button_text = {
														blockoverride "text" {
															raw_text = "Change commander"
														}
														blockoverride "extra" {
															text_single = {
																raw_text = ", disabled. Tooltip"
																tooltip = "[ArmyWindow.GetShowCommandersTooltip]"
																visible = "[Not(ArmyWindow.CanShowCommanders)]"
															}
															dot = { }
														}
														enabled = "[ArmyWindow.CanShowCommanders]"
														onclick = "[ArmyWindow.ShowCommanders]"
													}
												}

												expand = { }
											}
										}

										vbox = {
											name = "hundred"
											margin = { 10 0 }
											layoutpolicy_horizontal = expanding

											state = {
												name = "army_change"
												alpha = 0.5
												duration = 0.2
												next = "b"
												using = Animation_Curve_Default
											}

											state = {
												name = "b"
												alpha = 1
												duration = 0.2
												using = Animation_Curve_Default
											}

											### Manage buttons

											vbox = {
												layoutpolicy_horizontal = expanding

												vbox = {
													layoutpolicy_horizontal = expanding
													spacing = 1

													button_text = {
														layoutpolicy_horizontal = expanding
														blockoverride "text" {
															raw_text = "Attach to army"
															align = left
														}
														blockoverride "disabled" {
															visible = "[Not(ArmyWindow.CanAttachToAnyLocalUnit)]"
															align = left
														}
														blockoverride "dot" { }

														visible = "[And( Not( ArmyWindow.CanAttachToMultipleLocalUnits ), Not( ArmyWindow.IsAttachedToAnyUnit ) )]"
														enabled = "[ArmyWindow.CanAttachToAnyLocalUnit]"
														tooltip = "[ArmyWindow.BuildAttachToUnitTooltip]"
														tooltip_enabled = "[Not(ArmyWindow.CanAttachToAnyLocalUnit)]"
														onclick = "[ArmyWindow.AttachToLocalUnit]"
													}

													button_text = {
														layoutpolicy_horizontal = expanding
														name = "attach_to_unit_window_button"
														visible = "[And( ArmyWindow.CanAttachToMultipleLocalUnits, Not( ArmyWindow.IsAttachedToAnyUnit ) )]"
														tooltip = "TOGGLE_ATTACH_TO_UNIT_WINDOW"
														tooltip_enabled = no
														onclick = "[ArmyWindow.ToggleAttachToWindow]"
														blockoverride "text" {
															raw_text = "Attach to other"
															align = left
														}
														blockoverride "dot" { }
													}

													button_checked_text = {
														layoutpolicy_horizontal = expanding
														visible = "[Army.IsRaidArmy]"
														onclick = "[ArmyWindow.ToggleLooting]"
														tooltip = "TOGGLE_LOOTER_STANCE"

														blockoverride "visible"
														{
															visible = "[Not(Army.HasLooterStance)]"
														}

														blockoverride "text"
														{
															text = "AV_ALWAYS_RAID"
														}
													}
												}

												vbox = {
													layoutpolicy_horizontal = expanding
													spacing = 1

													button_text = {
														layoutpolicy_horizontal = expanding
														# name = "unit_custom_split_button"
														enabled = "[ArmyWindow.CanSplitHalfSelected]"

														onclick = "[ArmyWindow.SplitHalfSelected]"
														shortcut = map_mode_5
														tooltip = "[ArmyWindow.BuildSplitHalfTooltip]"
														tooltip_enabled = "[Not(ArmyWindow.CanSplitHalfSelected)]"
														blockoverride "text" {
															raw_text = "Split in half"
															align = left
														}
														blockoverride "disabled" {
															visible = "[Not(ArmyWindow.CanSplitHalfSelected)]"
															align = left
														}
														blockoverride "extra" {
															text_single = {
																raw_text = ", Control Q"
																visible = "[ArmyWindow.CanSplitHalfSelected]"
															}
														}
														blockoverride "dot" { }
													}

													button_text = {
														layoutpolicy_horizontal = expanding
														name = "unit_custom_split_button"
														enabled = "[ArmyWindow.CanSplitCustomSelected]"
														tooltip_enabled = "[Not(ArmyWindow.CanSplitCustomSelected)]"
														shortcut = map_mode_13

														tooltip = "[ArmyWindow.BuildSplitCustomTooltip]"
														onclick = "[ArmyWindow.ToggleSplitArmyWindow]"
														blockoverride "text" {
															raw_text = "Make new army"
															align = left
														}
														blockoverride "disabled" {
															visible = "[Not(ArmyWindow.CanSplitCustomSelected)]"
															align = left
														}
														blockoverride "extra" {
															text_single = {
																visible = "[ArmyWindow.CanSplitCustomSelected]"
																raw_text = ", Control W"
															}
														}
														# shortcut = army_create_new
														blockoverride "dot" { }
													}

													button_text = {
														layoutpolicy_horizontal = expanding
														name = "split_off_button"
														onclick = "[ArmyWindow.SplitSelectedHiredAndEventTroops]"
														tooltip = "[ArmyWindow.BuildSplitHiredAndEventTroopsTooltip]"
														enabled = "[ArmyWindow.CanSplitSelectedHiredAndEventTroops]"
														using = tooltip_ne
														tooltip_enabled = "[Not(ArmyWindow.CanSplitSelectedHiredAndEventTroops)]"

														blockoverride "text" {
															raw_text = "Split off hired"
															align = left
														}
														blockoverride "disabled" {
															align = left
															visible = "[Not(ArmyWindow.CanSplitSelectedHiredAndEventTroops)]"
														}
														blockoverride "dot" { }
													}

													expand = { }
												}

												vbox = {
													layoutpolicy_horizontal = expanding

													button_text = {
														layoutpolicy_horizontal = expanding
														name = "split_for_siege_button"
														visible = "[Army.IsSieging]"

														onclick = "[ArmyWindow.SplitSelectedForSiege]"
														tooltip = "[ArmyWindow.BuildSplitForSiegeTooltip]"
														enabled = "[ArmyWindow.CanSplitSelectedForSiege]"
														using = tooltip_ne

														blockoverride "text" {
															raw_text = "Station besiegers"
															align = left
														}
														blockoverride "extra" {
															text_single = {
																raw_text = ", disabled"
																visible = "[Not(ArmyWindow.CanSplitSelectedForSiege)]"
															}
														}
														blockoverride "dot" { }
													}

													button_text = {
														layoutpolicy_horizontal = expanding
														name = "toggle_raiding"
														enabled = "[ArmyWindow.CanToggleRaiding]"
														tooltip = "[ArmyWindow.BuildToggleRaidingTooltip]"
														# tooltip_enabled = "[Not(ArmyWindow.CanToggleRaiding)]"
														using = tooltip_ne
														visible = "[GetPlayer.CanRaid]"
														onclick = "[ArmyWindow.ToggleRaiding]"

														blockoverride "text" {
															raw_text = "Toggle raid"
														}
														blockoverride "extra" {
															text_single = {
																raw_text = ", disabled"
																visible = "[Not(ArmyWindow.CanToggleRaiding)]"
															}
														}
														blockoverride "dot" { }
													}

													button_text = {
														layoutpolicy_horizontal = expanding
														name = "disband_button"
														using = tooltip_ne

														enabled = [ArmyWindow.CanDisband]
														tooltip = [ArmyWindow.BuildDisbandTooltip]
														onclick = [ArmyWindow.DisbandSelected]
														shortcut = army_disband

														blockoverride "text" {
															raw_text = "Disband"
															align = left
														}
														blockoverride "disabled" {
															visible = "[Not(ArmyWindow.CanDisband)]"
															align = left
														}
														blockoverride "extra" {
															text_single = {
																raw_text = ", hotkey J"
																visible = "[ArmyWindow.CanDisband]"
															}
														}
														blockoverride "dot" { }
													}

													expand = { }
												}
											}
										}
									}

									# enemies
									vbox = {
										background = { using = Background_Area_Border_Solid margin = { 20 20 } }
										alwaystransparent = no
										layoutpolicy_horizontal = expanding
										visible = "[GetVariableSystem.HasValue('army_tabs', 'armies')]"

										battles_categories = { }

										vbox = {
											layoutpolicy_horizontal = expanding
											visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('your_armies'))]"
											# your own
											button_outliner_header = {
												visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('your_armies'))))]"
												layoutpolicy_horizontal = expanding

												blockoverride "button_expand_frame"
												{
													frame = "[BoolTo2And1(GetVariableSystem.Exists('your_armies'))]"
												}

												blockoverride "oh_button"
												{
													onclick = "[GetVariableSystem.Toggle('your_armies')]"
													oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
													clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
												}

												state = {
													name = close_outliner_categories
													on_finish = "[GetVariableSystem.Set('your_armies', 'yes')]"
												}

												blockoverride "oh_toggle_frame"
												{
													frame = "[BoolTo2And1(GetVariableSystem.Exists('your_armies'))]"
												}

												blockoverride "oh_name"
												{
													raw_text = ""
												}

												blockoverride "extra" {
													# text_single = {
													# 	raw_text = ", [GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('your_armies')] total"
													# 	visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_armies')), '(int32)1')]"
													# }
													text_single = {
														raw_text = "Your"
													}

													space = { }

													text_single = {
														visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_armies')), '(int32)1')]"
														raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('your_armies'))]"
													}
													text_single = {
														raw_text = "army"
														visible = "[EqualTo_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_armies')), '(int32)1')]"
													}
													text_single = {
														raw_text = " armies"
														visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_armies')), '(int32)1')]"
													}
													text_single = {
														raw_text = ", click to [Select_CString(GetVariableSystem.Exists('your_armies'), 'show', 'hide')]"
														# visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_inside')), '(int32)1')]"
													}
												}

												blockoverride "oh_count"
												{
													# raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('your_armies'))]"
												}
												blockoverride "expanded"
												{
													frame = "[BoolTo2And1(GetVariableSystem.Exists('your_armies'))]"
												}
											}

											# your armies
											vbox = {
												datamodel = "[GetPlayer.MakeScope.GetList('your_armies')]"
												visible = "[And(Not(GetVariableSystem.Exists('your_armies')), GetPlayer.IsValid)]"
												layoutpolicy_horizontal = expanding
												margin = { 8 0 }
												spacing = -2

												item = {
													army_button_o = {
														blockoverride "your_allies" {
															visible = no
														}
														blockoverride "grouping" {
														}
														blockoverride "war_filter" {
														}
														blockoverride "click" {
															datacontext = "[Army.GetLocation]"
															using = send_army_click
															# onrightclick = "[UnitItem.PanToUnit]"
														}
														#TODO copy to other places
														blockoverride "same_province" {
															text_single = {
																raw_text = " Here."
																visible = "[ObjectsEqual(ArmyWindow.GetArmy.GetLocation.GetId, Scope.Army.GetLocation.GetId)]"
															}
														}
														blockoverride "hide_at_capital" {
															visible = "[Not(ObjectsEqual(ArmyWindow.GetArmy.GetLocation.GetId, Scope.Army.GetLocation.GetId))]"
														}
														blockoverride "selected" {
															text_single = {
																raw_text = "Selected."
																visible = "[ObjectsEqual(ArmyWindow.GetArmy.GetArmyId, Scope.Army.GetArmyId)]"
															}
														}
														blockoverride "distance" {
															datacontext = "[ArmyWindow.GetArmy.GetLocation]"
															text_single = {
																raw_text = "[GuiScope.SetRoot(Province.MakeScope).AddScope('saved_distance', MakeScopeValue(GuiScope.SetRoot(Province.MakeScope).AddScope('second', Army.GetLocation.MakeScope).ScriptValue('province_distance'))).Custom('ProvinceDistance')]"
															}

															text_single = {
																raw_text = " [GuiScope.SetRoot( Province.MakeScope).AddScope('second', Army.GetLocation.MakeScope).Custom('province_direction')],"
															}
														}
													}
												}
											}
										}

										outliner_armies = {
											blockoverride "click" {
												datacontext = "[Army.GetLocation]"
												using = send_army_click
											}
											blockoverride "same_province" {
												text_single = {
													visible = "[ObjectsEqual(ArmyWindow.GetArmy.GetLocation.GetId, Scope.Army.GetLocation.GetId)]"
													raw_text = "Here."
												}
											}
											blockoverride "hide_at_capital" {
												visible = "[Not(ObjectsEqual(ArmyWindow.GetArmy.GetLocation.GetId, Scope.Army.GetLocation.GetId))]"
											}
											blockoverride "distance" {
												datacontext = "[Scope.Army.GetLocation]"
												datacontext = "[ArmyWindow.GetArmy]"
												text_single = {
													raw_text = "ArmyProvinceDistance"
												}

												# text_single = {
												# 	raw_text = "[GuiScope.SetRoot(Army.GetLocation.MakeScope).AddScope('second', Province.MakeScope).ScriptValue('squared_province_distance')|0]"
												# }


											}
										}
									}

									# targets
									vbox = {
										alwaystransparent = no
										background = { using = Background_Area_Border_Solid margin = { 20 20 } }
										layoutpolicy_horizontal = expanding
										visible = "[GetVariableSystem.HasValue('army_tabs', 'targets')]"

										vbox = {
											visible = "[Not(Army.IsRaidArmy)]"
											layoutpolicy_horizontal = expanding
											alwaystransparent = no
											background = { using = Background_Area_Border_Solid margin = { 20 20 } }
											spacing = 5


											# text_single = {
											# 	visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('closest_counties'))]"
											# 	layoutpolicy_horizontal = expanding
											# 	raw_text = "Your closest county to it:"
											# }
											#
											# vbox = {
											# 	layoutpolicy_horizontal = expanding
											# 	datamodel = "[GetPlayer.MakeScope.GetList('closest_counties')]"
											#
											# 	item = {
											# 		friendly_county_item = {
											# 			datacontext = "[Scope.GetProvince]"
											# 			layoutpolicy_horizontal = expanding
											#
											# 			blockoverride "extra2" {
											# 				text_single = {
											# 					raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope.Var('enemy_capital').Province.MakeScope).AddScope('second', Province.MakeScope).ScriptValue('square_root_of_distance_2')|0] days"
											# 				}
											# 				text_single = {
											# 					raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope.Var('enemy_capital').Province.MakeScope).AddScope('second', Province.MakeScope).Custom('province_direction')|0] from [GetPlayer.MakeScope.Var('enemy_capital').Province.GetCoATitle.GetNameNoTierNoTooltip]."
											# 				}
											# 			}
											# 		}
											# 	}
											# }

											####

											forts_list = {
												visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('enemy_capitals'))]"
												blockoverride "hide_all" {
													on_start = "[GetVariableSystem.Set('enemy_capitals', 'yes')]"
												}
												blockoverride "title" {
													raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('enemy_capitals'))] enemy capitals,"
												}
												blockoverride "shortcut" {
													raw_text =  " hotkey 1"
												}
												blockoverride "hide" {
													shortcut = speed_1
													onclick = "[GetVariableSystem.Toggle('enemy_capitals')]"
												}
												blockoverride "hidden" {
													visible = "[GetVariableSystem.Exists('enemy_capitals')]"
												}
												blockoverride "shown" {
													visible = "[Not(GetVariableSystem.Exists('enemy_capitals'))]"
												}
												blockoverride "expanded" {
													visible = "[GetVariableSystem.Exists('expand_enemy_capitals')]"
												}
												blockoverride "expand" {
													onclick = "[GetVariableSystem.Toggle('expand_enemy_capitals')]"
												}
												blockoverride "collapsed" {
													visible = "[Not(GetVariableSystem.Exists('expand_enemy_capitals'))]"
												}
												blockoverride "datamodel" {
													datamodel = "[GetPlayer.MakeScope.GetList('enemy_capitals')]"
												}
												blockoverride "more" {
													visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('enemy_capitals')), '(int32)3')]"
												}
											}

											forts_list = {
												visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('adjacent_war_targets'))]"
												blockoverride "title" {
													raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('adjacent_war_targets'))] war targets bordering you or ally,"
												}
												blockoverride "shortcut" {
													raw_text =  " hotkey 2"
												}
												blockoverride "hide" {
													shortcut = speed_2
													onclick = "[GetVariableSystem.Toggle('adjacent_war_targets')]"
												}
												blockoverride "hide_all" {
													on_start = "[GetVariableSystem.Set('adjacent_war_targets', 'yes')]"
												}
												blockoverride "hidden" {
													visible = "[GetVariableSystem.Exists('adjacent_war_targets')]"
												}
												blockoverride "shown" {
													visible = "[Not(GetVariableSystem.Exists('adjacent_war_targets'))]"
												}
												blockoverride "expanded" {
													visible = "[GetVariableSystem.Exists('expand_adjacent_war_targets')]"
												}
												blockoverride "expand" {
													onclick = "[GetVariableSystem.Toggle('expand_adjacent_war_targets')]"
												}
												blockoverride "collapsed" {
													visible = "[Not(GetVariableSystem.Exists('expand_adjacent_war_targets'))]"
												}
												blockoverride "datamodel" {
													datamodel = "[GetPlayer.MakeScope.GetList('adjacent_war_targets')]"
												}
												blockoverride "more" {
													visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('adjacent_war_targets')), '(int32)3')]"
												}
											}

											forts_list = {
												visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('adjacent_hostile_forts'))]"
												blockoverride "shortcut" {
													raw_text =  " hotkey 3"
												}
											}

											forts_list = {
												visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('hostile_war_targets'))]"
												blockoverride "title" {
													raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('hostile_war_targets'))] war targets,"
												}
												blockoverride "hide" {
													shortcut = speed_4
													onclick = "[GetVariableSystem.Toggle('hostile_war_targets')]"
												}
												blockoverride "shortcut" {
													raw_text =  " hotkey 4"
												}
												blockoverride "hidden" {
													visible = "[Not(GetVariableSystem.Exists('hostile_war_targets'))]"
												}
												blockoverride "hide_all" {
													on_start = "[GetVariableSystem.Clear('hostile_war_targets')]"
												}
												blockoverride "shown" {
													visible = "[GetVariableSystem.Exists('hostile_war_targets')]"
												}
												blockoverride "expanded" {
													visible = "[GetVariableSystem.Exists('expand_hostile_war_targets')]"
												}
												blockoverride "expand" {
													onclick = "[GetVariableSystem.Toggle('expand_hostile_war_targets')]"
												}
												blockoverride "collapsed" {
													visible = "[Not(GetVariableSystem.Exists('expand_hostile_war_targets'))]"
												}
												blockoverride "datamodel" {
													datamodel = "[GetPlayer.MakeScope.GetList('hostile_war_targets')]"
												}
												blockoverride "more" {
													visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostile_war_targets')), '(int32)3')]"
												}
											}

											forts_list = {
												visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('captured_war_targets'))]"
												blockoverride "title" {
													raw_text = "Your side controls [GetDataModelSize(GetPlayer.MakeScope.GetList('captured_war_targets'))] war targets."
												}
												blockoverride "hide" {
													onclick = "[GetVariableSystem.Toggle('captured_war_targets')]"
												}
												blockoverride "hidden" {
													visible = "[Not(GetVariableSystem.Exists('captured_war_targets'))]"
												}
												blockoverride "hide_all" {
													on_start = "[GetVariableSystem.Clear('captured_war_targets')]"
												}
												blockoverride "shown" {
													visible = "[GetVariableSystem.Exists('captured_war_targets')]"
												}
												blockoverride "expanded" {
													visible = "[GetVariableSystem.Exists('expand_captured_war_targets')]"
												}
												blockoverride "expand" {
													onclick = "[GetVariableSystem.Toggle('expand_captured_war_targets')]"
												}
												blockoverride "collapsed" {
													visible = "[Not(GetVariableSystem.Exists('expand_captured_war_targets'))]"
												}
												blockoverride "datamodel" {
													datamodel = "[GetPlayer.MakeScope.GetList('captured_war_targets')]"
												}
												blockoverride "more" {
													visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('captured_war_targets')), '(int32)3')]"
												}
											}

											forts_list = {
												visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('liege_hostile_forts'))]"
												blockoverride "title" {
													raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('liege_hostile_forts'))] war targets."
												}
												blockoverride "hide" {
													onclick = "[GetVariableSystem.Toggle('liege_hostile_forts')]"
												}
												blockoverride "hidden" {
													visible = "[Not(GetVariableSystem.Exists('liege_hostile_forts'))]"
												}
												blockoverride "hide_all" {
													on_start = "[GetVariableSystem.Clear('liege_hostile_forts')]"
												}
												blockoverride "shown" {
													visible = "[GetVariableSystem.Exists('liege_hostile_forts')]"
												}
												blockoverride "expanded" {
													visible = "[GetVariableSystem.Exists('expand_liege_hostile_forts')]"
												}
												blockoverride "expand" {
													onclick = "[GetVariableSystem.Toggle('expand_liege_hostile_forts')]"
												}
												blockoverride "collapsed" {
													visible = "[Not(GetVariableSystem.Exists('expand_liege_hostile_forts'))]"
												}
												blockoverride "datamodel" {
													datamodel = "[GetPlayer.MakeScope.GetList('liege_hostile_forts')]"
												}
												blockoverride "more" {
													visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('liege_hostile_forts')), '(int32)3')]"
												}
											}

											forts_list = {
												visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('adjacent_across_water_hostile_forts'))]"
												blockoverride "title" {
													raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('adjacent_across_water_hostile_forts'))] war targets."
												}
												blockoverride "hide" {
													onclick = "[GetVariableSystem.Toggle('adjacent_across_water_hostile_forts')]"
												}
												blockoverride "hidden" {
													visible = "[Not(GetVariableSystem.Exists('adjacent_across_water_hostile_forts'))]"
												}
												blockoverride "hide_all" {
													on_start = "[GetVariableSystem.Clear('adjacent_across_water_hostile_forts')]"
												}
												blockoverride "shown" {
													visible = "[GetVariableSystem.Exists('adjacent_across_water_hostile_forts')]"
												}
												blockoverride "expanded" {
													visible = "[GetVariableSystem.Exists('expand_adjacent_across_water_hostile_forts')]"
												}
												blockoverride "expand" {
													onclick = "[GetVariableSystem.Toggle('expand_adjacent_across_water_hostile_forts')]"
												}
												blockoverride "collapsed" {
													visible = "[Not(GetVariableSystem.Exists('expand_adjacent_across_water_hostile_forts'))]"
												}
												blockoverride "datamodel" {
													datamodel = "[GetPlayer.MakeScope.GetList('adjacent_across_water_hostile_forts')]"
												}
												blockoverride "more" {
													visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('adjacent_across_water_hostile_forts')), '(int32)3')]"
												}
											}

											forts_list = {
												visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('your_captured_forts'))]"
												blockoverride "title" {
													raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('your_captured_forts'))] of your forts captured by enemy,"
												}
												blockoverride "hide" {
													shortcut = speed_5
													onclick = "[GetVariableSystem.Toggle('your_captured_forts')]"
												}
												blockoverride "shortcut" {
													raw_text =  " hotkey 5"
												}
												blockoverride "hidden" {
													visible = "[GetVariableSystem.Exists('your_captured_forts')]"
												}
												blockoverride "hide_all" {
													on_start = "[GetVariableSystem.Set('your_captured_forts', 'yes')]"
												}
												blockoverride "shown" {
													visible = "[Not(GetVariableSystem.Exists('your_captured_forts'))]"
												}
												blockoverride "expanded" {
													visible = "[GetVariableSystem.Exists('expand_your_captured_forts')]"
												}
												blockoverride "expand" {
													onclick = "[GetVariableSystem.Toggle('expand_your_captured_forts')]"
												}
												blockoverride "collapsed" {
													visible = "[Not(GetVariableSystem.Exists('expand_your_captured_forts'))]"
												}
												blockoverride "datamodel" {
													datamodel = "[GetPlayer.MakeScope.GetList('your_captured_forts')]"
												}
												blockoverride "more" {
													visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('your_captured_forts')), '(int32)3')]"
												}
											}

											forts_list = {
												visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('hostile_forts'))]"
												blockoverride "title" {
													raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('hostile_forts'))] other hostile forts,"
												}
												blockoverride "hide" {
													shortcut = map_mode_2
													onclick = "[GetVariableSystem.Toggle('hostile_forts')]"
												}
												blockoverride "shortcut" {
													raw_text =  " hotkey T"
												}
												blockoverride "hidden" {
													visible = "[Not(GetVariableSystem.Exists('hostile_forts'))]"
												}
												blockoverride "hide_all" {
													on_start = "[GetVariableSystem.Clear('hostile_forts')]"
												}
												blockoverride "shown" {
													visible = "[GetVariableSystem.Exists('hostile_forts')]"
												}
												blockoverride "expanded" {
													visible = "[GetVariableSystem.Exists('expand_hostile_forts')]"
												}
												blockoverride "expand" {
													onclick = "[GetVariableSystem.Toggle('expand_hostile_forts')]"
												}
												blockoverride "collapsed" {
													visible = "[Not(GetVariableSystem.Exists('expand_hostile_forts'))]"
												}
												blockoverride "datamodel" {
													datamodel = "[GetPlayer.MakeScope.GetList('hostile_forts')]"
												}
												blockoverride "more" {
													visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostile_forts')), '(int32)3')]"
												}
											}

											# vbox = {
											# 	layoutpolicy_horizontal = expanding
											# 	visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('personal_forts')))]"
											#
											# 	text_single = {
											# 		background = { using = Background_Area_Dark }
											# 		raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('personal_forts'))] personal enemy forts."
											#
											# 		layoutpolicy_horizontal = expanding
											# 	}
											#
											# 	fixedgridbox = {
											# 		layoutpolicy_horizontal = expanding
											# 		addrow = 23
											# 		addcolumn = 500
											# 		maxverticalslots = 3
											# 		datamodel = "[GetPlayer.MakeScope.GetList('personal_forts')]"
											#
											# 		item = {
											# 			hostile_fort_item = { }
											# 		}
											# 	}
											# }

										}

										vbox = {
											visible = "[Army.IsRaidArmy]"
											layoutpolicy_horizontal = expanding

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('raid_targets'))] raid targets."
												}
												onclick = "[GetScriptedGui('raid_targets').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
												shortcut = map_mode_11
											}

											vbox = {
												layoutpolicy_horizontal = expanding

												datamodel = "[GetPlayer.MakeScope.GetList('raid_targets')]"

												item = {
													raid_target_item = {
														visible = "[GreaterThan_int32(Army.GetSoldierCount, Scope.GetProvince.GetHolding.GetCurrentGarrisonSize)]"
													}
												}
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('strong_raid_targets'))] targets whose owners are stronger than you, be careful."
												}
											}

											vbox = {
												layoutpolicy_horizontal = expanding

												datamodel = "[GetPlayer.MakeScope.GetList('strong_raid_targets')]"

												item = {
													raid_target_item = {
													}
												}
											}

											vbox = {
												layoutpolicy_horizontal = expanding
												margin_top = 5

												datamodel = "[GetPlayer.MakeScope.GetList('raid_targets')]"

												item = {
													raid_target_item = {
														visible = "[Not(GreaterThan_int32(Army.GetSoldierCount, Scope.GetProvince.GetHolding.GetCurrentGarrisonSize))]"
														blockoverride "garrison" {
															visible = "[Not(Army.IsGathering)]"
														}
													}
												}
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('looted_raid_targets'))]"
												blockoverride "text" {
													raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('looted_raid_targets'))] looted raid targets. Click to [Select_CString(GetVariableSystem.Exists('looted_raid_targets'), 'Hide', 'Show')]"
												}
												onclick = "[GetVariableSystem.Toggle('looted_raid_targets')]"
											}

											vbox = {
												layoutpolicy_horizontal = expanding
												visible = "[GetVariableSystem.Exists('looted_raid_targets')]"

												datamodel = "[GetPlayer.MakeScope.GetList('looted_raid_targets')]"

												item = {
													raid_target_item = {
														visible = "[Not(GreaterThan_int32(Army.GetSoldierCount, Scope.GetProvince.GetHolding.GetCurrentGarrisonSize))]"
														blockoverride "garrison" {
															visible = "[Not(Army.IsGathering)]"
														}
													}
												}
											}
										}
									}

									# counties
									vbox = {
										alwaystransparent = no
										visible = "[GetVariableSystem.HasValue('army_tabs', 'adjacent counties')]"
										layoutpolicy_horizontal = expanding
										background = { using = Background_Area_Border_Solid margin = { 20 20 } }

										datamodel = "[Army.GetLocation.GetCounty.GetTitle.MakeScope.GetList('adjacent_counties')]"

										item = {
											adjacent_county_button = {
												layoutpolicy_horizontal = expanding
												datacontext = "[Army.GetLocation]"
												blockoverride "click" {
													using = send_army_click_county
													onrightclick = "[GetScriptedGui('army_holdings').Execute( GuiScope.SetRoot( Army.MakeScope ).AddScope( 'province', Title.GetProvince.MakeScope ).End )]"
													onrightclick = "[GetVariableSystem.Set('army_county', Title.GetNameNoTierNoTooltip )]"
													onrightclick = "[GetVariableSystem.Set('army_tabs', 'holdings')]"
												}
												blockoverride "county_extra" {
													text_single = {
														visible = "[Not(GetScriptedGui('is_hostile_county').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'target', Province.MakeScope ).End ))]"
														raw_text = "Highest supply, [GuiScope.SetRoot(Title.MakeScope).AddScope( 'player', GetPlayer.MakeScope ).ScriptValue('highest_supply')]."
													}
												}
											}
										}
									}

									# holdings
									vbox = {
										alwaystransparent = no
										visible = "[GetVariableSystem.HasValue('army_tabs', 'holdings')]"
										layoutpolicy_horizontal = expanding
										background = { using = Background_Area_Border_Solid margin = { 20 20 } }

										datamodel = "[GetPlayer.MakeScope.GetList('army_holdings')]"

										item = {
											button_text = {
												layoutpolicy_horizontal = expanding
												using = send_army_click
												datacontext = "[Scope.GetProvince]"
												blockoverride "pre" {
													spacing = 3

													text_single = {
														visible = "[Not(ObjectsEqual(Province.GetId, Army.GetLocation.GetId))]"
														raw_text = "ArmyProvinceDistance"
													}

													text_single = {
														raw_text = "Hostile."
														visible = "[GetScriptedGui('is_hostile_barony').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope ).End )]"
													}

													text_single = {
														visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Province.MakeScope).ScriptValue('enemies_in_the_province'), '(CFixedPoint)0' )]"
														raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Province.MakeScope).ScriptValue('enemies_in_the_province')] enemies."
													}

													text_single = {
														raw_text = "Here,"
														visible = "[ObjectsEqual(Province.GetId, Army.GetLocation.GetId)]"
													}

													text_single = {
														raw_text = "[Province.GetNameNoTooltip],"
													}
													text_single = {
														raw_tooltip = "[Province.GetSupplyLimitDescFor( GetPlayer )]"
														raw_text = "[Province.GetSupplyLimitFor( GetPlayer )] supply."
													}

													container = {
														ignoreinvisible = yes
														text_single = {
															raw_text = " Mild winter."
															visible = "[Province.HasWinterLevel( '(int32)1' )]"
														}

														text_single = {
															raw_text = " Winter."
															visible = "[Province.HasWinterLevel( '(int32)2' )]"
														}

														text_single = {
															raw_text = " Harsh winter."
															visible = "[Province.HasWinterLevel( '(int32)3' )]"
														}
														tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
													}

													text_single = {
														raw_text = "[Province.GetTerrain.GetName],"
													}

													text_single = {
														visible = "[Not(Province.GetHolding.IsEmpty)]"
														raw_text = "[Province.GetHolding.GetType.GetName],"
													}

													text_single = {
														visible = "[Province.HasFort]"
														raw_text = "fort level [Province.GetFortLevel]."
													}
												}
											}
										}
									}

									# resupply
									vbox = {
										alwaystransparent = no
										background = { using = Background_Area_Border_Solid margin = { 20 20 } }
										visible = "[GetVariableSystem.HasValue('army_tabs', 'resupply')]"
										layoutpolicy_horizontal = expanding

										fixedgridbox = {
											layoutpolicy_horizontal = expanding
											addrow = 23
											addcolumn = 500
											maxverticalslots = 100

											datamodel = "[GetPlayer.MakeScope.GetList('friendly_provinces')]"

											item = {
												resupply_item = { }
											}
										}
									}

									vbox = {
										alwaystransparent = no
										background = { using = Background_Area_Border_Solid margin = { 20 20 } }
										visible = "[GetVariableSystem.HasValue('army_tabs', 'retreat')]"
										layoutpolicy_horizontal = expanding

										fixedgridbox = {
											layoutpolicy_horizontal = expanding
											addrow = 23
											addcolumn = 500
											maxverticalslots = 100

											datamodel = "[GetPlayer.MakeScope.GetList('friendly_provinces_no_supply')]"

											item = {
												resupply_item = { }
											}
										}
									}

									widget = {
										layoutpolicy_horizontal = expanding
										allow_outside = yes
										size = { 1 50 }
										scissor = "[GetVariableSystem.Exists('hide_army_hotkeys')]"

										# hotkeys
										vbox = {
											alwaystransparent = no
											margin_top = 25
											margin_bottom = 5
											layoutpolicy_horizontal = expanding
											visible = "[Not(GetVariableSystem.Exists('mini_army'))]"

											background = { using = Background_Area_Border_Solid margin = { 20 0 } }

											button_text = {
												visible = "[GetVariableSystem.Exists('hide_army_hotkeys')]"
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "[Select_CString(GetVariableSystem.Exists('hide_army_hotkeys'), 'Show', 'Hide')] hotkeys, C."
												}
												shortcut = character_finder
												onclick = "[GetVariableSystem.Toggle('hide_army_hotkeys')]"
											}

											text_single = {
												visible = "[GetVariableSystem.HasValue('army_tabs', 'adjacent counties')]"
												margin_left = 5
												layoutpolicy_horizontal = expanding
												raw_text = "Right click a county to view its holdings."
											}

											button_text = {
												visible = "[GetVariableSystem.HasValue('army_tabs', 'targets')]"
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "Close all categories, E."
												}
												shortcut = map_mode_1
												onclick = "[PdxGuiTriggerAllAnimations('hide_fort_group')]"
											}

											# reload lists
											button_text = {
												# visible = "[GetVariableSystem.Exists('army_tabs')]"
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "Reload, Shift E."
												}
												shortcut = map_mode_11
												onclick = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												visible = "[GetVariableSystem.HasValue('army_tabs', 'armies')]"
												blockoverride "text" {
													raw_text = "Close all categories, E."
												}
												onclick = "[PdxGuiTriggerAllAnimations('close_outliner_categories')]"
												shortcut = map_mode_1
											}
											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "[Select_CString(GetVariableSystem.Exists('hide_army_info'), 'Show', 'Hide')] your army info, H."
												}
												shortcut = army_create_new
												onclick = "[GetVariableSystem.Toggle('hide_army_info')]"
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "[Select_CString(GetVariableSystem.Exists('hide_army_hotkeys'), 'Show', 'Hide')] hotkeys, C."
												}
												shortcut = character_finder
												onclick = "[GetVariableSystem.Toggle('hide_army_hotkeys')]"
											}



											vbox = {
												visible = "[GetVariableSystem.HasValue('army_tabs', 'armies')]"
												layoutpolicy_horizontal = expanding

												button_text = {
													layoutpolicy_horizontal = expanding
													blockoverride "text" {
														raw_text = "[Select_CString(GetVariableSystem.Exists('compact_units'), 'Hide', 'Show')] unit details, Shift W."
													}
													onclick = "[GetVariableSystem.Toggle('compact_units')]"
													shortcut = map_mode_10
												}
												button_text = {
													layoutpolicy_horizontal = expanding
													shortcut = map_mode_2

													onclick = "[GetScriptedGui('army_sorting').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
													onclick = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"
													blockoverride "text" {
														raw_text = "Armies are sorted by [Select_CString( GetScriptedGui('army_sorting').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ), 'size. Sort by distance', 'distance. Sort by size')], hotkey T."
													}
												}

												button_text = {
													layoutpolicy_horizontal = expanding
													onclick = "[GetScriptedGui('lower_army_grouping').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
													visible = "[GetScriptedGui('lower_army_grouping').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
													onclick = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"

													blockoverride "pre" {
														spacing = 3
														text_single = {
															raw_text = "Group by"
														}

														text_single = {
															raw_text = "[GetPlayer.Custom('army_ungrouping')],"
														}
														text_single = {
															raw_text = "Page Down."
														}
													}

													shortcut = zoom_in
												}

												button_text = {
													layoutpolicy_horizontal = expanding
													onclick = "[GetScriptedGui('raise_army_grouping').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
													visible = "[GetScriptedGui('raise_army_grouping').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
													onclick = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"

													blockoverride "pre" {
														spacing = 3
														text_single = {
															raw_text = "Group by"
														}

														text_single = {
															raw_text = "[GetPlayer.Custom('army_upgrouping')],"
														}

														text_single = {
															raw_text = "Page Up."
														}
													}

													shortcut = zoom_out
												}

												button_text = {
													layoutpolicy_horizontal = expanding
													shortcut = map_mode_4

													onclick = "[GetScriptedGui('limit_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
													onclick = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"
													blockoverride "text" {
														raw_text = "[Select_CString( GetScriptedGui('limit_armies').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ), 'Checked', 'Unchecked')], show only 5 armies, Y. Helps with performance."
													}
												}
											}


											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "Pan camera here, shift Q."
												}

												fixedgridbox = {
													datamodel = "[ArmyWindow.GetSelectedUnitItems]"
													maxverticalslots = 1
													addrow = 0
													addcolumn = 0

													item = {
														button_text = {
															onclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
															onclick = "[SelectedUnitItem.OnRightClick]"
															shortcut = map_mode_9

															state = {
																name = pan_to_army

																on_start = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
																on_start = "[SelectedUnitItem.OnRightClick]"
															}
														}
													}
												}
											}

											# hide details
											# button_text = {
											# 	layoutpolicy_horizontal = expanding
											# 	onclick = "[GetVariableSystem.Toggle('mini_army')]"
											# 	blockoverride "text" {
											# 		raw_text = "Hide all details, E."
											# 	}
											# 	shortcut = map_mode_1
											# }
										}
									}
								}
							}
						}

						expand = { }

					}


					expand = { }
				}

				# war selector
				vbox = {
					layoutpolicy_horizontal = expanding
					margin_left = 10

					visible = "[GetVariableSystem.Exists('war_selector')]"

					vbox = {
						background = { using = Background_Area_Border_Solid margin = { 10 10 } }
						layoutpolicy_horizontal = expanding
						datamodel = "[GetPlayer.MakeScope.GetList('your_wars')]"

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "Select a war:"
						}

						item = {
							button_text = {
								datacontext = "[Scope.War]"
								layoutpolicy_horizontal = expanding
								# visible = "[GetScriptedGui('select_war_army_view').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('this_war', Scope.War.MakeScope).End )]"
								onclick = "[GetScriptedGui('select_war_army_view').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('this_war', Scope.War.MakeScope).End )]"
								onclick = "[GetScriptedGui('hostile_forts').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('army', ArmyWindow.GetArmy.MakeScope).End )]"
								onclick = "[GetVariableSystem.Clear('war_selector')]"
								blockoverride "pre" {
									text_single = {
										margin_right = 4
										visible = "[GetScriptedGui('is_civil_war').IsShown( GuiScope.SetRoot( War.MakeScope ).End )]"
										raw_text = "Civil"
									}
								}
								blockoverride "text" {
									raw_text = "War against [War.GetPrimaryPlayerEnemy.GetPrimaryTitle.GetNameNoTierNoTooltip]."
								}
							}
						}

						button = {
							shortcut = close_window
							onclick = "[GetVariableSystem.Clear('war_selector')]"
						}
					}

					expand = { }
				}

				expand = { }
			}
		}
	}


	army_old = {
		visible = "[GetVariableSystem.Exists('ocr')]"
	}
}

types FortTypes {

	type raid_target_item = button_text {
		layoutpolicy_horizontal = expanding
		datacontext = "[Scope.GetProvince.GetTitle]"
		datacontext = "[Scope.GetProvince]"
		using = send_army_click
		using = title_pan_right

		blockoverride "text" {
		}

		blockoverride "extra" {
			flowcontainer = {
				ignoreinvisible = yes

				text_single = {
					raw_text = "Can't siege"
					block "garrison" {
						visible = no
					}
				}

				text_single = {
					raw_text = "[Scope.GetProvince.GetCounty.GetName],"
				}

				spacing = 3


				text_single = {
					raw_text = "[Scope.GetProvince.GetRaidLoot|0] loot,"
				}

				text_single = {
					datacontext = "[Scope.GetProvince]"
					visible = "[Not(ObjectsEqual(Army.GetLocation.GetId, Province.GetId))]"
					raw_text = "ArmyProvinceDistance"
				}

				text_single = {
					datacontext = "[Scope.GetProvince]"
					visible = "[ObjectsEqual(Army.GetLocation.GetId, Province.GetId)]"
					raw_text = "Here."
				}

				text_single = {
					raw_text = "need more than"
					block "garrison" {
						visible = no
					}
				}

				text_single = {
					visible = "[GreaterThan_int32(Scope.GetProvince.GetHolding.GetCurrentGarrisonSize, Army.GetComposition.GetCurrentNumberOfSoldiers)]"
					raw_text = "[Scope.GetProvince.GetHolding.GetCurrentGarrisonSize] garrison."
				}

				text_single = {
					visible = "[Scope.GetProvince.IsRecentlyLooted]"
					raw_text = "Unavailable until [Scope.GetProvince.GetEndOfRecentlyLooted.GetString],"
				}

				flowcontainer = {
					ignoreinvisible = yes

					visible = "[Title.GetHolder.IsIndependentRuler]"

					text_single = {
						visible = "[GreaterThan_int32( FixedPointToInt(Title.GetHolder.MakeScope.ScriptValue('current_military_strength_sval')), Army.GetComposition.GetCurrentNumberOfSoldiers)]"
						raw_text = "Owner has [Title.GetHolder.GetMilitaryStrengthText] soldiers,"
					}

					button_text = {
						datacontext = "[Title.GetHolder]"
						using = char_click
					    blockoverride "text" {
					        raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip]"
					    }
					}
				}

				flowcontainer = {
					spacing = 3
					visible = "[Not(Title.GetHolder.IsIndependentRuler)]"

					text_single = {
						visible = "[GreaterThan_int32( FixedPointToInt(Title.GetHolder.GetTopLiege.MakeScope.ScriptValue('current_military_strength_sval')), Army.GetComposition.GetCurrentNumberOfSoldiers)]"
						raw_text = "Liege has [Title.GetHolder.GetTopLiege.GetMilitaryStrengthText] soldiers,"
					}

					button_text = {
						datacontext = "[Title.GetHolder.GetTopLiege]"
						using = char_click
					    blockoverride "text" {
					        raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip]"
					    }
					}
				}
				dot = {
					margin_left = -3
				}
			}
		}
	}

	type hostile_fort_item = button {
		size = { 500 22 }
		layoutpolicy_horizontal = expanding
		datacontext = "[Scope.GetProvince]"

		button_ignore = none
		# onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Scope.GetProvince.GetId))]"
		using = send_army_click

		hbox = {
			# background = { using = Background_Area_Light }
			layoutpolicy_horizontal = expanding
			spacing = 3

			# button_text = {
			#     blockoverride "text" {
			#         raw_text = "Teleport"
			#     }
			# 	onclick = "[GetScriptedGui('teleport_army').Execute( GuiScope.SetRoot( Army.MakeScope ).AddScope('target', Province.MakeScope).End )]"
			# }

			block "controller" {
				# text_single = {
				# 	raw_text = "You control"
				# 	visible = "[GetScriptedGui('you_control').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End )]"
				# }
				#
				# text_single = {
				# 	raw_text = "Enemy controls"
				# 	visible = "[Not(GetScriptedGui('you_control').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End )]"
				# }
				#
				# text_single = {
				# 	raw_text = ""
				# }
			}

			# text_single = {
			# 	raw_text = "War target "
			# 	visible = "[GetScriptedGui('is_war_target').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End )]"
			# }
			hbox = {
				visible = "[Not(ObjectsEqual(Army.GetLocation.GetId, Province.GetId))]"
				spacing = 3

				text_single = {
					raw_text = "ArmyProvinceDistance"
				}
			}

			text_single = {
				raw_text = "[Province.GetCounty.GetTitle.GetNameNoTierNoTooltip], "
			}

			text_single = {
				visible = "[GreaterThan_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.ScriptValue('num_of_forts_in_county'), '(CFixedPoint)1')]"
				raw_text = "[Province.GetNameNoTooltip]."
			}

			# text_single = {
			# 	raw_text = "[Province.GetController.GetTopLiege.GetPrimaryTitle.GetNameNoTierNoTooltip]."
			# }

			hbox = {
				visible = "[Province.IsOccupied]"
				text_single = {
					raw_text = "Occupied by [Province.GetController.GetPrimaryTitle.GetNameNoTierNoTooltip],"
					visible = "[And(Province.IsOccupied, Not(Province.GetController.IsLocalPlayer))]"
				}
				text_single = {
					visible = "[And(Province.IsOccupied, Province.GetController.IsLocalPlayer)]"
					raw_text = "Occupied by you."
				}
				block "capital" {
				}
			}

			text_single = {
				visible = "[ObjectsEqual(Army.GetLocation.GetId, Province.GetId)]"
				raw_text = "This army is here."
			}

			block "border" {
				container = {
					ignoreinvisible = yes
					# why was it here?
					# visible = "[Not(ObjectsEqual(Army.GetLocation.GetId, Province.GetId))]"
					visible = "[GetScriptedGui('adjacent_to_ally').IsShown( GuiScope.SetRoot( Province.MakeScope ).AddScope('me', GetPlayer.MakeScope).End )]"
					text_single = {
						raw_text = "exposed,"
						raw_tooltip = "Exposed means this county borders a friendly or neutral county, so it is safe to enter it. Otherwise, you would lose a portion of your army by walking across a hostile county."
					}
				}
			}

			# text_single = {
			# 	visible = "[Province.MakeScope.Var('enemy_here').IsSet]"
			# 	raw_text = "Enemies [Province.MakeScope.Var('enemy_here').Army.GetSoldierCount]."
			# }

			text_single = {
				visible = no# "[InDebugMode]"
				raw_text = "X [Province.MakeScope.Var('pos_x').GetValue|0], Y [Province.MakeScope.Var('pos_y').GetValue|0]. "
			}

			# text_single = {
			# 	raw_text = "Capital,"
			# 	visible = "[Province.IsRealmCapital]"
			# }

			text_single = {
				raw_text = "Coastal,"
				visible = "[GetScriptedGui('is_coastal_county').IsShown( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End )]"
			}

			text_single = {
				raw_text = "Riverside,"
				visible = "[GetScriptedGui('is_riverside_county').IsShown( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End )]"
			}

			# container = {
			# 	visible = "[Not(GetScriptedGui('is_war_target').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End ))]"
			# 	ignoreinvisible = yes
			# 	text_single = {
			# 		raw_text = "Adjacent to a war goal,"
			# 		visible = "[GetScriptedGui('adjacent_to_war_target').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End )]"
			# 	}
			# }

			text_single = {
				raw_text = "level [Province.GetFortLevel]."
			}

			hbox = {
				visible = "[Not(Army.IsGathering)]"
				text_single = {
					raw_text = "Too large,"
					visible = "[GreaterThan_int32( Province.GetHolding.GetCurrentGarrisonSize, Army.GetComposition.GetCurrentNumberOfSoldiers)]"
				}
			}

			text_single = {
				visible = "[GreaterThan_int32( Province.GetHolding.GetCurrentGarrisonSize, Army.GetComposition.GetCurrentNumberOfSoldiers)]"
				raw_text = "garrison [Province.GetHolding.GetCurrentGarrisonSize],"
			}

			text_single = {
				visible = "[Province.HasSiege]"
				raw_text = "Sieged, [Province.GetSiege.GetProgress|0]%."
			}

			# button_text = {
			#     blockoverride "text" {
			#         raw_text = "View county."
			# 		margin_left = -5
			#     }
			# 	blockoverride "bg" {
			#
			# 	}
			# 	onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Province.GetId))]"
			# }

			expand = { }
		}
	}

	type friendly_county_item = button_text {
		using = send_army_click
		datacontext = "[Scope.GetProvince]"

	    blockoverride "text" {
	        raw_text = "[Province.GetCounty.GetTitle.GetNameNoTierNoTooltip],"
	    }
		blockoverride "extra" {
			spacing = 3
			text_single = {
				raw_text = "FortDistance"
			}
			text_single = {
				raw_text = "[GuiScope.SetRoot(Army.GetLocation.MakeScope).AddScope('second', Province.MakeScope).Custom('province_direction')]."
			}
			text_single = {
				raw_text = "[Province.GetSupplyLimitFor( GetPlayer )] supply."
			}
			block "extra2" { }
		}
	}
}

window = {
	name = "army_reorganization_window"
	size = { 100% 100% }
	layer = top

	attachto = {
		widgetid = "army_window"
		stackmode = top
		inherit_data_context = yes
	}

	state = {
		name = _show
		on_start = "[GetVariableSystem.Clear('moving_to_old')]"
	}

	using = Window_Background_No_Edge
	background = { using = Background_Area_Border_Solid }

	# using = Animation_ShowHide_Quick

	vbox = {
		margin = { 5 5 }
		margin_bottom = 10
		# button_text = {
		# 	layoutpolicy_horizontal = expanding
		# 	blockoverride "text" {
		# 		raw_text = "Errors: [NumberOrErrors]"
		# 	}
		# 	onclick = "[ClearErrorLog]"
		# 	#TODO
		# }

		spacing = 5

		# header_pattern = {
		# 	layoutpolicy_horizontal = expanding
		#
		# 	blockoverride "header_text"
		# 	{
		# 		raw_text = "[Localize('ARMY_REORGANIZATION')]."
		# 	}
		#
		# 	blockoverride "button_close"
		# 	{
		# 		onclick = "[ArmyReorgWindow.Hide]"
		#
		# 	}
		# }

		hbox = {
		    layoutpolicy_horizontal = expanding

			text_single = {
				raw_text = "[Localize('ARMY_REORGANIZATION')]."
				visible = "[Not(Or(GetVariableSystem.Exists('move_to_new'), GetVariableSystem.Exists('move_to_old')))]"
			}

			button_text = {
				datacontext = "[ArmyReorgWindow.GetRightArmyComposition]"
			    blockoverride "text" {
					raw_text = "Moving [GetVariableSystem.Get('move_to_new')] to [ArmyComposition.GetName]. Close with Escape."
			    }
				visible = "[GetVariableSystem.Exists('move_to_new')]"
				onclick = "[GetVariableSystem.Clear('move_to_new')]"
				shortcut = close_window
			}

			button_text = {
				datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
			    blockoverride "text" {
					raw_text = "Moving [GetVariableSystem.Get('move_to_old')] to [ArmyComposition.GetName]. Close with Escape."
			    }
				visible = "[GetVariableSystem.Exists('move_to_old')]"
				onclick = "[GetVariableSystem.Clear('move_to_old')]"
				shortcut = close_window
			}

		    expand = { }
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(Or(GetVariableSystem.Exists('move_to_new'), GetVariableSystem.Exists('move_to_old')))]"
			spacing = 5
			margin_left = 10

			# armies
			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = 5

				widget = {
					size = { 0 70 }
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding
						name = "right"
						datacontext = "[ArmyReorgWindow.GetRightArmyComposition]"
						visible = "[DataModelHasItems( ArmyReorgWindow.GetRightItems )]"

						hbox = {
						    layoutpolicy_horizontal = expanding

							text_single = {
								margin_top = 1
								name = "army_name"
								raw_text = "[ArmyComposition.GetName]."
							}

							button_text = {
								visible = "[DataModelHasItems( ArmyReorgWindow.GetRightItems )]"
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Select and close, Enter."
									align = left
								}
								shortcut = confirm
								onclick = "[ArmyReorgWindow.SelectRight]"
							}

						    expand = { }
						}


						hbox = {
							layoutpolicy_horizontal = expanding

							soldiers_and_quality_small_text = {
							}

							text_single = {
								name = "army_maintenance"
								text = "ARMY_REORG_RIGHT_MAINTENANCE"
							}

							dot = { }

							expand = { }
						}

						vbox = {
							name = "right_buttons"
							layoutpolicy_horizontal = expanding
							visible = "[DataModelHasItems( ArmyReorgWindow.GetRightItems )]"

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Disband this army."
									align = left
								}
								blockoverride "disabled" {
									visible = "[Not(ArmyReorgWindow.CanDisband)]"
								}
								enabled = "[ArmyReorgWindow.CanDisband]"
								onclick = "[ArmyReorgWindow.DisbandRight]"
							}
						}

						expand = { }
					}
				}

				widget = {
					size = { 0 70 }
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding
						name = "left"
						datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
						visible = "[DataModelHasItems( ArmyReorgWindow.GetLeftItems )]"

						hbox = {
						    layoutpolicy_horizontal = expanding
							visible = "[DataModelHasItems( ArmyReorgWindow.GetLeftItems )]"

							text_single = {
								margin_top = 1
								name = "army_name"
								raw_text = "[ArmyComposition.GetName]."
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Select and close, Escape."
									align = left
								}
								shortcut = close_window
								onclick = "[ArmyReorgWindow.SelectLeft]"
							}

						    expand = { }
						}


						hbox = {
							layoutpolicy_horizontal = expanding


							soldiers_and_quality_small_text = {
							}

							text_single = {
								name = "army_maintenance"
								text = "ARMY_REORG_LEFT_MAINTENANCE"
							}

							dot = { }

							expand = { }
						}

						vbox = {
							name = "left_buttons"
							layoutpolicy_horizontal = expanding
							visible = "[DataModelHasItems( ArmyReorgWindow.GetLeftItems )]"

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Disband this army."
									align = left
								}
								blockoverride "disabled" {
									visible = "[Not(ArmyReorgWindow.CanDisband)]"
								}
								enabled = "[ArmyReorgWindow.CanDisband]"
								onclick = "[ArmyReorgWindow.DisbandLeft]"
							}
						}

						expand = { }
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Not(GetVariableSystem.Exists('ungrouped_units'))]"

				#types to new
				vbox = {
					visible = "[GetVariableSystem.Exists('moving_to_old')]"
					layoutpolicy_horizontal = expanding
					datacontext = "[ArmyReorgWindow.GetLeftArmy]"
					datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
					datamodel = "[CalculateBreakdownItems(Army.Self)]"

					text_single = {
						datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
						raw_text = "Select units to move to [ArmyComposition.GetName]:"
						layoutpolicy_horizontal = expanding
					}

					item = {
						hbox = {
							layoutpolicy_horizontal = expanding

							button_text = {
								visible = "[TroopItem.IsMaa]"
							    blockoverride "text" {
									raw_text = "[TroopItem.GetRegiment.GetRegiment.GetMAAType.GetNameNoTooltip]."
							    }
								onclick = "[GetVariableSystem.Set('move_to_old', TroopItem.GetRegiment.GetRegiment.GetMAAType.GetNameNoTooltip)]"
							}

							button_text = {
								visible = "[TroopItem.IsLevies]"
							    blockoverride "text" {
									raw_text = "Levies."
							    }
								onclick = "[GetVariableSystem.Set('move_to_old', 'levies')]"
							}

							button_text = {
								visible = "[TroopItem.IsKnight]"
							    blockoverride "text" {
									raw_text = "Knights."
							    }
								onclick = "[GetVariableSystem.Set('move_to_old', 'knights')]"
							}

							expand = { }
						}
					}
				}

				# types to old
				vbox = {
					visible = "[Not(GetVariableSystem.Exists('moving_to_old'))]"
					layoutpolicy_horizontal = expanding
					datacontext = "[ArmyReorgWindow.GetLeftArmy]"
					datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
					datamodel = "[CalculateBreakdownItems(Army.Self)]"

					text_single = {
						datacontext = "[ArmyReorgWindow.GetRightArmyComposition]"
						raw_text = "Select units to move to [ArmyComposition.GetName]:"
						layoutpolicy_horizontal = expanding
					}

					item = {
						hbox = {
							layoutpolicy_horizontal = expanding

							button_text = {
								visible = "[TroopItem.IsMaa]"
							    blockoverride "text" {
									raw_text = "[TroopItem.GetRegiment.GetRegiment.GetMAAType.GetNameNoTooltip]."
							    }
								onclick = "[GetVariableSystem.Set('move_to_new', TroopItem.GetRegiment.GetRegiment.GetMAAType.GetNameNoTooltip)]"
							}

							button_text = {
								visible = "[TroopItem.IsLevies]"
							    blockoverride "text" {
									raw_text = "Levies."
							    }
								onclick = "[GetVariableSystem.Set('move_to_new', 'levies')]"
							}

							button_text = {
								visible = "[TroopItem.IsKnight]"
							    blockoverride "text" {
									raw_text = "Knights."
							    }
								onclick = "[GetVariableSystem.Set('move_to_new', 'knights')]"
							}

							expand = { }
						}
					}
				}
			}

			# switch
			hbox = {
			    layoutpolicy_horizontal = expanding
				visible = "[GetVariableSystem.Exists('moving_to_old')]"
				datacontext = "[ArmyReorgWindow.GetRightArmyComposition]"

				button_text = {
					# visible = "[IsDataModelEmpty( ArmyReorgWindow.GetRightItems )]"
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Move units to [ArmyComposition.GetName], hotkey Tab."
					}
					onclick = "[GetVariableSystem.Clear('moving_to_old')]"
					shortcut = action_list
				}

			    expand = { }
			}

			# switch
			hbox = {
			    layoutpolicy_horizontal = expanding
				visible = "[Not(GetVariableSystem.Exists('moving_to_old'))]"

				button_text = {
					visible = "[DataModelHasItems( ArmyReorgWindow.GetRightItems )]"
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
						raw_text = "Move units to [ArmyComposition.GetName], hotkey Tab."
						# raw_text = "Move units to , hotkey Tab."
					}
					onclick = "[GetVariableSystem.Set('moving_to_old', 'yes')]"
					shortcut = action_list
				}

			    expand = { }
			}

			button_text = {
				layoutpolicy_horizontal = expanding
			    blockoverride "text" {
			        raw_text = "Show groupped units, hotkey G."
			    }
				visible = "[GetVariableSystem.Exists('ungrouped_units')]"
				onclick = "[GetVariableSystem.Toggle('ungrouped_units')]"
				shortcut = army_merge
			}

			button_text = {
				layoutpolicy_horizontal = expanding
			    blockoverride "text" {
			        raw_text = "Show all units ungrouped, hotkey G."
			    }
				visible = "[Not(GetVariableSystem.Exists('ungrouped_units'))]"
				onclick = "[GetVariableSystem.Toggle('ungrouped_units')]"
				shortcut = army_merge
			}
		}

		# subunits
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 20

			visible = "[Not(GetVariableSystem.Exists('ungrouped_units'))]"

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[GetVariableSystem.Exists('move_to_new')]"
				blockoverride "scrollbox_margins" {
					margin_top = 20
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						datamodel = "[ArmyReorgWindow.GetLeftItems]"
						layoutpolicy_horizontal = expanding

						item = {
							container = {
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes

								move_regiment = {
									visible = "[And(GetVariableSystem.HasValue('move_to_new', 'levies'), Not(Or(RegimentReorgEntry.IsMaA, Character.IsValid)))]"
								}
								move_regiment = {
									visible = "[And(GetVariableSystem.HasValue('move_to_new', 'knights'),  Character.IsValid)]"
								}

								move_regiment = {
									visible = "[EqualTo_string(GetVariableSystem.Get('move_to_new'), RegimentReorgEntry.GetMaAType.GetNameNoTooltip)]"
								}
							}
						}
					}
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[GetVariableSystem.Exists('move_to_old')]"
				blockoverride "scrollbox_margins" {
					margin_top = 20
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						datamodel = "[ArmyReorgWindow.GetRightItems]"
						layoutpolicy_horizontal = expanding

						item = {
							container = {
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes

								move_regiment = {
									visible = "[And(GetVariableSystem.HasValue('move_to_old', 'levies'), Not(Or(RegimentReorgEntry.IsMaA, Character.IsValid)))]"
								}
								move_regiment = {
									visible = "[And(GetVariableSystem.HasValue('move_to_old', 'knights'),  Character.IsValid)]"
								}

								move_regiment = {
									visible = "[EqualTo_string(GetVariableSystem.Get('move_to_old'), RegimentReorgEntry.GetMaAType.GetNameNoTooltip)]"
								}
							}
						}
					}
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[GetVariableSystem.Exists('ungrouped_units')]"

			text_single = {
				visible = "[Not(GetVariableSystem.Exists('moving_to_old'))]"
				datacontext = "[ArmyReorgWindow.GetRightArmyComposition]"
				raw_text = "Select units to move to [ArmyComposition.GetName]:"
				layoutpolicy_horizontal = expanding
			}

			text_single = {
				visible = "[GetVariableSystem.Exists('moving_to_old')]"
				datacontext = "[ArmyReorgWindow.GetLeftArmyComposition]"
				raw_text = "Select units to move to [ArmyComposition.GetName]:"
				layoutpolicy_horizontal = expanding
			}

		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 20

			visible = "[GetVariableSystem.Exists('ungrouped_units')]"

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[Not(GetVariableSystem.Exists('moving_to_old'))]"
				blockoverride "scrollbox_margins" {
					margin_top = 20
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						datamodel = "[ArmyReorgWindow.GetLeftItems]"
						layoutpolicy_horizontal = expanding

						item = {
							container = {
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes

								move_regiment = {
								}
							}
						}
					}
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[GetVariableSystem.Exists('moving_to_old')]"
				blockoverride "scrollbox_margins" {
					margin_top = 20
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						datamodel = "[ArmyReorgWindow.GetRightItems]"
						layoutpolicy_horizontal = expanding

						item = {
							container = {
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes

								move_regiment = {
								}
							}
						}
					}
				}
			}
		}
	}
}

window = {
	name = "attach_to_army_window"
	size = { 700 100% }
	layer = top

	attachto = {
		widgetid = "army_window"
		stackmode = top
		inherit_data_context = yes
	}

	using = Window_Background_No_Edge

	using = Animation_ShowHide_Quick

	vbox = {
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding
			size = { 0 0 }

			blockoverride "header_text"
			{
				# text = "ATTACH_TO_ARMY_WINDOW_HEADER"
			}

			blockoverride "button_close"
			{
				onclick = "[AttachToArmyWindow.Hide]"
			}
		}


		vbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			visible = "[AttachToArmyWindow.HasSelectedUnit]"
			margin = { 10 0 }

			hbox = {
			    layoutpolicy_horizontal = expanding

				text_single = {
					datacontext = "[AttachToArmyWindow.GetSelectedArmy.GetComposition]"
					raw_text = "Selected [ArmyComposition.GetSoldierCountString] men,"
				}

				text_single = {
					raw_text = " [AttachToArmyWindow.GetSelectedArmy.GetName]."
				}


			    expand = { }
			}


			vbox = {
				layoutpolicy_horizontal = expanding

				button_primary_text = {
					layoutpolicy_horizontal = expanding
					name = "select_button"
					blockoverride "text" {
						text = "ATTACH"
					}
					blockoverride "disabled" {
						visible = "[Not(AttachToArmyWindow.HasSelectedUnit)]"
					}
					blockoverride "hotkey" {
						visible = "[AttachToArmyWindow.HasSelectedUnit]"
					}
					enabled = "[AttachToArmyWindow.HasSelectedUnit]"
					onclick = "[AttachToArmyWindow.AttachToSelected]"
					onclick = "[AttachToArmyWindow.Hide]"
					clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_unit_army_attach"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					name = "close_button"
					blockoverride "text" {
						raw_text = "[Localize('CANCEL')]."

					}
					onclick = "[AttachToArmyWindow.Hide]"
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Select another."
				}
			}
		}

		text_multi = {
			text = "ATTACH_TO_ARMY_WINDOW_TEXT"
			layoutpolicy_horizontal = expanding
			margin_left = 10
			visible = "[Not(AttachToArmyWindow.HasSelectedUnit)]"
		}

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = growing

			blockoverride "scrollbox_content"
			{

				vbox = {
					layoutpolicy_horizontal = expanding
					ignoreinvisible = yes
					spacing = 3

					datamodel = "[AttachToArmyWindow.AccessLocalUnits]"

					item = {
						button_text = {
							layoutpolicy_horizontal = expanding
							onclick = "[AttachToArmyWindow.SelectUnit( UnitItem.Self )]"
							visible = "[Not(AttachToArmyWindow.IsSelectedUnit( UnitItem.Self ))]"
						    blockoverride "pre" {
								spacing = 3
								text_single = {
									datacontext = "[UnitItem.GetArmy.GetComposition]"
									raw_text = "[ArmyComposition.GetSoldierCountString] men,"
								}

								text_single = {
									datacontext = "[UnitItem.GetOwner]"
									raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip]."
								}

								text_single = {
									raw_text = "[UnitItem.GetArmy.GetNameNoTooltip]."
								}
						    }
						}
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################
template reorg_regiment_tooltips {
	hbox = {
		datacontext = "[RegimentReorgEntry.GetKnight]"
		visible = "[Character.IsValid]"

		block "knight_placement" {
			using = tooltip_ws
		}

		tooltipwidget = {
			container_character_tooltip = {
				blockoverride "interaction_info" {
					text = "REORG_INSTRUCTION"
				}
			}
		}
	}

	hbox = {
		datacontext = "[RegimentReorgEntry.GetRegiment.GetRegiment]"
		visible = "[RegimentReorgEntry.IsMaA]"

		block "maa_placement" {
			using = tooltip_ws
		}

		tooltipwidget = {
			using = regiment_container_tooltip

			blockoverride "extra_info" {
				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "REORG_INSTRUCTION"
					margin = { 10 0 }
				}
			}
		}
	}

	hbox = {
		datacontext = "[RegimentReorgEntry.GetRegiment.GetRegiment]"
		visible = "[And( Not( Or( RegimentReorgEntry.IsMaA, RegimentReorgEntry.GetKnight.IsValid ) ), RegimentReorgEntry.GetRegiment.GetFromVassal.IsValid )]"

		block "vassal_placement" {
			using = tooltip_ws
		}
		tooltip = TT_REORG_VASSAL_LEVIES
	}

	hbox = {
		datacontext = "[RegimentReorgEntry.GetRegiment.GetRegiment]"
		visible = "[And( Not( Or( RegimentReorgEntry.IsMaA, RegimentReorgEntry.GetKnight.IsValid ) ), Not( RegimentReorgEntry.GetRegiment.GetFromVassal.IsValid ) )]"

		block "levies_placement" {
			using = tooltip_ws
		}
		tooltip = TT_REORG_LEVIES
	}
}

types ArmyWindow
{
	type multi_unit_button = button {
		gfxtype = updownframedbuttongfx
		framesize = { 50 50 }
		onclick = "[SelectedUnitItem.OnClick]"
		onrightclick = "[SelectedUnitItem.OnRightClick]"
		button_ignore = none
		down = "[SelectedUnitItem.IsShown]"
		effectname = "NoHighlight"

		upframe = 1
		overframe = 2
		downframe = 3
	}

	type army_quality_icon = icon {
		name = "quality_icon"
		texture = "gfx/interface/icons/army_quality_icon.dds"
		framesize = { 32 32 }
		size = { 22 22 }
		frame = "[ArmyComposition.CalcQualityLevel]"
		tooltip = "[ArmyComposition.GetArmyQualityName|T]"
	}

	type unraised_army_quality_icon = icon {
		name = "quality_icon"
		texture = "gfx/interface/icons/army_quality_icon.dds"
		framesize = { 32 32 }
		size = { 22 22 }
		frame = "[ArmyComposition.CalcUnraisedQualityLevel]"
		tooltip = "[ArmyComposition.GetUnraisedArmyQualityName|T]"
	}

	type soldiers_and_quality_big = hbox {
		margin = { 0 2 }
		#TODO check
		# margin_right = 20
		spacing = 5

		vbox = {
			spacing = 2
			layoutpolicy_vertical = expanding

			hbox = {
				text_single = {
					name = "quality_label"
					raw_text = "[ArmyComposition.GetArmyQualityName]."
					tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
				}
				text_single = {
					raw_text = " [Subtract_int32(ArmyComposition.GetMaxNumberOfSoldiers, ArmyComposition.GetCurrentNumberOfSoldiers)] men missing."
					visible = "[GreaterThan_int32(ArmyComposition.GetMaxNumberOfSoldiers, ArmyComposition.GetCurrentNumberOfSoldiers)]"
				}
			}
		}
	}

	type soldiers_and_quality_small = hbox
	{
		margin = {5 5}
		spacing = 5

		tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"

		expand = {
			layoutpolicy_horizontal = expanding
		}

		icon = {
			name = "icon_soldier"
			texture = "gfx/interface/icons/icon_soldier.dds"
			size = { 30 30 }
		}

		vbox = {

			text_single = {
				name = "strength"
				text = "[ArmyComposition.GetSoldierCountString]"
				default_format = "#high"
				align = left
				using = Font_Size_Medium
			}

			progressbar_standard = {
				name = "soldiers_max"
				visible = "[And( NotEqualTo_int32(ArmyComposition.GetCurrentNumberOfSoldiers, ArmyComposition.GetMaxNumberOfSoldiers), NotEqualTo_int32(ArmyComposition.GetMaxNumberOfSoldiers, '(int32)0' ) )]"

				block "spacing"
				{
					size = { 50 8 }
				}

				min = 0
				max = "[IntToFloat(ArmyComposition.GetMaxNumberOfSoldiers)]"
				value = "[IntToFloat(ArmyComposition.GetCurrentNumberOfSoldiers)]"
			}
		}

		army_quality_icon = {
			tooltip_enabled = no
		}

		expand = {
			layoutpolicy_horizontal = expanding
		}
	}

	type hbox_reorg_regiment_entry_core_ocr = flowcontainer {
	    ignoreinvisible = yes
		spacing = 4

		text_single = {
			name = "soldiers"
			raw_text = "[RegimentReorgEntry.GetSoldierCount]"
			visible = "[Not( Character.IsValid )]"
		}

		text_single = {
			name = "prowess"
			visible = "[Character.IsValid]"
			raw_text = "[Character.GetSkill( 'prowess' )] prowess,"
		}

		text_single = {
			name = "name"
			raw_text = "[RegimentReorgEntry.GetName],"
		}

		text_single = {
			raw_text = "from [ArmyRegiment.GetFromVassal.GetNameNoTooltip]."
			visible = "[ArmyRegiment.GetFromVassal.IsValid]"
		}

		text_single = {
			raw_text = "Hired."
			visible = "[RegimentReorgEntry.ShowCoA]"
		}

		text_single = {
			raw_text = "Event troops."
			visible = "[ArmyRegiment.IsEventTroops]"
			tooltip = "TT_REORG_EVENT_TROOPS"
		}

		flowcontainer = {
		    ignoreinvisible = yes
			visible = "[Not( Character.IsValid )]"

			text_single = {
				raw_text = "[Subtract_int32(RegimentReorgEntry.GetMaxSoldierCount, RegimentReorgEntry.GetSoldierCount)] missing."
				visible = "[GreaterThan_int32(RegimentReorgEntry.GetMaxSoldierCount, RegimentReorgEntry.GetSoldierCount)]"
			}
		}
	}

	type move_regiment = button_text {
		datacontext = "[RegimentReorgEntry.GetKnight]"
		datacontext = "[RegimentReorgEntry.GetRegiment]"
		layoutpolicy_horizontal = expanding

		blockoverride "text" {
			raw_text = ""
		}

		blockoverride "extra" {
			hbox_reorg_regiment_entry_core_ocr = { }
		}
		block "onclick" {
			onclick = "[RegimentReorgEntry.MoveRegiment]"
		}
	}

	type hbox_reorg_regiment_entry_core = hbox
	{
		datacontext = "[RegimentReorgEntry.GetKnight]"
		datacontext = "[RegimentReorgEntry.GetRegiment]"

		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		margin = { 5 0 }
		spacing = 5

		hbox = {
			name = "icon"

			highlight_icon = {
				name = "men_at_arms_icon"
				datacontext = "[RegimentReorgEntry.GetMaAType]"
				visible = "[RegimentReorgEntry.IsMaA]"
				size = { 35 35 }
				texture = "[MenAtArmsType.GetIcon]"
			}

			highlight_icon = {
				name = "levies_icon"
				visible = "[Not( Or( RegimentReorgEntry.IsMaA, Character.IsValid ) )]"
				size = { 35 35 }
				texture = "gfx/interface/icons/icon_soldier.dds"
			}

			highlight_icon = {
				name = "knight_icon"
				visible = "[Character.IsValid]"
				size = { 35 35 }
				texture = "gfx/interface/icons/icon_knight_small.dds"
			}
		}

		text_single = {
			name = "name"
			layoutpolicy_horizontal = expanding
			text = "[RegimentReorgEntry.GetName]"
		}

		coa_realm_tiny = {
			name = "hired_coa"
			visible = "[RegimentReorgEntry.ShowCoA]"
			datacontext = "[RegimentReorgEntry.GetCoATitle.GetHolder]"
		}

		icon = {
			name = "event_troops"
			visible = "[ArmyRegiment.IsEventTroops]"
			texture = "gfx/interface/icons/icon_special_troops.dds"
			size = { 36 36 }
			tooltip = "TT_REORG_EVENT_TROOPS"
		}

		text_single = {
			name = "prowess"
			visible = "[Character.IsValid]"
			text = "[prowess_i][Character.GetSkill( 'prowess' )]"
			default_format = "#high"
		}

		vbox = {
			name = "soldiers"
			visible = "[Not( Character.IsValid )]"
			tooltip = "TT_REORG_SOLDIERS"

			text_single = {
				name = "soldiers"
				text = "[RegimentReorgEntry.GetSoldierCount]"
				default_format = "#high"
			}

			progressbar_standard = {
				name = "soldiers_max"
				# visible = "[NotEqualTo_int32(RegimentReorgEntry.GetMaxSoldierCount, RegimentReorgEntry.GetSoldierCount)]"
				size = { 50 10 }
				min = 0
				max = "[IntToFloat(RegimentReorgEntry.GetMaxSoldierCount)]"
				value = "[IntToFloat(RegimentReorgEntry.GetSoldierCount)]"
			}
		}
	}

	type forts_list = vbox {
		layoutpolicy_horizontal = expanding

		state = {
			name = "hide_fort_group"
			block "hide_all" {
				on_start = "[GetVariableSystem.Set('adjacent_hostile_forts', 'yes')]"
			}
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			blockoverride "text" {
				block "title" {
					raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('adjacent_hostile_forts'))] forts bordering you or ally,"
				}
			}
			blockoverride "extra" {
				text_single = {
					block "shortcut" {
						raw_text = " Click"
					}
				}
				text_single = {
					raw_text = " to hide."
					block "shown" {
						visible = "[Not(GetVariableSystem.Exists('adjacent_hostile_forts'))]"
					}
				}
				text_single = {
					raw_text = " to show."
					block "hidden" {
						visible = "[GetVariableSystem.Exists('adjacent_hostile_forts')]"
					}
				}

			}
			block "hide" {
				shortcut = speed_3
				onclick = "[GetVariableSystem.Toggle('adjacent_hostile_forts')]"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			block "shown" {
				visible = "[Not(GetVariableSystem.Exists('adjacent_hostile_forts'))]"
			}

			button_text = {
				block "expanded" {
					visible = "[GetVariableSystem.Exists('expand_adjacent_hostile_forts')]"
				}
				block "expand" {
					onclick = "[GetVariableSystem.Toggle('expand_adjacent_hostile_forts')]"
				}
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					raw_text = "Showing all. Click to limit to 3."
				}
			}

			fixedgridbox = {
				block "collapsed" {
					visible = "[Not(GetVariableSystem.Exists('expand_adjacent_hostile_forts'))]"
				}
				layoutpolicy_horizontal = expanding
				block "datamodel" {
					datamodel = "[GetPlayer.MakeScope.GetList('adjacent_hostile_forts')]"
				}
				addrow = 23
				addcolumn = 500
				maxverticalslots = 3

				item = {
					hostile_fort_item = {
						blockoverride "border" {
						}
					}
				}
			}

			fixedgridbox = {
				layoutpolicy_horizontal = expanding
				block "expanded" {
					visible = "[GetVariableSystem.Exists('expand_adjacent_hostile_forts')]"
				}
				block "datamodel" {
					datamodel = "[GetPlayer.MakeScope.GetList('adjacent_hostile_forts')]"
				}
				addrow = 23
				addcolumn = 500

				item = {
					hostile_fort_item = {
						blockoverride "border" {
						}
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				block "more" {
					visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('adjacent_hostile_forts')), '(int32)3')]"
				}
				button_text = {
					block "expand" {
						onclick = "[GetVariableSystem.Toggle('expand_adjacent_hostile_forts')]"
					}
					block "collapsed" {
						visible = "[Not(GetVariableSystem.Exists('expand_adjacent_hostile_forts'))]"
					}
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Show more."
					}
				}
			}
		}
	}

	type resupply_item = button_text {
		datacontext = "[Scope.GetProvince]"
		using = send_army_click
		blockoverride "extra" {
			spacing = 3

			text_single = {
				visible = "[Not(ObjectsEqual(Army.GetLocation.GetId, Province.GetId))]"
				raw_text = "ArmyProvinceDistance"
			}

			text_single = {
				visible = "[ObjectsEqual(Army.GetLocation.GetId, Province.GetId)]"
				raw_text = "Here."
			}

			text_single = {
				raw_text = "[Province.GetNameNoTooltip],"
			}


			text_single = {
				raw_tooltip = "[Province.GetSupplyLimitDescFor( GetPlayer )]"
				raw_text = "[Province.GetSupplyLimitFor( GetPlayer )] supply."
			}

			text_single = {
				visible = "[GreaterThan_CFixedPoint(Province.MakeScope.ScriptValue('armies_present_here'), '(CFixedPoint)0')]"
				raw_text = "[Province.MakeScope.ScriptValue('armies_present_here')] armies present."
			}

			# text_single = {
			# 	raw_text = "[GuiScope.SetRoot(Province.MakeScope).AddScope('player', GetPlayer.MakeScope ).ScriptValue('supply_limit_true')] left"
			# 	# tooltipwidget = {
			# 	# 	flowcontainer = {
			# 	# 		ignoreinvisible = yes
			# 	# 		direction = vertical
			# 	#
			# 	# 		using = DefaultTooltipBackground
			# 	#
			# 	# 		text_single = {
			# 	# 			raw_text = "[Province.GetSupplyLimitDescFor( GetPlayer )]"
			# 	# 		}
			# 	#
			# 	# 		text_single = {
			# 	# 			raw_text = "[Province.MakeScope.ScriptValue('armies_present_here')] other armies present."
			# 	# 		}
			# 	# 	}
			# 	# }
			# 	raw_tooltip = "[Province.GetSupplyLimitDescFor( GetPlayer )]"
			# }

			container = {
				ignoreinvisible = yes
				text_single = {
					raw_text = " Mild winter."
					visible = "[Province.HasWinterLevel( '(int32)1' )]"
				}

				text_single = {
					raw_text = " Winter."
					visible = "[Province.HasWinterLevel( '(int32)2' )]"
				}

				text_single = {
					raw_text = " Harsh winter."
					visible = "[Province.HasWinterLevel( '(int32)3' )]"
				}
				tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
			}

			text_single = {
				raw_text = "[Province.GetTerrain.GetName]"
			}

			text_single = {
				visible = "[Not(Province.GetHolding.IsEmpty)]"
				raw_text = "[Province.GetHolding.GetType.GetName],"
			}

			text_single = {
				visible = "[Province.HasFort]"
				raw_text = "fort level [Province.GetFortLevel]."
			}
		}
	}

	type battle_button = vbox {
		layoutpolicy_horizontal = expanding
		button_text = {
			layoutpolicy_horizontal = expanding
			block "click" {
				using = send_army_click
			}
			datacontext = "[Scope.Province]"
			blockoverride "pre" {
				spacing = 3
				text_single = {
					raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Province.MakeScope).ScriptValue('allies_in_the_province')]"
				}
				text_single = {
					raw_text = "against"
				}
				text_single = {
					raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Province.MakeScope).ScriptValue('enemies_in_the_province')] enemies."
				}
			}
		}
		button_text = {
			layoutpolicy_horizontal = expanding
			block "click" {
				using = send_army_click
			}
			datacontext = "[Scope.Province]"
			blockoverride "pre" {
				spacing = 3

				text_single = {
					block "distance" {
						datacontext = "[ArmyWindow.GetArmy]"
						raw_text = "ArmyProvinceDistance"
					}
				}

				text_single = {
					raw_text = "[Province.GetTerrain.GetName] of"
				}

				text_single = {
					raw_text = "[Province.GetNameNoTooltip]."
				}
			}
		}
	}

	type battles_categories = vbox {
		layoutpolicy_horizontal = expanding

		# battles
		button_outliner_header = {
			layoutpolicy_horizontal = expanding
			visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('battles'))))]"


			blockoverride "button_expand_frame"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('battles'))]"
			}

			blockoverride "oh_button"
			{
				onclick = "[GetVariableSystem.Toggle('battles')]"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
			}

			state = {
				name = close_outliner_categories
				on_finish = "[GetVariableSystem.Set('battles', 'yes')]"
			}

			blockoverride "oh_toggle_frame"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('battles'))]"
			}

			blockoverride "oh_name"
			{
				raw_text = "battle[AddTextIf(GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('battles')), '(int32)1'), 's')]"

			}

			blockoverride "extra" {
				text_single = {
					raw_text = ", click to [Select_CString(GetVariableSystem.Exists('battles'), 'show', 'hide')]"
					# visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('battles')), '(int32)1')]"
				}
			}

			blockoverride "oh_count"
			{
				raw_text = "Your [GetDataModelSize(GetPlayer.MakeScope.GetList('battles'))]"
			}
			blockoverride "expanded"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('battles'))]"
			}
		}

		# battles
		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 8 0 }
			visible = "[And(And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('battles')))), Not(GetVariableSystem.Exists('battles')))]"

			vbox = {
				datamodel = "[GetPlayer.MakeScope.GetList('battles')]"
				layoutpolicy_horizontal = expanding
				spacing = -2

				item = {
					battle_button = { }
				}
			}
		}

		# allied battles
		button_outliner_header = {
			layoutpolicy_horizontal = expanding
			visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('battles_allies'))))]"


			blockoverride "button_expand_frame"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('battles_allies'))]"
			}

			blockoverride "oh_button"
			{
				onclick = "[GetVariableSystem.Toggle('battles_allies')]"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
			}

			state = {
				name = close_outliner_categories
				on_finish = "[GetVariableSystem.Set('battles_allies', 'yes')]"
			}

			blockoverride "oh_toggle_frame"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('battles_allies'))]"
			}

			blockoverride "oh_name"
			{
				raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('battles_allies'))] allied battle[AddTextIf(GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('battles_allies')), '(int32)1'), 's')]"

			}

			blockoverride "extra" {
				text_single = {
					raw_text = ", click to [Select_CString(GetVariableSystem.Exists('battles_allies'), 'show', 'hide')]"
					# visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('battles')), '(int32)1')]"
				}
			}

			blockoverride "oh_count"
			{
				raw_text = ""
			}
			blockoverride "expanded"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('battles_allies'))]"
			}
		}

		# allied battles
		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 8 0 }
			visible = "[And(And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('battles_allies')))), Not(GetVariableSystem.Exists('battles_allies')))]"

			vbox = {
				datamodel = "[GetPlayer.MakeScope.GetList('battles_allies')]"
				layoutpolicy_horizontal = expanding
				spacing = -2

				item = {
					battle_button = { }
				}
			}
		}
	}
}


template send_army_click {
	onclick = "[DefaultOnCoatOfArmsRightClick(Province.GetCoATitle.GetID)]"
	onrightclick = "[DefaultOnCoatOfArmsRightClick(Province.GetCoATitle.GetID)]"
	onclick = "[GetVariableSystem.Set('sending_army', Province.GetNameNoTooltip)]"
	onclick = "[GetVariableSystem.Set('sending_army_county', Province.GetCounty.GetTitle.GetNameNoTierNoTooltip)]"
	onclick = "[PdxGuiTriggerAllAnimations('hide_army_window')]"
}

template send_army_click_county {
	onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
	onrightclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
	onclick = "[GetVariableSystem.Set('sending_army', Title.GetProvince.GetNameNoTooltip)]"
	onclick = "[GetVariableSystem.Set('sending_army_county', Title.GetNameNoTierNoTooltip)]"
	onclick = "[PdxGuiTriggerAllAnimations('hide_army_window')]"
}