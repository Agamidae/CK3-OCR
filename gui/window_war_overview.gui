### WAR OVERVIEW WINDOW
window = {
	gfxtype = windowgfx
	name = "war_overview_window"
	parentanchor = top|right
	layer = windows_layer
	movable = no

	size = { 100% 100% }

	state = {
		name = _show
		on_start = "[PdxGuiTriggerAllAnimations('war_overview_show')]"
		using = Animation_FadeIn_Quick
		# using = Window_Position_MainTab
		start_sound = {
			soundeffect = "event:/SFX/UI/War/sfx_ui_window_war_show"
		}
	}

	state = {
		name = _hide
		on_start = "[PdxGuiTriggerAllAnimations('war_overview_hide')]"
		duration = 0.1
		start_sound = {
			soundeffect = "event:/SFX/UI/War/sfx_ui_window_war_hide"
		}
	}

	buttons_window_control = {
		blockoverride "button_close"
		{
			onclick = "[WarOverviewWindow.Close]"
			onclick = "[PdxGuiTriggerAllAnimations('ally_list_hide')]"
			onclick = "[GetVariableSystem.Clear( 'characterlist_left' )]"
			onclick = "[GetVariableSystem.Clear( 'characterlist_right' )]"
		}
	}

	widget = {
		using = Window_Size_MainTab
		parentanchor = right
		visible = "[Not(GetVariableSystem.Exists('ocr'))]"

		#background
		widget = {
			parentanchor = top|right
			size = { 100% 100% }

			state = {
				name = _show
				using = Animation_FadeIn_Quick
				position_x = 0
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
				position_x = 40
			}


			margin_widget = {
				size = { 100% 100% }

				using = Window_Background

				blockoverride "bg_margins"
				{
					margin_right = 10
					margin_left = -23
				}
			}
		}
		flowcontainer = {
			direction = vertical
			margin_bottom = 30
			ignoreinvisible = yes
			spacing = 5
			margin_left = 45

			flowcontainer = {
				direction = vertical

				text_single = {
					raw_text = "[WarOverviewWindow.GetWar.GetName]. [WarOverviewWindow.GetWar.GetActiveCasusBelli.GetType.GetName] casus belli."
				}

				flowcontainer = {
					direction = vertical
					tooltip = "[WarOverviewWindow.GetWarScoreTooltip]"

					flowcontainer = {
						spacing = 3
						text_single = {
							name = "warscore"
							raw_text = "[WarOverviewWindow.GetWarScore] war score."
						}

						# text_single = {
						# 	raw_text = "[Concept('war_score','This tooltip explains war score.')|E]"
						# }
					}
				}

				flowcontainer = {
					spacing = 3
					text_single = {
						raw_text = "[ArmyComposition.GetSoldierCountString] men"
						datacontext = "[WarOverviewWindow.GetLeftSideComposition]"
					}
					text_single = {
						raw_text = "versus"
					}

					text_single = {
						raw_text = "[ArmyComposition.GetSoldierCountString]."
						datacontext = "[WarOverviewWindow.GetRightSideComposition]"
					}
				}

				### BUTTONS ###
				flowcontainer = {
					margin_top = 10
					direction = vertical
					name = "tab_buttons"

					button_text = {
						blockoverride "text" {
							raw_text = "TAB_VICTORY"
						}
						blockoverride "pre" {
							text_single = {
								raw_text = "You can  "
								align = left
								visible = "[WarOverviewWindow.CanSendVictoryDemand]"
							}
						}
						blockoverride "dot" {
						}
						onclick = "[PdxGuiTriggerAllAnimations('war_end_terms_refresh')]"
						onclick = "[WarOverviewWindow.SetEffectsTabVictory]"
						down = "[WarOverviewWindow.IsEffectsTabVictory]"
					}

					button_text = {
						blockoverride "text" {
							raw_text = "TAB_WHITE_PEACE"
						}
						onclick = "[PdxGuiTriggerAllAnimations('war_end_terms_refresh')]"
						onclick = "[WarOverviewWindow.SetEffectsTabWhitePeace]"
						down = "[WarOverviewWindow.IsEffectsTabWhitePeace]"
						visible = "[WarOverviewWindow.GetWar.GetActiveCB.GetType.IsWhitePeacePossible]"
						blockoverride "dot" {

						}
					}

					button_text = {
						blockoverride "text" {
							raw_text = "TAB_DEFEAT"
						}
						onclick = "[PdxGuiTriggerAllAnimations('war_end_terms_refresh')]"
						onclick = "[WarOverviewWindow.SetEffectsTabDefeat]"
						down = "[WarOverviewWindow.IsEffectsTabDefeat]"
						blockoverride "dot" {

						}
					}
				}
			}

			#TODO scrollbox

			flowcontainer = {
				direction = vertical

				flowcontainer = {
					text_single = {
						text = "WAR_OVERVIEW_STARTED"
					}

					dot = { }

					text_single = {
						raw_text = " [WarOverviewWindow.GetWar.GetActiveCB.GetType.GetName] Casus Belli."
					}
				}


				text_single = {
					raw_text = "War score breakdown:"
				}

				text_single = {
					raw_text = "[WarOverviewWindow.GetTickingWarScore] from objectives."
					tooltip = "[WarOverviewWindow.GetTickingWarScoreTooltip]"
				}

				text_single = {
					raw_text = "[WarOverviewWindow.GetBattlesWarScore] from battles.[AddTextIf(WarOverviewWindow.IsBattlesWarScoreCapped, ' Maximum reached.')]"
					tooltip = "[WarOverviewWindow.GetBattlesWarScoreTooltip]"
				}

				text_single = {
					raw_text = "[WarOverviewWindow.GetOccupationWarScore] from occupations."
					tooltip = "[WarOverviewWindow.GetOccupationWarScoreTooltip]"
				}

				text_single = {
					raw_text = "[WarOverviewWindow.GetImprisonmentWarScore] from prisoners."
					tooltip = "[WarOverviewWindow.GetImprisonmentWarScoreTooltip]"
				}
			}
			#participants
			flowcontainer = {
				direction = vertical
				ignoreinvisible = yes

				flowcontainer = {
					datacontext = "[WarOverviewWindow.GetLeftSideLeaderItem]"
					direction = vertical
					datacontext = "[WarParticipantItem.GetCharacter]"

					text_single = {
						raw_text = "[WarOverviewWindow.GetLeftSideHeader]:"
					}

					flowcontainer = {
						soldiers_and_quality_small_text = {
							datacontext = "[WarOverviewWindow.GetLeftSideComposition]"
							blockoverride "tooltip" {
							}
						}
					}
					realm_name = {
						blockoverride "pre" {
							text_single = {
								raw_text = "Leader:"
							}
						}
						blockoverride "width" {
							max_width = 600
						}
					}
				}
				text_single = {
					raw_text = "No allies."
					visible = "[IsDataModelEmpty(WarOverviewWindow.GetLeftSideParticipantItems)]"
				}
				button_text = {
					visible = "[DataModelHasItems(WarOverviewWindow.GetLeftSideParticipantItems)]"
					blockoverride "text" {
						raw_text = "[GetDataModelSize(WarOverviewWindow.GetLeftSideParticipantItems)] allies, Click to [Select_CString(GetVariableSystem.Exists('left_allies'), 'hide', 'show')]."
					}
					onclick = "[GetVariableSystem.Toggle( 'left_allies' )]"
				}
				flowcontainer = {
					direction = vertical
					visible = "[GetVariableSystem.Exists('left_allies')]"
					datamodel = "[WarOverviewWindow.GetLeftSideParticipantItems]"

					item = {
						flowcontainer = {
							spacing = 3
							soldiers_and_quality_small_text = {
								datacontext = "[WarParticipantItem.GetComposition]"
							}
							realm_name = {
								datacontext = "[WarParticipantItem.GetCharacter]"
							}
						}
					}
				}

				flowcontainer = {
					direction = vertical
					datacontext = "[WarOverviewWindow.GetRightSideLeaderItem]"

					text_single = {
						raw_text = "[WarOverviewWindow.GetRightSideHeader]:"
					}

					flowcontainer = {
						soldiers_and_quality_small_text = {
							datacontext = "[WarOverviewWindow.GetRightSideComposition]"
						}
					}
					realm_name = {
						datacontext = "[WarParticipantItem.GetCharacter]"
						blockoverride "pre" {
							text_single = {
								raw_text = "Leader:"
							}
						}
						blockoverride "width" {
							max_width = 600
						}
					}
				}
				text_single = {
					raw_text = "No allies."
					visible = "[IsDataModelEmpty(WarOverviewWindow.GetRightSideParticipantItems)]"
				}
				button_text = {
					visible = "[DataModelHasItems(WarOverviewWindow.GetRightSideParticipantItems)]"
					blockoverride "text" {
						raw_text = "[GetDataModelSize(WarOverviewWindow.GetRightSideParticipantItems)] allies, Click to [Select_CString(GetVariableSystem.Exists('right_allies'), 'hide', 'show')]."
					}
					onclick = "[GetVariableSystem.Toggle( 'right_allies' )]"
				}
				flowcontainer = {
					direction = vertical
					visible = "[GetVariableSystem.Exists('right_allies')]"
					datamodel = "[WarOverviewWindow.GetRightSideParticipantItems]"

					item = {
						flowcontainer = {
							soldiers_and_quality_small_text = {
								datacontext = "[WarParticipantItem.GetComposition]"
							}
							text_single = {
								raw_text = "[WarParticipantItem.GetCharacter.GetName]."
							}
						}
					}
				}
			}

			#crusade
			flowcontainer = {
				direction = vertical

				flowcontainer = {
					direction = vertical
					datacontext = "[WarOverviewWindow.GetPlayerParticipantItem]"
					visible = "[WarParticipantItem.ShowContribution]"
					visible_at_creation = no

					text_multi = {
						autoresize = yes
						min_width = 590
						max_width = 590

						raw_text = "[WarParticipantItem.GetContributionTooltip]."
					}

					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical
						name = "rank_and_total_score"

						flowcontainer = {
							visible = "[And( WarOverviewWindow.ShowContributionRank, GreaterThan_int32( WarOverviewWindow.GetContributionRank(GetPlayer), '(int32)0' ) )]"
							text_single = {
								text = "WAR_OVERVIEW_CONTRIBUTION_RANK"
							}

							text_single = {
								raw_text = " rank."
							}

						}

						text_single = {
							raw_text = "[WarParticipantItem.GetContributionPercentage|%] share."
						}

						text_single = {
							name = "score"
							raw_text = "[WarParticipantItem.GetContribution] contribution."
						}
					}
				}

				flowcontainer = {
					name = "ghw_info"
					visible = "[WarOverviewWindow.ShowBeneficiary]"
					visible_at_creation = no
					direction = vertical

					text_single = {
						name = "beneficiary"
						text = "WAR_OVERVIEW_BENEFICIARY"
					}

					text_single = {
						name = "beneficiary_name"
						raw_text = "[WarOverviewWindow.GetBeneficiaryName]."
					}

					# widget = {
					# 	size = { 0 3 }
					# }

					# button_text = {
					# 	name = "change_beneficiary"
					# 	onclick = "[OpenCharacterInteraction( 'select_ghw_beneficiary_interaction', GetPlayer )]"
					#
					# 	blockoverride "text" {
					# 		raw_text = "Select beneficiary."
					# 	}
					# }
				}
			}
		}

		#### WAR END TERMS ###
		margin_widget = {
			visible = "[WarOverviewWindow.IsPeaceTermsOpen]"
			visible_at_creation = no
			layoutpolicy_horizontal = expanding
			size = { 100% 100% }
			scissor = yes

			state = {
				name = _show
				duration = 0.1
				using = Animation_Curve_Default

				alpha = 1
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_standard_show"
				}
			}

			state = {
				name = _hide
				duration = 0.3
				using = Animation_Curve_Default

				alpha = 0
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_standard_hide"
				}
			}

			vbox = {
				margin_top = 5
				margin_bottom = 30

				vbox = {
					using = Window_Background

					blockoverride "bg_margins"
					{
						margin_right = 15
						margin_left = -23
					}
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_left = 40


					state = {
						name = "war_end_terms_refresh"
						next = "b"
						using = Animation_Refresh_FadeOut
						duration = 0.1
					}

					state = {
						name = "b"
						using = Animation_Refresh_FadeIn
						duration = 0.1
					}
					### SEND BUTTON
					button_primary_text = {
						layoutpolicy_horizontal = expanding
						name = "send_button"
						visible = "[WarOverviewWindow.IsPlayerParticipant]"
						blockoverride "text" {
							raw_text = "[WarOverviewWindow.GetSendButtonLabel]."

						}
						blockoverride "disabled" {
							visible = "[Not(WarOverviewWindow.CanSend)]"
						}
						blockoverride "hotkey" {
							visible = "[WarOverviewWindow.CanSend]"
						}
						enabled = "[WarOverviewWindow.CanSend]"
						onclick = "[WarOverviewWindow.Send]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_advance"
						tooltip = "[WarOverviewWindow.GetSendButtonTooltip]"
					}

					flowcontainer = {
						direction = vertical
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								# raw_text = "Close this view, Escape."
							}
							onclick = "[WarOverviewWindow.SetEffectsTabVictory]"
							visible = "[WarOverviewWindow.IsEffectsTabVictory]"
							shortcut = close_window

							# #TODO
							# state = {
							# 	trigger_on_create = yes
							# 	on_finish = "[WarOverviewWindow.SetEffectsTabVictory]"
							# }
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								# raw_text = "Close this view, Escape."
							}
							onclick = "[WarOverviewWindow.SetEffectsTabDefeat]"
							visible = "[WarOverviewWindow.IsEffectsTabDefeat]"
							shortcut = close_window
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								# raw_text = "Close this view, Escape."
							}
							onclick = "[WarOverviewWindow.SetEffectsTabWhitePeace]"
							visible = "[WarOverviewWindow.IsEffectsTabWhitePeace]"
							shortcut = close_window
						}

					}

					text_single = {
						layoutpolicy_horizontal = expanding
						# visible = "[And(WarOverviewWindow.IsPlayerParticipant, WarOverviewWindow.NeedsAnswer)]"
						raw_text = "[WarOverviewWindow.GetAnswerScore|0] reasons, [WarOverviewWindow.GetAnswer]. See tooltip."
						tooltip = "[WarOverviewWindow.GetAnswerReason]"
						visible = no
					}

					text_multi = {
						visible = "[And(WarOverviewWindow.IsPlayerParticipant, WarOverviewWindow.NeedsAnswer)]"
						layoutpolicy_horizontal = expanding
						raw_text = "[WarOverviewWindow.GetAnswerReason]."
						autoresize = yes
						max_width = 580
					}

					# progressbar_standard = {
					# 	visible = "[And(WarOverviewWindow.IsPlayerParticipant, WarOverviewWindow.NeedsAnswer)]"
					# 	name = "answer_chance"
					# 	size = { 300 35 }
					# 	position = { 0 6 }
					# 	value = "[WarOverviewWindow.GetAnswerScore]"
					# 	parentanchor = hcenter
					# }

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content"
						{
							vbox = {
								name = "effects_text"

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "If you win:"
									visible = "[WarOverviewWindow.IsEffectsTabVictory]"
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "If you lose:"
									visible = "[WarOverviewWindow.IsEffectsTabDefeat]"
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "if you white peace:"
									visible = "[WarOverviewWindow.IsEffectsTabWhitePeace]"
								}

								text_single = {
									name = "main_end_war_effect"
									autoresize = yes
									maximumsize = { 580 -1 }
									minimumsize = { 580 -1 }
									text = "[WarOverviewWindow.GetCurrentTabMainOutputDescription]"
									default_format = "#high"
									multiline = yes
									margin_bottom = 5
								}

								text_single = {
									name = "other_end_war_effects"
									autoresize = yes
									maximumsize = { 580 -1 }
									minimumsize = { 580 -1 }
									text = "[WarOverviewWindow.GetCurrentTabEffectsDescription]"
									multiline = yes
									margin_bottom = 5
								}
							}
						}
					}
				}
			}
		}
	}

	old_war_overview = {
		parentanchor = bottom|hcenter
		visible = "[GetVariableSystem.Exists('ocr')]"
	}
}

template Background_WarOverview
{
	texture = "gfx/interface/window_war/window_background.dds"
	spriteType = Corneredtiled
	spriteborder_right = 410
	spriteborder_bottom = -10
}

template Background_WarOverview_2
{
	texture = "gfx/interface/window_war/window_background_2.dds"
	spriteType = Corneredtiled
	spriteborder_bottom = -10
}

template Background_WarOverview_Pattern
{
	texture = "gfx/interface/component_masks/patterns/mask_pattern_03.dds"
	spriteType = corneredtiled
	color = { 0.1 0.1 0.12 1 }
	texture_density = 0.6

	modify_texture = {
		texture = "gfx/interface/window_war/window_background.dds"
		blend_mode = alphamultiply
	}

	modify_texture = {
		texture = "gfx/interface/component_masks/mask_clouds.dds"
		blend_mode = alphamultiply
	}
}

template Background_WarOverview_Pattern_2
{
	texture = "gfx/interface/component_masks/patterns/mask_pattern_03.dds"
	spriteType = corneredtiled
	color = { 0.1 0.1 0.12 1 }
	texture_density = 0.6

	modify_texture = {
		texture = "gfx/interface/window_war/window_background_2.dds"
		blend_mode = alphamultiply
	}

	modify_texture = {
		texture = "gfx/interface/component_masks/mask_clouds.dds"
		blend_mode = alphamultiply
	}
}

template Background_WarOverview_Frame
{
	texture = "gfx/interface/window_war/window_frame.dds"
	spriteType = Corneredtiled
	spriteborder_right = 410
	spriteborder_bottom = -10
}

template Background_WarOverview_Frame_2
{
	texture = "gfx/interface/window_war/window_frame_2.dds"
	spriteType = Corneredtiled
	spriteborder_bottom = -10
}

template Background_WarOverview_Ally
{

	background = {
		using = Background_Area_Solid
		margin = { 10 0 }
		margin_top = -145
		margin_bottom = -85
	}

	background = {
		texture = "gfx/portraits/portrait_frame.dds"
		using = Color_Grey
		margin = { 5 -5 }
		margin_top = -150
		margin_bottom = -90

		alpha = 0.4

		spriteType = Corneredtiled
		spriteborder = { 3 3 }
	}
}

template Background_WarOverview_3
{
	background = {
		name = "background"
		texture = "gfx/interface/component_tiles/tile_window_background_no_edge.dds"

		spriteType = Corneredtiled
		spriteborder = { 5 5 }
		color = { 1.77 1.77 1.80 1 }
		texture_density = 2

		margin_top = -120
		alpha = 0.5

		modify_texture = {
			texture = "gfx/interface/component_overlay/overlay_window.dds"
			blend_mode = overlay
		}
	}

	background = {
		texture = "gfx/interface/component_tiles/tile_frame_subwindow_01.dds"

		spriteType = Corneredtiled
		spriteborder = { 10 10 }

		margin = { 5 0}
		margin_top = -114
	}
}

### ANIMATIONS
template Animation_WarOverview_Blood
{
	state = {
		name = "war_overview_show"
		next = b
		delay = 0.5
		alpha = 0
	}

	state = {
		name = b
		duration = 3.5
		alpha = 1
	}

	state = {
		name = "war_overview_hide"
		duration = 0.25
		using = Animation_Curve_Default
		alpha = 0
	}
}

types WarOverView
{
	# I don't understand why it doesn't work??!?
	type war_side_new = flowcontainer {
		direction = vertical
		datacontext = "[WarParticipantItem.GetCharacter]"

		text_single = {
			block "header" {
				raw_text = "[WarOverviewWindow.GetLeftSideHeader]:"
			}
		}

		flowcontainer = {
			soldiers_and_quality_small_text = {
				block "soldiers" {
					datacontext = "[WarOverviewWindow.GetLeftSideComposition]"
				}
			}
			realm_name = {
				blockoverride "pre" {
					text_single = {
						raw_text = "Leader:"
					}
				}
				blockoverride "width" {
					max_width = 600
				}
			}
		}
	}

	type icon_blood_splatter = highlight_icon {
		size = { 474 270 }
		parentanchor = bottom|hcenter

		texture = "gfx/interface/window_war/blood.dds"
		spriteType = Corneredtiled
		spriteborder_right = 410

		modify_texture = {
			name = "mask"
			texture = "gfx/interface/window_war/window_frame_broken.dds"
			blend_mode = mask
		}

		using = Animation_WarOverview_Blood
	}

	type icon_blood_splatter_2 = highlight_icon {
		size = { 350 270 }
		parentanchor = bottom|hcenter

		texture = "gfx/interface/window_war/blood_2.dds"
		spriteType = Corneredtiled
		spriteborder = { 238 0 }
		spriteborder_bottom = -10

		modify_texture = {
			name = "mask"
			texture = "gfx/interface/component_masks/mask_fade_circle.dds"
			blend_mode = mask
		}

		using = Animation_WarOverview_Blood
	}

	type icon_cloth_tears = highlight_icon {
		size = { 474 280 }
		parentanchor = bottom|hcenter

		texture = "gfx/interface/window_war/window_frame_broken.dds"
		spriteType = Corneredtiled
		spriteborder_right = 410
		spriteborder_bottom = -10

		using = Animation_ShowHide_Standard
	}

	type icon_cloth_tears_2 = highlight_icon {
		size = { 350 280 }
		parentanchor = bottom|hcenter

		texture = "gfx/interface/window_war/window_frame_broken_2.dds"
		spriteType = Corneredtiled
		spriteborder_bottom = -10

		using = Animation_ShowHide_Standard
	}
}

