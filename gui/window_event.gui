######################################################
################### EVENT WINDOW #####################
######################################################

base_event_window = {
	name = "event_window"
	using = TooltipFocus

	blockoverride "window_content"
	{
		vbox = {
			name = "event_window"
			margin = { 5 5 }


			widget = {
				name = "text"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					name = "description_and_options"
					alpha = 0

					state = {
						name = appear
						trigger_on_create = yes

						using = Animation_Curve_Default
						alpha = 1

					}

					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin_top = 25

						visible = "[Not(GetVariableSystem.Exists('event_desc'))]"

						scrollarea = {
							name = "description_scrollarea"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							minimumsize = { 900 -1 }
							maximumsize = { 900 -1 }

							scrollbarpolicy_horizontal = always_off

							scrollbar_vertical = {
								using = Scrollbar_Vertical

								blockoverride "alpha"{
									alpha = 0.6
								}
							}

							scrollwidget = {
								text_multi = {
									name = "description"
									minimumsize = { 900 -1 }
									maximumsize = { 900 -1 }
									autoresize = yes
									text = "[EventWindowData.GetDescription]"
								}
							}
						}

						expand = { }
					}

					vbox = {
						allow_outside = yes
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes

						hbox = {
							spacing = 5

							hbox = {
								name = "dynamic_birth_name"
								margin = { 5 0 }
							}
						}


						vbox = {
							name = "custom_widgets_container"
							layoutpolicy_horizontal = expanding

							state = {
								trigger_on_create = yes
								name = appear_test

								using = Animation_Curve_Default
								alpha = 1

							}
						}

						widget = {
							layoutpolicy_horizontal = expanding


							fixedgridbox = {
								resizeparent = yes
								# alpha = 0
								name = "option_grid"
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								addrow = 40
								addcolumn = 900

								item = {
									button_eventoption = { }
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)4')]"
								maxverticalslots = 5
								addrow = 40
								addcolumn = 900

								item = {
									button_eventoption = {
										shortcut = speed_5

										blockoverride "number" {
											text_single = {
												raw_text = "5,"
											}
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)3')]"
								maxverticalslots = 4
								addrow = 40
								addcolumn = 900

								item = {
									button_eventoption = {
										shortcut = speed_4

										blockoverride "number" {
											text_single = {
												raw_text = "4,"
											}
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)2')]"
								maxverticalslots = 3
								addrow = 40
								addcolumn = 900

								item = {
									button_eventoption = {
										shortcut = speed_3

										blockoverride "number" {
											text_single = {
												raw_text = "3,"
											}
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)1')]"
								maxverticalslots = 2
								addrow = 40
								addcolumn = 900

								item = {
									button_eventoption = {
										shortcut = speed_2

										blockoverride "number" {
											text_single = {
												raw_text = "2,"
											}
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								maxverticalslots = 1
								addrow = 40
								addcolumn = 900
								item = {
									button_eventoption = {
										shortcut = speed_1

										blockoverride "number" {
											text_single = {
												raw_text = "1,"
											}
										}
									}
								}
							}
						}
					}

					#characters
					flowcontainer = {
						direction = vertical
						layoutpolicy_horizontal = expanding

						text_single = {
							raw_text = "Characters:"
						}
						char_name_extra = {
							visible = "[EventWindowData.HasPortraitCharacter('left_portrait')]"
							datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
							blockoverride "extra" {
								text_single = {
									raw_text = "[Character.GetRelationToString(GetPlayer)]."
								}
							}
						}
						char_name_extra = {
							visible = "[EventWindowData.HasPortraitCharacter('right_portrait')]"
							datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
							blockoverride "extra" {
								text_single = {
									raw_text = "[Character.GetRelationToString(GetPlayer)]."
								}
							}
						}
						char_name_extra = {
							visible = "[EventWindowData.HasPortraitCharacter('lower_left_portrait')]"
							datacontext = "[EventWindowData.GetPortraitCharacter('lower_left_portrait')]"
							blockoverride "extra" {
								text_single = {
									raw_text = "[Character.GetRelationToString(GetPlayer)]."
								}
							}
						}
						char_name_extra = {
							visible = "[EventWindowData.HasPortraitCharacter('lower_center_portrait')]"
							datacontext = "[EventWindowData.GetPortraitCharacter('lower_center_portrait')]"
							blockoverride "extra" {
								text_single = {
									raw_text = "[Character.GetRelationToString(GetPlayer)]."
								}
							}
						}
						char_name_extra = {
							visible = "[EventWindowData.HasPortraitCharacter('lower_right_portrait')]"
							datacontext = "[EventWindowData.GetPortraitCharacter('lower_right_portrait')]"
							blockoverride "extra" {
								text_single = {
									raw_text = "[Character.GetRelationToString(GetPlayer)]."
								}
							}
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "Numbers from 1 to 5 select options. Press H to hide the event window and to show it again."
					}
					button_text = {
						layoutpolicy_horizontal = expanding
					    blockoverride "text" {
							raw_text = "[Select_CString(Not(GetVariableSystem.Exists('event_desc')), 'Hide', 'Show')] description, Shift D."
					    }
						shortcut = mapmode_house_secondary
						onclick = "[GetVariableSystem.Toggle('event_desc')]"
					}
					expand = { }
				}
			}
		}
	}
}

######################################################
#################### DUEL EVENT ######################
######################################################

event_window_duel = {
	name = "duel_event_window"
	size = { 1220 900 }

	blockoverride "window_content"
	{
		vbox = {
			name = "duel_window"

			background = {
				name = "duel_event_picture"
				texture = "[EventWindowData.GetEventBackground]"
				margin = { -38 -20 }
				margin_top = -125
				alpha = 0.7

				using = Mask_Rough_Edges

				modify_texture = {
					name = "event_picture_fade"
					texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_inverse.dds"
					blend_mode = alphamultiply
				}
			}

			background = {
				name = "triangle_background"
				alpha = 0.6
				fittype = center
				margin_top = -125
				texture = "gfx/interface/window_duel_event_window/background_duel.dds"
			}

			widget = {
				name = "duel_event_content"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				### CHARACTERS
				hbox = {
					name = "character_box"
					margin_bottom = 15

					widget = {
						name = "characters"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						state = {
							name = appear
							trigger_on_create = yes

							using = Animation_Curve_Default
							alpha = 1

						}

						### PORTRAITS
						hbox = {
							name = "character_portraits"

							widget = {
								name = "portrait_left"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								portrait_event_duel = {
									name = "portrait_left"
									datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
									visible = "[And(EventWindowData.HasPortraitCharacter('left_portrait'), EventWindowData.HasPortraitCharacter('right_portrait'))]"
									parentanchor = bottom|left
									position = { 20 0 }
									size = { 930 490 }

									blockoverride "portrait_button"
									{
										portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('left_portrait', 'camera_event_duel_left', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
										alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('left_portrait'))]"
										tooltip_enabled = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"
										using = tooltip_ws
										tooltip_offset = { -40 0 }
									}

									blockoverride "highlight_visible"
									{
										visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('left_portrait') ))]"
										position = { -270 0 }
									}

									blockoverride "grayscale" { }

									highlight_icon = {
										name = "prison_bars"
										visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('left_portrait')))]"
										parentanchor = bottom|left
										size = { 285 500 }

										texture = "gfx/portraits/portrait_prison_body.dds"
										effectname = "NoHighlight"
										spriteType = corneredTiled
										texture_density = 1.5

										modify_texture = {
											name = "mask"
											texture =  "gfx/portraits/portrait_mask_event.dds"
											spriteType = Corneredstretched
											blend_mode = alphamultiply
										}
									}
								}
							}

							### RIGHT CHARACTER ###
							widget = {
								name = "portrait_right"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								### RIGHT CHARACTER ###
								portrait_event_duel = {
									name = "portrait_right"
									datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
									visible = "[EventWindowData.HasPortraitCharacter('right_portrait')]"
									parentanchor = bottom|right
									position = { -20 0 }
									size = { 930 490 }

									blockoverride "portrait_button"
									{
										portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('right_portrait', 'camera_event_duel_right', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
										alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('right_portrait'))]"
										tooltip_enabled = "[EventWindowData.ShouldShowPortraitInfo('right_portrait')]"
										using = tooltip_es
										tooltip_offset = { -40 0 }
									}

									blockoverride "highlight_visible"
									{
										visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('right_portrait') ))]"
										position = { 270 }
									}

									blockoverride "grayscale" { }

									highlight_icon = {
										name = "prison_bars"
										visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('right_portrait')))]"
										parentanchor = bottom|right
										size = { 285 500 }

										texture = "gfx/portraits/portrait_prison_body.dds"
										effectname = "NoHighlight"
										spriteType = corneredTiled
										texture_density = 1.5

										modify_texture = {
											name = "mask"
											texture =  "gfx/portraits/portrait_mask_event.dds"
											spriteType = Corneredstretched
											blend_mode = alphamultiply
										}
									}
								}
							}
						}

						### COA
						margin_widget = {
							name = "coa"
							parentanchor = bottom|hcenter
							size = { 100% 170 }
							margin_bottom = 10
							allow_outside = yes

							flowcontainer = {
								spacing = 920
								parentanchor = bottom|hcenter

								flowcontainer = {
									name = "coa_left"
									parentanchor = bottom
									direction = vertical
									ignoreinvisible = yes

									event_portrait_status_icons_left = {
										datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
										visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"

										background = {
											margin = { 5 5 }
											texture = "gfx/interface/window_event/event_character_status_icons_bg.dds"
											spriteType = Corneredtiled
											spriteborder = { 20 20 }
											shaderfile = "gfx/FX/pdxgui_default.shader"
											alpha = 0.5

											modify_texture = {
												texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
												spriteType = Corneredstretched
												spriteborder = { 0 0 }
												blend_mode = overlay
												alpha = 0.5
											}
										}
									}

									spacer = {
										size = { 140 0 }
									}

									widget = {
										datacontext = "[EventWindowData.GetPortraitCharacter('lower_left_portrait')]"
										visible = "[EventWindowData.HasPortraitCharacter('lower_left_portrait')]"
										size = { 140 150 }

										portrait_event_small = {
											name = "portrait_left_small_1"
											parentanchor = center
											position = { 0 -4 }

											blockoverride "portrait_button"
											{
												portrait_texture = "[EventWindowData.GetStaticEventPortraitTexture('lower_left_portrait', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
												alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_left_portrait'))]"
												tooltip_enabled = "[EventWindowData.ShouldShowPortraitInfo('lower_left_portrait')]"
											}

											blockoverride "highlight_visible"
											{
												visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_left_portrait') ))]"
											}

											blockoverride "status_icons" { }
											blockoverride "opinion_box" { }
											blockoverride "grayscale" { }

											blockoverride "coa"
											{
												event_portrait_status_icons_left = {
													visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
													parentanchor = bottom|left
													position = { -15 -5 }
													scale = 0.8

													background = {
														using = Background_Bottom_Fade
														margin = { 5 15 }
														using = Color_Black
														using = Mask_Rough_Edges
														alpha =  0.5

														modify_texture = {
															texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
															spriteType = Corneredstretched
															spriteborder = { 0 0 }
															blend_mode = overlay
														}
													}
												}
											}

											text_label_center = {
												parentanchor = bottom|hcenter
												position = { 20 -5 }
												alwaystransparent = yes
												text = "[Character.GetShortUINameNoTooltip]"
												max_width = 115
												align = center
												fontsize_min = 12
											}
										}
									}
								}

								flowcontainer = {
									name = "coa_right"
									parentanchor = bottom
									direction = vertical
									ignoreinvisible = yes

									event_portrait_status_icons_right = {
										datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
										visible = "[EventWindowData.ShouldShowPortraitInfo('right_portrait')]"
										parentanchor = right

										background = {
											texture = "gfx/interface/window_event/event_character_status_icons_bg.dds"
											spriteType = Corneredtiled
											spriteborder = { 20 20 }
											shaderfile = "gfx/FX/pdxgui_default.shader"
											alpha = 0.5
											margin = { 5 5 }

											modify_texture = {
												texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
												spriteType = Corneredstretched
												spriteborder = { 0 0 }
												blend_mode = overlay
												alpha = 0.5
											}
										}
									}
								}
							}
						}
					}
				}

				### EVENT
				hbox = {
					name = "event_text_box"
					margin_top = 110

					widget = {
						name = "text"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						vbox = {
							name = "description_and_options"

							state = {
								name = appear
								trigger_on_create = yes

								using = Animation_Curve_Default
								alpha = 1

							}

							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_top = 20

								scrollarea = {
									name = "description_scrollarea"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									minimumsize = { 470 -1 }
									maximumsize = { 470 -1 }

									scrollbarpolicy_horizontal = always_off

									scrollbar_vertical = {
										using = Scrollbar_Vertical
									}

									scrollwidget = {
										text_multi = {
											name = "description"
											minimumsize = { 470 -1 }
											maximumsize = { 470 -1 }
											autoresize = yes
											margin = { 20 4 }
											text = "[EventWindowData.GetDescription]"
											align = left
											fontsize = 16
										}
									}
								}
							}

							vbox = {
								allow_outside = yes
								ignoreinvisible = yes
								spacing = 5
								margin_bottom = 25

								fixedgridbox = {
									name = "option_grid"
									addcolumn = 900
									addrow = 42
									datamodel = "[EventWindowData.GetOptions]"

									item = {
										button_eventoption = { }
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

######################################################
################### LETTER EVENT #####################
######################################################
window = {
	gfxtype = windowgfx
	name = "letter_event_window"
	parentanchor = center
	layer = top
	allow_outside = yes
	size = { 675 530 }           ############ SIZES NEED TO MATCH

	using = Window_Movable
	using = TooltipFocus

	datacontext = "[EventWindow.AccessEventWindowData]"

	state = {
		name = _show
		trigger_on_create = yes

		on_start = "[GetVariableSystem.Clear( 'event_window_mouse_leave')]"

		on_start = "[PdxGuiWidget.AccessChild('letter_paper').TriggerAnimation('show')]"
		on_start = "[PdxGuiWidget.AccessChild('letter_content').TriggerAnimation('show')]"
		on_start = "[PdxGuiWidget.AccessChild('letter_pattern').TriggerAnimation('show')]"

		start_sound = {
			soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_letter"
		}
	}

	state = {
		name = _hide

		on_start = "[PdxGuiWidget.AccessChild('letter_paper').TriggerAnimation('hide')]"
		on_start = "[PdxGuiWidget.AccessChild('letter_content').TriggerAnimation('hide')]"
		on_start = "[PdxGuiWidget.AccessChild('letter_pattern').TriggerAnimation('hide')]"
	}

	state = {
		name = _mouse_hierarchy_leave
		on_start = "[GetVariableSystem.Set( 'event_window_mouse_leave', 'true' )]"
	}

	### PAPER ###
	widget = {
		name = "letter_paper"
		size = { 675 45 }
		widgetanchor = center
		parentanchor = center
		alpha = 0

		using = Background_Letter
		background = { using = Background_Area_Dark }

		state = {
			name = show
			next = a


			using = Animation_FadeIn_Standard

			animation = {
				alpha = 1
				bezier = { 0.7 0 0.7 1 }
			}
		}

		state = {
			name = a

			bezier = { 0.3 0 0.7 1 }

			animation = {
				size = { 675 530 }           ############ SIZES NEED TO MATCH
				bezier = { 0.8 0.3 0 1 }
			}

			animation = {
				alpha = 1
				bezier = { 0.7 0 0.7 1 }
			}
		}

		state = {
			name = hide
			using = Animation_FadeOut_Quick
			size = { 585 -1 }
		}

		widget = {
			size = { 900 40 }
			widgetanchor = center
			parentanchor = top|hcenter
			position = { 0 8 }

			background = {
				texture = "gfx/interface/window_event/letter_event_edge_top.dds"
				spriteType = Corneredstretched
				spriteborder = { 35 5 }
			}
		}

		widget = {
			size = { 900 40 }
			widgetanchor = center
			parentanchor = bottom|hcenter
			position = { 0 -8 }

			background = {
				texture = "gfx/interface/window_event/letter_event_edge_bottom.dds"
				spriteType = Corneredstretched
				spriteborder = { 35 5 }
			}
		}
	}

	### CONTENT ###
	widget = {
		name = "letter_content"
		widgetanchor = center
		parentanchor = center
		size = { 675 530 }           ############ SIZES NEED TO MATCH
		alpha = 0

		state = {
			name = show


			using = Animation_FadeIn_Standard

			animation = {
				size = { 675 530 }           ############ SIZES NEED TO MATCH

				bezier = { 0.8 0.3 0 1 }
			}

			animation = {
				alpha = 1
				bezier = { 0.7 0 0.7 1 }
			}
		}

		state = {
			name = hide
			using = Animation_FadeOut_Quick

		}

		button = {
			name = "debug_icon"
			size = { 40 40 }
			position = { 20 400 }
			texture = "gfx/interface/icons/traits/_default.dds"
			tooltip = "[EventWindowData.GetDebugInfo]"
			onclick = "[EventWindowData.CopyToClipboard]"
			visible = "[InDebugMode]"
		}

		widget = {
			size = { 322 544 }
			position = { 10 15 }
			scale = 0.8
			alpha = 0.8

			background = {
				texture = "gfx/interface/window_event/letter_event_pattern_big.dds"
			}
		}

		widget = {
			parentanchor = bottom|right
			size = { 264 264 }
			position = { -10 -20 }
			scale = 0.6
			alpha = 0.8

			background = {
				texture = "gfx/interface/window_event/letter_event_pattern_small.dds"
			}
		}

		widget = {
			parentanchor = top|right
			size = { 264 264 }
			position = { -10 15 }
			scale = 0.6
			alpha = 0.8

			background = {
				texture = "gfx/interface/window_event/letter_event_pattern_small.dds"
				mirror = vertical
			}
		}

		widget = {
			parentanchor = bottom|left
			size = { 264 264 }
			position = { 10 -20 }
			scale = 0.6
			alpha = 0.8

			background = {
				texture = "gfx/interface/window_event/letter_event_pattern_small.dds"
				mirror = horizontal
			}
		}

		vbox = {
			margin = { 10 25 }
			margin_right = 0
			margin_bottom = 40

			expand = { }

			hbox = {
				name = "content"
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_vertical = expanding
					minimumsize = { 180 0 }
					allow_outside = yes

					widget = {
						size = { 180 300 }
						allow_outside = yes

						portrait_body = {
							name = "portrait"
							parentanchor = center
							datacontext = "[EventWindowData.GetPortraitCharacter('sender')]"

							blockoverride "portrait_button" {
								alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('sender'))]"
								tooltip_enabled = "[EventWindowData.ShouldShowPortraitInfo('sender')]"
							}

							blockoverride "mask" {
								mask = "gfx/portraits/portrait_mask_event_letter.dds"
							}

							blockoverride "prison" { }
							blockoverride "grayscale" { }
							blockoverride "status_icons" { }
							blockoverride "opinon_box" { }
							blockoverride "coa" { }
						}
					}
				}

				### text
				vbox = {
					name = "text"
					layoutpolicy_vertical = expanding

					text_multi = {
						name = "opening"
						visible = "[EventWindowData.HasOpening]"
						layoutpolicy_horizontal = expanding
						maximumsize = { 430 -1 }
						autoresize = yes
						margin_top = 10
						text = "[EventWindowData.GetOpening]"
						default_format = "#light_background"
						using = Font_Type_Flavor
						using = Font_Size_Big
						format_override = { high light_background }
					}

					#### 1 option ####
					scrollarea = {
						visible = "[LessThanOrEqualTo_int32( GetDataModelSize(EventWindowData.GetOptions), '(int32)1')]"
						maximumsize = { -1 280 }
						minimumsize = { 430 0 }
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						autoresizescrollarea = yes
						scrollbarpolicy_horizontal = always_off

						scrollbar_vertical = {
							using = Scrollbar_Vertical
						}

						scrollwidget = {
							text_multi = {
								name = "description"
								maximumsize = { 430 -1 }
								autoresize = yes
								margin = { 0 10 }
								margin_right = 20
								alwaystransparent = yes
								text = "[EventWindowData.GetDescription]"
								default_format = "#light_background"
								using = Font_Size_Medium
								format_override = { high light_background }
							}
						}
					}

					#### 2 options ####
					scrollarea = {
						visible = "[EqualTo_int32( GetDataModelSize(EventWindowData.GetOptions), '(int32)2')]"
						maximumsize = { -1 240 }
						minimumsize = { 430 0 }
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						autoresizescrollarea = yes
						scrollbarpolicy_horizontal = always_off

						scrollbar_vertical = {
							using = Scrollbar_Vertical
						}

						scrollwidget = {
							text_multi = {
								name = "description"
								maximumsize = { 430 -1 }
								autoresize = yes
								margin = { 0 10 }
								margin_right = 20
								alwaystransparent = yes
								text = "[EventWindowData.GetDescription]"
								default_format = "#light_background"
								using = Font_Size_Medium
								format_override = { high light_background }
							}
						}
					}

					#### 3 options ####
					scrollarea = {
						visible = "[EqualTo_int32( GetDataModelSize(EventWindowData.GetOptions), '(int32)3')]"
						maximumsize = { -1 190 }
						minimumsize = { 430 0 }
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						autoresizescrollarea = yes
						scrollbarpolicy_horizontal = always_off

						scrollbar_vertical = {
							using = Scrollbar_Vertical
						}

						scrollwidget = {
							text_multi = {
								name = "description"
								maximumsize = { 430 -1 }
								autoresize = yes
								margin = { 0 10 }
								margin_right = 20
								alwaystransparent = yes
								text = "[EventWindowData.GetDescription]"
								default_format = "#light_background"
								using = Font_Size_Medium
								format_override = { high light_background }
							}
						}
					}

					#### 4 options ####
					scrollarea = {
						visible = "[GreaterThanOrEqualTo_int32( GetDataModelSize(EventWindowData.GetOptions), '(int32)4')]"
						minimumsize = { 430 0 }
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						scrollbarpolicy_horizontal = always_off

						scrollbar_vertical = {
							using = Scrollbar_Vertical
						}

						scrollwidget = {
							text_multi = {
								name = "description"
								maximumsize = { 430 -1 }
								autoresize = yes
								margin = { 0 10 }
								margin_right = 20
								alwaystransparent = yes
								text = "[EventWindowData.GetDescription]"
								default_format = "#light_background"
								using = Font_Size_Medium
								format_override = { high light_background }
							}
						}
					}

					hbox = {
						name = "signed_text"
						layoutpolicy_horizontal = expanding
						spacing = 10
						margin_right = 15

						expand = { }

						vbox = {
							text_single = {
								name = "signed_text"
								align = right
								layoutpolicy_horizontal = expanding

								text = "[EventWindowData.GetSigned]"
								default_format = "#light_background"
								using = Font_Size_Medium
							}

							text_multi = {
								name = "signature"
								align = left

								text = "[EventWindowData.GetSignature]"
								default_format = "#light_background"
								using = Font_Type_Flavor
								using = Font_Size_Medium
								format_override = { high light_background }
								autoresize = yes
								max_width = 350
								fontsize_min = 14
							}
						}

						widget = {
							datacontext = "[EventWindowData.GetPortraitCharacter('sender')]"
							size = { 80 80 }

							icon = {
								name = "sigil_bg"
								size = { 80 80 }
								texture = "gfx/interface/window_event/sigil_bg.dds"
								alwaystransparent = yes
								parentanchor = center
							}

							icon = {
								name = "sigil"
								visible = "[And(EventWindowData.ShouldShowPortraitInfo('sender'), Character.HasSealCoA)]"
								size = { 56 56 }
								gfxtype = coatofarmsgfx
								shaderfile = "gfx/FX/gui_coatofarms.shader"
								effectname = PdxGuiSeal
								alwaystransparent = yes
								datacontext = "[Character.GetSealCoA]"
								coat_of_arms_slot = "[CoatOfArms.GetSlot('(int32)88','(int32)88')]"
								coat_of_arms = "[CoatOfArms.GetTexture('(int32)88','(int32)88')]"
								coat_of_arms_mask = "gfx/interface/window_event/sigil_center.dds"
								parentanchor = center
							}

							icon = {
								name = "sigil_lowborn"
								visible = "[Not(And(EventWindowData.ShouldShowPortraitInfo('sender'), Character.HasSealCoA))]"
								size = { 56 56 }
								texture = "gfx/interface/window_event/sigil_center_lowborn.dds"
								alwaystransparent = yes
								parentanchor = center
							}
						}
					}
				}
			}

			expand = { }

			### Options
			fixedgridbox = {
				name = "option_grid"
				addcolumn = 654
				addrow = 46
				datamodel = "[EventWindowData.GetOptions]"

				item = {
					button_event_letter = {
						name = "event_option_button"
						parentanchor = hcenter
						size = { 592 42 }

						tooltip = "[EventOption.GetTooltip]"
						tooltip_enabled = "[Not( StringIsEmpty( EventOption.GetTooltip ) )]"

						onclick = "[EventOption.Select]"
						onmousehierarchyenter = "[EventOption.OnEnter]"
						onmousehierarchyleave = "[EventOption.OnLeave]"
						enabled = "[EventOption.IsValid]"

						tooltipwidget = {
							using = DefaultTooltipWidget
						}
						using = tooltip_es

						animation_glow_event = {
							name = "special_option"
							visible = "[And(EventOption.HasFlag('special'), Not(EventOption.HasFlag('dangerous')))]"
						}

						animation_glow_event = {
							name = "dangerous_option"
							visible = "[EventOption.HasFlag('dangerous')]"
							using = Color_Red
						}

						### BUTTON CONTENT ####
						widget = {
							size = { 102 34 }
							parentanchor = left|vcenter

							hbox = {
								hbox = {
									name = "traits_grid"
									datamodel = "[EventOption.Reasons]"

									item = {
										icon = {
											name = "trait_icon"
											datacontext = "[ReasonItem.GetTrait]"
											visible = "[ReasonItem.IsTrait]"
											size = { 34 34 }
											alwaystransparent = yes
											texture = "[Trait.GetIcon(GetPlayer)]"
											tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_TRAIT"
											using = tooltip_ws
										}
									}
								}

								warning_icon = {
									name = "timeout_icon"
									size = { 34 34 }
									visible = "[And( EventOption.IsTimeoutOption, And( GameHasMultiplePlayers, LessThanOrEqualTo_int32( EventWindowData.GetDaysRemaining, '(int32)30' ) ) )]"
									tooltip = EVENT_WINDOW_DAYS_REMAINING
								}

								hbox = {
									name = "skill_grid"
									datamodel = "[EventOption.Reasons]"

									item = {
										icon = {
											name = "skill_icon"
											datacontext = "[ReasonItem.GetSkillItem]"
											visible = "[ReasonItem.IsSkill]"
											texture = "gfx/interface/icons/icon_skills.dds"
											size = { 34 34 }
											framesize = { 60 60 }
											alwaystransparent = yes
											frame = "[SkillItem.GetFrame]"
											tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_SKILL"
											using = tooltip_ws
										}
									}
								}
							}
						}

						hbox = {

							text_single = {
								background = {
									using = Background_Area_Dark
									alpha = 0.6
									margin = { 0 5 }
								}
								raw_text = "Option: [EventOption.GetText]."

								default_format = "#light_background"
								using = Font_Size_Medium
								align = center
								layoutpolicy_horizontal = expanding
								max_width = 420
								fontsize_min = 12
							}
						}

						widget = {
							size = { 102 34 }
							parentanchor = right|vcenter

							hbox = {
								name = "effects_grid"
								datamodel = "[EventOption.Effects]"

								expand = { }

								item = {
									container = {
										container = {
											alwaystransparent = yes
											visible = "[OptionEffectItem.IsTrait]"

											highlight_icon = {
												datacontext = "[OptionEffectItem.GetTrait]"
												name = "trait_icon"
												size = { 34 34 }
												texture = "[Trait.GetIcon(GetPlayer)]"
											}

											highlight_icon = {
												visible = "[OptionEffectItem.IsGain]"
												texture = "gfx/interface/icons/symbols/icon_plus_small.dds"
												name = "gain"
												size = { 20 20 }
											}

											highlight_icon = {
												visible = "[OptionEffectItem.IsLoss]"
												texture = "gfx/interface/icons/symbols/icon_minus_small.dds"
												name = "loss"
												size = { 20 20 }
											}
										}

										container = {
											alwaystransparent = yes
											visible = "[OptionEffectItem.IsStress]"

											text_single = {
												raw_text = "Gain stress"
												visible = "[And(OptionEffectItem.IsGain,Not(OptionEffectItem.IsCritical))]"
											}

											text_single = {
												raw_text = "Lose stress"
												visible = "[OptionEffectItem.IsLoss]"
											}

											text_single = {
												raw_text = "Critical stress gain"
												visible = "[OptionEffectItem.IsCritical]"
											}
										}

										highlight_icon = {
											name = "death"
											visible = "[OptionEffectItem.IsDeath]"
											size = { 34 34 }
											texture = "gfx/interface/icons/icon_dead.dds"
										}

										highlight_icon = {
											name = "scheme"
											visible = "[OptionEffectItem.IsScheme]"
											size = { 34 34 }
											texture = "gfx/interface/icons/icon_scheme.dds"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

######################################################
############# END STRUGGLE EVENT WINDOW ##############
######################################################

window = {
	name = "fullscreen_event_window"
	size = { 1920 1080 }
	scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"
	movable = no

	layer = top

	datacontext = "[EventWindow.AccessEventWindowData]"

	widget = {
		size = { 110% 120% }
		alpha = 0

		state = {
			name = start
			trigger_on_create = yes
			using = Animation_Curve_Default
			alpha = 1

		}

		background = {
			name = "event_backdrop_darken"
			using = Background_Area_Dark
			margin = { 10 10 }
		}
	}

	state = {
		name = _show
		using = Animation_FadeIn_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard

		start_sound = {
			soundeffect = "event:/MUSIC/Cues/Events/kill_mx_cue"
		}
	}

	widget = {
		name = "window_background"
		parentanchor = center
		widgetanchor = center
		size = { 115% 760 }

		alpha = 0

		background = {
			name = "event_background_dark"
			texture = "gfx/interface/window_struggle/end_struggle_background.dds"
			alpha = 0.95
		}

		state = {
			name = start
			trigger_on_create = yes
			using = Animation_Curve_Default
			alpha = 1



			start_sound = {
				soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"

				soundparam = {
					name = StateChange
					value = 1
				}
			}
		}
	}

	widget = {
		name = "event_image"
		parentanchor = center
		widgetanchor = center
		size = { 2246 730 }
		position = { 45 -5 }

		alpha = 0

		background = {
			name = "event_picture"
			texture = "[EventWindowData.GetEventBackground]"

			modify_texture = {
				name = "event_picture_fade_left"
				texture = "gfx/interface/component_masks/mask_fade_struggle_illustration.dds"
				blend_mode = alphamultiply
			}

			modify_texture = {
				name = "event_picture_fade_textured_up"
				texture = "gfx/interface/component_masks/mask_fade_textured_vertical_up.dds"
				blend_mode = alphamultiply
			}

			modify_texture = {
				name = "event_picture_fade_textured_down"
				texture = "gfx/interface/component_masks/mask_fade_textured_vertical_down.dds"
				blend_mode = alphamultiply
			}
		}

		state = {
			name = start
			trigger_on_create = yes
			using = Animation_Curve_Default
			alpha = 1



			start_sound = {
				soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"

				soundparam = {
					name = StateChange
					value = 1
				}
			}
		}
	}

	widget = {
		name = "window_content"
		parentanchor = left|vcenter
		size = { 500 600 }
		position = { 35 0 }

		vbox = {
			name = "text"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 0 10 }
				alpha = 0

				background = {
					using = Background_Area_Dark
					using = Mask_Rough_Edges

					margin_top = -6
					margin_left = 15

					modify_texture = {
						name = "event_picture_fade_left"
						texture = "gfx/interface/component_masks/mask_fade_horizontal_thick.dds"
						blend_mode = alphamultiply
						mirror = horizontal
						rotate_uv = 0.9
					}

					modify_texture = {
						name = "event_picture_fade_left"
						texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
						blend_mode = alphamultiply
						mirror = horizontal
					}

					modify_texture = {
						name = "event_picture_fade_left"
						texture = "gfx/interface/component_masks/mask_texture_01.dds"
						blend_mode = alphamultiply
					}

					modify_texture = {
						name = "event_picture_fade_left"
						texture = "gfx/interface/component_masks/mask_texture_01.dds"
						blend_mode = alphamultiply
						mirror = vertical
					}
				}

				text_single = {
					name = "title"
					layoutpolicy_horizontal = expanding
					fontsize = 29
					fontsize_min = 16
					text = "[EventWindowData.GetTitle]"
					using = Font_Type_Flavor
					max_width = 480
					align = left
				}

				state = {
					name = start
					trigger_on_create = yes

					using = Animation_Curve_Default
					alpha = 1

				}
			}

			hbox = {
				name = "description"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_left = 20

				alpha = 0

				scrollarea = {
					name = "description_scrollarea"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					minimumsize = { 500 -1 }
					maximumsize = { 500 -1 }

					scrollbarpolicy_horizontal = always_off

					scrollbar_vertical = {
						using = Scrollbar_Vertical

						blockoverride "alpha"{
							alpha = 0.6
						}
					}

					scrollwidget = {
						text_multi = {
							name = "description"
							minimumsize = { 480 -1 }
							maximumsize = { 480 -1 }
							autoresize = yes
							margin_top = 5
							text = "[EventWindowData.GetDescription]"
							fontsize = 16
							align = left
						}
					}
				}

				state = {
					name = start
					trigger_on_create = yes

					using = Animation_Curve_Default
					alpha = 1

				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				name = "dynamic_content_widget"

				alpha = 0

				state = {
					name = start
					trigger_on_create = yes

					using = Animation_Curve_Default
					alpha = 1

				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				allow_outside = yes
				ignoreinvisible = yes
				margin_top = 15

				alpha = 0

				state = {
					name = start
					trigger_on_create = yes

					using = Animation_Curve_Default
					alpha = 1

				}

				expand = { }

				vbox = {
					name = "custom_widgets_container"

					state = {
						trigger_on_create = yes
						name = appear_test

						using = Animation_Curve_Default
						alpha = 1

					}
				}

				fixedgridbox = {
					name = "option_grid"
					addcolumn = 900
					addrow = 42
					datamodel = "[EventWindowData.GetOptions]"

					item = {
						button_eventoption = { }
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types Events
{
	type base_event_window = window
	{
		# parentanchor = center
		# widgetanchor = center
		size = { 900 100% }
		position = { 5 0 }
		layer = top
		alpha = 1

		visible = "[Not(GetVariableSystem.Exists('hide_event'))]"

		datacontext = "[EventWindow.AccessEventWindowData]"

		widget = {
			visible = "[Not(GameHasMultiplePlayers)]"
			size = { 100% 100% }

			icon = {
				visible = "[Not(GetVariableSystem.Exists( 'event_window_mouse_leave'))]"
				parentanchor = center
				size = { 200% 200% }
				alwaystransparent = yes
				texture = "gfx/interface/component_masks/mask_fade_circle.dds"
				color = { 0.1 0.1 0.1 1 }
				alpha = 0

				state = {
					name = appear
					trigger_on_create = yes

					using = Animation_Curve_Default
					alpha = 0.6

				}

				state = {
					name = _hide
					using = Animation_Curve_Default

					alpha = 0
				}
			}
		}

		widget = {
			size = { 100% 100% }
			using = Window_Background_No_Edge
		}


		text_single = {
			name = "title"
			text = "[EventWindowData.GetTitle]"
			visible = "[Not(GetVariableSystem.Exists('event_desc'))]"
			max_width = 900

			alpha = 0

			state = {
				name = start
				trigger_on_create = yes
				using = Animation_Curve_Default
				alpha = 1

				on_finish = "[GetVariableSystem.Clear('event_desc')]"
			}
		}

		block "window_content"
		{
			debug_square = { }
		}
	}

	type event_window_duel = window
	{
		parentanchor = center
		widgetanchor = center
		size = { 900 580 }
		layer = top
		alpha = 0

		datacontext = "[EventWindow.AccessEventWindowData]"

		widget = {
			visible = "[Not(GameHasMultiplePlayers)]"
			size = { 100% 100% }

			icon = {
				visible = "[Not(GetVariableSystem.Exists( 'event_window_mouse_leave'))]"
				parentanchor = center
				size = { 200% 200% }
				alwaystransparent = yes
				texture = "gfx/interface/component_masks/mask_fade_circle.dds"
				color = { 0.1 0.1 0.1 1 }
				alpha = 0

				state = {
					name = appear
					trigger_on_create = yes

					using = Animation_Curve_Default
					alpha = 0.6

				}

				state = {
					name = _hide
					using = Animation_Curve_Default

					alpha = 0
				}
			}
		}

		widget = {
			size = { 100% 83% }
			using = Window_Background
			using = Window_Decoration_Thin_Bottom
			parentanchor = bottom
		}

		state = {
			name = show
			trigger_on_create = yes
			using = Animation_FadeIn_Standard


			on_start = "[GetVariableSystem.Clear( 'event_window_mouse_leave')]"

			start_sound = {
				soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"

				soundparam = {
					name = StateChange
					value = 1
				}
			}
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Standard

			start_sound = {
				soundeffect = "event:/MUSIC/Cues/Events/kill_mx_cue"
			}
		}

		state = {
			name = _mouse_hierarchy_leave
			on_start = "[GetVariableSystem.Set( 'event_window_mouse_leave', 'true' )]"
		}

		widget = {
			layoutpolicy_horizontal = expanding
			size = { 1220 128 }

			icon = {
				name = "theme_header"
				position = { 24 0 }
				size = { 1171 128 }
				texture = "gfx/interface/window_duel_event_window/header_duel.dds"

				modify_texture = {
					name = overlay
					texture = "gfx/interface/component_effects/effect_header_blue_shine.dds"
					blend_mode = colordodge
					translate_uv = { 0.6 0 }
				}

				state = {
					name = right
					next = left


					bezier = { 0.8 0.18 0.96 .05 }

					modify_texture = {
						name = overlay
						translate_uv = { -0.6 0 }
					}
				}

				state = {
					name = left
					next = right




					modify_texture = {
						name = overlay
						translate_uv = { 0.6 0 }
					}
				}

				state = {
					trigger_on_create = yes
					name = start
					next = right



					modify_texture = {
						name = overlay
						translate_uv = { 0.6 0 }
					}
				}
			}

			icon = {
				name = "duel_window_decoration"
				size = { 1171 128 }
				position = { 24 0 }
				texture = "gfx/interface/window_duel_event_window/decoration_frame_top_duel.dds"
			}

			text_single = {
				name = "title"
				parentanchor = center
				fontsize = 29
				fontsize_min = 16
				position = { 0 26 }
				text = "[EventWindowData.GetTitle]"
				default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
				using = Font_Type_Flavor
				max_width = 950

				alpha = 0

				state = {
					name = start
					trigger_on_create = yes

					using = Animation_Curve_Default
					alpha = 1

				}
			}
		}

		block "window_content"
		{
			debug_square = { }
		}

		flowcontainer = {
			name = "debug_stuff"
			visible = "[InDebugMode]"
			parentanchor = top|right
			position = { -40 135 }
			ignoreinvisible = yes

			button_round = {
				alwaystransparent = no
				tooltip = "REGENERATE_EVENT_CONTENTS"
				using = tooltip_below

				using = Animation_ShowHide_Quick
				onclick = "[EventWindow.ResetContents]"

				button_replace = {
					parentanchor = center
					alwaystransparent = yes
				}
			}

			button_round = {
				size = { 40 40 }

				button_icon = {
					size = { 100% 100% }
					texture = "gfx/interface/icons/flat_icons/data_system.dds"
					tooltip = "TOGGLE_DATA_SYSTEM"
					using = tooltip_below
					onclick = "[ExecuteConsoleCommand('Localization.ToggleSkipDataSystemInLocOutput')]"
					fontsize = 24
				}
			}

			button_round = {
				size = { 40 40 }
				button_copy = {
					parentanchor = center
					onclick = "[EventWindowData.CopyToClipboard]"
					tooltip = "COPY_EVENT_CONTENTS"
				}
			}

			container = {
				tooltip = "[EventWindowData.GetTriggerBreakdown]"
				using = tooltip_below
				icon = {
					visible = "[EventWindowData.IsTriggerFulfilled]"
					size = { 40 40 }
					texture = "gfx/interface/icons/symbols/icon_check.dds"
				}

				icon = {
					visible = "[Not( EventWindowData.IsTriggerFulfilled )]"
					size = { 40 40 }
					texture = "gfx/interface/icons/symbols/icon_cross.dds"
				}
			}

			button = {
				name = "debug_icon"
				size = { 40 40 }

				button = {
					size = { 100% 100% }
					tooltip = "[EventWindowData.GetDebugInfo]"
					using = tooltip_below
					onclick = "[EventWindowData.CopyToClipboard]"
					onrightclick = "[EventWindowData.DebugOpen]"
					button_ignore = none
					raw_text = "?"
					fontsize = 24
				}
			}
		}
	}

	type event_portrait_status_icons_left = container {
		flowcontainer = {
			ignoreinvisible = yes
			direction = horizontal

			coa_realm_small_crown = {
				visible = "[Character.HasLandedTitles]"
				parentanchor = bottom
			}

			portrait_status_icons = { }
		}
	}

	type event_portrait_status_icons_right = container {
		flowcontainer = {
			ignoreinvisible = yes
			direction = horizontal

			portrait_status_icons = { }

			coa_realm_small_crown = {
				visible = "[Character.HasLandedTitles]"
			}
		}
	}

	type button_eventoption = button_event_standard
	{
		name = "event_option_button"
		size = { 900 36 }
		enabled = "[EventOption.IsValid]"

		default_clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
		onclick = "[EventOption.Select]"
		clicksound = "[EventOption.GetClickSound]"

		block "onmousehierarchy_callbacks" {
			onmousehierarchyenter = "[EventOption.OnEnter]"
			onmousehierarchyleave = "[EventOption.OnLeave]"
		}

		background = { using = Background_Area_Border_Solid }

		icon = {
			texture = "gfx/interface/buttons/button_event.dds"
			alpha = 1
			spriteType = Corneredtiled
			spriteborder = { 3 3 }
			framesize = { 249 78 }
			size = { 100% 100% }

			modify_texture = {
				name = "mask"
				texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
				spriteType = Corneredtiled
				spriteborder_left = 40
				spriteborder_right = 40
				blend_mode = alphamultiply
			}
		}

		# Trick to not have the option text steal tooltips from the trait/skill grid
		hbox = {
			tooltip = "[EventOption.GetTooltip]"
			tooltip_enabled = "[Not( StringIsEmpty( EventOption.GetTooltip ) )]"
			using = tooltip_ws
			tooltip_offset = { -80 0 }

			# Wider tooltips for the effects
			tooltipwidget = {
				using = DefaultTooltipWidget
			}
		}

		modify_texture = {
			name = "mask"
			texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
			spriteType = Corneredtiled
			spriteborder_left = 40
			spriteborder_right = 40
			blend_mode = alphamultiply
		}

		animation_glow_event = {
			name = "special_option"
			visible = "[And(EventOption.HasFlag('special'), Not(EventOption.HasFlag('dangerous')))]"
		}

		animation_glow_event = {
			name = "dangerous_option"
			visible = "[EventOption.HasFlag('dangerous')]"
			using = Color_Red
		}

		### BUTTON CONTENT ####
		hbox = {
			margin = { 5 0 }
			margin_bottom = 5
			spacing = 3

			hbox = {
				fixedgridbox = {
					name = "traits_grid"
					datamodel = "[EventOption.Reasons]"
					addcolumn = 34
					addrow = 34
					flipdirection = yes
					maxhorizontalslots = 1

					item = {
						icon = {
							name = "trait_icon"
							datacontext = "[ReasonItem.GetTrait]"
							visible = "[ReasonItem.IsTrait]"
							size = { 34 34 }
							alwaystransparent = yes
							texture = "[Trait.GetIcon(GetPlayer)]"
							tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_TRAIT"
							using = tooltip_nw
						}
					}
				}

				warning_icon = {
					visible = "[And( EventOption.IsTimeoutOption, And( GameHasMultiplePlayers, LessThanOrEqualTo_int32( EventWindowData.GetDaysRemaining, '(int32)30' ) ) )]"
					name = "timeout_icon"
					size = { 30 30 }
					tooltip = EVENT_WINDOW_DAYS_REMAINING
				}

				hbox = {
					name = "skill_grid"
					datamodel = "[EventOption.Reasons]"

					item = {
						icon = {
							name = "skill_icon"
							datacontext = "[ReasonItem.GetSkillItem]"
							visible = "[ReasonItem.IsSkill]"
							texture = "gfx/interface/icons/icon_skills.dds"
							size = { 34 34 }
							framesize = { 60 60 }
							alwaystransparent = yes
							frame = "[SkillItem.GetFrame]"
							tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_SKILL"
							using = tooltip_ws
						}
					}
				}
			}

			text_single = {
				raw_text = "Disabled"
				visible = "[Not(EventOption.IsValid)]"
			}

			text_single = {
				raw_text = "Special"
				visible = "[And(EventOption.HasFlag('special'), Not(EventOption.HasFlag('dangerous')))]"
			}

			text_single = {
				raw_text = "Dangerous"
				visible = "[EventOption.HasFlag('dangerous')]"
			}

			text_single = {
				raw_text = "Option"
			}

			block "number" { }

			text_single = {
				raw_text = "[EventOption.GetText]."
				max_width = 800
			}

			hbox = {
				name = "effects_grid"
				datamodel = "[EventOption.Effects]"

				item = {
					container = {

						flowcontainer = {
							visible = "[OptionEffectItem.IsTrait]"
							alwaystransparent = yes
							ignoreinvisible = yes
							spacing = 3

							text_single = {
								raw_text = "Gain"
								visible = "[OptionEffectItem.IsGain]"
							}

							text_single = {
								raw_text = "Lose"
								visible = "[OptionEffectItem.IsLoss]"
							}

							text_single = {
								datacontext = "[OptionEffectItem.GetTrait]"
								raw_text = "[Trait.GetName( GetPlayer)]."
							}
						}

						container = {
							visible = "[OptionEffectItem.IsStress]"
							alwaystransparent = yes
							ignoreinvisible = yes

							text_single = {
								raw_text = "Gain stress."
								visible = "[And(OptionEffectItem.IsGain,Not(OptionEffectItem.IsCritical))]"
							}

							text_single = {
								raw_text = "Lose stress."
								visible = "[OptionEffectItem.IsLoss]"
							}

							text_single = {
								raw_text = "Critical stress gain."
								visible = "[OptionEffectItem.IsCritical]"
							}
						}

						text_single = {
							raw_text = "Death!"
							visible = "[OptionEffectItem.IsDeath]"
						}

						text_single = {
							raw_text = "Scheme."
							visible = "[OptionEffectItem.IsScheme]"
							# texture = "[OptionEffectItem.GetScheme.GetIcon]"
						}
					}
				}
			}

			block "confirm" { }

			expand = { }
		}
	}
}

template artifact_event_flowcontainer {

	tooltipwidget = {
		artifact_tooltip = { }
	}

	icon_artifact = {
		parentanchor = hcenter
	}

	text_label_center = {
		alwaystransparent = yes
		text = "[Artifact.GetNameNoTooltip]"
		max_width = 160
		parentanchor = hcenter
		align = center
		fontsize_min = 12
		multiline = yes
	}
}