######################################################
################### EVENT WINDOW #####################
######################################################

base_event_window = {
	name = "event_window"
	using = TooltipFocus

	blockoverride "window_content"
	{
		vbox = {
			name = "event_window"
			margin = { 5 5 }

			widget = {
				name = "text"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					name = "description_and_options"
					alpha = 0
					margin_top = 25
					spacing = 5

					state = {
						name = appear
						trigger_on_create = yes

						using = Animation_Curve_Default
						alpha = 1
					}

					scrollarea = {
						visible = "[Not(GetVariableSystem.Exists('event_desc'))]"
						name = "description_scrollarea"
						layoutpolicy_horizontal = expanding
						# layoutpolicy_vertical = preferred
						minimumsize = { 900 -1 }
						maximumsize = { 900 600 }
						autoresizescrollarea = yes

						scrollbarpolicy_horizontal = always_off

						scrollbar_vertical = {
							using = Scrollbar_Vertical
						}

						scrollwidget = {
							text_multi = {
								name = "description"
								minimumsize = { 900 -1 }
								maximumsize = { 900 -1 }
								autoresize = yes
								text = "[EventWindowData.GetDescription]"
							}
						}
					}

					vbox = {
						allow_outside = yes
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes

						hbox = {
							spacing = 5
							layoutpolicy_horizontal = expanding

							hbox = {
								name = "dynamic_birth_name"
								margin = { 5 0 }
							}

							expand = { }
						}

						widget = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(GetVariableSystem.Exists('event_options'))]"


							fixedgridbox = {
								resizeparent = yes
								# alpha = 0
								name = "option_grid"
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								addrow = 40
								addcolumn = 900

								item = {
									button_eventoption = { }
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)4')]"
								maxverticalslots = 5
								addrow = 40
								addcolumn = 900

								item = {
									button_eventoption = {
										shortcut = speed_5

										blockoverride "number" {
											text_single = {
												raw_text = "5,"
											}
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)3')]"
								maxverticalslots = 4
								addrow = 40
								addcolumn = 900

								item = {
									button_eventoption = {
										shortcut = speed_4

										blockoverride "number" {
											text_single = {
												raw_text = "4,"
											}
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)2')]"
								maxverticalslots = 3
								addrow = 40
								addcolumn = 900

								item = {
									button_eventoption = {
										shortcut = speed_3

										blockoverride "number" {
											text_single = {
												raw_text = "3,"
											}
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)1')]"
								maxverticalslots = 2
								addrow = 40
								addcolumn = 900

								item = {
									button_eventoption = {
										shortcut = speed_2

										blockoverride "number" {
											text_single = {
												raw_text = "2,"
											}
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								maxverticalslots = 1
								addrow = 40
								addcolumn = 900
								item = {
									button_eventoption = {
										shortcut = speed_1

										blockoverride "number" {
											text_single = {
												raw_text = "1,"
											}
										}
									}
								}
							}
						}

						# only hotkeys
						widget = {
							layoutpolicy_horizontal = expanding
							visible = "[GetVariableSystem.Exists('event_options')]"

							fixedgridbox = {
								resizeparent = yes
								# alpha = 0
								name = "option_grid"
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								addrow = 1
								addcolumn = 1

								item = {
									button_eventoption = { }
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)4')]"
								maxverticalslots = 5
								addrow = 1
								addcolumn = 1

								item = {
									button_eventoption = {
										shortcut = speed_5

										blockoverride "number" {
											text_single = {
												raw_text = "5,"
											}
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)3')]"
								maxverticalslots = 4
								addrow = 1
								addcolumn = 1

								item = {
									button_eventoption = {
										shortcut = speed_4

										blockoverride "number" {
											text_single = {
												raw_text = "4,"
											}
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)2')]"
								maxverticalslots = 3
								addrow = 1
								addcolumn = 1

								item = {
									button_eventoption = {
										shortcut = speed_3

										blockoverride "number" {
											text_single = {
												raw_text = "3,"
											}
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)1')]"
								maxverticalslots = 2
								addrow = 1
								addcolumn = 1

								item = {
									button_eventoption = {
										shortcut = speed_2

										blockoverride "number" {
											text_single = {
												raw_text = "2,"
											}
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[EventWindowData.GetOptions]"
								maxverticalslots = 1
								addrow = 1
								addcolumn = 1
								item = {
									button_eventoption = {
										shortcut = speed_1

										blockoverride "number" {
											text_single = {
												raw_text = "1,"
											}
										}
									}
								}
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							name = "option_grid"
							datamodel = "[EventWindowData.GetOptions]"
							visible = "[GetVariableSystem.Exists('event_options')]"
							spacing = 20

							item = {
								vbox = {
									layoutpolicy_horizontal = expanding

									button_eventoption = {
										blockoverride "number" {
											text_single = {
												raw_text = ","
											}
										}
									}

									button = {
										layoutpolicy_horizontal = expanding

										enabled = "[EventOption.IsValid]"

										default_clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
										onclick = "[EventOption.Select]"
										onclick = "[GetVariableSystem.Clear('event_desc')]"
										onclick = "[GetVariableSystem.Clear('hide_event')]"
										clicksound = "[EventOption.GetClickSound]"

										text_multi = {
											resizeparent = yes
											autoresize = yes
											max_width = 800
											layoutpolicy_horizontal = expanding

											raw_text = "[EventOption.GetTooltip]"
										}
									}
								}
							}
						}

						text_single = {
							visible = "[GetVariableSystem.Exists('event_options')]"
							layoutpolicy_horizontal = expanding
							raw_text = "End of options."
						}

						vbox = {
							name = "custom_widgets_container"
							layoutpolicy_horizontal = expanding

							state = {
								trigger_on_create = yes
								name = appear_test

								using = Animation_Curve_Default
								alpha = 1

							}
						}

					}

					#characters
					flowcontainer = {
						direction = vertical
						layoutpolicy_horizontal = expanding

						text_single = {
							visible = "[Or(EventWindowData.HasPortraitCharacter('left_portrait'), EventWindowData.HasPortraitCharacter('right_portrait'))]"
							raw_text = "Characters:"
						}

						char_name = {
							visible = "[EventWindowData.HasPortraitCharacter('left_portrait')]"
							datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
							blockoverride "extra" {
								spacing = 3
								text_single = {
									visible = "[Not(Character.IsLocalPlayer)]"
									raw_text = "[Character.GetOpinionOf( GetPlayer )] opinion."
								}
								text_single = {
									raw_text = "[Character.GetRelationToString(GetPlayer)]."
								}
							}
						}
						char_name = {
							visible = "[EventWindowData.HasPortraitCharacter('right_portrait')]"
							datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
							blockoverride "extra" {
								spacing = 3
								text_single = {
									visible = "[Not(Character.IsLocalPlayer)]"
									raw_text = "[Character.GetOpinionOf( GetPlayer )] opinion."
								}
								text_single = {
									raw_text = "[Character.GetRelationToString(GetPlayer)]."
								}
							}
						}
						char_name = {
							visible = "[EventWindowData.HasPortraitCharacter('lower_left_portrait')]"
							datacontext = "[EventWindowData.GetPortraitCharacter('lower_left_portrait')]"
							blockoverride "extra" {
								spacing = 3
								text_single = {
									visible = "[Not(Character.IsLocalPlayer)]"
									raw_text = "[Character.GetOpinionOf( GetPlayer )] opinion."
								}
								text_single = {
									raw_text = "[Character.GetRelationToString(GetPlayer)]."
								}
							}
						}
						char_name = {
							visible = "[EventWindowData.HasPortraitCharacter('lower_center_portrait')]"
							datacontext = "[EventWindowData.GetPortraitCharacter('lower_center_portrait')]"
							blockoverride "extra" {
								spacing = 3
								text_single = {
									visible = "[Not(Character.IsLocalPlayer)]"
									raw_text = "[Character.GetOpinionOf( GetPlayer )] opinion."
								}
								text_single = {
									raw_text = "[Character.GetRelationToString(GetPlayer)]."
								}
							}
						}
						char_name = {
							visible = "[EventWindowData.HasPortraitCharacter('lower_right_portrait')]"
							datacontext = "[EventWindowData.GetPortraitCharacter('lower_right_portrait')]"
							blockoverride "extra" {
								spacing = 3
								text_single = {
									visible = "[Not(Character.IsLocalPlayer)]"
									raw_text = "[Character.GetOpinionOf( GetPlayer )] opinion."
								}
								text_single = {
									raw_text = "[Character.GetRelationToString(GetPlayer)]."
								}
							}
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "Numbers from 1 to 5 select options."
					}
					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "[Select_CString(Not(GetVariableSystem.Exists('event_desc')), 'Show', 'Hide')] option effects, Shift E."
						}
						shortcut = map_mode_11
						onclick = "[GetVariableSystem.Toggle('event_desc')]"
						onclick = "[GetVariableSystem.Toggle('event_options')]"
					}
					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "[Select_CString(Not(GetVariableSystem.Exists('event_desc')), 'Hide', 'Show')] description, Shift D."
						}
						shortcut = mapmode_house_secondary
						onclick = "[GetVariableSystem.Clear('event_options')]"
						onclick = "[GetVariableSystem.Toggle('event_desc')]"
					}
					button_text = {
						layoutpolicy_horizontal = expanding
						shortcut = close_window
						onclick = "[GetVariableSystem.Toggle('hide_event')]"
					    blockoverride "text" {
					        raw_text = "Minimize event window, Escape."
					    }
					}
					expand = { }
				}
			}
		}
	}
}

######################################################
#################### DUEL EVENT ######################
######################################################

event_window_duel = {
	name = "duel_event_window"
	size = { 900 900 }

	blockoverride "window_content"
	{
		base_event_ocr = { }
	}
}

######################################################
################### LETTER EVENT #####################
######################################################
window = {
	gfxtype = windowgfx
	name = "letter_event_window"
	parentanchor = center
	layer = top
	allow_outside = yes
	size = { 900 530 }           ############ SIZES NEED TO MATCH

	using = Window_Movable
	using = TooltipFocus
	visible = "[Not(GetVariableSystem.Exists('hide_event'))]"

	datacontext = "[EventWindow.AccessEventWindowData]"

	state = {
		name = _show
		trigger_on_create = yes

		on_start = "[GetVariableSystem.Clear( 'event_window_mouse_leave')]"

		on_start = "[PdxGuiWidget.AccessChild('letter_paper').TriggerAnimation('show')]"
		on_start = "[PdxGuiWidget.AccessChild('letter_content').TriggerAnimation('show')]"
		on_start = "[PdxGuiWidget.AccessChild('letter_pattern').TriggerAnimation('show')]"

		start_sound = {
			soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_letter"
		}
	}

	state = {
		name = _hide

		on_start = "[PdxGuiWidget.AccessChild('letter_paper').TriggerAnimation('hide')]"
		on_start = "[PdxGuiWidget.AccessChild('letter_content').TriggerAnimation('hide')]"
		on_start = "[PdxGuiWidget.AccessChild('letter_pattern').TriggerAnimation('hide')]"
	}

	state = {
		name = _mouse_hierarchy_leave
		on_start = "[GetVariableSystem.Set( 'event_window_mouse_leave', 'true' )]"
	}

	### PAPER ###
	widget = {
		name = "letter_paper"
		size = { 675 45 }
		widgetanchor = center
		parentanchor = center
		alpha = 0

		using = Background_Letter
		background = { using = Background_Area_Dark }

		state = {
			name = show
			next = a


			using = Animation_FadeIn_Standard

			animation = {
				alpha = 1
				bezier = { 0.7 0 0.7 1 }
			}
		}

		state = {
			name = a

			bezier = { 0.3 0 0.7 1 }

			animation = {
				size = { 900 530 }           ############ SIZES NEED TO MATCH
				bezier = { 0.8 0.3 0 1 }
			}

			animation = {
				alpha = 1
				bezier = { 0.7 0 0.7 1 }
			}
		}

		state = {
			name = hide
			using = Animation_FadeOut_Quick
			size = { 585 -1 }
		}

	}

	### CONTENT ###
	widget = {
		name = "letter_content"
		widgetanchor = center
		parentanchor = center
		size = { 900 530 }           ############ SIZES NEED TO MATCH
		alpha = 0

		state = {
			name = show

			using = Animation_FadeIn_Standard

			animation = {
				size = { 900 530 }           ############ SIZES NEED TO MATCH

				bezier = { 0.8 0.3 0 1 }
			}

			animation = {
				alpha = 1
				bezier = { 0.7 0 0.7 1 }
			}
		}

		state = {
			name = hide
			using = Animation_FadeOut_Quick

		}

		vbox = {
			margin = { 5 0 }
			layoutpolicy_horizontal = expanding

			hbox = {
				name = "content"
				layoutpolicy_horizontal = expanding


				### text
				vbox = {
					name = "text"
					layoutpolicy_vertical = expanding

					char_name = {
						blockoverride "pre" {
							text_single = {
								margin_right = 5
								raw_text = "Letter from"
							}
						}
						layoutpolicy_horizontal = expanding
						datacontext = "[EventWindowData.GetPortraitCharacter('sender')]"
					}

					# text_single = {
					# 	raw_text = "Letter from"
					# }

					text_multi = {
						name = "opening"
						visible = "[EventWindowData.HasOpening]"
						layoutpolicy_horizontal = expanding
						maximumsize = { 890 -1 }
						min_width = 890
						autoresize = yes
						margin_top = 10
						text = "[EventWindowData.GetOpening]"
					}

					scrollarea = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						autoresizescrollarea = yes
						max_width = 890

						scrollbarpolicy_horizontal = always_off

						scrollbar_vertical = {
							using = Scrollbar_Vertical
						}

						scrollwidget = {
							text_multi = {
								name = "description"
								maximumsize = { 890 -1 }
								min_width = 890
								autoresize = yes
								alwaystransparent = yes
								text = "[EventWindowData.GetDescription]"
							}
						}
					}

					hbox = {
						name = "signed_text"
						layoutpolicy_horizontal = expanding

						vbox = {
							layoutpolicy_horizontal = expanding
							text_single = {
								name = "signed_text"
								layoutpolicy_horizontal = expanding

								text = "[EventWindowData.GetSigned]"
							}
							char_name = {
								layoutpolicy_horizontal = expanding
								datacontext = "[EventWindowData.GetPortraitCharacter('sender')]"

								blockoverride "extra" {
									spacing = 3
									text_single = {
										visible = "[Not(Character.IsLocalPlayer)]"
										raw_text = "[Character.GetOpinionOf( GetPlayer )] opinion of you."
									}
								}
							}
						}
					}
				}
			}

			expand = { }

			widget = {
				layoutpolicy_horizontal = expanding
				visible = "[Not(GetVariableSystem.Exists('event_options'))]"

				fixedgridbox = {
					resizeparent = yes
					# alpha = 0
					name = "option_grid"
					layoutpolicy_horizontal = expanding
					datamodel = "[EventWindowData.GetOptions]"
					addrow = 40
					addcolumn = 900

					item = {
						button_eventoption = { }
					}
				}

				fixedgridbox = {
					layoutpolicy_horizontal = expanding
					datamodel = "[EventWindowData.GetOptions]"
					visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)4')]"
					maxverticalslots = 5
					addrow = 40
					addcolumn = 900

					item = {
						button_eventoption = {
							shortcut = speed_5

							blockoverride "number" {
								text_single = {
									raw_text = "5,"
								}
							}
						}
					}
				}

				fixedgridbox = {
					layoutpolicy_horizontal = expanding
					datamodel = "[EventWindowData.GetOptions]"
					visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)3')]"
					maxverticalslots = 4
					addrow = 40
					addcolumn = 900

					item = {
						button_eventoption = {
							shortcut = speed_4

							blockoverride "number" {
								text_single = {
									raw_text = "4,"
								}
							}
						}
					}
				}

				fixedgridbox = {
					layoutpolicy_horizontal = expanding
					datamodel = "[EventWindowData.GetOptions]"
					visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)2')]"
					maxverticalslots = 3
					addrow = 40
					addcolumn = 900

					item = {
						button_eventoption = {
							shortcut = speed_3

							blockoverride "number" {
								text_single = {
									raw_text = "3,"
								}
							}
						}
					}
				}

				fixedgridbox = {
					layoutpolicy_horizontal = expanding
					datamodel = "[EventWindowData.GetOptions]"
					visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)1')]"
					maxverticalslots = 2
					addrow = 40
					addcolumn = 900

					item = {
						button_eventoption = {
							shortcut = speed_2

							blockoverride "number" {
								text_single = {
									raw_text = "2,"
								}
							}
						}
					}
				}

				fixedgridbox = {
					layoutpolicy_horizontal = expanding
					datamodel = "[EventWindowData.GetOptions]"
					maxverticalslots = 1
					addrow = 40
					addcolumn = 900
					item = {
						button_eventoption = {
							shortcut = speed_1

							blockoverride "number" {
								text_single = {
									raw_text = "1,"
								}
							}
						}
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				name = "option_grid"
				datamodel = "[EventWindowData.GetOptions]"
				visible = "[GetVariableSystem.Exists('event_options')]"
				spacing = 20

				item = {
					vbox = {
						layoutpolicy_horizontal = expanding

						button_eventoption = {
							blockoverride "number" {
								text_single = {
									raw_text = ","
								}
							}
						}

						button = {
							layoutpolicy_horizontal = expanding

							enabled = "[EventOption.IsValid]"

							default_clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
							onclick = "[EventOption.Select]"
							onclick = "[GetVariableSystem.Clear('event_desc')]"
							onclick = "[GetVariableSystem.Clear('hide_event')]"
							clicksound = "[EventOption.GetClickSound]"

							text_multi = {
								resizeparent = yes
								autoresize = yes
								max_width = 800
								layoutpolicy_horizontal = expanding

								raw_text = "[EventOption.GetTooltip]"
							}
						}
					}
				}
			}

			text_single = {
				visible = "[GetVariableSystem.Exists('event_options')]"
				layoutpolicy_horizontal = expanding
				raw_text = "End of options."
			}
		}
	}
}

######################################################
############# END STRUGGLE EVENT WINDOW ##############
######################################################

window = {
	name = "fullscreen_event_window"
	size = { 1920 1080 }
	scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"
	movable = no

	layer = top

	datacontext = "[EventWindow.AccessEventWindowData]"

	widget = {
		size = { 110% 120% }
		alpha = 0

		state = {
			name = start
			trigger_on_create = yes
			using = Animation_Curve_Default
			alpha = 1

		}

		background = {
			name = "event_backdrop_darken"
			using = Background_Area_Dark
			margin = { 10 10 }
		}
	}

	state = {
		name = _show
		using = Animation_FadeIn_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard

		start_sound = {
			soundeffect = "event:/MUSIC/Cues/Events/kill_mx_cue"
		}
	}

	widget = {
		name = "window_background"
		parentanchor = center
		widgetanchor = center
		size = { 115% 760 }

		alpha = 0

		background = {
			name = "event_background_dark"
			texture = "gfx/interface/window_struggle/end_struggle_background.dds"
			alpha = 0.95
		}

		state = {
			name = start
			trigger_on_create = yes
			using = Animation_Curve_Default
			alpha = 1



			start_sound = {
				soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"

				soundparam = {
					name = StateChange
					value = 1
				}
			}
		}
	}

	widget = {
		name = "event_image"
		parentanchor = center
		widgetanchor = center
		size = { 2246 730 }
		position = { 45 -5 }

		alpha = 0

		background = {
			name = "event_picture"
			texture = "[EventWindowData.GetEventBackground]"

			modify_texture = {
				name = "event_picture_fade_left"
				texture = "gfx/interface/component_masks/mask_fade_struggle_illustration.dds"
				blend_mode = alphamultiply
			}

			modify_texture = {
				name = "event_picture_fade_textured_up"
				texture = "gfx/interface/component_masks/mask_fade_textured_vertical_up.dds"
				blend_mode = alphamultiply
			}

			modify_texture = {
				name = "event_picture_fade_textured_down"
				texture = "gfx/interface/component_masks/mask_fade_textured_vertical_down.dds"
				blend_mode = alphamultiply
			}
		}

		state = {
			name = start
			trigger_on_create = yes
			using = Animation_Curve_Default
			alpha = 1



			start_sound = {
				soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"

				soundparam = {
					name = StateChange
					value = 1
				}
			}
		}
	}

	widget = {
		name = "window_content"
		parentanchor = left|vcenter
		size = { 500 600 }
		position = { 35 0 }

		vbox = {
			name = "text"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 0 10 }
				alpha = 0

				background = {
					using = Background_Area_Dark
					using = Mask_Rough_Edges

					margin_top = -6
					margin_left = 15

					modify_texture = {
						name = "event_picture_fade_left"
						texture = "gfx/interface/component_masks/mask_fade_horizontal_thick.dds"
						blend_mode = alphamultiply
						mirror = horizontal
						rotate_uv = 0.9
					}

					modify_texture = {
						name = "event_picture_fade_left"
						texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
						blend_mode = alphamultiply
						mirror = horizontal
					}

					modify_texture = {
						name = "event_picture_fade_left"
						texture = "gfx/interface/component_masks/mask_texture_01.dds"
						blend_mode = alphamultiply
					}

					modify_texture = {
						name = "event_picture_fade_left"
						texture = "gfx/interface/component_masks/mask_texture_01.dds"
						blend_mode = alphamultiply
						mirror = vertical
					}
				}

				text_single = {
					name = "title"
					layoutpolicy_horizontal = expanding
					fontsize = 29
					fontsize_min = 16
					text = "[EventWindowData.GetTitle]"
					using = Font_Type_Flavor
					max_width = 480
					align = left
				}

				state = {
					name = start
					trigger_on_create = yes

					using = Animation_Curve_Default
					alpha = 1

				}
			}

			hbox = {
				name = "description"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_left = 20

				alpha = 0

				scrollarea = {
					name = "description_scrollarea"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					minimumsize = { 500 -1 }
					maximumsize = { 500 -1 }

					scrollbarpolicy_horizontal = always_off

					scrollbar_vertical = {
						using = Scrollbar_Vertical

						blockoverride "alpha"{
							alpha = 0.6
						}
					}

					scrollwidget = {
						text_multi = {
							name = "description"
							minimumsize = { 480 -1 }
							maximumsize = { 480 -1 }
							autoresize = yes
							margin_top = 5
							text = "[EventWindowData.GetDescription]"
							fontsize = 16
							align = left
						}
					}
				}

				state = {
					name = start
					trigger_on_create = yes

					using = Animation_Curve_Default
					alpha = 1

				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				name = "dynamic_content_widget"

				alpha = 0

				state = {
					name = start
					trigger_on_create = yes

					using = Animation_Curve_Default
					alpha = 1

				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				allow_outside = yes
				ignoreinvisible = yes
				margin_top = 15

				alpha = 0

				state = {
					name = start
					trigger_on_create = yes

					using = Animation_Curve_Default
					alpha = 1

				}

				expand = { }

				vbox = {
					name = "custom_widgets_container"

					state = {
						trigger_on_create = yes
						name = appear_test

						using = Animation_Curve_Default
						alpha = 1

					}
				}

				fixedgridbox = {
					name = "option_grid"
					addcolumn = 900
					addrow = 42
					datamodel = "[EventWindowData.GetOptions]"

					item = {
						button_eventoption = { }
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types Events
{
	type base_event_window = window
	{
		# parentanchor = center
		# widgetanchor = center
		size = { 900 100% }
		position = { 5 0 }
		layer = top
		alpha = 1

		visible = "[Not(GetVariableSystem.Exists('hide_event'))]"

		datacontext = "[EventWindow.AccessEventWindowData]"

		widget = {
			visible = "[Not(GameHasMultiplePlayers)]"
			size = { 100% 100% }

			icon = {
				visible = "[Not(GetVariableSystem.Exists( 'event_window_mouse_leave'))]"
				parentanchor = center
				size = { 200% 200% }
				alwaystransparent = yes
				texture = "gfx/interface/component_masks/mask_fade_circle.dds"
				color = { 0.1 0.1 0.1 1 }
				alpha = 0

				state = {
					name = appear
					trigger_on_create = yes

					using = Animation_Curve_Default
					alpha = 0.6

				}

				state = {
					name = _hide
					using = Animation_Curve_Default

					alpha = 0
				}
			}
		}

		widget = {
			size = { 100% 100% }
			using = Window_Background_No_Edge
		}

		text_single = {
			name = "title"
			raw_text = "Event. [EventWindowData.GetTitle]."
			visible = "[Not(GetVariableSystem.Exists('event_desc'))]"
			max_width = 900

			alpha = 0

			state = {
				name = start
				trigger_on_create = yes
				using = Animation_Curve_Default
				alpha = 1


				on_finish = "[GetVariableSystem.Clear('event_options')]"
				on_finish = "[GetVariableSystem.Clear('event_desc')]"
			}
		}

		block "window_content"
		{
			debug_square = { }
		}
	}

	type event_window_duel = base_event_window
	{
		state = {
			name = show
			trigger_on_create = yes
			using = Animation_FadeIn_Standard


			on_start = "[GetVariableSystem.Clear( 'event_window_mouse_leave')]"

			start_sound = {
				soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"

				soundparam = {
					name = StateChange
					value = 1
				}
			}
		}

		state = {
			name = _hide
			# using = Animation_FadeOut_Standard

			start_sound = {
				soundeffect = "event:/MUSIC/Cues/Events/kill_mx_cue"
			}
		}

		state = {
			name = _mouse_hierarchy_leave
			on_start = "[GetVariableSystem.Set( 'event_window_mouse_leave', 'true' )]"
		}
	}

	type event_portrait_status_icons_left = container {
		flowcontainer = {
			ignoreinvisible = yes
			direction = horizontal

			coa_realm_small_crown = {
				visible = "[Character.HasLandedTitles]"
				parentanchor = bottom
			}

			portrait_status_icons = { }
		}
	}

	type event_portrait_status_icons_right = container {
		flowcontainer = {
			ignoreinvisible = yes
			direction = horizontal

			portrait_status_icons = { }

			coa_realm_small_crown = {
				visible = "[Character.HasLandedTitles]"
			}
		}
	}

	type button_eventoption = button_event_standard
	{
		name = "event_option_button"
		size = { 900 36 }
		enabled = "[EventOption.IsValid]"

		default_clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
		onclick = "[EventOption.Select]"
		onclick = "[GetVariableSystem.Clear('event_desc')]"
		onclick = "[GetVariableSystem.Clear('event_options')]"
		onclick = "[GetVariableSystem.Clear('hide_event')]"
		clicksound = "[EventOption.GetClickSound]"

		block "onmousehierarchy_callbacks" {
			onmousehierarchyenter = "[EventOption.OnEnter]"
			onmousehierarchyleave = "[EventOption.OnLeave]"
		}

		background = { using = Background_Area_Border_Solid }

		icon = {
			texture = "gfx/interface/buttons/button_event.dds"
			alpha = 1
			spriteType = Corneredtiled
			spriteborder = { 3 3 }
			framesize = { 249 78 }
			size = { 100% 100% }

			modify_texture = {
				name = "mask"
				texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
				spriteType = Corneredtiled
				spriteborder_left = 40
				spriteborder_right = 40
				blend_mode = alphamultiply
			}
		}

		# Trick to not have the option text steal tooltips from the trait/skill grid
		hbox = {
			tooltip = "[EventOption.GetTooltip]"
			tooltip_enabled = "[Not( StringIsEmpty( EventOption.GetTooltip ) )]"
			using = tooltip_ws
			tooltip_offset = { -80 0 }

			# Wider tooltips for the effects
			tooltipwidget = {
				using = DefaultTooltipWidget
			}
		}

		modify_texture = {
			name = "mask"
			texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
			spriteType = Corneredtiled
			spriteborder_left = 40
			spriteborder_right = 40
			blend_mode = alphamultiply
		}

		animation_glow_event = {
			name = "special_option"
			visible = "[And(EventOption.HasFlag('special'), Not(EventOption.HasFlag('dangerous')))]"
		}

		animation_glow_event = {
			name = "dangerous_option"
			visible = "[EventOption.HasFlag('dangerous')]"
			using = Color_Red
		}

		### BUTTON CONTENT ####
		hbox = {
			margin = { 5 0 }
			margin_bottom = 5
			spacing = 3

			hbox = {
				# fixedgridbox = {
				# 	name = "traits_grid"
				# 	datamodel = "[EventOption.Reasons]"
				# 	addcolumn = 34
				# 	addrow = 34
				# 	flipdirection = yes
				# 	maxhorizontalslots = 1
				#
				# 	item = {
				# 		icon = {
				# 			name = "trait_icon"
				# 			datacontext = "[ReasonItem.GetTrait]"
				# 			visible = "[ReasonItem.IsTrait]"
				# 			size = { 34 34 }
				# 			alwaystransparent = yes
				# 			texture = "[Trait.GetIcon(GetPlayer)]"
				# 			tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_TRAIT"
				# 			using = tooltip_nw
				# 		}
				# 	}
				# }

				warning_icon = {
					visible = "[And( EventOption.IsTimeoutOption, And( GameHasMultiplePlayers, LessThanOrEqualTo_int32( EventWindowData.GetDaysRemaining, '(int32)30' ) ) )]"
					name = "timeout_icon"
					size = { 30 30 }
					tooltip = EVENT_WINDOW_DAYS_REMAINING
				}

				#TODO
				# hbox = {
				# 	name = "skill_grid"
				# 	datamodel = "[EventOption.Reasons]"
				#
				# 	item = {
				# 		icon = {
				# 			name = "skill_icon"
				# 			datacontext = "[ReasonItem.GetSkillItem]"
				# 			visible = "[ReasonItem.IsSkill]"
				# 			texture = "gfx/interface/icons/icon_skills.dds"
				# 			size = { 34 34 }
				# 			framesize = { 60 60 }
				# 			alwaystransparent = yes
				# 			frame = "[SkillItem.GetFrame]"
				# 			tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_SKILL"
				# 			using = tooltip_ws
				# 		}
				# 	}
				# }
			}

			text_single = {
				raw_text = "Disabled"
				visible = "[Not(EventOption.IsValid)]"
			}

			text_single = {
				raw_text = "Special"
				visible = "[And(EventOption.HasFlag('special'), Not(EventOption.HasFlag('dangerous')))]"
			}

			text_single = {
				raw_text = "Dangerous"
				visible = "[EventOption.HasFlag('dangerous')]"
			}

			text_single = {
				raw_text = "Option"
			}

			block "number" { }

			text_single = {
				raw_text = "[EventOption.GetText]"
				max_width = 800
			}

			hbox = {
				name = "effects_grid"
				datamodel = "[EventOption.Effects]"

				item = {
					container = {

						flowcontainer = {
							visible = "[OptionEffectItem.IsTrait]"
							alwaystransparent = yes
							ignoreinvisible = yes
							spacing = 3

							text_single = {
								raw_text = "Gain"
								visible = "[OptionEffectItem.IsGain]"
							}

							text_single = {
								raw_text = "Lose"
								visible = "[OptionEffectItem.IsLoss]"
							}

							text_single = {
								datacontext = "[OptionEffectItem.GetTrait]"
								raw_text = "[Trait.GetName( GetPlayer)]."
							}
						}

						container = {
							visible = "[OptionEffectItem.IsStress]"
							alwaystransparent = yes
							ignoreinvisible = yes

							text_single = {
								raw_text = "Gain stress."
								visible = "[And(OptionEffectItem.IsGain,Not(OptionEffectItem.IsCritical))]"
							}

							text_single = {
								raw_text = "Lose stress."
								visible = "[OptionEffectItem.IsLoss]"
							}

							text_single = {
								raw_text = "Critical stress gain."
								visible = "[OptionEffectItem.IsCritical]"
							}
						}

						text_single = {
							raw_text = "Death!"
							visible = "[OptionEffectItem.IsDeath]"
						}

						text_single = {
							raw_text = "Scheme."
							visible = "[OptionEffectItem.IsScheme]"
							# texture = "[OptionEffectItem.GetScheme.GetIcon]"
						}
					}
				}
			}

			block "confirm" { }

			expand = { }
		}
	}

	type base_event_ocr = vbox {
		margin = { 5 5 }


		widget = {
			name = "text"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			vbox = {
				name = "description_and_options"
				alpha = 0

				state = {
					name = appear
					trigger_on_create = yes

					using = Animation_Curve_Default
					alpha = 1

				}

				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_top = 25

					visible = "[Not(GetVariableSystem.Exists('event_desc'))]"

					scrollarea = {
						name = "description_scrollarea"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						minimumsize = { 900 -1 }
						maximumsize = { 900 -1 }

						scrollbarpolicy_horizontal = always_off

						scrollbar_vertical = {
							using = Scrollbar_Vertical

							blockoverride "alpha"{
								alpha = 0.6
							}
						}

						scrollwidget = {
							text_multi = {
								name = "description"
								minimumsize = { 900 -1 }
								maximumsize = { 900 -1 }
								autoresize = yes
								text = "[EventWindowData.GetDescription]"
							}
						}
					}

					# expand = { }
				}

				vbox = {
					allow_outside = yes
					layoutpolicy_horizontal = expanding
					ignoreinvisible = yes

					hbox = {
						spacing = 5

						hbox = {
							name = "dynamic_birth_name"
							margin = { 5 0 }
						}
					}

					widget = {
						layoutpolicy_horizontal = expanding

						fixedgridbox = {
							resizeparent = yes
							# alpha = 0
							name = "option_grid"
							layoutpolicy_horizontal = expanding
							datamodel = "[EventWindowData.GetOptions]"
							addrow = 40
							addcolumn = 900

							item = {
								button_eventoption = { }
							}
						}

						fixedgridbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[EventWindowData.GetOptions]"
							visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)4')]"
							maxverticalslots = 5
							addrow = 40
							addcolumn = 900

							item = {
								button_eventoption = {
									shortcut = speed_5

									blockoverride "number" {
										text_single = {
											raw_text = "5,"
										}
									}
								}
							}
						}

						fixedgridbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[EventWindowData.GetOptions]"
							visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)3')]"
							maxverticalslots = 4
							addrow = 40
							addcolumn = 900

							item = {
								button_eventoption = {
									shortcut = speed_4

									blockoverride "number" {
										text_single = {
											raw_text = "4,"
										}
									}
								}
							}
						}

						fixedgridbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[EventWindowData.GetOptions]"
							visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)2')]"
							maxverticalslots = 3
							addrow = 40
							addcolumn = 900

							item = {
								button_eventoption = {
									shortcut = speed_3

									blockoverride "number" {
										text_single = {
											raw_text = "3,"
										}
									}
								}
							}
						}

						fixedgridbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[EventWindowData.GetOptions]"
							visible = "[GreaterThan_int32(GetDataModelSize(EventWindowData.GetOptions), '(int32)1')]"
							maxverticalslots = 2
							addrow = 40
							addcolumn = 900

							item = {
								button_eventoption = {
									shortcut = speed_2

									blockoverride "number" {
										text_single = {
											raw_text = "2,"
										}
									}
								}
							}
						}

						fixedgridbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[EventWindowData.GetOptions]"
							maxverticalslots = 1
							addrow = 40
							addcolumn = 900
							item = {
								button_eventoption = {
									shortcut = speed_1

									blockoverride "number" {
										text_single = {
											raw_text = "1,"
										}
									}
								}
							}
						}
					}

					vbox = {
						name = "custom_widgets_container"
						layoutpolicy_horizontal = expanding

						state = {
							trigger_on_create = yes
							name = appear_test

							using = Animation_Curve_Default
							alpha = 1

						}
					}
				}

				#characters
				flowcontainer = {
					direction = vertical
					layoutpolicy_horizontal = expanding

					text_single = {
						raw_text = "Characters:"
					}
					char_name = {
						visible = "[EventWindowData.HasPortraitCharacter('left_portrait')]"
						datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
						blockoverride "extra" {
							text_single = {
								raw_text = "[Character.GetRelationToString(GetPlayer)]."
							}
						}
					}
					char_name = {
						visible = "[EventWindowData.HasPortraitCharacter('right_portrait')]"
						datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
						blockoverride "extra" {
							text_single = {
								raw_text = "[Character.GetRelationToString(GetPlayer)]."
							}
						}
					}
					char_name = {
						visible = "[EventWindowData.HasPortraitCharacter('lower_left_portrait')]"
						datacontext = "[EventWindowData.GetPortraitCharacter('lower_left_portrait')]"
						blockoverride "extra" {
							text_single = {
								raw_text = "[Character.GetRelationToString(GetPlayer)]."
							}
						}
					}
					char_name = {
						visible = "[EventWindowData.HasPortraitCharacter('lower_center_portrait')]"
						datacontext = "[EventWindowData.GetPortraitCharacter('lower_center_portrait')]"
						blockoverride "extra" {
							text_single = {
								raw_text = "[Character.GetRelationToString(GetPlayer)]."
							}
						}
					}
					char_name = {
						visible = "[EventWindowData.HasPortraitCharacter('lower_right_portrait')]"
						datacontext = "[EventWindowData.GetPortraitCharacter('lower_right_portrait')]"
						blockoverride "extra" {
							text_single = {
								raw_text = "[Character.GetRelationToString(GetPlayer)]."
							}
						}
					}
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Numbers from 1 to 5 select options."
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[Select_CString(Not(GetVariableSystem.Exists('event_desc')), 'Show', 'Hide')] option effects, Shift E."
					}
					shortcut = map_mode_11
					onclick = "[GetVariableSystem.Toggle('event_desc')]"
					onclick = "[GetVariableSystem.Toggle('event_options')]"
				}
				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[Select_CString(Not(GetVariableSystem.Exists('event_desc')), 'Hide', 'Show')] description, Shift D."
					}
					shortcut = mapmode_house_secondary
					onclick = "[GetVariableSystem.Clear('event_options')]"
					onclick = "[GetVariableSystem.Toggle('event_desc')]"
				}
				button_text = {
					layoutpolicy_horizontal = expanding
					shortcut = close_window
					onclick = "[GetVariableSystem.Toggle('hide_event')]"
				    blockoverride "text" {
				        raw_text = "Minimize event window, Escape."
				    }
				}
				expand = { }
			}
		}
	}
}

template artifact_event_flowcontainer {

	tooltipwidget = {
		artifact_tooltip = { }
	}

	icon_artifact = {
		parentanchor = hcenter
	}

	text_label_center = {
		alwaystransparent = yes
		text = "[Artifact.GetNameNoTooltip]"
		max_width = 160
		parentanchor = hcenter
		align = center
		fontsize_min = 12
		multiline = yes
	}
}