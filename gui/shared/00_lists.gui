######################################################
############## LIST TYPES AND TEMPLATES ##############
######################################################

template character_age_or_death_text
{
	hbox = {
		# block "list_layout" {
		# 	minimumsize = { 62 0 }
		# 	expand = { }
		# }

		# margin_right = 5
		spacing = 2

		block "character_age"
		{
			text_single = {
				raw_text = "[Character.GetAge]."
				align = left
			}
		}
		#
		# icon = {
		# 	visible = "[Not(Character.IsDeadAndValid)]"
		# 	size = { 23 23 }
		# 	framesize = { 60 60 }
		# 	frame = "[Character.GetHealthIconFrame]"
		# 	texture = "gfx/interface/icons/character_status/icon_health.dds"
		# 	tooltip = "[Character.GetHealthInfo]"
		# }

		# text_single = {
		# 	raw_text = "Health: [Character.Custom('character_health')]."
		# 	align = left
		# 	visible = "[Not(Character.IsDeadAndValid)]"
		# 	tooltip = "[Character.GetHealthInfo]"
		# }

		block "is_dead"
		{
			text_single = {
				name = "is_dead"
				visible = "[Character.IsDeadAndValid]"
				size = { 23 23 }
				raw_text = "Dead."
				# texture = "[Character.GetDeathReasonIcon]"
				tooltip = "CHARACTER_DEAD_TOOLTIP"
			}
		}
	}
}

types Lists
{
	## Character List Items
	type widget_character_list_item_finder = widget {
		datacontext = "[CharacterListItem.GetCharacter]"
		size = { 200 64 }

		background = { using = Background_Area }

		block "divider" { }

		block "widget" { }

		hbox = {
			button = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				block "click" {
					onclick = "[CharacterListItem.OnClick('character')]"
					onclick = "[GetVariableSystem.Clear('expand_view')]"
					onrightclick = "[GetVariableSystem.Clear('expand_view')]"
					onrightclick = "[DefaultOnCharacterClick(CharacterListItem.GetCharacter.GetID)]"
					# onrightclick = "[DefaultOnCharacterRightClick(CharacterListItem.GetCharacter.GetID)]"
				}
				block "button" { }
				button_ignore = none
				# enabled = "[CharacterListItem.IsSelectable]"
				block "button_content"
				{
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							# Name and age
							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								background = {
									using = Background_Area_Characterlist
									alpha = 0.4
								}

								block "pre_name" { }

								text_single = {
									raw_text = "[Add_int32(CharacterListItem.GetOrderIndex, '(int32)1')]"
									visible = "[GetVariableSystem.Exists('index')]"
								}

								# sorted skill
								block "skills_pre" {

									hbox = {
										datacontext = "[CharacterListItem.GetCharacter]"
										text_single = {
											raw_text = "[Character.GetSkill('diplomacy')] diplo,"
											align = left
											visible = "[CharacterSelectionList.IsSortingBySkill('(int32)0')]"
										}
										text_single = {
											raw_text = "[Character.GetSkill('martial')] martial,"
											align = left
											visible = "[CharacterSelectionList.IsSortingBySkill('(int32)1')]"
										}
										text_single = {
											raw_text = "[Character.GetSkill('stewardship')] steward,"
											align = left
											visible = "[CharacterSelectionList.IsSortingBySkill('(int32)2')]"
										}
										text_single = {
											raw_text = "[Character.GetSkill('intrigue')] intrigue,"
											align = left
											visible = "[CharacterSelectionList.IsSortingBySkill('(int32)3')]"
										}
										text_single = {
											raw_text = "[Character.GetSkill('learning')] learning,"
											align = left
											visible = "[CharacterSelectionList.IsSortingBySkill('(int32)4')]"
										}
										text_single = {
											raw_text = "[Character.GetSkill('prowess')] prowess,"
											align = left
											visible = "[CharacterSelectionList.IsSortingBySkill('(int32)5')]"
										}
									}
								}


								text_single = {
									# using = Font_Size_Medium
									# layoutpolicy_horizontal = expanding
									raw_text = "[Character.GetUINameNoTooltip],"
									autoresize = yes
									fontsize_min = 14
									max_width = 430
								}

								hbox = {
									using = character_age_or_death_text
								}

								text_single = {
									visible = "[Character.GetHouse.IsValid]"
									raw_text = "House [Character.GetHouse.GetName]."
									align = left
								}

								block "top_bar" { }

								expand = { }
							}

							block "middle" { }

							hbox = {
								layoutpolicy_horizontal = expanding
								# visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"

								# for the courties
								block "action_buttons" {
									visible = no
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									# visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"

									text_single = {
										name = "character_relation"
										raw_text = "[Character.GetRelationToString( GetPlayer )]."
										tooltip = "EXTENDED_RELATIONS_TOOLTIP"
										align = left
										fontsize_min = 14
										max_width = 260
									}

									# expand = { }
									text_single = {
										block "court_window" {
											visible = "[And(Character.GetLiege.IsValid, Not(ObjectsEqual(Character.GetLiege, CharacterWindow.GetCharacter)))]"
										}
										raw_text = "[Character.GetRelationToString( Character.GetLiege )]."
										tooltip = "EXTENDED_RELATIONS_TOOLTIP"
										align = left
										fontsize_min = 14
										margin_left = 5
									}

									expand = { }
								}
							}

							block "character_description_extra" { }

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								block "pre_relation" { }

								block "action_buttons" {
									block "character_relation"
									{
										hbox = {
											# layoutpolicy_horizontal = expanding
											visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"

											text_single = {
												name = "character_relation"
												raw_text = "[Character.GetRelationToString( GetPlayer )]."
												tooltip = "EXTENDED_RELATIONS_TOOLTIP"
												# default_format = "#low"
												align = left
												fontsize_min = 14
												# margin_left = 10
												max_width = 260
											}

											# expand = { }
										}
									}
								}

								hbox = {
									spacing = 5

									button_recruit_character = { }

									text_single = {
										raw_text = "Might leave."
										visible = "[And( Character.CourtierWantsToLeaveCourt, Not( Character.IsImprisoned))]"
										tooltip = "[Character.GetCourtierLeaveDescription]"
										align = left
									}

									block "action_buttons" {
										visible = no
									}
								}

								block "bottom_middle_box" { }

								text_single = {
									visible = "[And(And(Not(Character.IsLocalPlayer), Character.IsAlive), GetPlayer.IsValid)]"
									raw_text = "Opinion of you: [Character.GetOpinionOf(GetPlayer)]."
									tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
									align = left
								}

								container = {
									visible = "[Not(CharacterWindow.GetCourtOwner.IsLocalPlayer)]"
									text_single = {
										block "action_buttons" {
											visible = no
										}
										raw_text = "Opinion of host: [Character.GetOpinionOf(CharacterWindow.GetCharacter)]."
										tooltip = "[Character.GetOpinionBreakdownText(CharacterWindow.GetCharacter)]"
									}
								}

								block "strength" {
									text_single = {
										raw_text = "Soldiers: [Character.GetMilitaryStrengthText]."
										visible = "[And(Character.HasLandedTitles, Character.IsAlive)]"
									}
								}

								text_single = {
									block "powerful" {
										visible = no
										# visible = "[Character.IsPowerfulVassal]"
									}
									text = "MY_REALM_WINDOW_POWERFUL_VASSAL"
									# layoutpolicy_horizontal = expanding
								}

								block "skills" {

									# Skills
									hbox_skills_grid_character_named = { }

									# text_single = {
									# 	raw_text = "[Character.GetProwess]."
									# 	raw_tooltip = "[Character.GetProwessBreakdown]"
									# }
								}

								block "extra_skills" { }

								expand = { }
							}

							### BOTTOM ROW ###
							vbox = {
								layoutpolicy_horizontal = expanding
								block "bottom_row" {}

								block "additional_info_kill_list" { }

								hbox = {
									spacing = 3
									block "bottom_pre" { }
									layoutpolicy_horizontal = expanding
									block "expand_traits" { }

									block "small_traits" {

										text_single = {
											# layoutpolicy_horizontal = expanding
											raw_text = " [GetDataModelSize(CharacterListItem.GetTraits)] traits."
											using = tooltip_se

											tooltipwidget = {
												widget = {
													using = DefaultTooltipBackground
													# using = TooltipSound
													# using = GeneralTooltipSetup
													# size = { 300 50 }
													alwaystransparent = no

													flowcontainer = {
														name = "traits_grid"
														datamodel = "[CharacterListItem.GetTraits]"
														# datamodel_reuse_widgets = yes
														direction = vertical
														# layoutpolicy_horizontal = expanding
														# layoutpolicy_vertical = expanding
														# addcolumn = 30
														# addrow = 28
														ignoreinvisible = yes
														resizeparent = yes
														margin = { 20 15 }
														margin_top = 5

														item = {
															text_single = {
																margin_left = 3
																visible = "[Trait.IsValid]"
																datacontext = "[Character.GetFaith]"
																raw_text = "[Trait.GetNameNoTooltip(Character.Self)][AddTextIf(Faith.IsTraitVirtue( Trait.Self ), ' (virtue)')][AddTextIf(Faith.IsTraitSin( Trait.Self ), ' (sin)')][AddTextIf(Trait.IsInheritable, ' (inheritable)')]."
																tooltip = "trait_tooltip"
															}
														}
													}
												}
											}
										}
									}

									block "bottom_right_box" {
										hbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											spacing = 4

											block "claims" { # for kill list
												widget_list_claims = { }
											}

											# Religion and culture
											hbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												spacing = 4
												# minimumsize = { 110 0 }

												text_single = {
													raw_text = "[Character.GetFaith.GetAdjectiveNoTooltip],"
													using = tooltip_se
												}

												flowcontainer = {
													datacontext = "[Character.GetCulture]"
													# tooltipwidget = {
													# 	culture_tooltip = { }
													# }
													# text_single = {
													# 	raw_text = "Culture:"
													# }
													# text_single = {
													# 	raw_text = " "
													# }
													text_single = {
														using = tooltip_se
														layoutpolicy_horizontal = expanding
														text = "CULTURE_LISTS_WINDOW"
														# autoresize = no
														# align = left
													}
													dot = { }
												}
												text_single = {
													raw_text = "[Character.Custom('character_health')] health."
													# align = left
													visible = "[Not(Character.IsDeadAndValid)]"
													tooltip = "[Character.GetHealthInfo]"
													# tooltipwidget = {
													# 	health_tooltip = { }
													# }
												}
												expand = { }
											}
										}
									}
									expand = { }
								}

								expand = { }
							}

							block "bottom_extra" {}

							expand = { }
						}
					}
				}
			}
		}
	}


	type dropdown_menu_standard = dropDown {
		block "dropdown_properties"
		{
			#datamodel = "[GetPlayer.GetCourt]"
		}

		block "dropdown_size"
		{
			size = { 200 32 }
		}

		active_item = {
			container = {
				alwaystransparent = no

				button_drop = {
					block "dropdown_size"
					{
						size = { 200 32 }
					}
					block "dropdown_active_item_properties"
					{
						raw_text = "#D Current Option#!"
					}
					button_trigger = none


				}
			}
		}

		item = {
			container = {
				alwaystransparent = no

				button_dropdown = {
					block "dropdown_size"
					{
						size = { 200 22 }
					}
					button_trigger = none

					block "dropdown_item_properties"
					{
						raw_text = "#D Option#!"
					}

					default_format = "#clickable"
				}
			}
		}

		list = {
			scrollarea = {
				position = { 5 22 }
				block "dropdown_list_maxsize"
				{
					maximumsize = { 192 500 }
				}
				using = TooltipFocus

				block "dropdown_list_properties"
				{

				}

				autoresizescrollarea = yes
				scrollbarpolicy_horizontal = always_off

				using = Background_DropDown

				scrollwidget = {
					dynamicgridbox = {
						alwaystransparent = no
					}
				}

				scrollbar_vertical = {
					using = Scrollbar_Vertical
				}
			}
		}
	}

	type dropdown_sort_characterlist = dropDown {
		name = "sort_options"

		block "size_button_drop" {   ########### only used for character finder
			size = { 225 25 }
		}

		active_item = {
			widget = {
				position = { -3 -3 }
				alwaystransparent = no
				size = { 100% 100% }

				button_drop = {
					text = ""
					hbox = {
						margin_left = 15
						margin_bottom = 5
						layoutpolicy_horizontal = expanding

						block "option_name" {
							text_single = {
								raw_text = "SORT_BY"
							}
						}

						spacing = 3

						text_single = {
							block "text_button_drop" {
								margin_left = 2
								raw_text = "[CharacterListSortItem.GetName]."
							}
						}
						expand = { }
					}
				}
			}
		}

		item = {
			widget = {
				alwaystransparent = no
				block "size_dropdown" {
					size = { 400 25 }
				}

				button_normal = {
					size = { 100% 25 }
					button_trigger = none
					gfxtype = framedbuttongfx
					effectname = "NoHighlight"
					shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
					upframe = 1
					overframe = 2
					downframe = 3
					disableframe = 1
					texture = "gfx/interface/buttons/button_interaction_menu.dds"
					framesize = { 317 25 }
				}

				button_dropdown = {
					block "size_dropdown" {
						size = { 400 25 }
					}
						text = ""

					text_single = {
						position = { 10 0 }
						block "text_button_drop" {
							raw_text = "[CharacterListSortItem.GetName]"
						}
					}

					default_format = "#clickable"
				}
			}
		}

		list = {
			scrollarea = {
				position = { 5 25 }
				maximumsize = { 400 500 }
				autoresizescrollarea = yes
				scrollbarpolicy_horizontal = always_off
				using = TooltipFocus

				using = Background_DropDown

				scrollwidget = {
					dynamicgridbox = {
						alwaystransparent = no
					}
				}

				scrollbar_vertical = {
					using = Scrollbar_Vertical
				}
			}
		}
	}

	type widget_list_claims = text_single {
		datacontext = "[CharacterListItem.GetFirstClaim]"
		# layoutpolicy_vertical = expanding

		block "claims_visibility" { }

		visible = "[CharacterListItem.HasTitleItems]"
		raw_text = "[CharacterListItem.GetTitleItemCount] claims."
		tooltipwidget = {
				widget = {
					using = DefaultTooltipBackground
					alwaystransparent = no

					flowcontainer = {
						direction = vertical
						datamodel = "[CharacterListItem.GetTitleItems]"
						resizeparent = yes
						margin = { 20 15 }
						# margin_top = 10

						item = {
							button_text = {
								datacontext = "[Claim.GetTitle]"
								onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
								onrightclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
								blockoverride "text" {
									raw_text = "[Title.GetNameNoTooltip]."
									align = left
								}
								blockoverride "extra" {
									text_single = {
										visible = "[And(Claim.IsPressed, Not(Claim.IsImplicit))]"
										raw_text = "Pressed."
									}
									text_single = {
										visible = "[And(Not(Claim.IsPressed), Not(Claim.IsImplicit))]"
										raw_text = "Unpressed."
									}
									text_single = {
										visible = "[Claim.IsImplicit]"
										raw_text = "Implicit."
									}
								}
							}
						}
					}
				}
			}

			# resizeparent = yes
			# parentanchor = center
			# position = { 18 0 }
			# default_format = "#high"
			# using = Font_Size_Medium
			# align = center

	}

	type hbox_skills_grid = hbox {
		name = "skills_grid"
		block "skills_datamodel"
		{
			datamodel = "[CharacterListItem.GetSkillItems]"
		}
		spacing = 3

		text_single = {
			raw_text = "Skills: "
			align = left
		}

		item = {
			widget = {
				size = { 0 25 }

				text_single = {
					name = "value"
					resizeparent = yes
					align = left
					raw_text = "[SkillItem.GetValue],"
					tooltip = "[SkillItem.GetName]"
				}
			}
		}
	}

	type hbox_skills_grid_character = hbox {
		spacing = 3
		text_single = {
			raw_text = "[Character.GetSkill('diplomacy')],"
			tooltip = "diplomacy_concept"
		}
		text_single = {
			raw_text = "[Character.GetSkill('martial')],"
			tooltip = "martial_concept"
		}
		text_single = {
			raw_text = "[Character.GetSkill('stewardship')],"
			tooltip = "stewardship_concept"
		}
		text_single = {
			raw_text = "[Character.GetSkill('intrigue')],"
			tooltip = "intrigue_concept"
		}
		text_single = {
			raw_text = "[Character.GetSkill('learning')],"
			tooltip = "learning_concept"
		}
		text_single = {
			block "prowess" {}
			raw_text = "[Character.GetSkill('prowess')],"
			tooltip = "prowess_concept"
		}
	}

	type hbox_skills_grid_character_named = hbox {
		spacing = 3
		text_single = {
			raw_text = "Dip [Character.GetSkill('diplomacy')],"
			tooltip = "diplomacy_concept"
		}
		text_single = {
			raw_text = "Martial [Character.GetSkill('martial')],"
			tooltip = "martial_concept"
		}
		text_single = {
			raw_text = "Stew [Character.GetSkill('stewardship')],"
			tooltip = "stewardship_concept"
		}
		text_single = {
			raw_text = "Int [Character.GetSkill('intrigue')],"
			tooltip = "intrigue_concept"
		}
		text_single = {
			raw_text = "Learn [Character.GetSkill('learning')],"
			tooltip = "learning_concept"
		}
		text_single = {
			raw_text = "Prow [Character.GetSkill('prowess')],"
			tooltip = "prowess_concept"
		}
	}

	type hbox_skills_grid_character_named_full = hbox {
		spacing = 3
		text_single = {
			raw_text = "Diplomacy [Character.GetSkill('diplomacy')],"
			tooltip = "diplomacy_concept"
		}
		text_single = {
			raw_text = "Martial [Character.GetSkill('martial')],"
			tooltip = "martial_concept"
		}
		text_single = {
			raw_text = "Stewardship [Character.GetSkill('stewardship')],"
			tooltip = "stewardship_concept"
		}
		text_single = {
			raw_text = "Intrigue [Character.GetSkill('intrigue')],"
			tooltip = "intrigue_concept"
		}
		text_single = {
			raw_text = "Learning [Character.GetSkill('learning')],"
			tooltip = "learning_concept"
		}
		text_single = {
			block "prowess" {}
			raw_text = "Prowess [Character.GetSkill('prowess')],"
			tooltip = "prowess_concept"
		}
	}

	type hbox_list_sort_buttons = vbox {
		name = "sort_buttons"

		hbox = {
			layoutpolicy_horizontal = expanding

			button_text = {
				name = "filters"
				# size = { 25 25 }

				down = "[CharacterSelectionList.FiltersShown]"
				# frame = "[BoolTo1And2(CharacterSelectionList.IsAllDefault)]"
				onclick = "[CharacterSelectionList.OnToggleFilters]"
				shortcut = army_split_half

				# tooltip = "TOGGLE_FILTERS"
				using = tooltip_nw

				# button_search = {
				# 	alwaystransparent = yes
				# 	parentanchor = center
				# 	size = { 20 20 }
				# }

				block "filters_visible" { }

				blockoverride "text" {
					raw_text = "Filters[AddTextIf(CharacterSelectionList.FiltersShown, ', opened')][AddTextIf(Not(CharacterSelectionList.IsAllDefault), ', applied')], hotkey F."
				}

			}

			button_text = {
				# size = { 200 25 }
				# name = "drop_filters"
				visible = "[Not(CharacterSelectionList.IsAllDefault)]"
				blockoverride "text" {
					raw_text = "Reset." #CHARACTER_RESET_FILTERS
				}
				onclick = "[CharacterSelectionList.OnResetFilters]"
			}

			block "sort_dropdown" {
				dropdown_sort_characterlist = {
				}
			}
			expand = { }
		}

		block "skill_sort_buttons"
		{
			hbox = {
				visible = "[Not(IsGameViewOpen('character'))]"
				layoutpolicy_horizontal = expanding
				spacing = 1
				text_single = {
					raw_text = "Use number keys to sort by skills and Shift W for prowess."
					align = left
				}
				button_text = {
				    blockoverride "text" {
				        # raw_text = "Diplomacy 1,"
				    }
					onclick = "[CharacterSelectionList.SortBySkill('(int32)0')]"
					shortcut = speed_1
				}

				button_text = {
				    blockoverride "text" {
				        # raw_text = "Martial 2,"
				    }
					onclick = "[CharacterSelectionList.SortBySkill('(int32)1')]"
					shortcut = speed_2
				}
				button_text = {
				    blockoverride "text" {
				        # raw_text = "Stewardship 3,"
				    }
					onclick = "[CharacterSelectionList.SortBySkill('(int32)2')]"
					shortcut = speed_3
				}
				button_text = {
				    blockoverride "text" {
				        # raw_text = "Intrigue 4,"
				    }
					onclick = "[CharacterSelectionList.SortBySkill('(int32)3')]"
					shortcut = speed_4
				}

				button_text = {
				    blockoverride "text" {
				        # raw_text = "Learning 5."
				    }
					onclick = "[CharacterSelectionList.SortBySkill('(int32)4')]"
					shortcut = speed_5
				}
				button_text = {
				    blockoverride "text" {
				        # raw_text = "Prowess 5."
				    }
					onclick = "[CharacterSelectionList.SortBySkill('(int32)5')]"
					shortcut = map_mode_10
				}
				expand = { }
			}
		}
	}

	type vbox_character_list = vbox {
		name = "character_list"

		block "sort_buttons"
		{
			hbox_list_sort_buttons = {
				layoutpolicy_horizontal = expanding
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			button_text = {
				name = "sort_order"
				onclick = "[CharacterSelectionList.RevertSortOrder]"

				blockoverride "text" {
					raw_text = "In [Select_CString(CharacterSelectionList.GetSortOrder, 'ascending', 'descending')] order. Toggle."
				}

			}
			expand = { }
		}

		block "special_character" { }

		block "character_count" {
			block "bottom_bar" { }
			hbox = {
				layoutpolicy_horizontal = expanding
				# visible = "[DataModelHasItems(CharacterSelectionList.GetList)]"
				# margin_bottom = 8
				# spacing = 5

				text_single = {
					name = "character_count"
					datacontext = "[CharacterSelectionList]"
					text = "CHARACTER_FINDER_COUNT"
					align = left
				}

				dot = {
					align = left
				}

				text_single = {
					visible = "[DataModelHasItems(CharacterSelectionList.GetList)]"
					margin_left = 3
					block "click_info" {
						raw_text = "Click to select, right click to view."
					}
				}

				block "count_extra" { }

				expand = { }
			}
		}

		scrollbox = {
			name = "characters_scroll_area"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			block "scrollbox_properties" { }

			blockoverride "scrollbox_content" {

				block "container_implementation" {
					vbox = {
						margin_top = 15
						name = "characters_grid"
						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"
						layoutpolicy_horizontal = expanding

						item = {
							block "list_item" {
								widget_character_list_item_finder = {
									block "item_size" {
										size = { 650 110 }
										layoutpolicy_horizontal = expanding
									}
								}
							}
						}
					}
				}
			}

			blockoverride "scrollbox_empty"
			{
				block "scrollbox_empty_visibility"
				{
					layoutpolicy_vertical = expanding
					visible = "[IsDataModelEmpty( CharacterSelectionList.GetList )]"
					text = "NO_CHARACTERS_TO_SELECT"
				}
			}
		}
	}

	type button_recruit_character = button_text
	{
		visible = "[Character.IsPlayerInteractionShown('recruit_guest_interaction')]"
		enabled = "[Character.IsPlayerInteractionValid('recruit_guest_interaction')]"
		onclick = "[Character.OpenPlayerInteraction('recruit_guest_interaction')]"
		tooltip = "[Character.GetPlayerInteractionTooltip('recruit_guest_interaction')]"

		blockoverride "text" {
			raw_text = "[AddTextIf(Character.IsPlayerInteractionValid('recruit_guest_interaction'), 'Click to ')]Recruit[AddTextIf(Not(Character.IsPlayerInteractionValid('recruit_guest_interaction')), ', disabled')]."
		}
		# button_add_character = {
		# 	alwaystransparent = yes
		# 	parentanchor = center
		# }
	}

	type widget_courtier_item = widget {
		size = { 0 125 }

		hbox = {
			spacing = 5

			background = {
				using = Background_Area_With_Header
				margin_right = 7
				margin_left = 5
			}

			portrait_head = { }

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_top = 3

				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						autoresize = no
						text = "[Character.GetUINameNoTooltip]"
						using = Font_Size_Medium
						align = left
						fontsize_min = 14
						margin_right = 10
					}

					hbox_skills_grid = { }
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 3 }
					margin_bottom = 8

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						warning_icon = {
							visible = "[And( Character.CourtierWantsToLeaveCourt, Not( Character.IsImprisoned))]"
							size = { 20 20 }
							tooltip = "[Character.GetCourtierLeaveDescription]"
						}

						debug_placeholder = {
							visible = "[InDebugMode]"
							size = { 20 20 }
							raw_tooltip = "#D [Character.GetDebugCourtierLeaveReasons]#!"
						}

						text_single = {
							name = "relation_to_court_owner"
							layoutpolicy_horizontal = expanding
							default_format = "#low"
							autoresize = no
							align = left

							block "description_relation_text" {
								text = "[Character.GetRelationToString( CharacterWindow.GetCourtOwner )]"
								tooltip = "EXTENDED_RELATIONS_TOOLTIP"
							}

							background = {
								visible = "[Character.IsImprisoned]"
								using = Status_Bad
								alpha = 0.5
							}
						}

						expand = { }
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5
					margin_bottom = 5

					block "action_buttons"
					{
						hbox = {
							margin = { 0 3 }
							spacing = 5

							button_recruit_character = { }
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						minimumsize = { 0 60 }
						margin_left = 5

						background = {
							using = Background_Area_Dark
							margin = { 3 3 }
							alpha = 0.5
						}

						# Dynasty
						widget = {
							layoutpolicy_vertical = expanding
							size = { 45 40 }

							coa_house_small = {
								datacontext = "[Character.GetHouse]"
								parentanchor = center
								scale = 0.7
							}
						}

						# Traits
						vbox = {
							layoutpolicy_vertical = expanding
							margin = { 10 0 }

							hbox = {
								layoutpolicy_horizontal = expanding

								fixedgridbox = {
									name = "traits_grid_four"
									datamodel = "[CharacterListItem.GetTraits]"
									flipdirection = yes
									addcolumn = 30
									addrow = 28
									visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"

									block "gridbox_items"   ### for characterview
									{
										datamodel_wrap = 4
										maxverticalslots = 2
									}

									item = {
										icon_trait = {
											visible = "[Trait.IsValid]"

											blockoverride "icon_size"
											{
												size = { 30 30 }
											}

											blockoverride "tooltip_placement"
											{
												using = tooltip_se
											}

											blockoverride "glow_radius"
											{
												glow_radius = 3
											}
										}
									}
								}
								fixedgridbox = {
									name = "traits_grid_five"
									datamodel = "[CharacterListItem.GetTraits]"
									flipdirection = yes
									addcolumn = 30
									addrow = 28
									visible = "[IsDataModelEmpty( CharacterListItem.GetTitleItems )]"

									block "gridbox_items"   ### for characterview
									{
										datamodel_wrap = 5
										maxverticalslots = 2
									}

									item = {
										icon_trait = {
											visible = "[Trait.IsValid]"

											blockoverride "icon_size"
											{
												size = { 30 30 }
											}

											blockoverride "tooltip_placement"
											{
												using = tooltip_se
											}

											blockoverride "glow_radius"
											{
												glow_radius = 3
											}
										}
									}
								}

								expand = { }
							}
						}

						expand = { }

						divider_light = {
							layoutpolicy_vertical = expanding
							alpha = 0.5
						}

						hbox = {
							margin = { 3 0 }

							widget_list_claims = {
								visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"
							}
						}

						divider_light = {
							visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"
							layoutpolicy_vertical = expanding
							alpha = 0.5
						}

						hbox = {
							margin_right = 5

							button_religion_icon = {
								datacontext = "[Character.GetFaith]"
								size = { 40 40 }
							}

							vbox = {
								datacontext = "[Character.GetCulture]"

								tooltipwidget = {
									culture_tooltip = { }
								}
								using = tooltip_se

								icon = {
									name = "culture"
									texture = "gfx/interface/icons/icon_culture.dds"
									size = { 24 24 }
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									min_width = 60
									align = center
									autoresize = no
									text = "CULTURE_LISTS_WINDOW"
								}
							}
						}
					}
				}
			}
		}
	}

	type widget_vassal_list_item = button {
		datacontext = "[CharacterListItem.GetCharacter]"
		size = { 200 190 }

		onclick = "[DefaultOnCharacterClick( Character.GetID )]"
		onclick = "[GetVariableSystem.Clear('expand_view')]"
		onrightclick = "[DefaultOnCharacterRightClick( Character.GetID )]"
		button_ignore = none

		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 0 0 }
			margin_left = 10
			margin_right = 15

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10

				background = {
					using = Background_Area
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_right = 10

					vbox = {
						layoutpolicy_horizontal = expanding
						# spacing = 3

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5

							background = {
								using = Background_Area_Characterlist
								margin = { 8 0 }
								margin_left = 15
								alpha = 0.5

								using = Mask_Rough_Edges
							}

							# text_single = {
							# 	# layoutpolicy_horizontal = expanding
							# 	raw_text = "[Character.GetUINameNoTooltip]."
							# }

							block "pre_name" { }

							text_single = {
								raw_text = "VassalName"
							}
							text_single = {
								name = "character_relation"
								raw_text = "[Character.GetRelationToString(GetPlayer)]."
								tooltip = "EXTENDED_RELATIONS_TOOLTIP"
								max_width = 300
								visible = "[Character.GetLiege.IsLocalPlayer]"
							}
							text_single = {
								datacontext = "[Character.GetVassalContract]"
								raw_text = "Not de-jure."
								visible = "[Not( VassalContract.IsRightfulLiege )]"
								tooltip = "MRW_TT_NOT_RIGHTFUL_LIEGE"
								# align = left
							}

							expand = { }

							#TODO
							# coa_title_tiny_crown = {
							# 	name = "allegiance_flag"
							# 	datacontext = "[VassalContract.GetTitleAllegiance]"
							# 	visible = "[Title.IsValid]"
							# 	tooltip = "MRW_TITLE_ALLEGIANCE"
							# 	blockoverride "coa_tooltip" { }
							# }
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5

						text_single = {
							# visible = "[Or(Character.GetLiege.IsLocalPlayer, )]"
							raw_text = "[Character.GetOpinionOf(GetPlayer)] opinion of you,"
							tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
							align = left

						}

						text_single = {
							visible = "[Character.IsPowerfulVassal]"
							raw_text = "[Localize('MY_REALM_WINDOW_POWERFUL_VASSAL')]."
						}

						vassal_stance_text = { }

						text_single = {
							visible = "[Not(Character.GetLiege.IsLocalPlayer)]"
							raw_text = "[Character.GetOpinionOf( Character.GetLiege )] opinion of liege."
							tooltip = "[Character.GetOpinionBreakdownText( Character.GetLiege )]"
							align = left
						}

						text_single = {
							visible = "[Character.ShouldShowDreadEffectIconFor( Character.GetLiege )]"
							raw_text = "[CharacterWindow.GetCharacter.GetSheHe|U] is intimidated."
							tooltip = "[Character.GetDreadEffectTooltipFor( Character.GetLiege )]"
							align = left
						}

						text_single = {
							raw_text = "You have a hook."
							visible = "[Character.PlayerHasHooksOrHookableSecrets]"
							tooltip = "[Character.HookTooltip]"
							align = left
						}
						expand = { }
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5

						# vassal_stance_icon = {
						# 	name = "vassal_stance"
						# 	size = { 30 30 }
						# }

						text_single = {
							raw_text = "[Character.RealmSize] counties."
							tooltip = "REALM_WINDOW_SIZE_TT"
							align = left
							visible = "[NotEqualTo_int32(Character.GetPrimaryTitle.GetTierFrame, '(int32)2')]" #nonbaron
						}

						hbox = {
							spacing = 3
							visible = "[Character.IsAlive]"
							# margin = { 5 0 }

							text_single = {
								raw_text = "Soldiers:"
								align = left
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[Character.GetMilitaryStrengthText]."
							}

							text_single = {
								raw_text = "Income:"
								align = left
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[Character.GetBalance|1]."
								align = left
								default_format = "#high"
							}
						}

						# text_single = {
						# 	raw_text = "[Character.GetProwess]."
						# 	raw_tooltip = "[Character.GetProwessBreakdown]"
						# 	align = left
						# 	margin_left = -2
						# }

						expand = { }
					}

					hbox = {
					    layoutpolicy_horizontal = expanding

						hbox_skills_grid_character_named = { }

					    expand = { }
					}

					expand = { }
				}
			}

			block "own_vassal"
			{
				block "feudal_contract"
				{
					vbox = {
						name = "feudal_info"
						layoutpolicy_horizontal = expanding

						background = {
							using = Background_Area
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							visible = "[Character.GetPrimaryTitle.IsBarony]"
							raw_text = "Barons have no contract."
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[And( Not( VassalContract.UsesObligationLevels ), Not( Character.GetPrimaryTitle.IsBarony ) )]"
							spacing = 5

							text_single = {
								tooltip = MY_REALM_WINDOW_NO_FEUDAL_CONTRACT_TT
								raw_text = "[Character.GetGovernment.GetName], no vassal contract."
								align = left
							}

							expand = { }
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5

							text_single = {
								raw_text = "Tax to liege: [MyRealmWindowVassalItem.GetCachedTax|=1]."
								tooltipwidget = {
									my_realm_window_contribution_tooltip = {
										datacontext = "[MyRealmWindowVassalItem.GetTaxBreakdown]"
										blockoverride "levy_info_visible" { visible = no }
										blockoverride "contribution_tooltip_header"
										{
											text = "MRW_TT_TAXES_TO_ME"
										}

										blockoverride "levy_info"
										{
											text_single = {
												multiline = yes
												maximumsize = { 250 -1 }
												text = "[MyRealmWindowVassalItem.GetLevyTooltip]"
											}
										}
									}
								}
								using = tooltip_ws
							}

							text_single = {
								raw_text =  "Levies to liege: [MyRealmWindowVassalItem.GetCachedLeviesFormatted]."
								tooltipwidget = {
									my_realm_window_contribution_tooltip = {
										datacontext = "[MyRealmWindowVassalItem.GetLeviesBreakdown]"
										blockoverride "tax_info_visible" { visible = no }
										blockoverride "contribution_tooltip_header"
										{
											text = "MRW_TT_LEVIES_TO_ME"
										}
										blockoverride "tax_info"
										{
											text_single = {
												multiline = yes
												maximumsize = { 250 -1 }
												text = "[MyRealmWindowVassalItem.GetTaxTooltip]"
											}
										}
									}
								}
								using = tooltip_ws
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "Not rightful liege, [Subtract_CFixedPoint( '(CFixedPoint)1',  GuiScope.SetRoot(MyRealmWindowVassalItem.GetCharacter.MakeScope).ScriptValue('de_jure_penalty'))|%0] penalty."
								visible = "[LessThan_CFixedPoint(GuiScope.SetRoot(MyRealmWindowVassalItem.GetCharacter.MakeScope).ScriptValue('de_jure_penalty'), '(CFixedPoint)1')]"
							}

							expand = { }
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[And( VassalContract.UsesObligationLevels, Not( Character.GetPrimaryTitle.IsBarony))]"
							spacing = 3

							button_round = {
								visible = "[GetVariableSystem.Exists('ocr')]"
								enabled = "[Character.IsPlayerInteractionValid('liege_modify_vassal_contract_interaction')]"
								onclick = "[Character.OpenPlayerInteraction('liege_modify_vassal_contract_interaction')]"
								tooltip = "[Character.GetPlayerInteractionTooltip('liege_modify_vassal_contract_interaction')]"

								button_feudal_contract = {
									alwaystransparent = yes
									parentanchor = center
								}
							}

							button_text = {
								blockoverride "pre" {
									text_single = {
										raw_text = "Can't"
										visible = "[Not(Character.IsPlayerInteractionValid('liege_modify_vassal_contract_interaction'))]"
									}
								}
								blockoverride "text" {
									raw_text = "Change contract."
								}
								enabled = "[Character.IsPlayerInteractionValid('liege_modify_vassal_contract_interaction')]"
								onclick = "[Character.OpenPlayerInteraction('liege_modify_vassal_contract_interaction')]"
								visible = "[VassalContract.IsContractDefault]"
							}

							button_text = { # Display the usual Levy and Tax for Feudal
								visible = "[Character.GetGovernment.IsType('feudal_government')]"
								blockoverride "text" {
									text = "MY_REALM_WINDOW_VASSAL_OBLIGATION"
								}
								blockoverride "dot" {
								}
								onclick = "[Character.OpenPlayerInteraction('liege_modify_vassal_contract_interaction')]"
								enabled = "[Character.IsPlayerInteractionValid('liege_modify_vassal_contract_interaction')]"
							}

							text_single = { # Display the government type for non Feudal
								visible = "[Not(Character.GetGovernment.IsType('feudal_government'))]"
								raw_text = "[Character.GetGovernment.GetName], no obligation levels."
								align = left
							}

							button_text = {
								blockoverride "text" {
									raw_text = "Already changed contract."
									margin_left = -3
								}
								enabled = no
								visible = "[Not(VassalContract.IsContractDefault)]"
							}

							text_single = {
								raw_text = "Blocked."
								tooltip = "VASSAL_CONTRACT_IS_BLOCKED"
								visible = "[VassalContract.IsBlockedFromModification]"
							}

							expand = { }

							# vassal_contract_not_default_icon = { }
						}

						expand = { }
					}
				}
			}
			expand = { }
		}
	}
}