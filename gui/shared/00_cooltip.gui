
types Cooltips
{
	type LandedTitleTooltipBase = object_tooltip_pop_out {
		blockoverride "header_additions" {
			# margin_top = -4

			button_text = {
			    blockoverride "text" {
			        raw_text = "Pan camera, shift Q"
			    }
				onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
				shortcut = map_mode_9
			}

			# coa_title_small_crown = {
			# 	size = { 40 50 }
			# 	blockoverride "coa_tooltip" { }
			# 	blockoverride "coa_hover_glow_visible"
			# 	{
			# 		visible = no
			# 	}
			# }
		}

		blockoverride "title_text" {
			text = "[Title.GetNameWithUnderlyingNoTooltip|U]"
		}

		blockoverride "subheading" {
			margin_left = 6

			vbox_title_type_text = {
				layoutpolicy_horizontal = expanding
			}
		}

		blockoverride "description_text" {
			text = "[Title.GetCOADefaultTooltip]"
		}

		blockoverride "concept_link" {
			text = [title|E]
		}

		blockoverride "extra_data" {
			textbox = {
				using = DefaultTooltipText
				layoutpolicy_horizontal = expanding
				multiline = yes
				fonttintcolor = "[TooltipInfo.GetTintColor]"
				block "highlight_text" { }
			}
		}
	}
}

types StruggleTooltipTypes {

	type StrugglePhaseEffectWar = vbox {
		layoutpolicy_horizontal = expanding
		text_single = {
			layoutpolicy_horizontal = expanding
			tooltipwidget = phase_effect_tooltip_war
			text = "STRUGGLE_EFFECT_LABEL_WAR"
		}

	}

	type StrugglePhaseEffectCulture = vbox {
		layoutpolicy_horizontal = expanding
		text_single = {
			tooltipwidget = phase_effect_tooltip_culture
			layoutpolicy_horizontal = expanding
			text = "STRUGGLE_EFFECT_LABEL_CULTURE"
		}
	}

	type StrugglePhaseEffectFaith = vbox {
		layoutpolicy_horizontal = expanding
		text_single = {
			tooltipwidget = phase_effect_tooltip_faith
			layoutpolicy_horizontal = expanding
			text = "STRUGGLE_EFFECT_LABEL_FAITH"
		}

	}

	type StrugglePhaseEffectOther = vbox {
		layoutpolicy_horizontal = expanding
		text_single = {
			tooltipwidget = phase_effect_tooltip_other
			layoutpolicy_horizontal = expanding
			text = "STRUGGLE_EFFECT_LABEL_OTHER"
		}
	}
}

template unit_icon_item_tooltip {

	widget = {
		alwaystransparent = no
		using = GeneralTooltipSetup
		datacontext = "[UnitItem.GetArmy]"

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		hbox = {
			margin = { 10 5 }
			set_parent_size_to_minimum = yes

			vbox = {
				margin = { 10 10 }

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Tooltip."
				}
				text_single = {
					raw_text = "[UnitItem.GetArmy.GetNameNoTooltip]"
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					soldiers_and_quality_small_text = {
						datacontext = [Army.GetComposition]
					}
					expand = { }
				}

				hbox = {
					name = "troop_breakdown"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					dynamicgridbox = {
						name = "troops"
						datamodel = "[CalculateBreakdownItems(Army.Self)]"

						# datamodel_wrap = 5
						# flipdirection = yes
						# maxverticalslots = 2

						item = {
							widget = {
								tooltip = "ARMY_VIEW_TROOP_TT"

								hbox = {
									set_parent_size_to_minimum = yes
									margin_left = 5
									spacing = 3

									text_single = {
										name = "men_at_arms_icon"
										visible = "[TroopItem.IsMaa]"
										raw_text = "[TroopItem.GetRegiment.GetRegiment.GetMAAType.GetName]:"
									}

									text_single = {
										raw_text = "Levies:"
										visible = "[TroopItem.IsLevies]"
									}

									text_single = {
										raw_text = "Knights:"
										visible = "[TroopItem.IsKnight]"
									}

									text_single = {
										layoutpolicy_horizontal = growing
										raw_text = "[TroopItem.GetCount|*],"
									}
								}
							}
						}
					}
					expand = {
						layoutpolicy_vertical = expanding
					}
				}

				divider_light =
				{
					layoutpolicy_horizontal = expanding
				}

				button_text = {
					blockoverride "text" {
						raw_text = "Owner: [UnitItem.GetOwner.GetPrimaryTitle.GetNameNoTierNoTooltip]."
					}
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					datacontext = "[Army.GetCommander]"
					visible = "[Character.IsValid]"
					layoutpolicy_horizontal = expanding

					text_single = {
						# layoutpolicy_horizontal = expanding
						text = "ARMY_TOOLTIP_COMMANDER"
					}

					text_single = {
						raw_text = "."
					}

					text_single = {
						raw_text = " "
					}

					hbox = {
						tooltip = "[Character.GetCommanderAdvantageDesc]"
						spacing = 3
						text_single = {
							raw_text = "Advantage:"
						}
						text_single = {
							text = "ARMY_TOOLTIP_COMMANDER_ADVANTAGE"
						}
					}

					text_single = {
						raw_text = "."
					}

					expand = { }
				}

				text_single = {
					visible = "[Not( Army.GetCommander.IsValid )]"
					layoutpolicy_horizontal = expanding
					text = "ARMY_TOOLTIP_NO_COMMANDER"
				}

				expand = { }

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[UnitItem.IsRulerCommander]"
					margin_left = 4

					icon = {
						texture = "gfx/interface/icons/map_icons/commander_is_leader.dds"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						datacontext = "[UnitItem.GetUnitPortraitCharacter]"
						text = "COMMANDER_IS_LEADER"
						align = left
					}
				}
				hbox = {
					visible = "[UnitItem.HasDisembarkPenalty]"
					layoutpolicy_horizontal = expanding
					margin_left = 4

					icon = {
						name = "sea_sickness_icon"
						size = { 24 24 }
						texture = "gfx/interface/icons/map_icons/army_icon_disembarked.dds"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[Army.GetEmbarkInfoForTooltip]"
						align = left
					}
				}

				hbox = {
					visible = "[UnitItem.IsGathering]"
					layoutpolicy_horizontal = expanding
					margin_left = 4

					icon = {
						texture = "gfx/interface/icons/map_icons/army_icon_gathering.dds"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = "ARMY_TOOLTIP_IS_GATHERING"
						align = left
					}
				}


				vbox = {
					visible = "[Not(Army.IsNeutralToPlayer)]"
					layoutpolicy_horizontal = expanding
					spacing = 4
					hbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 4
						tooltip = "ARMY_ATTRITION_TT"
						visible = "[GreaterThan_CFixedPoint( Army.GetArmyAttritionPercentage, '(CFixedPoint)0' )]"
						icon = {
							texture = "gfx/interface/icons/map_icons/attrition_icon.dds"
							size = { 24 24 }
						}
						text_single = {
							layoutpolicy_horizontal = expanding
							name = "attrition"
							text = "ARMY_TOOLTIP_ATTRITION"
							align = left
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 4

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "[Army.GetSupplyInfoForTooltip]"
							tooltip = "[Army.GetSupplyStateTooltip]"
							align = left
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Army.IsMoving]"
						margin_left = 4
						icon = {
							name = "unit_retreating"
							visible = "[UnitItem.IsRetreating]"
							texture = "gfx/interface/icons/map_icons/army_icon_retreating.dds"
						}
						icon = {
							name = "unit_moving"
							visible = "[Not(UnitItem.IsRetreating)]"
							texture = "gfx/interface/icons/combat_effects/moving_army.dds"
							size = { 24 24 }
						}
						text_single = {
							layoutpolicy_horizontal = expanding
							text = "[Army.GetMovementInfoForTooltip]"
							align = left
						}
					}

					hbox = {
						visible = "[UnitItem.IsMovementLocked]"
						layoutpolicy_horizontal = expanding
						margin_left = 4

						icon = {
							texture = "gfx/interface/icons/map_icons/movement_locked.dds"
							size = { 24 24 }
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "ARMY_TOOLTIP_IS_MOVEMENT_LOCKED"
							align = left
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[UnitItem.GetArmy.IsRaidArmy]"
					margin_left = 4

					hbox = {
						visible = "[UnitItem.GetArmy.IsRaidLootCapped]"
						tooltip = ARMY_AT_LOOT_CAP_TOOLTIP
						layoutpolicy_horizontal = expanding

						icon = {
							texture = "gfx/interface/icons/map_icons/army_icon_at_loot_cap.dds"
							size = { 24 24 }
						}
						text_single = {
							layoutpolicy_horizontal = expanding
							text = "ARMY_AT_LOOT_CAP"
							align = left
						}
					}


					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(UnitItem.GetArmy.IsRaidLootCapped)]"
						text = "ARMY_LOOT_INFO"
						align = left
					}
				}

				block "extra_unit_info" { }

				text_single = {
					visible = "[And( InDebugMode, Not(ReleaseMode) )]"
					# Deliberately unlocalized since this is debug functionality
					layoutpolicy_horizontal = expanding
					raw_text = "Army: [Army.GetArmyId] Unit: [Army.GetUnitId]"
					align = left
				}

				text_single = {
					visible = "[And( InDebugMode, Not(ReleaseMode) )]"
					# Deliberately unlocalized since this is debug functionality
					layoutpolicy_horizontal = expanding
					raw_text = "#E AI Coordinator: [Army.GetAiCoordinatorId]#!"
					align = left
					raw_tooltip = "Stack: [Army.GetAiUnitStackId] Sub: [Army.GetAiSubUnitStackId]"
				}

				text_multi = {
					visible = "[And( InDebugMode, Not(ReleaseMode) )]"
					# Deliberately unlocalized since this is debug functionality
					layoutpolicy_horizontal = expanding
					autoresize = yes
					text = "[Army.GetAIInfo]"
					align = left
				}
			}
		}
	}
}

template unit_icon_item_tooltip_ocr {

	widget = {
		alwaystransparent = no
		using = GeneralTooltipSetup

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		hbox = {
			margin = { 10 5 }
			set_parent_size_to_minimum = yes

			vbox = {
				margin = { 10 10 }

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Tooltip."
				}
				text_single = {
					raw_text = "[Army.GetNameNoTooltip]."
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					soldiers_and_quality_small_text = {
						datacontext = [Army.GetComposition]
					}
					expand = { }
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[ObjectsEqual(Army.GetOwner.GetID, Army.GetCommander.GetID)]"
					margin_left = 4

					text_single = {
						layoutpolicy_horizontal = expanding
						datacontext = "[Army.GetCommander]"
						raw_text = "[Localize('COMMANDER_IS_LEADER')]."
						align = left
					}
				}
				hbox = {
					visible = "[Army.IsRecentlyDisembarked]"
					layoutpolicy_horizontal = expanding
					margin_left = 4

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[Army.GetEmbarkInfoForTooltip]."
						align = left
					}
				}

				hbox = {
					visible = "[Army.IsGathering]"
					layoutpolicy_horizontal = expanding
					margin_left = 4

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[Localize('ARMY_TOOLTIP_IS_GATHERING')]."
						align = left
					}
				}

				vbox = {
					visible = "[Not(Army.IsNeutralToPlayer)]"
					layoutpolicy_horizontal = expanding
					spacing = 4
					hbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 4
						tooltip = "ARMY_ATTRITION_TT"
						visible = "[GreaterThan_CFixedPoint( Army.GetArmyAttritionPercentage, '(CFixedPoint)0' )]"

						text_single = {
							layoutpolicy_horizontal = expanding
							name = "attrition"
							raw_text = "[Localize('ARMY_TOOLTIP_ATTRITION')]."
							align = left
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 4

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[Army.GetSupplyInfoForTooltip]."
							tooltip = "[Army.GetSupplyStateTooltip]"
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Army.IsMoving]"
						margin_left = 4
						spacing = 3

						text_single = {
							visible = "[Army.IsRetreating]"
							raw_text = "Retreating to"
						}

						text_single = {
							visible = "[Not(Army.IsRetreating)]"
							raw_text = "Moving to"
						}
						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[Army.GetMovementInfoForTooltip]."
						}
					}

					# hbox = {
					# 	visible = "[UnitItem.IsMovementLocked]"
					# 	layoutpolicy_horizontal = expanding
					# 	margin_left = 4
					#
					# 	icon = {
					# 		texture = "gfx/interface/icons/map_icons/movement_locked.dds"
					# 		size = { 24 24 }
					# 	}
					#
					# 	text_single = {
					# 		layoutpolicy_horizontal = expanding
					# 		text = "ARMY_TOOLTIP_IS_MOVEMENT_LOCKED"
					# 		align = left
					# 	}
					# }
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Army.IsRaidArmy]"
					margin_left = 4

					hbox = {
						visible = "[Army.IsRaidLootCapped]"
						tooltip = ARMY_AT_LOOT_CAP_TOOLTIP
						layoutpolicy_horizontal = expanding


						text_single = {
							layoutpolicy_horizontal = expanding
							text = "ARMY_AT_LOOT_CAP"
							align = left
						}
					}


					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(Army.IsRaidLootCapped)]"
						text = "ARMY_LOOT_INFO"
						align = left
					}
				}

				hbox = {
					name = "troop_breakdown"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					dynamicgridbox = {
						name = "troops"
						datamodel = "[CalculateBreakdownItems(Army.Self)]"

						# datamodel_wrap = 5
						# flipdirection = yes
						# maxverticalslots = 2

						item = {
							widget = {
								tooltip = "ARMY_VIEW_TROOP_TT"

								hbox = {
									set_parent_size_to_minimum = yes
									margin_left = 5
									spacing = 3

									text_single = {
										name = "men_at_arms_icon"
										visible = "[TroopItem.IsMaa]"
										raw_text = "[TroopItem.GetRegiment.GetRegiment.GetMAAType.GetName]:"
									}

									text_single = {
										raw_text = "Levies:"
										visible = "[TroopItem.IsLevies]"
									}

									text_single = {
										raw_text = "Knights:"
										visible = "[TroopItem.IsKnight]"
									}

									text_single = {
										layoutpolicy_horizontal = growing
										raw_text = "[TroopItem.GetCount|*],"
									}
								}
							}
						}
					}
					expand = {
						layoutpolicy_vertical = expanding
					}
				}

				button_text = {
					blockoverride "text" {
						raw_text = "Owner: [Army.GetOwner.GetPrimaryTitle.GetNameNoTierNoTooltip]."
					}
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					datacontext = "[Army.GetCommander]"
					visible = "[Character.IsValid]"
					layoutpolicy_horizontal = expanding

					text_single = {
						# layoutpolicy_horizontal = expanding
						text = "ARMY_TOOLTIP_COMMANDER"
					}

					text_single = {
						raw_text = "."
					}

					text_single = {
						raw_text = " "
					}

					hbox = {
						tooltip = "[Character.GetCommanderAdvantageDesc]"
						spacing = 3
						text_single = {
							raw_text = "Advantage:"
						}
						text_single = {
							text = "ARMY_TOOLTIP_COMMANDER_ADVANTAGE"
						}
					}

					text_single = {
						raw_text = "."
					}

					expand = { }
				}

				text_single = {
					visible = "[Not( Army.GetCommander.IsValid )]"
					layoutpolicy_horizontal = expanding
					text = "ARMY_TOOLTIP_NO_COMMANDER"
				}


				widget = {
					size = { 0 5 }
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Orders."
				}
				# text_single = {
				# 	visible = "[And( InDebugMode, Not(ReleaseMode) )]"
				# 	# Deliberately unlocalized since this is debug functionality
				# 	layoutpolicy_horizontal = expanding
				# 	raw_text = "Army: [Army.GetArmyId] Unit: [Army.GetUnitId]"
				# 	align = left
				# }
				# #
				# text_single = {
				# 	visible = "[And( InDebugMode, Not(ReleaseMode) )]"
				# 	# Deliberately unlocalized since this is debug functionality
				# 	layoutpolicy_horizontal = expanding
				# 	raw_text = "#E AI Coordinator: [Army.GetAiCoordinatorId]#!"
				# 	align = left
				# 	raw_tooltip = "Stack: [Army.GetAiUnitStackId] Sub: [Army.GetAiSubUnitStackId]"
				# }


				text_multi = {
					# visible = "[And( InDebugMode, Not(ReleaseMode) )]"
					# Deliberately unlocalized since this is debug functionality
					layoutpolicy_horizontal = expanding
					autoresize = yes
					raw_text = "[Army.GetAIInfo]"
					align = left
					max_width = 700
				}
			}
		}
	}
}

template unit_icon_tooltip {
	container = {
		using = GeneralTooltipSetup

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		alwaystransparent = no

		flowcontainer = {
			datamodel = "[UnitMapIcon.GetUnitItems]"
			visible = "[GreaterThan_int32(GetDataModelSize(UnitMapIcon.GetUnitItems), '(int32)1')]"
			direction = vertical
			spacing = 5
			margin = { 30 15 }
			margin_right = 20


			text_single = {
				raw_text = "Tooltip."
			}

			text_single = {
				text = "ARMY_ICON_HEADER"
			}

			item = {
				flowcontainer = {
					spacing = 5
					ignoreinvisible = yes

					container_allied_unit_icon_item = {
						blockoverride "unit_items" { }
						blockoverride "multi_select" { }
						blockoverride "onclick" {
							onclick = "[UnitMapIcon.OnClickArmy( Army.Self )]"
						}
						min_width = 120
					}
					container_hostile_unit_icon_item = {
						blockoverride "unit_items" { }
						blockoverride "multi_select" { }
						min_width = 120
					}

					text_single = {
						text = "ARMY_UNIT_COOLTIP_NAME"
					}

					tooltipwidget = {
						using = unit_icon_item_tooltip
					}

					using = tooltip_es
				}
			}
		}
		container = {
			visible = "[EqualTo_int32(GetDataModelSize(UnitMapIcon.GetUnitItems), '(int32)1')]"
			datamodel = "[UnitMapIcon.GetUnitItems]"

			item = {
				using = unit_icon_item_tooltip
			}
		}
	}
}

template phase_effect {
	vbox = {
		layoutpolicy_horizontal = expanding
		spacing = 12
		margin_bottom = 15

		background = {
			using = Background_Area_With_Header
			margin_left = 16
			margin_right = 16
		}

		text_single = {
			max_width = 400
			margin = { 0 5 }
			text = "STRUGGLE_TOOLTIP_EFFECTS_HEADER"
		}

		vbox = {
			name = "phase_effects"
			layoutpolicy_horizontal = expanding

			StrugglePhaseEffectWar = { }

			StrugglePhaseEffectCulture = { }

			StrugglePhaseEffectFaith = { }

			StrugglePhaseEffectOther = { }
		}
	}
}

# template character_opinion_tooltip {
# 	widget = {
# 		using = GeneralTooltipSetup
# 		using = DefaultTooltipBackground
# 		alwaystransparent = no
# 		scissor = yes
#
# 		vbox = {
# 			set_parent_size_to_minimum = yes
# 			margin = { 8 8 }
# 			spacing = 2
#
# 			hbox = {
# 				name = "heading"
# 				layoutpolicy_horizontal = expanding
#
# 				margin = { 8 8 }
#
# 				spacing = 6 #ugly hack to get a space between label and value
#
# 				background = {
# 					using = Background_Area
# 				}
#
# 				text_single = {
# 					block "ott_heading_text"
# 					{
# 						raw_text = "@opinion_icon! [Character.GetOpinionHeadingText( GetPlayer )]"
# 					}
#
# 					using = Font_Size_Medium
# 					align = nobaseline
# 				}
#
# 				text_single = {
# 					background = {
# 						name = "portrait_opinion_bg"
# 						texture = "gfx/interface/component_tiles/solid_black_label.dds"
# 						spritetype = Corneredtiled
# 						spriteborder = { 20 20 }
# 						texture_density = 2
# 						margin = { 3 1 }
# 					}
#
# 					max_width = 45
# 					align = nobaseline
#
# 					block "ott_opinion_value_text"
# 					{
# 						text = "[Character.GetOpinionOf( GetPlayer )|=]"
# 						fonttintcolor = "[Character.GetOpinionOfTint( GetPlayer )]"
# 					}
#
# 					default_format = "#true_white"
# 					using = Font_Size_Medium
# 				}
#
# 				expand = {}
# 			}
#
# 			hbox = {
# 				layoutpolicy_horizontal = expanding
# 				margin = { 8 0 }
# 				visible = "[Character.IsPlayer]"
#
# 				text_multi = {
# 					datacontext = "[Character]"
# 					visible = "[Not( Character.IsLocalPlayer )]"
#
# 					autoresize = yes
# 					max_width = 400
# 					text = "PLAYER_OPINION_UNIMPORTANT"
# 					default_format = "#weak"
# 				}
#
# 				text_multi = {
# 					datacontext = "[Character]"
# 					visible = "[Character.IsLocalPlayer]"
#
# 					autoresize = yes
# 					max_width = 400
# 					text = "PLAYER_OPINION_UNIMPORTANT_SELF"
# 					default_format = "#weak"
# 				}
#
# 				expand = {}
# 			}
#
#
# 			hbox = {
# 				layoutpolicy_horizontal = expanding
# 				margin = { 8 0 }
# 				expand = {}
#
# 				text_multi = {
# 					block "ott_opinion_breakdown_text"
# 					{
# 						text = "[Character.GetOpinionBreakdownText( GetPlayer )]"
# 						align = right
# 						margin_right = -35
# 					}
#
# 					autoresize = yes
# 					max_width = 400
# 				}
#
# 			}
# 		}
# 	}
# }