widget = {
	name = "outliner_window"
	parentanchor = top|right
	position = { 0 0 }
	alwaystransparent = no
	filter_mouse = all
	layer = windows_layer

	state = {
		name = default
		position = { -30 50 }
		trigger_when = "[GetVariableSystem.Exists('ocr')]"
	}

	state = {
		name = ocr
		position = { 0 0 }
		trigger_when = "[Not(GetVariableSystem.Exists('ocr'))]"
	}

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_outliner_show"
		}
		on_start = "[GetScriptedGui('zoom_out').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
		next = a
		# on_start = "[GetScriptedGui('sieges_and_battles').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_outliner_hide"
		}
	}

	state = {
		name = daily_tick
		on_start = "[GetScriptedGui('zoom_out').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"

		next = a
	}

	state = {
		name = a
		delay = 0.5
		# fires an animation on all armies in map_icon_layer_templates, which fires a scripted gui add_from_map_outliner in sgui_hostile_outliner. This adds it to a temp list.
		on_start = "[PdxGuiTriggerAllAnimations('add_from_map')]"


		# we then sort armies in the list by strength and add to the outliner
		on_start = "[GetScriptedGui('sort_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
		# remove units that are not hostile to us anymore
		on_start = "[GetScriptedGui('clear_dead_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
		# on_start = "[GetScriptedGui('sieges_and_battles').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
		# trigger_when = "[GetPlayer.MakeScope.]"
		on_start = "[GetScriptedGui('zoom_in').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
	}

	state = {
		name = "hide_outliner"
		using = Animation_FadeOut_Standard
		trigger_when = "[Not(IsDefaultGUIMode)]"
	}

	state = {
		name = "show_outliner"
		using = Animation_FadeIn_Quick
		trigger_when = "[IsDefaultGUIMode]"
	}
	# visible = "[Not(IsRightWindowOpen)]"

	flowcontainer = {
		visible = "[And(Not(IsRightWindowOpen), Not(IsPauseMenuShown))]"
		resizeparent = yes
		margin = { 10 5 }
		margin_bottom = 5
		direction = vertical

		state = {
			name = _show
			using = Animation_FadeIn_Standard
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		background = {
			name = "paper_texture_shadow"
			texture = "gfx/interface/window_event/tile_letter_shadow.dds"
			spriteType = Corneredtiled
			spriteborder = { 200 200 }
			margin = { -15 0 }
			margin_right = -20
		}

		background = {
			name = "paper_texture_flat"
			texture = "gfx/interface/window_event/tile_letter_flat.dds"
			spriteType = Corneredtiled
			spriteborder = { 200 200 }
			alpha = 0.9
			color = { 0.51 0.53 0.58 1 }
			margin = { -15 0 }
			margin_right = -20

			modify_texture = {
				name = "paper_texture_overlay"
				texture = "gfx/interface/window_event/overlay_letter_texture.dds"
				spriteType = Corneredstretched
				blend_mode = overlay
			}
		}

		background = {
			using = Background_Area_Solid
			margin = { -15 0 }
			margin_right = -20
			alpha = 0.7
		}


		# this sets the normal width for the outliner
		# can be used to force-update the list
		button = {
			size = { 640 20 }
			onclick = "[GetScriptedGui('manual_zoom_out').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
			# on_start = "[GetScriptedGui('sieges_and_battles').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"

			onclick = "[PdxGuiTriggerAllAnimations('add_from_map')]"
			# onclick = "[GetScriptedGui('zoom_out').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
			onclick = "[PdxGuiWidget.TriggerAnimation('a')]"

			state = {
				name = a
				delay = 0.5
				on_start = "[GetScriptedGui('sort_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
				on_start = "[GetScriptedGui('clear_dead_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
				on_start = "[GetScriptedGui('manual_zoom_in').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
			}

			state = {
				name = _mouse_enter
				on_start = "[PdxGuiWidget.FindChild('cover').Show]"
			}

			state = {
				name = _mouse_leave
				on_start = "[PdxGuiWidget.FindChild('cover').Hide]"
			}

			text_single = {
				margin = { 20 0 }
				raw_text = "Outliner, hotkey O. Reload with Shift E. Updates daily."
				layoutpolicy_horizontal = expanding
			}

			button = {
				onclick = "[ToggleGameView('outliner')]"
				shortcut = close_window
			}
			shortcut = map_mode_11
		}


		widget = {
			size = { 0 0 }
			# visible = "[And(Outliner.IsCategoryShown('unit'), GetPlayer.IsValid)]"
			# visible = "[GetPlayer.IsValid]"
			scissor = yes

			fixedgridbox = {
				size = { 0 0 }
				addrow = 0
				addcolumn = 0
				maxverticalslots = 1
				datamodel = "[Outliner.GetUnitItems]"

				item = {
					button = {
						size = { 0 0 }
						raw_text = "unit"
						onclick = "[UnitItem.SelectAndPanUnit]"
						shortcut = mapmode_duchies_secondary
					}
				}
			}
		}

		scrollarea = {
			autoresizescrollarea = yes
			scrollbarpolicy_horizontal = always_off
			maximumsize = { 620 920 }
			minimumsize = { 620 0 }

			scrollbar_vertical = {
				using = Scrollbar_Vertical
				blockoverride "text" {
					text_single = {
						alwaystransparent = yes
						background = { using = Background_Area_Solid margin = { 1000 2 } }
						widgetanchor = right
						align = left
						parentanchor = left
						raw_text = "List can be scrolled."
						layoutpolicy_horizontal = expanding
					}
				}
			}

			scrollwidget = {
				vbox = {
					set_parent_size_to_minimum = yes
					min_width = 600
					margin = { 10 0 }
					margin_right = 15
					margin_top = 20

					button_outliner_header = {
						name = "pinned_characters_header"
						layoutpolicy_horizontal = expanding
						visible = "[Not(IsDataModelEmpty(Outliner.GetPinnedCharacters))]"

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[Outliner.ToggleCategory('pinned_character')]"
							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('pinned_character'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
						}

						blockoverride "oh_name"
						{
							text = "OUTLINER_PINNED_CHARACTERS"
						}

						blockoverride "oh_count"
						{
							text = "[Outliner.GetCategoryItemsCount('pinned_character')|V]"
						}

						blockoverride "expanded"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
						}
					}

					vbox = {
						name = "pinned_characters"
						visible = "[Outliner.IsCategoryShown('pinned_character')]"
						datamodel = "[Outliner.GetPinnedCharacters]"
						layoutpolicy_horizontal = expanding
						margin = { 5 5 }

						item = {
							hbox = {
								name = "pinned_character_item"
								layoutpolicy_horizontal = expanding
								using = character_tooltip

								button_list = {
									name = "character_button"
									size = { 0 54 }
									layoutpolicy_horizontal = expanding

									onclick = "[DefaultOnCharacterClick(Character.GetID)]"
									down = "[Character.IsShownInCharacterWindow]"
									onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
									button_ignore = none

									background = {
										using = Background_Area
									}

									state = {
										name = _mouse_hierarchy_enter
										on_start = "[PdxGuiWidget.FindChild('button_unpin').TriggerAnimation('button_unpin_show')]"
									}

									state = {
										name = _mouse_hierarchy_leave
										on_start = "[PdxGuiWidget.FindChild('button_unpin').TriggerAnimation('button_unpin_hide')]"
									}

									hbox = {
										margin = { 10 2 }

										vbox = {
											layoutpolicy_horizontal = expanding

											hbox = {
												layoutpolicy_horizontal = expanding
												spacing = 5

												icon = {
													visible = "[Character.IsDeadAndValid]"
													size = { 20 20 }
													texture = "[Character.GetDeathReasonIcon]"
													tooltip = "CHARACTER_DEAD_TOOLTIP"
												}

												text_single = {
													layoutpolicy_horizontal = expanding
													autoresize = no
													text = "OUTLINER_PINNED_CHARACTER"
													align = nobaseline
													default_format = "#high"
												}
											}

											hbox = {
												layoutpolicy_horizontal = expanding
												spacing = 5
												margin_left = 3

												text_single = {
													text = "[Character.GetOpinionOf( GetPlayer )|=]"
													fonttintcolor = "[Character.GetOpinionOfTint( GetPlayer )]"
													default_format = "#medium;glow_color:{0.1,0.1,0.1,1}"
													align = nobaseline
													visible = "[Character.IsAlive]"

													background = {
														name = "portrait_opinion_bg"
														texture = "gfx/interface/component_tiles/solid_black_label.dds"
														spritetype = Corneredtiled
														spriteborder = { 20 20 }
														margin = { 5 1 }
														texture_density = 2
													}
												}

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[Character.GetRelationToString( GetPlayer )]"
													tooltip = "EXTENDED_RELATIONS_TOOLTIP"
													autoresize = no
													align = nobaseline
												}
											}
										}

										button_round = {
											name = "button_unpin"
											size = { 30 30 }
											onclick = "[Character.ToggleCharacterPinned]"
											tooltip = "PIN_TT"
											inherit_visual_state = no

											alpha = 0.6

											state = {
												name = _mouse_enter
												alpha = 1
												duration = 0.1
												using = Animation_Curve_Default
											}

											state = {
												name = _mouse_leave
												alpha = 0.6
												duration = 0.2
												using = Animation_Curve_Default
											}

											button_unpin = {
												parentanchor = center
												size = { 20 20 }
												alwaystransparent = yes
												inherit_visual_state = no
											}
										}
									}
								}
							}
						}
					}

					button_outliner_header = {
						name = "players_header"
						layoutpolicy_horizontal = expanding
						visible = "[GameHasMultiplePlayers]"

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[Outliner.ToggleCategory('players')]"
							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('players'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
						}

						blockoverride "oh_name"
						{
							text = "OUTLINER_PLAYERS"
						}

						blockoverride "oh_count"
						{
							text = "[Outliner.GetCategoryItemsCount('players')|V]"
						}

						blockoverride "expanded"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
						}
					}

					vbox = {
						name = "players"
						datamodel = "[Outliner.GetPlayers]"
						visible = "[And( Outliner.IsCategoryShown('players'), GameHasMultiplePlayers )]"
						layoutpolicy_horizontal = expanding
						margin = { 8 5 }
						spacing = 5

						item = {
							button_list = {
								name = "player_button"
								datacontext = "[OutlinerPlayer.GetCharacter]"
								layoutpolicy_horizontal = expanding
								size = { 0 40 }

								enabled = "[Character.IsValid]"
								onclick = "[DefaultOnCharacterClick(Character.GetID)]"
								down = "[Character.IsShownInCharacterWindow]"
								onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
								button_ignore = none

								hbox = {
									spacing = 5
									margin = { 5 0 }

									coa_realm_tiny = {
										visible = "[Character.HasLandedTitles]"
									}

									using = character_tooltip

									using = tooltip_ws

									text_single = {
										name = "player_name"
										layoutpolicy_horizontal = expanding
										text = "[OutlinerPlayer.GetName]"
										default_format = "#high"
										using = Font_Size_Medium
										align = nobaseline
									}
								}
							}
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
					    blockoverride "text" {
					        raw_text = "Using [Select_CString(GetVariableSystem.Exists('compact_units'), 'detailed', 'compact')] unit view, Shift W. Select first unit with U."
					    }
						onclick = "[GetVariableSystem.Toggle('compact_units')]"
						shortcut = map_mode_10
					}


					# text_single = {
					# 	layoutpolicy_horizontal = expanding
					# 	raw_text = "Seen on the map."
					# }
					#
					# vbox = {
					# 	datamodel = "[GetPlayer.MakeScope.GetList('hostile_armies_temp')]"
					# 	layoutpolicy_horizontal = expanding
					# 	margin = { 8 0 }
					# 	spacing = -2
					#
					# 	item = {
					# 		army_button_o = { }
					# 	}
					# }

					# allied armies
					button_outliner_header = {
						layoutpolicy_horizontal = expanding
						visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('battles'))))]"

						# tooltipwidget = {
						# 	outliner_tooltip = { }
						# }

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('battles'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[GetVariableSystem.Toggle('battles')]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('battles'))]"
						}

						blockoverride "oh_name"
						{
							raw_text = "Battles"

						}

						blockoverride "extra" {
							text_single = {
								raw_text = ", click to hide"
								align = nobaseline
								visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('battles')), '(int32)1')]"
							}
						}

						blockoverride "oh_count"
						{
							raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('battles'))]"
						}
						blockoverride "expanded"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('battles'))]"
						}
					}

					vbox = {
						visible = "[And(And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('battles')))), Not(GetVariableSystem.Exists('battles')))]"
						layoutpolicy_horizontal = expanding

						vbox = {
							name = "units"
							datamodel = "[Outliner.GetUnitItems]"
							layoutpolicy_horizontal = expanding
							margin = { 8 0 }

							item = {
								army_button_o = {
									visible = "[GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End )]"
									blockoverride "context" {
										datacontext = "[UnitItem.GetArmy]"
									}
									blockoverride "enemy_here" {
										datacontext = "[UnitItem.GetArmy.GetLocation.MakeScope.Var('enemy_here').Army]"
									}
									blockoverride "click" {
										onclick = "[UnitItem.SelectAndPanUnit]"
										# onclick = "[UnitItem.PanToUnit]"
										onrightclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
										# onrightclick = "[UnitItem.PanToUnit]"
										down = "[UnitItem.IsSelected]"
										button_ignore = none
									}
									# blockoverride "position" {
									# 	visible = "[UnitItem.IsSelected]"
									# }
									# blockoverride "same_position" {
									# 	visible = "[Not(UnitItem.IsSelected)]"
									# }
								}
							}
						}
						# allied armies
						vbox = {
							datamodel = "[GetPlayer.MakeScope.GetList('allied_units')]"
							layoutpolicy_horizontal = expanding
							margin = { 8 0 }
							spacing = -2

							item = {
								army_button_o = {
									visible = "[GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End )]"
									blockoverride "fighting" {
									}
								}
							}
						}
					}

					button_outliner_header = {
						name = "units_header"
						layoutpolicy_horizontal = expanding
						visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(Outliner.GetUnitItems)))]"

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[Outliner.ToggleCategory('unit')]"
							# tooltip = "[SelectLocalization( Outliner.IsCategoryShown('unit'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
							# onclick = "[PdGUIInn('select_armies')]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
						}

						blockoverride "oh_name"
						{
							text = "OUTLINER_ARMIES"
						}
						blockoverride "extra" {
							text_single = {
								raw_text = ", click to hide"
								visible = "[GreaterThan_int32(GetDataModelSize(Outliner.GetUnitItems), '(int32)1')]"
								align = nobaseline
							}
						}

						blockoverride "oh_count"
						{
							text = "[Outliner.GetCategoryItemsCount('unit')|V]"
						}
						blockoverride "expanded"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
						}
					}

					vbox = {
						name = "units"
						datamodel = "[Outliner.GetUnitItems]"
						visible = "[And(Outliner.IsCategoryShown('unit'), GetPlayer.IsValid)]"
						layoutpolicy_horizontal = expanding
						margin = { 8 0 }

						item = {
							army_button_o = {
								blockoverride "context" {
									datacontext = "[UnitItem.GetArmy]"
								}
								blockoverride "enemy_here" {
									datacontext = "[UnitItem.GetArmy.GetLocation.MakeScope.Var('enemy_here').Army]"
								}
								blockoverride "click" {
									onclick = "[UnitItem.SelectAndPanUnit]"
									# onclick = "[UnitItem.PanToUnit]"
									onrightclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
									# onrightclick = "[UnitItem.PanToUnit]"
									down = "[UnitItem.IsSelected]"
									button_ignore = none
								}
								# blockoverride "position" {
								# 	visible = "[UnitItem.IsSelected]"
								# }
								# blockoverride "same_position" {
								# 	visible = "[Not(UnitItem.IsSelected)]"
								# }
							}
						}
					}

					# # battles
					# button_outliner_header = {
					# 	layoutpolicy_horizontal = expanding
					# 	visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('battles')))]"
					#
					# 	tooltipwidget = {
					# 		outliner_tooltip = { }
					# 	}
					#
					# 	blockoverride "button_expand_frame"
					# 	{
					# 		frame = "[BoolTo2And1(GetVariableSystem.Exists('battles'))]"
					# 	}
					#
					# 	blockoverride "oh_button"
					# 	{
					# 		onclick = "[GetVariableSystem.Toggle('battles')]"
					# 		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
					# 		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
					# 	}
					#
					# 	blockoverride "oh_toggle_frame"
					# 	{
					# 		frame = "[BoolTo2And1(GetVariableSystem.Exists('battles'))]"
					# 	}
					#
					# 	blockoverride "oh_name"
					# 	{
					# 		raw_text = "Battles"
					#
					# 	}
					#
					# 	blockoverride "oh_count"
					# 	{
					# 		raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('battles'))]"
					# 	}
					# 	blockoverride "expanded"
					# 	{
					# 		frame = "[BoolTo2And1(GetVariableSystem.Exists('battles'))]"
					# 	}
					# }
					#
					# # battles
					# vbox = {
					# 	datamodel = "[GetPlayer.MakeScope.GetList('battles')]"
					# 	visible = "[And(Not(GetVariableSystem.Exists('battles')), GetPlayer.IsValid)]"
					# 	layoutpolicy_horizontal = expanding
					# 	margin = { 8 0 }
					# 	spacing = -2
					#
					# 	item = {
					# 		army_button_o = { }
					# 	}
					# }


					# hostiles in your land
					button_outliner_header = {
						visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('hostiles_inside'))))]"
						layoutpolicy_horizontal = expanding

						# tooltipwidget = {
						# 	outliner_tooltip = {
						# 		blockoverride "datamodel" {
						# 			datamodel = "[GetPlayer.MakeScope.GetList('hostiles_inside')]"
						# 		}
						# 	}
						# }

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_inside'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[GetVariableSystem.Toggle('hostiles_inside')]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_inside'))]"
						}

						blockoverride "oh_name"
						{
							raw_text = "Enemies in your lands"
						}

						blockoverride "extra" {
							text_single = {
								raw_text = ", click to hide"
								align = nobaseline
								visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_inside')), '(int32)1')]"
							}
						}

						blockoverride "oh_count"
						{
							raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_inside'))]"
						}
						blockoverride "expanded"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_inside'))]"
						}
					}

					# hostiles in your land
					vbox = {
						datamodel = "[GetPlayer.MakeScope.GetList('hostiles_inside')]"
						visible = "[And(Not(GetVariableSystem.Exists('hostiles_inside')), GetPlayer.IsValid)]"
						layoutpolicy_horizontal = expanding
						margin = { 8 0 }
						spacing = -2

						item = {
							army_button_o = { }
						}
					}

					# hostiles outside
					button_outliner_header = {
						# tooltipwidget = {
						# 	outliner_tooltip = {
						# 		blockoverride "datamodel" {
						# 			datamodel = "[GetPlayer.MakeScope.GetList('hostiles_outside')]"
						# 		}
						# 	}
						# }
						layoutpolicy_horizontal = expanding
						visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('hostiles_outside'))))]"

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_outside'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[GetVariableSystem.Toggle('hostiles_outside')]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_outside'))]"
						}

						blockoverride "oh_name"
						{
							raw_text = "Enemies outside your lands"
						}

						blockoverride "extra" {
							text_single = {
								raw_text = ", click to hide"
								align = nobaseline
								visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_outside')), '(int32)1')]"
							}
						}

						blockoverride "oh_count"
						{
							raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_outside'))]"
						}
						blockoverride "expanded"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_outside'))]"
						}
					}

					# hostiles outside your land
					vbox = {
						datamodel = "[GetPlayer.MakeScope.GetList('hostiles_outside')]"
						visible = "[And(Not(GetVariableSystem.Exists('hostiles_outside')), GetPlayer.IsValid)]"
						layoutpolicy_horizontal = expanding
						margin = { 8 0 }
						spacing = -2

						item = {
							army_button_o = { }
						}
					}

					# hostiles in the fog of war
					button_outliner_header = {
						# tooltipwidget = {
						# 	outliner_tooltip = {
						# 		blockoverride "datamodel" {
						# 			datamodel = "[GetPlayer.MakeScope.GetList('hostiles_outside')]"
						# 		}
						# 	}
						# }
						layoutpolicy_horizontal = expanding
						visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('in_the_fog'))))]"

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('in_the_fog'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[GetVariableSystem.Toggle('in_the_fog')]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('in_the_fog'))]"
						}

						blockoverride "oh_name"
						{
							raw_text = "Enemies in the fog of war"
						}

						blockoverride "extra" {
							text_single = {
								raw_text = ", click to hide"
								align = nobaseline
								visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('in_the_fog')), '(int32)1')]"
							}
						}

						blockoverride "oh_count"
						{
							raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('in_the_fog'))]"
						}
						blockoverride "expanded"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('in_the_fog'))]"
						}
					}

					# hostiles outside your land
					vbox = {
						datamodel = "[GetPlayer.MakeScope.GetList('in_the_fog')]"
						visible = "[And(Not(GetVariableSystem.Exists('in_the_fog')), GetPlayer.IsValid)]"
						layoutpolicy_horizontal = expanding
						margin = { 8 0 }
						spacing = -2

						item = {
							army_button_o = {
								blockoverride "count" {
									text_single = {
										raw_text = "Hidden,"
									}
								}
							}
						}
					}

					# allied armies
					button_outliner_header = {
						layoutpolicy_horizontal = expanding
						visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('allied_units'))))]"

						# tooltipwidget = {
						# 	outliner_tooltip = { }
						# }

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('allies'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[GetVariableSystem.Toggle('allies')]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('allies'))]"
						}

						blockoverride "oh_name"
						{
							raw_text = "Allied armies"

						}

						blockoverride "extra" {
							text_single = {
								raw_text = ", click to hide"
								align = nobaseline
								visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('allied_units')), '(int32)1')]"
							}
						}

						blockoverride "oh_count"
						{
							raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('allied_units'))]"
						}
						blockoverride "expanded"
						{
							frame = "[BoolTo2And1(GetVariableSystem.Exists('allies'))]"
						}

					}

					# allied armies
					vbox = {
						datamodel = "[GetPlayer.MakeScope.GetList('allied_units')]"
						visible = "[And(Not(GetVariableSystem.Exists('allies')), GetPlayer.IsValid)]"
						layoutpolicy_horizontal = expanding
						margin = { 8 0 }
						spacing = -2

						item = {
							army_button_o = {
								blockoverride "fighting" {

								}
							}
						}
					}

					button_outliner_header = {
						name = "holdings_header"
						layoutpolicy_horizontal = expanding
						visible = "[GetPlayer.IsValid]"

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('holding'))]"
						}

						blockoverride "oh_button"
						{

							onclick = "[Outliner.ToggleCategory('holding')]"
							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('holding'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
						}

						blockoverride "oh_name"
						{
							text = "OUTLINER_HOLDINGS"
						}

						blockoverride "oh_count"
						{
							text = "[Outliner.GetCategoryItemsCount('holding')|V]"
						}

						blockoverride "expanded"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('holding'))]"
						}
					}

					vbox = {
						name = "holdings"
						datamodel = "[Outliner.GetHoldingItems]"
						visible = "[Outliner.IsCategoryShown('holding')]"
						layoutpolicy_horizontal = expanding
						margin = { 8 5 }
						margin_bottom = 10

						item = {
							button_list = {
								name = "holding_item"
								datacontext = "[OutlinerHoldingItem.GetTitle]"
								datacontext = "[OutlinerHoldingItem.GetTitle.GetProvince.GetHolding]"
								layoutpolicy_horizontal = expanding
								size = { 0 34 }

								onclick = "[OutlinerHoldingItem.OnClick]"
								down = "[Or(Holding.IsHoldingOrNonCapitalHoldingHovered, Holding.IsSelected)]"
								tooltipwidget = { holding_tooltip_click = {} }
								using = tooltip_ws
								using = Holding_Mouse_Entry

								margin_widget = {
									size = { 100% 100% }
									margin = { 0 2 }
									margin_left = 40

									progressbar_standard_transparent = {
										name = "progress_bar"
										size = { 100% 100% }
										visible = "[Holding.IsConstructionInProgress]"
										value = "[Holding.GetConstructionProgress]"
										alpha = 0.8
									}
								}

								hbox = {
									widget = {
										size = { 40 28 }

										coa_title_tiny = {
											name = "claim"
											datacontext = "[Holding.GetProvince.GetTitle]"
											parentanchor = center
											tooltip_enabled = no
										}
									}

									hbox = {
										margin = { 5 0 }
										layoutpolicy_horizontal = expanding

										hbox = {

											text_single = {
												max_width = 80
												name = "holding_name"
												layoutpolicy_horizontal = expanding
												text = "[Holding.GetProvince.GetNameNoTooltip]"
												default_format = "#high"
												align = nobaseline
											}
										}

										expand = {}

										hbox = {
											visible = "[Holding.IsConstructionInProgress]"
											text_single = {
												max_width = 120
												name = "construction_name"
												text = "[Holding.GetConstructionBuilding.GetNameNoTooltip]"
												align = right|nobaseline
												default_format = "#high"
											}
										}

										hbox = {
											visible = "[Not(Holding.IsConstructionInProgress)]"

											text_single = {
												text = "HOLDING_TAX_VALUE"
												min_width = 70
												align = left|nobaseline
												default_format = "#high"
											}

											text_single = {
												text = "HOLDING_LEVY_SIZE"
												min_width = 60
												align = left|nobaseline
												default_format = "#high"
											}
										}
									}
								}

							}
						}
					}

					expand = {}
				}
			}
		}
	}
}

types Outliner {
	type button_outliner_header = button_tab {
		size = { 0 31 }

		block "oh_button" {}

		hbox = {
			margin = { 15 0 }
			using = tooltip_ws

			# button_expand = {
			# 	size = { 22 22 }
			# 	alwaystransparent = yes
			# 	alpha = 0.1
			# 	block "button_expand_frame" {}
			# }
			#
			# widget = {
			# 	size = { 5 0 }
			# }

			text_single = {
				name = "count"
				align = nobaseline

				block "oh_count"
				{
					text = "DEFAULT_TEXT"
				}
			}

			widget = {
				size = { 5 0 }
			}

			text_single = {
				name = "category"
				# layoutpolicy_horizontal = expanding
				align = nobaseline
				default_format = "#high"

				block "oh_name"
				{
					text = "DEFAULT_TEXT"
				}
			}

			block "extra" {

			}

			text_single = {
				# margin_left = -5
				align = nobaseline
				raw_text = "."
			}

			expand = { }
		}
	}

	type army_button_o = vbox {
		background = { using = Background_Area }

		block "context" {
			datacontext = "[Scope.Army]"
		}
		layoutpolicy_horizontal = expanding
		# block "size" {
		# 	size = { 0 44 }
		# }

		# button_ignore = none
		# scissor = yes
		# minimumsize = { 600 -1 }

		vbox = {
			layoutpolicy_horizontal = expanding
			# resizeparent = yes
			# margin = { 5 0 }
			# margin_bottom = 10
			# max_width = 350W
			spacing = -1
			margin_bottom = 2
			margin_left = 5

			button_text = {
				layoutpolicy_horizontal = expanding
				block "click" {
					enabled = "[Army.GetLocation.GetCoATitle.IsValid]"
					onclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
				}
			    blockoverride "text" {
			        raw_text = ""
			    }
				blockoverride "extra" {
					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3

						block "count" {
							text_single = {
								raw_text = "[Army.GetSoldierCountString],"
								# visible = "[EqualTo_CFixedPoint(Army.MakeScope.Var('armies').GetValue,]"
								visible = "[Not(Army.MakeScope.Var('armies').IsSet)]"
							}

							text_single = {
								raw_text = "[Army.MakeScope.Var('army_strength').GetValue|0],"
								visible = "[Army.MakeScope.Var('armies').IsSet]"
							}
						}

						text_single = {
							raw_text = "[Army.MakeScope.Var('armies').GetValue|0] armies,"
							visible = "[Army.MakeScope.Var('armies').IsSet]"
						}

						text_single = {
							raw_text = "Raiders, "
							visible = "[Army.IsRaidArmy]"
						}

						button_text = {
							datacontext = "[Army.GetOwner]"
							using = char_click
							blockoverride "margins" {
								margin_left = 1
							}
							blockoverride "text" {
								raw_text = "[Army.GetOwner.GetPrimaryTitle.GetNameNoTierNoTooltip]."
								align = left
							}
							visible = "[Not(Army.GetOwner.IsLocalPlayer)]"
						}

						text_single = {
							raw_text = "Fighting,"
							visible = "[GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End )]"
						}

						container = {
							visible = "[GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End )]"
							container = {
								block "fighting" {
									visible = "[Army.GetOwner.IsLocalPlayer]"
								}
								flowcontainer = {
								    ignoreinvisible = yes
									spacing = 3
									visible = "[Scope.Army.GetLocation.MakeScope.Var('enemy_here').IsSet]"
									block "enemy_here" {
										datacontext = "[Scope.Army.GetLocation.MakeScope.Var('enemy_here').Army]"
									}

									text_single = {
										raw_text = "[Army.GetSoldierCountString]"
										visible = "[Not(Army.MakeScope.Var('army_strength').IsSet)]"
									}

									text_single = {
										raw_text = "[Army.MakeScope.Var('army_strength').GetValue|0]"
										visible = "[Army.MakeScope.Var('army_strength').IsSet]"
									}

									button_text = {
										datacontext = "[Army.GetOwner]"
										using = char_click
									    blockoverride "text" {
											raw_text = "[Army.GetOwner.GetPrimaryTitle.GetNameNoTierNoTooltip]."
									    }
									}
								}
							}
						}

						text_single = {
							raw_text = "Gathering, [Army.GetGatheringDaysLeft] days left."
							visible = "[And(Army.IsGathering, Not(Army.IsMoving))]"
						}

						text_single = {
							raw_text = "Sieging, [Army.GetLocation.GetSiege.GetProgress|0]%[AddTextIf(Army.GetLocation.GetSiege.IsAssaultInProgress, ', Assaulting')]."
							visible = "[And(Army.IsSieging, Not(Army.IsMoving))]"
						}

						container = {
							visible = "[GetVariableSystem.Exists('compact_units')]"
							text_single = {
								raw_text = "attrition [Army.GetArmyAttritionPercentage|%0]."
								visible = "[GreaterThanOrEqualTo_CFixedPoint(Army.GetArmyAttritionPercentage, '(CFixedPoint)0.01')]"
							}
						}

						flowcontainer = {
							ignoreinvisible = yes
							visible = "[Army.MakeScope.Var('armies').IsSet]"
							datacontext = "[Army.MakeScope.Var('commander').GetCharacter]"

							button_text = {
								blockoverride "margins" {
									margin_top = 2
								}
								using = char_click
							    blockoverride "text" {
									raw_text = "[Character.GetCommanderAdvantage] advantage leader"
							    }
								visible = "[Character.IsValid]"
							}

							text_single = {
								visible = "[And(Character.IsValid, GetVariableSystem.Exists('compact_units'))]"
								raw_text = ", [Character.GetShortUINameNoTooltip]."
							}

							text_single = {
								visible = "[Not(Character.IsValid)]"
								raw_text = "No leader."
							}
						}

						flowcontainer = {
							ignoreinvisible = yes
							visible = "[Not(Army.MakeScope.Var('armies').IsSet)]"

							button_text = {
								blockoverride "margins" {
									margin_top = 2
								}
								datacontext = "[Army.GetCommander]"
								using = char_click
							    blockoverride "text" {
									raw_text = "[Army.GetCommander.GetCommanderAdvantage] advantage leader"
							    }
								visible = "[Army.GetCommander.IsValid]"
							}

							text_single = {
								visible = "[And(Army.GetCommander.IsValid, GetVariableSystem.Exists('compact_units'))]"
								raw_text = ", [Army.GetCommander.GetShortUINameNoTooltip]."
							}

							text_single = {
								visible = "[Not(Army.GetCommander.IsValid)]"
								raw_text = "No leader."
							}
						}

						# text_single = {
						# 	raw_text = "Selected"
						# 	visible = "[Army.MakeScope.Var('last_selected_army').IsSet]"
						# }

						# text_single = {
						# 	raw_text = "[Army.GetNameNoTooltip]."
						# 	max_width = 250
						# 	fontsize_min = 14
						# }
					}
				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				block "click" {
					enabled = "[Army.GetLocation.GetCoATitle.IsValid]"
					onclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
				}
				blockoverride "text" {
					raw_text = ""
				}
				blockoverride "extra" {
					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3
						visible = no

						text_single = {
							raw_text = "View composition."

							tooltipwidget = {
								using = unit_icon_item_tooltip

								blockoverride "extra_unit_info"
								{
									vbox = {
										name = "army_extra_info"
										layoutpolicy_horizontal = expanding
										ignoreinvisible = yes
										margin = { 5 0 }

										text_single = {
											name = "status_info"
											layoutpolicy_horizontal = expanding
											text = "[UnitItem.GetStatusDescription]"
											align = left
										}

										text_single = {
											name = "warning_info"
											text = "[UnitItem.GetOutlinerWarning]"
											margin = { 10 5 }
										}
									}
								}
							}
						}

						text_single = {
							visible = "[Army.GetCommander.IsValid]"
							raw_text = "Commander: [Army.GetCommander.GetTitledFirstNameNoTooltip], [Army.GetCommander.GetCommanderAdvantage] advantage."
						}

						text_single = {
							visible = "[Not(Army.GetCommander.IsValid)]"
							raw_text = "No commander."
						}
					}
				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				block "click" {
					enabled = "[Army.GetLocation.GetCoATitle.IsValid]"
					onclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
				}
			    blockoverride "text" {
			        raw_text = ""
			    }
				blockoverride "extra" {
					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3

						text_single = {
							raw_text = "in [Army.GetLocation.GetHolding.GetNameNoTooltip],"
						}

						text_single = {
							raw_text = "[GuiScope.SetRoot(Army.GetLocation.MakeScope).ScriptValue('distance_to_player')|0] points [Army.GetLocation.Custom('county_direction_from_capital')] from capital,"
							block "position" {
								visible = "[Not(GetPlayer.MakeScope.Var('army_position').IsSet)]"
							}
						}

						text_single = {
							raw_text = "[GuiScope.SetRoot(Army.GetLocation.MakeScope).ScriptValue('distance_to_army')|0] points [Army.GetLocation.Custom('county_direction_from_army')] from the army,"
							block "same_position" {
								visible = "[GetPlayer.MakeScope.Var('army_position').IsSet]"
							}
						}

						text_single = {
							visible = "[GetVariableSystem.Exists('compact_units')]"
							max_width = 400
							raw_text = "[Army.GetLocation.GetCounty.GetName][AddTextIf(Army.GetLocation.GetCounty.GetTitle.GetDeJureLiege.IsValid, '. ')][Army.GetLocation.GetCounty.GetTitle.GetDeJureLiege.GetBaseNameNoTierNoTooltip][AddTextIf(Army.GetLocation.GetCounty.GetTitle.GetDeFactoTopLiege.IsValid, ', ')][Army.GetLocation.GetCounty.GetTitle.GetDeFactoTopLiege.GetBaseNameNoTierNoTooltip]."

						}

						expand = { }
					}
				}
			}

			button_text = {
				visible = "[GetVariableSystem.Exists('compact_units')]"
				layoutpolicy_horizontal = expanding
				block "click" {
					enabled = "[Army.GetLocation.GetCoATitle.IsValid]"
					onclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
				}
			    blockoverride "text" {
			        raw_text = ""
			    }
				blockoverride "extra" {
					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3

						name = "troops"
						datamodel = "[CalculateBreakdownItems(Army.Self)]"

						# maxverticalslots = 2
						tooltipwidget = {
							using = unit_icon_item_tooltip

							blockoverride "extra_unit_info"
							{
								vbox = {
									name = "army_extra_info"
									layoutpolicy_horizontal = expanding
									ignoreinvisible = yes
									margin = { 5 0 }

									text_single = {
										name = "status_info"
										layoutpolicy_horizontal = expanding
										text = "[UnitItem.GetStatusDescription]"
										align = left
									}

									text_single = {
										name = "warning_info"
										text = "[UnitItem.GetOutlinerWarning]"
										margin = { 10 5 }
									}
								}
							}
						}

						item = {
							widget = {
								# tooltip = "ARMY_VIEW_TROOP_TT"

								hbox = {
									set_parent_size_to_minimum = yes
									margin_left = 1
									spacing = 3

									text_single = {
										name = "men_at_arms_icon"
										visible = "[TroopItem.IsMaa]"
										raw_text = "[TroopItem.GetRegiment.GetRegiment.GetMAAType.GetNameNoTooltip] "
									}

									text_single = {
										raw_text = "Levies"
										visible = "[TroopItem.IsLevies]"
									}

									text_single = {
										raw_text = "Knights"
										visible = "[TroopItem.IsKnight]"
									}

									text_single = {
										layoutpolicy_horizontal = growing
										raw_text = "[TroopItem.GetCount|*],"
									}
								}
							}
						}
					}
				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				block "click" {
					enabled = "[Army.GetLocation.GetCoATitle.IsValid]"
					onclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
				}
			    blockoverride "text" {
			        raw_text = ""
			    }
				blockoverride "extra" {
					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3

						text_single = {
							raw_text = "Moving to"
							visible = "[And(And(And(Army.IsMoving, Not(Army.IsEmbarked)), Not(GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End ))), Not(Army.IsRetreating))]"
						}

						text_single = {
							raw_text = "Sailing to"
							visible = "[Army.IsEmbarked]"
						}

						text_single = {
							raw_text = "Retreating to"
							visible = "[And(Army.IsRetreating, Not(Army.IsEmbarked))]"
						}

						text_single = {
							raw_text = "[Army.GetMovementInfoForTooltip]. View tooltip to pan there."
							visible = "[And(Army.IsMoving, Not(GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End )))]"
							max_width = 480
							fontsize_min = 14
						}

						# text_single = {
						# 	raw_text = "[GuiScope.SetRoot(Army.MakeScope).ScriptValue('total_army_siege_svalue')]"
						# 	visible = "[And(Army.IsSieging, Not(Army.IsMoving))]"
						# }

						# text_single = {
						# 	raw_text = "Retreating"
						# 	visible = "[Army.IsRetreating]"
						# }

					}
				}

				text_single = {
					raw_text = "[Army.GetMovementInfoForTooltip]"
					alpha = 0
					alwaystransparent = yes
				}
			}
		}

		using = tooltip_ws
	}

	type outliner_tooltip = container {
		using = DefaultTooltipBackground
		flowcontainer = {
			margin = { 5 5 }
			block "datamodel" {
				datamodel = "[GetPlayer.MakeScope.GetList('allied_units')]"
			}
			# visible = "[And(Not(GetVariableSystem.Exists('allies')), GetPlayer.IsValid)]"
			direction = vertical
			spacing = -2

			item = {
				block "button" {
					army_button_o = {
						# size = { 400 40 }
					}
				}
			}
		}
	}
}


local_template character_tooltip
{
	tooltip_enabled = "[Not(IsInteractionMenuOpenForCharacter(Character.GetID))]"
	tooltipwidget = {
		cooltip_type = {
			blockoverride "interaction_info"
			{
				text = "CHARACTER_TOOLTIP_INSTRUCTION"
			}
		}
	}
	using = tooltip_ws
}
