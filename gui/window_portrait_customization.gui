window = {
	name = "window_portrait_customization"
	parentanchor = center
	allow_outside = yes
	layer = top

	using = Window_Background_No_Edge
	size = { 100% 100% }

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		on_finish = "[GetVariableSystem.Toggle('barber_open')]"
		on_finish = "[GetVariableSystem.Clear('barber')]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		on_finish = "[GetVariableSystem.Clear('barber_open')]"
	}

	vbox = {
		datacontext = "[PortraitCustomizationWindow.GetCharacter]"
		datacontext = "[GetIllustration( 'character_view_bg' )]"

		background = {
			using = Background_Bottom_Fade
			margin = { -38 -20 }
		}

		background = {
			texture = "[Illustration.GetTexture( Character.Self )]"
			visible = "[GetVariableSystem.Exists('barber_bg')]"
			fittype = centercrop
			alpha = 1
		}

		flowcontainer = {
			layoutpolicy_horizontal = expanding
			margin_left = 10
			visible = "[Not(GetVariableSystem.Exists('barber'))]"
		    ignoreinvisible = yes
			background = { using = Background_Area_Border_Solid }

			text_single = {
				raw_text = "PCW_TITLE"
			}

			text_single = {
				raw_text = ", [Character.GetFirstNameNoTooltip]."
			}
		}

		button = {
			shortcut = close_window

			onclick = "[PortraitCustomizationWindow.Close]"
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_left = 10
			spacing = 100

			vbox = {
				visible = "[Not(GetVariableSystem.Exists('barber'))]"
				layoutpolicy_vertical = expanding
				datacontext = "[PortraitCustomizationWindow.GetCharacter]"

				vbox = {
					layoutpolicy_vertical = expanding
					spacing = 5

					physical_appearance = {
						layoutpolicy_horizontal = expanding
					}

					vbox = {
						margin = { 10 10 }
						layoutpolicy_horizontal = expanding
						alpha = "[Select_float( GetVariableSystem.Exists('barber'), '(float)0', '(float)1' )]"

						button_text = {
							layoutpolicy_horizontal = expanding
							background = { using = Background_Area_Border_Solid }
							blockoverride "text" {
								raw_text = "[Select_CString( GetVariableSystem.Exists('barber'), 'Show', 'Hide')] all controls, hotkey C."
							}
							shortcut = character_finder
							onclick = "[GetVariableSystem.Toggle('barber')]"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							background = { using = Background_Area_Border_Solid }
							blockoverride "text" {
								raw_text = "[Select_CString( GetVariableSystem.Exists('barber_head'), 'Show the whole body', 'Show head only')] , hotkey H."
							}
							shortcut = army_create_new
							onclick = "[GetVariableSystem.Toggle('barber_head')]"
						}


						button_text = {
							layoutpolicy_horizontal = expanding
							background = { using = Background_Area_Border_Solid }
							blockoverride "text" {
								raw_text = "[Select_CString( GetVariableSystem.Exists('barber_bg'), 'Hide', 'Show')] background, hotkey B."
							}
							shortcut = go_back
							onclick = "[GetVariableSystem.Toggle('barber_bg')]"
						}

						button_primary_text = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(GetVariableSystem.Exists('barber'))]"
							name = "apply_button"
							blockoverride "text" {
								text = "PCW_APPLY"
							}
							onclick = "[PortraitCustomizationWindow.ApplyAndClose]"
						}
					}

					vbox = {
						vbox = {
							layoutpolicy_horizontal = expanding
							name = "accessories_grid"
							datamodel = "[PortraitCustomizationWindow.GetAccessoryItems]"

							item = {
								vbox = {
									layoutpolicy_horizontal = expanding

									dropdown_menu_standard =
									{
										blockoverride "dropdown_properties"
										{
											datamodel = "[AccessoryItem.GetOptions]"
											onselectionchanged = "[AccessoryItem.OnSelect]"
											selectedindex = "[AccessoryItem.GetSelectedIndex]"
										}

										blockoverride "dropdown_size"
										{
											size = { 500 20 }
										}

										blockoverride "dropdown_list_maxsize"
										{
											maximumsize = { 491 1080 }
											position = { 500 0 }
										}

										blockoverride "dropdown_active_item_properties"
										{
											raw_text = "[AccessoryItem.GetName], [AccessoryItemOption.GetName],"
										}

										blockoverride "dropdown_item_properties"
										{
											onmousehierarchyenter = "[AccessoryItemOption.OnHover]"
											raw_text = "[AccessoryItemOption.GetName],"
										}

										blockoverride "dropdown_list_properties"
										{
											onmousehierarchyleave = "[PortraitCustomizationWindow.RestorePreviousPortraitModifierIndex]"
										}
									}
								}
							}
						}
					}

					expand = { }
				}
			}

			vbox = {
				visible = "[Not(GetVariableSystem.Exists('barber'))]"
				layoutpolicy_vertical = expanding

				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "hair_color_label"
						text = "PCW_HAIR_COLOR_LABEL"
					}

					text_single = {
						raw_text = ", 10 options:"
					}

					expand = { }
				}

				widget = {
					size = { 0 5 }
				}

				widget = {
					size = { 100 300 }
					layoutpolicy_horizontal = expanding

					dynamicgridbox = {
						datamodel = "[PortraitCustomizationWindow.GetHairColorItems]"
						maxverticalslots = 11

						item = {
							widget = {
								size = { 200 25 }
								background = { using = Background_Area_Border_Solid }

								button_text = {
									blockoverride "text" {
										raw_text = "black"
									}
									onclick = "[HairColorItem.OnSelect]"
									blockoverride "extra" {
										text_single = {
											raw_text = ", selected"
											visible = "[HairColorItem.IsSelected]"
											align = left
										}
									}
								}
							}
						}
					}

					dynamicgridbox = {
						datamodel = "[PortraitCustomizationWindow.GetHairColorItems]"
						maxverticalslots = 10

						item = {
							widget = {
								size = { 200 25 }
								background = { using = Background_Area_Border_Solid }

								button_text = {
									blockoverride "text" {
										raw_text = "brown"
									}
									onclick = "[HairColorItem.OnSelect]"
									blockoverride "extra" {
										text_single = {
											raw_text = ", selected"
											visible = "[HairColorItem.IsSelected]"
											align = left
										}
									}
								}
							}
						}
					}

					dynamicgridbox = {
						datamodel = "[PortraitCustomizationWindow.GetHairColorItems]"
						maxverticalslots = 9

						item = {
							widget = {
								size = { 200 25 }
								background = { using = Background_Area_Border_Solid }

								button_text = {
									blockoverride "text" {
										raw_text = "red brown"
									}
									onclick = "[HairColorItem.OnSelect]"
									blockoverride "extra" {
										text_single = {
											raw_text = ", selected"
											visible = "[HairColorItem.IsSelected]"
											align = left
										}
									}
								}
							}
						}
					}

					dynamicgridbox = {
						datamodel = "[PortraitCustomizationWindow.GetHairColorItems]"
						maxverticalslots = 8

						item = {
							widget = {
								size = { 200 25 }
								background = { using = Background_Area_Border_Solid }

								button_text = {
									blockoverride "text" {
										raw_text = "light brown"
									}
									onclick = "[HairColorItem.OnSelect]"
									blockoverride "extra" {
										text_single = {
											raw_text = ", selected"
											visible = "[HairColorItem.IsSelected]"
											align = left
										}
									}
								}
							}
						}
					}

					dynamicgridbox = {
						datamodel = "[PortraitCustomizationWindow.GetHairColorItems]"
						maxverticalslots = 7

						item = {
							widget = {
								size = { 200 25 }
								background = { using = Background_Area_Border_Solid }

								button_text = {
									blockoverride "text" {
										raw_text = "grey"
									}
									onclick = "[HairColorItem.OnSelect]"
									blockoverride "extra" {
										text_single = {
											raw_text = ", selected"
											visible = "[HairColorItem.IsSelected]"
											align = left
										}
									}
								}
							}
						}
					}

					dynamicgridbox = {
						datamodel = "[PortraitCustomizationWindow.GetHairColorItems]"
						maxverticalslots = 6

						item = {
							widget = {
								size = { 200 25 }
								background = { using = Background_Area_Border_Solid }

								button_text = {
									blockoverride "text" {
										raw_text = "red"
									}
									onclick = "[HairColorItem.OnSelect]"
									blockoverride "extra" {
										text_single = {
											raw_text = ", selected"
											visible = "[HairColorItem.IsSelected]"
											align = left
										}
									}
								}
							}
						}
					}

					dynamicgridbox = {
						datamodel = "[PortraitCustomizationWindow.GetHairColorItems]"
						maxverticalslots = 5

						item = {
							widget = {
								size = { 200 25 }
								background = { using = Background_Area_Border_Solid }

								button_text = {
									blockoverride "text" {
										raw_text = "light red"
									}
									onclick = "[HairColorItem.OnSelect]"
									blockoverride "extra" {
										text_single = {
											raw_text = ", selected"
											visible = "[HairColorItem.IsSelected]"
											align = left
										}
									}
								}
							}
						}
					}


					dynamicgridbox = {
						datamodel = "[PortraitCustomizationWindow.GetHairColorItems]"
						maxverticalslots = 4

						item = {
							widget = {
								size = { 200 25 }
								background = { using = Background_Area_Border_Solid }

								button_text = {
									blockoverride "text" {
										raw_text = "blonde"
									}
									onclick = "[HairColorItem.OnSelect]"
									blockoverride "extra" {
										text_single = {
											raw_text = ", selected"
											visible = "[HairColorItem.IsSelected]"
											align = left
										}
									}
								}
							}
						}
					}

					dynamicgridbox = {
						datamodel = "[PortraitCustomizationWindow.GetHairColorItems]"
						maxverticalslots = 3

						item = {
							widget = {
								size = { 200 25 }
								background = { using = Background_Area_Border_Solid }

								button_text = {
									blockoverride "text" {
										raw_text = "light blonde"
									}
									onclick = "[HairColorItem.OnSelect]"
									blockoverride "extra" {
										text_single = {
											raw_text = ", selected"
											visible = "[HairColorItem.IsSelected]"
											align = left
										}
									}
								}
							}
						}
					}

					dynamicgridbox = {
						datamodel = "[PortraitCustomizationWindow.GetHairColorItems]"
						maxverticalslots = 2

						item = {
							widget = {
								size = { 200 25 }
								background = { using = Background_Area_Border_Solid }

								button_text = {
									blockoverride "text" {
										raw_text = "white"
									}
									onclick = "[HairColorItem.OnSelect]"
									blockoverride "extra" {
										text_single = {
											raw_text = ", selected"
											visible = "[HairColorItem.IsSelected]"
											align = left
										}
									}
								}
							}
						}
					}

					dynamicgridbox = {
						datamodel = "[PortraitCustomizationWindow.GetHairColorItems]"
						maxverticalslots = 1

						item = {
							widget = {
								size = { 200 25 }
								background = { using = Background_Area_Border_Solid }

								button_text = {
									blockoverride "text" {
										raw_text = "default"
									}
									onclick = "[HairColorItem.OnSelect]"
									blockoverride "extra" {
										text_single = {
											raw_text = ", selected"
											visible = "[HairColorItem.IsSelected]"
											align = left
										}
									}
								}
							}
						}
					}
				}

				expand = { }
			}

			widget = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				portrait_body = {
					visible = "[Not(GetVariableSystem.Exists('barber_head'))]"
					name = "portrait"
					datacontext = "[PortraitCustomizationWindow.GetCharacter]"
					size = { 100% 100% }

					blockoverride "portrait_button"
					{
						alwaystransparent = yes
						tooltip_enabled = no
						size = { 100% 100% }
						portrait_texture = "[PortraitCustomizationWindow.GetPortraitTexture('environment_body', 'camera_lifestyles', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
					}
					blockoverride "opinion_box" { }
					blockoverride "status_icons" { }
					blockoverride "coa" { }
					blockoverride "portrait_glow" { }
				}

				portrait_body = {
					visible = "[GetVariableSystem.Exists('barber_head')]"
					datacontext = "[PortraitCustomizationWindow.GetCharacter]"
					size = { 100% 100% }

					blockoverride "portrait_button"
					{
						alwaystransparent = yes
						tooltip_enabled = no
						size = { 100% 100% }
						portrait_texture = "[PortraitCustomizationWindow.GetPortraitTexture('environment_body', 'camera_head', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
					}
					blockoverride "opinion_box" { }
					blockoverride "status_icons" { }
					blockoverride "coa" { }
					blockoverride "portrait_glow" { }
				}
			}
		}

		vbox = {
			margin = { 10 10 }
			layoutpolicy_horizontal = expanding
			alpha = 0

			button_primary_text = {
				layoutpolicy_horizontal = expanding
				visible = "[Not(GetVariableSystem.Exists('barber'))]"
				name = "apply_button"
				blockoverride "text" {
					text = "PCW_APPLY"
				}
				onclick = "[PortraitCustomizationWindow.ApplyAndClose]"
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				background = { using = Background_Area_Border_Solid }
				blockoverride "text" {
					raw_text = "[Select_CString( GetVariableSystem.Exists('barber'), 'Show', 'Hide')] all controls, hotkey C."
				}
				shortcut = character_finder
				onclick = "[GetVariableSystem.Toggle('barber')]"
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				background = { using = Background_Area_Border_Solid }
				blockoverride "text" {
					raw_text = "[Select_CString( GetVariableSystem.Exists('barber_head'), 'Show the whole body', 'Show head only')] , hotkey H."
				}
				shortcut = army_create_new
				onclick = "[GetVariableSystem.Toggle('barber_head')]"
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				background = { using = Background_Area_Border_Solid }
				blockoverride "text" {
					raw_text = "[Select_CString( GetVariableSystem.Exists('barber_bg'), 'Hide', 'Show')] background, hotkey B."
				}
				shortcut = go_back
				onclick = "[GetVariableSystem.Toggle('barber_bg')]"
			}
		}
	}
}

