######################################################
############# STRUGGLE INVOLVEMENT ###################
######################################################
@involved_width = 890
window = {
	name = "struggle_involvement_window"
	datacontext = "[StruggleInvolvementWindow.GetStruggle]"
	datacontext = "[StruggleInvolvementWindow.GetCharacterList]"
	parentanchor = right
	size = { 900 100% }
	layer = middle

	using = Window_Background_No_Edge

	vbox = {
		margin_bottom = 30

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "STRUGGLE_INVOLVEMENT_WINDOW_HEADER"
			}

			blockoverride "button_close"
			{
				onclick = "[StruggleInvolvementWindow.Close]"
			}
		}

		vbox = {
			name = "player_involvement"
			datacontext = "[GetPlayer]"
			layoutpolicy_horizontal = expanding

			hbox = {
				visible = "[Not(GetVariableSystem.Exists('involvement_desc'))]"
				name = "character_involvment"
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area
					margin_top = 8
					margin_bottom = 6
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					# Current involvement
					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[Struggle.GetPlayerInvolvementDesc]."
					}

					# Involvement requirements met
					text_multi = {
						layoutpolicy_horizontal = expanding
						autoresize = yes
						max_width = @involved_width
						raw_text = "[Struggle.GetPlayerInvolvementDetails]."
					}
				}

				expand = { }
			}

			button_text = {
				layoutpolicy_horizontal = expanding
			    blockoverride "text" {
			        raw_text = "[Select_CString(GetVariableSystem.Exists('involvement_desc'), 'Show', 'Hide')] your involvement, Hotkey E."
			    }
				onclick = "[GetVariableSystem.Toggle('involvement_desc')]"
				shortcut = map_mode_1
			}
		}

		flowcontainer = {
			name = "categories"
			layoutpolicy_horizontal = expanding
			direction = vertical

			button_text = {
				layoutpolicy_horizontal = expanding
				onclick = "[StruggleInvolvementWindow.SetShowParticipants]"
				blockoverride "pre" {
					text_single = {
						raw_text = "[StruggleInvolvementWindow.GetParticipantsAmount]"
					}
					space = { }
				}
			    blockoverride "text" {
					text = "STRUGGLE_PARTICIPANTS"
					align = left
			    }
				blockoverride "extra" {
					text_single = {
						raw_text = ", tab 1"
					}
					text_single = {
						raw_text = ", Selected"
						visible = "[StruggleInvolvementWindow.IsShowingParticipants]"
					}
				}
				blockoverride "dot" {
				}
				shortcut = speed_1
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				onclick = "[StruggleInvolvementWindow.SetShowFaiths]"
				blockoverride "pre" {
					text_single = {
						raw_text = "[GetDataModelSize(StruggleInvolvementWindow.GetInvolvedFaiths))]"
					}
					space = { }
				}
			    blockoverride "text" {
					text = "game_concept_faiths"
					align = left
			    }
				blockoverride "extra" {
					text_single = {
						raw_text = ", tab 2"
					}
					text_single = {
						raw_text = ", Selected"
						visible = "[StruggleInvolvementWindow.IsShowingFaiths]"
					}
				}
				blockoverride "dot" {
				}
				shortcut = speed_2
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				onclick = "[StruggleInvolvementWindow.SetShowCultures]"
				blockoverride "pre" {
					text_single = {
						raw_text = "[GetDataModelSize(StruggleInvolvementWindow.GetInvolvedCultures))]"
					}
					space = { }
				}
			    blockoverride "text" {
					text = "game_concept_cultures"
					align = left
			    }
				blockoverride "extra" {
					text_single = {
						raw_text = ", tab 3"
					}
					text_single = {
						raw_text = ", Selected"
						visible = "[StruggleInvolvementWindow.IsShowingCultures]"
					}
				}
				blockoverride "dot" {
				}
				shortcut = speed_3
			}
		}

		vbox = {
			name = "participant_section"
			visible = [StruggleInvolvementWindow.IsShowingParticipants]
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			text_multi = {
				max_width = @involved_width
				autoresize = yes
				layoutpolicy_horizontal = expanding
				text = "STRUGGLE_INVOLVEMENT_WINDOW_PARTICIPANT_DESC"
				visible = "[Not(GetVariableSystem.Exists('involvement_desc'))]"
			}

			flowcontainer = {
				margin_left = 10
				direction = vertical
				layoutpolicy_horizontal = expanding
				text_single = {
					raw_text = "Filter by involvement:"
				}
				button_text = {
					onclick = "[StruggleInvolvementWindow.SetShowAllParticipants]"
				    blockoverride "text" {
						text = "STRUGGLE_FILTER_PARTICIPANTS_ALL"
						align = left
				    }
					blockoverride "extra" {
						text_single = {
							raw_text = ", Selected"
							visible = "[StruggleInvolvementWindow.IsShowingAllParticipants]"
						}
					}
					blockoverride "dot" {
					}
				}
				button_text = {
					onclick = "[StruggleInvolvementWindow.SetShowInvolvedParticipants]"
				    blockoverride "text" {
						text = "STRUGGLE_FILTER_PARTICIPANTS_INVOLVED"
						align = left
				    }
					blockoverride "extra" {
						text_single = {
							raw_text = ", Selected"
							visible = "[StruggleInvolvementWindow.IsShowingInvolvedParticipants]"
						}
					}
					blockoverride "dot" {
					}
				}
				button_text = {
					onclick = "[StruggleInvolvementWindow.SetShowInterloperParticipants]"
				    blockoverride "text" {
						text = "STRUGGLE_FILTER_PARTICIPANTS_INTERLOPER"
						align = left
				    }
					blockoverride "extra" {
						text_single = {
							raw_text = ", Selected"
							visible = "[StruggleInvolvementWindow.IsShowingInterloperParticipants]"
						}
					}
					blockoverride "dot" {
					}
				}
			}

			vbox_character_list = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "sort_buttons"
				{
					hbox_list_sort_buttons = {
						layoutpolicy_horizontal = expanding

						blockoverride "skill_sort_buttons" { }
					}
				}

				blockoverride "container_implementation" {
					fixedgridbox = {
						layoutpolicy_horizontal = expanding
						name = "characters_grid"
						datamodel = "[CharacterSelectionList.GetList]"
						addcolumn = @involved_width
						addrow = 65

						item = {
							widget_character_list_item_finder = {
								blockoverride "click" {
									onclick = "[CloseGameView('struggle')]"
									onclick = "[StruggleInvolvementWindow.Close]"
									onclick = "[DefaultOnCharacterClick(CharacterListItem.GetCharacter.GetID)]"
									onrightclick = "[DefaultOnCharacterRightClick(CharacterListItem.GetCharacter.GetID)]"
								}
								datacontext = "[CharacterListItem.GetCharacter]"

								blockoverride "character_relation" {

								}
								blockoverride "bottom_pre" {
									text_single = {
										margin_right = -5
										raw_text = "Involved,"
										visible = "[Struggle.IsInvolvedCharacter(Character.Self)]"
									}
									text_single = {
										margin_right = -5
										raw_text = "Interloper,"
										visible = "[Struggle.IsInterloperCharacter(Character.Self)]"
									}
								}
							}
						}
					}
				}
			}
		}

		vbox = {
			name = "culture_section"
			visible = [StruggleInvolvementWindow.IsShowingCultures]
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_top = 5

			text_multi = {
				autoresize = yes
				layoutpolicy_horizontal = expanding
				max_width = @involved_width
				text = "STRUGGLE_INVOLVEMENT_WINDOW_CULTURE_DESC"
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						datamodel = [StruggleInvolvementWindow.GetInvolvedCultures]
						spacing = 3

						item = {
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								text_single = {
									raw_text = "[Culture.GetName],"
								}

								space = { }

								text_single = {
									text = "STRUGGLE_INVOLVEMENT_WINDOW_CULTURE_COUNT"
								}

								dot = { }

								expand = { }
							}
						}
					}
				}
			}
		}

		vbox = {
			name = "faith_section"
			visible = [StruggleInvolvementWindow.IsShowingFaiths]
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			margin_top = 5
			datacontext = "[GetPlayer.GetFaith]"

			text_multi = {
				autoresize = yes
				layoutpolicy_horizontal = expanding
				max_width = @involved_width
				text = "STRUGGLE_INVOLVEMENT_WINDOW_FAITH_DESC"
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						datamodel = [StruggleInvolvementWindow.GetInvolvedFaiths]

						item = {
							hbox = {
								name = "faith_title"
								layoutpolicy_horizontal = expanding

								text_single = {
									raw_text = "[Faith.GetName]"
								}

								text_single = {
									raw_text = ", [Faith.GetReligion.GetName]."
								}

								space = { }

								text_single = {
									text = "STRUGGLE_INVOLVEMENT_WINDOW_FAITH_COUNT"
								}

								dot = { }

								expand = { }
							}
						}
					}
				}
			}
		}
	}

	window_character_filter = {
		position = { 0 0 }
		size = { 650 100% }

		blockoverride "addition_filter" {
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('relation_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('range_filter')]"
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('personal_filter_category')]"

				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('adult_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('gender_filter')]"
					}

					divider = {
						layoutpolicy_horizontal = expanding
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('married_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('imprisoned_filter')]"
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('hook_filter')]"
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('inspiration_filter')]"
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('sexuality_filter')]"
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('artifact_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('membership_filter_category')]"

				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
					}


					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
					}
				}
			}
		}
	}
}
