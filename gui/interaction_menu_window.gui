
#### THE WINDOW

window = {
	gfxtype = windowgfx
	name = "character_interaction_menu_window"
	movable = no
	position = { 20 70 }
	alwaystransparent = yes
	layer = top
	allow_outside = yes

	background = {
		using = Background_Area_Solid
		margin = { 1920 1080 }
		visible = "[Not(GetVariableSystem.Exists('window_focus'))]"
	}
	#
	# button = {
	# 	size = { 0 0 }
	# 	visible = "[Not(GetVariableSystem.Exists('close_char'))]"
	#
	# }
	state = {
		name = _show
		on_start = "[CloseGameView(AddTextIf(Not(GetVariableSystem.Exists('close_char')), 'character'))]"
	}

	using = Animation_ShowHide_Quick

	# Not shown to the player, but is used by the hotkey system
	button_normal = {
		name = "button_close"
		size = { 0 0 }
		onclick = "[CharacterInteractionMenuWindow.Close]"
		shortcut = "close_window"
	}

	container = {
		alwaystransparent = yes
		resizeparent = yes
		allow_outside = yes

		flowcontainer = {
			alwaystransparent = no
			direction = vertical
			ignoreinvisible = yes
			min_width = 400

			background = {
				texture = "gfx/interface/component_tiles/interaction_menu_bg.dds"
				spriteType = Corneredtiled
				spriteborder = { 11 11 }
				spriteborder_top = 49
				margin = { 8 14 }

				modify_texture = {
					name = "overlay"
					texture = "gfx/interface/component_overlay/overlay_window.dds"
					blend_mode = overlay
				}
			}

			widget = {
				datacontext = "[CharacterInteractionMenuWindow.GetCharacter]"
				size = { 100% 28 }
				name = "character_info"

				hbox = {
					margin = { 10 0 }

					text_single = {
						raw_text = "Interact with"
					}

					text_single = {
						raw_text = " "
					}

					text_single = {
						name = "character_name"
						visible = "[Not(Character.IsLocalPlayer)]"
						layoutpolicy_horizontal = expanding
						raw_text = "[Character.GetUINameNoTooltip]."
						# autoresize = no
						# max_width = 350
					}

					text_single = {
						name = "character_name_me"
						visible = "[Character.IsLocalPlayer]"
						layoutpolicy_horizontal = expanding
						raw_text = "yourself."
						align = nobaseline
						autoresize = no
					}

					expand = { }

				}
			}

			widget = {
				datacontext = "[CharacterInteractionMenuWindow.GetCharacter]"
				size = { 100% 28 }
				hbox = {
					margin = { 10 0 }
					layoutpolicy_horizontal = expanding
					datacontext = "[CharacterInteractionMenuWindow.GetCharacter]"

					button_text = {
						blockoverride "text" {
							raw_text = "[AddTextIf(Character.IsPinned, 'Un')]pin [Select_CString(Character.IsPinned, 'from', 'to')] the outliner."
						}
						name = "button_pin"
						# visible = "[Not(Character.IsPinned)]"
						onclick = "[Character.ToggleCharacterPinned]"
						size = { 25 25 }

						# tooltip = "PIN_TT"
						using = tooltip_se
					}

					# button_barbershop = {
					# 	name = "customize_portrait"
					# 	visible = "[Character.CanCustomizePortrait]"
					# 	onclick = "[Character.OnCustomizePortrait]"
					# 	onclick = "[CharacterInteractionMenuWindow.Close]"
					# 	size = { 25 25 }
					#
					# 	tooltip = "CV_CUSTOMIZE_PORTRAIT"
					# 	using = tooltip_ne
					# }

					button_text = {
						blockoverride "text" {
							raw_text = "Rename."
						}
						name = "button_rename"
						datacontext = "[GetScriptedGui( 'rename_character_after_birth' )]"
						visible = "[Character.CanCharacterBeRenamed]"
						onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'child', Character.MakeScope ).End  )]"
						size = { 25 25 }

						tooltip = "RENAME_CHARACTER"
						using = tooltip_ne
					}

					# button_text = {
					# 	blockoverride "text" {
					# 		raw_text = "Go to location: [AddTextIf(Character.HasLocation, Character.GetCurrentLocation.GetNameNoTooltip)]."
					# 	}
					# 	name = "button_go_to_my_location"
					# 	onclick = "[CharacterInteractionMenuWindow.GoToCharacter]"
					# 	size = { 25 25 }
					#
					# 	tooltip = "GOTO_CHARACTER"
					# 	using = tooltip_ne
					# }

					expand = { }
				}
			}

			widget = {
				size = { 317 40 }
				visible = [CharacterInteractionMenuWindow.OutsideDiplomaticRange]
				tooltip = OUT_OF_DIPLOMACY_RANGE_TOOLTIP

				text_label_center = {
					name = "label"
					parentanchor = center
					position = { 0 3 }
					text = OUT_OF_DIPLOMACY_RANGE
				}
			}

			dynamicgridbox = {
				name = "category_interaction_list"
				datamodel = "[CharacterInteractionMenuWindow.GetCategoryItems]"

				item = {
					flowcontainer_category_group = { }
				}
			}
		}

		### MORE INTERACTIONS
		container = {
			alwaystransparent = no
			visible = "[CharacterInteractionMenuWindow.AreMoreInteractionsVisisble]"
			name = "more_interactions_container"

			container = {
				position = { 10 0 }

				background = {
					texture = "gfx/interface/component_tiles/interaction_menu_more_bg.dds"
					spriteType = Corneredtiled
					spriteborder = { 11 11 }
					margin = { 8 8 }
					shaderfile = "gfx/FX/pdxgui_default.shader"

					modify_texture = {
						name = "overlay"
						texture = "gfx/interface/component_overlay/overlay_window.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
					}
				}

				dynamicgridbox_interaction_list = {
					datamodel = "[CharacterInteractionMenuWindow.GetMoreInteractions]"
				}
			}
		}
	}
}
