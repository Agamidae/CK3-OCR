
#### THE WINDOW

window = {
	gfxtype = windowgfx
	name = "character_interaction_menu_window"
	movable = no
	position = { 20 70 }
	alwaystransparent = yes
	layer = top
	allow_outside = yes

	using = TooltipFocus
	#
	# button = {
	# 	size = { 0 0 }
	# 	visible = "[Not(GetVariableSystem.Exists('close_char'))]"
	#
	# }
	state = {
		name = _show
		on_start = "[CloseGameView(AddTextIf(GetScriptedGui('close_interactions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ), 'character'))]"
	}

	using = Animation_ShowHide_Quick

	# Not shown to the player, but is used by the hotkey system
	button_normal = {
		name = "button_close"
		size = { 0 0 }
		onclick = "[CharacterInteractionMenuWindow.Close]"
		shortcut = "close_window"
	}

	container = {
		alwaystransparent = yes
		resizeparent = yes
		allow_outside = yes

		flowcontainer = {
			alwaystransparent = no
			direction = vertical
			ignoreinvisible = yes
			min_width = 500
			margin_bottom = 10

			background = {
				texture = "gfx/interface/component_tiles/interaction_menu_bg.dds"
				spriteType = Corneredtiled
				spriteborder = { 11 11 }
				spriteborder_top = 49
				margin = { 8 14 }

				modify_texture = {
					name = "overlay"
					texture = "gfx/interface/component_overlay/overlay_window.dds"
					blend_mode = overlay
				}
			}
			datacontext = "[CharacterInteractionMenuWindow.GetCharacter]"

			widget = {
				datacontext = "[CharacterInteractionMenuWindow.GetCharacter]"
				size = { 100% 25 }
				name = "character_info"

				hbox = {
					margin = { 10 0 }

					text_single = {
						raw_text = "Interact with"
					}

					text_single = {
						raw_text = " "
					}

					text_single = {
						name = "character_name"
						visible = "[Not(Character.IsLocalPlayer)]"
						layoutpolicy_horizontal = expanding
						raw_text = "[Character.GetUINameNoTooltip]."
						# autoresize = no
						# max_width = 350
					}

					text_single = {
						name = "character_name_me"
						visible = "[Character.IsLocalPlayer]"
						layoutpolicy_horizontal = expanding
						raw_text = "yourself."
						# align = nobaseline
						autoresize = no
					}

					expand = { }
				}
			}

			button_text = {
				visible = no
				blockoverride "text" {
					margin_left = 5
					raw_text = "[Select_CString(GetVariableSystem.Exists('enabled_x'), 'Don\'t show', 'Show')] enabled interactions first."
				}
				onclick = "[GetVariableSystem.Toggle('enabled_x')]"
			}

			flowcontainer = {
				margin = { 10 0 }
				ignoreinvisible = yes
				direction = vertical

				button_text = {
					blockoverride "text" {
						raw_text = "[AddTextIf(Character.IsPinned, 'Un')]pin [Select_CString(Character.IsPinned, 'from', 'to')] the outliner."
					}
					name = "button_pin"
					# visible = "[Not(Character.IsPinned)]"
					onclick = "[Character.ToggleCharacterPinned]"

					# tooltip = "PIN_TT"
					using = tooltip_se
				}

				button_text = {
					blockoverride "text" {
						raw_text = "Rename."
					}
					name = "button_rename"
					datacontext = "[GetScriptedGui( 'rename_character_after_birth' )]"
					visible = "[Character.CanCharacterBeRenamed]"
					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'child', Character.MakeScope ).End  )]"

					tooltip = "RENAME_CHARACTER"
					using = tooltip_ne
				}
			}

			text_single = {
				visible = "[CharacterInteractionMenuWindow.OutsideDiplomaticRange]"
				tooltip = OUT_OF_DIPLOMACY_RANGE_TOOLTIP
				name = "label"
				text = OUT_OF_DIPLOMACY_RANGE
				margin_left = 10
			}

			dynamicgridbox = {
				name = "category_interaction_list"
				datamodel = "[CharacterInteractionMenuWindow.GetCategoryItems]"

				item = {
					flowcontainer_category_group = { }
				}
			}

			button_text = {
				name = "customize_portrait"
				blockoverride "text" {
					margin_left = 10
					raw_text = "Open barbershop."
				}
				# visible = "[Character.CanCustomizePortrait]"
				onclick = "[Character.OnCustomizePortrait]"
				onclick = "[CharacterInteractionMenuWindow.Close]"
				using = tooltip_ne
			}

			button_text = {
				visible = "[GetPlayer.IsValid]"

				blockoverride "text" {
					margin_left = 10
					raw_text = "Interactions close character,"
				}
				blockoverride "extra" {
					text_single = {
						raw_text = " Enabled."
						visible = "[GetScriptedGui('close_interactions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						align = nobaseline
					}
					text_single = {
						raw_text = " Disabled."
						visible = "[Not(GetScriptedGui('close_interactions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ))]"
						align = nobaseline
					}
				}

				onclick = "[GetScriptedGui('close_interactions').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
			}
		}

		### MORE INTERACTIONS
		container = {
			alwaystransparent = no
			visible = "[CharacterInteractionMenuWindow.AreMoreInteractionsVisisble]"
			name = "more_interactions_container"

			container = {
				position = { 10 0 }

				background = {
					texture = "gfx/interface/component_tiles/interaction_menu_more_bg.dds"
					spriteType = Corneredtiled
					spriteborder = { 11 11 }
					margin = { 8 8 }
					shaderfile = "gfx/FX/pdxgui_default.shader"

					modify_texture = {
						name = "overlay"
						texture = "gfx/interface/component_overlay/overlay_window.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
					}
				}

				dynamicgridbox_interaction_list = {
					datamodel = "[CharacterInteractionMenuWindow.GetMoreInteractions]"
				}
			}
		}
	}
}
