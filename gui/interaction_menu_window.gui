
#### THE WINDOW

window = {
	gfxtype = windowgfx
	name = "character_interaction_menu_window"
	movable = no
	position = { 20 70 }
	alwaystransparent = yes
	layer = top
	allow_outside = yes

	using = TooltipFocus
	#
	# button = {
	# 	size = { 0 0 }
	# 	visible = "[Not(GetVariableSystem.Exists('close_char'))]"
	#
	# }
	state = {
		name = _show
		on_start = "[CloseGameView(AddTextIf(GetScriptedGui('close_interactions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ), 'character'))]"
	}

	using = Animation_ShowHide_Quick

	# Not shown to the player, but is used by the hotkey system
	button_normal = {
		name = "button_close"
		size = { 0 0 }
		onclick = "[CharacterInteractionMenuWindow.Close]"
		shortcut = "close_window"
	}

	container = {
		alwaystransparent = yes
		resizeparent = yes
		allow_outside = yes

		flowcontainer = {
			alwaystransparent = no
			direction = vertical
			ignoreinvisible = yes
			min_width = 500
			margin_bottom = 10
			margin_left = 10

			background = {
				texture = "gfx/interface/component_tiles/interaction_menu_bg.dds"
				spriteType = Corneredtiled
				spriteborder = { 11 11 }
				spriteborder_top = 49
				margin = { 8 14 }

				modify_texture = {
					name = "overlay"
					texture = "gfx/interface/component_overlay/overlay_window.dds"
					blend_mode = overlay
				}
			}
			background = { using = Background_Area_Border_Solid margin = { 8 14 } }
			datacontext = "[CharacterInteractionMenuWindow.GetCharacter]"

			flowcontainer = {
			    ignoreinvisible = yes
				direction = vertical
				visible = "[Not(GetVariableSystem.Exists('action_category'))]"

				widget = {
					datacontext = "[CharacterInteractionMenuWindow.GetCharacter]"
					size = { 100% 25 }
					name = "character_info"

					button_text = {
						using = char_click
						layoutpolicy_horizontal = expanding
						blockoverride "extra" {
							spacing = 3
							text_single = {
								raw_text = "Interact with"
							}
							text_single = {
								visible = "[Not(Character.IsLocalPlayer)]"
								raw_text = "[Character.GetUINameNoTooltip]."
							}

							text_single = {
								visible = "[Character.IsLocalPlayer]"
								raw_text = "yourself."
							}
						}
					}
				}

				# flowcontainer = {
				#     ignoreinvisible = yes
				# 	margin_left = 5
				# 	spacing = 5
				#
				# 	text_single = {
				# 		raw_text = "[Character.GetHerHis|U] opinion, [Character.GetOpinionOf(GetPlayer)]."
				# 		tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
				# 	}
				#
				# 	text_single = {
				# 		raw_text = "Your opinion of [Character.GetHerHim], [GetPlayer.GetOpinionOf(Character.Self)]."
				# 		tooltip = "[GetPlayer.GetOpinionBreakdownText(Character.Self)]"
				# 	}
				# }

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical

					button_text = {
						blockoverride "text" {
							raw_text = "[AddTextIf(Character.IsPinned, 'Un')]pin [Select_CString(Character.IsPinned, 'from', 'to')] outliner, hotkey O."
						}
						shortcut = mapmode_empires_secondary
						name = "button_pin"
						# visible = "[Not(Character.IsPinned)]"
						onclick = "[Character.ToggleCharacterPinned]"

						# tooltip = "PIN_TT"
						using = tooltip_se
					}


					widget = {
						size = { 500 23 }
						scissor = yes
						raw_tooltip = "[Character.GetDebugTooltip]"

						text_single = {
							margin_left = 5
							raw_text = "[Character.GetDebugTooltip]."
							position = { 0 -21 }
						}

						visible = "[And(InDebugMode, ReleaseMode)]"
					}

					button_text = {
						blockoverride "text" {
							raw_text = "Rename."
						}
						name = "button_rename"
						datacontext = "[GetScriptedGui( 'rename_character_after_birth' )]"
						visible = "[Character.CanCharacterBeRenamed]"
						onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'child', Character.MakeScope ).End  )]"
						onclick = "[CharacterInteractionMenuWindow.Close]"
						onclick = "[CloseGameView('character')]"

						# tooltip = "RENAME_CHARACTER"
						using = tooltip_ne
					}

					button_text = {
						blockoverride "text" {
							raw_text = "Open memories"
							align = left
						}
						blockoverride "dot" { }
						datacontext = "[Character]"
						onclick = "[ToggleGameViewData( 'memories', Character.GetID  )]"
					}
				}

				text_single = {
					visible = "[CharacterInteractionMenuWindow.OutsideDiplomaticRange]"
					tooltip = OUT_OF_DIPLOMACY_RANGE_TOOLTIP
					name = "label"
					text = OUT_OF_DIPLOMACY_RANGE
				}
			}

			# to prevent accidental clcks
			button = {
				shortcut = go_back
				visible = "[Not(GetVariableSystem.Exists('action_category'))]"
				clicksound =""
			}

			button = {
				visible = "[GetVariableSystem.Exists('action_category')]"
				clicksound =""
				shortcut = army_split_half
			}

			button_text = {
				visible = "[Not(GetVariableSystem.Exists('action_category'))]"
				onclick = "[GetVariableSystem.Set('action_category', 'yes')]"
				shortcut = army_split_half
			    blockoverride "text" {
			        raw_text = "Filter by category, F."
			    }
			}

			button_text = {
				visible = "[GetVariableSystem.Exists('action_category')]"
				onclick = "[GetVariableSystem.Clear('action_category')]"
				shortcut = go_back
			    blockoverride "text" {
					raw_text = "Filtered, [GetVariableSystem.Get('action_category')]. Go back, B."
			    }
			}

			dynamicgridbox = {
				name = "category_interaction_list"
				datamodel = "[CharacterInteractionMenuWindow.GetCategoryItems]"

				item = {
					flowcontainer_category_group = { }
				}
			}

			flowcontainer = {
			    ignoreinvisible = yes
				direction = vertical
				# visible = "[Not(GetVariableSystem.Exists('action_category'))]"

				button_text = {
					name = "customize_portrait"
					blockoverride "text" {
						raw_text = "Open barbershop."
					}
					# visible = "[Character.CanCustomizePortrait]"
					onclick = "[Character.OnCustomizePortrait]"
					onclick = "[CharacterInteractionMenuWindow.Close]"
					using = tooltip_ne
				}

				text_single = {
					raw_text = "Settings:"
					margin_left = 3
				}

				button_text = {
					blockoverride "text" {
						raw_text = "Show available interactions first."
					}
					blockoverride "pre" {
						spacing = 3
						text_single = {
							raw_text = "[Select_CString(GetVariableSystem.Exists('enabled_x'), 'Checked', 'Unchecked')],"
						}
					}
					onclick = "[GetVariableSystem.Toggle('enabled_x')]"
				}

				button_text = {
					visible = "[GetPlayer.IsValid]"

					blockoverride "text" {
						raw_text = "Close character window when opening interactions."
					}
					blockoverride "pre" {
						spacing = 3
						text_single = {
							raw_text = "[Select_CString( GetScriptedGui('close_interactions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ), 'Checked', 'Unchecked')],"
						}
					}
					onclick = "[GetScriptedGui('close_interactions').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
				}
			}
		}

		### MORE INTERACTIONS
		container = {
			alwaystransparent = no
			visible = "[CharacterInteractionMenuWindow.AreMoreInteractionsVisisble]"
			name = "more_interactions_container"

			container = {
				position = { 10 0 }

				background = {
					texture = "gfx/interface/component_tiles/interaction_menu_more_bg.dds"
					spriteType = Corneredtiled
					spriteborder = { 11 11 }
					margin = { 8 8 }
					shaderfile = "gfx/FX/pdxgui_default.shader"

					modify_texture = {
						name = "overlay"
						texture = "gfx/interface/component_overlay/overlay_window.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
					}
				}

				dynamicgridbox_interaction_list = {
					datamodel = "[CharacterInteractionMenuWindow.GetMoreInteractions]"
				}
			}
		}
	}
}
