textbox = {
	name = "console_output_item"
	maximumsize = { 750 -1 }
	align = left|top
	using = editor_font
	multiline = yes
	autoresize = yes
	alwaystransparent = no
	fontsize = 15
	pseudo_localization_enabled = no
}

window = {
	name = "console_window"
	size = { 800 100% }
	layer = confirmation

	state = {
		name = _hide
		on_finish = "[ExecuteConsoleCommand('clear')]"
	}

	vbox = {
		layoutpolicy_vertical = expanding
		margin = { 0 10 }

		alwaystransparent = no
		filter_mouse = all
		spacing = 2
		allow_outside = yes
		using = dockable_background

		scrollarea = {
			name = "console_output_scrollarea"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			scrollwidget = {
				flowcontainer = {
					margin = { 10 0 }
					name = "console_output"
					direction = "vertical"
					ignoreinvisible = no
				}
			}

			scrollbar_vertical = {
				using = editor_vertical_scrollbar
			}

			scrollbar_horizontal = {
				using = editor_horizontal_scrollbar
			}
		}

		flowcontainer = {
			spacing = 3
			ignoreinvisible = yes
			allow_outside = yes
			visible = no

			dockable_button = {
				size = { 24 24 }
				raw_text = ""
				onclick = "[ConsoleWindow.ToggleMenu]"
			}

			flowcontainer = {
				name = "menu"
				visible = "[ConsoleWindow.IsMenuShown]"
				spacing = 3

				scrollarea = {
					name = "menu_scroll_area"
					size = { 200 505 }
					scrollbarpolicy_horizontal = always_off

					scrollbar_vertical = {
						using = editor_vertical_scrollbar
					}

					scrollwidget = {
						fixedgridbox = {
							name = "menu_grid"
							addcolumn = 150
							addrow = 24

							item = {
								container = {

									icon = {
										visible = "[ConsoleMenuItem.IsCurrentGroup]"
										position = { 0 0 }
										size = { 106 28 }
									}

									dockable_button = {
										position = { 3 3 }
										size = { 180 22 }
										onclick = "[ConsoleMenuItem.Select]"

										text = "[ConsoleMenuItem.GetName]"

										tooltip = "[ConsoleMenuItem.GetHelp]"
										using = tooltip_es
									}
								}
							}
						}
					}
				}

				scrollarea = {
					name = "command_scroll_area"
					size = { 400  505 }
					scrollbarpolicy_horizontal = always_off

					scrollbar_vertical = {
						using = editor_vertical_scrollbar
					}

					scrollwidget = {
						fixedgridbox = {
							name = "command_grid"
							position = { 0 0 }
							addcolumn = 400
							addrow = 29

							item = {
								dockable_button = {
									size = { 400 24 }
									onclick = "[ConsoleMenuItem.Select]"
									tooltip = "[ConsoleMenuItem.GetHelp]"
									text = "[ConsoleMenuItem.GetName]"
								}
							}
						}
					}
				}
			}
		}

		hbox = {
		    layoutpolicy_horizontal = expanding
			margin = { 5 0 }

			editor_textinput = {
				name = "console_edit"
				layoutpolicy_horizontal = expanding
				size = { 400 40 }
				alwaystransparent = no
				focuspolicy = all
				fontsize = 15
			}
		    expand = { }
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			name = "toolbars_window"
			visible = "[Not(GetVariableSystem.Exists('console_tools'))]"
			margin = { 10 0 }

			hbox = {
			    layoutpolicy_horizontal = expanding

			    vbox = {
					layoutpolicy_horizontal = expanding
					max_width = 500

					vbox = {
						layoutpolicy_horizontal = expanding
						margin = { 0 5 }
						margin_left = 5

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								raw_text = "Debug commands."
							}

							dockable_button = {
								name = "run_file_button"
								onclick = "[ExecuteConsoleCommand('run run.txt')]"
								raw_tooltip = "Run file #weak (Edit Run.txt to change what this button does)#!"
								using = tooltip_ne

								icon = {
									parentanchor = center
									position = { 1 1 }
									size = { 30 30 }
									texture = "gfx/interface/icons/character_interactions/send_poem_interaction.dds"
								}
							}

							dockable_button = {
								name = "ai_observe_button"
								onclick = "[ExecuteConsoleCommand('observe')]"
								raw_tooltip = "Go into Observe Mode"
								using = tooltip_ne

								icon = {
									parentanchor = center
									position = { 1 1 }
									size = { 25 25 }
									texture = "gfx/interface/icons/icon_commander_trait.dds"
								}
							}

							dockable_button = {
								name = "kill_console_button"
								onclick = "[ExecuteConsoleCommand('kill')]"
								raw_tooltip = "Kill Currently Played Character"
								using = tooltip_ne

								icon = {
									parentanchor = center
									size = { 30 30 }
									texture = "gfx/interface/icons/icon_dead.dds"
								}
							}


							expand = { }
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Add 100 gold, right click to remove."
							}
							onclick = "[ExecuteConsoleCommand('gold 100')]"
							onrightclick = "[ExecuteConsoleCommand('gold -100')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Add 100 piety, right click to remove."
							}
							onclick = "[ExecuteConsoleCommand('piety 100')]"
							onrightclick = "[ExecuteConsoleCommand('piety -100')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Add 100 prestige, right click to remove."
							}
							onclick = "[ExecuteConsoleCommand('prestige 100')]"
							onrightclick = "[ExecuteConsoleCommand('prestige -100')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Toggle Yesmen. ai will agree to all proposals."
							}
							onclick = "[ExecuteConsoleCommand('yesmen')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Disable ai."
							}
							onclick = "[ExecuteConsoleCommand('ai.disable')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Enable ai."
							}
							onclick = "[ExecuteConsoleCommand('ai.enable')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Toggle instant movement."
							}
							onclick = "[ExecuteConsoleCommand('instamove')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Toggle instant building."
							}
							onclick = "[ExecuteConsoleCommand('instabuild')]"
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						visible = "[Not(ReleaseMode)]"
						hbox = {
							layoutpolicy_horizontal = expanding

							dockable_button = {
								layoutpolicy_horizontal = expanding
								size = { 0 30 }
								raw_text = "Environment"
								onclick = "[ExecuteConsoleCommand('gui.CreateDockable gui/debug/debug_menus.gui environment_debug_window')]"
								tintcolor = { 200 20 0 0.8 }
								raw_tooltip = "Switch between environment lighting cubemaps"
							}

							dockable_button = {
								layoutpolicy_horizontal = expanding
								size = { 0 30 }
								raw_text = "Tweak"
								onclick = "[ExecuteConsoleCommand('gui.CreateDockable gui/debug/debug_menus.gui tweak_window')]"
								tintcolor = { 200 20 0 0.8 }
								raw_tooltip = "Show Tweakable Values"
							}

							dockable_button = {
								layoutpolicy_horizontal = expanding
								size = { 0 30 }
								raw_text = "Portrait Editor"
								onclick = "[ExecuteConsoleCommand('pe')]"
								tintcolor = { 200 20 0 0.8 }
								raw_tooltip = "Portrait Editor"
							}

							dockable_button = {
								size = { 40 30 }
								raw_text = "Purge"
								onclick = "[ExecuteConsoleCommand('PurgePortraits')]"
								tintcolor = { 1 0.5 0.1 0.8 }
								raw_tooltip = "Purge Portrait cache"
							}

						}

						hbox = {
							layoutpolicy_horizontal = expanding

							dockable_button = {
								layoutpolicy_horizontal = expanding
								size = { 0 30 }
								raw_text = "Language"
								onclick = "[ExecuteConsoleCommand('gui.CreateDockable gui/debug/debug_menus.gui language_window')]"
								tintcolor = { 200 20 0 0.8 }
							}

							dockable_button = {
								layoutpolicy_horizontal = expanding
								size = { 0 30 }
								raw_text = "Map"
								onclick = "[ExecuteConsoleCommand('gui.CreateDockable gui/debug/debug_menus.gui map_debug_menu')]"
								tintcolor = { 200 20 0 0.8 }
								raw_tooltip = "Map Object debug menu"
							}

							dockable_button  = {
								layoutpolicy_horizontal = expanding
								size = { 0 30 }
								raw_text = "Flag Preview"
								onclick = "[ExecuteConsoleCommand('gui.CreateDockable gui/debug/debug_menus.gui flag_preview_window')]"
								tintcolor = { 200 20 0 0.8 }
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							dockable_button = {
								layoutpolicy_horizontal = expanding
								size = { 0 30 }
								raw_text = "Watch Windows"
								onclick = "[ExecuteConsoleCommand('watch')]"
								tintcolor = { 1 0.5 0.1 0.8 }
							}

							dockable_button = {
								layoutpolicy_horizontal = expanding
								size = { 0 30 }
								raw_text = "Explore Objects"
								onclick = "[ExecuteConsoleCommand('explorer')]"
								tintcolor = { 1 0.5 0.1 0.8 }
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							dockable_button = {
								layoutpolicy_horizontal = expanding
								size = { 0 30 }
								raw_text = "Reload Textures"
								onclick = "[ExecuteConsoleCommand('reload texture')]"
								tintcolor = { 0.9 0.9 0 0.8 }
								raw_tooltip = "Reload all game textures from disk"
							}

							dockable_button  = {
								layoutpolicy_horizontal = expanding
								size = { 0 30 }
								raw_text = "GUI Editor"
								onclick = "[ExecuteConsoleCommand('gui_editor')]"
								tintcolor = { 0.9 0.9 0 0.8 }
								raw_tooltip = "Visualize and edit GUI widgets"
							}

							dockable_button = {
								layoutpolicy_horizontal = expanding
								size = { 0 30 }
								raw_text = "Gui.Debug"
								onclick = "[ExecuteConsoleCommand('tweak Gui.Debug')]"
								tintcolor = { 0.9 0.9 0 0.8 }
								raw_tooltip = "Visualize GUI widgets"
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							dockable_button = {
								layoutpolicy_horizontal = expanding
								size = { 0 30 }
								raw_text = "Test Window"
								onclick = "[ExecuteConsoleCommand('gui.CreateWidget gui/debug/test_gui.gui test_window')]"
								tintcolor = { 0.9 0.9 0 0.8 }
								raw_tooltip = "Window for GUI testing (test_gui.gui)"
							}

							dockable_button = {
								layoutpolicy_horizontal = expanding
								size = { 0 30 }
								raw_text = "UI Library"
								onclick = "[ExecuteConsoleCommand('GUI.CreateWidget gui/debug/window_component_library.gui component_library_window')]"
								tintcolor = { 0.9 0.9 0 0.8 }
								raw_tooltip = "Open UI Library"
								visible = "[Not(ReleaseMode)]"
							}
						}

					}

					hbox = {
						layoutpolicy_horizontal = expanding

						dockable_button = {
							layoutpolicy_horizontal = expanding
							size = { 0 30 }
							raw_text = "Debug Mode"
							onclick = "[ExecuteConsoleCommand('debug_mode')]"
							tintcolor = { 1.0 0.5 1.0 0.8 }
							raw_tooltip = "Enter/Exit Debug Mode"

							editor_textbox = {
								visible = "[InDebugMode]"
								parentanchor = right|vcenter
								position = { -11 0 }
								align = right|nobaseline
								raw_text = "Active"
								default_format = "#low"
								autoresize = yes

								background = {
									texture = "gfx/interface/_debug/pink_square_chill.png"
									spriteType = Corneredtiled
									spriteborder = { 1 1 }
									margin = { 6 1 }
								}
							}
						}

						dockable_button = {
							# visible = "[IsDefaultGUIMode]"
							size = { 150 30 }
							raw_text = "Toggle Release Mode"
							onclick = "[ExecuteConsoleCommand('release_mode')]"
							tintcolor = { 0.5 0.5 0.5 0.8 }
							raw_tooltip = "Toggles build number, Error Horse, FPS Warning visibility in HUD"
						}
					}
				}

			    expand = { }
			}

		}

		button_text = {
			layoutpolicy_horizontal = expanding
			blockoverride "text" {
				raw_text = "[Select_CString(GetVariableSystem.Exists('console_tools'), 'Show', 'Hide')] menus"
				margin_left = 5
			}
			onclick = "[GetVariableSystem.Toggle('console_tools')]"
		}
	}
}