window = {
	name = "modify_vassal_contract_interaction_window"
	datacontext = "[ModifyVassalContractInteractionWindow.GetCharacterInteractionConfirmationWindow]"
	datacontext = "[ModifyVassalContractInteractionWindow.GetContractPreview]"
	datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
	parentanchor = right #TODO
	using = Window_Size_MainTab
	using = Window_Background

    blockoverride "bg_margins"
    {
        margin = { -23 0 }
    }
	# size = { 600 700 } # Doesn't do much cause of the set_parent_size_to_minimum below
	layer = middle

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	button_close = {
		onclick = "[ModifyVassalContractInteractionWindow.Close]"
		shortcut = close_window
	}

	vbox = {
		name = "window_content"
		# set_parent_size_to_minimum = yes
		minimumsize = { 0 700 }

		margin = { 35 0 }

		vbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			char_name = {
				layoutpolicy_horizontal = expanding
				blockoverride "pre" {
					text_single = {
						visible = "[Character.GetGovernment.IsType('feudal_government')]"
						text = "FEUDAL_CONTRACT"
					}

					text_single = {
						visible = "[Not(Character.GetGovernment.IsType('feudal_government'))]"
						raw_text = "Clan vassal contract"
					}
					text_single = {
						raw_text = "with "
					}
				}
				datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				# maximumsize = { -1 300 }

				blockoverride "scrollbox_margins" {
					margin_top = 15
				}
				blockoverride "scrollbox_content" {

					vbox = {
						layoutpolicy_horizontal = expanding
						margin = { 5 5 }

						# change to
						text_single = {
							raw_text = "Contract will change to:"
							visible = "[CharacterInteractionConfirmationWindow.GetEffectsDescription.HasAnyAcceptEffect]"
							layoutpolicy_horizontal = expanding
						}
						# tax and levy
						vbox = {
							name = "tax_levy_opinion_info"
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[CharacterInteractionConfirmationWindow.GetRecipient.GetFirstNameNoTooltip] provides:"
								visible = "[Not(CharacterInteractionConfirmationWindow.GetEffectsDescription.HasAnyAcceptEffect)]"
							}

							hbox = {
								spacing = 5
								layoutpolicy_horizontal = expanding
								tooltipwidget = {
									my_realm_window_contribution_tooltip = {
										datacontext = "[ModifyVassalContractInteractionWindow.GetContractPreviewTaxBreakdown]"
										blockoverride "levy_info_visible"
										{
											visible = no
										}
										blockoverride "contribution_tooltip_header"
										{
											text = "[SelectLocalization(VassalContract.GetVassal.IsLocalPlayer, 'MRW_TT_TAXES_TO_MY_LIEGE', 'MRW_TT_TAXES_TO_ME')]"
										}
									}
								}

								text_single = {
									raw_text = "[ModifyVassalContractInteractionWindow.GetContractPreviewCachedTax|1] gold,"
								}

								text_single = {
									raw_text = "[VassalContract.GetTaxRatioForLiege|0%] of [CharacterInteractionConfirmationWindow.GetRecipient.GetHerHis] income."
								}

								text_single = {
									visible = "[Character.GetGovernment.IsType('feudal_government')]"
									raw_text = "[VassalContract.GetShortObligationLevelNameWithHighlightFor( 'feudal_government_taxes' )] tax level."
								}

								expand = { }
							}

							hbox = {
								spacing = 5
								layoutpolicy_horizontal = expanding
								tooltipwidget = {
									my_realm_window_contribution_tooltip = {
										datacontext = "[ModifyVassalContractInteractionWindow.GetContractPreviewLeviesBreakdown]"
										blockoverride "tax_info_visible"
										{
											visible = no
										}
										blockoverride "contribution_tooltip_header"
										{
											text = "[SelectLocalization(VassalContract.GetVassal.IsLocalPlayer, 'MRW_TT_LEVIES_TO_MY_LIEGE', 'MRW_TT_LEVIES_TO_ME')]"
										}
									}
								}

								text_single = {
									raw_text = "[ModifyVassalContractInteractionWindow.GetContractPreviewCachedLeviesFormatted|1] men,"
								}

								text_single = {
									raw_text = "[VassalContract.GetLevyRatioForLiege|0%] of [CharacterInteractionConfirmationWindow.GetRecipient.GetHerHis] total."
								}

								text_single = {
									visible = "[Character.GetGovernment.IsType('feudal_government')]"
									raw_text = "[VassalContract.GetShortObligationLevelNameWithHighlightFor( 'feudal_government_levies' )] levies level."
								}

								expand = { }
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "You are not [VassalContract.GetVassal.GetHerHis] rightful liege, decreasing obligations by [Subtract_CFixedPoint( '(CFixedPoint)1',  GuiScope.SetRoot(VassalContract.GetVassal.MakeScope).ScriptValue('de_jure_penalty'))|%0]."
								visible = "[LessThan_CFixedPoint(GuiScope.SetRoot(VassalContract.GetVassal.MakeScope).ScriptValue('de_jure_penalty'), '(CFixedPoint)1')]"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[VassalContract.GetVassal.GetHerHis|U] opinion is [VassalContract.GetVassal.GetOpinionOf( GetPlayer )], [Select_CString(GreaterThan_int32(VassalContract.GetVassal.GetOpinionOf( GetPlayer ), '(int32)0'), 'increasing', 'decreasing')] obligations. See tooltip for calculations."
								visible = "[Not(Character.GetGovernment.IsType('feudal_government'))]"

								tooltipwidget = {
									widget = {
										using = DefaultTooltipBackground
										vbox = {
											set_parent_size_to_minimum = yes
											margin = { 10 10 }

											hbox = {
												layoutpolicy_horizontal = expanding
												visible = "[Not(Character.GetGovernment.IsType('feudal_government'))]"
												spacing = 3

												text_single = {
													raw_text = "Base tax is [GuiScope.ScriptValue('clan_government_tax_default')|%0], plus opinion of [VassalContract.GetVassal.GetOpinionOf( GetPlayer )] multiplied by"
												}

												text_single = {
													raw_text = "[Multiply_CFixedPoint(GuiScope.ScriptValue('clan_government_tax_opinion_scale_positive'), '(CFixedPoint)100')|1]."
													visible = "[GreaterThan_int32(VassalContract.GetVassal.GetOpinionOf( GetPlayer ), '(int32)0')]"
												}


												text_single = {
													raw_text = "[Multiply_CFixedPoint(GuiScope.ScriptValue('clan_government_tax_opinion_scale_negative'), '(CFixedPoint)100')|1]."
													visible = "[LessThanOrEqualTo_int32(VassalContract.GetVassal.GetOpinionOf( GetPlayer ), '(int32)0')]"
												}

												expand = { }
											}


											hbox = {
												layoutpolicy_horizontal = expanding
												visible = "[Not(Character.GetGovernment.IsType('feudal_government'))]"
												spacing = 3

												text_single = {
													raw_text = "Base levy is [GuiScope.ScriptValue('clan_government_levies_default')|%0], plus opinion of [VassalContract.GetVassal.GetOpinionOf( GetPlayer )] multiplied by"
												}

												text_single = {
													raw_text = "[Multiply_CFixedPoint(GuiScope.ScriptValue('clan_government_levies_opinion_scale_positive'), '(CFixedPoint)100')|1]."
													visible = "[GreaterThan_int32(VassalContract.GetVassal.GetOpinionOf( GetPlayer ), '(int32)0')]"
												}

												text_single = {
													raw_text = "[Multiply_CFixedPoint(GuiScope.ScriptValue('clan_government_levies_opinion_scale_negative'), '(CFixedPoint)100')|1]."
													visible = "[LessThanOrEqualTo_int32(VassalContract.GetVassal.GetOpinionOf( GetPlayer ), '(int32)0')]"
												}

												expand = { }
											}

											hbox = {
												layoutpolicy_horizontal = expanding
												spacing = 3
												text_single = {
													raw_text = "Maximum tax is [GuiScope.ScriptValue('clan_government_tax_max_possible')|%0],"
												}

												text_single = {
													raw_text = "minimum is [GuiScope.ScriptValue('clan_government_tax_min_ca_1')|%0] due to crown authority."
													visible = "[GetScriptedGui('crown_authority_1').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
												}

												text_single = {
													raw_text = "minimum is [GuiScope.ScriptValue('clan_government_tax_min_ca_2')|%0] due to crown authority."
													visible = "[GetScriptedGui('crown_authority_2').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
												}

												text_single = {
													raw_text = "minimum is [GuiScope.ScriptValue('clan_government_tax_min_ca_3')|%0] due to crown authority."
													visible = "[GetScriptedGui('crown_authority_3').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
												}
												expand = { }
											}

											hbox = {
											    layoutpolicy_horizontal = expanding
												spacing = 3

											    text_single = {
													raw_text = "Maximum levy is [GuiScope.ScriptValue('clan_government_levies_max_possible')|%0],"
												}

												text_single = {
													raw_text = "minimum is [GuiScope.ScriptValue('clan_government_levies_min_ca_1')|%0] due to crown authority."
													visible = "[GetScriptedGui('crown_authority_1').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
												}

												text_single = {
													raw_text = "minimum is [GuiScope.ScriptValue('clan_government_levies_min_ca_2')|%0] due to crown authority."
													visible = "[GetScriptedGui('crown_authority_2').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
												}

												text_single = {
													raw_text = "minimum is [GuiScope.ScriptValue('clan_government_levies_min_ca_3')|%0] due to crown authority."
													visible = "[GetScriptedGui('crown_authority_3').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
												}

											    expand = { }
											}
										}
									}
								}
							}

						}

						vbox = {
							visible = "[CharacterInteractionConfirmationWindow.GetEffectsDescription.HasAnyAcceptEffect]"
							layoutpolicy_horizontal = expanding

							hbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[ModifyVassalContractInteractionWindow.GetContractPreviewOpinionBreakdown]"

								visible = "[Not(VassalContract.GetVassal.IsLocalPlayer)]"
								tooltip_enabled = "[ValueBreakdown.HasTooltip]"
								tooltipwidget = {
									widget_value_breakdown_tooltip = { }
								}

								text_single = {
									raw_text = "Opinion will change by [VassalContract.GetVassalOpinionModification|+=]"
								}

								text_single = {
									raw_text = ". Current [VassalContract.GetVassal.GetOpinionOf( GetPlayer )]."
								}

								expand = { }
							}
						}

						hbox = {
							visible = "[CharacterInteractionConfirmationWindow.GetEffectsDescription.HasAnyAcceptEffect]"
							layoutpolicy_horizontal = expanding

							text_label_left = {
								text = CONTRACT_EFFECTS_HEADER
							}
							expand = { }
						}

						# effects
						vbox = {
							layoutpolicy_horizontal = expanding

							background = { using = Background_Area_Border_Solid }

							visible = "[CharacterInteractionConfirmationWindow.GetEffectsDescription.HasAnyAcceptEffect]"
							datacontext = "[CharacterInteractionConfirmationWindow.GetEffectsDescription]"

							text_multi = {
								visible = "[InteractionEffectsDescription.IsShowingOnAcceptEffects]"
								name = "accept_effects_info"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								autoresize = yes
								max_width = 580
								margin = { 5 0 }
								raw_text = "[InteractionEffectsDescription.GetAcceptEffectDescription]."
							}

							text_multi = {
								visible = "[Not(InteractionEffectsDescription.IsShowingOnAcceptEffects)]"
								name = "decline_effects_info"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								autoresize = yes
								max_width = 580
								margin = { 5 0 }
								raw_text = "[InteractionEffectsDescription.GetRejectionEffectDescription]."
							}
						}

						## Options
						vbox_interaction_options = {
							layoutpolicy_horizontal = expanding
							margin = { 0 0 }
							margin_top = 5
							name = "tutorial_highlight_modify_contract_hook_button"
							visible = "[And(CharacterInteractionConfirmationWindow.HasOptions, CharacterInteractionConfirmationWindow.GetEffectsDescription.HasAnyAcceptEffect)]"
						}

						hbox = {
							visible = "[And(CharacterInteractionConfirmationWindow.GetEffectsDescription.HasAnyAcceptEffect, ObjectsEqual( GetPlayer, VassalContract.GetLiege ))]"
							layoutpolicy_horizontal = expanding
							name = "change_only_once_text"

							text_single = {
								visible = "[Character.GetGovernment.IsType('feudal_government')]"
								text = "VASSAL_CONTRACT_OBLIGATION_ONLY_ONCE"
							}

							text_single = {
								visible = "[Not(Character.GetGovernment.IsType('feudal_government'))]"
								text = "NON_FEUDAL_VASSAL_CONTRACT_OBLIGATION_ONLY_ONCE"
							}

							dot = { }

							expand = { }
						}

						widget = {
							size = { 0 5 }
						}

						button_primary_text = {
							layoutpolicy_horizontal = expanding
							visible = "[CharacterInteractionConfirmationWindow.GetEffectsDescription.HasAnyAcceptEffect]"
							name = "send_offer_button"

							blockoverride "text" {
								text = "[CharacterInteractionConfirmationWindow.GetSendName]"
							}

							blockoverride "disabled" {
								visible = "[Not(CharacterInteractionConfirmationWindow.CanSend)]"
							}

							enabled = "[CharacterInteractionConfirmationWindow.CanSend]"
							onclick = "[ModifyVassalContractInteractionWindow.Send]"
							tooltip = "[CharacterInteractionConfirmationWindow.GetCanSendDescription]"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_advance"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							name = "reset_button"
							onclick = "[ModifyVassalContractInteractionWindow.ResetToCurrent]"
							visible = "[Not( ModifyVassalContractInteractionWindow.IsPreviewSameAsCurrent )]"
							blockoverride "text" {
								raw_text = "Reset all changes"
							}
							blockoverride "dot_nb" {
							}
							using = tooltip_above
						}

						widget = {
							size = { 0 5 }
						}
					}

					vbox = {
						name = "obligation_level_negotiation"
						layoutpolicy_horizontal = expanding
						margin = { 5 0 }

						# Vbox for Feudal Contract
						contract_details = {
							visible = "[Character.GetGovernment.IsType('feudal_government')]"
						}

						# Vbox for other government contract

						contract_details = {
							visible = "[Not(Character.GetGovernment.IsType('feudal_government'))]"
							blockoverride "levels" {
							}
							blockoverride "radio" {
								visible = "[And(Not(Character.GetPrimaryTitle.IsBarony),Not( Character.GetPrimaryTitle.IsCounty))]"
							}
						}
					}
				}
			}
			expand = { }
		}
	}
}


types OCR_Contract {
	type contract_details = vbox {
		name = "paper_contract"
		layoutpolicy_horizontal = expanding

		block "levels" {

			vbox = {
				name = "major_line_tree_levels"
				layoutpolicy_horizontal = expanding

				datamodel = "[ModifyVassalContractInteractionWindow.AccessObligationLevelLineTrees]"

				item = {
					vbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding

						datacontext = "[ObligationLevelLineTree.GetContainerData]"

						visible = "[ObligationContainerData.ShouldShow( ModifyVassalContractInteractionWindow.GetContractPreview )]"

						text_single = {
							margin_left = 10
							layoutpolicy_horizontal = expanding
							raw_text = "[ObligationContainerData.GetName]:"
						}

						vbox = {
							layoutpolicy_horizontal = expanding

							name = "obligation_level_item_line_area" # Name used in code do not change

							datamodel = "[ObligationLevelLineTree.AccessItems]"

							item = {
								widget = {
									datacontext = "[ObligationLevelLineItem.AccessItem]"
									size = { 580 25 }
									position = "[ObligationLevelLineTree.GetItemPosition( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"

									button_text_cant = {
										blockoverride "pre" {
											text_single = {
												raw_text = " Choose"
												visible = "[Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected)]"
											}
										}
										blockoverride "extra" {
											space = { }
											text_single = {
												text = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
												visible = "[Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected)]"
											}

											text_single = {
												text = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
												visible = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected]"
											}

											text_single = {
												raw_text = ", current level"
												visible = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsCurrent]"
											}

											text_single = {
												raw_text = ", Selected"
												visible = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected]"
											}

											text_single = {
												raw_text = ". Tooltip"
												tooltip = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetTooltip]"
											}
											dot = { }
										}
										blockoverride "disabled" {
											align = left
											visible = "[Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsEnabled)]"
										}

										onclick = "[ModifyVassalContractInteractionWindowObligationLevelOption.Select]"
										enabled = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsEnabled]"
									}
								}
							}
						}
					}
				}
			}
		}

		vbox = {
			name = "minor_list_levels_radio_buttons"
			datamodel = "[ModifyVassalContractInteractionWindow.AccessObligationLevelRadioButtons]"
			layoutpolicy_horizontal = expanding
			block "radio" { }

			item = {
				vbox = {
					layoutpolicy_horizontal = expanding
					datacontext = "[ObligationLevelRadioButtons.GetContainerData]"

					visible = "[ObligationContainerData.ShouldShow( ModifyVassalContractInteractionWindow.GetContractPreview )]"

					text_single = {
						text = "[ObligationContainerData.GetName]"
						layoutpolicy_horizontal = expanding
					}

					vbox = {
						datamodel = "[ObligationLevelRadioButtons.Access]"
						layoutpolicy_horizontal = expanding
						item = {
							button_text = {
								layoutpolicy_horizontal = expanding
								onclick = "[ModifyVassalContractInteractionWindowObligationLevelOption.Select]"
								visible = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsVisible]"
								blockoverride "pre" {
									text_single = {
										raw_text = "Can't"
										visible = "[And(Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsEnabled), Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected))]"
										margin_right = 3
									}
									text_single = {
										raw_text = "Choose"
										visible = "[Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected)]"
									}
								}
								blockoverride "text" {
									raw_text = " [ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
									align = left
								}
								blockoverride "extra" {
									text_single = {
										raw_text = ", selected"
										visible = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected]"
									}
									text_single = {
										raw_text = ". Tooltip"
										tooltip = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetTooltip]"
									}
									dot = { }
								}
							}
						}
					}
				}
			}
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			raw_text = "Priviliges and Restrictions:"
		}

		dynamicgridbox = {
			name = "minor_list_levels_checkboxes"
			layoutpolicy_horizontal = expanding

			datamodel = "[ModifyVassalContractInteractionWindow.AccessObligationLevelCheckboxes]"

			item = {
				button_text = {
					datacontext = "[ObligationLevelCheckbox.GetContainerData]"
					datacontext = "[ObligationLevelCheckbox.GetLevel( '(int32)1' )]"

					visible = "[ObligationContainerData.ShouldShow( ModifyVassalContractInteractionWindow.GetContractPreview )]"
					enabled = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsEnabled]"
					onclick = "[ObligationLevelCheckbox.AccessLevel( ObligationLevelCheckbox.GetUnselectedLevelIndex ).Select]"
					onclick = "[ObligationLevelCheckbox.ToggleSelection]"

					blockoverride "pre" {
						text_single = {
							raw_text = "Can't "
							visible = "[And(Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsEnabled), Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected))]"
						}
						text_single = {
							raw_text = "Change"
							visible = "[Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected)]"
						}
						text_single = {
							raw_text = " "
						}
					}

					blockoverride "text" {
						text = "[ObligationContainerData.GetName]"
						align = left
					}

					blockoverride "extra" {
						text_single = {
							raw_text = " [ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
							visible = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected]"
						}

						dot = { }

						text_single = {
							raw_text = " Can't"
							visible = "[And(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected, Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsEnabled))]"
						}
						text_single = {
							raw_text = " Revoke."
							visible = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected]"
						}
						text_single = {
							raw_text = " Tooltip."
							tooltip = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetTooltip]"
						}
					}
				}
			}
		}
	}
}