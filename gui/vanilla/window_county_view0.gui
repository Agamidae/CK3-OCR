types OCR {
	type old_county = window {
		size = { 625 620 }
		parentanchor = bottom
		using = ocr_off

		background = {
			texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 18 }
			margin = { -23 -17 }
			margin_left = 20
			margin_bottom = 20
			texture_density = 2

			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}
		}

		state = {
			name = _show
			on_start = "[GetVariableSystem.Set( 'county_view_open', 'true' )]"
			on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"

			using = Animation_FadeIn_Standard
			using = Sound_WindowShow_Standard
			using = Animation_FadeIn_BottomLeft
		}

		state = {
			name = _hide
			on_start = "[GetVariableSystem.Clear( 'county_view_open' )]"
			on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"

			using = Animation_FadeOut_Standard
			using = Sound_WindowHide_Standard
			using = Animation_FadeOut_BottomLeft
		}


		vbox = {
			name = "window_content"
			margin_right = 40
			margin_top = 35

			datacontext = "[HoldingView.GetHolding]"
			datacontext = "[HoldingView.GetProvince]"
			datacontext = "[HoldingView.GetHolder]"
			datacontext = "[Province.GetCounty]"

			hbox = {
				name = "county_header"
				layoutpolicy_horizontal = expanding
				margin_right = 15
				margin_left = 5
				margin_top = 5
				margin_bottom = 5
				spacing = 2

				background = {
					using = Background_Area_Dark
					margin_left = 5
				}

				coa_title_small = {
					datacontext = "[HoldingView.GetCountyTitle]"
				}

				vbox = {
					hbox = {
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "[HoldingView.GetCountyTitle.GetNameNoTooltip]"
							margin_bottom = 4
							using = Font_Size_Big
							font = TitleFont
							max_width = 380
							fontsize_min = 16
						}

						button_edit_text = {
							visible = "[HoldingView.GetCountyTitle.CanPlayerCustomizeTitle]"
							onclick = "[OpenTitleCustomizationWindow(HoldingView.GetCountyTitle)]"
							tooltip = "CUSTOMIZE_TITLE"
						}
					}

					vbox = {
						datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
						layoutpolicy_horizontal = expanding

						text_single = {
							name = "your_county"
							visible = "[ObjectsEqual( Character.Self, GetPlayer )]"
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_YOUR_COUNTY"
							margin_left = 2
							margin_bottom = 4
							using = Font_Size_Small
						}

						text_single = {
							name = "top_realm_county"
							visible = "[Character.IsOtherLiegeOrAbove( GetPlayer )]"
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_TOP_REALM_COUNTY"
							margin_left = 5
							margin_bottom = 4
							using = Font_Size_Small
						}

						text_single = {
							name = "foreign_county"
							visible = "[Not(Or(ObjectsEqual( Character.Self, GetPlayer ),Character.IsOtherLiegeOrAbove( GetPlayer )))]"
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_FOREIGN_COUNTY"
							margin_left = 5
							margin_bottom = 4
							using = Font_Size_Small
						}
					}
				}

				expand = {}

				### SIEGE AND RAID GOTO BUTTON ###
				button_group = {
					name = "open_siege_button"
					datacontext = "[HoldingView.GetProvince.GetSiege]"
					visible = "[HoldingView.GetProvince.HasActiveSiege]"
					onclick = "[DefaultOnSiegeClick(Siege.GetID)]"
					tooltip = "[Siege.GetSiegeDescription]"
					using = tooltip_se
					shortcut = county_go_to_siege
					using = siege_goto_template
				}

				button_group = {
					name = "open_raid_button"
					datacontext = "[HoldingView.GetProvince.GetRaid]"
					visible = "[HoldingView.GetProvince.HasActiveRaid]"
					onclick = "[DefaultOnRaidClick( Raid.Self )]"
					tooltip = "MAP_RAID_TOOLTIP"
					shortcut = county_go_to_siege
					using = tooltip_se
					using = raid_goto_template
					blockoverride "tooltip" {}
				}

				buttons_window_control = {

					blockoverride "button_go_to"
					{
						tooltip = "GOTO_PROVINCE_TT"
						using = tooltip_ne
						onclick = "[HoldingView.PanToCountyCapital]"
					}

					blockoverride "button_back"
					{
						visible = "[HasViewHistory]"
						onclick = "[OpenFromViewHistory]"
						tooltip = "[GetViewHistoryTooltip]"
					}

					blockoverride "button_close"
					{
						onclick = "[HoldingView.Close]"
					}
				}
			}

			####################################
			########### COUNTY INFO ############
			####################################

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 10 2 }
				spacing = 6

				hbox = {
					datamodel = "[HoldingView.GetDeJureLieges]"

					item = {
						coa_title_tiny_crown = {
							visible = "[GreaterThan_int32( Title.GetTierFrame, '(int32)3' )]"
							using = tooltip_se
						}
					}
				}

				text_single = {
					text = "DE_JURE_HIERARCHY"
					default_format = "#low"
				}

				expand = {}

				hbox = {
					name = "county_modifiers_grid"
					datamodel = "[HoldingView.GetCountyModifiers]"

					item = {
						icon = {
							size = { 30 30 }
							texture = "[ModifierItem.GetIcon]"
							using = tooltip_ne
							tooltip = "[ModifierItem.GetTooltip]"
						}
					}
				}

				hbox = {
					layoutpolicy_vertical = expanding
					visible = [County.IsFullyOccupied]
					datacontext = [County.GetCountyOccupant]

					widget = {
						size = { 52 52 }

						icon = {
							size = { 70 70 }
							name = "war_icon"
							texture = "gfx/interface/icons/war_status/war_icon.dds"
							parentanchor = center
						}

						coa_realm_small = {
							position = { 1 0 }
							blockoverride "coa_button" {
								tooltip = "COUNTY_OCCUPIER_TOOLTIP"
								onclick = "[DefaultOnRealmFlagClick(Character.GetID)]"
								onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
								button_ignore = none
								tooltip_enabled = "[Not(IsInteractionMenuOpenForCharacter(Character.GetID))]"
							}
						}
					}
				}
			}

			hbox = {
				name = "county_info"
				datacontext = "[HoldingView.GetProvince.GetCountyCapitalProvince]"
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area
					margin_bottom = -2
				}

				hbox = {
					name = "holder_info"
					datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
					visible = "[HoldingView.GetProvince.HasCountyCapitalProvince]"
					layoutpolicy_horizontal = expanding
					margin = { 5 5 }
					margin_right = 15

					background = {
						name = "Held_directly_by_me"
						visible = "[ObjectsEqual( Character.Self, GetPlayer )]"
						texture = "gfx/interface/component_masks/patterns/mask_pattern_06.dds"
						spriteType = Corneredtiled
						margin = { -7 -5 }
						using = Color_Green
						alpha = 0.2

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							mirror = horizontal
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_rough_edges.dds"
							spriteType = Corneredtiled
							spriteborder = { 20 20 }
							texture_density = 2
							blend_mode = alphamultiply
						}
					}

					background = {
						name = "Held_by_someone_below_me"
						visible = "[Character.IsOtherLiegeOrAbove( GetPlayer )]"
						texture = "gfx/interface/component_masks/patterns/mask_pattern_06.dds"
						spriteType = Corneredtiled
						margin = { -7 -5 }
						using = Color_Blue
						alpha = 0.2

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							mirror = horizontal
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_rough_edges.dds"
							spriteType = Corneredtiled
							spriteborder = { 20 20 }
							texture_density = 2
							blend_mode = alphamultiply
						}
					}

					background = {
						name = "Held_under_my_Top_Liege,_but_Not_Me"
						visible = "[And(And(Not( ObjectsEqual( Character.Self, GetPlayer )),Not(Character.IsOtherLiegeOrAbove( GetPlayer ))),ObjectsEqual( Character.GetTopLiege, GetPlayer.GetTopLiege ))]"
						texture = "gfx/interface/component_masks/patterns/mask_pattern_06.dds"
						spriteType = Corneredtiled
						margin = { -7 -5 }
						using = Color_Bright_Yellow
						alpha = 0.2

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							mirror = horizontal
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_rough_edges.dds"
							spriteType = Corneredtiled
							spriteborder = { 20 20 }
							texture_density = 2
							blend_mode = alphamultiply
						}
					}

					#####

					## Holder
					portrait_head = {}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin_top = 6

						vbox = {
							layoutpolicy_horizontal = expanding
							margin_left = 10
							margin_bottom = 10

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "HOLDING_VIEW_COUNTY_HOLDER"
								default_format = "#low"
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								text_multi = {
									datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
									visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"
									layoutpolicy_horizontal = expanding
									max_width = 187
									text = "[Character.GetRelationToString( GetPlayer )]"
									tooltip = "EXTENDED_RELATIONS_TOOLTIP"
									autoresize = yes
								}
							}

							text_multi = {
								datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
								layoutpolicy_horizontal = expanding
								max_width = 188
								text = "[Character.GetShortUINameNoTooltip|U]"
								default_format = "#high"
								autoresize = yes
							}
						}

						expand = {}
					}
				}

				vbox = {
					name = "county_stats"
					layoutpolicy_vertical = expanding
					margin = { 10 10 }
					margin_right = 15
					min_width = 260

					hbox = {
						layoutpolicy_horizontal = expanding
						datacontext = "[HoldingView.GetProvince.GetCounty]";

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[control|E]:"
						}

						text_single = {
							text = "[County.GetControlLevel]"
							default_format = "#high"
							tooltip = "COUNTY_CONTROL_TOOLTIP"

							background = {
								visible = "[LessThan_CFixedPoint(County.GetControl, '(CFixedPoint)100')]"
								margin = { 5 0 }
								using = Status_Bad
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[development|E]:"
						}

						text_single = {
							text = "[HoldingView.GetProvince.GetCounty.GetDevelopmentLevelString]"
							default_format = "#high"
							tooltip = "COUNTY_DEVELOPMENT_TOOLTIP"
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[county_opinion|E]:"
						}

						button_normal = {
							name = "in_faction"
							visible = "[HoldingView.IsInFaction]"
							onclick = "[HoldingView.OnGotoFaction]"
							tooltip = "COUNTY_IN_FACTION_TOOLTIP"
							size = { 20 20 }
							texture = "gfx/interface/icons/symbols/icon_warning.dds"
						}

						text_single = {
							text = "[HoldingView.GetCountyOpinion|=+]"
							default_format = "#high"
							tooltip = "COUNTY_OPINION_TOOLTIP"
						}
					}

					hbox = {
						datacontext = "[Province.GetCounty.GetCulture]"
						layoutpolicy_horizontal = expanding
						spacing = 2

						using = tooltip_ne

						tooltipwidget = {

							culture_tooltip = {

								blockoverride "extra_info"
								{
									text_single = {
										fonttintcolor = "[TooltipInfo.GetTintColor]"
										using = DefaultTooltipText
										visible = "[Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) )]"
										text = "COUNTY_NOT_YOUR_CULTURE"
									}
								}
							}
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[culture|E]:"
						}

						button_group = {
							# shortcut = "innovations_window"
							onclick = "[OpenGameViewData( 'culture_window', Culture.GetID )]"

							text_single = {
								text = "CULTURE_COUNTY_WINDOW"
								default_format = "#high"

								background = {
									visible = "[NotEqualTo_uint32(Culture.GetID, GetPlayer.GetCulture.GetID)]"
									margin = { 5 0 }
									using = Status_Bad
								}
							}
						}
					}

					hbox = {
						datacontext = "[Province.GetCounty.GetFaith]"
						layoutpolicy_horizontal = expanding
						spacing = 2
						using = tooltip_ne

						tooltipwidget = {

							faith_tooltip = {

								blockoverride "extra_info" {
									using = faith_tooltip_click_default_extra_info

									text_single = {
										margin = { 10 0 }
										layoutpolicy_horizontal = expanding
										fonttintcolor = "[TooltipInfo.GetTintColor]"
										using = DefaultTooltipText
										visible = "[Not( ObjectsEqual( Faith.Self, GetPlayer.GetFaith ) )]"
										text = "COUNTY_NOT_YOUR_FAITH"
									}
								}
							}
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[faith|E]:"
						}

						vbox = {
							expand = { minimumsize = { 0 2 } }
							icon = {
								size = { 22 22 }
								datacontext = "[Province.GetCounty.GetFaith]"
								texture = "[Faith.GetIcon]"
							}
						}

						button_group = {
							# shortcut = "faith_window"
							onclick = "[OpenGameViewData( 'faith', Faith.GetID )]"

							text_single = {
								text = "[Faith.GetNameNoTooltip]"
								default_format = "#high"

								background = {
									visible = "[NotEqualTo_uint32(Faith.GetID, GetPlayer.GetFaith.GetID)]"
									margin = { 5 0 }
									using = Status_Bad
								}
							}
						}
					}
				}
			}

			divider = {
				layoutpolicy_horizontal = expanding
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				hbox = {
					margin_left = 5
					spacing = 5
					datamodel = "[HoldingView.GetCountyHoldings]"

					item = {
						button_tab_dark = {
							datacontext = "[GUICountyHolding.GetHolding]"
							size = { 45 45  }
							down = "[GUICountyHolding.IsSelected]"
							alwaystransparent = "[GUICountyHolding.IsSelected]"
							onclick = "[GUICountyHolding.OnClick]"
							onclick = "[PdxGuiTriggerAllAnimations('holding_view_refresh')]"
							using = tooltip_ne
							tooltipwidget = { holding_tooltip_click = {} }

							icon_building_tab = {
								parentanchor = center
								position = { 0 1 }
								size = { 35 30 }
								alwaystransparent = yes
								down = "[GUICountyHolding.IsSelected]"
								texture = "[GUICountyHolding.GetHolding.GetType.GetTabIcon]"

								blockoverride "button_frames"
								{
									gfxtype = togglepushbuttongfx
									effectname = "NoHighlight"
									upframe = 4
									uphoverframe = 5
									uppressedframe = 6
									downframe = 5
								}
							}

							icon = {
								name = "realm_capital_icon"
								visible = "[GUICountyHolding.GetHolding.GetProvince.GetTitle.IsCountyCapital]"
								parentanchor = bottom|right
								size = { 32 32 }
								position = { 4 0 }
								framesize = { 63 63 }
								texture = "gfx/interface/icons/icon_capital.dds"
								frame = 1
							}
						}
					}
				}

				expand = {}
			}

			####################################
			########## HOLDING INFO ############
			####################################
			margin_widget = {
				name = "holding_info"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				minimumsize = { 0 200 }
				margin = { 10 5 }
				margin_bottom = 10
				margin_right = 15
				scissor = yes

				state = {
					name = "holding_view_refresh"
					next = a
					alpha = 0.5
				}

				state = {
					name = "a"
					alpha = 1
					duration = 0.5
					using = Animation_Curve_Default
				}

				background = {
					using = Background_Area_Dark
					margin_left = 5
					margin_top = 3
				}

				background = {
					visible = "[HoldingView.HasHolding]"
					texture = "[HoldingView.GetHolding.GetIllustration]"
					alpha = 0.8

					modify_texture = {
						texture = "gfx/interface/window_county/mask_holding_illustration.dds"
						blend_mode = alphamultiply
						alpha = 0.95
					}
				}
				background = {
					visible = "[Not(HoldingView.HasHolding)]"
					texture = "[HoldingView.GetProvince.GetTerrain.GetIllustration]"
					alpha = 0.7

					modify_texture = {
						texture = "gfx/interface/window_county/mask_holding_illustration.dds"
						blend_mode = alphamultiply
						alpha = 0.95
					}
				}

				vbox = {
					name = "constructing_holding"
					visible = "[HoldingView.IsBeingConstructed]"
					parentanchor = center
					spacing = 5
					expand = {}

					progressbar_standard = {
						name = "constructing_holding_progress"
						alwaystransparent = yes
						size = { 300 30 }
						value = "[HoldingView.GetConstructionProgressForSlot('(int32)0')]"
						direction = horizontal
						tooltip = "[HoldingView.GetHoldingUnderConstructionTooltip]"

						text_single = {
							parentanchor = center
							text = "[HoldingView.GetConstructionTimeLeftForSlot('(int32)0')]"
							default_format = "#high"
							align = nobaseline
							using = Font_Size_Medium
						}
					}

					button_standard_big = {
						name = "cancel_holding_construction"
						size = { 300 30 }
						text = "CANCEL_HOLDING_CONSTRUCTION"
						visible = "[HoldingView.CanCancelConstruction]"
						onclick = "[HoldingView.CancelHoldingConstruction]"
						tooltip = "CANCEL_HOLDING_CONSTRUCTION_TOOLTIP"
					}

					expand = {}
				}

				### Backgrounds ###

				#################################################
				#### Same as county owner (no background)

				#################################################
				#### Not same as county owner

				background = {
					visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"
					texture = "gfx/interface/component_masks/mask_frame.dds"
					spriteType = Corneredstretched
					spriteborder = { 15 15 }
					using = Color_Blue
					margin = { -3 -3 }
					alpha = 0.3
				}

				#################################################
				#### Leased to Church

				background = {
					#visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"
					visible = no
					texture = "gfx/interface/component_masks/mask_frame.dds"
					spriteType = Corneredstretched
					spriteborder = { 15 15 }
					using = Color_Red
					margin = { -3 -3 }
				}

				#################################################
				#### Leased to Holy Order

				background = {
					#visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"
					visible = no
					texture = "gfx/interface/component_masks/mask_frame.dds"
					spriteType = Corneredstretched
					spriteborder = { 15 15 }
					using = Color_Green
					margin = { -3 -3 }
				}

				###

				button_standard_big = {
					name = "construct_holding"
					visible = "[And(Not(HoldingView.HasHolding), Not(HoldingView.IsBeingConstructed))]"
					parentanchor = bottom|hcenter
					position = { 0 -10 }
					size = { 300 50 }
					text = "CREATE_NEW_HOLDING_BUTTON"
					onclick = "[HoldingView.OnConstructHoldingClick]"
					tooltip = "[HoldingView.GetHoldingConstructionTooltip]"
					enabled = "[And(HoldingView.CanNewHoldingBeConstructed, Not(HoldingView.IsSelectingHoldingType))]"
				}


				### TOP LEFT
				flowcontainer = {
					ignoreinvisible = yes
					spacing = 5
					margin = { 5 5 }

					coa_title_medium = {
						datacontext = "[HoldingView.GetTitle]"
						visible = "[HoldingView.GetTitle.HasHolder]"
					}

					flowcontainer = {
						direction = vertical
						ignoreinvisible = yes
						margin_top = 5

						flowcontainer = {
							visible = "[HoldingView.GetTitle.HasHolder]"
							ignoreinvisible = yes

							text_single = {
								text = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
								tooltip = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
								default_format = "#high"
								align = nobaseline
								using = Font_Size_Big
								max_width = 150
								fontsize_min = 14
							}

							button_edit_text = {
								visible = "[HoldingView.GetProvince.GetTitle.CanPlayerCustomizeTitle]"
								parentanchor = vcenter
								size = { 25 25 }
								onclick = "[OpenTitleCustomizationWindow(HoldingView.GetProvince.GetTitle)]"
								tooltip = "CUSTOMIZE_TITLE"
							}

							spacer = {
								size = { 3 3 }
							}

							widget = {
								size = { 32 32 }
								visible = "[And(HoldingView.GetProvince.GetTitle.IsCountyCapital, Not(HoldingView.GetProvince.IsRealmCapital))]"

								icon = {
									name = "county_capital_icon"
									parentanchor = center
									size = { 40 40 }
									texture = "gfx/interface/icons/icon_capital.dds"
									framesize = { 63 63 }
									frame = 1
									tooltip = "COUNTY_CAPITAL_TOOLTIP"
								}
							}

							widget = {
								size = { 32 32 }
								visible = "[HoldingView.GetProvince.IsRealmCapital]"

								icon = {
									name = "realm_capital_icon"
									parentanchor = center
									size = { 40 40 }
									framesize = { 63 63 }
									texture = "gfx/interface/icons/icon_capital.dds"
									frame = 2
									tooltip = "REALM_CAPITAL_TOOLTIP"
								}
							}

							widget = {
								size = { 32 32 }

								button_move_capital = {
									name = "set_realm_capital_button"
									visible = "[HoldingView.PotentialSetRealmCapital]"
									position = { -3 5 }
									texture = "gfx/interface/icons/flat_icons/move_capital.dds"
									onclick = "[HoldingView.SetRealmCapital]"
									tooltip = "[HoldingView.GetSetRealmCapitalTooltip]"
									enabled = "[HoldingView.CanSetRealmCapital]"
								}

								button_move_capital = {
									name = "set_county_capital_button"
									visible = "[HoldingView.CanSetCountyCapital]"
									position = { -3 5 }
									texture = "gfx/interface/icons/flat_icons/move_capital.dds"
									onclick = "[HoldingView.SetCountyCapital]"
									tooltip = "SET_COUNTY_CAPITAL_TOOLTIP"
								}
							}
						}

						text_single = {
							visible = "[Not(HoldingView.GetTitle.HasHolder)]"
							text = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
							default_format = "#medium"
							using = Font_Size_Big
						}

						flowcontainer = {
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							ignoreinvisible = yes

							text_label_left = {
								text = "[HoldingView.GetHoldingDesc]"
							}
						}

						text_single = {
							visible = "[HoldingView.GetProvince.IsOccupied]"
							text = "[HoldingView.GetOccupiedInfo]"
							default_format = "#high"
						}
					}
				}

				### BOTTOM LEFT
				widget = {
					parentanchor = bottom|left
					size = { 280 150 }
					alwaystransparent = yes

					background = {
						visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"
						texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
						spriteType = Corneredtiled
						using = Color_Blue
						alpha = 0.6
						margin_bottom = 10
						margin_left = 5

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							alpha = 0.9
							mirror = horizontal
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_texture_01.dds"
							spriteType = Corneredtiled
							spriteborder = { 15 15 }
							blend_mode = alphamultiply
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					background = {
						visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"
						texture = "gfx/interface/component_masks/mask_frame.dds"
						spriteType = Corneredstretched
						spriteborder = { 15 15 }
						using = Color_Blue
						alpha = 0.6
						margin_bottom = 10
						margin_left = 5

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							alpha = 0.9
							mirror = horizontal
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					vbox = {
						expand = {
							visible = "[Not(And(HoldingView.HasDuchyCapitalBuildingSlot, HoldingView.HasSpecialBuildingSlot ))]"
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							margin = { 5 0 }

							button_standard = {
								name = "toggle_find_vassal"
								visible = "[And( ObjectsEqual( HoldingView.GetTitle.GetHolder, GetPlayer ), Not(HoldingView.GetTitle.IsLeasedOut) )]"
								enabled = "[HoldingView.CanGrantTitle]"
								text = "FIND_VASSAL_HEADER"
								onclick = "[HoldingView.ToggleFindVassalListWindow]"
								tooltip = "FIND_VASSAL_BUTTON_HOLDING_VIEW_TOOLTIP"
								max_width = 150
							}
							expand = {}
						}

						hbox = {
							datacontext = "[HoldingView.GetTitle.GetLesseeOrHolder]"
							visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"
							layoutpolicy_horizontal = expanding

							portrait_head_small = {
								blockoverride "opinion_box" {}
							}

							vbox = {
								name = "theocracy_property"
								datacontext = "[HoldingView.GetTitle.GetLesseeOrHolder]"
								layoutpolicy_vertical = expanding
								margin_top = 4
								margin_bottom = 7
								margin_left = 2

								expand = {}

								hbox = {
									layoutpolicy_horizontal = expanding

									hbox = {
										datacontext = "[HoldingView.GetTitle]"
										visible = "[Title.IsUnderTheocraticLease]"
										tooltip = "CHURCH_PROPERTY_TOOLTIP"
										layoutpolicy_horizontal = expanding

										icon = {
											name = "church_property"
											texture = "gfx/interface/icons/icon_holding_church.dds"
											size = { 30 30 }
										}

										expand = {}
									}

									container = {
										name = "revoke_lease_button"
										datacontext = "[HoldingView.GetTitle]"
										visible = "[Title.IsLeasedOut]"

										button_round  = {
											datacontext = "[Title.GetLessee]"
											visible = "[And( Title.GetHolder.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('revoke_leased_title_interaction', Title.Self) )]"
											enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('revoke_leased_title_interaction', Title.Self)]"
											tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('revoke_leased_title_interaction', Title.Self)]"
											oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
											clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"

											button_revoke_lease = {
												parentanchor = center
												onclick = "[Character.OpenPlayerInteractionWithTargetTitle('revoke_leased_title_interaction', Title.Self)]"
											}
										}
									}
								}

								text_single = {
									datacontext = "[HoldingView.GetTitle]"
									visible = "[Not(Title.IsLeasedOut)]"
									layoutpolicy_horizontal = expanding
									text = "HOLDING_VIEW_HOLDER"
									default_format = "#low"
								}

								text_single = {
									datacontext = "[HoldingView.GetTitle]"
									visible = "[Title.IsLeasedOut]"
									layoutpolicy_horizontal = expanding
									text = "HOLDING_VIEW_LESSEE"
									default_format = "#low"
								}

								text_multi = {
									visible = "[Character.HasRelationTo( GetPlayer )]"
									layoutpolicy_horizontal = expanding
									text = "[Character.GetRelationToString( GetPlayer )]"
									tooltip = "EXTENDED_RELATIONS_TOOLTIP"
									default_format = "#low"
									autoresize = yes
									maximumsize = { 130 72 }
								}

								text_multi = {
									layoutpolicy_horizontal = expanding
									text = "[Character.GetShortUIName]"
									format_override = { high medium }
									autoresize = yes
									maximumsize = { 130 72 }
								}
							}

							expand = {}
						}
						expand = {
							visible = "[And(HoldingView.HasDuchyCapitalBuildingSlot, HoldingView.HasSpecialBuildingSlot )]"
						}
					}
				}

				### FEUDALIZE A TRIBAL HOLDING ###
				widget = {
					allow_outside = yes
					parentanchor = center
					position = { 76 -20 }

					button_round  = {
						datacontext = "[HoldingView.GetGUIHoldingBuilding]"
						datacontext = "[HoldingView.GetTitle]"
						datacontext = "[HoldingView.GetHolder]"
						visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('feudalize_tribal_holding_interaction', Title.Self) )]"
						enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('feudalize_tribal_holding_interaction', Title.Self)]"
						tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('feudalize_tribal_holding_interaction', Title.Self)]"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
						onclick = "[Character.OpenPlayerInteractionWithTargetTitle('feudalize_tribal_holding_interaction', Title.Self)]"

						button_feudalize_tribe = {
							size = { 25 25 }
							parentanchor = center
							alwaystransparent = yes
						}
					}
				}

				### BOTTOM LEFT
				hbox = {
					parentanchor = top|right
					margin_top = 5
					ignoreinvisible = yes

					expand = {}

					vbox = {
						layoutpolicy_vertical = expanding
						margin = { 7 3 }

						hbox = {
							spacing = 3

							icon = { # Mild Winter
								name = "winter_level_icon_mild"
								datacontext = "[HoldingView.GetProvince]"
								visible = "[Province.HasWinterLevel( '(int32)1' )]"
								texture = "gfx/interface/icons/terrain_types/winter_mild.dds"
								size = { 35 35 }
								tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
							}

							icon = { # Normal Winter
								name = "winter_level_icon_normal"
								datacontext = "[HoldingView.GetProvince]"
								visible = "[Province.HasWinterLevel( '(int32)2' )]"
								texture = "gfx/interface/icons/terrain_types/winter_normal.dds"
								size = { 35 35 }
								tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
							}

							icon = { # Harsh Winter
								name = "winter_level_icon_harsh"
								datacontext = "[HoldingView.GetProvince]"
								visible = "[Province.HasWinterLevel( '(int32)3' )]"
								texture = "gfx/interface/icons/terrain_types/winter_harsh.dds"
								size = { 35 35 }
								tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
							}

							icon = {
								name = "terrain"
								datacontext = "[HoldingView.GetProvince.GetTerrain]"
								texture = "[Terrain.GetIcon]"
								size = { 35 35 }
								tooltip = "HOLDING_TERRAIN_TOOLTIP"
							}
						}

						hbox = {
							spacing = 3
							button_round = {
								name = "stationed_maa_button"
								size = { 35 35 }

								datacontext = "[HoldingView.GetProvince.GetMaaOriginHere]"

								visible = "[And( ObjectsEqual( HoldingView.GetTitle.GetHolder, GetPlayer ), Regiment.IsValid)]"

								tooltip = "VIEW_MAA_ORIGIN_TT"

								onclick = "[OpenGameView( 'military' )]"
								onclick = "[OpenGameViewData( 'men_at_arms', Regiment.GetID )]"

								button_icon_highlight = {
									texture = "gfx/interface/icons/flat_icons/army_details.dds"
									parentanchor = center
									alwaystransparent = yes
									size = { 35 35 }
								}
							}

							icon = {
								datacontext = "[HoldingView.GetProvince.GetMaaOriginHere]"
								visible = "[Regiment.IsValid]"
								#visible = "[And( Not( ObjectsEqual( HoldingView.GetTitle.GetHolder, GetPlayer ) ), Regiment.IsValid)]"
								texture = "[Regiment.GetMAAType.GetIcon]"
								alwaystransparent = yes
								size = { 35 35 }
								tooltip = "SHOW_MAA_ORIGIN_TT"
							}

						}

						dynamicgridbox = {
							name = "holding_modifiers_grid"
							datamodel = "[HoldingView.GetHoldingModifiers]"
							flipdirection = yes

							item = {
								icon = {
									size = { 30 30 }
									alwaystransparent = no
									texture = "[ModifierItem.GetIcon]"
									using = tooltip_ne
									tooltip = "[ModifierItem.GetTooltip]"
								}
							}
						}

						expand = {}
					}

					vbox = {
						layoutpolicy_vertical = expanding
						margin_left = 5
						spacing = 3
						min_width = 150

						background = {
							visible = "[HoldingView.HasHolding]"
							using = Background_Area_Dark
							alpha = 0.7
							margin_left = 5
							margin_bottom = -20
						}

						### Tax Income
						hbox = {
							name = "tutorial_highlight_holding_view_taxes_box"
							visible = "[HoldingView.HasHolding]"
							layoutpolicy_horizontal = expanding
							margin = { 2 0 }
							spacing = 3
							tooltip = "[Holding.GetTaxTooltip]"

							background = {
								visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
								using = Status_Bad
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "HOLDING_TAX"
								default_format = "#high"
							}

							text_single = {
								text = "HOLDING_TAX_VALUE"
								default_format = "#V"
							}
						}

						### Raid loot
						hbox = {
							name = "tutorial_highlight_holding_view_loot_box"
							visible = "[HoldingView.HasHolding]"
							layoutpolicy_horizontal = expanding
							margin = { 2 0 }
							spacing = 3
							tooltip = "[Holding.GetProvince.GetRaidLootTooltip]"

							background = {
								visible = "[Holding.GetProvince.IsRecentlyLooted]"
								using = Status_Bad
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "HOLDING_LOOT"
								default_format = "#high"
							}

							text_single = {
								text = "HOLDING_LOOT_VALUE"
							}
						}

						### Levies
						vbox = {
							visible = "[HoldingView.HasHolding]"
							layoutpolicy_horizontal = expanding
							spacing = 2

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3
								margin = { 2 0 }

								tooltip = "[Holding.GetLeviesTooltip]"

								background = {
									visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
									using = Status_Bad
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "LEVIES"
									default_format = "#high"
								}

								text_single = {
									text = "HOLDING_LEVY_SIZE"
									default_format = "#high"
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								progressbar_standard_transparent = {
									layoutpolicy_horizontal = expanding
									size = { 0 10 }
									value = "[Holding.GetUnraisedLevyRatioPercent]"
									direction = horizontal
								}
							}
						}


						### Supply Level
						hbox = {
							tooltip = "[HoldingView.GetSupplyLimitTooltip]"
							layoutpolicy_horizontal = expanding
							margin = { 2 0 }
							spacing = 3

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "SUPPLY_LIMIT"
								default_format = "#high"
							}

							text_single = {
								raw_text = " [HoldingView.GetSupplyLimit|V]"
								default_format = "#high"
							}
						}

						expand = {}
					}
				}

				### BOTTOM RIGHT
				flowcontainer = {
					parentanchor = bottom|right
					spacing = 5
					direction = vertical
					visible = "[HoldingView.GetTitle.HasHolder]"

					button_standard = {
						datacontext = "[HoldingView.GetGUIHoldingBuilding]"
						parentanchor = right
						size = { 145 75 }
						allow_outside = yes
						onclick = "[GUIBuildingItem.OnClick]"
						down = "[GUIBuildingItem.IsHighlighted]"
						enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"
						tooltip = "[GUIBuildingItem.GetTooltip]"

						vbox = {
							margin = { 4 1 }

							### Fort Info
							hbox = {
								visible = "[HoldingView.GetProvince.HasFort]"
								layoutpolicy_horizontal = expanding
								spacing = 10
								margin_left = 2
								margin_right = 2
								margin_top = 2

								vbox = {
									layoutpolicy_horizontal = expanding
									tooltip = "[HoldingView.GetGarrisonTooltip]"
									spacing = -4

									hbox = {
										spacing = 2

										icon = {
											name = "icon_garrison"
											texture = "gfx/interface/icons/icon_garrison.dds"
											size = { 30 30 }
										}

										text_single = {
											text = "[HoldingView.GetCurrentGarrisonSize]"
											default_format = "#high"
											align = nobaseline
										}
									}

									hbox = {
										layoutpolicy_horizontal = expanding

										progressbar_standard_transparent = {
											layoutpolicy_horizontal = expanding

											size = { 0 10 }
											value = "[HoldingView.GetGarrisonRatio]"
											direction = horizontal
										}
									}
								}

								hbox = {
									spacing = 3
									tooltip = "[Province.GetFortLevelTooltip]"

									icon = {
										name = "icon_fort"
										texture = "gfx/interface/window_siege/fort_icon.dds"
										size = { 30 25 }
									}

									text_single = {
										text = "[HoldingView.GetProvince.GetFortLevel]"
										default_format = "#high"
										align = nobaseline
									}
								}
							}

							hbox = {
								spacing = 2
								margin_bottom = 2

								text_single = {
									text = "[HoldingView.GetHolding.GetPrimaryBuildingType.GetTypeName]"
									align = nobaseline
								}

								text_single = {
									visible = "[GUIBuildingItem.HasLevel]"
									text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]"
									size = { 15 20 }
									margin = { 5 0 }
									margin_bottom = 3
									fontsize = 15
									default_format = "#low;bold"
									align = center;nobaseline

									background = {
										using = Background_Area_Dark
									}

									background = {
										using = Background_Area_Dark
									}

									background = {
										using = Background_Area_Dark
									}
								}

								warning_icon = {
									name = "wrong_type"
									datacontext = "[HoldingView.GetHolder]"
									visible = "[And(Not(HoldingView.GetHolding.IsEmpty),Not(HoldingView.GetHolding.IsValidForLesseeOrHolder))]"
									size = { 20 20 }
									tooltip = HOLDING_VIEW_WRONG_HOLDING_TYPE
								}

								warning_icon = {
									name = "reduced_by_fixable_situation"
									visible = "[GUIBuildingItem.IsBuildingDisabled]"
									size = { 20 20 }
								}
							}

							progressbar_standard = {
								name = "holding_upgrade_progressbar"
								layoutpolicy_horizontal = expanding
								visible = "[GUIBuildingItem.IsConstructing]"
								size = { 0 10 }
								alwaystransparent = yes
								value = "[GUIBuildingItem.GetConstructingProgress]"
								tooltip = "[GUIBuildingItem.GetTooltip]"
							}
						}
					}

					flowcontainer = {
						name = "buildings_grid_special"
						parentanchor = right
						ignoreinvisible = yes
						margin_right = -3

						# Upgrade buildings
						flowcontainer = {
							name = "buildings_grid"
							datamodel = "[HoldingView.GetBuildings]"
							ignoreinvisible = yes
							spacing = 3
							margin_right = 3
							righttoleft = yes

							item = {
								widget_building_item = {}
							}
						}

						flowcontainer = {
							visible = "[Or(HoldingView.HasDuchyCapitalBuildingSlot, HoldingView.HasSpecialBuildingSlot )]"
							spacing = 3
							ignoreinvisible = yes

							widget_building_item = {
								name = "duchy_capital_building"
								datacontext = "[HoldingView.GetGUIDuchyCapitalBuilding]"
								visible = "[HoldingView.HasDuchyCapitalBuildingSlot]"

								button_standard = {
									size = { 100% 100% }
									texture = "gfx/interface/buttons/button_duchy_capital.dds"
									alwaystransparent = yes
									spriteborder = { 20 20 }
								}
							}

							widget_building_item = {
								name = "special_building"
								datacontext = "[HoldingView.GetGUISpecialBuilding]"
								visible = "[HoldingView.HasSpecialBuildingSlot]"

								button_standard = {
									size = { 100% 100% }
									texture = "gfx/interface/buttons/button_special_building.dds"
									alwaystransparent = yes
									spriteborder = { 20 20 }
								}
							}

							widget = {
								# This is needed to offset the building slots correctly when special building slots exist.
								name = "Conditional_margin_widget"
								size = { 0 0 }
								visible = "[HoldingView.HasSpecialBuildingSlot]"
							}
						}
					}
				}

			}
		}
	}
}