
### BATTLE SUMMARY WINDOW
window = {
	name = "battle_summary"
	parentanchor = top
	position = { 0 0 }
	layer = top

	using = Window_Background_No_Edge
	blockoverride "frame_bottom" { }



	state = {
		name = _show
		using = Animation_FadeIn_Quick

		# position = { 0 80 }
		on_start = "[GetVariableSystem.Set( 'regiment_tab', 'total' )]"
		on_start = "[GetVariableSystem.Set( 'knight_tab', 'stats' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		on_finish = "[GetVariableSystem.Clear('battle_details')]"

		# position_y = -50
	}

	state = {
		name = dismiss
		using = Animation_FadeOut_Quick

		# position_y = 50
		on_finish = "[BattleSummaryWindow.AfterDismiss]"
		on_finish = "[GetVariableSystem.Clear('battle_details')]"
	}

	vbox = {
		set_parent_size_to_minimum = yes
		margin_left = 25

		widget = {
			size = { 500 0 }
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(GetVariableSystem.Exists('ocr'))]"

			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Not(GetVariableSystem.Exists('battle_details'))]"

				flowcontainer = {
				    ignoreinvisible = yes
					layoutpolicy_horizontal = expanding
					spacing = 3

					text_single = {
						name = "outcome"
						text = "[BattleSummaryWindow.GetWonLostLabel]"
					}

					text_single = {
						raw_text = "against [BattleSummaryWindow.GetRightSideMainParticipant.GetPrimaryTitle.GetNameNoTierNoTooltip]"
					}

					text_single = {
						raw_text = "in"
					}

					text_single = {
						name = "name"
						text = "BATTLE_SUMMARY_BATTLE_TITLE"
					}

					text_single = {
						raw_text = "on"
					}

					text_single = {
						name = "date"
						raw_text = "[BattleSummaryWindow.GetEndDate]."
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 3

					text_single = {
						raw_text = "Results:"
					}

					hbox = {
						name = "gold"
						visible = "[BattleSummaryWindow.GetCombatResultData.PlayerGotGold]"

						text_single = {
							name = "value"
							text = "[BattleSummaryWindow.GetCombatResultData.GetPlayerGoldGain|0]"
							default_format = "#high"
						}

						space = { }

						text_single = {
							text = "[gold|E]"
						}

						dot = { }
					}

					hbox = {
						name = "prestige"
						visible = "[BattleSummaryWindow.GetCombatResultData.PlayerGotPrestige]"

						text_single = {
							name = "value"
							text = "[BattleSummaryWindow.GetCombatResultData.GetPlayerPrestigeGain|0]"
							default_format = "#high"
						}

						space = { }

						text_single = {
							visible = "[BattleSummaryWindow.GetCombatResultData.PlayerIsWinnerWarLeader]"
							text = "[prestige_experience|E]"
						}

						text_single = {
							visible = "[Not( BattleSummaryWindow.GetCombatResultData.PlayerIsWinnerWarLeader )]"
							text = "[prestige|E]"
						}

						dot = { }
					}

					hbox = {
						name = "piety"
						visible = "[BattleSummaryWindow.GetCombatResultData.PlayerGotPiety]"

						text_single = {
							name = "value"
							text = "[BattleSummaryWindow.GetCombatResultData.GetPlayerPietyGain|0]"
							default_format = "#high"
						}

						space = { }

						text_single = {
							visible = "[BattleSummaryWindow.GetCombatResultData.PlayerIsWinnerWarLeader]"
							text = "[piety_experience|E]"
						}

						text_single = {
							visible = "[Not( BattleSummaryWindow.GetCombatResultData.PlayerIsWinnerWarLeader )]"
							text = "[piety|E]"
						}

						dot = { }
					}

					hbox = {
						name = "warscore"

						text_single = {
							name = "value"
							text = "[BattleSummaryWindow.GetWarScore|%0+=]"
						}

						space = { }

						text_single = {
							text = "[war_score|E]"
						}

						dot = { }
					}

					hbox = {
						name = "contribution"
						visible = "[BattleSummaryWindow.GetCombatResultData.GotWarContribution( GetPlayer )]"
						tooltip = "END_OF_COMBAT_CONTRIBUTION_TOOLTIP"

						text_single = {
							name = "value"
							text = "[BattleSummaryWindow.GetCombatResultData.GetWarContribution( GetPlayer )|=]"
							default_format = "#high"
						}

						space = { }

						text_single = {
							text = "[contribution|E]"
						}

						dot = { }
					}

					expand = { }
				}

				hbox = {
				    layoutpolicy_horizontal = expanding

					text_single = {
						raw_text = "You lost [Subtract_float('(float)100', BattleSummaryWindow.GetLeftSideResult.GetLossPercent)|0]% of troops and"
						tooltip = "[BattleSummaryWindow.GetLeftTotalTooltip]"
					}

					space = { }

					text_single = {
						raw_text = " they lost [Subtract_float('(float)100', BattleSummaryWindow.GetRightSideResult.GetLossPercent)|0]%."
						tooltip = "[BattleSummaryWindow.GetRightTotalTooltip]"
					}

				    expand = { }
				}

				hbox = {
				    layoutpolicy_horizontal = expanding

				    text_single = {
				    	raw_text = "You started with"
				    }

					space = { }

					text_single = {
						text = "[BattleSummaryWindow.GetLeftSideResult.GetInitialNumberOfSoldiers|0]"
					}

					text_single = {
						raw_text = " and lost [BattleSummaryWindow.GetLeftSideResult.GetNumberOfLostSoldiers|0]."
					}

					text_single = {
						raw_text = " Survived: [BattleSummaryWindow.GetLeftSideResult.GetNumberOfSurvivingSoldiers|0]."
					}

				    expand = { }
				}

				hbox = {
				    layoutpolicy_horizontal = expanding

				    text_single = {
				    	raw_text = "They started with"
				    }

					space = { }

					text_single = {
						text = "[BattleSummaryWindow.GetRightSideResult.GetInitialNumberOfSoldiers|0]"
					}

					text_single = {
						raw_text = " and lost [BattleSummaryWindow.GetRightSideResult.GetNumberOfLostSoldiers|0]."
					}

					text_single = {
						raw_text = " Survived: [BattleSummaryWindow.GetRightSideResult.GetNumberOfSurvivingSoldiers|0]."
					}

				    expand = { }
				}

				widget = {
					size = { 0 5 }
				}

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical

					layoutpolicy_horizontal = expanding

					char_name_extra = {
						datacontext = "[BattleSummaryWindow.GetLeftSideResult.GetCommander]"
						blockoverride "pre" {
							text_single = {
								raw_text = "Your commander: "
							}
						}
						blockoverride "extra" {
							text_single = {
								raw_text = " [Character.GetCommanderAdvantage] advantage."
							}
						}
					}

					text_single = {
						raw_text = "You had no commander."
						datacontext = "[BattleSummaryWindow.GetLeftSideResult.GetCommander]"
						visible = "[Not(Character.IsValid)]"
					}

					flowcontainer = {
						datacontext = "[BattleSummaryWindow.GetLeftSideResult.GetCommander]"
						visible = "[BattleSummaryWindow.IsKnightWounded( Character.Self )]"

						text_single = {
							raw_text = "[Character.GetSheHe|U]"
						}

						space = { }

						text_single = {
							text = "BATTLE_SUMMARY_KNIGHTS_WOUNDED_TT"
						}

						dot = { }
					}

					char_name_extra = {
						visible = "[Character.IsValid]"
						datacontext = "[BattleSummaryWindow.GetRightSideResult.GetCommander]"
						blockoverride "pre" {
							text_single = {
								raw_text = "Their commander: "
							}
						}
						blockoverride "extra" {
							text_single = {
								raw_text = " [Character.GetCommanderAdvantage] advantage."
							}
						}
					}

					text_single = {
						raw_text = "They had no commander."
						datacontext = "[BattleSummaryWindow.GetRightSideResult.GetCommander]"
						visible = "[Not(Character.IsValid)]"
					}

					flowcontainer = {
						datacontext = "[BattleSummaryWindow.GetRightSideResult.GetCommander]"
						visible = "[BattleSummaryWindow.IsKnightWounded( Character.Self )]"

						text_single = {
							raw_text = "[Character.GetSheHe|U]"
						}

						space = { }

						text_single = {
							text = "BATTLE_SUMMARY_KNIGHTS_WOUNDED_TT"
						}

						dot = { }
					}
				}
			}

			### DETAILS
			vbox = {
				visible = "[GetVariableSystem.Exists('battle_details')]"
				layoutpolicy_horizontal = expanding

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 3

					button_text = {
					    blockoverride "text" {
							text = "BATTLE_SUMMARY_SOLDIERS"
							align = left
					    }
						blockoverride "extra" {
							text_single = {
								raw_text = ", tab 1"
							}
							text_single = {
								raw_text = ", Selected"
								visible = "[BattleSummaryWindow.IsSoldiersShown]"
							}
							dot = { }
						}
						onclick = "[BattleSummaryWindow.OnShowSoldiers]"
						onclick = "[BattleSummaryWindow.RestoreSort]"
						enabled = "[Not(BattleSummaryWindow.IsSoldiersShown)]"
						shortcut = speed_1
					}

					button_text = {
					    blockoverride "text" {
							text = "BATTLE_SUMMARY_KNIGHTS"
							align = left
					    }
						blockoverride "extra" {
							text_single = {
								raw_text = ", tab 2"
							}
							text_single = {
								raw_text = ", Selected"
								visible = "[BattleSummaryWindow.IsKnightsShown]"
							}
							dot = { }
						}
						onclick = "[BattleSummaryWindow.OnShowKnights]"
						onclick = "[BattleSummaryWindow.RestoreSort]"
						shortcut = speed_2
						enabled = "[Not(BattleSummaryWindow.IsKnightsShown)]"
					}

					expand = { }
				}

				vbox = {
					visible = "[BattleSummaryWindow.IsSoldiersShown]"
					layoutpolicy_horizontal = expanding


					hbox = {
						layoutpolicy_horizontal = expanding

						dropdown_menu_standard =
						{
							name = "sort_soldiers"

							blockoverride "dropdown_properties"
							{
								datamodel = "[BattleSummaryWindow.GetSoldiersSortOptions]"

								onselectionchanged = "[BattleSummaryWindow.SortSoldiers]"
								selectedindex = "[BattleSummaryWindow.GetSoldiersSortIndex]"
							}

							blockoverride "dropdown_active_item_properties"
							{
								raw_text = "Sorted by [CString.GetString]."
							}

							blockoverride "dropdown_item_properties"
							{
								text = "[CString.GetString]"
							}
						}

						expand = { }

					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "In [Select_CString(BattleSummaryWindow.IsSortDescending, 'descending', 'ascending')] order."
						}
						onclick = "[BattleSummaryWindow.ToggleSortOrder]"
						onclick = "[BattleSummaryWindow.RestoreSort]"
					}

					hbox = {
					    layoutpolicy_horizontal = expanding
						margin_left = 5

						text_single = {
							raw_text = "Filters:"
						}

						button_text = {
						    blockoverride "text" {
								text = "BATTLE_SUMMARY_TOTAL"
								align = left
						    }
							blockoverride "extra" {
								text_single = {
									raw_text = ", Selected"
									visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'total' )]"
								}
								dot = { }
							}
							# enabled = "[Not(GetVariableSystem.HasValue( 'regiment_tab', 'total' ))]"
							onclick = "[GetVariableSystem.Set( 'regiment_tab', 'total' )]"
							onclick = "[BattleSummaryWindow.SetDisplayedPhase( '(int32)3' )]"
							onclick = "[BattleSummaryWindow.RestoreSort]"
							onclick = "[PdxGuiTriggerAllAnimations('battle_summary_kl_refresh')]"
						}

						button_text = {
						    blockoverride "text" {
								text = "BATTLE_SUMMARY_MAIN_PHASE"
								align = left
						    }
							blockoverride "extra" {
								text_single = {
									raw_text = ", Selected"
									visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'main' )]"
								}
								dot = { }
							}
							# enabled = "[Not(GetVariableSystem.HasValue( 'regiment_tab', 'total' ))]"
							onclick = "[GetVariableSystem.Set( 'regiment_tab', 'main' )]"
							onclick = "[BattleSummaryWindow.SetDisplayedPhase( '(int32)1' )]"
							onclick = "[BattleSummaryWindow.RestoreSort]"
							onclick = "[PdxGuiTriggerAllAnimations('battle_summary_kl_refresh')]"
						}

						button_text = {
						    blockoverride "text" {
								text = "BATTLE_SUMMARY_PURSUIT"
								align = left
						    }
							blockoverride "extra" {
								text_single = {
									raw_text = ", Selected"
									visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'pursuit' )]"
								}
								dot = { }
							}
							# enabled = "[Not(GetVariableSystem.HasValue( 'regiment_tab', 'total' ))]"
							onclick = "[GetVariableSystem.Set( 'regiment_tab', 'pursuit' )]"
							onclick = "[BattleSummaryWindow.SetDisplayedPhase( '(int32)2' )]"
							onclick = "[BattleSummaryWindow.RestoreSort]"
							onclick = "[PdxGuiTriggerAllAnimations('battle_summary_kl_refresh')]"
						}

					    expand = { }
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						scrollbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							autoresizescrollarea = yes
							maximumsize = { -1 900 }

							blockoverride "scrollbox_content" {
								vbox = {
									layoutpolicy_horizontal = expanding
									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "Your solders:"
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										datamodel = "[BattleSummaryWindow.GetLeftSoldiersStats]"

										item = {
											widget_regiment_ocr = {
												layoutpolicy_horizontal = expanding
											}
										}
									}

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "Enemy soldiers:"
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										datamodel = "[BattleSummaryWindow.GetRightSoldiersStats]"

										item = {
											widget_regiment_ocr = {
												layoutpolicy_horizontal = expanding
											}
										}
									}
								}
							}
						}
					}
				}

				vbox = {
					visible = "[BattleSummaryWindow.IsKnightsShown]"
					layoutpolicy_horizontal = expanding


					hbox = {
						layoutpolicy_horizontal = expanding

						button_text = {
							blockoverride "text" {
								raw_text = "Show [GetDataModelSize(BattleSummaryWindow.GetBattleEvents)] events, hotkey 3."
							}

							onclick = "[GetVariableSystem.Set( 'knight_tab', 'events' )]"
							onclick = "[BattleSummaryWindow.RestoreSort]"
							onclick = "[PdxGuiTriggerAllAnimations('battle_summary_knights_refresh')]"

							visible = "[GetVariableSystem.HasValue( 'knight_tab', 'stats' )]"
							shortcut = speed_3
						}

						button_text = {
							blockoverride "text" {
								raw_text = "Show stats, hotkey 3."
							}
							onclick = "[GetVariableSystem.Set( 'knight_tab', 'stats' )]"
							onclick = "[BattleSummaryWindow.RestoreSort]"
							onclick = "[PdxGuiTriggerAllAnimations('battle_summary_knights_refresh')]"

							visible = "[GetVariableSystem.HasValue( 'knight_tab', 'events' )]"
							shortcut = speed_3
						}

						expand = { }
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(GetVariableSystem.HasValue( 'knight_tab', 'events' ))]"

						dropdown_menu_standard =
						{
							layoutpolicy_horizontal = expanding
							name = "sort_knights"

							blockoverride "dropdown_properties"
							{
								datamodel = "[BattleSummaryWindow.GetKnightsSortOptions]"
								onselectionchanged = "[BattleSummaryWindow.SortKnights]"
								selectedindex = "[BattleSummaryWindow.GetKnightsSortIndex]"
							}

							blockoverride "dropdown_active_item_properties"
							{
								raw_text = "Sorted by [CString.GetString]."
							}

							blockoverride "dropdown_item_properties"
							{
								raw_text = "Sort by [CString.GetString]."
							}
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "In [Select_CString(BattleSummaryWindow.IsSortDescending, 'descending', 'ascending')] order."
							}
							onclick = "[BattleSummaryWindow.ToggleSortOrder]"
							onclick = "[BattleSummaryWindow.RestoreSort]"
						}
					}


					vbox = {
						visible = "[GetVariableSystem.HasValue( 'knight_tab', 'stats' )]"
						layoutpolicy_horizontal = expanding

						scrollbox = {
							layoutpolicy_horizontal = expanding
							autoresizescrollarea = yes
							maximumsize = { -1 900 }

							blockoverride "scrollbox_content" {
								vbox = {
									layoutpolicy_horizontal = expanding

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "Your [GetDataModelSize( BattleSummaryWindow.GetLeftKnightsStats )] [BattleSummaryWindow.GetLeftSideMainParticipant.Custom('KnightCulturePlural')]."
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										datamodel = "[BattleSummaryWindow.GetLeftKnightsStats]"

										item = {
											widget_knight_ocr = {
												layoutpolicy_horizontal = expanding
											}
										}
									}

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "[GetDataModelSize( BattleSummaryWindow.GetRightKnightsStats )] enemy [BattleSummaryWindow.GetRightSideMainParticipant.Custom('KnightCulturePlural')]."
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										datamodel = "[BattleSummaryWindow.GetRightKnightsStats]"

										item = {
											widget_knight_ocr = {
												layoutpolicy_horizontal = expanding
											}
										}
									}
								}
							}

							blockoverride "scrollbox_empty"
							{
								text = "BATTLE_SUMMARY_NO_KNIGHTS"
								visible = "[And( IsDataModelEmpty( BattleSummaryWindow.GetLeftKnightsStats ), IsDataModelEmpty( BattleSummaryWindow.GetRightKnightsStats ) )]"
							}
						}
					}


					vbox = {
						visible = "[GetVariableSystem.HasValue( 'knight_tab', 'events' )]"
						layoutpolicy_horizontal = expanding

						scrollbox = {
							name = "events_list"
							layoutpolicy_horizontal = expanding
							autoresizescrollarea = yes
							maximumsize = { -1 900 }

							blockoverride "scrollbox_replace_vbox"
							{
								vbox = {
									name = "battle_events"
									datamodel = "[BattleSummaryWindow.GetBattleEvents]"
									margin = { 5 5 }
									layoutpolicy_horizontal = expanding

									item = {
										vbox = {
											layoutpolicy_horizontal = expanding
											text_multi = {
												name = "message"
												layoutpolicy_horizontal = expanding
												text = "[BattleEvent.GetTitle( BattleSummaryWindow.IsPlayerAttacker )] [BattleSummaryWindow.GetEventSequenceSizeText( BattleEvent.GetRightCharacter( BattleSummaryWindow.IsPlayerAttacker ) )]"
												align = left

												tooltip_enabled =  "[BattleSummaryWindow.HasEventSequence( BattleEvent.GetRightCharacter( BattleSummaryWindow.IsPlayerAttacker ) )]"

												tooltipwidget = {
													container = {
														using = GeneralTooltipSetup
														alwaystransparent = no

														widget = {
															name = "background"
															using = DefaultTooltipBackground
															size = { 100% 100% }
															alwaystransparent = no
														}

														flowcontainer = {
															direction = vertical
															layoutpolicy_horizontal = expanding
															margin = { 15 15 }

															text_single = {
																text = "BATTLE_SUMMARY_KNIGHT_EVENT_EXPAND_HEADER_TT"
																default_format = "#tooltip_heading"
																layoutpolicy_horizontal = expanding
															}

															datamodel = "[BattleSummaryWindow.GetEventSequence( BattleEvent.GetRightCharacter( BattleSummaryWindow.IsPlayerAttacker ) )]"

															item = {
																text_single = {
																	layoutpolicy_horizontal = expanding
																	datacontext = "[BattleEvent.GetLeftCharacter( BattleSummaryWindow.IsPlayerAttacker )]"
																	text = "BATTLE_SUMMARY_KNIGHT_EVENT_EXPAND_ENTRY_TT"
																}
															}
														}
													}
												}
											}
										}
									}

									text_single = {
										default_format = "#low;italic"

										text = "BATTLE_SUMMARY_NO_EVENTS"
										visible = "[IsDataModelEmpty(BattleSummaryWindow.GetBattleEvents)]"
									}
								}
							}
						}
					}
				}
			}


			vbox = {
				layoutpolicy_horizontal = expanding
				name = "bottom_buttons"

				button_text = {
					layoutpolicy_horizontal = expanding
				    blockoverride "text" {
						raw_text = "[Select_CString(GetVariableSystem.Exists('battle_details'), 'Hide', 'See')] details, hotkey E."
				    }
					# visible = "[Not(Or(BattleSummaryWindow.IsSoldiersShown, BattleSummaryWindow.IsKnightsShown))]"
					name = "show_more"
					onclick = "[GetVariableSystem.Toggle('battle_details')]"
					onclick = "[BattleSummaryWindow.OnShowSoldiers]"
					onclick = "[BattleSummaryWindow.RestoreSort]"
					shortcut = map_mode_1
				}

				button_primary_text = {
					layoutpolicy_horizontal = expanding
					name = "dismiss"
					blockoverride "text" {
						text = "DISMISS"
					}
					onclick = "[BattleSummaryWindow.Dismiss]"
				}

				widget = {
					size = { 0 5 }
				}
				button_text = {
					layoutpolicy_horizontal = expanding
				    blockoverride "text" {
				        raw_text = "Minimize, Escape."
					}
					onclick = "[BattleSummaryWindow.Close]"
					shortcut = close_window
				}

				button_text = {
					layoutpolicy_horizontal = expanding
				    blockoverride "text" {
				        raw_text = "Pan to location, Shift Q."
				    }
					onclick = "[BattleSummaryWindow.GoToProvince]"
					shortcut = map_mode_9
				}
			}
		}

		old_battle_results = {
			visible = "[GetVariableSystem.Exists('ocr')]"
		}
	}

	old_battle_results_buttons = {
		visible = "[GetVariableSystem.Exists('ocr')]"
	}
}

types BattleSummary
{
	type widget_knight_ocr = vbox {
		datacontext = "[RegimentCombatStats.GetKnight]"

		hbox = {
		    layoutpolicy_horizontal = expanding

			spacing = 3

			text_single = {
				raw_text = "[RegimentCombatStats.GetTotalKills|0] Kills,"
			}

			text_single = {
				raw_text = "[Character.GetProwess|0] prowess,"
				tooltip = "[Character.GetProwessBreakdown]"
			}

			char_name_extra = {
				# blockoverride "extra" {
				# 	text_single = {
				# 		raw_text = "[Character.GetAge]."
				# 	}
				# }
			}

		    expand = { }
		}

		hbox = {
		    layoutpolicy_horizontal = expanding
			visible = "[BattleSummaryWindow.IsKnightWounded( Character.Self )]"

		    text_single = {
		    	raw_text = "[Character.GetSheHe|U]"
		    }

			space = { }

			text_single = {
				raw_text = "BATTLE_SUMMARY_KNIGHTS_WOUNDED_TT"
			}

			dot = { }
		    expand = { }
		}
	}

	type container_bs_maa_icon = hbox {
		icon = {
			name = "maa_icon"
			texture = "[MenAtArmsType.GetIcon]"
			visible = "[RegimentCombatStats.IsMaa]"
			size = { 30 30 }

			glow = {
				glow_radius = 3
				using = Glow_Standard

				block "glow"
				{
					using = Color_Green
				}
			}

			tooltipwidget = {
				widget_maa_summary = { }
			}

			using = tooltip_nw
		}
	}

	type widget_regiment_icon = widget {
		block "size" {
			size = { 80 80 }
		}

		scissor = yes

		icon = {
			widgetanchor = center
			parentanchor = center
			size = { 80 80 }

			block "icon_texture" {
				texture = "gfx/interface/illustrations/men_at_arms_small/levies.dds"
				using = Mask_Rough_Edges
			}
		}
	}

	type widget_regiment_ocr = vbox {
		vbox = {
			layoutpolicy_horizontal = expanding

			widget_regiment_icon = {
				visible = no#"[RegimentCombatStats.IsKnight]"


				tooltipwidget = {
					widget_maa_summary = {
						datacontext = "[RegimentCombatStats.GetMenAtArmsType]"

						blockoverride "counter_datamodel" {
							datamodel = "[BattleSummaryWindow.GetLeftCounter( MenAtArmsType.Self )]"
						}

						blockoverride "countered_by_datamodel" {
							datamodel = "[BattleSummaryWindow.GetLeftCounteredBy( MenAtArmsType.Self )]"
						}
					}
				}

				tooltipwidget = {
					widget_knight_summary = {

						blockoverride "knights_header" {
							text = "BATTLE_SUMMARY_LEFT_KNIGHTS_HEADER"
						}

						blockoverride "knights_datamodel" {
							datamodel = "[BattleSummaryWindow.GetLeftKnightsStats]"
						}
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3

				hbox = {
					visible = "[RegimentCombatStats.IsLevy]"
					tooltip = "ARMY_VIEW_LEVIES_TOOLTIP"
					spacing = 3

					text_single = {
						raw_text = "[RegimentCombatStats.GetInitialCount|0]"
					}

					text_single = {
						text = "ARMY_VIEW_LEVIES"
					}
				}

				text_single = {
					visible = "[Not( Or( RegimentCombatStats.IsKnight, RegimentCombatStats.IsLevy ) )]"
					raw_text = "[RegimentCombatStats.GetInitialCount|0] [RegimentCombatStats.GetMenAtArmsType.GetNameNoTooltip]"

					tooltipwidget = {
						visible = "[Not( Or( RegimentCombatStats.IsKnight, RegimentCombatStats.IsLevy ) )]"
						widget_maa_summary = {
							datacontext = "[RegimentCombatStats.GetMenAtArmsType]"

							blockoverride "counter_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftCounter( MenAtArmsType.Self )]"
							}

							blockoverride "countered_by_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftCounteredBy( MenAtArmsType.Self )]"
							}
						}
					}
				}

				hbox = {
					spacing = 3
					visible = "[RegimentCombatStats.IsKnight]"
					tooltipwidget = {
						widget_knight_summary = {

							blockoverride "knights_header" {
								text = "BATTLE_SUMMARY_LEFT_KNIGHTS_HEADER"
							}

							blockoverride "knights_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftKnightsStats]"
							}
						}
					}

					text_single = {
						raw_text = "[RegimentCombatStats.GetInitialCount|0]"
					}

					text_single = {
						text = "BATTLE_SUMMARY_KNIGHTS"
					}
				}

				text_single = {
					raw_text = "killed"
				}

				hbox = {

					text_single = {
						text = "[RegimentCombatStats.GetTotalKills|0]"
						visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'total' )]"
					}

					text_single = {
						text = "[RegimentCombatStats.GetMainKills|0]"
						visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'main' )]"
					}

					text_single = {
						text = "[RegimentCombatStats.GetPursuitKills|0]"
						visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'pursuit' )]"
					}

					space = { }

					text_single = {
						raw_text = "men"
					}
				}

				text_single = {
					raw_text = "and lost"
				}

				hbox = {

					text_single = {
						text = "[RegimentCombatStats.GetTotalLosses|0]"
						visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'total' )]"
					}

					text_single = {
						text = "[RegimentCombatStats.GetMainLosses|0]"
						visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'main' )]"
					}

					text_single = {
						text = "[RegimentCombatStats.GetPursuitLosses|0]"
						visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'pursuit' )]"
					}
					dot = { }
				}

				hbox = {
					spacing = 3

					visible = "[Not(EqualTo_CFixedPoint(RegimentCombatStats.GetFinalCount, RegimentCombatStats.GetInitialCount))]"

					text_single = {
						raw_text = "Survived"
					}

					text_single = {
						raw_text = "[RegimentCombatStats.GetFinalCount|0]."
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					datacontext = "[RegimentCombatStats.GetMenAtArmsType]"


					text_single = {
						raw_text = "Had advantage."
						visible = "[EqualTo_int32( BattleSummaryWindow.GetBonusLeft( MenAtArmsType.Self ), '(int32)1' )]"
					}

					text_single = {
						raw_text = "Was disadvantaged."
						visible = "[EqualTo_int32( BattleSummaryWindow.GetBonusLeft( MenAtArmsType.Self ), '(int32)2' )]"
					}

					text_single = {
						raw_text = "Had some disadvantage."
						visible = "[EqualTo_int32( BattleSummaryWindow.GetBonusLeft( MenAtArmsType.Self ), '(int32)3' )]"
					}

					# old
					hbox = {
						visible = no
						datacontext = "[RegimentCombatStats.GetMenAtArmsType]"

						container_bs_maa_icon = {
							visible = "[EqualTo_int32( BattleSummaryWindow.GetBonusLeft( MenAtArmsType.Self ), '(int32)1' )]"
							margin_right = 5

							blockoverride "glow"
							{
								using = Color_Green
							}

							blockoverride "counter_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftCounter( MenAtArmsType.Self )]"
							}

							blockoverride "countered_by_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftCounteredBy( MenAtArmsType.Self )]"
							}
						}

						container_bs_maa_icon = {
							visible = "[EqualTo_int32( BattleSummaryWindow.GetBonusLeft( MenAtArmsType.Self ), '(int32)2' )]"
							margin_right = 5

							blockoverride "glow"
							{
								using = Color_Red
							}

							blockoverride "counter_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftCounter( MenAtArmsType.Self )]"
							}

							blockoverride "countered_by_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftCounteredBy( MenAtArmsType.Self )]"
							}
						}

						container_bs_maa_icon = {
							visible = "[EqualTo_int32( BattleSummaryWindow.GetBonusLeft( MenAtArmsType.Self ), '(int32)3' )]"
							margin_right = 5

							blockoverride "glow"
							{
								using = Color_Bright_Yellow
							}

							blockoverride "counter_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftCounter( MenAtArmsType.Self )]"
							}

							blockoverride "countered_by_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftCounteredBy( MenAtArmsType.Self )]"
							}
						}
					}

					expand = { }
				}

				expand = { }
			}
		}
	}

	type widget_regiment_left = widget {
		size = { 0 90 }

		background = {
			using = Status_Bad
			visible = "[EqualTo_CFixedPoint( RegimentCombatStats.GetFinalCount, '(CFixedPoint)0')]"
		}

		hbox = {
			margin = { 10 5 }

			widget_regiment_icon = {
				visible = "[RegimentCombatStats.IsLevy]"
				tooltip = "ARMY_VIEW_LEVIES_TOOLTIP"
			}

			widget_regiment_icon = {
				visible = "[Not( Or( RegimentCombatStats.IsKnight, RegimentCombatStats.IsLevy ) )]"

				blockoverride "icon_texture" {
					texture = "[RegimentCombatStats.GetMenAtArmsType.GetVerticalImage]"

					using = Mask_Rough_Edges
				}

				tooltipwidget = {
					widget_maa_summary = {
						datacontext = "[RegimentCombatStats.GetMenAtArmsType]"

						blockoverride "counter_datamodel" {
							datamodel = "[BattleSummaryWindow.GetLeftCounter( MenAtArmsType.Self )]"
						}

						blockoverride "countered_by_datamodel" {
							datamodel = "[BattleSummaryWindow.GetLeftCounteredBy( MenAtArmsType.Self )]"
						}
					}
				}
			}

			widget_regiment_icon = {
				visible = "[RegimentCombatStats.IsKnight]"

				blockoverride "icon_texture" {
					texture = "gfx/interface/illustrations/men_at_arms_small/knights.dds"

					using = Mask_Rough_Edges
				}

				tooltipwidget = {
					widget_knight_summary = {

						blockoverride "knights_header" {
							text = "BATTLE_SUMMARY_LEFT_KNIGHTS_HEADER"
						}

						blockoverride "knights_datamodel" {
							datamodel = "[BattleSummaryWindow.GetLeftKnightsStats]"
						}
					}
				}
			}

			vbox = {
				margin = { 10 2 }
				layoutpolicy_horizontal = expanding
				spacing = 5

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 2

					text_single = {
						visible = "[RegimentCombatStats.IsLevy]"
						text = "ARMY_VIEW_LEVIES"
						using = Font_Size_Medium
						tooltip = "ARMY_VIEW_LEVIES_TOOLTIP"
					}

					text_single = {
						visible = "[Not( Or( RegimentCombatStats.IsKnight, RegimentCombatStats.IsLevy ) )]"
						text = "[RegimentCombatStats.GetMenAtArmsType.GetNameNoTooltip]"

						tooltipwidget = {
							widget_maa_summary = {
								datacontext = "[RegimentCombatStats.GetMenAtArmsType]"

								blockoverride "counter_datamodel" {
									datamodel = "[BattleSummaryWindow.GetLeftCounter( MenAtArmsType.Self )]"
								}

								blockoverride "countered_by_datamodel" {
									datamodel = "[BattleSummaryWindow.GetLeftCounteredBy( MenAtArmsType.Self )]"
								}
							}
						}
					}

					text_single = {
						visible = "[RegimentCombatStats.IsKnight]"
						text = "BATTLE_SUMMARY_KNIGHTS"

						tooltipwidget = {
							widget_knight_summary = {

								blockoverride "knights_header" {
									text = "BATTLE_SUMMARY_LEFT_KNIGHTS_HEADER"
								}

								blockoverride "knights_datamodel" {
									datamodel = "[BattleSummaryWindow.GetLeftKnightsStats]"
								}
							}
						}
					}

					expand = { }

					hbox = {

						text_single = {
							text = "[RegimentCombatStats.GetTotalKills|0]"
							visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'total' )]"
							tooltip = "BATTLE_SUMMARY_KILLS_TOTAL_TT"
							default_format = "#positive_value"
						}

						text_single = {
							text = "[RegimentCombatStats.GetMainKills|0]"
							visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'main' )]"
							tooltip = "BATTLE_SUMMARY_KILLS_MAIN_TT"
							default_format = "#positive_value"
						}

						text_single = {
							text = "[RegimentCombatStats.GetPursuitKills|0]"
							visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'pursuit' )]"
							tooltip = "BATTLE_SUMMARY_KILLS_PURSUIT_TT"
							default_format = "#positive_value"
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					hbox = {
						datacontext = "[RegimentCombatStats.GetMenAtArmsType]"

						container_bs_maa_icon = {
							visible = "[EqualTo_int32( BattleSummaryWindow.GetBonusLeft( MenAtArmsType.Self ), '(int32)1' )]"
							margin_right = 5

							blockoverride "glow"
							{
								using = Color_Green
							}

							blockoverride "counter_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftCounter( MenAtArmsType.Self )]"
							}

							blockoverride "countered_by_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftCounteredBy( MenAtArmsType.Self )]"
							}
						}

						container_bs_maa_icon = {
							visible = "[EqualTo_int32( BattleSummaryWindow.GetBonusLeft( MenAtArmsType.Self ), '(int32)2' )]"
							margin_right = 5

							blockoverride "glow"
							{
								using = Color_Red
							}

							blockoverride "counter_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftCounter( MenAtArmsType.Self )]"
							}

							blockoverride "countered_by_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftCounteredBy( MenAtArmsType.Self )]"
							}
						}

						container_bs_maa_icon = {
							visible = "[EqualTo_int32( BattleSummaryWindow.GetBonusLeft( MenAtArmsType.Self ), '(int32)3' )]"
							margin_right = 5

							blockoverride "glow"
							{
								using = Color_Bright_Yellow
							}

							blockoverride "counter_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftCounter( MenAtArmsType.Self )]"
							}

							blockoverride "countered_by_datamodel" {
								datamodel = "[BattleSummaryWindow.GetLeftCounteredBy( MenAtArmsType.Self )]"
							}
						}
					}

					icon = {
						visible = "[RegimentCombatStats.IsKnight]"
						size = { 30 30 }
						texture = "gfx/interface/icons/icon_knight_small.dds"

						tooltipwidget = {
							widget_knight_summary = {

								blockoverride "knights_header" {
									text = "BATTLE_SUMMARY_LEFT_KNIGHTS_HEADER"
								}

								blockoverride "knights_datamodel" {
									datamodel = "[BattleSummaryWindow.GetLeftKnightsStats]"
								}
							}
						}
					}

					widget = {
						size = { 0 30 }
						visible = "[RegimentCombatStats.IsLevy]"
					}

					text_single = {
						text = "[RegimentCombatStats.GetFinalCount|0]/[RegimentCombatStats.GetInitialCount|0]"
						tooltip = "BATTLE_SUMMARY_REGIMENT_COUNT"
						default_format = "#high"
					}

					expand = { }

					hbox = {

						text_single = {
							text = "[RegimentCombatStats.GetTotalLosses|0]"
							visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'total' )]"
							tooltip = "BATTLE_SUMMARY_LOSSES_TOTAL_TT"
							default_format = "#negative_value"
						}

						text_single = {
							text = "[RegimentCombatStats.GetMainLosses|0]"
							visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'main' )]"
							tooltip = "BATTLE_SUMMARY_LOSSES_MAIN_TT"
							default_format = "#negative_value"
						}

						text_single = {
							text = "[RegimentCombatStats.GetPursuitLosses|0]"
							visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'pursuit' )]"
							tooltip = "BATTLE_SUMMARY_LOSSES_PURSUIT_TT"
							default_format = "#negative_value"
						}
					}
				}
			}
		}
	}

	type widget_regiment_right = widget {
		size = { 0 90 }

		background = {
			using = Status_Bad
			visible = "[EqualTo_CFixedPoint( RegimentCombatStats.GetFinalCount, '(CFixedPoint)0')]"
		}

		hbox = {
			margin = { 10 5 }

			vbox = {
				margin = { 10 2 }
				layoutpolicy_horizontal = expanding
				spacing = 5

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 2

					hbox = {

						text_single = {
							visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'total' )]"
							text = "[RegimentCombatStats.GetTotalKills|0]"
							tooltip = "BATTLE_SUMMARY_KILLS_TOTAL_TT"
							default_format = "#positive_value"
						}

						text_single = {
							visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'main' )]"
							text = "[RegimentCombatStats.GetMainKills|0]"
							tooltip = "BATTLE_SUMMARY_KILLS_MAIN_TT"
							default_format = "#positive_value"
						}

						text_single = {
							visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'pursuit' )]"

							text = "[RegimentCombatStats.GetPursuitKills|0]"
							tooltip = "BATTLE_SUMMARY_KILLS_PURSUIT_TT"
							default_format = "#positive_value"
						}
					}

					expand = { }

					text_single = {
						visible = "[RegimentCombatStats.IsLevy]"
						text = "ARMY_VIEW_LEVIES"
						tooltip = "ARMY_VIEW_LEVIES_TOOLTIP"
					}

					text_single = {
						visible = "[Not( Or( RegimentCombatStats.IsKnight, RegimentCombatStats.IsLevy ) )]"
						text = "[RegimentCombatStats.GetMenAtArmsType.GetNameNoTooltip]"

						tooltipwidget = {
							widget_maa_summary = {
								datacontext = "[RegimentCombatStats.GetMenAtArmsType]"

								blockoverride "counter_datamodel" {
									datamodel = "[BattleSummaryWindow.GetRightCounter( MenAtArmsType.Self )]"
								}

								blockoverride "countered_by_datamodel" {
									datamodel = "[BattleSummaryWindow.GetRightCounteredBy( MenAtArmsType.Self )]"
								}
							}
						}
					}

					text_single = {
						visible = "[RegimentCombatStats.IsKnight]"
						text = "BATTLE_SUMMARY_KNIGHTS"

						tooltipwidget = {
							widget_knight_summary = {

								blockoverride "knights_header" {
									text = "BATTLE_SUMMARY_RIGHT_KNIGHTS_HEADER"
								}

								blockoverride "knights_datamodel" {
									datamodel = "[BattleSummaryWindow.GetRightKnightsStats]"
								}
							}
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					hbox = {

						text_single = {
							text = "[RegimentCombatStats.GetTotalLosses|0]"
							visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'total' )]"
							tooltip = "BATTLE_SUMMARY_LOSSES_TOTAL_TT"
							default_format = "#negative_value"
						}

						text_single = {
							text = "[RegimentCombatStats.GetMainLosses|0]"
							visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'main' )]"
							tooltip = "BATTLE_SUMMARY_LOSSES_MAIN_TT"
							default_format = "#negative_value"
						}

						text_single = {
							text = "[RegimentCombatStats.GetPursuitLosses|0]"
							visible = "[GetVariableSystem.HasValue( 'regiment_tab', 'pursuit' )]"
							tooltip = "BATTLE_SUMMARY_LOSSES_PURSUIT_TT"
							default_format = "#negative_value"
						}
					}

					expand = { }

					text_single = {
						text = "[RegimentCombatStats.GetFinalCount|0]/[RegimentCombatStats.GetInitialCount|0]"
						tooltip = "BATTLE_SUMMARY_REGIMENT_COUNT"
						default_format = "#high"
					}

					hbox = {
						datacontext = "[RegimentCombatStats.GetMenAtArmsType]"

						container_bs_maa_icon = {
							visible = "[EqualTo_int32( BattleSummaryWindow.GetBonusRight( MenAtArmsType.Self ), '(int32)1' )]"
							margin_left = 5

							blockoverride "glow"
							{
								using = Color_Green
							}

							blockoverride "counter_datamodel" {
								datamodel = "[BattleSummaryWindow.GetRightCounter( MenAtArmsType.Self )]"
							}

							blockoverride "countered_by_datamodel" {
								datamodel = "[BattleSummaryWindow.GetRightCounteredBy( MenAtArmsType.Self )]"
							}
						}

						container_bs_maa_icon = {
							visible = "[EqualTo_int32( BattleSummaryWindow.GetBonusRight( MenAtArmsType.Self ), '(int32)2' )]"
							margin_left = 5

							blockoverride "glow"
							{
								using = Color_Red
							}

							blockoverride "counter_datamodel" {
								datamodel = "[BattleSummaryWindow.GetRightCounter( MenAtArmsType.Self )]"
							}

							blockoverride "countered_by_datamodel" {
								datamodel = "[BattleSummaryWindow.GetRightCounteredBy( MenAtArmsType.Self )]"
							}
						}

						container_bs_maa_icon = {
							visible = "[EqualTo_int32( BattleSummaryWindow.GetBonusRight( MenAtArmsType.Self ), '(int32)3' )]"
							margin_left = 5

							blockoverride "glow"
							{
								using = Color_Bright_Yellow
							}

							blockoverride "counter_datamodel" {
								datamodel = "[BattleSummaryWindow.GetRightCounter( MenAtArmsType.Self )]"
							}

							blockoverride "countered_by_datamodel" {
								datamodel = "[BattleSummaryWindow.GetRightCounteredBy( MenAtArmsType.Self )]"
							}
						}
					}

					icon = {
						size = { 30 30 }
						texture = "gfx/interface/icons/icon_knight_small.dds"
						visible = "[RegimentCombatStats.IsKnight]"

						tooltipwidget = {
							widget_knight_summary = {

								blockoverride "knights_header" {
									text = "BATTLE_SUMMARY_RIGHT_KNIGHTS_HEADER"
								}

								blockoverride "knights_datamodel" {
									datamodel = "[BattleSummaryWindow.GetRightKnightsStats]"
								}
							}
						}
					}

					widget = {
						size = { 0 30 }
						visible = "[RegimentCombatStats.IsLevy]"
					}
				}
			}

			widget_regiment_icon = {
				visible = "[RegimentCombatStats.IsLevy]"
				tooltip = "ARMY_VIEW_LEVIES_TOOLTIP"
			}

			widget_regiment_icon = {
				visible = "[Not( Or( RegimentCombatStats.IsKnight, RegimentCombatStats.IsLevy ) )]"

				blockoverride "icon_texture" {
					texture = "[RegimentCombatStats.GetMenAtArmsType.GetVerticalImage]"
					using = Mask_Rough_Edges
				}

				tooltipwidget = {
					widget_maa_summary = {
						datacontext = "[RegimentCombatStats.GetMenAtArmsType]"

						blockoverride "counter_datamodel" {
							datamodel = "[BattleSummaryWindow.GetLeftCounter( MenAtArmsType.Self )]"
						}

						blockoverride "countered_by_datamodel" {
							datamodel = "[BattleSummaryWindow.GetLeftCounteredBy( MenAtArmsType.Self )]"
						}
					}
				}
			}

			widget_regiment_icon = {
				visible = "[RegimentCombatStats.IsKnight]"

				blockoverride "icon_texture" {
					texture = "gfx/interface/illustrations/men_at_arms_small/knights.dds"
					using = Mask_Rough_Edges
				}

				tooltipwidget = {
					widget_knight_summary = {

						blockoverride "knights_header" {
							text = "BATTLE_SUMMARY_RIGHT_KNIGHTS_HEADER"
						}

						blockoverride "knights_datamodel" {
							datamodel = "[BattleSummaryWindow.GetRightKnightsStats]"
						}
					}
				}
			}
		}
	}

	type widget_knight_left = widget {
		datacontext = "[RegimentCombatStats.GetKnight]"
		size = { 0 95 }

		divider_light = {
			parentanchor = bottom
			position = { 0 3 }
			size = { 100% 3 }
		}

		hbox = {
			portrait_head_small = { }

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 2 2 }

				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					text_multi = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						text = "[Character.GetNameNoTooltip]"
					}

					text_single = {
						text = "[RegimentCombatStats.GetTotalKills|0]"
						default_format = "#high"
						align = nobaseline
						using = Font_Size_Big
						margin = { 12 0 }
						tooltip = "BATTLE_SUMMARY_KILLS_TOTAL_TT"
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 2

					icon = {
						name = "prowess_icon"
						size = { 35 35 }
						texture = "gfx/interface/icons/icon_prowess.dds"
						tooltip = "prowess"
					}

					text_single = {
						name = "prowess_value"
						text = "[Character.GetProwess|0]"
						tooltip = "prowess"
						size = { 22 0 }
					}

					icon = {
						visible = "[BattleSummaryWindow.IsKnightWounded( Character.Self )]"
						size = { 25 25 }
						texture = "gfx/interface/icons/icon_wounded.dds"
						tooltip = "BATTLE_SUMMARY_KNIGHTS_WOUNDED_TT"
					}

					expand = { }
				}
			}
		}
	}

	type widget_knight_right = widget {
		datacontext = "[RegimentCombatStats.GetKnight]"
		size = { 0 95 }

		background = {
			using = Status_Bad
			visible = "[BattleSummaryWindow.IsKnightKilled( RegimentCombatStats.GetKnight )]"
		}

		divider_light = {
			parentanchor = bottom
			position = { 0 3 }
			size = { 100% 3 }
		}

		hbox = {
			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 2 2 }

				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					text_single = {
						text = "[RegimentCombatStats.GetTotalKills|0]"
						default_format = "#high"
						align = nobaseline
						using = Font_Size_Big
						margin = { 12 0 }
						tooltip = "BATTLE_SUMMARY_KILLS_TOTAL_TT"

					}

					text_multi = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						text = "[Character.GetNameNoTooltip]"
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5

					expand = { }

					icon = {
						visible = "[BattleSummaryWindow.IsKnightWounded( Character.Self )]"
						size = { 25 25 }
						texture = "gfx/interface/icons/icon_wounded.dds"
						tooltip = "BATTLE_SUMMARY_KNIGHTS_WOUNDED_TT"
					}

					text_single = {
						name = "prowess_value"
						text = "[Character.GetProwess|0]"
						tooltip = "prowess"
						size = { 22 0 }
					}

					icon = {
						name = "prowess_icon"
						size = { 35 35 }
						texture = "gfx/interface/icons/icon_prowess.dds"
						tooltip = "prowess"
					}
				}
			}

			portrait_head_small = { }
		}
	}

	type widget_maa_summary = widget {
		alwaystransparent = no

		widget = {
			name = "background"
			size = { 100% 100% }
			using = DefaultTooltipBackground
			alwaystransparent = no
		}

		vbox = {
			set_parent_size_to_minimum = yes
			margin_top = 5
			margin = { 3 3 }

			vbox_maa_stats = {
				layoutpolicy_horizontal = expanding
				margin = { 10 0 }

				blockoverride "type_text" { }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 20 10 }
				margin_top = 0
				spacing = 5

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_top = 10
					spacing = 5

					icon = {
						name = "icon"
						size = { 40 40 }
						texture = "[MenAtArmsType.GetIcon]"
					}

					text_single = {
						name = "type"
						text = "MEN_AT_ARMS_TYPE_NAME"
						align = nobaseline
					}

					expand = { }
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[RegimentCombatStats.GetFinalCount|0]/[RegimentCombatStats.GetInitialCount|0]"
						default_format = "#high"
						using = Font_Size_Medium
					}

					text_single = {
						text = "COMBAT_WINDOW_MAA_TT_REGIMENTS"
						visible = no
					}
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					visible = "[GreaterThan_CFixedPoint( BattleSummaryWindow.GetTerrainBonus( MenAtArmsType.Self ), '(CFixedPoint)0' )]"
					text = "BATTLE_SUMMARY_TARRAIN_BONUS"
					default_format = "#positive_value"
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					visible = "[LessThan_CFixedPoint( BattleSummaryWindow.GetTerrainBonus( MenAtArmsType.Self ), '(CFixedPoint)0' )]"
					text = "BATTLE_SUMMARY_TARRAIN_PENALTY"
					default_format = "#negative_value"
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					block "counter_datamodel" {
						datamodel = "[BattleSummaryWindow.GetLeftCounter( MenAtArmsType.Self )]"
					}

					item = {
						text_single = {
							layoutpolicy_horizontal = expanding
							text = "BATTLE_SUMMARY_COUNTERS"
							default_format = "#positive_value"
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					block "countered_by_datamodel" {
						datamodel = "[BattleSummaryWindow.GetLeftCounteredBy( MenAtArmsType.Self )]"
					}

					item = {
						text_single = {
							layoutpolicy_horizontal = expanding
							text = "BATTLE_SUMMARY_COUNTERED_BY"
							default_format = "#negative_value"
						}
					}
				}
			}
		}
	}

	type widget_knight_summary = widget {
		alwaystransparent = no

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 15 15 }
			spacing = 5

			text_single = {
				layoutpolicy_horizontal = expanding
				default_format = "#tooltip_heading"

				block "knights_header" {
					text = "[knights|E]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				block "knights_datamodel" { }

				item = {
					hbox = {
						layoutpolicy_horizontal = expanding
						datacontext = "[RegimentCombatStats.GetKnight]"
						spacing = 5

						text_single = {
							raw_text = "[Character.GetNameNoTooltip]: "
							max_width = 230
						}

						expand = { }

						text_single = {
							text = "BATTLE_SUMMARY_KNIGHT_OUTCOME_TEXT"
							default_format = "#high"
						}
					}
				}
			}
		}
	}
}
