
					vbox = {
						visible = "[Not(GetVariableSystem.Exists('char_details'))]"
						layoutpolicy_horizontal = expanding
						margin = { 10 10 }

						error_button = {
							layoutpolicy_horizontal = expanding
						}

						#name
						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3

							text_single = {
								visible = "[Character.IsDeadAndValid]"
								raw_text = "Dead."
								margin_right = -3
							}

							button_text = {
								blockoverride "extra" {
									text_single = {
										visible = "[Character.IsImprisoned]"
										raw_text = "In prison,"
									}

									character_name_text = { }
								}
								enabled = "[Character.IsAlive]"
								onclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
								onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
								# shortcut = increase_speed_2
							}

							hbox = {
								spacing = 3
								visible = "[Not(GetVariableSystem.Exists('expand_view'))]"
								text_single = {
									raw_text = "[Character.GetHouse.GetName]."
									visible = "[Character.GetHouse.IsValid]"
								}

								text_single = {
									raw_text = "[Character.GetAge] years,"
									tooltip = "[Character.GetDeathOrBirthDateInfo]"
								}

								text_single = {
									raw_text = "[Character.Custom('character_health')] health."
									visible = "[Not(Character.IsDeadAndValid)]"

									tooltipwidget = {
										health_tooltip = { }
									}
								}

								text_single = {
									raw_text = "Click to interact."
								}
							}


							expand = { }
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(GetVariableSystem.Exists('expand_view'))]"
							spacing = 5

							# ruler
							vbox = {
								layoutpolicy_horizontal = expanding

								# ruler
								button_text = {
									layoutpolicy_horizontal = expanding
									visible = "[Character.HasLandedTitles]"
									blockoverride "extra" {
										text_single = {
											raw_text = "[Character.Custom('BaseRankName')] of"
										}

										text_single = {
											raw_text = " [Character.GetPrimaryTitle.GetNameNoTierNoTooltip],"
										}

										text_single = {
											raw_text = " [Character.RealmSize] counties."
										}
										text_single = {
											raw_text = "[AddTextIf(Character.IsIndependentRuler, ' Independent,')]"
										}
										text_single = {
											visible = "[Character.IsAlive]"
											raw_text = " [Character.GetGovernment.GetAdjective]"
										}
										dot = { }
									}
									datacontext = "[Character.GetPrimaryTitle]"
									using = title_click
								}

								# vassal
								realm_name_and_type_vbox_ocr = {
									layoutpolicy_horizontal = expanding
									# visible = "[And(Character.HasLandedTitles, Character.IsAlive)]"
									datacontext = "[Character.GetPrimaryTitle]"
								}
								# location
								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 3
									visible = "[And(Character.IsAlive, Not(GetVariableSystem.Exists('expand_view')))]"

									hbox = {
										visible = "[And(Character.HasLandedTitles, GreaterThan_int32(Character.RealmSize, '(int32)0'))]"
										spacing = 3

										button_text = {
											onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Character.GetCapitalLocation.GetID))]"
											onclick = "[DefaultOnCoatOfArmsRightClick(Character.GetCapitalLocation.GetCoATitle.GetID)]"
											shortcut = map_mode_9
											blockoverride "text" {
												raw_text = "Capital, [Character.GetCapitalLocation.GetNameNoTooltip]."
											}
										}

										text_single = {
											datacontext = "[Character.GetCapitalLocation]"
											visible = "[Not(Character.IsLocalPlayer)]"
											raw_text = "AnyProvinceDistanceDirection"
										}

										text_single = {
											raw_text = "Shift Q."
										}
									}

									button_text = {
										shortcut = map_mode_9
										# visible = "[Not(Character.HasLandedTitles)]"
										visible = "[EqualTo_int32(Character.RealmSize, '(int32)0')]"
										onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Character.GetCurrentLocation.GetID))]"
										enabled = "[GetScriptedGui('is_land_province').IsShown( GuiScope.SetRoot( Character.GetCurrentLocation.MakeScope ).End )]"
										onclick = "[DefaultOnCoatOfArmsRightClick(Character.GetCurrentLocation.GetCoATitle.GetID)]"

										blockoverride "text" {
											raw_text = "[Character.GetLocationDesc]"
										}
										blockoverride "extra" {
											spacing = 3

											text_single = {
												datacontext = "[Character.GetCurrentLocation]"
												visible = "[Not(ObjectsEqual(Character.GetCurrentLocation, GetPlayer.GetCapitalLocation))]"
												raw_text = "AnyProvinceDistanceDirection"
											}

											text_single = {
												visible = "[GetScriptedGui('is_land_province').IsShown( GuiScope.SetRoot( Character.GetCurrentLocation.MakeScope ).End )]"
												raw_text = "Shift Q."
											}
										}
									}

									expand = { }
								}
							}

							# status
							vbox = {
								layoutpolicy_horizontal = expanding

								# warnings
								hbox = {
									visible = "[Character.IsValid]"
									spacing = 3
									layoutpolicy_horizontal = expanding
									margin_left = 5


									button_text = {
										blockoverride "text" {
											raw_text = "Unmarried."
										}
										blockoverride "extra" {
											text_single = {
												raw_text = " find Spouse."
												visible = "[Character.IsPlayerInteractionValid('marry_off_interaction')]"
											}
										}
										visible = "[Not(Character.GetPrimarySpouseOrBetrothed.IsValid)]"
										onclick = "[Character.OpenPlayerInteraction('marry_off_interaction')]"
										onclick = "[CharacterWindow.Close]"
										enabled = "[Character.IsPlayerInteractionValid('marry_off_interaction')]"
									}

									hbox = {
										spacing = 3

										button_text = {
											datacontext = "[CharacterWindow.GetCharacter.GetPrimarySpouse]"
											visible = "[Character.GetPrimarySpouse.IsValid]"
											using = char_click

											blockoverride "text" {
												raw_text = "Married."
											}
										}

										flowcontainer = {
											ignoreinvisible = yes
											visible = "[GreaterThan_CFixedPoint( Character.MakeScope.ScriptValue('num_of_living_children'), '(CFixedPoint)0' )]"
											spacing = 3

											button_text = {
												onclick = "[GetVariableSystem.Set('expand_view', 'family')]"
												blockoverride "text" {
													raw_text = "[Character.MakeScope.ScriptValue('num_of_living_children')] child[AddTextIf(GreaterThan_CFixedPoint(Character.MakeScope.ScriptValue('num_of_living_children'), '(CFixedPoint)1'), 'ren')],"
												}
											}


											flowcontainer = {
												ignoreinvisible = yes
												spacing = 3

												visible = "[GreaterThan_CFixedPoint(Character.MakeScope.ScriptValue('unmarried_children'), '(CFixedPoint)0')]"
												text_single = {
													visible = "[LessThan_CFixedPoint(Character.MakeScope.ScriptValue('unmarried_children'), Character.MakeScope.ScriptValue('num_of_living_children'))]"
													raw_text = "[Character.MakeScope.ScriptValue('unmarried_children')] unmarried."
												}

												text_single = {
													visible = "[EqualTo_CFixedPoint(Character.MakeScope.ScriptValue('unmarried_children'), Character.MakeScope.ScriptValue('num_of_living_children'))]"
													raw_text = "unmarried."
												}
											}
										}


										text_single = {
											visible = "[IsDataModelEmpty(CharacterWindow.GetChildren)]"
											raw_text = "No children."
										}
									}


									text_single = {
										raw_text = "No heir of [Character.GetHerHis] dynasty!"
										visible = "[And(Not(CharacterWindow.GetCharacter.GetPlayerHeir.IsValid), Character.HasLandedTitles)]"
									}

									text_single = {
										raw_text = "You are [Character.GetHerHis] heir!"
										visible = "[ObjectsEqual(Character.GetPrimaryTitle.GetHeir.Self, GetPlayer )]"
									}

									expand = { }
								}

								hbox = {
									datacontext = "[CharacterWindow.GetCharacter.GetPrimaryTitle.GetHeir]"
									visible = "[And(Not(CharacterWindow.GetCharacter.GetPlayerHeir.IsValid), CharacterWindow.GetCharacter.HasLandedTitles)]"
									layoutpolicy_horizontal = expanding

									char_name = {
										shortcut = "zoom_in"
										blockoverride "pre" {
											spacing = 3
											text_single = {
												raw_text = "Heir,"
											}
										}
										blockoverride "extra" {
											text_single = {
												raw_text = "[Character.GetAge]."
											}
											text_single = {
												raw_text = "Page Down."
											}
										}
									}
									expand = { }
								}

								# imprisoned
								hbox = {
									layoutpolicy_horizontal = expanding
									visible = "[And(Character.IsImprisoned, Not(GetVariableSystem.Exists('expand_view')))]"
									text_single = {
										datacontext = "[CharacterWindow.GetCharacter.GetImprisonedBy]"
										raw_text = "Imprisoned by"
									}
									char_name = {
										datacontext = "[CharacterWindow.GetCharacter.GetImprisonedBy]"
									}
									expand = { }
								}

								## dead
								hbox = {
									layoutpolicy_horizontal = expanding
									visible = "[Character.IsDeadAndValid]"

									text_single = {
										raw_text = "CHARACTER_DEAD_TOOLTIP"
										max_width = 600
										fontsize_min = 14
									}

									dot = { }
									expand = { }
								}

								#diplo
								hbox = {
									layoutpolicy_horizontal = expanding
									visible = "[And(Character.HasLandedTitles, Character.IsAlive)]"

									button = {
										onclick = "[GetVariableSystem.Set('expand_view', 'diplomacy')]"
										using = expanded_view
										shortcut = mapmode_house_secondary

										flowcontainer = {
											margin = { 3 1 }
											resizeparent = yes
											ignoreinvisible = yes

											text_single = {
												raw_text = "At war"
												visible = "[EqualTo_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_wars'), '(CFixedPoint)1')]"
											}

											text_single = {
												raw_text = "In [GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_wars')] wars"
												visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_wars'), '(CFixedPoint)1')]"
											}

											text_single = {
												visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_raids'), '(CFixedPoint)0')]"
												raw_text = ", [GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_raids')] raids"
											}

											text_single = {
												visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_allies'), '(CFixedPoint)0')]"
												raw_text = ", [GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_allies')] allies"
											}

											text_single = {
												visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_truces'), '(CFixedPoint)0')]"
												raw_text = ", [GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_truces')] truces"
											}

											text_single = {
												raw_text = ", Involved"
												visible = "[GetScriptedGui('is_involved').IsShown( GuiScope.SetRoot( Character.MakeScope ).End )]"
											}

											text_single = {
												raw_text = ", Interloper"
												visible = "[GetScriptedGui('is_interloper').IsShown( GuiScope.SetRoot( Character.MakeScope ).End )]"
											}

											text_single = {
												raw_text = ", Shift D"
											}
											visible = "[DataModelHasItems(CharacterWindow.GetDiplomacyItems)]"
											dot = { }
										}
									}

									expand = { }
								}

								# opinion
								hbox = {
									margin_left = 5
									name = "AI_personality"
									layoutpolicy_horizontal = expanding
									visible = "[And(Character.IsAlive, Not(Character.IsLocalPlayer))]"
									spacing = 3
									text_single = {
										raw_text = "Opinion [Character.GetOpinionOf(GetPlayer)]."
										tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
									}
									text_single = {
										raw_text = "Yours of [Character.GetHerHim] [GetPlayer.GetOpinionOf(Character.Self)]."
										tooltip = "[GetPlayer.GetOpinionBreakdownText(Character.Self)]"
									}
									expand = { }
								}
							}


							vbox = {
								layoutpolicy_horizontal = expanding

								button_text = {
									layoutpolicy_horizontal = expanding
									using = expanded_view
									blockoverride "text" {
										raw_text = "Realm, hotkey 1."
									}
									visible = "[Or(DataModelHasItems(CharacterWindow.GetTitles), DataModelHasItems(CharacterWindow.GetClaims))]"
									shortcut = speed_1
									onclick = "[GetVariableSystem.Set('expand_view', 'counties')]"
									onclick = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
								}

								# titles
								counties_tabs = {
									blockoverride "hotkeys" { }
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									onclick = "[GetVariableSystem.Set('expand_view', 'resources')]"
									visible = "[Not(Character.IsDeadAndValid)]"
								    blockoverride "pre" {
										text_single = {
											raw_text = "Resources, hotkey 2."
										}
								    }
								}

								# resources
								button_text = {
									layoutpolicy_horizontal = expanding
									onclick = "[GetVariableSystem.Set('expand_view', 'resources')]"
									shortcut = speed_2
									visible = "[Not(Character.IsDeadAndValid)]"
									blockoverride "extra" {
										text_single = {
											raw_text = "Soldiers, [Character.GetMilitaryStrengthText]."
											tooltip = "[CharacterWindow.GetMilitaryStrengthTooltip]"
											visible = "[Character.HasLandedTitles]"
										}

										text_single = {
											raw_text = " Gold, [Character.GetGold|0],"
											# visible = "[Not(EqualTo_CFixedPoint(Character.GetGold, '(CFixedPoint)0'))]"
										}

										text_single = {
											visible = "[Not(EqualTo_CFixedPoint(Character.GetBalance, '(CFixedPoint)0'))]"
											raw_text = " [Character.GetBalance|1=] a month."
										}
									}
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									onclick = "[GetVariableSystem.Set('expand_view', 'resources')]"
									visible = "[Not(Character.IsDeadAndValid)]"
								    blockoverride "pre" {
										spacing = 3
								        text_single = {
											raw_text = " Prestige, [Character.GetPrestige|0],"
										}

										text_single = {
											raw_text = " Piety, [Character.GetPiety|0],"
										}

										text_single = {
											visible = "[GreaterThan_CFixedPoint(Character.GetDread, '(CFixedPoint)0')]"
											raw_text = " Dread [Character.GetDread|0]."
											tooltip = "[Character.GetDreadBreakdown]"
										}
								    }
								}

								vbox = {
									layoutpolicy_horizontal = expanding

									button_text = {
										layoutpolicy_horizontal = expanding
										visible = "[Or(Character.HasArtifacts, Character.HasAnyArtifactClaims)]"
										onclick = "[ToggleGameViewData( 'inventory', Character.GetID )]"
										onclick = "[CloseGameView('character')]"
										shortcut = mapmode_kingdoms_secondary

										blockoverride "extra" {
											spacing = 3
											margin_left = 0
											text_single = {
												raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_artifacts')] Artifacts,"
												visible = "[Character.HasArtifacts]"
											}

											text_single = {
												raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_artifacts_claims')] Artifact claims,"
												visible = "[Character.HasAnyArtifactClaims]"
											}

											text_single = {
												raw_text = "Open Inventory, Hotkey i."
											}
										}
									}

									button_text = {
										layoutpolicy_horizontal = expanding
										visible = "[Character.HasKillsKnownTo( GetPlayer )]"
										blockoverride "text" {
											raw_text = "View [GetDataModelSize(Character.GetKills)] known kill[AddTextIf(GreaterThan_int32(GetDataModelSize(Character.GetKills), '(int32)1'), 's')]."
										}
										onclick = "[ToggleGameViewData( 'kill_list', Character.GetID  )]"
										datacontext = "[Character]"
									}

									expand = { }
								}
							}

							# geography
							vbox = {
								layoutpolicy_horizontal = expanding

								# adjacent
								button_text = {
									layoutpolicy_horizontal = expanding
									blockoverride "text" {
										raw_text = "[Character.MakeScope.ScriptValue('neighbours_sval')] adjacent rulers, Control A."
									}
									visible = "[And( GreaterThan_int32(Character.RealmSize, '(int32)0'), Character.IsAlive )]"
									onclick = "[GetVariableSystem.Set('expand_view', 'neighbours')]"
									onclick = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
									using = expanded_view
									shortcut = map_mode_6
								}
							}

							personality_vbox = {
								blockoverride "slots" {
									maxverticalslots = 5
								}
								blockoverride "modifier slots" {
									maxverticalslots = 3
								}
								blockoverride "hide" {
									visible = no
								}
								blockoverride "hotkeys" { }
							}

							#TODO ages and opinions
							# family
							vbox = {
								layoutpolicy_horizontal = expanding
								# house
								button_text = {
									layoutpolicy_horizontal = expanding
									datacontext = "[Character.GetHouse]"
									onclick = "[OpenGameViewData('dynasty_house_view', Character.GetHouse.GetID))]"
									enabled = "[DynastyHouse.IsValid]"
									shortcut = "army_create_new"

									blockoverride "extra" {
										spacing = 3
										margin_left = 0
										text_single = {
											visible = "[DynastyHouse.IsValid]"
											raw_text = "House [DynastyHouse.GetBaseNameNoTooltip],"
										}

										text_single = {
											visible = "[Not(DynastyHouse.IsValid)]"
											raw_text = "[lowborn|E]."
										}

										text_single = {
											visible = "[Not(Character.IsLegitimateMemberOfHouse)]"
											raw_text = "Bastard."
											tooltip = "CV_TT_BASTARD"
										}

										text_single = {
											visible = "[LessThan_int32(Character.GetDynastyHeadRelationFrame('(bool)no'), '(int32)9')]"
											tooltip = "[Character.GetDynastyHeadTooltip]"
											raw_text = "Head of House."
										}

										text_single = {
											raw_text = "Hotkey H."
											visible = "[DynastyHouse.IsValid]"
										}

										text_single = {
											raw_text = "[GetDynastyPrestigeLevelName(Character.GetDynasty.GetPrestigeLevel)] dynasty."
										}
									}
								}

								vbox = {
									layoutpolicy_horizontal = expanding

									# player heir
									hbox = {
										datacontext = "[CharacterWindow.GetCharacter.GetPlayerHeir]"
										visible = "[Character.IsValid]"
										layoutpolicy_horizontal = expanding

										char_name = {
											shortcut = "zoom_in"
											blockoverride "pre" {
												text_single = {
													margin_right = 3
													raw_text = "Your"
													visible = "[CharacterWindow.GetCharacter.IsLocalPlayer]"
												}
												text_single = {
													margin_right = 3
													raw_text = "heir,"
												}
											}
											blockoverride "extra" {
												text_single = {
													raw_text = " [Character.GetAge]"
												}
												opinion_text = { }
												text_single = {
													raw_text = ", Page Down."
												}
											}
										}
										expand = { }
									}

									# heir
									hbox = {
										datacontext = "[CharacterWindow.GetCharacter.GetPrimaryTitle.GetHeir]"
										visible = "[And(Not(CharacterWindow.GetCharacter.GetPlayerHeir.IsValid), CharacterWindow.GetCharacter.GetPrimaryTitle.GetHeir.IsValid)]"
										layoutpolicy_horizontal = expanding

										char_name = {
											shortcut = "zoom_in"
											blockoverride "pre" {
												spacing = 3
												text_single = {
													raw_text = "Foreign heir,"
												}
											}
											blockoverride "extra" {
												text_single = {
													raw_text = "[Character.GetAge]."
												}
												text_single = {
													raw_text = "Page Down."
												}
											}
										}

										expand = { }
									}
									# spouse bottom
									vbox = {
										layoutpolicy_horizontal = expanding

										vbox = {
											# visible = "[CharacterWindow.ShouldShowSpouses]"
											layoutpolicy_horizontal = expanding

											char_name = {
												layoutpolicy_horizontal = expanding
												visible = "[CharacterWindow.GetCharacter.GetPrimarySpouseOrBetrothed.IsValid]"
												datacontext = "[CharacterWindow.GetCharacter.GetPrimarySpouseOrBetrothed]"
												blockoverride "pre" {
													text_single = {
														raw_text = "[AddTextIf(Character.IsDeadAndValid, 'Dead ')]Spouse,"
														margin_right = 3
													}
												}
												blockoverride "extra" {
													text_single = {
														raw_text = " [Character.GetAge]"
													}
													opinion_text = { }
													dot = { }
												}
											}

											#TODO
											# visible = "[CharacterWindow.ShouldShowSpouseButtons]"
											text_single = {
												layoutpolicy_horizontal = expanding
												raw_text = "No spouse."
												visible = "[And(Not(Character.IsPlayerInteractionValid('marry_off_interaction')), Not(Character.GetPrimarySpouseOrBetrothed.IsValid))]"
											}

											expand = { }
										}
									}

									#liege
									vbox = {
										layoutpolicy_horizontal = expanding
										datacontext = "[CharacterWindow.GetCharacter.GetLiegeEvenWhenDead]"
										visible = "[CharacterWindow.HasLiegeEvenWhenDead]"

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 3

											char_name = {
												shortcut = "zoom_out"
												blockoverride "pre" {
													text_single = {
														raw_text = "Liege,"
														margin_right = 3
													}
												}
												blockoverride "extra" {
													text_single = {
														raw_text = " [Character.GetAge]"
													}
													opinion_text = { }

													dot = { }
												}
											}
											expand = { }
										}

										#liege opinion
										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 3
											datacontext = "[CharacterWindow.GetCharacter]"
											visible = "[And( Character.HasLiege, And( Character.IsAlive, Not(Character.IsLocalPlayer ) ) )]"

											text_single = {
												visible = "[Character.ShouldShowDreadEffectIconFor( Character.GetLiege )]"
												raw_text = "[CharacterWindow.GetCharacter.GetSheHe|U] is intimidated."
												tooltip = "[Character.GetDreadEffectTooltipFor( Character.GetLiege )]"
											}

											expand = { }
										}
									}

									#host
									vbox = {
										layoutpolicy_horizontal = expanding
										datacontext = "[CharacterWindow.GetCourtOwner]"
										visible = "[And( Not( CharacterWindow.HasLiegeEvenWhenDead ), And( CharacterWindow.GetCourtOwner.IsValid, Not( CharacterWindow.GetCharacter.IsRuler ) ) )]"

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 3

											char_name = {
												shortcut = "zoom_out"
												blockoverride "pre" {
													spacing = 3
													text_single = {
														raw_text = "Host,"
													}
												}
											}

											text_single = {
												raw_text = ", Page Up."
											}
											expand = { }
										}

										#liege opinion
										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 3
											datacontext = "[CharacterWindow.GetCharacter]"
											visible = "[And(Character.IsAlive, Not(Character.IsLocalPlayer))]"

											text_single = {
												raw_text = "[Character.GetHerHis|U] opinion of host: [Character.GetOpinionOf( CharacterWindow.GetCourtOwner )]."
												tooltip = "[Character.GetOpinionBreakdownText( CharacterWindow.GetCourtOwner )]"
											}

											text_single = {
												visible = "[Character.ShouldShowDreadEffectIconFor( CharacterWindow.GetCourtOwner )]"
												raw_text = "[CharacterWindow.GetCharacter.GetSheHe|U] is intimidated."
												tooltip = "[Character.GetDreadEffectTooltipFor( CharacterWindow.GetCourtOwner )]"
											}

											expand = { }
										}
									}

									button_text = {
										layoutpolicy_horizontal = expanding
										onclick = "[GetVariableSystem.Set('expand_view', 'family')]"

										blockoverride "pre" {
											spacing = 3

											text_single = {
												visible = "[DataModelHasItems(CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ))]"
												raw_text = "[GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ))] lover[AddTextIf(GreaterThan_int32(GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) )), '(int32)1'), 's')],"
											}

											text_single = {
												visible = "[DataModelHasItems(CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) ))]"
												raw_text = "[GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) ))] rival[AddTextIf(GreaterThan_int32(GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) )), '(int32)1'), 's')]."
											}
										}
									}

								}
							}
						}

						# artifacts and kill list
						expand = { }
					}