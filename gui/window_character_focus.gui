######################################################
################## EDUCATION FOCUS ###################
######################################################

window = {
	name = "character_focus_window"
	size = { 600 0 }
	parentanchor = center
	layer = top

	using = Window_Background
	using = Window_Decoration
	using = TooltipFocus

	vbox = {
		using = Window_Margins
		resizeparent = yes

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				raw_text = "[CharacterFocusWindow.GetWindowTitle] for [CharacterFocusWindow.GetCharacter.GetFirstNameOrMeNoTooltip]."
			}

			blockoverride "button_close"
			{
				onclick = "[CharacterFocusWindow.Close]"

			}
		}

		flowcontainer = {
			name = "focus_selection_area"
			direction = vertical
			layoutpolicy_horizontal = expanding

			button_text = {
			    blockoverride "text" {
			        raw_text = "[FocusType.GetNameNoTooltip]"
			    }
				blockoverride "extra" {
					text_single = {
						raw_text = ", Selected" align = nobaseline
						visible = "[CharacterFocusWindow.IsSelectedFocus('0')]"
					}
				}
				blockoverride "dot_nb" { }
				onclick = "[CharacterFocusWindow.OnClickSetSelectedFocus('0')]"
				datacontext = "[CharacterFocusWindow.GetFocus( '(int32)0' )]"
				clicksound = "event:/SFX/UI/Unique/CharacterLifestyle/sfx_ui_unique_lifestyle_learning"
			}

			button_text = {
			    blockoverride "text" {
			    	raw_text = "[FocusType.GetNameNoTooltip]"
			    }
				blockoverride "extra" {
					text_single = {
						raw_text = ", Selected" align = nobaseline
						visible = "[CharacterFocusWindow.IsSelectedFocus('1')]"
					}
				}
				blockoverride "dot_nb" { }
				onclick = "[CharacterFocusWindow.OnClickSetSelectedFocus('1')]"
				datacontext = "[CharacterFocusWindow.GetFocus( '(int32)1' )]"
				clicksound = "event:/SFX/UI/Unique/CharacterLifestyle/sfx_ui_unique_lifestyle_learning"
			}

			button_text = {
			    blockoverride "text" {
			        raw_text = "[FocusType.GetNameNoTooltip]"
			    }
				blockoverride "extra" {
					text_single = {
						raw_text = ", Selected" align = nobaseline
						visible = "[CharacterFocusWindow.IsSelectedFocus('2')]"
					}
				}
				blockoverride "dot_nb" { }
				onclick = "[CharacterFocusWindow.OnClickSetSelectedFocus('2')]"
				datacontext = "[CharacterFocusWindow.GetFocus( '(int32)2' )]"
				clicksound = "event:/SFX/UI/Unique/CharacterLifestyle/sfx_ui_unique_lifestyle_learning"
			}

			button_text = {
			    blockoverride "text" {
			        raw_text = "[FocusType.GetNameNoTooltip]"
			    }
				blockoverride "extra" {
					text_single = {
						raw_text = ", Selected" align = nobaseline
						visible = "[CharacterFocusWindow.IsSelectedFocus('3')]"
					}
				}
				blockoverride "dot_nb" { }
				onclick = "[CharacterFocusWindow.OnClickSetSelectedFocus('3')]"
				datacontext = "[CharacterFocusWindow.GetFocus( '(int32)3' )]"
				clicksound = "event:/SFX/UI/Unique/CharacterLifestyle/sfx_ui_unique_lifestyle_learning"
			}

			button_text = {
			    blockoverride "text" {
			        raw_text = "[FocusType.GetNameNoTooltip]"
			    }
				blockoverride "extra" {
					text_single = {
						raw_text = ", Selected" align = nobaseline
						visible = "[CharacterFocusWindow.IsSelectedFocus('4')]"
					}
				}
				blockoverride "dot_nb" { }
				onclick = "[CharacterFocusWindow.OnClickSetSelectedFocus('4')]"
				datacontext = "[CharacterFocusWindow.GetFocus( '(int32)4' )]"
				clicksound = "event:/SFX/UI/Unique/CharacterLifestyle/sfx_ui_unique_lifestyle_learning"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			# layoutpolicy_vertical = expanding
			# margin_top = 10
			# spacing = 10

			text_single = {
				layoutpolicy_horizontal = expanding
				name = "selected_focus_name"
				visible = "[Not(StringIsEmpty(CharacterFocusWindow.GetSelectedFocusName))]"

				raw_text = "About [CharacterFocusWindow.GetSelectedFocusName]:"
			}

			@focus_width = 550
			# Info about Selected Focus
			scrollbox = {
				name = "focus_info_area"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				autoresizescrollarea = yes
				visible = "[Not(StringIsEmpty(CharacterFocusWindow.GetSelectedFocusName))]"

				blockoverride "scrollbox_content"
				{
					# spacing = 10
					margin_left = 0
					text_multi = {
						autoresize = yes
						max_width = @focus_width
						text = "[CharacterFocusWindow.GetSelectedFocusDescription]"
					}

					text_multi = {
						autoresize = yes
						max_width = @focus_width
						text = "[CharacterFocusWindow.GetFocusDescriptionFromDatabase]"
					}

					text_multi = {
						autoresize = yes
						max_width = @focus_width
						text = "[CharacterFocusWindow.GetSelectedFocusEffectDesc]"
					}

					text_multi = {
						autoresize = yes
						max_width = @focus_width
						text = "[CharacterFocusWindow.GetSelectedFocusModifierDesc]"
					}

				}
			}
		}

		text_multi = {
			text = "[CharacterFocusWindow.GetWarningText]"
			# default_format  = "#low;italic"
			autoresize = yes
			max_width = @focus_width
			layoutpolicy_horizontal = expanding
		}

		button_text_cant = {
			layoutpolicy_horizontal = expanding
			blockoverride "disabled" {
				visible = "[Not(CharacterFocusWindow.CanChangeFocus)]"
				tooltip = "[CharacterFocusWindow.GetCanChangeFocusDescription]"
			}
			blockoverride "text" {
				raw_text = "CHOOSE_FOCUS"
			}
			blockoverride "extra" {
				text_single = {
					raw_text = ", hotkey Enter"
					align = nobaseline
					visible = "[CharacterFocusWindow.CanChangeFocus]"
				}
			}
			blockoverride "dot_nb" { }
			onclick = "[CharacterFocusWindow.OnClickChangeFocus]"
			enabled = "[CharacterFocusWindow.CanChangeFocus]"
			shortcut = "confirm"
		}

		expand = { }
	}
}




