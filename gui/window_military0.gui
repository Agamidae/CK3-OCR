types OCR {
	type military_old = margin_widget {
		size = { 100% 100% }
		using = old_margins

		widget = {
			size = { 100% 100% }

			### WINDOW CONTENT
			vbox = {
				using = Window_Margins

				header_with_picture = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text" {
						text = "MILITARY_VIEW"
					}

					blockoverride "illustration_texture" {
						texture = "gfx/interface/illustrations/window_headers/header_military.dds"
					}

					blockoverride "button_close" {
						onclick = "[MilitaryView.Close]"
					}

					flowcontainer = {
						parentanchor = bottom|right
						spacing = 5
						margin = { 10 5 }

						ignoreinvisible = yes

						button_primary = {
							name = "tutorial_highlight_raise_troops_button"
							datacontext = "[GetPlayer]"
							onclick = "[PlayerRaiseAllRegiments]"
							enabled = "[PlayerCanRaiseAnyRallyPoint]"

							text = "RAISE_ALL"
							size = {180 32}

							tooltip = "[GetPlayerRaiseAllTooltip]"
							using = tooltip_se
							clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"

							# animation_attention_text = {
							# 	visible = "[And( And( GetPlayer.IsAtWar, PlayerCanRaiseAnyRallyPoint ),Not(GetPlayer.HasRaisedRegiments) )]"
							# }
						}

						button_standard = {
							datacontext = "[GetPlayer]"
							onclick = "[PlayerRaiseAllRaidRegiments]"
							visible = "[Character.CanRaid]"
							enabled = "[PlayerCanRaiseAnyRaiderRallyPoint]"

							text = "RAISE_ALL_RAIDERS"
							size = { 200 32 }

							tooltip = "[GetPlayerRaiseAllRaidersTooltip]"
							using = tooltip_se
							clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
						}

						button_standard = {
							datacontext = "[GetPlayer]"

							onclick = "[PlayerDisbandAll]"
							enabled = "[PlayerCanDisbandAll]"

							text = "DISBAND_ALL"
							size = { 135 32 }

							tooltip = "[GetDisbandAllTooltip]"
							using = tooltip_se
							clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_unit_army_disband"
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_bottom = 5

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'troops' )]"
						down = "[GetVariableSystem.HasValue( 'military_view_tabs', 'troops' )]"

						text_single = {
							text = "BANNER_TROOPS_TAB"
							parentanchor = center

							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'mercenaries' )]"
						down = "[GetVariableSystem.HasValue( 'military_view_tabs', 'mercenaries' )]"

						text_single = {
							text = "MV_MERCENARIES"
							parentanchor = center

							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'holy_orders' )]"
						down = "[GetVariableSystem.HasValue( 'military_view_tabs', 'holy_orders' )]"

						text_single = {
							text = "MV_HOLY_ORDERS"
							parentanchor = center

							maximumsize = { 400 -1 }
							default_format = "#low"

							alpha = "[Select_float( DataModelHasItems( MilitaryView.GetAllHolyOrders ), '(float)1.0', '(float)0.5' )]"
						}

						text_single = {
							parentanchor = vcenter|right
							position = {-20 0}
							text = "[GetDataModelSize(MilitaryView.GetAllHolyOrders)]"

							default_format = "#low"

							alpha = "[Select_float( DataModelHasItems( MilitaryView.GetAllHolyOrders ), '(float)1.0', '(float)0.5' )]"
						}
					}
				}

				vbox = {
					name = "tab_your_armies"
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'troops' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					scrollbox = {
						name = "scrollbox_troops"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						state = {
							name = _show
							using = Animation_FadeIn_Quick
						}

						state = {
							name = _hide
							alpha = 0
						}

						background = {
							texture = "gfx/interface/skinned/illustrations/moving.dds"
							fittype = end
							alpha = 0.3

							using = Mask_Rough_Edges

							using = Mask_Rough_Edges

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
								blend_mode = alphamultiply
								mirror = vertical
							}
						}

						blockoverride "scrollbox_content" {
							datacontext = "[MilitaryView.GetMilitaryItem]"

							vbox = {
								layoutpolicy_horizontal = expanding
								margin = { 10 0 }
								spacing = 15

								hbox = {
									layoutpolicy_horizontal = expanding
									margin = { 90 0 }

									vbox = {
										datacontext = "[MilitaryItem.GetComposition]"
										layoutpolicy_horizontal = expanding
										margin = { 10 5 }
										tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
										ignoreinvisible = no

										background = {
											using = Background_Area
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 10

											text_single = {
												text = "MV_TOTAL_SOLDIERS"
												layoutpolicy_horizontal = expanding
												align = nobaseline
											}

											hbox = {
												spacing = 7

												icon = {
													name = "icon_soldier"
													texture = "gfx/interface/icons/icon_soldier.dds"
													size = { 25 25 }
												}

												text_single = {
													text = "[ArmyComposition.GetSoldierCountString]"
													using = Font_Size_Big
													default_format = "#high"
													align = nobaseline
												}

												army_quality_icon = {}
											}
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 10
											visible = "[ArmyComposition.HasRaisedSoldiers]"
											tooltip = "[ArmyComposition.GetUnraisedArmyCompositionTooltip]"

											text_single = {
												text = "MV_UNRAISED_SOLDIERS"
												layoutpolicy_horizontal = expanding
												align = nobaseline
												margin_bottom = 3
												margin_left = 3
												using = Font_Size_Small
											}

											hbox = {
												spacing = 7

												text_single = {
													text = "[ArmyComposition.GetUnraisedNumberOfSoldiers]"
													layoutpolicy_horizontal = expanding
													using = Font_Size_Small
													default_format = "#high"
													align = nobaseline
												}

												unraised_army_quality_icon = {}
											}
										}

										progressbar_standard = {
											name = "soldiers_max"
											size = { 140 10 }
											visible = "[NotEqualTo_int32(ArmyComposition.GetCurrentNumberOfSoldiers, ArmyComposition.GetMaxNumberOfSoldiers)]"
											layoutpolicy_horizontal = expanding
											max = "[IntToFloat(ArmyComposition.GetMaxNumberOfSoldiers)]"
											value = "[IntToFloat(ArmyComposition.GetCurrentNumberOfSoldiers)]"
											using = Animation_ShowHide_Standard
										}
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 10

									button_standard_clean = {
										datacontext = "[MilitaryItem.GetComposition]"
										layoutpolicy_horizontal = expanding
										size = { 200 140 }
										onclick = "[MilitaryView.ShowLevies]"

										tooltip = "MV_LEVY_TT"

										background = {
											texture = "gfx/interface/illustrations/men_at_arms_big/levies.dds"
											alpha = 0.7
										}

										background = {
											using = Background_Button_Illustration
											visible = "[MilitaryView.AreLeviesShown]"
										}

										background = {
											texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
											spriteType = Corneredtiled
											spriteborder = { 5 5 }
											margin = { -2 -2 }
										}

										using = Background_Vignette_Button

										vbox = {
											expand = {}
											margin = { 8 10 }

											text_single = {
												layoutpolicy_horizontal = expanding
												alwaystransparent = yes
												text = "LEVIES_LABEL"
											}

											hbox = {
												spacing = 3
												layoutpolicy_horizontal = expanding
												margin_right = 5

												icon = {
													name = "icon_soldier"
													texture = "gfx/interface/icons/icon_soldier.dds"
													size = { 25 25 }
												}

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[ArmyComposition.GetLeviesCountString]"
													using = Font_Size_Big
													default_format = "#high"
													align = nobaseline

												}

												expand = {}

												text_single = {
													text = MV_LEVY_MAINTENANCE
													tooltip = MV_LEVY_MAINTENANCE_TOOLTIP
													alwaystransparent = yes
													default_format = "#high"
													align = nobaseline

													background = {
														using = Background_Area_Dark
														margin = { 10 5 }
													}

												}
											}
										}

										progressbar_standard = {
											name = "soldiers_max"
											parentanchor = bottom|left
											position = { 5 -3 }
											size = { 96% 10 }
											visible = "[NotEqualTo_int32(ArmyComposition.GetCurrentNumberOfLevies, ArmyComposition.GetMaxNumberOfLevies)]"
											max = "[IntToFloat(ArmyComposition.GetMaxNumberOfLevies)]"
											value = "[IntToFloat(ArmyComposition.GetCurrentNumberOfLevies)]"
										}
									}

									button_standard_clean = {
										name = "knights_box"
										datacontext = "[MilitaryItem.GetComposition]"
										layoutpolicy_horizontal = expanding
										size = { 200 140 }
										onclick = "[MilitaryView.ShowKnights]"

										tooltip = "MV_KNIGHTS_TT"

										background = {
											texture = "gfx/interface/skinned/illustrations/men_at_arms/knights.dds"
											alpha = 0.7
										}

										background = {
											using = Background_Button_Illustration
											visible = "[MilitaryView.AreKnightsShown]"
										}

										background = {
											texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
											spriteType = Corneredtiled
											spriteborder = { 5 5 }
											margin = { -2 -2 }
										}

										using = Background_Vignette_Button

										vbox = {
											tooltip = "MV_KNIGHTS_TOOLTIP"
											using = tooltip_se
											expand = {}
											margin = { 8 10 }

											text_single = {
												visible = "[Not( GreaterThan_int32( Character.GetNumAccoladeSlots, '(int32)0' ) )]"
												layoutpolicy_horizontal = expanding
												text = "MV_KNIGHTS"
												alwaystransparent = yes
											}
											text_single = {
												visible = "[GreaterThan_int32( Character.GetNumAccoladeSlots, '(int32)0' )]"
												layoutpolicy_horizontal = expanding
												text = "MV_KNIGHTS_AND_ACCOLADES"
												alwaystransparent = yes
											}

											hbox = {
												spacing = 3
												layoutpolicy_horizontal = expanding
												icon = {
													name = "icon_knight"
													texture = "gfx/interface/icons/icon_knight_small.dds"
													size = { 30 30 }
												}

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "KNIGHTS_CURRENT_MAX"
													using = Font_Size_Big
													default_format = "#high"
													align = nobaseline
												}

												expand = {}

												text_label_center = {
													layoutpolicy_horizontal = expanding
													text = "MV_MANAGE_KNIGHTS"
												}
											}
										}
									}
								}

								vbox = {
									name = "maa_area"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									margin = { 0 0 }
									spacing = 4

									vbox = {
										layoutpolicy_horizontal = expanding
										margin = { 0 5 }
										spacing = 5
										name = "heading"

										hbox = {
											layoutpolicy_horizontal = expanding
											ignoreinvisible = no


											vbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												expand = {}
												hbox = {
													layoutpolicy_horizontal = expanding
													spacing = 5

													text_single = {
														text = "BANNER_MEN_AT_ARMS_LABEL"
													}

													text_single = {
														layoutpolicy_horizontal = expanding
														text = "[MilitaryView.GetMAACountAndCapString]"
														default_format = "#high"
														tooltip = "[MilitaryView.GetMAACountAndCapTooltip]"
														using = tooltip_ne
													}
												}
											}

											button_tertiary = {
												visible = "[Not(IsDataModelEmpty(MilitaryItem.GetMAA))]"
												using = Animation_ShowHide_Standard

												name = "raise_all_men_at_arms"
												datacontext = "[GetPlayer]"
												onclick = "[PlayerRaiseAllMenAtArmsRegiments]"
												enabled = "[PlayerCanRaiseAnyMenAtArmsRallyPoint]"

												text = "RAISE_ALL_MEN_AT_ARMS"
												size = {200 36}

												tooltip = "[GetPlayerRaiseAllMenAtArmsTooltip]"
												using = tooltip_se
												clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
											}
										}

										divider_light = {
											layoutpolicy_horizontal = expanding
										}


									}



									hbox = {
										layoutpolicy_horizontal = expanding
										name = "maa_tiles"

										fixedgridbox = {
											datamodel = "[MilitaryItem.GetMAA]"
											flipdirection = yes
											datamodel_wrap = 3
											addcolumn = 166
											addrow = 93

											item = {
												container = {
													datacontext = "[Regiment.GetMAAType]"
													using = tooltip_es

													background = {
														texture = "[MenAtArmsType.GetHorizontalImage]"
														alpha = 0.7
													}

													background = {
														using = Background_Button_Illustration
														visible = "[Regiment.IsShownInMaaView]"
													}

													background = {
														texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
														spriteType = Corneredtiled
														spriteborder = { 5 5 }
														margin = { -2 -2 }
													}

													tooltipwidget = {
														using = regiment_container_text_tooltip

														blockoverride "extra_info" {
															divider_light = {
																layoutpolicy_horizontal = expanding
															}
															text_single = {
																layoutpolicy_horizontal = expanding
																text = "CLICK_TO_SELECT"
																margin = { 10 0 }
															}
														}
													}

													button_standard_clean = {
														name = "maa_entry"
														size = { 164 90 }

														vbox = {
															expand = {}

															hbox = {
																margin = { 8 4 }
																spacing = 2
																layoutpolicy_horizontal = expanding

																background = {
																	using = Background_Area_Dark
																}

																icon = {
																	name = "icon_maa"
																	texture = [MenAtArmsType.GetIcon]
																	size = { 20 20 }
																}

																text_single = {
																	text = "[Regiment.BuildCurrentRegimentCountString|V]"
																	default_format = "#high"
																}

																expand = {}

																text_single = {
																	text = "TOTAL_MAA_COST"
																	tooltip = "TOTAL_MAA_COST_TOOLTIP"

																	default_format = "#high"
																}
															}
														}

														button_normal = {
															visible = "[Not(Regiment.IsShownInMaaView)]"
															size = { 100% 100% }
															onclick = "[Regiment.ToggleMaaView]"
														}


														text_label_right = {
															visible = "[And( Not(Regiment.IsRaised), GetPlayer.IsAtWar)]"
															text = "MAA_UNRAISED"
															using = Font_Size_Small
															default_format = "#X"
															parentanchor = top|right
															position = {-10 1}
														}

														text_label_right = {
															visible = "[Not(And( Not(Regiment.IsRaised), GetPlayer.IsAtWar))]"
															text = "MAA_CURRENT_SIZE"
															using = Font_Size_Small
															parentanchor = top|right
															position = {-10 1}
														}

														text_label_right = {
															visible = "[And( Not( Regiment.GetOriginProvince.IsValid ), GetPlayer.HasDomainProvincesForMAAOrigin )]"
															text = "MAA_UNSTATIONED"
															default_format = "#X"
															using = Font_Size_Small
															parentanchor = top|right
															position = { -10 22 }
														}

														button_normal = {
															visible = "[GetVariableSystem.Exists( 'menatarms_open' )]"
															size = { 100% 100% }
															onclick = "[PdxGuiTriggerAllAnimations('menatarms_refresh')]"

															state = {
																name = _mouse_click
																delay = 0.2
																on_finish = "[Regiment.ToggleMaaView]"
															}
														}
													}
												}
											}
										}

										expand = {}
									}

									button_standard = {
										name = "add_maa"
										layoutpolicy_horizontal = expanding

										text = "ADD_MEN_AT_ARMS_LABEL"

										onclick = "[MilitaryItem.OnClick]"
										tooltip = "CREATE_MAA_TOOLTIP"
										#enabled = "[MilitaryItem.MaACanBeCreated]"
										down = "[MilitaryItem.IsOpen]"

										button_plus = {
											name = "can_be_created"
											visible = "[MilitaryItem.CanCreateAnyMAAType]"
											parentanchor = vcenter
											alwaystransparent = yes
										}

										# animation_attention = {
										# 	visible = "[MilitaryItem.CanCreateAnyMAAType]"
										# }

										warning_icon = {
											name = "at_cap"
											visible = "[Not(MilitaryItem.MaACanBeCreated)]"
											parentanchor = left|vcenter
											position = { 10 0 }
											size = { 29 29 }
										}
									}


								}

								vbox = {
									visible = "[Not(IsDataModelEmpty(MilitaryView.GetEventTroops))]"
									layoutpolicy_horizontal = expanding
									margin = { 0 5 }
									spacing = 5

									text_single = {
										layoutpolicy_horizontal = expanding
										text = "MILITARY_VIEW_EVENT_TROOPS"
									}

									divider_light = {
										layoutpolicy_horizontal = expanding
									}

									vbox = {
										datamodel = "[MilitaryView.GetEventTroops]"
										layoutpolicy_horizontal = expanding

										item = {
											hbox_event_troop_item = {
												layoutpolicy_horizontal = expanding
											}
										}
									}
								}

								vbox = {
									visible = "[Or( Not(IsDataModelEmpty(MilitaryView.GetHiredMercenaries)), Not(IsDataModelEmpty(MilitaryView.GetHiredHolyOrders)) )]"
									layoutpolicy_horizontal = expanding
									margin = { 0 5 }
									spacing = 5

									text_single = {
										layoutpolicy_horizontal = expanding
										text = "MILITARY_VIEW_HIRED_TROOPS"
									}

									divider_light = {
										layoutpolicy_horizontal = expanding
									}

									vbox = {
										datamodel = "[MilitaryView.GetHiredMercenaries]"
										layoutpolicy_horizontal = expanding
										spacing = 5
										margin = { 10 0 }
										margin_top = 5

										item = {
											button_mercenary_list_item = {
												datacontext = "[HiredTroopItem.GetMercenaryCompany]"
												layoutpolicy_horizontal = expanding

												blockoverride "HiredTroopMenAtArmsTypesDataModel"
												{
													datamodel = "[HiredTroopItem.GetRegiments]"
												}
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										margin = { 10 20 }
										visible = "[Not(IsDataModelEmpty(MilitaryView.GetHiredHolyOrders))]"

										divider_light = {
											layoutpolicy_horizontal = expanding

										}
									}

									vbox = {
										datamodel = "[MilitaryView.GetHiredHolyOrders]"
										layoutpolicy_horizontal = expanding
										spacing = 5
										margin = { 10 0 }

										item = {
											button_holyorder_list_item = {
												datacontext = "[HiredTroopItem.GetHolyOrder]"
												layoutpolicy_horizontal = expanding

												blockoverride "HiredTroopMenAtArmsTypesDataModel"
												{
													datamodel = "[HiredTroopItem.GetRegiments]"
												}
											}
										}
									}
								}
							}
						}
					}

					vbox = {
						name = "rally_points"
						layoutpolicy_horizontal = expanding
						margin = { 25 10 }
						spacing = 5

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "MV_RALLY_POINTS"
						}

						divider_light = {
							layoutpolicy_horizontal = expanding
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							hbox = {
								name = "rally_point_list"
								datamodel = "[MilitaryView.GetRallyPoints]"

								item = {
									button = {
										name = "rally_point_button"
										datacontext = "[RallyPointItem.GetRallyPoint]"
										size = { 50 50 }
										onclick = "[RallyPointItem.OnClick]"
										tooltip = "MV_RALLY_POINT_TT"
										using = tooltip_ne
										texture = "gfx/interface/window_military/banner_icon.dds"
										tintcolor = "[RallyPoint.GetColor]"
									}
								}
							}

							button_plus_small = {
								name = "add_rally_point"
								enabled = "[MilitaryView.CanAddRallyPoint]"
								onclick = "[MilitaryView.OnAddRallyPoint]"
								tooltip = "[MilitaryView.GetAddRallyPointTooltip]"
							}

							expand = {}
						}
					}

					vbox = {
						name = "footer"
						layoutpolicy_horizontal = expanding
						margin = { 90 0 }

						background = {
							using = Background_Bottom_Fade
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							margin = { 10 5 }
							spacing = 2

							background = {
								using = Background_Area
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								button_checkbox_label = {
									onclick = "[MilitaryView.OnMilitaryReinforcementClick]"
									tooltip = "[MilitaryView.GetMilitaryReinforcementCostTooltip]"

									blockoverride "checkbox"
									{
										checked = "[MilitaryView.IsMilitaryReinforcementsEnabled]"
									}

									blockoverride "text"
									{
										text = "MONTHLY_REINFORCEMENT_COST_LABEL"
									}
								}

								expand = {}
							}

							divider_light = {
								layoutpolicy_horizontal = expanding
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5

									text_single = {
										text = "MONTHLY_MAINTENANCE_LABEL"
										maximumsize = { 400 -1 }
									}

									expand = {
										size = { 28 28 }
									}

									icon = {
										size = { 28 28 }
										visible = "[MilitaryView.HasEmbarkedArmies]"
										texture = "gfx/interface/icons/map_icons/naval_transportation.dds"
										tooltip = "MV_EMBARKED_TT"
									}

									text_single = {
										datacontext = "[MilitaryView.GetGoldMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPrestigeMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPietyMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										text = "COST_RESULT_NOTHING"
										visible = "[And(EqualTo_CFixedPoint(MilitaryView.GetGoldMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ,And( EqualTo_CFixedPoint( MilitaryView.GetPrestigeMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0'), EqualTo_CFixedPoint(MilitaryView.GetPietyMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ) ) ]"
										maximumsize = { 400 -1 }
										default_format = "#high"
									}
								}

								hbox = {
									visible = "[MilitaryView.HasAnyRaisedMilitaryExpenses]"
									layoutpolicy_horizontal = expanding
									spacing = 10

									expand = {}

									text_single = {
										text = "MONTHLY_MAX_MAINTENANCE_LABEL"
										maximumsize = { 400 -1 }
										tooltip = "MONTHLY_MAX_MAINTENANCE_TT"
										align = nobaseline
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedGoldMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "MONTHLY_MAX_MAINTENANCE_VIEW"
										maximumsize = { 400 -1 }
										default_format = "#weak"
										align = nobaseline
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPrestigeMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPrestigeMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPietyMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPietyMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}
								}
							}
						}
					}
				}

				scrollbox = {
					name = "tab_mercenaries"
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'mercenaries' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					background = {
						texture = "gfx/interface/illustrations/event_scenes/genericcamp.dds"
						margin = { -5 0 }
						fittype = end
						alpha = 0.3
						framesize = { 1200 848 }

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					blockoverride "scrollbox_content" {
						vbox = {
							name = "tutorial_highlight_mercenary_list_item"
							datamodel = "[MilitaryView.GetAllMercenaries]"
							layoutpolicy_horizontal = expanding
							spacing = 3
							margin = { 10 0 }

							spacer = {
								size = { 7 7 }
							}

							item = {
								vbox = {
									layoutpolicy_horizontal = expanding

									button_mercenary_list_item = {
										datacontext = "[HiredTroopItem.GetMercenaryCompany]"
										visible = "[MercenaryCompany.IsHired]"
										layoutpolicy_horizontal = expanding
										size = { 430 110 }

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}

									button_mercenary_list_item = {
										datacontext = "[HiredTroopItem.GetMercenaryCompany]"
										visible = "[Not(MercenaryCompany.IsHired)]"
										layoutpolicy_horizontal = expanding
										size = { 430 90 }

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}
								}
							}
						}
					}
				}

				scrollbox = {
					name = "tab_holy_orders"
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'holy_orders' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					background = {
						texture = "gfx/interface/skinned/illustrations/holy_order_bg.dds"
						margin = { -5 0 }
						fittype = centercrop
						alpha = 0.3

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					blockoverride "scrollbox_content" {
						vbox = {
							datamodel = "[MilitaryView.GetAllHolyOrders]"
							layoutpolicy_horizontal = expanding
							spacing = 3
							margin = { 10 0 }

							text_label_center = {
								name = "hired_troops_view_holy_orders_header_item"
								text = "HIRED_TROOPS_VIEW_LIST_HO_HEADER"
							}

							text_single = {
								visible = "[And( Not(MilitaryView.CanUseAnyHolyOrder), DataModelHasItems(MilitaryView.GetAllHolyOrders))]"
								text = "HOLY_ORDER_MUST_BE_AT_WAR_WITH_BAD_FAITH"
							}

							hbox = {
								visible = "[Not(DataModelHasItems(MilitaryView.GetAllHolyOrders ))]"

								text_single = {
									text = "HIRED_TROOPS_VIEW_LIST_HO_NO_HOS"
									default_format = "#weak"
								}
							}

							spacer = {
								size = { 7 7 }
							}

							button_decision_entry = {
								name = "hired_troops_view_create_holy_order_item"
								datacontext = "[GetDecisionWithKey('create_holy_order_decision')]"
								visible = "[Decision.IsShownForPlayer]"
								layoutpolicy_horizontal = expanding
								onclick = "[OpenGameViewData( 'decision_detail', Decision.Self)]"
								size = { 430 50 }
							}

							item = {
								vbox = {
									layoutpolicy_horizontal = expanding

									button_holyorder_list_item = {
										visible = "[Not(And(HolyOrder.IsHired, HolyOrder.IsPledgedToGreatHolyWar))]"

										datacontext = "[HiredTroopItem.GetHolyOrder]"
										layoutpolicy_horizontal = expanding

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}

									button_holyorder_list_item = {
										visible = "[And(HolyOrder.IsHired, HolyOrder.IsPledgedToGreatHolyWar)]"
										size = { 430 120 }
										datacontext = "[HiredTroopItem.GetHolyOrder]"
										layoutpolicy_horizontal = expanding

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}