### TITLE WINDOW

window = {
	name = "title_view_window"
	movable = no
	allow_outside = yes
	layer = windows_layer

	using = Window_Size_Sidebar
	using = Window_Background_No_Edge

	state = {
		name = _show
		position = { 0 0 }
		on_start = "[GetVariableSystem.Clear( 'title_tabs' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"
		onclick = "[GetScriptedGui('adjacent_titles').Execute( GuiScope.SetRoot( Title.MakeScope ).End )]"

		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		position_x = -60
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"

		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	datacontext = "[TitleViewWindow.GetTitle]"

	vbox = {
		using = Window_Margins_Sidebar

		######################################################
		#################### TITLE VIEW ######################
		######################################################

		vbox = {
			name = "title_view_main_tab"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 5
			margin_left = 10

			state = {
				name = _show
				using = Animation_FadeIn_Quick
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
			}

			### HEADER ###
			vbox = {
				layoutpolicy_horizontal = expanding

				vbox = {
					ignoreinvisible = yes
					datacontext = "[TitleViewWindow.GetTitle]"
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding

						button = {
							using = title_click
							shortcut = map_mode_9
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3
							text_single = {
								raw_text = "[TitleViewWindow.GetTitle.GetNameNoTooltip|U]."
								max_width = 350
								autoresize = yes
								fontsize_min = 14
							}

							text_single = {
								visible = "[Not(Or(Title.IsMercenaryCompany, Or( Title.IsHolyOrder, Title.HasFaction )))]"
								raw_text = "[Localize('TV_TIER_INFO')]."
							}

							text_single = {
								visible = "[Not(Title.CanHaveClaim)]"
								raw_text = "[Title.GetSpecialDescription]."
							}

							expand = { }
						}

						vbox = {
							layoutpolicy_vertical = expanding

							buttons_window_control = {
								blockoverride "button_close"
								{
									onclick = "[TitleViewWindow.Close]"
									onclick = "[TitleViewWindow.CloseHistory]"
									onclick = "[TitleViewWindow.CloseClaimants]"
								}

								blockoverride "button_back"
								{
									size = { 0 0 }
									visible = "[HasViewHistory]"
									onclick = "[OpenFromViewHistory]"
									tooltip = "[GetViewHistoryTooltip]"
								}

								blockoverride "button_me"
								{
									size = { 0 0 }
									onclick = "[DefaultOnCharacterClick(GetPlayer.GetID)]"
								}
							}

							expand = { }
						}
					}

					watch_window_button = {
						size = { 60 40 }
						onclick = "[AddWatchWindow( TitleViewWindow.GetTitle.MakeScope )]"
					}

					text_single = {
						visible = "[Title.HasFaction]"
						datacontext = "[Title.GetFaction]"
						text = "TITLE_VIEW_FACTION"
					}

					# owner
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						spacing = 3

						text_single = {
							name = "is_created"
							visible = "[Not(Title.HasHolder)]"
							raw_text = "[Localize('TV_NOT_CREATED')]."
						}

						vbox = {
							name = "existing_title"
							ignoreinvisible = yes
							visible = "[Title.HasHolder]"

							text_single = {
								name = "my_title"
								visible = "[EqualTo_uint32( Title.GetHolder.GetID, GetPlayer.GetID )]"
								raw_text = "[Localize('TV_MY_TITLE')]."
							}

							text_single = {
								raw_text = "[Localize('TV_NO_CLAIM')]."
								visible = "[And(And(NotEqualTo_uint32( Title.GetHolder.GetID, GetPlayer.GetID ), Not(GetPlayer.HasClaimOnTitle(TitleViewWindow.GetTitle ))),Title.CanHaveClaim))]"
							}

							text_multi = {
								name = "have_claim"
								raw_text = "[Title.GetClaimStateFor(GetPlayer)]."
								minimumsize = { 200 50 }
								visible = "[And(NotEqualTo_uint32( Title.GetHolder.GetID, GetPlayer.GetID ), GetPlayer.HasClaimOnTitle(TitleViewWindow.GetTitle ))]"
							}
						}

						text_single = {
							raw_text = "You hold [GuiScope.SetRoot(Title.MakeScope).AddScope('player', GetPlayer.MakeScope).ScriptValue('your_counties_in_title')] counties"
						}

						text_single = {
							raw_text = "out of [GuiScope.SetRoot(Title.MakeScope).ScriptValue('counties_in_title')]."
						}

						expand = { }

					}

					widget = {
						size = { 0 5 }
					}

					### TABS ###
					hbox = {
						background = { using = Background_Area_Border_Solid }
						name = "tabs"
						layoutpolicy_horizontal = expanding

						text_single = {
							raw_text = "Tabs:"
						}

						button_text = {
							onclick = "[GetVariableSystem.Clear('title_tabs')]"
							# onclick = "[GetVariableSystem.Clear( 'display_allegiance' )]"
							shortcut = speed_1
							blockoverride "text" {
								raw_text = "1,"
								align = left
							}
							blockoverride "extra" {
								text_single = {
									raw_text = " selected,"
									visible = "[Not(GetVariableSystem.Exists('title_tabs'))]"
								}
								text_single = {
									raw_text = " general."
								}
							}
						}

						button_text = {
							onclick = "[GetVariableSystem.Set('title_tabs', 'de_jure')]"
							shortcut = speed_2
							blockoverride "pre" {
								text_single = {
									raw_text = "2,"
								}
								text_single = {
									raw_text = " selected,"
									visible = "[GetVariableSystem.HasValue('title_tabs', 'de_jure')]"
								}
								space = { }
							}
							blockoverride "text" {
								text = "TITLE_VIEW_DE_JURE"
								align = left
							}
							blockoverride "dot" {
							}
						}

						button_text = {
							onclick = "[GetVariableSystem.Set('title_tabs', 'adjacent')]"
							onclick = "[GetScriptedGui('adjacent_titles').Execute( GuiScope.SetRoot( Title.MakeScope ).End )]"
							shortcut = speed_3
							blockoverride "pre" {
								text_single = {
									raw_text = "3,"
								}
								text_single = {
									raw_text = " selected,"
									visible = "[GetVariableSystem.HasValue('title_tabs', 'adjacent')]"
								}
								space = { }
							}
							blockoverride "text" {
								raw_text = "Adjacent"
								align = left
							}
							blockoverride "dot" {
							}
						}

						button_text = {
							visible = "[Not(IsDataModelEmpty(TitleViewWindow.GetTitleAllegianceVassals))]"
							onclick = "[GetVariableSystem.Set('title_tabs', 'vassals')]"
							shortcut = speed_4
							blockoverride "pre" {
								text_single = {
									raw_text = "4,"
								}
								text_single = {
									raw_text = " selected,"
									visible = "[GetVariableSystem.HasValue('title_tabs', 'vassals')]"
								}
								space = { }
							}
							blockoverride "text" {
								raw_text = "Allegiance"
								align = left
							}
							blockoverride "dot" {
							}
						}
						expand = { }
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						visible = "[GetVariableSystem.HasValue('title_tabs', 'adjacent')]"

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "[GetDataModelSize(Title.MakeScope.GetList('adjacent_titles'))] adjacent titles. Reload with E."
							}
							onclick = "[GetScriptedGui('adjacent_titles').Execute( GuiScope.SetRoot( Title.MakeScope ).End )]"
							shortcut = map_mode_1
						}

						vbox = {
							layoutpolicy_horizontal = expanding

							datamodel = "[Title.MakeScope.GetList('adjacent_titles')]"

							item = {
								button_text = {
									using = title_click
									onclick = "[GetScriptedGui('adjacent_titles').Execute( GuiScope.SetRoot( Title.MakeScope ).End )]"
									layoutpolicy_horizontal = expanding
									datacontext = "[Scope.Title]"
									blockoverride "text" {
										raw_text = "[Title.GetNameNoTierNoTooltip]"
										align = left
									}
									blockoverride "extra" {
										text_single = {
											visible = "[Not(Title.HasHolder)]"
											raw_text = ", not created"
										}
										widget = {
											scissor = yes
											text_single = {
												raw_text = ", [GuiScope.SetRoot(Title.GetPreferredCapital.GetProvince.MakeScope).AddScope('origin', TitleViewWindow.GetTitle.GetPreferredCapital.GetProvince.MakeScope).GetScriptValueDesc('direction_svalue_temp')]"
												resizeparent = yes
												margin_right = -43
											}
										}
										text_single = {
											visible = "[Title.HasHolder]"
											datacontext = "[Title.GetHolder]"
											raw_text = ", held by [Character.GetNameNoTooltip]"
										}
									}

									blockoverride "dot" {
									}
								}
							}
						}

						expand = { }

					}


					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(GetVariableSystem.Exists('title_tabs'))]"

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Rename title."
							}
							visible = "[TitleViewWindow.GetTitle.CanPlayerCustomizeTitle]"
							onclick = "[OpenTitleCustomizationWindow(TitleViewWindow.GetTitle)]"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							visible = "[And(TitleViewWindow.GetTitle.HasHolder,TitleViewWindow.GetTitle.IsLanded)]"
							blockoverride "text" {
								raw_text = "[TitleViewWindow.GetTypeOfLanded]:"
								align = left
								alwaystransparent = yes
							}
							blockoverride "extra" {
								text_single = {
									raw_text = " [Holding.GetProvince.GetNameNoTooltip]."
								}
							}
							datacontext = "[TitleViewWindow.GetHolding]"
							onclick = "[TitleViewWindow.GoToHolding]"
						}

						# capital
						button_text = {
							layoutpolicy_horizontal = expanding
							datacontext = "[TitleViewWindow.GetTitle.GetPreferredCapital]"
							visible = "[And( Title.IsValid, Not( TitleViewWindow.GetTitle.HasFaction ) )]"
							blockoverride "pre" {
								text_single = {
									raw_text = "De Jure Capital:"
								}
								space = { }
							}
							blockoverride "text" {
								raw_text = "[Title.GetNameNoTooltip]."
								align = left
							}
							using = prov_click
						}

						char_name = {
							visible = "[Character.IsValid]"
							layoutpolicy_horizontal = expanding
							datacontext = "[TitleViewWindow.GetTitle.GetHolder]"
							blockoverride "width" {
								max_width = 450
							}

							blockoverride "pre" {
								text_single = {
									margin_right = 3
									raw_text = "[Localize('TITLE_VIEW_HOLDER')]:"
								}
							}
						}

						widget = {
							size = { 0 5 }
						}

						# buttons
						vbox = {
							visible = "[Not( Title.HasFaction )]"
							layoutpolicy_horizontal = expanding

							text_multi = {
								visible = "[TitleViewWindow.GetTitle.HasHolder]"
								raw_text = "[TitleViewWindow.GetSuccessionDescription]."
								layoutpolicy_horizontal = expanding
								max_width = 570
								autoresize = yes
							}

							vbox = {
								datacontext = "[TitleViewWindow.GetTitle]"
								datacontext = "[Title.GetHolder]"
								visible = "[Not(Or(Title.IsMercenaryCompany,Title.IsHolyOrder))]"
								ignoreinvisible = yes
								layoutpolicy_horizontal = expanding

								button_text = {
									layoutpolicy_horizontal = expanding
									visible = "[And( Character.IsLocalPlayer, TitleViewWindow.GetTitle.HasLaws )]"
									blockoverride "text" {
										raw_text = "[Localize('TITLE_VIEW_CLEAR_LAWS')]."
									}
									blockoverride "disabled" {
										visible = "[Not(TitleViewWindow.CanClearLaws)]"
									}
									enabled = "[TitleViewWindow.CanClearLaws]"
									onclick = "[TitleViewWindow.ClearLaws]"
									tooltip = "[TitleViewWindow.GetClearLawsButtonTooltip]"
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									name = "open_laws"
									blockoverride "text" {
										raw_text = "[Localize('TITLE_VIEW_SHOW_ADD_LAWS')]."
									}
									visible = "[And( Character.IsLocalPlayer, TitleViewWindow.CanAddLaws )]"
									onclick = "[TitleViewWindow.ToggleLaws]"
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									name = "toggle_find_vassal"
									blockoverride "text" {
										text = "FIND_VASSAL_HEADER"
									}
									visible = "[And( And( ObjectsEqual( Title.GetHolder, GetPlayer ), TitleViewWindow.GetTitle.CanUseFindVassal( GetPlayer ) ), Not( Title.IsLeasedOut))]"

									onclick = "[TitleViewWindow.ToggleFindVassalListWindow]"
									tooltip = "FIND_VASSAL_BUTTON_TOOLTIP"
								}
							}

							vbox = {
								datacontext = "[TitleViewWindow.GetTitle]"
								datacontext = "[TitleViewWindow.GetTitle.GetHolder]"
								visible = "[Not(Or(Title.IsMercenaryCompany,Title.IsHolyOrder))]"
								layoutpolicy_horizontal = expanding

								button_text = {
									layoutpolicy_horizontal = expanding
								    blockoverride "text" {
										raw_text = "[Localize('TITLE_VIEW_DESTROY_TITLE')]."
								    }
									blockoverride "disabled" {
										visible = "[Not(TitleViewWindow.CanTitleBeDestroyed)]"
									}
									visible = "[TitleViewWindow.ShowDestroy]"
									enabled = "[TitleViewWindow.CanTitleBeDestroyed]"
									onclick = "[TitleViewWindow.DestroyTitle]"
									tooltip = "[TitleViewWindow.GetDestroyTitleButtonTooltip]"
								}

								button_text = {
									layoutpolicy_horizontal = expanding
								    blockoverride "text" {
										raw_text = "[Localize('TITLE_VIEW_MAKE_PRIMARY')]."
								    }
									name = "make_primary_title"
									visible = "[And( Character.IsLocalPlayer, TitleViewWindow.CanMakePrimary )]"
									onclick = "[TitleViewWindow.MakePrimary]"
									tooltip = "TITLE_MAKE_PRIMARY_TOOLTIP"
								}

								button_text = {
									layoutpolicy_horizontal = expanding
								    blockoverride "text" {
										raw_text = "[Localize('TITLE_VIEW_USURP_TITLE')]."
								    }
									blockoverride "disabled" {
										visible = "[Not(TitleViewWindow.CanTitleBeUsurped)]"
									}
									visible = "[And( Not(Character.IsLocalPlayer), TitleViewWindow.ShowUsurp )]"
									enabled = "[TitleViewWindow.CanTitleBeUsurped]"
									onclick = "[TitleViewWindow.UsurpTitle]"
									tooltip = "[TitleViewWindow.GetUsurpTitleButtonTooltip]"
								}
							}
						}

						flowcontainer = {
							direction = vertical
							layoutpolicy_horizontal = expanding
							ignoreinvisible = yes

							button_text = {
								blockoverride "pre" {
									text_single = {
										raw_text = "View"
										margin_right = 3
										visible = "[GreaterThan_int32( TitleViewWindow.GetNumberOfClaimants, '(int32)0' )]"
									}
								}
								blockoverride "text" {
									raw_text = "[Localize('TITLE_VIEW_CLAIMANTS')]."
									align = left
								}
								onclick = "[TitleViewWindow.ToggleClaimants]"
								# tooltip = "TITLE_CLAIMANTS_TOOLTIP"
								visible = "[Title.CanHaveClaim]"
								enabled = "[GreaterThan_int32( TitleViewWindow.GetNumberOfClaimants, '(int32)0' )]"
							}

							button_text = {
								blockoverride "text" {
									raw_text = "View [Localize('TITLE_HISTORY')]."
									align = left
								}
								visible = "[And( Not( Title.IsBarony ), Not( Title.HasFaction ) )]"
								onclick = "[TitleViewWindow.ToggleHistory]"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								visible = "[Not(Title.CanHaveClaim)]"
								raw_text = "[Localize('TITLE_VIEW_NO_CLAIMANTS')]."
								tooltip = "TITLE_VIEW_NO_CLAIMANTS_TOOLTIP"
							}
						}
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 5
				# info
				vbox = {
					visible = "[Not(GetVariableSystem.Exists('title_tabs'))]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					# create
					vbox = {
						layoutpolicy_horizontal = expanding
						name = "create_title"
						visible = "[And( Not( Title.IsBarony ), Not( TitleViewWindow.GetTitle.HasHolder ) )]"

						button_primary_text = {
							layoutpolicy_horizontal = expanding
							enabled = "[TitleViewWindow.CanTitleBeCreated]"
							blockoverride "text" {
								raw_text = "Create title"
							}
							blockoverride "disabled" {
								visible = "[Not(TitleViewWindow.CanTitleBeCreated)]"
							}
							blockoverride "hotkey" {
								visible = "[TitleViewWindow.CanTitleBeCreated]"
							}
							onclick = "[TitleViewWindow.CreateTitle]"
							tooltip = "[TitleViewWindow.GetCreateTitleButtonTooltip]"
						}

						vbox = {
							layoutpolicy_horizontal = expanding

							hbox = {
								layoutpolicy_horizontal = expanding
								tooltip = "[TitleViewWindow.GetMinimumDeJureDetailedText]"
								spacing = 3

								text_single = {
									raw_text = "complete,"
									visible = "[TitleViewWindow.HasEnoughCounties]"
								}

								text_single = {
									raw_text = "incomplete,"
									visible = "[Not(TitleViewWindow.HasEnoughCounties)]"
								}

								text_single = {
									raw_text = "[TitleViewWindow.GetMinimumDeJureText]."
								}

								expand = { }
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								tooltip = "[TitleViewWindow.GetMinimumGoldTooltip]"

								spacing = 3

								text_single = {
									raw_text = "complete,"
									visible = "[TitleViewWindow.HasEnoughGold]"
								}

								text_single = {
									raw_text = "incomplete,"
									visible = "[Not(TitleViewWindow.HasEnoughGold)]"
								}

								text_single = {
									raw_text = "[TitleViewWindow.GetMinimumGoldText]."
								}

								expand = { }
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not( TitleViewWindow.HasTitlesOfTier )]"
								tooltip = "[TitleViewWindow.GetTitlesOfTierTooltip]"

								spacing = 3

								text_single = {
									raw_text = "complete,"
									visible = "[TitleViewWindow.HasTitlesOfTier]"
								}

								text_single = {
									raw_text = "incomplete,"
									visible = "[Not(TitleViewWindow.HasTitlesOfTier)]"
								}

								text_single = {
									raw_text = "[TitleViewWindow.GetTitlesOfTierText]."
								}

								expand = { }
							}
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[TitleViewWindow.GetPrestigeGainText]."
						}
					}

					#TODO
					vbox_strength_info = {
						visible = "[Title.IsMercenaryCompany]"
						datacontext = "[Title.GetMercenaryCompany]"

						blockoverride "hired_troops_knights" {
							text = "TITLE_VIEW_MERCENARY_NUMBER_OF_KNIGHTS"
						}

						blockoverride "hired_troops_soldiers" {
							text = "TITLE_VIEW_MERCENARY_NUMBER_OF_SOLDIERS"
						}

						blockoverride "strength_values" {
							value = "[CurrentAndMaxToProgressbarValueInt32( MercenaryCompany.GetCurrentSoldiers, MercenaryCompany.GetMaxSoldiers )]"
						}
					}

					vbox_strength_info = {
						visible = "[Title.IsHolyOrder]"
						datacontext = "[Title.GetHolyOrder]"
					}

					#### PORTRAITS ###
					vbox = {
						name = "succession_info"
						visible = "[TitleViewWindow.GetTitle.HasHolder]"
						# layoutpolicy_vertical = preferred
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes

						vbox = {
							layoutpolicy_horizontal = expanding

							vbox = {
								layoutpolicy_horizontal = expanding
								# layoutpolicy_vertical = expanding
								visible = "[Not( Title.HasFaction )]"


								button_text = {
									layoutpolicy_horizontal = expanding
									blockoverride "text" {
										raw_text = "TITLE_VIEW_SHOW_ELECTION_TT"
									}
									blockoverride "dot" { }
									datacontext = "[Title.GetHolder]"
									datacontext = "[TitleViewWindow.GetTitle]"
									onclick = "[TitleViewWindow.OpenElection]"
									visible = "[TitleViewWindow.GetTitle.HasSuccessionOrder('election')]"
								}

								hbox = {
									visible = "[Not(Title.IsHolyOrder)]"
									layoutpolicy_horizontal = expanding

									text_single = {
										text = "TITLE_VIEW_SUCCESSION"
									}
									text_single = {
										raw_text = ", top 5:"
									}
									expand = { }
								}

								fixedgridbox = {
									layoutpolicy_horizontal = expanding
									datamodel = "[TitleViewWindow.GetLineOfSuccession]"
									maxverticalslots = 5
									maxhorizontalslots = 1
									addrow = 22
									addcolumn = 550

									item = {
										char_name = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "[Character.GetNameNoTooltip], [Character.GetAge]."
											}
										}
									}
								}
							}

							expand = { }
						}
					}

					expand = { }
				}

				# children
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[GetVariableSystem.HasValue('title_tabs', 'de_jure')]"

					text_single = {
						visible = "[DataModelHasItems(TitleViewWindow.GetLiegeItems)]"
						raw_text = "De Jure Part of:"
						layoutpolicy_horizontal = expanding
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 5
						visible = "[DataModelHasItems(TitleViewWindow.GetLiegeItems)]"

						vbox = {
							datamodel = "[TitleViewWindow.GetLiegeItems]"
							visible = "[Not(GetVariableSystem.Exists('hide_hierarchy'))]"

							item = {
								button_text = {
									layoutpolicy_horizontal = expanding
									datacontext = "[TitleItem.GetTitle]"
									onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
									onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
									blockoverride "text" {
										raw_text = "[Title.GetNameNoTooltip]"
										align = left
									}
									blockoverride "extra" {
										text_single = {
											visible = "[Not(Title.HasHolder)]"
											raw_text = ", not created"
										}
										text_single = {
											visible = "[Title.HasHolder]"
											datacontext = "[Title.GetHolder]"
											raw_text = ", held by [Character.GetNameNoTooltip]"
										}
									}
									blockoverride "dot" { }
								}
							}
						}

						expand = { }
					}

					vbox = {
						name = "dejure_tab_contents"
						datacontext = "[TitleViewWindow.GetTitle]"
						visible = "[And(DataModelHasItems(TitleViewWindow.GetVassalGroupItems), Not(Or(Title.IsMercenaryCompany,Title.IsHolyOrder)))]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin_top = 10
						spacing = 15

						text_single = {
							raw_text = "[TitleViewWindow.GetDeJureDescription]:"
							alwaystransparent = yes
							max_width = 550
							layoutpolicy_horizontal = expanding
						}

						scrollbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							minimumsize = { 0 300 }

							using = title_window_background_illustration

							blockoverride "scrollbox_content" {
								vbox = {
									layoutpolicy_horizontal = expanding
									datamodel = "[TitleViewWindow.GetVassalGroupItems]"
									# spacing = 10

									item = {
										vbox = {
											layoutpolicy_horizontal = expanding

											vbox = {
												datamodel = "[DeJureVassalGroupItem.GetTitleItems]"
												layoutpolicy_horizontal = expanding

												text_single = {
													layoutpolicy_horizontal = expanding
													raw_text = "[GetDataModelSize(DeJureVassalGroupItem.GetTitleItems)] [DeJureVassalGroupItem.GetOwnedBy]:"
													max_width = 1000
												}

												item = {
													hbox = {
													    layoutpolicy_horizontal = expanding
														datacontext = "[TitleItem.GetTitle]"

														button_text = {
															onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
															onrightclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
															button_ignore = none
															blockoverride "text" {
																raw_text = "[Title.GetNameNoTooltip|U],"
																max_width = 300
																align = left
															}

															# tooltipwidget = {
															# 	using = LandedTitleTooltip
															# }

														}

														char_name = {
															visible = "[Title.GetHolder.IsValid]"
															datacontext = "[Title.GetHolder]"
															blockoverride "text" {
																margin_top = 1
																raw_text = "held by [Title.GetHolder.GetShortUINameNoTooltip]."
																max_width = 300
															}
														}

													    expand = { }
													}
												}
											}
										}
									}
								}
							}
						}
					}

					scrollbox = {
						name = "tab_contents_empty"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						visible = "[IsDataModelEmpty(TitleViewWindow.GetVassalGroupItems)]"

						using = title_window_background_illustration

						blockoverride "scrollbox_content" {
							vbox = {
								layoutpolicy_vertical = expanding

								container = {
									visible = "[Not(DataModelHasItems(TitleViewWindow.GetVassalGroupItems))]"

									text_single = {
										visible = "[Not(TitleViewWindow.GetTitle.IsBarony)]"
										text = "TITLE_VIEW_TITULAR"
									}

									text_single = {
										visible = "[TitleViewWindow.GetTitle.IsBarony]"
										text = "TITLE_VIEW_BARONY_NO_DEJURE"
									}
								}
							}
						}
					}
				}

				# vassals
				vbox = {
					name = "vassals_tab_contents"
					visible = "[GetVariableSystem.HasValue('title_tabs', 'vassals')]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					hbox = {
					    layoutpolicy_horizontal = expanding
						spacing = 4

					    text_single = {
					    	raw_text = "[GetDataModelSize(TitleViewWindow.GetTitleAllegianceVassals)]"
					    }

						text_single = {
							raw_text = "[Localize('TITLE_ALLEGIANCE_VASSAL_LIST')]."
						}

					    expand = { }
					}


					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						minimumsize = { 0 300 }

						blockoverride "scrollbox_content" {
							vbox = {
								datamodel = "[TitleViewWindow.GetTitleAllegianceVassals]"
								layoutpolicy_horizontal = expanding
								spacing = 3

								item = {
									char_name = {
										layoutpolicy_horizontal = expanding
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################


template title_view_window_side_pop_out
{
	position = { 0 80 }


	state = {
		name = _show
		using = Animation_FadeIn_Standard
		position_x = 590
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		position_x = 500
	}
}

template title_window_background_illustration
{
	background = {
		texture = "[GetIllustration( 'title_holding' ).GetTextureForTitle( TitleViewWindow.GetTitle )]"
		alpha = 0.1
		fittype = centercrop

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
			blend_mode = alphamultiply
			mirror = vertical
		}

		using = Mask_Rough_Edges
	}
}

types Title
{
	type vbox_title_type_text = vbox {

		text_single = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(Or(Title.IsMercenaryCompany, Or( Title.IsHolyOrder, Title.HasFaction )))]"
			text = "TV_TIER_INFO"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(Title.CanHaveClaim)]"
			text = "[Title.GetSpecialDescription]"
		}
	}
}
