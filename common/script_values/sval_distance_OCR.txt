direction_svalue = {
	value = direction_svalue_temp

	multiply = -1
}

margin_factor = 0.2
x_difference = {
	value = var:pos_x
	subtract = scope:origin.var:pos_x
}
x_difference_abs = {
	value = x_difference
	abs = yes
}
x_difference_margin = {
	value = x_difference
	abs = yes
	multiply = margin_factor
}

y_difference = {
	value = var:pos_y
	subtract = scope:origin.var:pos_y
}
y_difference_abs = {
	value = y_difference
	abs = yes
}
y_difference_margin = {
	value = y_difference
	abs = yes
	multiply = margin_factor
}

direction_svalue_temp = {
	value = 0

	if = {
		# east
		limit = {
			x_difference > 0
			x_difference_abs > y_difference_margin
		}
		# north-east
		if = {
			limit = {
				# we check direction first
				y_difference > 0
				# we make sure the difference is big enough to warrant adding a second direction
				# we compare to the other pair and increase the margin the further out we go
				y_difference_abs > x_difference_margin
			}
			add = {
				value = 2
				desc = "northeast"
			}
		}
		# south-east
		else_if = {
			limit = {
				y_difference < 0
				y_difference_abs > x_difference_margin
			}
			add = {
				value = 4
				desc = "southeast"
			}
		}
		else = {
			add = {
				value = 3
				desc = "east"
			}
		}
	}
	# west
	else_if = {
		limit = {
			x_difference < 0
			x_difference_abs > y_difference_margin
		}
		# north-west
		if = {
			limit = {
				y_difference > 0
				y_difference_abs > x_difference_margin
			}
			add = {
				value = 8
				desc = "northwest"
			}
		}
		# south-west
		else_if = {
			limit = {
				y_difference < -1
				y_difference_abs > x_difference_margin
			}
			add = {
				value = 6
				desc = "southwest"
			}
		}
		else = {
			add = {
				value = 7
				desc = "west"
			}
		}
	}
	else = {
		# north
		if = {
			limit = {
				y_difference > 0
				y_difference_abs > x_difference_margin
			}
			add = {
				value = 1
				desc = "north"
			}
		}
		# south
		else_if = {
			limit = {
				y_difference < 0
				y_difference_abs > x_difference_margin
			}
			add = {
				value = 5
				desc = "south"
			}
		}
	}
}

reduce_distance = 500

# unused, default value from Tobbzn's framework
distance_to_prev = {
    if = {
        limit = {
            save_temporary_trigger_breakpoint_as = {
                TRIGGER = rf_distance_to_prev
                NAME = tmp
            }
        }
        add = scope:tmp
    }
}

# used in find_closest sgui, to get to your closest county from anywhere on the map
# requires a saved province scope 'target'
distance_to_target = {
	if = {
		limit = {
            save_temporary_trigger_breakpoint_as = {
                TRIGGER = rf_distance_to_target
                NAME = tmp
            }
        }
        add = scope:tmp
	}
}

# used in custom loc for direction, requires a saved 'capital' scope
distance_to_player = {
    if = {
        limit = {
			any_player = {
				capital_barony = {
					save_temporary_scope_as = capital
				}
			}
            save_temporary_trigger_breakpoint_as = {
                TRIGGER = rf_distance_to_player
                NAME = tmp
            }
        }
        add = scope:tmp
		divide = reduce_distance
    }
}

# new and cool, root is province, 'second' is character
distance_to_second = {
    if = {
        limit = {
            save_temporary_trigger_breakpoint_as = {
                TRIGGER = rf_distance_to_second
                NAME = tmp
            }
        }
        add = scope:tmp
		divide = reduce_distance
    }
}

# the bomb, should use everywhere!
province_distance = {
    if = {
        limit = {
            save_temporary_trigger_breakpoint_as = {
                TRIGGER = rf_distance_to_second_province
                NAME = tmp
            }
        }
        add = scope:tmp
		divide = reduce_distance
    }
}

distance_to_army = {
    if = {
        limit = {
			any_player = {
				exists = var:army_position
				var:army_position = {
					root = {
						save_temporary_trigger_breakpoint_as = {
							TRIGGER = rf_distance_to_prev_province
							NAME = tmp
						}
					}
				}
			}
        }
        add = scope:tmp
		divide = reduce_distance
		# multiply = 0.77
    }
}

distance_to_army_target = {
    if = {
        limit = {
			save_temporary_trigger_breakpoint_as = {
				TRIGGER = rf_distance_to_army_province
				NAME = tmp
			}
        }
        add = scope:tmp
		divide = reduce_distance
		# multiply = 0.77
    }
}

distance_to_army_or_capital = {
	if = {
		limit = {
			scope:player = {
				exists = var:selected_army
			}
		}
		if = {
	        limit = {
				save_temporary_trigger_breakpoint_as = {
					TRIGGER = rf_distance_to_army_var
					NAME = tmp
				}
	        }
	        add = scope:tmp
			divide = reduce_distance
			# multiply = 0.77
	    }
	}
	else = {
		if = {
			limit = {
				scope:player = {
					capital_barony = {
						save_temporary_scope_as = capital
					}
				}
				save_temporary_trigger_breakpoint_as = {
					TRIGGER = rf_distance_to_player
					NAME = tmp
				}
			}
			add = scope:tmp
			divide = reduce_distance
		}
	}
}

# only used in custom loc for directions
direction_from_capital = {
	value = 0

	if = {
		limit = {
			any_player = {
				capital_province = {
					save_temporary_scope_as = origin
				}
			}
		}
		add = direction_svalue
	}
}

# new
# root is player, second is another character
direction_from_second = {
	value = 0
	if = {
		limit = {
			capital_province = {
				save_temporary_scope_as = origin
			}
		}
	}
	if = {
		limit = {
			scope:second = {
				exists = capital_province
			}
		}
		add = scope:second.capital_province.direction_svalue
	}
	else = {
		add = scope:second.location.direction_svalue
	}
}

direction_from_province = {
	value = 0
	if = {
		limit = {
			save_temporary_scope_as = origin
		}
	}
	add = scope:second.direction_svalue
}

# direction_from_location = {
# 	value = 0
# 	if = {
# 		limit = {
# 			location = {
# 				save_temporary_scope_as = origin
# 			}
# 		}
# 	}
# 	add = scope:second.direction_svalue
# }

direction_from_army = {
	value = 0

	if = {
		limit = {
			any_player = {
				exists = var:army_position
				var:army_position = {
					save_temporary_scope_as = origin
				}
			}
		}
		add = direction_svalue
	}
}

# Used by distance scripted triggers
trigger_to_script_bitsum = {
    value = scope:tmp_testbit
    if = {
        limit = {
            exists = scope:tmp_numbit
        }
        add = scope:tmp_numbit
    }
}