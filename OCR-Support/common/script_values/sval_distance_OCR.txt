direction_svalue = {
	if = {
		limit = {
			exists = var:pos_x
			exists = scope:origin.var:pos_x
			exists = var:pos_y
			exists = scope:origin.var:pos_y
		}
		value = direction_svalue_temp
		multiply = -1
	}
	else = {
		value = 0
	}
}

margin_factor = 0.2
x_difference = {
	value = var:pos_x
	subtract = scope:origin.var:pos_x
}
x_difference_abs = {
	value = x_difference
	abs = yes
}
x_difference_margin = {
	value = x_difference
	abs = yes
	multiply = margin_factor
}

y_difference = {
	value = var:pos_y
	subtract = scope:origin.var:pos_y
}
y_difference_abs = {
	value = y_difference
	abs = yes
}
y_difference_margin = {
	value = y_difference
	abs = yes
	multiply = margin_factor
}

direction_svalue_temp = {
	value = 0

	# final direction_svalue multiplies by -1 so the order becomes clockwise, from north:
	# -1 north
	# -2 northeast
	# -3 east
	# -4 southeast
	# -5 south
	# -6 southwest
	# -7 west
	# -8 northwest


	if = {
		# east
		limit = {
			x_difference > 0
			x_difference_abs > y_difference_margin
		}
		# north-east
		if = {
			limit = {
				# we check direction first
				y_difference > 0
				# we make sure the difference is big enough to warrant adding a second direction
				# we compare to the other pair and increase the margin the further out we go
				y_difference_abs > x_difference_margin
			}
			add = {
				value = 2
				desc = "northeast"
			}
		}
		# south-east
		else_if = {
			limit = {
				y_difference < 0
				y_difference_abs > x_difference_margin
			}
			add = {
				value = 4
				desc = "southeast"
			}
		}
		else = {
			add = {
				value = 3
				desc = "east"
			}
		}
	}
	# west
	else_if = {
		limit = {
			x_difference < 0
			x_difference_abs > y_difference_margin
		}
		# north-west
		if = {
			limit = {
				y_difference > 0
				y_difference_abs > x_difference_margin
			}
			add = {
				value = 8
				desc = "northwest"
			}
		}
		# south-west
		else_if = {
			limit = {
				y_difference < -1
				y_difference_abs > x_difference_margin
			}
			add = {
				value = 6
				desc = "southwest"
			}
		}
		else = {
			add = {
				value = 7
				desc = "west"
			}
		}
	}
	else = {
		# north
		if = {
			limit = {
				y_difference > 0
				y_difference_abs > x_difference_margin
			}
			add = {
				value = 1
				desc = "north"
			}
		}
		# south
		else_if = {
			limit = {
				y_difference < 0
				y_difference_abs > x_difference_margin
			}
			add = {
				value = 5
				desc = "south"
			}
		}
	}
}


# requires scope:second province
squared_province_distance = {
	if = {
		limit = {
			exists = scope:second
			save_temporary_trigger_breakpoint_as = {
				TRIGGER = rf_distance_to_second_province
				NAME = tmp
			}
		}
		add = scope:tmp
		divide = reduce_distance
	}
}

squared_province_distance_third = {
	if = {
		limit = {
			exists = scope:third
			save_temporary_trigger_breakpoint_as = {
				TRIGGER = rf_distance_to_third_province
				NAME = tmp
			}
		}
		add = scope:tmp
		divide = reduce_distance
	}
}

reduce_distance = 10

root_factor = {
	value = 10
}
# approximate_root_0 = {
# 	value = squared_province_distance
# 	divide = root_factor
# }

square_root_of_distance_0 = {
	value = squared_province_distance
	divide = 20
}

square_root_of_distance_1 = {
	value = squared_province_distance
	divide = square_root_of_distance_0
	add = square_root_of_distance_0
	divide = 2
}

square_root_of_distance_2 = {
	value = squared_province_distance
	divide = square_root_of_distance_1
	add = square_root_of_distance_1
	divide = 2
}

square_root_of_distance_3 = {
	value = squared_province_distance
	divide = square_root_of_distance_2
	add = square_root_of_distance_2
	divide = 2
}

square_root_of_distance_3_months = {
	value = squared_province_distance
	divide = square_root_of_distance_2
	add = square_root_of_distance_2
	divide = 2
	divide = 31
}

square_root_of_distance_4 = {
	value = squared_province_distance
	divide = square_root_of_distance_3
	add = square_root_of_distance_3
	divide = 2
}

province_distance = {
	value = squared_province_distance
	divide = square_root_of_distance_4
	add = square_root_of_distance_4
	divide = 2
	ceiling = yes
}

distance_in_months = {
	value = root
	divide = 31
}

# thank you, Hero of Alexandria, for this method!
# https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Heron's_method

direction_from_province = {
	value = 0
	if = {
		limit = {
			save_temporary_scope_as = origin
		}
	}
	add = scope:second.direction_svalue
}

# Used by distance scripted triggers
trigger_to_script_bitsum = {
    value = scope:tmp_testbit
    if = {
        limit = {
            exists = scope:tmp_numbit
        }
        add = scope:tmp_numbit
    }
}

# unused, default value from Tobbzn's framework
distance_to_prev = {
    if = {
        limit = {
            save_temporary_trigger_breakpoint_as = {
                TRIGGER = rf_distance_to_prev
                NAME = tmp
            }
        }
        add = scope:tmp
    }
}
