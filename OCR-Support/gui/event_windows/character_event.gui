window = {
	name = "character_event"
	using = base_ocr_window
	layer = events
	datacontext = "[EventWindow.AccessEventWindowData]"

	state = {
		name = _show
		trigger_on_create = yes
		on_finish = "[Set('event_active', 'yes')]"
		using = slow_events

		start_sound = {
			soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"

			soundparam = {
				name = StateChange
				value = 1
			}
		}
	}

	state = {
		name = "clear"
		trigger_when = "[Is('forced_ocr')]"
		on_finish = "[Clear('ocr')]"
	}

	state = {
		name = _hide
		on_finish = "[Clear('event_active')]"
		on_finish = "[Clear('hide_event')]"
		on_finish = "[Clear('hide_activity')]"
		on_finish = "[Clear('forced_ocr')]"
		using = pause_event

		start_sound = {
			soundeffect = "event:/MUSIC/Cues/Events/kill_mx_cue"
		}
	}

	window = {
		using = ocr_window_bg
		size = { 930 100% }
		visible_at_creation = no

		visible = "[And(Not(GetVariableSystem.Exists('hide_event')), Isnt('ocr'))]"

		state = {
			name = _show
			using = Sound_WindowShow_Standard
		}


		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding


			####
			base_event_ocr = { }
			###

			expand = { }
		}
	}

	window_old_event = {
		visible_at_creation = no
		using = vanilla
	}
}

types OCR {
	type base_event_ocr = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		block "visible event" {
			visible = "[And(Not(GetVariableSystem.Exists('hide_event')), Isnt('ocr'))]"
		}
		vbox = {
			using = ocr_margins
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			block "event_header" {}

			hbox = {
		    layoutpolicy_horizontal = expanding
				spacing = 3
				visible = "[Not(GetVariableSystem.Exists('event_desc'))]"

				text_single = {
					block "activity event" {
						visible = no
					}
					raw_text = "Activity"
				}

				block "event_name" {
					text_single = {
						raw_text = "Event,"
					}
				}

				text_single = {
					visible = "[Not(StringIsEmpty(EventWindowData.GetTitle))]"
					name = "title"
					raw_text = "[EventWindowData.GetTitle]."
					max_width = 850
				}

		    expand = { }
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				visible = "[And(And( EventWindowData.ShouldShowContentSource, EventWindowData.GetContentSourceDlc.HasEventDecoration ), Isnt('event_desc'))]"

				text_single = {
					raw_text = "EVENT_CONTENT_SOURCE_TT"
				}

				expand = {}
			}

			error_button = {
				layoutpolicy_horizontal = expanding
			}

			alpha = 0

			state = {
				name = appear
				trigger_on_create = yes

				using = Animation_Curve_Default
				alpha = 1
			}

			scrollarea = {
				visible = "[Not(GetVariableSystem.Exists('event_desc'))]"
				name = "description_scrollarea"
				layoutpolicy_horizontal = expanding
				# layoutpolicy_vertical = preferred
				block "activity scroll" {
					minimumsize = { 900 -1 }
					maximumsize = { 900 600 }
				}
				autoresizescrollarea = yes

				scrollbarpolicy_horizontal = always_off

				scrollbar_vertical = {
					using = Scrollbar_Vertical
				}

				scrollwidget = {
					text_multi = {
						name = "description"
						block "activity desc" {
							minimumsize = { 900 -1 }
							maximumsize = { 900 -1 }
						}
						autoresize = yes
						text = "[EventWindowData.GetDescription]"
					}
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				blockoverride "scrollbox_content" {

					vbox = {
						allow_outside = yes
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "Apologies, custom widgets like these can only exist in one window."
							visible = "[Is('forced_ocr')]"
							margin_bottom = 10
						}

						hbox = {
							spacing = 5
							layoutpolicy_horizontal = expanding

							hbox = {
								name = "dynamic_birth_name"
								margin = { 5 0 }
							}

							expand = { }
						}

						block "event_extra" {}

						vbox = {
							layoutpolicy_horizontal = expanding
							name = "option_grid"
							datamodel = "[EventWindowData.GetOptions]"
							# spacing = 20

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[GetDataModelSize(EventWindowData.GetOptions)] options:"
								margin_bottom = 5
							}

							item = {
								vbox = {
									layoutpolicy_horizontal = expanding

									button_eventoption_ocr = { }

									button = {
										visible = "[GetVariableSystem.Exists('event_options')]"
										layoutpolicy_horizontal = expanding

										enabled = "[EventOption.IsValid]"

										default_clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
										onclick = "[EventOption.Select]"
										onclick = "[GetVariableSystem.Clear('event_options')]"
										onclick = "[GetVariableSystem.Clear('event_desc')]"
										onclick = "[GetVariableSystem.Clear('hide_event')]"
										onclick = "[GetVariableSystem.Toggle(AddTextIf(Is('forced_ocr'), 'ocr'))]"
										clicksound = "[EventOption.GetClickSound]"
										# using = click_pause_event

										text_multi = {
											resizeparent = yes
											autoresize = yes
											using = wide
											layoutpolicy_horizontal = expanding

											raw_text = "[EventOption.GetTooltip]"
										}
									}
								}
							}
						}

						text_single = {
							visible = "[GetVariableSystem.Exists('event_options')]"
							layoutpolicy_horizontal = expanding
							raw_text = "End of options."
						}

						vbox = {
							name = "travel_event_info"
							visible = "[And(EventWindowData.ThemeKeyStartsWith('travel'), GetPlayer.GetTravelPlan.IsValid)]"
							datacontext = "[GetPlayer.GetTravelPlan]"
							datacontext = "[TravelPlan.GetData]"
							datacontext = "[TravelPlanData.GetCurrentLocation]"

							layoutpolicy_horizontal = expanding

							vbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 3

									text_single = {
										raw_text = "You are"
									}

									text_single = {
										text = "TRAVEL_EVENT_WINDOW_CURRENT_LOCATION"
									}

									expand = { }
								}


								button_text = {
									layoutpolicy_horizontal = expanding
									using = prov_click #TODO
									using = prov_pan
									blockoverride "extra" {

										text_single = {
											raw_text = "[Province.GetNameNoTooltip],"
											visible = "[Or( ObjectsEqual( Province.GetTerrain.GetName,  GetTerrain( 'coastal_sea' ).GetName ), ObjectsEqual( Province.GetTerrain.GetName, GetTerrain( 'sea' ).GetName ) ) ]"
										}

										text_single = {
											raw_text = "[Province.GetName],"
											visible = "[Not( Or( ObjectsEqual( Province.GetTerrain.GetName,  GetTerrain( 'coastal_sea' ).GetName ), ObjectsEqual( Province.GetTerrain.GetName, GetTerrain( 'sea' ).GetName ) ) ) ]"
										}

										text_single = {
											raw_text = "[Terrain.GetName]."
											name = "terrain"
											visible = "[Province.HasTerrain]"
											datacontext = "[Province.GetTerrain]"
											tooltip = "HOLDING_TERRAIN_TOOLTIP"
										}

										text_single = {
											raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)]"
											visible = "[Not(ObjectsEqual(GetPlayer.GetCapitalLocation, Province.Self))]"
										}

										text_single = {
											visible = "[ObjectsEqual(GetPlayer.GetCapitalLocation, Province.Self)]"
											raw_text = "Your capital."
										}
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								### Danger event indicator
								hbox = {
									visible = "[GreaterThanOrEqualTo_CFixedPoint(Subtract_CFixedPoint(Province.GetDangerValue(TravelPlan.Self), TravelPlanData.GetSafetyValue), '(CFixedPoint)0')]"
									datacontext = "[Province.GetDangerType(TravelPlanData.Self)]"
									layoutpolicy_horizontal = expanding
									spacing = 3

									text_single = {
										raw_text = "Warning,"
									}

									text_single = {
										raw_text = "[TravelDangerType.GetName]."
									}

									expand = { }

									tooltip = "[Province.GetTravelDangerTooltip(TravelPlan.Self)]"
								}

								hbox = {
									layoutpolicy_horizontal = expanding

									text_single = {
										text = "TRAVEL_EVENT_WINDOW_NEXT_DESTINATION"
									}

									dot = { }

									expand = { }
								}
							}
						}

						vbox = {
							name = "custom_widgets_container"
							layoutpolicy_horizontal = expanding

							state = {
								trigger_on_create = yes
								name = appear_test

								using = Animation_Curve_Default
								alpha = 1
								# on_finish = "[Set(Select_CString(Is('ocr'), 'forced_ocr', 'ignore'), 'yes')]"
								# on_finish = "[Clear('ocr')]"
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Or(Or(EventWindowData.HasArtifact('lower_left_portrait'), EventWindowData.HasArtifact('lower_center_portrait')), EventWindowData.HasArtifact('lower_right_portrait'))]"
							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "Artifacts:"
							}

							flowcontainer = {
								datacontext = "[EventWindowData.GetArtifact('lower_left_portrait')]"
								visible = "[EventWindowData.HasArtifact('lower_left_portrait')]"
								direction = vertical
								layoutpolicy_horizontal = expanding

								using = artifact_event_flowcontainer_ocr
							}

							flowcontainer = {
								layoutpolicy_horizontal = expanding
								datacontext = "[EventWindowData.GetArtifact('lower_center_portrait')]"
								visible = "[EventWindowData.HasArtifact('lower_center_portrait')]"
								direction = vertical

								using = artifact_event_flowcontainer_ocr
							}

							flowcontainer = {
								layoutpolicy_horizontal = expanding
								datacontext = "[EventWindowData.GetArtifact('lower_right_portrait')]"
								visible = "[EventWindowData.HasArtifact('lower_right_portrait')]"
								direction = vertical

								using = artifact_event_flowcontainer_ocr
							}
						}


						block "event_characters" {
							#characters
							text_single = {
								layoutpolicy_horizontal = expanding
								visible = "[GreaterThan_int32(PdxGuiWidget.AccessParent.FindChild('characters').CountVisibleChildren, '(int32)0')]"
								raw_text = "[PdxGuiWidget.AccessParent.FindChild('characters').CountVisibleChildren] Characters:"
							}

							flowcontainer = {
								direction = vertical
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes
								name = "characters"

								char_name_event = {
									visible = "[EventWindowData.HasPortraitCharacter('left_portrait')]"
									datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
								}
								char_name_event = {
									visible = "[EventWindowData.HasPortraitCharacter('center_portrait')]"
									datacontext = "[EventWindowData.GetPortraitCharacter('center_portrait')]"
								}
								char_name_event = {
									visible = "[EventWindowData.HasPortraitCharacter('right_portrait')]"
									datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
								}
								char_name_event = {
									visible = "[EventWindowData.HasPortraitCharacter('lower_left_portrait')]"
									datacontext = "[EventWindowData.GetPortraitCharacter('lower_left_portrait')]"
								}
								char_name_event = {
									visible = "[EventWindowData.HasPortraitCharacter('lower_center_portrait')]"
									datacontext = "[EventWindowData.GetPortraitCharacter('lower_center_portrait')]"
								}
								char_name_event = {
									visible = "[EventWindowData.HasPortraitCharacter('lower_right_portrait')]"
									datacontext = "[EventWindowData.GetPortraitCharacter('lower_right_portrait')]"
								}
							}
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "Numbers from 1 to 5 select options."
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "[Select_CString(Not(GetVariableSystem.Exists('event_desc')), 'Show', 'Hide')] option effects, Shift E."
							}
							shortcut = map_mode_11
							# onclick = "[PdxGuiTriggerAllAnimations('dismiss_toast')]"
							onclick = "[GetVariableSystem.Toggle('event_desc')]"
							onclick = "[GetVariableSystem.Toggle('event_options')]"
						}
						block "slow_events" {
							button_checked_text = {
								layoutpolicy_horizontal = expanding
								shortcut = map_mode_10
								blockoverride "visible" {
									visible = "[Not(GetPlayer.MakeScope.Var('slow_events').IsSet)]"
								}
								blockoverride "text" {
									raw_text = "events slow down speed to 2, Shift W."
								}
								onclick = "[Click('slow_events')]"
							}
							button_checked_text = {
								layoutpolicy_horizontal = expanding
								shortcut = map_mode_7
								blockoverride "visible" {
									visible = "[GetPlayer.MakeScope.Var('pause_event').IsSet]"
								}
								blockoverride "text" {
									raw_text = "stay paused after event, Control W."
								}
								onclick = "[Click('pause_event')]"
							}
							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "[Select_CString(Not(GetVariableSystem.Exists('event_desc')), 'Hide', 'Show')] description, Shift D."
								}
								shortcut = mapmode_house_secondary
								onclick = "[GetVariableSystem.Clear('event_options')]"
								onclick = "[GetVariableSystem.Toggle('event_desc')]"
							}
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							block "close_event" {}
							shortcut = close_window
							block "activity event" {
								onclick = "[GetVariableSystem.Toggle('hide_event')]"
							}
							blockoverride "text" {
								# raw_text = "Minimize event window, Escape."
							}
						}
					}
				}
			}
			expand = { }
		}
	}

	type window_event_ocr = window {
		using = base_ocr_window
		layer = events
		datacontext = "[EventWindow.AccessEventWindowData]"

		state = {
			name = _show
			trigger_on_create = yes
			on_finish = "[Set('event_active', 'yes')]"
			using = slow_events

			start_sound = {
				soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"

				soundparam = {
					name = StateChange
					value = 1
				}
			}
		}

		state = {
			name = "clear"
			trigger_when = "[Is('forced_ocr')]"
			on_finish = "[Clear('ocr')]"
		}

		state = {
			name = _hide
			on_finish = "[Clear('event_active')]"
			on_finish = "[Clear('hide_event')]"
			on_finish = "[Clear('hide_activity')]"
			on_finish = "[Clear('forced_ocr')]"
			using = pause_event

			start_sound = {
				soundeffect = "event:/MUSIC/Cues/Events/kill_mx_cue"
			}
		}

		window = {
			using = ocr_window_bg
			size = { 930 100% }
			visible_at_creation = no

			visible = "[And(Not(GetVariableSystem.Exists('hide_event')), Isnt('ocr'))]"

			state = {
				name = _show
				using = Sound_WindowShow_Standard
			}


			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding


				####
				base_event_ocr = { }
				###

				expand = { }
			}
		}
	}

	type window_old_event = window {
		parentanchor = center
		widgetanchor = center
		size = { 1120 580 }
		alpha = 1
		using = Event_Window_Debug_OptionTooltips

		datacontext = "[EventWindow.AccessEventWindowData]"

		# state = {
		# 	name = show
		# 	trigger_on_create = yes
		# 	using = Animation_FadeIn_Standard
		# 	duration = 0.7
		#
		# 	on_start = "[GetVariableSystem.Clear( 'event_window_mouse_leave')]"
		#
		# 	start_sound = {
		# 		soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"
		#
		# 		soundparam = {
		# 			name = StateChange
		# 			value = 1
		# 		}
		# 	}
		# }
		#
		# state = {
		# 	name = _hide
		# 	using = Animation_FadeOut_Standard
		#
		# 	start_sound = {
		# 		soundeffect = "event:/MUSIC/Cues/Events/kill_mx_cue"
		# 	}
		# }

		state = {
			name = _mouse_hierarchy_leave
			on_start = "[GetVariableSystem.Set( 'event_window_mouse_leave', 'true' )]"
		}

		widget = {
			visible = "[Not(GameHasMultiplePlayers)]"
			size = { 100% 100% }

			icon = {
				visible = "[Not(GetVariableSystem.Exists( 'event_window_mouse_leave'))]"
				parentanchor = center
				size = { 200% 200% }
				alwaystransparent = yes
				texture = "gfx/interface/component_masks/mask_fade_circle.dds"
				color = { 0.1 0.1 0.1 1 }
				alpha = 0

				state = {
					name = appear
					trigger_on_create = yes
					delay = 0.2
					using = Animation_Curve_Default
					alpha = 0.6
					duration = 0.8
				}

				state = {
					name = _hide
					using = Animation_Curve_Default
					duration = 3
					alpha = 0
				}
			}
		}

		widget = {
			size = { 100% 100% }
			using = Window_Background
			using = Window_Decoration_Frontend_Flat
		}

		event_window_background_widget = {
			margin = { 30 20 }

			blockoverride "event_picture_properties"
			{}
		}

		###CHARACTERS
		widget = {
			name = "characters"
			layoutstretchfactor_horizontal = 55
			parentanchor = bottom|hcenter
			size = { 100% 100% }
			position = { -30 -15 }
			scissor = yes

			state = {
				name = appear
				trigger_on_create = yes
				delay = 0.5
				using = Animation_Curve_Default
				alpha = 1
				duration = 0.5
			}

			### RIGHT CHARACTER ###
			widget = {
				parentanchor = bottom|right
				position = { 10 0 }
				size = { 330 558 }

				allow_outside = no

				portrait_event = {
					name = "portrait_right"
					datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
					visible = "[EventWindowData.HasPortraitCharacter('right_portrait')]"
					parentanchor = bottom|hcenter
					position = { -80 -1 }
					size = { 500 558 }

					blockoverride "portrait_button"
					{
						size = { 700 558 }
						portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('right_portrait', 'camera_event_right', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
						alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('right_portrait'))]"

						tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('right_portrait')]"
						tooltip_offset = { -210 0 }
					}

					blockoverride "highlight_visible"
					{
						visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('right_portrait') ))]"
						position = { 80 0 }
					}

					blockoverride "grayscale" {}

					highlight_icon = {
						name = "prison_bars"
						visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('right_portrait')))]"
						visible_at_creation = no
						size = { 285 500 }
						position = { -30 0 }
						parentanchor = bottom|right
						effectname = "NoHighlight"
						spriteType = corneredTiled
						texture_density = 1.5
						texture = "gfx/portraits/portrait_prison_body.dds"

						modify_texture = {
							name = "mask"
							texture =  "gfx/portraits/portrait_mask_event.dds"
							spriteType = Corneredstretched
							blend_mode = alphamultiply
						}
					}
				}
			}

			## LEFT CHARACTER ###
			widget = {
				parentanchor = bottom|hcenter
				position = { 90 -1 }
				size = { 330 558 }

				allow_outside = no

				portrait_event = {
					name = "portrait_left"
					datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
					visible = "[And(EventWindowData.HasPortraitCharacter('left_portrait'), EventWindowData.HasPortraitCharacter('right_portrait'))]"
					parentanchor = bottom|hcenter
					position = { 80 0 }
					size = { 500 558 }

					blockoverride "portrait_button"
					{
						size = { 700 558 }
						portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('left_portrait', 'camera_event_left', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
						alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('left_portrait'))]"

						tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"
						using = tooltip_below
						tooltip_widgetanchor = center
					}

					blockoverride "highlight_visible"
					{
						visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('left_portrait') ))]"
						position = { -40 0 }
					}

					blockoverride "grayscale" {}

					highlight_icon = {
						name = "prison_bars"
						visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('left_portrait')))]"
						visible_at_creation = no
						size = { 280 500 }
						position = { 70 0 }
						parentanchor = bottom|left
						effectname = "NoHighlight"
						spriteType = corneredTiled
						texture_density = 1.5
						texture = "gfx/portraits/portrait_prison_body.dds"

						modify_texture = {
							name = "mask"
							texture =  "gfx/portraits/portrait_mask_event.dds"
							spriteType = Corneredstretched
							blend_mode = alphamultiply
						}
					}
				}
			}


			### Use this for single character
			portrait_event = {
				name = "portrait_center"
				visible = "[And(EventWindowData.HasPortraitCharacter('left_portrait'), Not(EventWindowData.HasPortraitCharacter('right_portrait')))]"
				datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
				size = { 500 558 }
				position = { 200 -2 }
				parentanchor = bottom|hcenter

				blockoverride "portrait_button"
				{
					size = { 700 558 }
					portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('left_portrait', 'camera_event_center', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
					alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('left_portrait'))]"
					tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"
					using = tooltip_below
					tooltip_offset = { 550 -580 }
				}

				blockoverride "highlight_visible"
				{
					visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('left_portrait') ))]"
				}

				blockoverride "grayscale" {}

				highlight_icon = {
					name = "prison_bars"
					visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('left_portrait')))]"
					visible_at_creation = no
					size = { 300 500 }
					position = { -60 0 }
					parentanchor = bottom|hcenter
					effectname = "NoHighlight"
					spriteType = corneredTiled
					texture_density = 1.5
					texture = "gfx/portraits/portrait_prison_body.dds"

					modify_texture = {
						name = "mask"
						texture =  "gfx/portraits/portrait_mask_event.dds"
						spriteType = Corneredstretched
						blend_mode = alphamultiply
					}
				}
			}
		}

		# Event Effect Video
		event_window_effect_2d_widget = {
			margin = { 30 20 }
		}

		# Window Edge Fade
		icon = {
			texture = "gfx/interface/colors/black.dds"
			parentanchor = right|vcenter
			position = { -22 0 }
			size = {2% 96%}
			using = Mask_Rough_Edges

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
				blend_mode = alphaMultiply
			}
		}

		vbox = {
			name = "event_window"

			widget = {
				name = "event_window_content"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				hbox = {
					margin = { 35 0 }
					margin_bottom = 15

					widget = {
						name = "text_spacer"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 45
					}
				}

				hbox = {
					margin_left = 35
					margin_right = 35
					margin_bottom = 15

					widget = {
						name = "text"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 45

						widget = {
							size = { 155% 96%}
							position = { -5 18 }

							background = {
								texture = "gfx/interface/component_tiles/tile_window_background_no_edge.dds"
								spriteType = Corneredtiled
								spriteborder = { 18 0 }
								texture_density = 2
								alpha = 0.7

								modify_texture = {
									texture = "gfx/interface/component_overlay/overlay_effect.dds"
									blend_mode = overlay
								}

								modify_texture = {
									texture = "gfx/interface/component_masks/mask_event_text.dds"
									blend_mode = alphamultiply
									alpha = 1
								}
							}
						}

						vbox = {
							name = "description_and_options"

							state = {
								name = appear
								trigger_on_create = yes
								delay = 0.2
								using = Animation_Curve_Default
								alpha = 1
								duration = 1.5
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_bottom = 10
								margin_top = 85

								scrollarea = {
									name = "description_scrollarea"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									minimumsize = { 490 -1 }
									maximumsize = { 490 -1 }

									scrollbarpolicy_horizontal = always_off

									scrollbar_vertical = {
										using = Scrollbar_Vertical

										blockoverride "alpha"{
											alpha = 0.6
										}
									}

									scrollwidget = {
										text_multi = {
											name = "description"
											minimumsize = { 480 -1 }
											maximumsize = { 480 -1 }
											autoresize = yes
											margin = { 20 4 }
											text = "[EventWindowData.GetDescription]"
											fontsize = 16
										}
									}
								}

								expand = {}
							}

							vbox = {
								allow_outside = yes
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes
								spacing = 5
								margin_bottom = 5

								hbox = {
									spacing = 5

									hbox = {
										name = "dynamic_birth_name"
										margin = { 5 0 }
									}
								}


								vbox = {
									name = "custom_widgets_container"
									layoutpolicy_horizontal = expanding

									state = {
										trigger_on_create = yes
										name = appear_test
										delay = 0.8
										using = Animation_Curve_Default
										alpha = 1
										duration = 0.6
									}
								}

								vbox = {
									name = "travel_event_info"
									visible = "[And(EventWindowData.ThemeKeyStartsWith('travel'), GetPlayer.GetTravelPlan.IsValid)]"
									layoutpolicy_horizontal = expanding
									margin = { 20 0 }

									divider_light = {
										layoutpolicy_horizontal = expanding

										modify_texture = {
											texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
											blend_mode = alphamultiply
										}
									}

									hbox = {
										layoutpolicy_horizontal = expanding

										hbox = {
											datacontext = "[GetPlayer.GetTravelPlan]"
											datacontext = "[TravelPlan.GetData]"
											datacontext = "[TravelPlanData.GetCurrentLocation]"

											layoutpolicy_horizontal = expanding
											spacing = 5

											### CoA
											coa_title_small = {
												datacontext = "[Province.GetTitle]"
												visible = "[Title.HasHolder]"
											}

											vbox = {
												layoutpolicy_horizontal = expanding

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "TRAVEL_EVENT_WINDOW_CURRENT_LOCATION"
													align = left|nobaseline
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													spacing = 5

													### Location Name
													text_single = {
														text = "[Province.GetNameNoTooltip]"
														visible = "[Or( ObjectsEqual( Province.GetTerrain.GetName,  GetTerrain( 'coastal_sea' ).GetName ), ObjectsEqual( Province.GetTerrain.GetName, GetTerrain( 'sea' ).GetName ) ) ]"
														align = left|nobaseline
													}

													text_single = {
														text = "[Province.GetName]"
														visible = "[Not( Or( ObjectsEqual( Province.GetTerrain.GetName,  GetTerrain( 'coastal_sea' ).GetName ), ObjectsEqual( Province.GetTerrain.GetName, GetTerrain( 'sea' ).GetName ) ) ) ]"
														align = left|nobaseline
													}

													icon = {
														name = "terrain"
														visible = "[Province.HasTerrain]"
														datacontext = "[Province.GetTerrain]"
														texture = "[Terrain.GetIcon]"
														size = { 25 25 }
														tooltip = "HOLDING_TERRAIN_TOOLTIP"
													}

													expand = {}

												}
											}

											expand = {
												layoutpolicy_horizontal = expanding
											}

											vbox = {
												layoutpolicy_horizontal = expanding
												margin = { 20 4 }

												### Danger event indicator
												hbox = {
													visible = "[GreaterThanOrEqualTo_CFixedPoint(Subtract_CFixedPoint(Province.GetDangerValue(TravelPlan.Self), TravelPlanData.GetSafetyValue), '(CFixedPoint)0')]"
													datacontext = "[Province.GetDangerType(TravelPlanData.Self)]"
													layoutpolicy_horizontal = expanding
													spacing = 5

													expand = {}

													warning_icon = {
														size = { 28 28 }
													}

													widget = {
														size = { 30 30 }
														icon = {
															texture = "[TravelDangerType.GetIconActive]"
															parentanchor = center
															size = { 35 35 }
														}
													}

													### Put some indicator of travel danger intensity vs travel safety here, when we have decided on exactly what that is.
													#text_single = {
													#	raw_text = "33%"
													#	default_format = "#d"
													#	align = right|nobaseline
													#}

													tooltip = "[Province.GetTravelDangerTooltip(TravelPlan.Self)]"
												}

												hbox = {
													layoutpolicy_horizontal = expanding

													expand =  {}

													### ETA to your next destination
													text_single = {
														layoutpolicy_horizontal = expanding
														text = "TRAVEL_EVENT_WINDOW_NEXT_DESTINATION"
														align = right|nobaseline
													}
												}
											}
										}
									}
								}

								fixedgridbox = {
									name = "option_grid"
									addcolumn = 500
									addrow = 42
									datamodel = "[EventWindowData.GetOptions]"

									item = {
										button_eventoption = {}
									}
								}
							}
						}
					}

					widget = {
						name = "characters_spacer"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 55
					}
				}
			}
		}

		margin_widget = {
			name = "bottom_characters"
			size = { 55% 170 }
			position = { -14 -10}
			parentanchor = bottom|right
			margin_bottom = 10
			allow_outside = yes

			icon = {
				name = "bottom_characters_bg"
				visible = "[Or(EventWindowData.HasPortraitOrArtifact('lower_left_portrait'), Or(EventWindowData.HasPortraitOrArtifact('lower_center_portrait'), EventWindowData.HasPortraitOrArtifact('lower_right_portrait')))]"
				position = { 0 0 }
				size = { 100% 100% }
				texture = "gfx/interface/window_event/event_bottom_char_bg.dds"
			}

			flowcontainer = {
				spacing = 20
				parentanchor = bottom|hcenter

				flowcontainer = {
					parentanchor = bottom
					direction = vertical
					ignoreinvisible = yes

					event_portrait_status_icons_left = {
						datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
						visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"

						background = {
							texture = "gfx/interface/window_event/event_character_status_icons_bg.dds"
							spriteType = Corneredtiled
							spriteborder = { 20 20 }
							shaderfile = "gfx/FX/pdxgui_default.shader"
							alpha = 0.5
							margin = { 5 5 }

							modify_texture = {
								texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
								spriteType = Corneredstretched
								spriteborder = { 0 0 }
								blend_mode = overlay
								alpha = 0.5
							}
						}
					}

					spacer = {
						size = { 140 0 }
					}

					flowcontainer = {
						datacontext = "[EventWindowData.GetArtifact('lower_left_portrait')]"
						visible = "[EventWindowData.HasArtifact('lower_left_portrait')]"
						direction = vertical
						spacing =-5

						using = artifact_event_flowcontainer
					}

					widget = {
						datacontext = "[EventWindowData.GetPortraitCharacter('lower_left_portrait')]"
						visible = "[EventWindowData.HasPortraitCharacter('lower_left_portrait')]"
						size = { 140 150 }

						portrait_event_small = {
							name = "portrait_left_small_1"
							parentanchor = center
							position = { 0 -4 }

							blockoverride "portrait_button"
							{
								portrait_texture = "[EventWindowData.GetStaticEventPortraitTexture('lower_left_portrait', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
								alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_left_portrait'))]"
								tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_left_portrait')]"
							}

							blockoverride "highlight_visible"
							{
								visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_left_portrait') ))]"
							}

							blockoverride "status_icons" {}
							blockoverride "opinion_box" {}
							blockoverride "grayscale" {}

							blockoverride "coa"
							{
								event_portrait_status_icons_left = {
									visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
									parentanchor = bottom|left
									position = { -15 -5 }
									scale = 0.8

									background = {
										using = Background_Bottom_Fade
										margin = { 5 15 }
										using = Color_Black
										using = Mask_Rough_Edges
										alpha =  0.5

										modify_texture = {
											texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
											spriteType = Corneredstretched
											spriteborder = { 0 0 }
											blend_mode = overlay
										}
									}
								}
							}

							text_label_center = {
								parentanchor = bottom|hcenter
								position = { 20 -5 }
								alwaystransparent = yes
								text = "[Character.GetShortUINameNoTooltip]"
								visible = "[EventWindowData.ShouldShowPortraitInfo('lower_left_portrait')]"
								max_width = 115
								align = center
								fontsize_min = 12
							}
						}
					}
				}

				flowcontainer = {
					parentanchor = bottom
					direction = vertical
					ignoreinvisible = yes

					spacer = {
						size = { 140 0 }
					}

					flowcontainer = {
						datacontext = "[EventWindowData.GetArtifact('lower_center_portrait')]"
						visible = "[EventWindowData.HasArtifact('lower_center_portrait')]"
						direction = vertical
						spacing =-5

						using = artifact_event_flowcontainer

						background = {
							using = Background_Area_Dark
							alpha = 0.4
							margin_bottom = -30
							margin_top = 10

							modify_texture = {
								name = "mask"
								texture = "gfx/interface/component_masks/mask_glow.dds"
								blend_mode = alphamultiply
							}
						}
					}

					widget = {
						datacontext = "[EventWindowData.GetPortraitCharacter('lower_center_portrait')]"
						visible = "[EventWindowData.HasPortraitCharacter('lower_center_portrait')]"
						size = { 140 150 }

						portrait_event_small = {
							name = "portrait_left_small_2"
							parentanchor = center
							position = { 0 -4 }

							blockoverride "portrait_button"
							{
								portrait_texture = "[EventWindowData.GetStaticEventPortraitTexture('lower_center_portrait', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
								alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_center_portrait'))]"
								tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_center_portrait')]"
							}

							blockoverride "highlight_visible"
							{
								visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_center_portrait') ))]"
							}

							blockoverride "status_icons" {}
							blockoverride "opinion_box"{}
							blockoverride "grayscale" {}

							blockoverride "coa"
							{
								event_portrait_status_icons_left = {
									visible = "[EventWindowData.ShouldShowPortraitInfo('lower_center_portrait')]"
									parentanchor = bottom|left
									position = { -15 -5 }
									scale = 0.8

									background = {
										using = Background_Bottom_Fade
										margin = { 5 15 }
										color = { 0.1 0.1 0.1 0.8 }

										modify_texture = {
											texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
											spriteType = Corneredstretched
											spriteborder = { 0 0 }
											blend_mode = overlay
										}
									}
								}
							}


							text_label_center = {
								parentanchor = bottom|hcenter
								position = { 20 -5 }
								alwaystransparent = yes
								text = "[Character.GetShortUINameNoTooltip]"
								visible = "[EventWindowData.ShouldShowPortraitInfo('lower_center_portrait')]"
								max_width = 115
								align = center
								fontsize_min = 12
							}
						}
					}
				}

				flowcontainer = {
					parentanchor = bottom
					direction = vertical
					ignoreinvisible = yes

					event_portrait_status_icons_right = {
						datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
						visible = "[EventWindowData.ShouldShowPortraitInfo('right_portrait')]"
						parentanchor = right

						background = {
							texture = "gfx/interface/window_event/event_character_status_icons_bg.dds"
							spriteType = Corneredtiled
							spriteborder = { 20 20 }
							shaderfile = "gfx/FX/pdxgui_default.shader"
							alpha = 0.5
							margin = { 5 5 }

							modify_texture = {
								texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
								spriteType = Corneredstretched
								spriteborder = { 0 0 }
								blend_mode = overlay
								alpha = 0.5
							}
						}
					}

					spacer = {
						size = { 140 0 }
					}

					flowcontainer = {
						datacontext = "[EventWindowData.GetArtifact('lower_right_portrait')]"
						visible = "[EventWindowData.HasArtifact('lower_right_portrait')]"
						direction = vertical
						spacing =-5

						using = artifact_event_flowcontainer
					}

					widget = {
						datacontext = "[EventWindowData.GetPortraitCharacter('lower_right_portrait')]"
						visible = "[EventWindowData.HasPortraitCharacter('lower_right_portrait')]"
						size = { 140 150 }

						portrait_event_small = {
							name = "portrait_right_small_1"
							parentanchor = center
							position = { 0 -4 }

							blockoverride "portrait_button"
							{
								portrait_texture = "[EventWindowData.GetStaticEventPortraitTexture('lower_right_portrait', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
								alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_right_portrait'))]"
								tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
							}

							blockoverride "portrait_transformation"
							{
								portrait_scale = { -1 1 }
								portrait_offset = { 1 0 }
							}

							blockoverride "highlight_visible"
							{
								visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_right_portrait') ))]"
							}

							blockoverride "status_icons"{}
							blockoverride "opinion_box"{}
							blockoverride "grayscale" {}

							blockoverride "coa"
							{
								event_portrait_status_icons_left = {
									visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
									parentanchor = bottom|left
									position = { -15 -5 }
									scale = 0.8

									background = {
										using = Background_Bottom_Fade
										margin = { 5 15 }
										using = Color_Black
										using = Mask_Rough_Edges
										alpha =  0.5

										modify_texture = {
											texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
											spriteType = Corneredstretched
											spriteborder = { 0 0 }
											blend_mode = overlay
										}
									}
								}
							}

							text_label_center = {
								parentanchor = bottom|hcenter
								position = { 20 -5 }
								alwaystransparent = yes
								text = "[Character.GetShortUINameNoTooltip]"
								visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
								max_width = 115
								align = center
								fontsize_min = 12
							}
						}
					}
				}
			}
		}

		vbox = {
			widget = {
				layoutpolicy_horizontal = expanding
				size = { 0 70 }

				icon = {
					name = "theme_header"
					position = { 24 6 }
					size = { 1050 76 }
					texture = "gfx/interface/window_event/header_neutral.dds"

					modify_texture = {
						name = overlay
						texture = "gfx/interface/component_effects/effect_header_blue_shine.dds"
						blend_mode = colordodge
						translate_uv = { 0.6 0 }
					}

					modify_texture = {
						name = mask
						texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
						blend_mode = alphamultiply
						translate_uv = { 0.2 0 }
					}

					state = {
						name = right
						next = left

						duration = 8
						bezier = { 0.8 0.18 0.96 .05 }

						modify_texture = {
							name = overlay
							translate_uv = { -0.6 0 }
						}
					}

					state = {
						name = left
						next = right

						duration = 0.0
						delay = 5

						modify_texture = {
							name = overlay
							translate_uv = { 0.6 0 }
						}
					}

					state = {
						trigger_on_create = yes
						name = start
						next = right

						duration = 0.0

						modify_texture = {
							name = overlay
							translate_uv = { 0.6 0 }
						}
					}
				}

				text_single = {
					name = "title"
					parentanchor = vcenter
					position = { 110 4 }
					fontsize = 29
					fontsize_min = 16
					text = "[EventWindowData.GetTitle]"
					default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
					using = Font_Type_Flavor
					max_width = 950

					alpha = 0

					state = {
						name = start
						trigger_on_create = yes
						delay = 0.2
						using = Animation_Curve_Default
						alpha = 1
						duration = 0.5
					}
				}

				icon = {
					name = "theme_icon"
					parentanchor = vcenter
					position = { 20 9 }
					size = { 80 80 }
					texture = "[EventWindowData.GetThemeIcon]"

					modify_texture = {
						name = overlay
						texture = "gfx/interface/component_effects/effect_blue_shine.dds"
						blend_mode = colordodge
						translate_uv = { 0.6 0 }
					}

					state = {
						name = right
						next = left

						duration = 2
						bezier = { .8 .18 .96 .05 }

						modify_texture = {
							name = overlay
							translate_uv = { -0.6 0 }
						}
					}

					state = {
						name = left
						next = right

						duration = 0.0
						delay = 5


						modify_texture = {
							name = overlay
							translate_uv = { 0.6 0 }
						}
					}

					state = {
						trigger_on_create = yes
						name = start
						next = right

						duration = 0.0

						modify_texture = {
							name = overlay
							translate_uv = {0.6 0}
						}
					}
				}
			}

			expand = {}
		}
		icon = {
			visible = "[And( EventWindowData.ShouldShowContentSource, EventWindowData.GetContentSourceDlc.HasEventDecoration )]"
			name = "source_icon"
			position = { -22 20 }
			size = { 263 64 }
			parentanchor = top|right
			texture = "[EventWindowData.GetContentSourceDlc.GetEventDecoration]"
			tooltip = "EVENT_CONTENT_SOURCE_TT"
			alpha = 1
		}

		flowcontainer = {
			name = "debug_stuff"
			visible = "[InDebugMode]"
			parentanchor = top|right
			position = { -100 25 }
			ignoreinvisible = yes

			using = Event_Window_Debug_Info
		}
	}

	type button_eventoption_ocr = button_event_standard
	{
		name = "event_option_button"
		block "activity option" {
			size = { 900 36 }
		}
		# onclick = "[PdxGuiTriggerAllAnimations('dismiss_toast')]"
		enabled = "[EventOption.IsValid]"

		default_clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
		onclick = "[EventOption.Select]"
		onclick = "[GetVariableSystem.Clear('event_desc')]"
		onclick = "[GetVariableSystem.Clear('event_options')]"
		onclick = "[GetVariableSystem.Clear('hide_event')]"
		onclick = "[GetVariableSystem.Toggle(AddTextIf(Is('forced_ocr'), 'ocr'))]"
		# using = click_pause_event
		clicksound = "[EventOption.GetClickSound]"

		block "onmousehierarchy_callbacks" {
			onmousehierarchyenter = "[EventOption.OnEnter]"
			onmousehierarchyleave = "[EventOption.OnLeave]"
		}

		background = { using = Background_Area_Border_Solid }

		# icon = {
		# 	texture = "gfx/interface/buttons/button_event.dds"
		# 	alpha = 1
		# 	spriteType = Corneredtiled
		# 	spriteborder = { 3 3 }
		# 	framesize = { 249 78 }
		# 	size = { 100% 100% }
		#
		# 	modify_texture = {
		# 		name = "mask"
		# 		texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
		# 		spriteType = Corneredtiled
		# 		spriteborder_left = 40
		# 		spriteborder_right = 40
		# 		blend_mode = alphamultiply
		# 	}
		# }

		# Trick to not have the option text steal tooltips from the trait/skill grid
		hbox = {
			tooltip = "[EventOption.GetTooltip]"
			tooltip_visible = "[Not( StringIsEmpty( EventOption.GetTooltip ) )]"
			using = tooltip_ws
			tooltip_offset = { -80 0 }

			# Wider tooltips for the effects
			tooltipwidget = {
				using = DefaultTooltipWidget
			}
		}


		### BUTTON CONTENT ####
		hbox = {
			margin = { 5 0 }
			margin_bottom = 5
			spacing = 3

			hbox = {
				# fixedgridbox = {
				# 	name = "traits_grid"
				# 	datamodel = "[EventOption.Reasons]"
				# 	addcolumn = 34
				# 	addrow = 34
				# 	flipdirection = yes
				# 	maxhorizontalslots = 1
				#
				# 	item = {
				# 		icon = {
				# 			name = "trait_icon"
				# 			datacontext = "[ReasonItem.GetTrait]"
				# 			visible = "[ReasonItem.IsTrait]"
				# 			size = { 34 34 }
				# 			alwaystransparent = yes
				# 			texture = "[Trait.GetIcon(GetPlayer)]"
				# 			tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_TRAIT"
				# 			using = tooltip_nw
				# 		}
				# 	}
				# }

				warning_icon = {
					visible = "[And( EventOption.IsTimeoutOption, And( GameHasMultiplePlayers, LessThanOrEqualTo_int32( EventWindowData.GetDaysRemaining, '(int32)30' ) ) )]"
					name = "timeout_icon"
					size = { 30 30 }
					tooltip = EVENT_WINDOW_DAYS_REMAINING
				}

				#TODO
				# hbox = {
				# 	name = "skill_grid"
				# 	datamodel = "[EventOption.Reasons]"
				#
				# 	item = {
				# 		icon = {
				# 			name = "skill_icon"
				# 			datacontext = "[ReasonItem.GetSkillItem]"
				# 			visible = "[ReasonItem.IsSkill]"
				# 			texture = "gfx/interface/icons/icon_skills.dds"
				# 			size = { 34 34 }
				# 			framesize = { 60 60 }
				# 			alwaystransparent = yes
				# 			frame = "[SkillItem.GetFrame]"
				# 			tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_SKILL"
				# 			using = tooltip_ws
				# 		}
				# 	}
				# }
			}

			text_single = {
				raw_text = "Disabled"
				visible = "[Not(EventOption.IsValid)]"
			}

			text_single = {
				raw_text = "Special"
				visible = "[And(EventOption.HasFlag('special'), Not(EventOption.HasFlag('dangerous')))]"
			}

			text_single = {
				raw_text = "Dangerous"
				visible = "[EventOption.HasFlag('dangerous')]"
			}

			text_single = {
				raw_text = "Option"
			}

			text_single = {
				raw_text = "[IndexNumber],"
			}

			block "number" {}

			text_single = {
				raw_text = "[EventOption.GetText]"
				max_width = 800
			}

			shortcuts_list = {
				blockoverride "click" {
					# using = click_pause_event
					# onclick = "[PdxGuiTriggerAllAnimations('dismiss_toast')]"
					default_clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
					onclick = "[EventOption.Select]"
					onclick = "[GetVariableSystem.Clear('event_desc')]"
					onclick = "[GetVariableSystem.Clear('event_options')]"
					onclick = "[GetVariableSystem.Clear('hide_event')]"
					onclick = "[GetVariableSystem.Toggle(AddTextIf(Is('forced_ocr'), 'ocr'))]"
					clicksound = "[EventOption.GetClickSound]"
				}
				blockoverride "confirm shortcut" {

				}
			}

			hbox = {
				name = "effects_grid"
				datamodel = "[EventOption.Effects]"

				item = {
					container = {

						flowcontainer = {
							visible = "[OptionEffectItem.IsTrait]"
							alwaystransparent = yes
							ignoreinvisible = yes
							spacing = 3

							text_single = {
								raw_text = "Gain"
								visible = "[OptionEffectItem.IsGain]"
							}

							text_single = {
								raw_text = "Lose"
								visible = "[OptionEffectItem.IsLoss]"
							}

							text_single = {
								datacontext = "[OptionEffectItem.GetTrait]"
								datacontext = "[GetPlayer]"
								datacontext = "[GetPlayer.GetFaith]"

								tooltipwidget = {
									using = character_trait_tooltip
								}
								raw_text = "[Trait.GetName( GetPlayer)]."
							}
						}

						container = {
							visible = "[OptionEffectItem.IsStress]"
							alwaystransparent = yes
							ignoreinvisible = yes

							text_single = {
								raw_text = "Gain stress."
								visible = "[And(OptionEffectItem.IsGain,Not(OptionEffectItem.IsCritical))]"
							}

							text_single = {
								raw_text = "Lose stress."
								visible = "[OptionEffectItem.IsLoss]"
							}

							text_single = {
								raw_text = "Critical stress gain."
								visible = "[OptionEffectItem.IsCritical]"
							}
						}

						text_single = {
							raw_text = "Death!"
							visible = "[OptionEffectItem.IsDeath]"
						}

						text_single = {
							raw_text = "Scheme."
							visible = "[OptionEffectItem.IsScheme]"
							# texture = "[OptionEffectItem.GetScheme.GetIcon]"
						}
					}
				}
			}

			block "confirm" { }

			expand = { }
		}
	}

	type char_name_event = char_name {
		onclick = "[GetVariableSystem.Toggle('hide_event')]"
		onclick = "[Set('hide_activity', 'yes')]"

		blockoverride "extra" {
			spacing = 3
			text_single = {
				raw_text = "[Character.GetAge],"
			}
			text_single = {
				visible = "[Not(Character.IsLocalPlayer)]"
				raw_text = "[Character.GetOpinionOf( GetPlayer )|=0] opinion,"
			}
			flowcontainer = {
				ignoreinvisible = yes
				visible = "[Not(Character.IsLocalPlayer)]"
				text_single = {
					visible = "[And(Character.HasLandedTitles, Character.IsAlive)]"
					raw_text = "[Character.GetMilitaryStrengthText] men."
				}
			}
			text_single = {
				visible = "[Not(Character.IsLocalPlayer)]"
				raw_text = "[Character.GetRelationToString(GetPlayer)]."
			}
			block "ptv" {}
			flow_skills_grid_character_short = {}
		}
	}
}

### OCR

template slow_events {
	on_finish = "[SetGameSpeed(Select_int32(And(Show('slow_events'), Isnt('ocr')),'(int32)1', Subtract_int32(GetCurrentGameSpeed, '(int32)1')))]"
}

template only_slow_events {
	on_finish = "[SetGameSpeed(Select_int32(And(Show('slow_events'), Isnt('ocr')),'(int32)1', Subtract_int32(GetCurrentGameSpeed, '(int32)1')))]"
}

template pause_event {
	on_finish = "[Set('pause_event', 'yes')]"
}

template click_pause_event {
	onclick = "[Set('pause_event', 'yes')]"
}
