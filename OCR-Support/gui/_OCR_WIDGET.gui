window = {
	# size = { 100% 100% }
	# name = "blackout"
	# layer = top
	# texture = "gfx/interface/colors/black.dds"
	# alwaystransparent = yes
	#
	# visible = "[GetVariableSystem.Exists('blackout')]"

	# button_standard = {
	# 	size = { 0 0 }
	# 	onclick = "[GetVariableSystem.Toggle('ocr')]"
	# 	shortcut = "map_mode_8"
	# }
	# button_standard = {
	# 	size = { 0 0 }
	# 	onclick = "[GetVariableSystem.Toggle('tooltip_focus')]"
	# 	shortcut = "map_mode_8"
	# }
}

window = {
	layer = debug
	name = "OCR_WIDGET"
	size = { 100% 100% }
	alwaystransparent = yes

	# button = {
	# 	shortcut = confirm
	# 	onclick = "[GetScriptedGui('quicksave').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
	# }

	# text_single = {
	# 	background = { using = Background_Area_Border_Solid }
	# 	position = { 0 120 }
	# 	visible = "[Is('toasted')]"
	# 	raw_text = "TOAST"
	# }


	window = {
		using = Window_Size_MainTab
		using = Window_Background_No_Edge
		visible = no
		# visible = "[Not(InReleaseMode)]"

		flowcontainer = {
			ignoreinvisible = yes
			direction = vertical
			using = Window_Margins
			spacing = 3

			error_button = {}

			button_primary = {
				raw_text = "Next"
				onclick = "[GetScriptedGui('next_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('page', MakeScopeFlag('rules_page')).End )]"
			}

			button_primary = {
				raw_text = "Prev"
				onclick = "[GetScriptedGui('prev_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('page', MakeScopeFlag('rules_page')).End )]"
			}

			button_primary = {
				raw_text = "Reset"
				onclick = "[GetScriptedGui('reset_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('page', MakeScopeFlag('rules_page')).End )]"
			}

			text_single = {
				raw_text = "[GetPlayer.MakeScope.Var('rules_page').GetValue|0] items"
			}
		}
	}

	# error_button = { }

	# window = {
	# 	# using = Window_Background_No_Edge
	# 	size = { 100% 100% }
	#
	# 	window = {
	# 		size = { 100% 100% }
	# 		visible = "[Isnt('fix_flicker')]"
	# 		using = Window_Background_No_Edge
	# 	}
	#
	# 	button_text = {
	# 		visible = "[GetPlayer.IsValid]"
	# 		shortcut = confirm
	# 		shortcut = close_window
	# 		blockoverride "text" {
	# 			text = "Welcome. You are playing as [GetPlayer.GetNameNoTooltip]. Press Enter or Escape to dismiss.[AddLine('Note, this window is temporary to fix a visual bug.')]"
	# 		}
	# 		# using = prov_pan
	# 		datacontext = "[GetPlayer.GetCapitalLocation.GetCounty.GetTitle]"
	# 		onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
	# 		# onclick = "[Set('fix_flicker', 'yes')]"
	# 		onclick = "[Toggle('fix_flicker')]"
	# 	}
	# }


	widget = {
		visible = "[Not(GetVariableSystem.Exists('ocr'))]"

		# state = {
		# 	name = monthly_tick
		# 	on_start = "[SetMapMode('realms')]"
		# }
		#
		# state = {
		# 	on_start = "[SetMapMode('realms')]"
		# 	trigger_when = "[Not(IsMapMode('realms'))]"
		# }
	}

	# button = {
	# 	using = zoom_out_title
	# 	shortcut = redo
	# 	# visible = "[Isnt('flicker')]"
	#
	# 	onclick = "[PdxGuiWidget.TriggerAnimation('flicker')]"
	# 	state = {
	# 		delay = 0.3
	# 		name = flicker
	# 		on_finish = "[Toggle('ocr')]"
	# 		next = "flicker_end"
	# 	}
	# 	state = {
	# 		name = flicker_end
	# 		using = Sound_WindowHide_Standard
	# 	}
	# 	onclick = "[Toggle('ocr')]"
	# 	# onclick = "[Toggle('ocr')]"
	# 	onclick = "[Set('flicker', 'yes')]"
	# }

	container = {
		visible = "[Not(IsGameViewOpen('activity_locale'))]"
		button = {
			visible = "[Not(GetVariableSystem.Exists('ocr'))]"
			onclick = "[GetVariableSystem.Set('ocr', 'yes')]"
			onclick = "[GetVariableSystem.Set('tooltip_focus', 'yes')]"
			shortcut = "screenshot_map"
			onclick = "[GetVariableSystem.Set('hide_tooltips', 'yes')]"
			# TODO replace with an animation
			# onclick = "[GetScriptedGui('manual_zoom_out_ocr').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
			using = zoom_out_title
			onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
			onclick = "[SetMapMode('realms_text')]"
		}

		button = {
			visible = "[GetVariableSystem.Exists('ocr')]"
			onclick = "[GetVariableSystem.Clear('ocr')]"
			onclick = "[GetVariableSystem.Clear('tooltip_focus')]"
			onclick = "[GetVariableSystem.Clear('hide_tooltips')]"
			shortcut = "screenshot_map"
			datacontext = "[GetPlayer.GetCapitalLocation.GetCounty.GetTitle]"
			onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
			# onclick = "[GetScriptedGui('manual_zoom_in_ocr').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
			onclick = "[SetMapMode('realms')]"
		}
	}

	button = {
		name = "quick_save"
		onclick = "[OnPauseMenu]"
		onclick = "[PdxGuiTriggerAllAnimations('quick_save')]"
		shortcut = "map_mode_14"
		visible = "[Not(IsGameViewOpen('ruler_designer'))]"
	}

	# button = {
	# 	onclick = "[ExecuteConsoleCommand('debug_mode')]"
	# 	shortcut = "screenshot"
	# 	visible = "[Not(GetVariableSystem.Exists('barber_open'))]"
	# }

	button = {
		onclick = "[GetScriptedGui('warn_console').Execute( GuiScope.End )]"
		shortcut = "screenshot"
		visible = "[And(Not(GetGlobalVariable('console_used').IsSet), Not(GameIsMultiplayer))]"
	}

	button = {
		visible = "[And(GetGlobalVariable('console_used').IsSet, Not(GameIsMultiplayer))]"
		onclick = "[GetVariableSystem.Toggle('console')]"
		shortcut = "screenshot"
	}

	#TODO hide
	# button = {
	# 	onclick = "[GetVariableSystem.Toggle('hide_map')]"
	# 	shortcut = "army_disband"
	# }

	button = {
		visible = "[GetVariableSystem.Exists('resources')]"
		onclick = "[GetVariableSystem.Clear('resources')]"
		shortcut = "close_window"
	}

	# button = {
	# 	onclick = "[GetVariableSystem.Toggle('enable_tooltips')]"
	# 	shortcut = "increase_speed_2"
	# }

	# widget = {
	# 	size = { 100% 100% }
	# 	alwaystransparent = no
	# 	background = { using = Background_Area_Border_Solid alpha = 0.1 }
	# 	visible = "[Not(GetVariableSystem.Exists('hide_tooltips'))]"
	# }

	# map tooltips
	# button = {
	# 	# onclick = "[GetVariableSystem.Toggle('hide_tooltips')]"
	# 	onclick = "[CloseAllTooltips]"
	# 	shortcut = "map_mode_4"
	# }
	button = {
		onclick = "[GetVariableSystem.Toggle('resources')]"
		shortcut = "map_mode_3"
		visible = "[And(And(Isnt('mp_lobby_tabs'), Not(And(GetTutorial.ShouldBeVisible, Isnt('hide_tutorial')))), Isnt('ocr'))]"
	}
	# button = {
	# 	size = { 0 0 }
	# 	onclick = "[OnGoToPlayerCapital]"
	# 	shortcut = "mapmode_faith_secondary"
	# }


	# button = {
	# 	visible = "[GetVariableSystem.Exists('hide_event')]"
	# 	shortcut = army_create_new
	# 	onclick = "[GetVariableSystem.Toggle('hide_event')]"
	# }

	button = {
		onclick = "[ClearErrorLog]"
		visible = "[Not(InReleaseMode)]"
		shortcut = undo
	}

	button = {
		visible = "[InReleaseMode]"
		onclick = "[GetVariableSystem.Toggle('hide_tooltips')]"
		shortcut = undo
	}

	button = {
		# visible = "[Not(IsGameViewOpen('outliner'))]"
		visible = "[Not(Or(Or(IsGameViewOpen('dynasty_view'), IsGameViewOpen('holding_view')), IsGameViewOpen('lifestyle')))]"
		shortcut = "mapmode_duchies_secondary"
		onclick = "[ToggleGameView('outliner')]"
		onclick = "[PdxGuiTriggerAllAnimations('select_first_army_delay')]"
		# onclick = "[CloseGameView('my_realm')]"
	}

	state = {
		name = select_first_army_delay
		delay = 0.1
		on_finish = "[PdxGuiTriggerAllAnimations('select_first_army')]"
	}

	widget = {
		size = { 100% 100% }
		alwaystransparent = yes
		using = TooltipFocus
		visible = "[GetVariableSystem.Exists('sending_army')]"

		button = {
			alwaystransparent = "[Not(GetVariableSystem.Exists('sending_army'))]"
			parentanchor = center
			widgetanchor = left|vcenter
			onmousehierarchyenter = "[PdxGuiTriggerAllAnimations('army_sent')]"
			onmousehierarchyenter = "[GetVariableSystem.Clear('sending_army')]"
			position = { -50 0 }

			state = {
				name = army_sent
				delay = 0.2
				on_finish = "[PdxGuiTriggerAllAnimations('show_army_window')]"
				on_finish = "[PdxGuiTriggerAllAnimations('show_maa_window')]"
			}

			# texture = "gfx/interface/colors/white.dds"

			flowcontainer = {
				ignoreinvisible = yes
				resizeparent = yes
				margin = { 50 200 }
				direction = vertical


				text_single = {
					raw_text = "Right click here to send the army to [GetVariableSystem.Get('sending_army_county')], [GetVariableSystem.Get('sending_army')]."
					autoresize = yes
				}

				text_single = {
					raw_text = "Or press Control 2 to use Autohotkey."
				}
				text_single = {
					raw_text = "Press Shift 3 to add this move order, without replacing the current one."
				}

				text_single = {
					raw_text = "Cancel with Escape."
				}
			}
		}

		button = {
			shortcut = close_window
			onclick = "[PdxGuiTriggerAllAnimations('show_army_window')]"
			onclick = "[GetVariableSystem.Clear('sending_army')]"
			onclick = "[PdxGuiTriggerAllAnimations('show_maa_window')]"
		}
	}

	widget = {
		size = { 100% 100% }
		alwaystransparent = yes
		using = TooltipFocus
		visible = "[GetVariableSystem.Exists('station_regiment')]"

		button = {
			alwaystransparent = "[Not(GetVariableSystem.Exists('station_regiment'))]"
			parentanchor = center
			widgetanchor = left|vcenter
			onmousehierarchyenter = "[PdxGuiTriggerAllAnimations('regiment_stationed')]"
			onmousehierarchyenter = "[GetVariableSystem.Clear('station_regiment')]"
			position = { -50 0 }

			state = {
				name = regiment_stationed
				delay = 0.2
				on_finish = "[PdxGuiTriggerAllAnimations('show_maa_window')]"
			}

			# texture = "gfx/interface/colors/white.dds"

			flowcontainer = {
				ignoreinvisible = yes
				resizeparent = yes
				margin = { 50 200 }
				direction = vertical

				text_single = {
					visible = "[Not(GetVariableSystem.Exists('travel_type'))]"
					raw_text = "Click here to station the regiment in [GetVariableSystem.Get('station_regiment')]."
					autoresize = yes
				}

				text_single = {
					visible = "[GetVariableSystem.Exists('travel_type')]"
					raw_text = "Click here to travel to [GetVariableSystem.Get('station_regiment')]."
					autoresize = yes
				}
				text_single = {
					raw_text = "Or press Shift 1 to use Autohotkey."
				}
				text_single = {
					visible = no#"[GetVariableSystem.Exists('travel_type')]"
					raw_text = "Tooltip shows extra information."
				}
				text_single = {
					raw_text = "Cancel with Escape."
				}
			}
		}

		button = {
			shortcut = close_window
			onclick = "[GetVariableSystem.Clear('station_regiment')]"
			onclick = "[PdxGuiTriggerAllAnimations('show_maa_window')]"
		}

		# icon = {
		# 	visible = "[Not(InReleaseMode)]"
		# 	texture = "gfx/interface/colors/white.dds"
		# 	size = { 10 10 }
		# 	parentanchor = center
		# }
	}

	# button = {
	# 	parentanchor = right
	# 	visible = "[GetVariableSystem.Exists('tooltip_open')]"
	# 	onmousehierarchyenter = "[GetVariableSystem.Clear('tooltip_open')]"
	# 	text_single = {
	# 		autoresize = yes
	# 		resizeparent = yes
	# 		margin = { 10 2 }
	# 		raw_text = "Dismiss tooltip."
	# 	}
	# }

}

window = {
	alwaystransparent = yes
	layer = windows_layer
	name = "windows_layer"

	button = {
		shortcut = army_merge
		# onclick = "[ToggleGameView( 'my_realm' )]"
		onclick = "[GetVariableSystem.Toggle('ruler_browser')]"
		visible = "[And(Not(Or(Or(IsGameViewOpen('army'), IsGameViewOpen('my_realm')), IsGameViewOpen('men_at_arms'))), GetPlayer.IsValid)]"
		using = close_character
	}

	container = {
		visible = "[And(Not(IsGameViewOpen('ruler_designer')), Isnt('tour_filters'))]"
		button = {
			visible = "[And(GetPlayer.IsAdult, Not(IsGameViewOpen('lifestyle')))]"
			shortcut = map_mode_15
			onclick = "[OpenGameViewData( 'lifestyle', GetPlayer.GetID )]"
		}
		button = {
			visible = "[And(Not(GetPlayer.IsAdult), Not(IsGameViewOpen('character_focus')))]"
			shortcut = map_mode_15
			onclick = "[ToggleGameViewData( 'character_focus', GetPlayer.GetID )]"
		}
	}
}

window = {
	layer = windows_layer
	name = "window_sea"
	alwaystransparent = yes
	size = { 100% 100% }
	visible = "[Has('extra_window', 'window_sea')]"

	# state = {
	# 	name = _hide
	# 	on_finish = "[Clear('hide_river_info')]"
	# }

	window_ocr = {
		button = {
			onclick = "[Clear('extra_window')]"
			shortcut = close_window
		}
		# TODO go back
		blockoverride "ocr_header" {
			visible = "[GetPlayer.MakeScope.Var('window_sea').IsSet]"
			flowcontainer = {
				layoutpolicy_horizontal = expanding
			    ignoreinvisible = yes
				direction = vertical

				flowcontainer = {
					datacontext = "[GetPlayer.MakeScope.Var('window_sea').GetProvince]"
					ignoreinvisible = yes
					spacing = 3

					text_single = {
						raw_text = "[Province.GetName]"
					}

					text_single = {
						visible = "[ShowRoot('is_river', Province)]"
						raw_text = "river,"
					}

					text_single = {
						visible = "[GreaterThan_CFixedPoint( Sval('adjacent_rivers', Province), '(CFixedPoint)2')]"
						raw_text = "Fork,"
					}

					text_single = {
						raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)]"
					}
					text_single = {
						margin_left = -3
						visible = "[ShowRoot('is_sea', Province)]"
						raw_text = ", [Province.GetTerrain.GetName]"
					}

					dot_l = { }
				}
			}
		}

		blockoverride "ocr_content" {
			vbox = {
				layoutpolicy_horizontal = expanding
				datacontext = "[Province.MakeScope.Var('river')]"
				datacontext = "[GetPlayer.MakeScope.Var('window_sea').GetProvince]"
				visible = "[ShowRoot('is_river', Province)]"

				hbox = {
					datacontext = "[SEA.MakeScope]"
				    layoutpolicy_horizontal = expanding
					spacing = 3

					text_single = {
						visible = "[DataModelHasItems(Scope.GetProvince.MakeScope.GetList('river_forks'))]"
						raw_text = "The full river system is"
					}

					text_single = {
						visible = "[IsDataModelEmpty(Scope.GetProvince.MakeScope.GetList('river_forks'))]"
						raw_text = "The whole river is"
					}

					text_single = {
						raw_text = "[GetDataModelSize(Scope.GetProvince.MakeScope.GetList('river_parts'))] parts long,"
					}

				    expand = { }
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[Toggle('hide_river_info')]"
				    blockoverride "text" {
				        raw_text = "[Select_CString(Is('hide_river_info'), 'Show info with Shift E', 'Hide info with E')]."
				    }
				}

				button = {
					onclick = "[Set('hide_river_info', 'yes')]"
					shortcut = map_mode_1
				}
				button = {
					onclick = "[Clear('hide_river_info')]"
					shortcut = map_mode_11
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Isnt('hide_river_info')]"
					# mouths
					vbox = {
					    layoutpolicy_horizontal = expanding
						visible = "[DataModelHasItems(SEA.MakeScope.GetList('river_mouths'))]"

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "it has [GetDataModelSize(SEA.MakeScope.GetList('river_mouths'))] mouths, flowing into:"
							visible = "[GreaterThan_int32(GetDataModelSize(SEA.MakeScope.GetList('river_mouths')), '(int32)1')]"
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[SEA.MakeScope.GetList('river_mouths')]"

							item = {
								hbox = {
									layoutpolicy_horizontal = expanding
									datamodel = "[Scope.GetProvince.MakeScope.GetList('river_seas')]"
									item = {
										button_sea_far = {
											layoutpolicy_horizontal = expanding
											blockoverride "pre" {
												text_single = {
													visible = "[EqualTo_int32(GetDataModelSize(SEA.MakeScope.GetList('river_mouths')), '(int32)1')]"
													raw_text = "Its flows into"
												}
											}
										}
									}
								}
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[DataModelHasItems(SEA.MakeScope.GetList('river_forks'))]"

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[GetDataModelSize(SEA.MakeScope.GetList('river_forks'))] forks,"
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[SEA.MakeScope.GetList('river_forks')]"

							item = {
								button_sea_far = {
									layoutpolicy_horizontal = expanding
								}
							}
						}
					}

					vbox = {
					    layoutpolicy_horizontal = expanding
						visible = "[DataModelHasItems(SEA.MakeScope.GetList('river_sources'))]"

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "it has [GetDataModelSize(SEA.MakeScope.GetList('river_sources'))] sources,"
							visible = "[GreaterThan_int32(GetDataModelSize(SEA.MakeScope.GetList('river_sources')), '(int32)1')]"
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[SEA.MakeScope.GetList('river_sources')]"

							item = {
								button_sea_far = {
									layoutpolicy_horizontal = expanding
									blockoverride "pre" {
										text_single = {
											visible = "[EqualTo_int32(GetDataModelSize(SEA.MakeScope.GetList('river_sources')), '(int32)1')]"
											raw_text = "Its source is"
										}
									}
								}
							}
						}
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				datacontext = "[SEA]"
				# seas

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Adjacencies:"
				}
				# seas
				vbox = {
					visible = "[DataModelHasItems(Province.MakeScope.GetList('adjacent_seas'))]"
					layoutpolicy_horizontal = expanding
					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "[GetDataModelSize(Province.MakeScope.GetList('adjacent_seas'))] seas,"
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						datamodel = "[Province.MakeScope.GetList('adjacent_seas')]"
						item = {
							button_sea = {
								layoutpolicy_horizontal = expanding
							}
						}
					}
				}
				# rivers
				vbox = {
					visible = "[DataModelHasItems(Province.MakeScope.GetList('adjacent_rivers'))]"
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "[GetDataModelSize(Province.MakeScope.GetList('adjacent_rivers'))] rivers,"
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						datamodel = "[Province.MakeScope.GetList('adjacent_rivers')]"
						item = {
							button_sea = {
								layoutpolicy_horizontal = expanding
								blockoverride "sea_info_pre" {
									text_single = {
										visible = "[GreaterThan_CFixedPoint( Sval('adjacent_rivers', Scope.GetProvince), '(CFixedPoint)2')]"
										raw_text = "Fork,"
									}
								}
								blockoverride "sea_info" {
									text_single = {
										raw_text = "[Sval('adjacent_holdings', Scope.GetProvince)] shores."
									}
								}
							}
						}
					}
				}
				# counties
				vbox = {
					visible = "[And(DataModelHasItems(Province.MakeScope.GetList('adjacent_counties')), Isnt('sea_county_list'))]"
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "[GetDataModelSize(Province.MakeScope.GetList('adjacent_counties'))] counties, switch to holdings with Page Down."
						}
						shortcut = zoom_in
						onclick = "[Toggle('sea_county_list')]"
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						datamodel = "[Province.MakeScope.GetList('adjacent_counties')]"
						item = {
							adjacent_county_button = {
								onclick = "[Clear('extra_window')]"
								layoutpolicy_horizontal = expanding
							}
						}
					}
				}
				# holdings
				vbox = {
					visible = "[And(DataModelHasItems(Province.MakeScope.GetList('adjacent_holdings')), Is('sea_county_list'))]"
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "[GetDataModelSize(Province.MakeScope.GetList('adjacent_holdings'))] holdings, switch to counties with Page Up."
						}
						shortcut = zoom_out
						onclick = "[Toggle('sea_county_list')]"
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						datamodel = "[Province.MakeScope.GetList('adjacent_holdings')]"
						item = {
							button_holding = {
								layoutpolicy_horizontal = expanding
							}
						}
					}
				}
			}
		}

		blockoverride "ocr_footer" {
			button_text = {
				layoutpolicy_horizontal = expanding
				datacontext = "[GetPlayer.MakeScope.Var('window_sea').GetProvince]"

				shortcut = mapmode_empires_secondary
				blockoverride "text" {
					raw_text = "[Select_CString(ShowAdd('is_in_outliner', GetPlayer, Province), 'Unpin from', 'Pin to')] outliner, hotkey O."
				}
				onclick = "[ClickAdd('add_province_to_outliner', GetPlayer, Province)]"
			}
			button_text = {
				layoutpolicy_horizontal = expanding
				datacontext = "[GetPlayer.MakeScope.Var('window_sea').GetProvince]"
				onclick = "[Province.PanCameraTo]"
				onclick = "[GetScriptedGui('province_adjacencies').Execute( GuiScope.SetRoot( Province.MakeScope ).AddScope( 'player', GetPlayer.MakeScope).End )]"
				onclick = "[GetScriptedGui('find_closest').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Province.MakeScope).End )]"
				blockoverride "text" {
					raw_text = "Pan camera here and refresh, Shift Q."
				}
				shortcut = map_mode_9
			}
		}

	}
}

template zoom_out_title {
	datacontext = "[GetTitleByKey('e_byzantium')]"
}
