types Filters {
	type filter_item = hbox {
		# spacing = -2
		# margin_bottom = 10
		# expand = { }

		dropdown_sort_characterlist = {
			layoutpolicy_horizontal = expanding
			datamodel = "[CharacterListFilter.GetOptions]"
			onselectionchanged = "[CharacterListFilter.SetCurrentFilterFromIndex]"
			selectedindex = "[CharacterListFilter.GetCurrentFilterIndex]"

			blockoverride "option_name" {
				text_single = {
					raw_text = "[CharacterListFilter.GetName],"
				}
			}

			blockoverride "text_button_drop" {
				raw_text = "[AddTextIf(EqualTo_string(CharacterListFilterOption.GetName, 'All'), 'Show ')][CharacterListFilterOption.GetName][AddTextIf(Not(EqualTo_string(CharacterListFilterOption.GetName, 'All')), ' option')]."
				margin_left = 2
				# tooltip = "[CharacterListFilterOption.GetDescription]"
			}

			blockoverride "size_button_drop" {
				size = { 285 32 }
			}

			blockoverride "size_dropdown" {
				size = { 275 35 }
			}
		}
	}
	type vbox_filter_group = vbox {

		vbox = {
			visible = "[CharacterListFilterCategory.IsExpanded]"
			layoutpolicy_horizontal = expanding

			block "filters" { }
		}
	}

	type window_character_filter = window {
		name = "character_filter_window"
		visible_at_creation = no
		visible = "[CharacterSelectionList.FiltersShown]"
		# position = { -750 0 }
		# size = { 100% 100% }
		using = ocr_size
		focuspolicy = click

		allow_outside = yes

		# using = Window_Movable
		using = Window_Background_Subwindow

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		vbox = {
			using = ocr_margins

			spacing = 0

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					# text = "CHARACTER_LIST_FILTERS"
				}
				blockoverride "button_close"
				{
					onclick = "[CharacterSelectionList.OnToggleFilters]"
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						raw_text = "Filters[AddTextIf(Not(CharacterSelectionList.IsAllDefault), ', applied')]"
						margin_left = 10
					}

					text_single = {
						raw_text = ","
					}

					text_single = {
						raw_text = " "
					}

					text_single = {
						text = "CHARACTER_FINDER_COUNT"
					}

					dot = { }

					expand = { }
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 5 0 }

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Reset to Defaults." #CHARACTER_RESET_FILTERS
					}
					name = "drop_filters"
					focuspolicy = click
					onclick = "[CharacterSelectionList.OnResetFilters]"
					visible = "[Not(CharacterSelectionList.IsAllDefault)]"
				}

				button_text = {
					visible = "[Not( CharacterSelectionList.IsAllDefault )]"
					layoutpolicy_horizontal = expanding
				    blockoverride "text" {
						text = "CHARACTER_LIST_FILTER_PRESET_BUTTON_UNSAVED_PRESET"
				    }
					blockoverride "extra" {
						text_single = {
							raw_text = " Unsaved!"
							align = left
							visible = "[Not( StringIsEmpty( CharacterSelectionList.GetUnsaveableFiltersWarning ) )]"
						}
					}
					onclick = "[CharacterSelectionList.ShowFilterPresets]"
				}

				dropdown_menu_standard = {
					layoutpolicy_horizontal = expanding
					blockoverride "dropdown_size" {
						size = { 450 25 }
					}
					blockoverride "dropdown_list_maxsize"
					{
						maximumsize = { 450 700 }
					}

					blockoverride "dropdown_properties"
					{
						datamodel = "[CharacterSelectionList.GetSavedFilterPresets]"
						onselectionchanged = "[CharacterSelectionList.SelectPresetIndex]"
						selectedindex = "[CharacterSelectionList.GetSelectedPresetIndex]"
					}

					blockoverride "dropdown_active_item_properties"
					{
						raw_text = "[AddTextIf(CharacterSelectionList.HasSelectedPreset, 'Preset: ')][SelectLocalization(CharacterSelectionList.HasSelectedPreset, CharacterSelectionList.GetSelectedPreset.GetName, 'CHARACTER_LIST_OPEN_FILTER_PRESET_BUTTON_SELECT')]."
					}

					blockoverride "dropdown_item_properties"
                	{
						raw_text = "[Select_CString(FilterPresetItem.CanBeApplied, '', 'cannot select ')][FilterPresetItem.GetPreset.GetName]."
						tooltip = "CHARACTER_LIST_FILTER_PRESET_APPLY_TOOLTIP"
						enabled = "[FilterPresetItem.CanBeApplied]"
					}
					blockoverride "dropdown_list_properties"
					{
						minimumsize = { 440 50 }
						hbox = {
							visible = "[IsDataModelEmpty(CharacterSelectionList.GetSavedFilterPresets)]"
							textbox = {
								text = "CHARACTER_LIST_FILTER_PRESET_DROPDOWN_NO_SELECTED_BODY"
							}
						}
					}
				}

				button_text = {
					layoutpolicy_horizontal = expanding
				    blockoverride "text" {
						raw_text = "[Localize('CHARACTER_LIST_FILTER_PRESET_DELETE_TOOLTIP')]."
				    }
					visible = "[CharacterSelectionList.HasSelectedPreset]"
					onclick = "[CharacterSelectionList.DeleteSelectedPreset]"
				}

				expand = { }
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content" {
					vbox = {
						layoutpolicy_horizontal = expanding

						vbox = {
							layoutpolicy_horizontal = expanding

							button_text = {
								layoutpolicy_horizontal = expanding
								visible = "[CharacterSelectionList.HasTextInEdit]"
								# texture = "gfx/interface/icons/flat_icons/window_close.dds"
								onclick = "[CharacterSelectionList.ClearPattern]"
								# onclick = "[PdxGuiWidget.AccessParent.FindChild('text').Show]"
								blockoverride "text" {
									raw_text = "Clear search."
								}
							}

							editbox_search_field = {
								layoutpolicy_horizontal = expanding
								margin_right = 6

								blockoverride "editbox_properties"
								{
									name = "text_filter"
									# text = "search"
									ontextedited = "[CharacterSelectionList.SetPattern]"
									ontextedited = "[PdxGuiWidget.FindChild('text').Hide]"
									oneditingfinished = "[CharacterSelectionList.FinishEdit]"
									background = { using = Background_Area_Border_Solid }

									text_single = {
										background = { using = Background_Area_Border_Solid }
										visible = "[Not(CharacterSelectionList.HasTextInEdit)]"
										name = "text"
										raw_text = " Enter text here to search."
										align = left

									}
								}

								# tooltip = "CHARACTER_LIST_TEXT_FILTER_TOOLTIP"
							}
						}

						vbox = {
							datamodel = "[CharacterSelectionList.GetMatchedPatterns]"
							layoutpolicy_horizontal = expanding

							hbox = {
							    layoutpolicy_horizontal = expanding
								spacing = 3
								visible = "[DataModelHasItems(CharacterSelectionList.GetMatchedPatterns)]"

							    text_single = {
							    	raw_text = "[GetDataModelSize(CharacterSelectionList.GetMatchedPatterns)]"
							    }

								text_single = {
									name = "label"
									text = "CHARACTER_LIST_TEXT_FILTER_TITLE"
								}
							    expand = { }
							}


							widget = {
								size = { 0 5 }
							}

							item = {
								hbox = {
									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding
										margin_right = 4

										button = {
											name = "drop_filters"
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											size = { 0 30 }

											onclick = "[PatternItem.OnClick]"
											onclick = "[CharacterSelectionList.ClearPattern]"
											onclick = "[CharacterSelectionList.ApplyFiltersSort]"

											background = {
												using = Background_Area_Dark
											}

											hbox = {
												margin_left = 6

												hbox = {
													visible = "[PatternItem.IsName]"
													layoutpolicy_horizontal = expanding
													margin = { 10 0 }
													margin_left = 5

													text_single = {
														raw_text = "[Localize('CHARACTER_LIST_TEXT_FILTER_MATCH_NAME')],"
														align = left
													}

													expand = { }

													tooltip = "CHARACTER_LIST_FILTER_NAME_TT"
												}

												hbox = {
													datacontext = "[PatternItem.GetTrait]"
													datacontext = "[GetNullCharacter]"
													datacontext = "[GetPlayer.GetFaith]"

													visible = "[PatternItem.IsTrait]"
													layoutpolicy_horizontal = expanding
													margin = { 10 0 }
													margin_left = 5
													spacing = 3

													text_single = {
														raw_text = "[PatternItem.GetTrait.GetNameNoTooltip( Character.Self )],"
														align = left
													}

													text_single = {
														raw_text = "[PatternItem.GetType]."
														align = left
													}

													expand = { }

													tooltipwidget = {
														using = character_trait_tooltip
													}
												}

												hbox = {
													datacontext = "[PatternItem.GetFaith]"
													visible = "[PatternItem.IsFaith]"
													layoutpolicy_horizontal = expanding
													margin = { 10 0 }
													margin_left = 5
													spacing = 3

													text_single = {
														raw_text = "[PatternItem.GetFaith.GetNameNoTooltip],"
														align = left
													}

													text_single = {
														raw_text = "[PatternItem.GetType]."
														align = left
													}

													expand = { }

													tooltipwidget = {
														faith_tooltip = { }
													}
												}

												hbox = {
													datacontext = "[PatternItem.GetHouse]"
													visible = "[PatternItem.IsHouse]"
													layoutpolicy_horizontal = expanding
													margin = { 10 0 }
													margin_left = 5
													spacing = 3

													text_single = {
														raw_text = "[PatternItem.GetHouse.GetBaseNameNoTooltip],"
														align = left
													}

													text_single = {
														raw_text = "[PatternItem.GetType]."
														align = left
													}

													expand = { }

													tooltipwidget = {
														using = dynasty_house_tooltip
													}
												}

												hbox = {
													datacontext = "[PatternItem.GetDynasty]"
													visible = "[PatternItem.IsDynasty]"
													layoutpolicy_horizontal = expanding
													margin = { 10 0 }
													margin_left = 5
													spacing = 3

													text_single = {
														raw_text = "[PatternItem.GetDynasty.GetBaseNameNoTooltip],"
														align = left
													}

													text_single = {
														text = "[PatternItem.GetType]"
														align = left
													}

													expand = { }

													tooltipwidget = {
														using = DynastyTooltip
													}
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													margin = { 10 0 }
													visible = "[PatternItem.IsCulture]"
													datacontext = "[PatternItem.GetCulture]"
													spacing = 3

													text_single = {
														raw_text = "[PatternItem.GetCulture.GetNameNoTooltip],"
														align = left
													}

													text_single = {
														raw_text = "[PatternItem.GetType]."
														align = left
													}

													expand = { }

													tooltipwidget = {
														culture_tooltip = { }
													}
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													margin = { 10 0 }
													visible = "[PatternItem.IsHeritage]"
													spacing = 3

													text_single = {
														raw_text = "[PatternItem.GetHeritage.GetNameNoTooltip],"
														align = left
													}
													text_single = {
														raw_text = "[PatternItem.GetType]."
														align = left
													}
													expand = { }
													tooltip = "CHARACTER_LIST_CULTURE_GROUP_TT"
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													margin = { 10 0 }
													visible = "[PatternItem.IsReligion]"
													datacontext = "[PatternItem.GetReligion]"
													spacing = 3

													text_single = {
														raw_text = "[PatternItem.GetReligion.GetNameNoTooltip],"
														align = left
													}

													text_single = {
														raw_text = "[PatternItem.GetType]."
														align = left
													}

													expand = { }

													tooltipwidget = {
														using = religion_tooltip
													}
												}
											}
										}
									}
								}
							}
						}
						vbox = {
							visible = "[Not(CharacterSelectionList.IsSuggesting)]"
							layoutpolicy_horizontal = expanding

							block "addition_filter" { }
						}
					}
				}
			}
		}
		window_character_filter_manage_presets = { }

		button = {
			visible = "[CharacterSelectionList.IsFilterPresetsShown]"
			onclick = "[CharacterSelectionList.HideFilterPresets]"
			shortcut = "close_window"
		}
	}

	type window_character_filter_manage_presets = window {
		name = "character_filter_manage_presets_window"
		visible = [CharacterSelectionList.IsFilterPresetsShown]
		parentanchor = right
		size = { 100% 100% }
		using = TooltipFocus

		layer = confirmation
		alwaystransparent = no
		movable = no
		using = Window_Background_Subwindow

		vbox = {
			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "CHARACTER_LIST_FILTER_PRESET_HEADER"
					layoutpolicy_horizontal = expanding
				}

				blockoverride "button_close"
				{
					onclick = "[CharacterSelectionList.HideFilterPresets]"
					shortcut = "close_window"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
				}
			}
			margin_left = 10

			# button_text = {
			# 	layoutpolicy_horizontal = expanding
			# 	blockoverride "text" {
			# 		raw_text = "Preset settings, click to close."
			# 	}
			# 	onclick = "[CharacterSelectionList.HideFilterPresets]"
			# 	clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
			# }

			vbox = {
				name = "current_filter"
				visible = "[Not( CharacterSelectionList.IsAllDefault )]"
				layoutpolicy_horizontal = expanding

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "[Localize('CHARACTER_LIST_FILTER_PRESET_CURRENT_FILTER')]"
				}

				editbox_standard_with_label = {
					layoutpolicy_horizontal = expanding
					margin_bottom = 10

					blockoverride "editbox_label"
					{
						text = "CHARACTER_LIST_FILTER_PRESET_CURRENT_FILTER_PRESET_NAME"
						layoutpolicy_horizontal = expanding
						margin_bottom = 2
					}

					blockoverride "editbox_properties"
					{
						name = "preset_name_edit"
						multiline = no
						maxcharacters = 40
						text = "[CharacterSelectionList.GetFilterPresetName]"
						margin_left = 2
						ontextedited = "[CharacterSelectionList.OnFilterPresetNameEdit]"

						text_single = {
							raw_text = "Enter name here."
							margin_left = 5
							visible = "[StringIsEmpty(CharacterSelectionList.GetFilterPresetName)]"
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					margin = { 24 0 }

					hbox = {
						layoutpolicy_horizontal = expanding

						button_text = {
							blockoverride "text" {
								text = "CHARACTER_LIST_FILTER_PRESET_BUTTON_SAVE"
							}
							blockoverride "disabled" {
								visible = "[Not(CharacterSelectionList.CanSavePreset)]"
							}
							onclick = "[CharacterSelectionList.SaveFiltersToPreset]"
							enabled = "[CharacterSelectionList.CanSavePreset]"
							tooltip = "[CharacterSelectionList.CanSavePresetTooltip]"
						}
						expand = { }
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "[CharacterSelectionList.GetSavePresetWarning]"
							minimumsize = { 350 12 }
						}
						expand = { }
					}
				}
			}

			vbox = {
				name = "current_filter_all_default"
				visible = "[CharacterSelectionList.IsAllDefault]"
				layoutpolicy_horizontal = expanding

				text_single = {
					text = "CHARACTER_LIST_FILTER_PRESET_CURRENT_FILTER"
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "CHARACTER_LIST_FILTER_PRESET_CURRENT_FILTER_DEFAULT_FILTERS"
				}
			}

			vbox = {
				name = "saved_filters"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_bottom = 5

				hbox = {
				    layoutpolicy_horizontal = expanding
					spacing = 3

				    text_single = {
				    	raw_text = "[GetDataModelSize(CharacterSelectionList.GetSavedFilterPresets)]"
				    }

					text_single = {
						text = "CHARACTER_LIST_FILTER_PRESET_SAVED_PRESETS"
					}
				    expand = { }
				}


				scrollbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					size = { 406 0 } #hitboxes are wrong?

					blockoverride "scrollbox_content"
					{

						vbox = {
							datamodel = "[CharacterSelectionList.GetSavedFilterPresets]"
							layoutpolicy_horizontal = expanding

							item = {
								widget = {
									size = { 460 60 }

									hbox = {
										spacing = 5

										button_standard = {
											name = "apply_preset_button"
											layoutpolicy_horizontal = expanding
											size = { 0 60 }

											onclick = "[CharacterSelectionList.SetSavePresetName(FilterPresetItem.GetPreset.GetName)]"
											down = "[And( Not( CharacterSelectionList.IsAllDefault ), EqualTo_string(CharacterSelectionList.GetFilterPresetName, FilterPresetItem.GetPreset.GetName) )]"
											tooltip = "CHARACTER_LIST_SELECT_TO_OVERWRITE_PRESET_TOOLTIP"

											vbox = {
												layoutpolicy_horizontal = expanding
												margin_left = 8

												text_label_left = {
													layoutpolicy_horizontal = expanding
													raw_text = "Name: [FilterPresetItem.GetPreset.GetName]."
													align = left
													margin_left = 2
													margin_top = 5
												}

												text_single = {
													layoutpolicy_vertical = expanding
													layoutpolicy_horizontal = expanding
													max_width = 450

													raw_text = "Filters: [FilterPresetItem.GetPreset.GetDescription]."
													align = left
													default_format = "#low"
												}
												expand = { }
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
