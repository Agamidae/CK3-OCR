@position_text = 620

types CourtPositionTypes
{
	type widget_court_position_item_ocr = widget
	{
		datacontext = "[CourtPositionListItem.GetObject]"
		datacontext = "[CourtPositionItem.GetPositionType]"
		datacontext = "[CourtPositionItem.GetCourtOwner]"
		layoutpolicy_horizontal = expanding

		# minimumsize = { @position_text  20 }

		size = { 530 20 }
		button = {
			size = { 100% 100% }
			block "click" {
				enabled = "[And( CourtPositionItem.CanHirePosition, CourtPositionType.HasValidCourtiersForCharacter( Character.Self ) )]"
				onclick = "[CourtPositionItem.OpenAppointWindow]"
				onclick = "[CourtPositionsWindow.SetSelectedPositionId( CourtPositionItem.GetListId )]"
			}
		}

		# Header  name, position, salary, buttons
		widget = {
			background = { using = Background_Area_Dark margin_bottom = 5 }
			size = { 530 20 }

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3
				margin_left = 5

				tooltipwidget = {
					court_position_type_tooltip = { }
				}

				text_single = {
					raw_text = "Can't hire"
					block "cant_hire" {
						visible = "[Not(CourtPositionItem.CanHirePosition)]"
					}
				}

				block "position_pre" {}

				#### POSITION ####
				text_single = {
					name = "character_name_available"
					raw_text = "[CourtPositionType.GetNameNoTooltip],"
				}

				text_single = {
					raw_text = "No one available,"
					visible = "[Not(CourtPositionType.HasValidCourtiersForCharacter( Character.Self ))]"
				}

				text_single = {
					datacontext = "[CourtPosition.GetPositionType]"
					raw_text = "Powerful agent!"
					visible = "[CourtPositionType.IsPowerfulAgent]"
					tooltip = "COURT_POSITION_POWERFUL_AGENT"
				}

				text_single = {
					name = "salary_available"
					visible = "[And( CourtPositionType.CanHirePosition( Character.Self ), CourtPositionType.HasValidCourtiersForCharacter( Character.Self ) )]"

					#CourtPositionsWindow.CourtOwner

					raw_text = "salary: [CourtPositionType.GetSalaryTextFor(Character.Self)],"
					tooltip = "[CourtPositionType.GetSalaryBreakdownFor(Character.Self)]"
				}

				# text_single = {
				# 	raw_text = "tooltip."
				#
				# 	tooltipwidget = {
				# 		court_position_type_tooltip = { }
				# 	}
				# }

				expand = { }
			}
		}

		# flowcontainer = {
		# 	block "position_effects" {
		# 		visible = "[Not(GetVariableSystem.Exists('show_position_desc'))]"
		# 	}
		# 	direction = vertical
		# 	margin_bottom = 0
		# 	margin_left = 5
		# 	margin_top = 20
		# 	ignoreinvisible = yes
		#
		# 	#### REQUIREMENTS ####
		# 	text_single = {
		# 		visible = "[Not(CourtPositionType.CanHirePosition( Character.Self ))]"
		# 		text = "COURT_POSITIONS_WINDOW_EMPTY_POSITION_YOU_DONT_MEET_REQUIREMENTS"
		# 		tooltip = "COURT_POSITIONS_WINDOW_EMPTY_POSITION_YOU_DONT_MEET_REQUIREMENTS_TT"
		# 	}
		#
		# 	text_single = {
		# 		visible = "[Not(CourtPositionType.HasValidCourtiersForCharacter( Character.Self ))]"
		# 		text = "COURT_POSITIONS_WINDOW_EMPTY_POSITION_NO_ELIGIBLE_COURTIERS"
		# 		tooltip = "COURT_POSITIONS_WINDOW_EMPTY_POSITION_NO_ELIGIBLE_COURTIERS_TT"
		# 	}
		#
		# 	text_multi_wide = {
		# 		text = "[CourtPositionType.GetEmployerModifierDescription]"
		# 	}
		# }
	}

	type widget_your_court_position_item_ocr = widget {
		layoutpolicy_horizontal = expanding
		# ignoreinvisible = yes
		# direction = vertical
		datacontext = "[CourtPosition.GetPositionType]"
		# minimumsize = { @position_text 20 }
		size = { 530 45 }

		widget = {
			background = { using = Background_Area_Dark margin_bottom = 5 }
			size = { 530 45 }

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 5

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 3

					tooltipwidget = {
						court_position_tooltip = { }
					}

					text_single = {
						raw_text = "[CourtPosition.GetNameNoTooltip],"
					}

					text_single = {
						name = "aptitude"
						text = "COURT_POSITION_aptitude_description_position"

						tooltipwidget = {
							court_position_aptitude_breakdown_tooltip = {
								datacontext = "[CourtPosition.GetAptitudeTooltip]"

								blockoverride "header_text" {
									text = COURT_POSITION_aptitude_description_position
								}

								blockoverride "modifier_list" {
									text = "[CourtPosition.GetEmployerBonuses]"
								}
							}
						}
					}

					text_single = {
						datacontext = "[CourtPosition.GetPositionType]"
						raw_text = "Powerful agent!"
						visible = "[CourtPositionType.IsPowerfulAgent]"
						tooltip = "COURT_POSITION_POWERFUL_AGENT"
					}

					text_single = {
						raw_text = "Salary: [CourtPosition.GetSalaryText],"
						tooltip = "[CourtPosition.GetSalaryBreakdownTooltip]"
					}

					expand = { }
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						text = "COURT_POSITION_FOR_EMPLOYER"
					}

					expand = {}
				}
			}
		}

		# flowcontainer = {
		# 	visible = "[Not(GetVariableSystem.Exists('show_position_desc'))]"
		# 	direction = vertical
		# 	margin_left = 5
		# 	ignoreinvisible = yes
		#
		# 	text_multi_wide = {
		# 		text = "[CourtPosition.GetEmployeeBonuses]"
		# 	}
		#
		# 	text_multi_wide = {
		# 		visible = "[CourtPosition.GetPositionType.HasLiegeCourtModifiers]"
		# 		text = "COURT_POSITION_EMPLOYER_COURT_EFFECTS"
		# 	}
		# }
	}

	type widget_hired_court_position_item_ocr = widget
	{
		block "position_datacontext" {
			datacontext = "[CourtPositionItem.GetPosition]"
			datacontext = "[CourtPosition.GetPositionType]"
		}
		datacontext = "[CourtPositionListItem.GetObject]"
		datacontext = "[CourtPosition.GetEmployee]"

		layoutpolicy_horizontal = expanding
		# direction = vertical

		# minimumsize = { @position_text 20 }
		# size = "[Select_CVector2f( And(DataModelHasItems( CourtPositionType.GetAllPositionTasks ), Isnt('court_tasks')), '(CVector2f)537,170', '(CVector2f)537,70' )]"

		using = agot_court_position_size

		# size = { 530 45 }

		button = {
			size = { 100% 100% }
			onclick = "[CourtPosition.OpenReplaceWindow]"
			onclick = "[CourtPositionsWindow.ClearSelectedPositionId]"
			onrightclick = "[DefaultOnCharacterClick(CourtPosition.GetEmployee.GetID)]"
			button_ignore = none
		}

		# Header  name, position, salary, buttons
		widget = {
			background = { using = Background_Area_Dark margin_bottom = 5 }
			size = { 530 45 }

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 5

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 3

					tooltipwidget = {
						court_position_tooltip = { }
					}

					text_single = {
						raw_text = "[CourtPosition.GetNameNoTooltip],"
					}

					text_single = {
						name = "aptitude"
						text = "COURT_POSITION_aptitude_description_position"

						tooltipwidget = {
							court_position_aptitude_breakdown_tooltip = {
								datacontext = "[CourtPosition.GetAptitudeTooltip]"

								blockoverride "header_text" {
									text = COURT_POSITION_aptitude_description_position
								}

								blockoverride "modifier_list" {
									text = "[CourtPosition.GetEmployerBonuses]"
								}
							}
						}
					}

					text_single = {
						datacontext = "[CourtPosition.GetPositionType]"
						raw_text = "Powerful agent!"
						visible = "[CourtPositionType.IsPowerfulAgent]"
						tooltip = "COURT_POSITION_POWERFUL_AGENT"
					}

					text_single = {
						raw_text = "Salary: [CourtPosition.GetSalaryText],"
						tooltip = "[CourtPosition.GetSalaryBreakdownTooltip]"
					}

					expand = { }
				}

				hbox = {
					spacing = 3
					layoutpolicy_horizontal = expanding

					button_text = {
					    blockoverride "text" {
			        raw_text = "Fire"
							align = left
				    }
						onclick = "[CourtPosition.OpenRevokeConfirmation]"
					}

					text_single = {
						raw_text = "[CourtPosition.GetEmployee.GetNameNoTooltip],"
					}

					text_single = {
						raw_text = "[CourtPosition.GetEmployee.GetRelationToString( GetPlayer)]"
					}

					###### YEARS OF SERVICE ######
					text_single = {
						raw_text = "[CourtPosition.GetTimeOfService]."
						visible = "[Not(StringIsEmpty(CourtPosition.GetTimeOfService))]"
					}

					expand = { }
				}
			}
		}

		block "position_extra" {}

		container = {
			block "position_tasks" {}
			ignoreinvisible = yes
			position = { 0 45 }
			block "tasks" {
				flowcontainer = {
					margin_top = 2
					name = "tasks"
					direction = vertical
					ignoreinvisible = yes
					visible = "[And( Not( IsDataModelEmpty( CourtPositionType.GetAllPositionTasks ) ), CourtPositionType.HasVisibleTasks( CourtPosition.GetEmployer.Self ) )]"
					block "position_datacontext" {
						datacontext = "[CourtPositionItem.GetPosition]"
						datacontext = "[CourtPosition.GetPositionType]"
					}


					button_text = {
						onclick = "[Toggle('court_tasks')]"
						shortcut = map_mode_2
						blockoverride "extra" {
							flowcontainer = {
								ignoreinvisible = yes
								spacing = 3

								text_single = {
									text = "COURT_POSITION_TASK" # "task"
								}

								text_single = {
									visible = "[CourtPosition.GetActiveTask.IsValid]"
									text = "[CourtPosition.GetActiveTask.GetName]"
								}

								text_single = {
									visible = "[Not( CourtPosition.HasActiveTask )]"
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding

									text = "COURT_POSITION_NO_ACTIVE_TASK" # "regular duties"
								}

								dot_l = {}

								text_single = {
									raw_text = "[Collapse('court_tasks')] T."
								}

								flowcontainer = {
									name = "task_cost"
									ignoreinvisible = yes
									spacing = 3
									tooltip_visible = "[CourtPosition.HasActiveTask]"
									tooltip = "[CourtPosition.GetActiveTask.GetCostBreakdown( CourtPosition.GetEmployer.Self )]"

									text_single = {
										raw_text = "Cost,"
									}

									text_single = {
										visible = "[CourtPosition.HasActiveTask]"

										text = "[CourtPosition.GetActiveTask.GetCostText( CourtPosition.GetEmployer.Self )]"
									}

									text_single = {
										visible = "[Not( CourtPosition.HasActiveTask )]"
										text = "COURT_POSITION_NO_ACTIVE_TASK_COST"
									}
								}

								dot_l = {}

								text_single = {
									visible = "[Isnt('court_tasks')]"
									raw_text = "[GetDataModelSize(CourtPositionType.GetAllPositionTasks)] other tasks:"
								}
							}
						}
					}

					# text_single = {
					# 	raw_text = ":"
					# 	# visible = "[Not(CourtPosition.GetActiveTask.IsValid)]"
					# }

					court_position_task_buttons_ocr = {
						visible = "[Isnt('court_tasks')]"
						datamodel = "[CourtPositionType.GetAllPositionTasks]"
					}

					# flowcontainer = {
					# 	direction = vertical
					# 	ignoreinvisible = yes
					# 	visible = "[CourtPosition.GetActiveTask.IsValid]"
					# 	datacontext = "[CourtPosition.GetActiveTask]"
					#
					# 	text_multi_wide = {
					# 		visible = "[CourtPositionTaskType.IsValid]"
					# 		text = "[CourtPositionTaskType.GetEmployerModifierDescription( CourtPosition.Self )]"
					# 	}
					#
					# 	text_multi_wide = {
					# 		visible = "[CourtPositionTaskType.HasEmployerCourtModifiers]"
					# 		text = "COURT_POSITION_TASK_EMPLOYER_COURT_EFFECTS"
					# 	}
					# }
				}
			}
		}

		# flowcontainer = {
		# 	block "position_effects" {
		# 		visible = "[Not(GetVariableSystem.Exists('show_position_desc'))]"
		# 	}
		# 	direction = vertical
		# 	margin_left = 5
		# 	ignoreinvisible = yes
		#
		# 	text_single = {
		# 		name = "opinion_bonus"
		# 		text = "COURT_POSITION_OPINION_BONUS"
		# 	}
		#
		# 	text_multi_wide = {
		# 		text = "[CourtPosition.GetEmployerBonuses]"
		# 	}
		#
		# 	text_multi_wide = {
		# 		visible = "[CourtPositionType.HasLiegeCourtModifiers]"
		# 		text = "COURT_POSITION_EMPLOYER_COURT_EFFECTS"
		# 	}
		# }
	}

	type hbox_single_court_position_ocr = hbox {

		vbox = {
			visible = "[Character.EmploysCourtPositionType( CourtPositionType.Self )]"
			layoutpolicy_horizontal = expanding

			widget_hired_court_position_item_ocr = {
				datacontext = "[Character.GetFirstEmployedOfType( CourtPositionType.Self )]"
				layoutpolicy_horizontal = expanding
			}
		}

		vbox = {
			visible = "[Not( Character.EmploysCourtPositionType( CourtPositionType.Self ) )]"

			layoutpolicy_horizontal = expanding

			widget_court_position_item_ocr = {
				blockoverride "position_pre" {
					text_single = {
						visible = "[And( CourtPositionType.CanHirePosition( Character.Self ), CourtPositionType.HasValidCourtiersForCharacter( Character.Self ) )]"
						raw_text = "Appoint"
					}
				}

				layoutpolicy_horizontal = expanding
			}
		}
	}

	type court_position_task_buttons_ocr = flowcontainer
	{
		ignoreinvisible = yes
		direction = vertical

		button_text = {
			blockoverride "text" {
				raw_text = "Switch to regular duties."
			}
			blockoverride "disabled" {
				visible = "[Not(IsValidCommand( CourtPosition.StopTaskCmd( CourtPosition.GetActiveTask.Self ) ))]"
			}
			onclick = "[PostCommand( CourtPosition.StopTaskCmd( CourtPosition.GetActiveTask.Self ) )]"
			enabled = "[IsValidCommand( CourtPosition.StopTaskCmd( CourtPosition.GetActiveTask.Self ) )]"
			visible = "[CourtPosition.GetActiveTask.IsValid]"

			using = tooltip_nw
			tooltip = "COURT_POSITION_NO_ACTIVE_TASK_DESCRIPTION"
		}

		item = {
			button_text = {
				blockoverride "text" {
					raw_text = "[CourtPositionTaskType.GetName]"
				}
				onclick = "[PostCommand( CourtPosition.ToggleTaskCmd( CourtPositionTaskType.Self ) )]"
				enabled = "[IsValidCommand( CourtPosition.ToggleTaskCmd( CourtPositionTaskType.Self ) )]"
				down = "[CourtPosition.IsActiveTask( CourtPositionTaskType.Self )]"

				using = tooltip_nw

				tooltipwidget = {
					court_position_task_icon_tooltip_widget = {
						using = DefaultTooltipBackground
						using = GeneralTooltipSetup
						alwaystransparent = no

						blockoverride "task_info_additional" {
							text = "[GetCommandDesc( CourtPosition.ToggleTaskCmd(  CourtPositionTaskType.Self ) )]"
						}
					}
				}
			}
		}
	}

	type vbox_court_positions_ocr = vbox {
		# margin_bottom = 5

		state = {
			name = _show
			using = Expand_Court_Positions
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			raw_text = "Positions."
		}



		data_model_view_filter_hbox_ocr = {
			name = "filter_options"
			datacontext = "[CourtPositionsWindow.AllPositions.AccessBase]"
		}

		## Position finances
		vbox = {
			name = "salaries_tutorial_uses_this"
			layoutpolicy_horizontal = expanding

			hbox = {
				visible = "[CourtPositionsWindow.CourtOwner.HoldsCourtPosition]"
				layoutpolicy_horizontal = expanding
				spacing = 3

				text_single = {
					text = "COURT_POSITIONS_COURT_VIEW_salaries_gained"
				}

				text_single = {
					datacontext = "[CourtPositionsWindow.CourtPositionsIncomeBreakdown]"
					text = "[CourtPositionsWindow.TotalEarnedSalaries]"

					tooltipwidget = {
						widget_value_breakdown_tooltip = { }
					}
				}

				expand = { }
			}

			hbox = {
				spacing = 3
			    layoutpolicy_horizontal = expanding

				text_single = {
					text = "COURT_POSITIONS_COURT_VIEW_salaries_paid"
				}

				text_single = {
					datacontext = "[CourtPositionsWindow.CourtPositionsExpenseBreakdown]"
					raw_text = "[CourtPositionsWindow.TotalPaidSalaries]."

					tooltipwidget = {
						widget_value_breakdown_tooltip = { }
					}
				}

		    expand = { }
			}
		}

		# button_text = {
		# 	layoutpolicy_horizontal = expanding
		# 	shortcut = map_mode_1
	  #   blockoverride "text" {
    #     raw_text = "[Select_CString(GetVariableSystem.Exists('show_position_desc'), 'Show', 'Hide')] position effects, hotkey E."
	  #   }
		# 	onclick = "[GetVariableSystem.Toggle('show_position_desc')]"
		# }

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_margins"
			{
				margin_top = 20
			}

			blockoverride "scrollbox_content"
			{
				spacing = 3
				vbox = {
					name = "liege_court_positions"
					visible = "[And( CourtPositionsWindow.CourtOwner.HasLiege, CourtPositionsWindow.CourtOwner.HoldsCourtPosition )]"
					layoutpolicy_horizontal = expanding

					using = Animation_Tab_Switch

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "pre" {
							text_single = {
								raw_text = "[GetDataModelSize(CourtPositionsWindow.HeldPositions)]"
							}
						}
				    blockoverride "text" {
			        raw_text = "[Localize('COURT_POSITIONS_your_positions_in_liege_court')],"
				    }
						onclick = "[GetVariableSystem.Toggle( 'expand_held_court_positions' )]"
						blockoverride "extra" {
							text_single = {
								raw_text = "[Select_CString(GetVariableSystem.Exists('expand_held_court_positions'), 'Expanded', 'Collapsed')]."
							}
						}
					}

					vbox = {
						name = "liege positions"
						visible = "[GetVariableSystem.Exists( 'expand_held_court_positions' )]"
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							visible = "[IsDataModelEmpty( CourtPositionsWindow.HeldPositions )]"
							text = "COURT_POSITIONS_no_positions_with_liege"
						}

						vbox = {
							name = "my_own_court_positions"
							datamodel = "[CourtPositionsWindow.HeldPositions]"
							visible = "[Not(IsDataModelEmpty( CourtPositionsWindow.HeldPositions ))]"
							layoutpolicy_horizontal = expanding

							using = Animation_Tab_Switch

							# your position
							item = {
								widget_your_court_position_item_ocr = {
								}
							}
						}
					}
				}

				vbox = {
					name = "your_court_positions"
					layoutpolicy_horizontal = expanding
					visible = "[CourtPositionsWindow.HasEmployedPositions]"

					button_text = {
						layoutpolicy_horizontal = expanding
						shortcut = map_mode_1
						blockoverride "pre" {
							text_single = {
								raw_text = "[CountItems]"
								hbox = {
									datamodel = "[CourtPositionsWindow.AllPositions.GetItems]"
									name = "items"
									item = {
										hbox = {
											visible = "[CourtPositionListItem.GetObject.IsEmployedPosition]"
										}
									}
								}
							}
						}
						blockoverride "text" {
							raw_text = "[Localize('COURT_POSITIONS_COURT_VIEW_positions_in_your_court')],"
						}
						onclick = "[GetVariableSystem.Toggle( 'expand_active_court_positions' )]"
						blockoverride "extra" {
							text_single = {
								raw_text = "[Select_CString(GetVariableSystem.Exists('expand_active_court_positions'), 'Expanded', 'Collapsed')] E."
							}
						}
					}

					### Titles in your court
					vbox = {
						name = "active_positions_in_your_court"
						visible = "[GetVariableSystem.Exists( 'expand_active_court_positions' )]"
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							visible = "[Not( CourtPositionsWindow.HasEmployedPositions )]"
							text = "COURT_POSITIONS_no_positions_in_your_court"
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							visible = "[CourtPositionsWindow.HasEmployedPositions]"
							raw_text = "Click to replace, right-click to view character."
						}

						vbox = {
							name = "active_positions"
							datamodel = "[CourtPositionsWindow.AllPositions.GetItems]"
							visible = "[CourtPositionsWindow.HasEmployedPositions]"
							layoutpolicy_horizontal = expanding

							item = {
								widget_hired_court_position_item_ocr = {
									visible = "[CourtPositionListItem.GetObject.IsEmployedPosition]"
								}
							}
						}
					}
				}

				vbox = {
					name = "your_empty_court_positions"
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding

						blockoverride "pre" {
							text_single = {
								raw_text = "[CountItems]"
								alwaystransparent = yes

								hbox = {
									name = "items"
									datamodel = "[CourtPositionsWindow.AllPositions.GetItems]"
									item = {
										container = {
											visible = "[Not( CourtPositionListItem.GetObject.IsEmployedPosition )]"
										}
									}
								}
							}
						}

						blockoverride "text" {
							raw_text = "COURT_POSITIONS_WINDOW_EMPTY_POSITION_HEADER"
						}
						onclick = "[GetVariableSystem.Toggle( 'expand_empty_court_positions' )]"

						blockoverride "extra" {
							text_single = {
								raw_text = "[Select_CString(GetVariableSystem.Exists('expand_empty_court_positions'), 'Expanded', 'Collapsed')]."
							}
						}
					}

					### Empty positions in your court
					vbox = {
						name = "empty_positions_in_your_court"
						layoutpolicy_horizontal = expanding
						visible = "[GetVariableSystem.Exists( 'expand_empty_court_positions' )]"

						text_single = {
							visible = "[Not( CourtPositionsWindow.HasEmptyPositions )]"
							text = "COURT_POSITIONS_cannot_hire_more_positions_in_category"
						}

						vbox = {
							datamodel = "[CourtPositionsWindow.AllPositions.GetItems]"
							visible = "[CourtPositionsWindow.HasEmptyPositions]"
							layoutpolicy_horizontal = expanding

							item = {
								widget_court_position_item_ocr = {
									visible = "[Not( CourtPositionListItem.GetObject.IsEmployedPosition )]"
								}
							}
						}
					}
				}
			}
		}
	}
}


template agot_court_position_size {
	size = "[Select_CVector2f(IsDataModelEmpty( CourtPositionItem.GetTasks ), '(CVector2f)537,45', Select_CVector2f( Isnt('court_tasks'), '(CVector2f)537,160', '(CVector2f)537,70' ))]"
}
