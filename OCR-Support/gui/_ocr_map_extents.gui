types OCR {
	type farthest_county = button_text {
		using = prov_click
    visible = "[Title.IsValid]"
		datacontext = "[Title.GetCountyData.GetCapital]"
		blockoverride "text" {
			raw_text = "[Title.GetNameNoTierNoTooltip],"
		}
		blockoverride "extra" {
			text_single = {
				visible = "[Not(ObjectsEqual(MyCapital, Province.Self))]"
				raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)],"
			}

			text_single = {
				visible = "[ObjectsEqual(MyCapital, Province.Self)]"
				raw_text = "your capital,"
			}

			text_single = {
				# visible = no
				raw_text = "around [Title.GetDeJureLiege.GetDeJureLiege.GetBaseNameNoTierNoTooltip],"
			}

			block "realm" {
				text_single = {
					visible = "[Not(Title.GetHolder.GetTopLiege.IsLocalPlayer)]"
					raw_text = "held by [Title.GetHolder.GetTopLiege.GetPrimaryTitle.GetNameNoTierNoTooltip]."
				}

				text_single = {
					visible = "[And(Title.GetHolder.GetTopLiege.IsLocalPlayer, Not(ObjectsEqual(MyCapital, Province.Self)))]"
					raw_text = "in your realm."
				}
			}
		}
	}

	type flow_map_extents = flowcontainer {
		direction = vertical
		ignoreinvisible = yes
		visible = "[Scope.Var('westest').IsSet]"


		button_text = {
			block "click" {
				onclick = "[Set('steppe_tab', 'map')]"
			}
			block "refresh" {}
			# blockoverride "pre" {
			# 	text_single = {
			# 		raw_text = "Map extents."
			# 	}
			# }
			blockoverride "text" {
				block "name" {}
			}
			blockoverride "extra" {
				text_single = {
					raw_text = "stretches across [Scope.ScriptValue('total_counties_map_extent')] counties,"
				}
				text_single = {
					block "tribs" {
						visible = no
					}
					raw_text = "not counting tributaries,"
				}
			}
		}

		flowcontainer = {
			ignoreinvisible = yes
			direction = vertical

      flow_cardinal_extents = {
        # visible = "[Not(GetScriptedGui('are_extents_repeated_ocr').IsShown( GuiScope.SetRoot( Scope ).End ))]"
      }
      # flow_cardinal_extents = {
      #   visible = "[GetScriptedGui('are_extents_repeated_ocr').IsShown( GuiScope.SetRoot( Scope ).End )]"
      #   blockoverride "duchy" {}
      # }
		}

    farthest_county = {
      datacontext = "[Scope.Var('center').Title]"
      blockoverride "pre" {
        text_single = {
          raw_text = "Center:"
        }
      }
    }

		flowcontainer = {
			ignoreinvisible = yes
			spacing = 3
			block "average" {}

			text_single = {
				raw_text = "Average"
			}

			text_single = {
				raw_text = "[Scope.ScriptValue('average_development_ocr')|1]"
			}

			text_single = {
				raw_text = "development and"
			}

			text_single = {
				raw_text = "[Scope.ScriptValue('average_control_ocr')|1]"
			}

			text_single = {
				raw_text = "control."
			}
		}

		flowcontainer = {
			ignoreinvisible = yes
			spacing = 3
			block "average" {}

			text_single = {
				raw_text = "[Scope.ScriptValue('total_castles_in_counties')] castles,"
			}

			text_single = {
				raw_text = "[Scope.ScriptValue('total_cities_in_counties')] cities,"
			}

			text_single = {
				raw_text = "[Scope.ScriptValue('total_temples_in_counties')] temples,"
			}

			text_single = {
				raw_text = "[Scope.ScriptValue('total_tribes_in_counties')] tribes,"
			}

			text_single = {
				raw_text = "[Scope.ScriptValue('total_nomadic_in_counties')] nomadic settlements,"
			}
		}

		flowcontainer = {
			ignoreinvisible = yes
			spacing = 3

			visible = "[DataModelHasItems(Scope.GetList('terrains'))]"

			text_single = {
				raw_text = "Dominant terrain:"
			}

			datamodel = "[DataModelFirst(Scope.GetList('terrains'), Min_int32('(int32)3', GetDataModelSize(Scope.GetList('terrains'))))]"

			# datamodel = "[Scope.GetList('terrains')]"
			# [Scope.Var('terrain_in_area').GetValue|0],

			item = {
				text_single = {
					raw_text = "[Scope.Province.GetTerrain.GetNameNoTooltip] [Scope.Var('terrain_percentage').GetValue|0%],"
				}
			}
		}

		flowcontainer = {
			ignoreinvisible = yes
			spacing = 3

			text_single = {
				raw_text = "[Scope.ScriptValue('coastal_counties_extent')] coastal counties,"
			}

			text_single = {
				raw_text = "[Scope.ScriptValue('river_counties_extent')] riverside."
			}
		}



    spacer = { size = { 0 5 } }

		text_single = {
			layoutpolicy_horizontal = expanding
			raw_text = "Furthest counties:"
		}

		flowcontainer = {
			ignoreinvisible = yes
			direction = vertical
			layoutpolicy_horizontal = expanding

			farthest_county = {
				datacontext = "[Scope.Var('westest').Title]"
				blockoverride "pre" {
					text_single = {
						raw_text = "West:"
					}
				}
			}

			farthest_county = {
				datacontext = "[Scope.Var('northest').Title]"
				blockoverride "pre" {
					text_single = {
						raw_text = "North:"
					}
				}
			}


			farthest_county = {
				datacontext = "[Scope.Var('eastest').Title]"
				blockoverride "pre" {
					text_single = {
						raw_text = "East:"
					}
				}
			}

			farthest_county = {
				datacontext = "[Scope.Var('southest').Title]"
				blockoverride "pre" {
					text_single = {
						raw_text = "South:"
					}
				}
			}
		}
	}

	type button_map_extents = button_text {
		shortcut = map_editor_toggle_game_map_mode

		blockoverride "pre" {
			text_single = {
				raw_text = "Map extents, M."
			}
		}
		blockoverride "text" {
			block "name" {}
		}
		blockoverride "extra" {
      flowcontainer = {
        ignoreinvisible = yes
        spacing = 3
        block "extents" {
          visible = "[Scope.Var('westest').IsSet]"
        }

        text_single = {
          datacontext = "[Scope.Var('eastest').Title.GetCountyData.GetCapital]"
          raw_text = "[DistanceTo( Scope.Var('westest').Title.GetCountyData.GetCapital, Province)|0] [DaysTo( Scope.Var('westest').Title.GetCountyData.GetCapital, Province)] by"
        }
        text_single = {
          datacontext = "[Scope.Var('northest').Title.GetCountyData.GetCapital]"
          raw_text = "[DistanceTo( Scope.Var('southest').Title.GetCountyData.GetCapital, Province)|0] [DaysTo( Scope.Var('southest').Title.GetCountyData.GetCapital, Province)]."
        }
      }
		}
	}

	type flow_map_areas = flowcontainer {
		layoutpolicy_horizontal = expanding
		ignoreinvisible = yes
		direction = vertical

    flowcontainer = {
      ignoreinvisible = yes
      spacing = 3

      visible = "[LessThan_int32(GetDataModelSize(Scope.GetList('area_centers')), '(int32)2')]"

      text_single = {
        block "name" {}
      }

      text_single = {
        raw_text = "is whole and there are no split areas."
      }
    }

    flowcontainer = {
      ignoreinvisible = yes
      direction = vertical

  		visible = "[GreaterThan_int32(GetDataModelSize(Scope.GetList('area_centers')), '(int32)1')]"

  		text_single = {
  			raw_text = "There are [GetDataModelSize(Scope.GetList('area_centers'))] areas:"
  		}

  		flowcontainer = {
  			ignoreinvisible = yes
  			direction = vertical

  			datamodel = "[Scope.GetList('area_centers')]"

  			item = {
  				button_text = {
  					datacontext = "[Scope.Title]"
  					datacontext = "[Scope.Title.GetCountyData.GetCapital]"
  					using = prov_click
  					using = prov_pan
  					blockoverride "extra" {
  						# text_single = {
  						# 	raw_text = "[IndexNumber],"
  						# }
  						flowcontainer = {
  							ignoreinvisible = yes
  							spacing = 3

  							visible = "[EqualTo_int32(GetDataModelSize(Scope.GetList('blob')), '(int32)1')]"

  							text_single = {
  								raw_text = "[Title.GetNameNoTierNoTooltip], in"
                  margin_right = 3
  							}

  							text_single = {
  								raw_text = "[Title.GetDeJureLiege.GetDeJureLiege.GetNameNoTierNoTooltip],"
  							}

  							# text_single = {
  							# 	raw_text = "[Title.GetDeJureLiege.GetNameNoTierNoTooltip]."
  							# }

  							# text_single = {
  							# 	visible = "[Not(Title.GetHolder.GetTopLiege.IsLocalPlayer)]"
  							# 	raw_text = "[Title.GetHolder.GetTopLiege.GetPrimaryTitle.GetNameNoTierNoTooltip],"
  							# }
  							# text_single = {
  							# 	visible = "[Title.GetHolder.GetTopLiege.IsLocalPlayer]"
  							# 	raw_text = "your realm,"
  							# }
  						}

  						flowcontainer = {
  							ignoreinvisible = yes
  							spacing = 3

  							visible = "[GreaterThan_int32(GetDataModelSize(Scope.GetList('blob')), '(int32)1')]"

  							text_single = {
  								raw_text = "[GetDataModelSize(Scope.GetList('blob'))]"
  							}
  							text_single = {
  								raw_text = "counties around"
                  margin_right = 3
  							}
  							text_single = {
  								visible = no#"[IsIndexFirst]"
  								raw_text = "de jure"
  							}
  							text_single = {
  								raw_text = "[Title.GetDeJureLiege.GetDeJureLiege.GetNameNoTierNoTooltip],"
  							}
  							# text_single = {
  							# 	visible = "[Not(Title.GetHolder.GetTopLiege.IsLocalPlayer)]"
  							# 	raw_text = "[Title.GetHolder.GetTopLiege.GetPrimaryTitle.GetNameNoTierNoTooltip],"
  							# }
  							# text_single = {
  							# 	visible = "[Title.GetHolder.GetTopLiege.IsLocalPlayer]"
  							# 	raw_text = "your realm,"
  							# }
  							# farthest_county = {
  							# 	blockoverride "realm" {
  							# 		margin_left = 0
  							# 	}
  							# }
  						}

              flowcontainer = {
                ignoreinvisible = yes
                spacing = 3
                block "center" {
                  datacontext = "[Scope.Var('center').Title.GetCountyData]"
                  visible = "[Scope.Var('center').IsSet]"
                }

                text_single = {
                  visible = "[Not(ObjectsEqual(County.Self, Province.GetCounty))]"
                  raw_text = "[DistanceTo(County.GetCapital, Province)|0] [DaysTo(County.GetCapital, Province)] [Direction(County.GetCapital, Province)] from center."
                }

                text_single = {
                  visible = "[ObjectsEqual(County.Self, Province.GetCounty)]"
                  raw_text = "center,"
                }

                text_single = {
                  visible = "[ObjectsEqual(County.Self, Province.GetCounty)]"

                  raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)] from you."
                }
              }


  						# text_single = {
  						# 	raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)]."
  						# }
  					}
  				}
  			}
  		}
    }

		text_single = {
			visible = "[Isnt('map_extent_de_jure_tip')]"
			raw_text = "Note, this list uses de jure kingdoms for points of reference."
		}


		button_text = {
			layoutpolicy_horizontal = expanding
			shortcut = map_mode_18
			block "refresh" {}
			blockoverride "text" {
				raw_text = "Refresh, Contol R."
			}
		}
	}

  type flow_cardinal_extents = flowcontainer {
    ignoreinvisible = yes
    direction = vertical

    flowcontainer = {
      ignoreinvisible = yes
      spacing = 3
      datacontext = "[Scope.Var('eastest').Title.GetCountyData.GetCapital]"

      text_single = {
        raw_text = "[DistanceTo( Scope.Var('westest').Title.GetCountyData.GetCapital, Province)|0] [DaysTo( Scope.Var('westest').Title.GetCountyData.GetCapital, Province)] west to east,"
      }

      text_single = {
        raw_text = "from"
      }

      text_single = {
        raw_text = "[Scope.Var('westest').Title.GetDeJureLiege.GetDeJureLiege.GetBaseNameNoTierNoTooltip]"
      }

      text_single = {
        block "duchy" {
          visible = no
        }
        raw_text = "[Scope.Var('westest').Title.GetDeJureLiege.GetBaseNameNoTierNoTooltip]"
      }

      text_single = {
        raw_text = "to"
      }

      text_single = {
        raw_text = "[Scope.Var('eastest').Title.GetDeJureLiege.GetDeJureLiege.GetBaseNameNoTierNoTooltip]"
      }
      text_single = {
        block "duchy" {
          visible = no
        }
        raw_text = "[Scope.Var('eastest').Title.GetDeJureLiege.GetBaseNameNoTierNoTooltip]"
      }

      flowcontainer = {
        ignoreinvisible = yes
        spacing = 3
        block "coordinates" {}

        , = {}

        text_single = {
          raw_text = "[FixedPointToInt(Divide_CFixedPoint(Scope.Var('westest').Title.GetCountyData.GetCapital.MakeScope.Var('pos_x').GetValue, '(CFixedPoint)100'))|O]"
        }
        text_single = {
          raw_text = "to [FixedPointToInt(Divide_CFixedPoint(Scope.Var('eastest').Title.GetCountyData.GetCapital.MakeScope.Var('pos_x').GetValue, '(CFixedPoint)100'))|O]"
        }

        text_single = {
          margin_left = 3
          raw_text = "meridian"
        }
      }

      dot_l = {}
    }

    flowcontainer = {
      ignoreinvisible = yes
      spacing = 3
      datacontext = "[Scope.Var('northest').Title.GetCountyData.GetCapital]"

      text_single = {
        raw_text = "[DistanceTo( Scope.Var('southest').Title.GetCountyData.GetCapital, Province)|0] [DaysTo( Scope.Var('southest').Title.GetCountyData.GetCapital, Province)] north to south,"
      }

      text_single = {
        raw_text = "from"
      }

      text_single = {
        raw_text = "[Scope.Var('northest').Title.GetDeJureLiege.GetDeJureLiege.GetBaseNameNoTierNoTooltip]"
      }

      text_single = {
        block "duchy" {
          visible = no
        }
        raw_text = "[Scope.Var('northest').Title.GetDeJureLiege.GetBaseNameNoTierNoTooltip]"
      }

      text_single = {
        raw_text = "to"
      }

      text_single = {
        raw_text = "[Scope.Var('southest').Title.GetDeJureLiege.GetDeJureLiege.GetBaseNameNoTierNoTooltip]"
      }

      text_single = {
        block "duchy" {
          visible = no
        }
        raw_text = "[Scope.Var('southest').Title.GetDeJureLiege.GetBaseNameNoTierNoTooltip]"
      }

      flowcontainer = {
        ignoreinvisible = yes
        spacing = 3
        block "coordinates" {}

        , = {}

        text_single = {
          raw_text = "[FixedPointToInt(Divide_CFixedPoint(Scope.Var('northest').Title.GetCountyData.GetCapital.MakeScope.Var('pos_y').GetValue, '(CFixedPoint)100'))|O]"
        }
        text_single = {
          raw_text = "to [FixedPointToInt(Divide_CFixedPoint(Scope.Var('southest').Title.GetCountyData.GetCapital.MakeScope.Var('pos_y').GetValue, '(CFixedPoint)100'))|O]"
        }

        text_single = {
          raw_text = "parallel"
        }
      }


      dot_l = {}
    }
  }
}
