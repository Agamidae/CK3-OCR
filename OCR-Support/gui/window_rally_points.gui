window = {
	name = "rally_point_window"
	parentanchor = bottom
	using = ocr_size
	movable = no
	layer = middle

	datacontext = "[RallyPointWindow.GetSelectedRallyPoint]"

	button = {
		onclick = "[RallyPointWindow.CloseAndDeselect]"
		using = close_window_ocr
	}

	background = {
		texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
		spriteType = Corneredtiled
		spriteborder = { 18 18 }
		margin = { -23 -13 }
		margin_left = 20
		margin_bottom = 20
		texture_density = 2

		modify_texture = {
			name = "overlay"
			texture = "gfx/interface/component_overlay/overlay_effect.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = overlay
		}
	}

	state = {
		name = _show
		on_start = "[GetVariableSystem.Set( 'county_view_open', 'true' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"
		on_start = "[Set('rally_point_window', 'yes')]"

		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
		using = Animation_FadeIn_BottomLeft
	}

	state = {
		name = _hide
		on_start = "[GetVariableSystem.Clear( 'county_view_open' )]"
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"
		on_finish = "[Clear('rally_point_window')]"

		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
		using = Animation_FadeOut_BottomLeft
	}

	vbox = {
		using = ocr_margins

		button_text = {
			layoutpolicy_horizontal = expanding
		    blockoverride "text" {
				raw_text = "[RallyPointWindow.GetSelectedRallyPoint.GetName]. Shift Q to pan camera here."
		    }
			using = title_pan
			shortcut = map_mode_9
			datacontext = "[RallyPointWindow.GetSelectedRallyPoint.GetProvince.GetCoATitle]"
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 10

			hbox = {
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "local_levies_label_text"
						raw_text = "[Localize('RP_LOCAL_LEVIES_LABEL')]."
						layoutpolicy_horizontal = expanding
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						hbox = {
							layoutpolicy_horizontal = expanding
							name = "local_levies"

							text_single = {
								raw_text = "[RallyPointWindow.GetUnraisedLocalLevies] unraised men"
							}

							text_single = {
								raw_text = ", [RallyPointWindow.GetTotalLocalLevies] total"
							}

							text_single = {
								raw_text = ",[Localize('ARMY_QUALITY_LEVEL_1')]."
							}

							tooltip = "RP_LOCAL_LEVIES_TOOLTIP"
							expand = { }
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							datacontext = "[RallyPointWindow.GetAllTroopsComposition]"

							button_text = {
								shortcut = speed_1
								layoutpolicy_horizontal = expanding
								onclick = "[RallyPointWindow.OnRaiseAll]"
								onclick = "[CloseGameView('military')]"
								enabled = "[RallyPointWindow.CanRaiseAll]"
								tooltip = "[RallyPointWindow.GetRaiseAllTooltip]"
								blockoverride "disabled" {
									visible = "[Not(RallyPointWindow.CanRaiseAll)]"
								}

								blockoverride "text" {
									raw_text = "1, Raise all your men here."
								}
							}

							button_text = {
								shortcut = speed_2
								layoutpolicy_horizontal = expanding
								onclick = "[RallyPointWindow.OnRaise]"
								onclick = "[CloseGameView('military')]"
								enabled = "[RallyPointWindow.CanRaise]"
								tooltip = "[RallyPointWindow.GetRaiseTooltip]"
								blockoverride "disabled" {
									visible = "[Not(RallyPointWindow.CanRaise)]"
								}
								blockoverride "text" {
									raw_text = "2, [Localize('RP_RAISE')]."
								}
							}

							button_text = {
								shortcut = speed_3
								layoutpolicy_horizontal = expanding
								onclick = "[RallyPointWindow.OnRaiseMenAtArms]"
								onclick = "[CloseGameView('military')]"
								enabled = "[RallyPointWindow.CanRaiseMenAtArms]"
								tooltip = "[RallyPointWindow.GetRaiseMenAtArmsTooltip]"
								blockoverride "disabled" {
									visible = "[Not(RallyPointWindow.CanRaiseMenAtArms)]"
								}
								blockoverride "text" {
									raw_text = "3, Raise all [ArmyComposition.GetMaxNumberOfMAA|V] men at arms here."
								}
							}
						}

						button_text = {
							shortcut = speed_4
							layoutpolicy_horizontal = expanding
							onclick = "[RallyPointWindow.OnRaiseRaid]"
							onclick = "[CloseGameView('military')]"
							visible = "[GetPlayer.CanRaid]"
							enabled = "[RallyPointWindow.CanRaiseRaid]"
							tooltip = "[RallyPointWindow.GetRaiseRaidTooltip]"
							blockoverride "disabled" {
								visible = "[Not(RallyPointWindow.CanRaiseRaid)]"	
							}
					    blockoverride "text" {
					       raw_text = "4, [Localize('RP_RAISE_RAID')]."
					    }
						}
						hbox = {
							layoutpolicy_horizontal = expanding

							text_multi_wide = {
								raw_text = "Click with control slash to raise all armies without splitting."
							}
							expand = {}
						}
					}
				}
			}

			expand = { }
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 0 10 }

			## Multi-selected
			hbox = {
				name = "rally_point_items_grid"
				datamodel = "[RallyPointWindow.GetSelectedRallyPointItems]"
				visible = "[GreaterThan_int32(GetDataModelSize(RallyPointWindow.GetSelectedRallyPointItems), '(int32)1')]"

				item = {
					container = {
						name = "rally_point_item"
						tooltip = "[SelectedRallyPointItem.GetTooltip]"
						using = tooltip_ne

						icon = {
							name = "rally_point_selected_background"
							visible = "[SelectedRallyPointItem.IsShown]"
							size = { 45 45 }
							texture = "gfx/interface/window_military/banner_icon_glow.dds"
							position = { 0 -3 }
							alwaystransparent = yes
						}

						button_normal = {
							name = "rally_point_icon"
							size = { 45 45 }
							texture = "gfx/interface/window_military/banner_icon.dds"
							tintcolor = "[SelectedRallyPointItem.GetRallyPoint.GetColor]"
							onclick = "[SelectedRallyPointItem.OnClick]"
							down = "[SelectedRallyPointItem.IsShown]"
						}

						# icon = {
						# 	name = "banner_icon_raised_overlay"
						# 	## MISSING ART // NOT FOR ALPHA
						# 	texture = "gfx/interface/_debug/placeholder.dds"
						# 	#texture = "gfx/interface/_debug/banner_raised_small.dds"
						# 	size = { 50 50 }
						# 	alwaystransparent = yes
						# 	visible = "[SelectedRallyPointItem.IsRaised]"
						# }
					}
				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding
		    blockoverride "text" {
		        raw_text = "Move rally point, E."
		    }
				shortcut = map_mode_1
				onclick = "[RallyPointWindow.OnMove]"
				enabled = "[RallyPointWindow.CanMoveRallyPoint]"
				tooltip = "[RallyPointWindow.GetMoveRallyPointTooltip]"
				blockoverride "disabled" {
					visible = "[Not(RallyPointWindow.CanMoveRallyPoint)]"
				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				shortcut = increase_speed_2
		    blockoverride "text" {
	        raw_text = "Delete rally point, hotkey X."
		    }
				onclick = "[RallyPointWindow.OnRemove]"
				clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_unit_army_disband"
				enabled = "[RallyPointWindow.CanRemove]" #TODO I don't remember why I hid it instead of disabling...
				blockoverride "disabled" {
					visible = "[Not(RallyPointWindow.CanRemove)]"
				}
				tooltip = "[RallyPointWindow.GetRemoveTooltip]"
				tooltip_visible = "[Not(RallyPointWindow.CanRemove)]"
			}
		}
	}
}

widget = {
	name = "place_rally_point_window"
	size = { 100% 100% }
	using = TooltipFocus

	state = {
		name = _show
		on_start = "[GetVariableSystem.Clear('rally_selected')]"
		on_start = "[GetScriptedGui('suggest_rally_point').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
	}

	flowcontainer = {
		parentanchor = center
		direction = vertical
		position = { 0 -40 }
		background = { using = Background_Area_Border_Solid }
		widgetanchor = left

		flowcontainer = {
		    ignoreinvisible = yes
			spacing = 3

			text_single = {
				visible ="[PlaceRallyPoint.IsMovingRallyPoint]"
				raw_text = "Click here to move the rally point to"
			}

			text_single = {
				visible ="[Not(PlaceRallyPoint.IsMovingRallyPoint)]"
				raw_text = "Click here to create a rally point in"
			}

			text_single = {
				visible = "[Not(GetVariableSystem.Exists('rally_selected'))]"
				raw_text = "the last viewed county."
			}

			text_single = {
				visible = "[GetVariableSystem.Exists('rally_selected')]"
				raw_text = "[GetVariableSystem.Get('rally_selected')]."
			}
		}


		text_single = {
			raw_text = "Or press Shift 1."
		}
		text_single = {
			raw_text = "Press Escape to cancel."
		}

		text_single = {
			raw_text = "Your closest counties to enemy capital, click to move camera there."
		}

		datamodel = "[GetPlayer.MakeScope.GetList('rally_point_suggestions')]"

		item = {
			button_text = {
				using = title_pan
				using = title_pan_right
				datacontext = "[Scope.GetProvince.GetCoATitle]"
				onclick = "[GetVariableSystem.Set('rally_selected', Title.GetNameNoTierNoTooltip)]"
			    blockoverride "text" {
					raw_text = "[Title.GetNameNoTierNoTooltip],"
			    }
				blockoverride "extra" {
					spacing = 4
					datacontext = "[Scope.GetProvince]"
					text_single = {
						visible = "[Not(ObjectsEqual(Province.Self, MyCapital))]"
						raw_text = "AnyProvinceDistance"
					}
					text_single = {
						visible = "[Not(ObjectsEqual(Province.Self, MyCapital))]"
						raw_text = "AnyProvinceDirection"
					}

					text_single = {
						visible = "[ObjectsEqual(Province.Self, MyCapital)]"
						raw_text = "capital,"
					}
					text_single = {
						raw_text = "in [Province.GetCounty.GetTitle.GetDeJureLiege.GetNameNoTierNoTooltip], [Province.GetCounty.GetTitle.GetDeJureLiege.GetDeJureLiege.GetNameNoTierNoTooltip]"
					}
					dot = {
						margin_left = -3
					}
				}
			}
		}
	}


	button_primary_big = {
		name = "close_assignment_window"
		# text = "BACK_LABEL"

		parentanchor = bottom|hcenter
		position = { 0 -50}

		onclick = "[PlaceRallyPoint.Close]"
		using = close_window_ocr
	}


	#using = Background_Tooltip

	vbox = {}
}
