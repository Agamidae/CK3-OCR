textbox = {
	name = "console_output_item"
	maximumsize = { 750 -1 }
	align = left|top
	using = editor_font
	multiline = yes
	autoresize = yes
	alwaystransparent = no
	fontsize = 15
	pseudo_localization_enabled = no
}

window = {
	name = "console_window"
	size = { 800 100% }
	layer = confirmation
	visible = "[GetVariableSystem.Exists('console')]"

	button = {
		shortcut = close_window
		onclick = "[GetVariableSystem.Clear('console')]"
	}

	state = {
		name = _hide
		on_finish = "[ExecuteConsoleCommand('clear')]"
		using = Sound_WindowHide_Standard
	}

	state = {
		name = _show
		using = Sound_WindowShow_Standard
	}

	vbox = {
		layoutpolicy_vertical = expanding
		margin_top = 10		

		alwaystransparent = no
		filter_mouse = all
		spacing = 2
		allow_outside = yes
		using = dockable_background

		scrollarea = {
			name = "console_output_scrollarea"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			scrollwidget = {
				flowcontainer = {
					margin = { 10 0 }
					name = "console_output"
					direction = "vertical"
					ignoreinvisible = no
				}
			}

			scrollbar_vertical = {
				using = editor_vertical_scrollbar
			}

			scrollbar_horizontal = {
				using = editor_horizontal_scrollbar
			}
		}

		flowcontainer = {
			spacing = 3
			ignoreinvisible = yes
			allow_outside = yes
			visible = no

			dockable_button = {
				size = { 24 24 }
				raw_text = ""
				onclick = "[ConsoleWindow.ToggleMenu]"
			}

			flowcontainer = {
				name = "menu"
				visible = "[ConsoleWindow.IsMenuShown]"
				spacing = 3

				scrollarea = {
					name = "menu_scroll_area"
					size = { 200 505 }
					scrollbarpolicy_horizontal = always_off

					scrollbar_vertical = {
						using = editor_vertical_scrollbar
					}

					scrollwidget = {
						fixedgridbox = {
							name = "menu_grid"
							addcolumn = 150
							addrow = 24

							item = {
								container = {

									icon = {
										visible = "[ConsoleMenuItem.IsCurrentGroup]"
										position = { 0 0 }
										size = { 106 28 }
									}

									dockable_button = {
										position = { 3 3 }
										size = { 180 22 }
										onclick = "[ConsoleMenuItem.Select]"

										text = "[ConsoleMenuItem.GetName]"

										tooltip = "[ConsoleMenuItem.GetHelp]"
										using = tooltip_es
									}
								}
							}
						}
					}
				}

				scrollarea = {
					name = "command_scroll_area"
					size = { 400  505 }
					scrollbarpolicy_horizontal = always_off

					scrollbar_vertical = {
						using = editor_vertical_scrollbar
					}

					scrollwidget = {
						fixedgridbox = {
							name = "command_grid"
							position = { 0 0 }
							addcolumn = 400
							addrow = 29

							item = {
								dockable_button = {
									size = { 400 24 }
									onclick = "[ConsoleMenuItem.Select]"
									tooltip = "[ConsoleMenuItem.GetHelp]"
									text = "[ConsoleMenuItem.GetName]"
								}
							}
						}
					}
				}
			}
		}

		hbox = {
		    layoutpolicy_horizontal = expanding
			margin = { 5 0 }

			editor_textinput = {
				focus_on_visible = yes
				visible = "[GetVariableSystem.Exists('console')]"
				name = "console_edit"
				layoutpolicy_horizontal = expanding
				size = { 400 40 }
				alwaystransparent = no
				focuspolicy = all
				fontsize = 15
				maxcharacters = 9999
			}
		    expand = { }
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			name = "toolbars_window"
			visible = "[Not(GetVariableSystem.Exists('console_tools'))]"
			margin = { 10 0 }

			hbox = {
			    layoutpolicy_horizontal = expanding

			    vbox = {
					layoutpolicy_horizontal = expanding
					max_width = 500

					vbox = {
						layoutpolicy_horizontal = expanding
						margin = { 0 5 }
						margin_left = 5

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "Console is open. You may start typing."
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "10 debug commands:"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Add 100 gold, right click to remove."
							}
							onclick = "[ExecuteConsoleCommand('gold 100')]"
							onrightclick = "[ExecuteConsoleCommand('gold -100')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Add 100 piety, right click to remove."
							}
							onclick = "[ExecuteConsoleCommand('piety 100')]"
							onrightclick = "[ExecuteConsoleCommand('piety -100')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Add 100 prestige, right click to remove."
							}
							onclick = "[ExecuteConsoleCommand('prestige 100')]"
							onrightclick = "[ExecuteConsoleCommand('prestige -100')]"
						}
						# button_text = {
						# 	visible = "[GetPlayer.IsValid]"
						# 	layoutpolicy_horizontal = expanding
						# 	blockoverride "text" {
						# 		raw_text = "Spawn 5000 soldiers.[AddTextIf(Not(GetPlayer.IsAtWar), 'Will be added to the military window.')]"
						# 	}
						# 	onclick = "[Click('spawn_army')]"
						# }
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Toggle Yesmen. ai will agree to all proposals."
							}
							onclick = "[ExecuteConsoleCommand('yesmen')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Disable ai."
							}
							onclick = "[ExecuteConsoleCommand('ai.disable')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Enable ai."
							}
							onclick = "[ExecuteConsoleCommand('ai.enable')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Toggle instant movement."
							}
							onclick = "[ExecuteConsoleCommand('instamove')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Toggle instant building."
							}
							onclick = "[ExecuteConsoleCommand('instabuild')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
						    blockoverride "text" {
						   		raw_text = "[Select_CString(InDebugMode, 'Disable', 'Enable')] Debug mode. Adds debug character interactions."
						    }
							onclick = "[ExecuteConsoleCommand('debug_mode')]"
						}
						button_text = {
							layoutpolicy_horizontal = expanding
						    blockoverride "text" {
						   		raw_text = "Reload GUI."
						    }
							visible = "[InDebugMode]"
							onclick = "[ExecuteConsoleCommand('reload gui')]"
						}
						widget = {
							size = { 0 5 }
						}
					}
				}

			    expand = { }
			}
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			blockoverride "text" {
				raw_text = "[Select_CString(GetVariableSystem.Exists('console_tools'), 'Show', 'Hide')] menus"
				margin_left = 5
			}
			onclick = "[GetVariableSystem.Toggle('console_tools')]"
		}

		# button_text = {
		# 	background = { using = Background_Area_Border_Solid }
		# 	layoutpolicy_horizontal = expanding
		# 	blockoverride "text" {
		# 		raw_text = "[Select_CString(InReleaseMode, 'Show', 'Hide')] errors and FPS."
		# 	}
		# 	onclick = "[ExecuteConsoleCommand('release_mode')]"
		# }

		button_text = {
			visible = "[Not(ReleaseMode)]"
			background = { using = Background_Area_Border_Solid }
			layoutpolicy_horizontal = expanding
			onclick = "[ExecuteConsoleCommand('tweak gui.debug')]"
		    blockoverride "text" {
		        raw_text = "GUI DEBUG"
		    }
		}

		button = {
			layoutpolicy_horizontal = expanding
			background = { using = Background_Area_Border_Solid }
			size = { 0 30 }

			onclick = "[Toggle('hide_tooltips')]"
			onclick = "[Toggle('darken_map')]"
			onclick = "[Toggle('tooltip_focus')]"
			onclick = "[ExecuteConsoleCommand('release_mode')]"
			# onclick = "[ClearErrorLog]"
			raw_tooltip = "Developer mode. Shows errors, map tooltips, disables tooltips background."
		}
	}
}