types CourtPositionTypes
{
	type court_position_task_icon_tooltip_widget_ocr = button
	{
		size = { 50 50 }

		alwaystransparent = no

		block "tooltip" {
			using = GeneralTooltipSetup
		}

		vbox = {
			restrictparent_min = yes
			spacing = -10
			blockoverride "wide_width" {
				min_width = 500
				max_width = 500
			}

			block "tooltip" {
				using = DefaultTooltipBackground
			}

			widget_court_position_task_ocr = {
				layoutpolicy_horizontal = expanding
				blockoverride "tooltipwidget" {}
			}

			### TOOLTIP FILLED/EMPLOYED
			flowcontainer = {
				visible = "[CourtPosition.IsValid]"
				layoutpolicy_horizontal = expanding
				ignoreinvisible = yes
				direction = vertical
				margin_left = 3
				margin_top = 1

				text_multi_wide = {

					text = "[GetCommandDesc( CourtPosition.ToggleTaskCmd(  CourtPositionTaskType.Self ) )]"
				}

				text_multi_wide = {
					visible = "[CourtPositionTaskType.HasEmployerCourtModifiers]"

					text = COURT_POSITION_TASK_EMPLOYER_COURT_EFFECTS
				}

				text_multi_wide = {
					visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetEmployerModifierDescription( CourtPosition.Self ) ) )]"


					text = COURT_POSITION_TASK_EMPLOYER_EFFECTS
				}

				text_multi_wide = {
					visible = "[CourtPositionTaskType.HasEmployerCourtModifiers]"


					text = COURT_POSITION_TASK_EMPLOYER_COURT_EFFECTS
				}

				text_multi_wide = {
					visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetOnStartEffectDesc( CourtPosition.Self ) ) )]"


					text = COURT_POSITION_TASK_START_EFFECTS
				}

				text_multi_wide = {
					visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetEmployeeModifierDescription ) )]"


					text = COURT_POSITION_TASK_EMPLOYEE_EFFECTS
				}

				text_multi_wide = {
					visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetOnEndEffectDesc( CourtPosition.Self )  ) )]"


					text = COURT_POSITION_TASK_END_EFFECTS
				}

				text_multi_wide = {


					text = COURT_POSITION_TASK_COST
				}

				text_multi_wide = {


					text = "[CourtPositionTaskType.GetDescription]"
					default_format = "#F"
				}

				block "click_to_activate"
				{
					text_multi_wide = {
						visible = "[IsValidCommand( CourtPosition.ToggleTaskCmd( CourtPositionTaskType.Self ) )]"


						text = "COURT_POSITION_TASK_CLICK_TT"
						default_format = "#I"
					}
				}
			}

			### TOOLTIP EMPTY/UNEMPLOYED
			flowcontainer = {
				visible = "[Not( CourtPosition.IsValid )]"
				layoutpolicy_horizontal = expanding
				ignoreinvisible = yes
				direction = vertical

				text_multi_wide = {
					visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetEmployerModifierGenericDescription ) )]"


					text = COURT_POSITION_TASK_EMPLOYER_GENERIC_EFFECTS
				}

				text_multi_wide = {
					visible = "[CourtPositionTaskType.HasEmployerCourtModifiers]"


					text = COURT_POSITION_TASK_EMPLOYER_COURT_GENERIC_EFFECTS
				}

				text_multi_wide = {
					visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetOnStartEffectGenericDesc() ) )]"


					text = COURT_POSITION_TASK_START_GENERIC_EFFECTS
				}

				text_multi_wide = {
					block "employee_modifier_description" {
						visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetEmployeeModifierDescription ) )]"
						text = COURT_POSITION_TASK_EMPLOYEE_EFFECTS
					}
				}

				text_multi_wide = {
					visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetOnEndEffectGenericDesc() ) )]"


					text = COURT_POSITION_TASK_END_GENERIC_EFFECTS
				}

				text_multi_wide = {


					text = COURT_POSITION_TASK_GENERIC_COST
				}

				text_multi_wide = {


					text = "[CourtPositionTaskType.GetDescription]"
					default_format = "#F"
				}
			}
		}
	}

	type widget_court_position_task_view_ocr = widget {
		### VIEW - TASK OUTER CIRCLE ###
		icon = {
			size = { 40 40 }
			parentanchor = center

			enabled = "[IsValidCommand( CourtPosition.ToggleTaskCmd( CourtPositionTaskType.Self ) )]"

			texture = "gfx/interface/buttons/button_round_frame.dds"

			background = {
				texture = "gfx/interface/buttons/button_round_bg.dds"
				using = Color_Button_Background

				modify_texture = {
					texture = "gfx/interface/component_overlay/overlay_texture.dds"
					blend_mode = overlay
				}
			}

			modify_texture = {
				texture = "gfx/interface/colors/colors_textured.dds"
				blend_mode = add
				framesize = { 96 96 }
				spritetype = corneredtiled
				frame = 1
			}

			### VIEW - TASK INNER ICON ###
			icon = {
				size = { 84% 84% }
				parentanchor = center

				texture = "[CourtPositionTaskType.GetIcon]"
			}

			tooltipwidget = {
				court_position_task_icon_tooltip_widget = {}
			}
			using = tooltip_sw
		}
	}

	type widget_court_position_task_ocr = button_text {
		blockoverride "num" {}
		shortcuts_list = {
			blockoverride "click" {
				block "enabled" {
					onclick = "[PostCommand( CourtPosition.ToggleTaskCmd( CourtPositionTaskType.Self ) )]"
				}
			}
		}
		block "enabled" {
			enabled = "[IsValidCommand( CourtPosition.ToggleTaskCmd( CourtPositionTaskType.Self ) )]"
			onclick = "[PostCommand( CourtPosition.ToggleTaskCmd( CourtPositionTaskType.Self ) )]"
		}
		blockoverride "disabled" {
			visible = "[And(Not(IsValidCommand( CourtPosition.ToggleTaskCmd( CourtPositionTaskType.Self ) )), CourtPosition.GetEmployee.IsValid)]"
		}
		blockoverride "pre" {
			text_single = {
				visible = "[CourtPosition.IsActiveTask( CourtPositionTaskType.Self )]"
				raw_text = "Active,"
			}
		}
		blockoverride "text" {
			raw_text = "[CourtPositionTaskType.GetName]."
		}
		block "tooltipwidget" {
			tooltipwidget = {
				court_position_task_icon_tooltip_widget_ocr = {}
			}
		}
	}

	type vbox_court_position_aptitude_ocr = flowcontainer {
		spacing = 3
		ignoreinvisible = yes

		text_single = {
			raw_text = "[CourtPosition.GetAptitudeText|V]"

			tooltipwidget = {
				court_position_aptitude_breakdown_tooltip = {
					datacontext = "[CourtPosition.GetAptitudeTooltip]"

					blockoverride "header_text" {
						text = "COURT_POSITION_aptitude_description_position"
					}

					blockoverride "modifier_list" {
						text = "[CourtPosition.GetEmployerBonuses]"
					}
				}
			}
		}

		block "aptitude" {
			text_single = {
				raw_text = "aptitude"
			}
		}

		, = {}

		text_single = {
			text = "[CourtPosition.GetSalaryText]"
			tooltip = "[CourtPosition.GetSalaryBreakdownTooltip]"
		}

		dot_l = {}
	}

	type widget_court_position_item_ocr = vbox {
		datacontext = "[CourtPositionItem.GetType]"
		datacontext = "[CourtPositionItem.GetCourtOwner]"
		datacontext = "[CourtPositionItem.GetPosition]"
		datacontext = "[CourtPosition.GetEmployee]"
		layoutpolicy_horizontal = expanding

		oncreate = "[BindFoldOutContext]"
		oncreate = "[PdxGuiFoldOut.SetShownBehavior( 'folded' )]"

		state = {
			name = "fold_all_court_positions"
			on_finish = "[PdxGuiFoldOut.Fold]"
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			visible = "[And(PdxGuiFoldOut.IsFolded, Isnt('focus_court_position'))]"
			onclick = "[PdxGuiFoldOut.Unfold]"
			onclick = "[Set('focus_court_position', 'yes')]"
			# we don't set the position itself to the variable because there are duplicates, like bodyguards. I don't want to show two bodyguards.

			# blockoverride "num" {}
			shortcuts_list = {
				blockoverride "click" {
					onclick = "[PdxGuiFoldOut.Unfold]"
					onclick = "[Set('focus_court_position', 'yes')]"
				}
			}
			blockoverride "pre" {
				block "widget_num" {
					text_single = {
						raw_text = "[IndexNumber],"
					}
				}
			}

			blockoverride "text" {
				raw_text = "[CourtPositionItem.GetNameNoTooltip],"

				tooltipwidget = {
					court_position_type_tooltip_ocr = {
						blockoverride "title_text_inner" {
							datacontext = "[GetPlayer]"
							text = "[Select_CString( CourtPosition.IsValid, CourtPosition.GetNameNoTooltip, CourtPositionType.CalcTriggeredNameNoTooltip( Character.Self ) )]"
						}
						blockoverride "description_text_inner" {
							datacontext = "[GetPlayer]"
							text = "[Select_CString( CourtPosition.IsValid, CourtPosition.GetDescription, CourtPositionType.CalcTriggeredDescription( Character.Self ) )]"
						}
					}
				}
			}
			blockoverride "extra" {
				flowcontainer = {
					ignoreinvisible = yes
					visible = "[And(DataModelHasItems( CourtPositionItem.GetTasks ), CourtPositionItem.IsEmployed)]"
					spacing = 3
					datamodel = "[CourtPositionItem.GetTasks]"
					name = "tasks"
					item = {
						text_single = {
							visible = "[And(CourtPositionTaskItem.IsShown, CourtPosition.IsActiveTask( CourtPositionTaskType.Self ))]"
							datacontext = "[CourtPositionTaskItem.GetTask]"
							datacontext = "[CourtPositionTaskItem.GetCourtPosition]"

							raw_text = "[CourtPositionTaskType.GetName],"
						}
					}
				}

				flowcontainer = {
					ignoreinvisible = yes
					spacing = 3
					datacontext = "[CourtPosition.GetEmployee]"
					visible = "[Character.IsValid]"

					text_single = {
						raw_text = "[Character.GetFirstNameNoTooltip],"
					}
				}

				vbox_court_position_aptitude_ocr = {
					blockoverride "aptitude" {}
					visible = "[CourtPositionItem.IsEmployed]"
				}

				text_single = {
					raw_text = "No candidates."
					visible = "[And(Not(CourtPositionItem.HasValidCourtiers), Not(CourtPositionItem.IsEmployed))]"
				}

				text_single = {
					visible = "[And(Not( CourtPositionType.HasAutomationNone( GetPlayer ) ), CourtPositionItem.IsEmployed)]"
					raw_text = "Automated."
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[PdxGuiFoldOut.IsUnfolded]"

			flowcontainer = {
				ignoreinvisible = yes
				direction = vertical
				layoutpolicy_horizontal = expanding
				visible = "[Isnt('cp_desc')]"

				button = {
					shortcut = close_window
					onclick = "[PdxGuiFoldOut.Fold]"
					onclick = "[Clear('focus_court_position')]"
				}

				# hire
				button_text = {
					visible = "[And(Not( Character.IsValid ), Is('group_cps'))]"
					enabled = "[And( CourtPositionItem.IsAllowed, CourtPositionItem.IsEnabled )]"
					onclick = "[CourtPositionType.OpenAppointWindow( CourtPositionsWindow.CourtOwner.Self )]"
					tooltip = "[CourtPositionItem.GetRequirementsTooltip]"
					using = c_enter
					onclick = "[PdxGuiTriggerAllAnimations('fold_all_court_positions')]"
					onclick = "[Clear('focus_court_position')]"

					blockoverride "text" {
						raw_text = "Hire [CourtPositionItem.GetNameNoTooltip], C or Enter"
					}
				}

				button_text = {
					visible = "[And(Not( Character.IsValid ), Isnt('group_cps'))]"
					enabled = "[And( CourtPositionItem.IsAllowed, CourtPositionItem.IsEnabled )]"
					onclick = "[CourtPositionType.OpenAppointWindow( CourtPositionsWindow.CourtOwner.Self )]"
					tooltip = "[CourtPositionItem.GetRequirementsTooltip]"
					using = c_enter

					blockoverride "text" {
						raw_text = "Hire [CourtPositionItem.GetNameNoTooltip], C or Enter"
					}
				}

				# if employed
				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical

					datacontext = "[CourtPosition.GetEmployee]"
					visible = "[Character.IsValid]"

					# position name and active task
					button_text = {
						blockoverride "text" {
							raw_text = "[CourtPositionItem.GetNameNoTooltip],"
						}
						blockoverride "extra" {
							flowcontainer = {
								ignoreinvisible = yes
								visible = "[DataModelHasItems( CourtPositionItem.GetTasks )]"
								spacing = 3
								datamodel = "[CourtPositionItem.GetTasks]"
								name = "tasks"
								item = {
									text_single = {
										visible = "[And(CourtPositionTaskItem.IsShown, CourtPosition.IsActiveTask( CourtPositionTaskType.Self ))]"
										datacontext = "[CourtPositionTaskItem.GetTask]"
										datacontext = "[CourtPositionTaskItem.GetCourtPosition]"

										raw_text = "ordered to [CourtPositionTaskType.GetName],"
									}
								}
							}

							text_single = {
								visible = "[IsDataModelEmpty( CourtPositionItem.GetTasks )]"
								raw_text = "Has no tasks"
							}

							text_single = {
								raw_text = "No active task,"
								visible = "[EqualTo_int32(PdxGuiWidget.AccessParent.FindChild('tasks').CountVisibleChildren, '(int32)0')]"
							}
						}
					}

					# character
					button_text = {
						using = char_click
						blockoverride "extra" {
							text_single = {
								raw_text = "[Character.GetNameNoTooltip], [Character.GetAge],"
							}

							text_opinion = {}
						}
					}

					vbox_court_position_aptitude_ocr = {}
				}

				button_text = {
					shortcut = mapmode_house_secondary
					layoutpolicy_horizontal = expanding
					onclick = "[SetOrToggle('cp_desc', 'tasks')]"
					blockoverride "text" {
						raw_text = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('tasks2').CountVisibleChildren] tasks, see tooltips or Shift D for full descriptions."
					}
				}

				# tasks
				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical
					visible = "[DataModelHasItems(CourtPositionItem.GetTasks)]"
					datamodel = "[CourtPositionItem.GetTasks]"
					name = "tasks2"
					item = {
						widget_court_position_task_ocr = {
							visible = "[CourtPositionTaskItem.IsShown]"
							datacontext = "[CourtPositionTaskItem.GetTask]"
							datacontext = "[CourtPositionTaskItem.GetCourtPosition]"
						}
					}
				}

				button_text = {
					shortcut = map_mode_11
					onclick = "[SetOrToggle('cp_desc', 'effects')]"
					blockoverride "text" {
						raw_text = "Show effects and requirements, Shift E."
					}
				}

				### POWERFUL AGENT WARNING ###
				text_single = {
					raw_text = "COURT_POSITION_POWERFUL_AGENT"
					visible = "[CourtPositionType.IsPowerfulAgent]"
				}

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical
					visible = "[CourtPositionItem.IsEmployed]"
					button_text = {
						shortcut = army_split_half
						blockoverride "text" {
							raw_text = "COURT_POSITION_REVOKE"
						}
						blockoverride "extra" {
							, = {}
							text_single = {
								raw_text = "F."
							}
						}

						onclick = "[CourtPosition.OpenRevokeConfirmation]"
					}

					button_text = {
						shortcut = map_mode_18
						blockoverride "text" {
							raw_text = "COURT_POSITION_REPLACE"
						}
						blockoverride "extra" {
							, = {}
							text_single = {
								raw_text = "Control R."
							}
						}

						onclick = "[CourtPosition.OpenReplaceWindow]"
					}

					text_single = {
						visible = "[CourtPositionType.HasAutomationNone( GetPlayer.Self )]"
						raw_text = "No automation."
					}

					text_single = {
						visible = "[CourtPositionType.HasAutomationShowEvent( GetPlayer.Self )]"
						raw_text = "Will suggest best candidates in event."
					}

					text_single = {
						visible = "[CourtPositionType.HasAutomationAssignBest( GetPlayer.Self )]"
						raw_text = "Will auto-assign highest [aptitude|e] candidate, if available."
					}

					text_single = {
						visible = "[CourtPositionType.HasAutomationAssignBestOrEvent( GetPlayer.Self )]"
						raw_text = "Auto-assign highest [aptitude|e] candidate, or notify with event"
					}

					button_text = {
						shortcut = map_mode_4
						visible = "[Not( CourtPositionType.HasAutomationNone( GetPlayer ) )]"
						blockoverride "text" {
							raw_text = "Disable automation, Y."
						}
					}

					button_text = {
						enabled = "[IsValidCommand( CourtPositionType.ToggleAutomationCmd )]"
						onclick = "[PostCommand( CourtPositionType.ToggleAutomationCmd )]"
						shortcut = map_mode_2

						tooltip = "COURT_POSITION_TOGGLE_AUTOMATION"
						blockoverride "disabled" {
							visible = "[Not(IsValidCommand( CourtPositionType.ToggleAutomationCmd ))]"
						}
						blockoverride "text" {
							raw_text = "Automate hiring,"
						}
						blockoverride "extra" {
							text_single = {
								visible = "[IsValidCommand( CourtPositionType.ToggleAutomationCmd )]"
								raw_text = "T. This switches through 4 options below."
							}
						}
					}

					text_multi_wide = {
						visible = "[IsValidCommand( CourtPositionType.ToggleAutomationCmd )]"
						raw_text = "COURT_POSITION_TOGGLE_AUTOMATION"
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Has('cp_desc', 'effects')]"
				button = {
					shortcut = close_window
					shortcut = map_mode_11
					onclick = "[Clear('cp_desc')]"
				}

				court_position_type_tooltip_ocr = {
					layoutpolicy_horizontal = expanding
					blockoverride "title_text_inner" {
						datacontext = "[GetPlayer]"
						text = "[Select_CString( CourtPosition.IsValid, CourtPosition.GetNameNoTooltip, CourtPositionType.CalcTriggeredNameNoTooltip( Character.Self ) )]"
					}
					blockoverride "description_text_inner" {
						datacontext = "[GetPlayer]"
						text = "[Select_CString( CourtPosition.IsValid, CourtPosition.GetDescription, CourtPositionType.CalcTriggeredDescription( Character.Self ) )]"
					}
				}

				expand = {}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[DataModelHasItems(CourtPositionItem.GetTasks)]"

				vbox = {
					visible = "[Has('cp_desc', 'tasks')]"
					ignoreinvisible = yes
					layoutpolicy_horizontal = expanding
					datamodel = "[CourtPositionItem.GetTasks]"

					button_text = {
						shortcut = mapmode_house_secondary
						layoutpolicy_horizontal = expanding
						onclick = "[SetOrToggle('cp_desc', 'tasks')]"
						blockoverride "text" {
							raw_text = "Full task descriptions, Expanded."
						}
					}

					button = {
						shortcut = close_window
						onclick = "[Clear('cp_desc')]"
					}

					item = {
						court_position_task_icon_tooltip_widget_ocr = {
							layoutpolicy_horizontal = expanding
							enabled = "[IsValidCommand( CourtPosition.ToggleTaskCmd( CourtPositionTaskType.Self ) )]"
							onclick = "[PostCommand( CourtPosition.ToggleTaskCmd( CourtPositionTaskType.Self ) )]"

							visible = "[CourtPositionTaskItem.IsShown]"
							datacontext = "[CourtPositionTaskItem.GetTask]"
							datacontext = "[CourtPositionTaskItem.GetCourtPosition]"
							blockoverride "tooltip" {
							}
							blockoverride "num" {
								text_single = {
									raw_text = "[IndexNumber],"
								}
							}
						}
					}
				}
			}
		}
	}

	type vbox_court_positions_ocr = vbox {

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			blockoverride "scrollbox_content" {
				### Header - Decision Button and Monthly Salaries ###
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Isnt('focus_court_position')]"

					# positions held
					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3
						layoutpolicy_horizontal = expanding

						text_single = {
							raw_text = "COURT_WINDOW_COURT_POSITIONS"
						}
						comma = {}

						text_single = {
							visible = "[Not(GetPlayer.IsIndependentRuler)]"
							raw_text = "[GetDataModelSize(GetPlayer.GetHeldCourtPositions)] held,"
						}

						text_single = {
							# visible = "[DataModelHasItems(GetPlayer.GetEmployedCourtPositions)]"
							raw_text = "[GetDataModelSize(GetPlayer.GetEmployedCourtPositions)] hired,"
						}
						text_single = {
							raw_text = "[GetDataModelSize(CourtPositionsWindow.GetCourtPositions)] total."
						}
						# text_single = {
						# 	raw_text = "For effects, see tooltips or open position."
						# }
					}

					# your salary
					hbox = {
						visible = "[Not( IsDataModelEmpty( CourtPositionsWindow.GetHeldPositions ) )]"
						layoutpolicy_horizontal = expanding

						hbox = {
							spacing = 3
							text_single = {
								datacontext = "[CourtPositionsWindow.CourtPositionsIncomeBreakdown]"
								visible = "[CourtPositionsWindow.CourtOwner.HoldsCourtPosition]"

								text = "[CourtPositionsWindow.TotalEarnedSalaries]"

								tooltipwidget = {
									widget_value_breakdown_tooltip = {}
								}
							}
							text_single = {
								text = "COURT_POSITIONS_WINDOW_MONTHLY_SALARY_YOUR"
							}
							dot_l = {}
						}

						expand = {}
					}

					# salaries total
					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3
						layoutpolicy_horizontal = expanding
						name = "salaries_tutorial_uses_this"
						datacontext = "[CourtPositionsWindow.CourtPositionsExpenseBreakdown]"
						visible = "[CourtPositionsWindow.HasEmployedPositions]"

						tooltipwidget = {
							widget_value_breakdown_tooltip = {}
						}

						text_single = {
							text = "[CourtPositionsWindow.TotalPaidSalaries]"
						}

						text_single = {
							raw_text = "paid in"
						}

						text_single = {
							text = "COURT_POSITIONS_WINDOW_MONTHLY_SALARY"
						}
					}

					# recruit
					button_text = {
						layoutpolicy_horizontal = expanding
						datacontext = "[GetDecisionWithKey('recruit_court_position_decision')]"
						visible = "[Decision.IsShownForPlayer]"
						shortcut = mapmode_house_secondary

						onclick = "[OpenGameViewData( 'decision_detail', Decision.Self)]"
						enabled = "[Decision.IsPossibleForPlayer]"
						blockoverride "disabled" {
							visible = "[Not(Decision.IsPossibleForPlayer)]"
						}
						blockoverride "text" {
							raw_text = "[Decision.GetName], Shift D."
						}
					}

					button_checked_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[Toggle('group_cps')]"
						shortcut = map_mode_9
						blockoverride "visible" {
							visible = "[Isnt('group_cps')]"
						}
						blockoverride "text" {
							raw_text = "Group by hired, Shift Q."
						}
					}

					# your positions
					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[DataModelHasItems(CourtPositionsWindow.GetHeldPositions)]"

						button_text = {
							layoutpolicy_horizontal = expanding
							onclick = "[Toggle('your_cps')]"
							blockoverride "text" {
								raw_text = "COURT_POSITIONS_WINDOW_YOUR_POSITIONS"
							}
							blockoverride "extra" {
								, = {}
								text_single = {
									raw_text = "[Collapse('your_cps')]"
								}
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[CourtPositionsWindow.GetHeldPositions]"

							item = {
								widget_court_position_item_ocr = {}
							}
						}
					}
				}

				# vbox = {
				# 	layoutpolicy_horizontal = expanding
				# 	visible = "[Is('group_cps')]"
				# 	datamodel = "[CourtPositionsWindow.GetCourtPositions]"
				# 	item = {
				# 		widget_court_position_item_ocr = {}
				# 	}
				# }

				vbox_paged_list = {
					visible = "[Isnt('group_cps')]"
				  blockoverride "page_index" {
				    datacontext = "[GetPlayer.MakeScope.Var('court_positions_page')]"
				  }
				  datacontext = "[GetScriptedGui('court_positions_page')]"

				  blockoverride "full_datamodel" {
				    datamodel = "[CourtPositionsWindow.GetCourtPositions]"
				  }
					blockoverride "show_pages" {
						visible = "[Isnt('focus_court_position')]"
					}
					blockoverride "reset_when" {
						widget = {
							visible = "[Isnt('cp_desc')]"
							state = {
								name = "reset"
								on_finish = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', MakeScopeFlag('reset')).End )]"
								trigger_when = "[ResetPages( CountPrevItems )]"
								trigger_on_create = yes
							}
						}
					}
				  blockoverride "vbox_contents" {
				    vbox = {
				      layoutpolicy_horizontal = expanding
				      datamodel = "[PageModelGlobal(CourtPositionsWindow.GetCourtPositions)]"

							blockoverride "widget_num" {
								page_index = {}
							}
				      item = {
								widget_court_position_item_ocr = {}
				      }
				    }
				  }
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Is('group_cps')]"

					button_text = {
						visible = "[Isnt('focus_court_position')]"
						layoutpolicy_horizontal = expanding
						shortcut = army_create_new
						onclick = "[Toggle('hired_positions')]"
						blockoverride "text" {
							raw_text = "[GetDataModelSize(GetPlayer.GetEmployedCourtPositions)] hired positions, [Collapse('hired_positions')] H."
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Isnt('hired_positions')]"
						datamodel = "[CourtPositionsWindow.GetCourtPositions]"
						name = "hired"
						item = {
							widget_court_position_item_ocr = {
								visible = "[CourtPositionItem.IsEmployed]"
							}
						}
					}

					button_text = {
						visible = "[Isnt('focus_court_position')]"
						onclick = "[Toggle('open_positions')]"
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "[CountItems] open positions, [Collapse('open_positions')]"
							hbox = {
								datamodel = "[CourtPositionsWindow.GetCourtPositions]"
								name = "items"
								item = {
									hbox = {
										visible = "[Not(CourtPositionItem.IsEmployed)]"
									}
								}
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Isnt('open_positions')]"
						datamodel = "[CourtPositionsWindow.GetCourtPositions]"
						name = "open"
						item = {
							widget_court_position_item_ocr = {
								visible = "[Not(CourtPositionItem.IsEmployed)]"
							}
						}
					}
				}

			}
		}

		### Court Position Group Foldouts ###
		scrollbox = {
			visible = no
			using = Animation_Tab_Switch

			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_margins"
			{
				margin = { 6 6 }
				margin_right = 20
			}

			blockoverride "scrollbox_content"
			{
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				### Available Court Positions ###
				fixedgridbox = {
					name = "court_position_items"
					layoutpolicy_horizontal = expanding

					addcolumn = 180
					addrow = 228
					setitemsizefromcell = yes
					datamodel_wrap = 3
					flipdirection = yes

					datamodel = "[CourtPositionsWindow.GetCourtPositions]"
					item = {
						widget_court_position_item = {}
					}
				}

				### Denied Court Positions Group Foldout ###
				vbox = {
					visible = "[Not( IsDataModelEmpty( CourtPositionsWindow.GetDeniedCourtPositions ) )]"
					margin_bottom = 8
					spacing = 4

					layoutpolicy_horizontal = expanding

					oncreate = "[BindFoldOutContext]"

					button_expandable_toggle_field = {
						blockoverride "text"
						{
							text = "[CourtPositionsWindow.GetGroupTitle]"
						}
					}

					vbox = {
						visible = "[PdxGuiFoldOut.IsUnfolded]"

						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						fixedgridbox = {
							name = "court_position_items"
							layoutpolicy_horizontal = expanding

							addcolumn = 180
							addrow = 228
							setitemsizefromcell = yes
							datamodel_wrap = 3
							flipdirection = yes

							datamodel = "[CourtPositionsWindow.GetDeniedCourtPositions]"
							item = {
								widget_court_position_item = {}
							}
						}
					}
				}

				blockoverride "scrollbox_expand" {
					expand = {}
				}
			}
		}

		expand = {}
	}

	type court_position_type_tooltip_ocr = object_tooltip_pop_out {

		blockoverride "title_text" {
			margin = { -6 8 }
			block "title_text_inner" {
				datacontext = "[GetPlayer]"
				text = "[CourtPositionType.CalcTriggeredNameNoTooltip( Character.Self )]"
			}
		}

		blockoverride "concept_link" {
			# text = [court_position|E]
		}


		blockoverride "extra_data" {
			#block "extra_data_block" {
			vbox = {
				layoutpolicy_horizontal = expanding

				### Salary
				vbox = {
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding

							text = COURT_POSITION_TYPE_TOOLTIP_SALARY

						}

						block "time_of_service" {
							text_single = {
								visible = "[CourtPosition.IsValid]"
								layoutpolicy_horizontal = expanding

								text = "[CourtPosition.GetTimeOfService]"
							}
						}

						### POWERFUL AGENT WARNING ###
						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "COURT_POSITION_POWERFUL_AGENT"
							visible = "[CourtPositionType.IsPowerfulAgent]"
						}
					}
				}

				### Liege effects
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[CourtPositionType.HasLiegeModifiers]"

					### Liege Modifiers
					vbox = {
						name = "liege_modifiers"
						layoutpolicy_horizontal = expanding

						vbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding
								default_format = "#S"
								text = COURT_POSITION_TOOLTIP_EFFECT_ON_LIEGE
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								textbox = {
									name = "liege_static_modifiers_description"
									using = DefaultTooltipText
									layoutpolicy_horizontal = expanding
									multiline = yes
									text = "[CourtPositionType.GetEmployerModifierDescription]"

									alwaystransparent = no
								}
							}
						}
					}

					### Liege Court Modifiers
					vbox = {
						name = "liege_court_modifiers"
						visible = "[CourtPositionType.HasLiegeCourtModifiers]"
						layoutpolicy_horizontal = expanding

						textbox = {
							name = "liege_court_modifiers_description"
							using = DefaultTooltipText
							layoutpolicy_horizontal = expanding
							multiline = yes
							text = "COURT_POSITION_TYPE_EMPLOYER_COURT_EFFECTS"

							alwaystransparent = no
						}
					}

					### Liege Requirements
					vbox = {
						name = "liege_requirements"
						layoutpolicy_horizontal = expanding
						visible = "[CourtPositionType.HasLiegeRequirements]"

						text_single = {
							layoutpolicy_horizontal = expanding
							default_format = "#S"
							text = COURT_POSITION_TOOLTIP_LIEGE_REQUIREMENT

						}

						vbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							textbox = {
								name = "liege_requirements_description"
								using = DefaultTooltipText
								layoutpolicy_horizontal = expanding
								multiline = yes
								text = "[CourtPositionType.GetLiegeRequirementDescriptionText]"

								alwaystransparent = no
							}
						}
					}
				}

				### Revocation effects
				vbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						layoutpolicy_horizontal = expanding
						text = COURT_POSITION_TOOLTIP_REVOKE_EFFECT_HEADER
					}

					vbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							text = COURT_POSITION_TYPE_TOOLTIP_REVOKE_COST
						}
					}
				}

				## Employee info
				vbox = {
					layoutpolicy_horizontal = expanding


					### Employee Modifiers
					vbox = {
						name = "employee_modifiers"
						visible = "[CourtPositionType.HasEmployeeModifiers]"
						layoutpolicy_horizontal = expanding

						text_single = {
							text = COURT_POSITION_TYPE_TOOLTIP_EFFECT_ON_EMPLOYEE
							layoutpolicy_horizontal = expanding
						}

						vbox = {
							layoutpolicy_horizontal = expanding

							textbox = {
								name = "employee_effects"
								using = DefaultTooltipText
								layoutpolicy_horizontal = expanding
								multiline = yes
								text = "[CourtPositionType.GetEmployeeModifierDescription]"
								alwaystransparent = no
							}
						}
					}

					### Employee Requirements
					vbox = {
						name = "employee_requirements"
						layoutpolicy_horizontal = expanding
						visible = "[CourtPositionType.HasEmployeeRequirements]"

						text_single = {
							layoutpolicy_horizontal = expanding
							text = COURT_POSITION_TOOLTIP_EMPLOYEE_REQUIREMENT
						}

						vbox = {
							layoutpolicy_horizontal = expanding

							textbox = {
								name = "employee_requirements_description"
								using = DefaultTooltipText
								layoutpolicy_horizontal = expanding
								multiline = yes
								text = "[CourtPositionType.GetEmployeeRequirementDescriptionText]"
								alwaystransparent = no
							}
						}
					}
				}

				vbox = {
					visible = "[Not( IsDataModelEmpty( CourtPositionType.GetTasks ) )]"
					layoutpolicy_horizontal = expanding

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "COURT_POSITION_TASK_HINT"
					}

					block "tasks" {
						flowcontainer = {
							layoutpolicy_horizontal = expanding
							direction = vertical
							ignoreinvisible = yes
							datamodel = "[CourtPositionType.GetTasks]"
							item = {
								widget_court_position_task_ocr = {
									blockoverride "enabled" {}
								}
							}
						}
					}
				}
			}
		}

		blockoverride "description_text" {
			block "description_text_inner" {
				datacontext = "[GetPlayer]"
				text = "[CourtPositionType.CalcTriggeredDescription( Character.Self )]"
			}
			max_width = 600
			margin_top = 5
			margin_bottom = -10
		}
	}
}
