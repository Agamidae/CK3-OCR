@position_text = 620

types CourtPositionTypes
{
	type widget_court_position_item_ocr = container
	{
		datacontext = "[EmptyCourtPosition.GetType]"
		visible = "[EmptyCourtPosition.CanShow]"

		minimumsize = { @position_text  20 }

		button = {
			size = { 100% 100% }
			enabled = "[And(EmptyCourtPosition.CanHirePosition, GreaterThan_int32(EmptyCourtPosition.NumValidCourtiers, '(int32)0') )]"
			onclick = "[EmptyCourtPosition.Appoint]"
		}

		# Header  name, position, salary, buttons
		widget = {
			background = { using = Background_Area_Dark margin_bottom = 5 }
			size = { 530 20 }

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3
				margin_left = 5

				text_single = {
					raw_text = "Can't hire"
					visible = "[Not(EmptyCourtPosition.CanHirePosition)]"
					tooltipwidget = {
						court_position_type_tooltip = { }
					}
				}

				#### POSITION ####
				text_single = {
					name = "character_name_available"
					raw_text = "[CourtPositionType.GetNameNoTooltip],"
				}

				text_single = {
					raw_text = "No one available,"
					visible = "[EqualTo_int32(EmptyCourtPosition.NumValidCourtiers, '(int32)0')]"
				}

				text_single = {
					name = "salary_available"
					visible = "[And(EmptyCourtPosition.CanHirePosition, GreaterThan_int32(EmptyCourtPosition.NumValidCourtiers, '(int32)0')) ]"
					raw_text = "salary: [CourtPositionType.GetSalaryTextFor(CourtPositionsWindow.CourtOwner)],"
					tooltip = "[CourtPositionType.GetSalaryBreakdownFor(CourtPositionsWindow.CourtOwner)]"
				}

				text_single = {
					raw_text = "tooltip."

					tooltipwidget = {
						court_position_type_tooltip = { }
					}
				}

				expand = { }
			}
		}

		flowcontainer = {
			visible = "[Not(GetVariableSystem.Exists('show_position_desc'))]"
			direction = vertical
			margin_bottom = 0
			margin_left = 5
			margin_top = 20
			ignoreinvisible = yes

			#### REQUIREMENTS ####
			text_single = {
				visible = "[Not(EmptyCourtPosition.CanHirePosition)]"
				text = "COURT_POSITIONS_WINDOW_EMPTY_POSITION_YOU_DONT_MEET_REQUIREMENTS"
				tooltip = "COURT_POSITIONS_WINDOW_EMPTY_POSITION_YOU_DONT_MEET_REQUIREMENTS_TT"
				min_width = @position_text
				max_width = @position_text
			}

			text_single = {
				visible = "[EqualTo_int32(EmptyCourtPosition.NumValidCourtiers, '(int32)0')]"
				text = "COURT_POSITIONS_WINDOW_EMPTY_POSITION_NO_ELIGIBLE_COURTIERS"
				tooltip = "COURT_POSITIONS_WINDOW_EMPTY_POSITION_NO_ELIGIBLE_COURTIERS_TT"
				min_width = @position_text
				max_width = @position_text
			}

			# #### APTITUDE AND EFFECTS ####
			# text_single = {
			# 	name = "aptitude"
			# 	min_width = @position_text
			# 	max_width = @position_text
			# 	text = "COURT_POSITIONS_WINDOW_EMPTY_POSITION_EFFECTS_VARY"
			# }

			text_multi = {
				min_width = @position_text
				max_width = @position_text
				autoresize = yes
				align = left
				raw_text = "[CourtPositionType.GetLiegeModifierDescription]."
			}

			#### DEBUG AI SCORE ####
			text_single = {
				name = "ai_score"
				visible = "[InDebugMode]"
				text = "[EmptyCourtPosition.GetAiCandidateScore]"
				default_format = "#D"
				min_width = @position_text
				max_width = @position_text
			}
		}
	}

	type widget_hired_court_position_item_ocr = container
	{
		datacontext = "[EmployedPositionItem.GetPosition]"
		datacontext = "[CourtPosition.GetEmployee]"
		visible = "[EmployedPositionItem.CanShow]"

		minimumsize = { @position_text 20 }

		button = {
			size = { 100% 100% }
			onclick = "[EmployedPositionItem.Replace)]"
			onrightclick = "[DefaultOnCharacterClick(CourtPosition.GetEmployee.GetID)]"
			button_ignore = none
		}

		# Header  name, position, salary, buttons
		widget = {
			background = { using = Background_Area_Dark margin_bottom = 5 }
			size = { 530 40 }

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 5

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 3

					text_single = {
						raw_text = "[CourtPosition.GetNameNoTooltip],"
					}

					text_single = {
						name = "aptitude"
						text = "COURT_POSITION_aptitude_description_position"

						tooltipwidget = {
							court_position_aptitude_breakdown_tooltip = {
								datacontext = "[CourtPosition.GetAptitudeTooltip]"

								blockoverride "header_text" {
									text = COURT_POSITION_aptitude_description_position
								}

								blockoverride "modifier_list" {
									text = "[CourtPosition.GetEmployerBonuses]"
								}
							}
						}
					}

					dot = { margin_left = -3}

					text_single = {
						raw_text = "Salary: [CourtPosition.GetSalaryText],"
						tooltip = "[CourtPosition.GetSalaryBreakdownTooltip]"
					}

					text_single = {
						raw_text = "tooltip."

						tooltipwidget = {
							court_position_tooltip = { }
						}
					}

					expand = { }
				}

				hbox = {
					spacing = 3
					layoutpolicy_horizontal = expanding

					button_text = {
					    blockoverride "text" {
					        raw_text = "Fire"
							align = left
					    }
						onclick = "[EmployedPositionItem.Revoke)]"
					}

					text_single = {
						raw_text = "[CourtPosition.GetEmployee.GetNameNoTooltip],"
					}

					text_single = {
						raw_text = "[CourtPosition.GetEmployee.GetRelationToString( GetPlayer)]."
					}

					###### YEARS OF SERVICE ######
					text_single = {
						raw_text = "[CourtPosition.GetTimeOfService]."
						visible = "[Not(StringIsEmpty(CourtPosition.GetTimeOfService))]"
					}

					expand = { }
				}
			}
		}

		flowcontainer = {
			visible = "[Not(GetVariableSystem.Exists('show_position_desc'))]"
			direction = vertical
			margin_bottom = 0
			margin_left = 5
			margin_top = 40
			ignoreinvisible = yes

			text_single = {
				name = "opinion_bonus"
				min_width = @position_text
				max_width = @position_text
				layoutpolicy_horizontal = expanding
				text = "COURT_POSITION_OPINION_BONUS"
			}

			text_multi = {
				min_width = @position_text
				max_width = @position_text
				autoresize = yes
				align = left
				text = "[CourtPosition.GetEmployerBonuses]"
			}

			#### AI candidate score ####
			text_single = {
				name = "ai_score"
				visible = "[InDebugMode]"
				text = "[CourtPosition.GetAICandidateScore]"
				default_format = "#D"
				min_width = @position_text
				max_width = @position_text
			}
		}
	}

	type vbox_court_positions_ocr = vbox {
		# margin_bottom = 5

		state = {
			name = _show
			using = Expand_Court_Positions
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			raw_text = "Positions."
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			hbox = { #filters
				datamodel = "[GetAllCourtPositionCategories]"
				visible = "[CourtPositionsWindow.CanShowCategoryTabs]"

				spacing = 3
				margin = { 10 5 }

				text_single = {
					raw_text = "Filters: "
				}

				button_text = {
					blockoverride "text" {
						raw_text = "COURT_POSITIONS_WINDOW_FILTER_ALL"
						align = left
					}
					blockoverride "extra" {
						space = { }
						text_single = {
							raw_text = "COURT_POSITIONS_WINDOW_FILTER_TAB_ALL_NUM_HIRES"
						}
						text_single = {
							raw_text = ", Selected."
							visible ="[Not(CourtPositionsWindow.HasCategoryFilter)]"

						}
					}
					onclick = "[CourtPositionsWindow.ClearCategoryFilter]"
				}

				item = {
					button_text = {
						blockoverride "text" {
							raw_text = "[CourtPositionCategory.GetName]"
							align = left
						}
						blockoverride "extra" {
							space = { }
							text_single = {
								raw_text = "COURT_POSITIONS_WINDOW_FILTER_TAB_CATEGORY_NUM_HIRES"
							}
							text_single = {
								raw_text = ", Selected."
								visible ="[CourtPositionsWindow.IsCategoryFiltering(CourtPositionCategory.Self)]"
							}
							dot = { }
						}
						onclick = "[CourtPositionsWindow.SetCategoryFilter(CourtPositionCategory.Self)]"
						visible = "[CourtPositionsWindow.CanShowCategoryTab(CourtPositionCategory.Self)]"
					}
				}
			}

			expand = { }
		}

		## Position finances
		vbox = {
			name = "salaries_tutorial_uses_this"
			layoutpolicy_horizontal = expanding

			hbox = {
				visible = "[CourtPositionsWindow.CourtOwner.HoldsCourtPosition]"
				layoutpolicy_horizontal = expanding
				spacing = 3

				text_single = {
					text = "COURT_POSITIONS_COURT_VIEW_salaries_gained"
				}

				text_single = {
					datacontext = "[CourtPositionsWindow.CourtPositionsIncomeBreakdown]"
					text = "[CourtPositionsWindow.TotalEarnedSalaries]"

					tooltipwidget = {
						widget_value_breakdown_tooltip = { }
					}
				}

				expand = { }
			}

			hbox = {
				spacing = 3
			    layoutpolicy_horizontal = expanding

				text_single = {
					text = "COURT_POSITIONS_COURT_VIEW_salaries_paid"
				}

				text_single = {
					datacontext = "[CourtPositionsWindow.CourtPositionsExpenseBreakdown]"
					raw_text = "[CourtPositionsWindow.TotalPaidSalaries]."

					tooltipwidget = {
						widget_value_breakdown_tooltip = { }
					}
				}

			    expand = { }
			}
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			shortcut = map_mode_1
		    blockoverride "text" {
		        raw_text = "[Select_CString(GetVariableSystem.Exists('show_position_desc'), 'Show', 'Hide')] position effects, hotkey E."
		    }
			onclick = "[GetVariableSystem.Toggle('show_position_desc')]"
		}

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_margins"
			{
				margin_top = 20
			}

			blockoverride "scrollbox_content"
			{
				spacing = 3
				vbox = {
					name = "liege_court_positions"
					visible = "[And(And(CourtPositionsWindow.CourtOwner.HasLiege, CourtPositionsWindow.CourtOwner.HoldsCourtPosition), Not(CourtPositionsWindow.HasCategoryFilter))]"
					layoutpolicy_horizontal = expanding

					using = Animation_Tab_Switch

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "pre" {
							text_single = {
								raw_text = "[GetDataModelSize(CourtPositionsWindow.HeldPositions)]"
							}
						}
					    blockoverride "text" {
					        raw_text = "[Localize('COURT_POSITIONS_your_positions_in_liege_court')],"
					    }
						onclick = "[GetVariableSystem.Toggle( 'expand_held_court_positions' )]"
						blockoverride "extra" {
							text_single = {
								raw_text = "[Select_CString(GetVariableSystem.Exists('expand_held_court_positions'), 'Expanded', 'Collapsed')]."
							}
							dot = { }
						}
					}

					### Your titles
					vbox = {
						name = "your_court_positions"
						visible = "[GetVariableSystem.Exists( 'expand_held_court_positions' )]"
						layoutpolicy_horizontal = expanding

						text_single = {
							visible = "[IsDataModelEmpty( CourtPositionsWindow.HeldPositions )]"
							text = "COURT_POSITIONS_no_positions_with_liege"
						}

						vbox = {
							name = "my_own_court_positions"
							datamodel = "[CourtPositionsWindow.HeldPositions]"
							visible = "[Not(IsDataModelEmpty( CourtPositionsWindow.HeldPositions ))]"
							layoutpolicy_horizontal = expanding

							using = Animation_Tab_Switch

							item = {
								widget_your_court_position_item = {
								}
							}
						}
					}
				}

				vbox = {
					name = "your_court_positions"
					layoutpolicy_horizontal = expanding
					visible = "[Not(IsDataModelEmpty( CourtPositionsWindow.EmployedPositions ))]"

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "pre" {
							text_single = {
								raw_text = "[GetDataModelSize(CourtPositionsWindow.EmployedPositions)]"
							}
						}
					    blockoverride "text" {
					        raw_text = "[Localize('COURT_POSITIONS_COURT_VIEW_positions_in_your_court')],"
					    }
						onclick = "[GetVariableSystem.Toggle( 'expand_active_court_positions' )]"
						blockoverride "extra" {
							text_single = {
								raw_text = "[Select_CString(GetVariableSystem.Exists('expand_active_court_positions'), 'Expanded', 'Collapsed')]."
							}
						}
					}

					### Titles in your court
					vbox = {
						name = "active_positions_in_your_court"
						visible = "[GetVariableSystem.Exists( 'expand_active_court_positions' )]"
						layoutpolicy_horizontal = expanding

						text_single = {
							visible = "[IsDataModelEmpty( CourtPositionsWindow.EmployedPositions )]"
							text = "COURT_POSITIONS_no_positions_in_your_court"
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							visible = "[DataModelHasItems( CourtPositionsWindow.EmployedPositions )]"
							raw_text = "Click to replace, right-click to view character."
						}

						vbox = {
							name = "active_positions"
							datamodel = "[CourtPositionsWindow.EmployedPositions]"
							visible = "[Not(IsDataModelEmpty( CourtPositionsWindow.EmployedPositions ))]"
							layoutpolicy_horizontal = expanding


							item = {
								widget_hired_court_position_item_ocr = {
								}
							}
						}
					}
				}

				vbox = {
					name = "your_empty_court_positions"
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding

						# this shows all positions, even anavailable
						# blockoverride "pre" {
						# 	text_single = {
						# 		raw_text = "[GetDataModelSize(CourtPositionsWindow.EmptyPositions)]"
						# 	}
						# }

					    blockoverride "text" {
					        raw_text = "[Localize('COURT_POSITIONS_WINDOW_EMPTY_POSITION_HEADER')],"
					    }
						onclick = "[GetVariableSystem.Toggle( 'expand_empty_court_positions' )]"

						blockoverride "extra" {
							text_single = {
								raw_text = "[Select_CString(GetVariableSystem.Exists('expand_empty_court_positions'), 'Expanded', 'Collapsed')]."
							}
						}
					}

					# text_single = {
					# 	layoutpolicy_horizontal = expanding
					# 	raw_text = "Click a position to hire."
					# }

					### Empty positions in your court
					vbox = {
						name = "empty_positions_in_your_court"
						layoutpolicy_horizontal = expanding
						visible = "[GetVariableSystem.Exists( 'expand_empty_court_positions' )]"

						text_single = {
							visible = "[IsDataModelEmpty( CourtPositionsWindow.EmptyPositions )]"
							text = "COURT_POSITIONS_no_positions_in_your_court"
						}

						vbox = {
							name = "active_positions"
							datamodel = "[CourtPositionsWindow.EmptyPositions]"
							visible = "[Not(IsDataModelEmpty( CourtPositionsWindow.EmptyPositions ))]"
							layoutpolicy_horizontal = expanding

							item = {
								widget_court_position_item_ocr = {
								}
							}
						}
					}
				}
			}
		}

	}
}
