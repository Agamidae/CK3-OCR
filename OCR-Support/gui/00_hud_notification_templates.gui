types Notifications {

    ######################################################
    ###################### ALERTS ########################
    ######################################################

    type alerts_text = flowcontainer {
        # set_parent_size_to_minimum = yes
        direction = vertical
        ignoreinvisible = yes

        ### Diplomatic offers
        flowcontainer = {
            name = "diplomatic_items"
            datamodel = "[InGameTopbar.GetDiplomaticItems]"

            # flipdirection = yes
            ignoreinvisible = yes
            bottomtotop = yes
            direction = vertical
            # maxhorizontalslots = 10
            # maxverticalslots = 3

            item = {
                container = {
                    visible = "[DiplomaticItem.IsVisible]"

                    button = {
                        name = "action_icon"
                        parentanchor = center

                        size = { 0 0 }
                        framesize = { 144 144 }
                        filter_mouse = right

                        # texture = "[DiplomaticItem.GetIcon]"
                        onclick = "[DiplomaticItem.OnClick]"
                        onclick = "[GetVariableSystem.Toggle('hide_alerts')]"
                        onrightclick = "[DiplomaticItem.OnRightClick]"
                        button_ignore = none

                        tooltip = "DIPLOMATIC_ITEM_TOOLTIP"

                        state = {
                            name = "dismiss_alert"
                            on_finish = "[DiplomaticItem.OnRightClick]"
                        }

                        # tooltip = "DIPLOMATIC_ITEM_TOOLTIP"

                        flowcontainer = {
                            ignoreinvisible = yes
                            resizeparent = yes

                            widget = {
                                scissor = yes
                                size = { 700 25 }
                                visible = "[Not(GetVariableSystem.Exists('hide_alert_desc'))]"

                                text_single = {
                                    visible = "[Not(GetVariableSystem.Exists('hide_alert_desc'))]"
                                    raw_text = "DIPLOMATIC_ITEM_TOOLTIP"
                                    max_width = 700
                                    alwaystransparent = yes
                                }
                            }

                            text_single = {
                                margin_bottom = 10
                                visible = "[GetVariableSystem.Exists('hide_alert_desc')]"
                                raw_text = "DIPLOMATIC_ITEM_TOOLTIP"
                                max_width = 700
                                alwaystransparent = yes
                            }
                        }

                        ### Adding animation ###
                        state = {
                            name = "when_added"
                            next = e
                            position_y = 0
                            duration = 0.2
                            size = { 1 1 }
                            using = Animation_Curve_Default
                            trigger_when = "[DiplomaticItem.IsAdding]"
                            on_start = "[DiplomaticItem.StartAnimation]"

                            start_sound = {
                                soundeffect = "event:/SFX/UI/Notifications/TopBar/sfx_ui_notifications_topbar_diplomacy"
                            }
                        }

                        state = {
                            name = e
                            next = f
                            # position_y = 60
                            duration = 0.45
                            size = { 1 1 }
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = f
                            next = a
                            position_y = 0
                            duration = 0.25

                            size = { 1 1 }
                            # bezier = { 0.43 0 0.2 2.2 }
                            on_finish = "[DiplomaticItem.AddingFinished]"
                            on_finish = "[DiplomaticItem.EndAnimation]"
                        }

                        ### idle animation ###
                        state = {
                            name = "already_added"
                            duration = 0
                            size = { 1 1 }
                            trigger_when = "[DiplomaticItem.IsAdded]"
                        }

                        state = {
                            name = "when_removed"
                            duration = 0.3
                            size = { 0 0 }
                            trigger_when = "[DiplomaticItem.IsRemoving]"
                            on_start = "[DiplomaticItem.StartAnimation]"
                            on_finish = "[DiplomaticItem.RemovingFinished]"
                            on_finish = "[DiplomaticItem.EndAnimation]"
                            start_sound = {
                                soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_show"
                            }
                        }


                        state = {
                            name = _show
                            duration = 1
                            frame = 1
                            # scale = 0.9
                            position = { 0 0 }
                            start_sound = {
                                soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_show"
                            }
                        }

                        state = {
                            name = _mouse_enter
                            duration = 0.05
                            # frame = 2
                            # position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
                        }

                        state = {
                            name = _mouse_leave
                            duration = 0.1
                            # frame = 1
                            position = { 0 0 }
                            # scale = 0.9
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
                        }

                        state = {
                            name = _mouse_press
                            duration = 0.25
                            # frame = 3
                            # position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_press"}
                        }

                        state = {
                            name = _mouse_release
                            duration = 0.25
                            # frame = 2
                            # position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_release"}
                        }
                    }
                }
            }
        }

        flowcontainer = {
            name = "alert_items"
            datamodel = "[InGameTopbar.GetAlertItems]"
            direction = vertical
            bottomtotop = yes
            # flipdirection = yes
            ignoreinvisible = yes
            # maxverticalslots = 3

            item = {
                container = {
                    button = {
                        name = "action_icon"
                        parentanchor = center
                        framesize = { 144 144 }
                        size = { 60 60 }

                        onclick = "[GUIAlertItem.OnClick]"
                        onclick = "[GetVariableSystem.Toggle('hide_alerts')]"
                        # onclick = "[GetVariableSystem.Set('hide_alerts', 'yes')]"
                        onrightclick = "[GUIAlertItem.OnRightClick]"
                        button_ignore = none

                        state = {
                            name = "dismiss_alert"
                            on_finish = "[GUIAlertItem.OnRightClick]"
                        }

                        state = {
                            name = "when_added"
                            next = e
                            position_y = 0
                            duration = 0.45
                            size = { 1 1 }
                            using = Animation_Curve_Default
                            trigger_when = "[GUIAlertItem.IsAdding]"
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_start = "[GUIAlertItem.PlayShowSound]"
                        }

                        state = {
                            name = e
                            next = f
                            # position_y = 60
                            duration = 0.45
                            size = { 1 1 }
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = f
                            next = a
                            position_y = 0
                            duration = 0.45
                            size = { 1 1 }
                            # bezier = { 0.43 0 0.2 2.2 }
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                        }

                        ### idle animation ###
                        state = {
                            name = a
                            next = b
                            duration = 0
                            delay = 10
                            size = { 1 1 }
                            position_y = 0
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = b
                            next = c
                            duration = 0.3
                            size = { 78 78 }
                            # scale = 1.6
                            bezier = { 0 1.6 0.7 1.8 }
                            # position_y = 50
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = c
                            next = d
                            duration = 0.2
                            size = { 1 1 }
                            # scale = 0.8
                            position_y = 0
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = d
                            duration = 0.2
                            # scale = 0.9
                            size = { 1 1 }
                            position_y = 0
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = "already_added"
                            duration = 0
                            size = { 1 1 }
                            # scale = 0.9
                            trigger_when = "[GUIAlertItem.IsAdded]"
                        }

                        state = {
                            name = "when_removed"
                            duration = 0.3
                            size = { 0 0 }
                            trigger_when = "[GUIAlertItem.IsRemoving]"
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.RemovingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                        }

                        tooltip = "[GUIAlertItem.GetTooltip]"
                        # tooltip_visible = "[GetVariableSystem.Exists('hide_alert_desc')]"
                        using = tooltip_below

                        flowcontainer = {
                            direction = vertical
                            resizeparent = yes
                            alwaystransparent = yes
                            ignoreinvisible = yes

                            widget = {
                                size = { 600 24 }
                                scissor = yes

                                text_single = {
                                    raw_text = "[GUIAlertItem.GetTooltip]"
                                    alwaystransparent = yes
                                }
                            }

                            text_multi = {
                                margin_bottom = 10
                                visible = "[GetVariableSystem.Exists('hide_alert_desc')]"
                                raw_text = "[GUIAlertItem.GetImportantAction.GetDescription]"
                                autoresize = yes
                                max_width = 700
                            }
                        }
                    }
                }
            }
        }
    }

    type notifications_alerts_ocr = flowcontainer {
        # background = { using = Background_Area_Border_Solid }

        # visible = "[Not(SinglePlayerShowingPausedSuccession)]"
        direction = horizontal
        ignoreinvisible = yes
        margin = { 0 5 }
        button = {
          onclick = "[GetVariableSystem.Toggle('hide_alerts')]"
          shortcut = mapmode_faith_secondary
        }

        button = {
          onclick = "[GetVariableSystem.Toggle('hide_alerts')]"
          visible = "[GetVariableSystem.Exists('hide_alerts')]"
          shortcut = close_window
        }

        container = {
            visible = "[GetVariableSystem.Exists('hide_alerts')]"
            ignoreinvisible = yes

            flowcontainer = {
                background = { using = Background_Area_Light margin = { 15 10 } }
                direction = vertical
                ignoreinvisible = yes
                alwaystransparent = no
                visible = "[Or( DataModelHasItems(InGameTopbar.GetAlertItems), DataModelHasItems(InGameTopbar.GetDiplomaticItems) )]"

                flowcontainer = {
                    spacing = 5

                    text_single = {
                        raw_text = "[Add_int32(GetDataModelSize(InGameTopbar.GetAlertItems), GetDataModelSize(InGameTopbar.GetDiplomaticItems))] alerts."
                    }
                }


                alerts_text = {
                }

                flowcontainer = {
                    visible = "[Or(Not(IsDataModelEmpty(InGameTopbar.GetAlertItems)), Not(IsDataModelEmpty(InGameTopbar.GetDiplomaticItems)))]"
                    ignoreinvisible = yes
                    direction = vertical

                    button_text = {
                        onclick = "[GetVariableSystem.Toggle('hide_alert_desc')]"
                        blockoverride "text" {
                            raw_text = "[Select_CString( GetVariableSystem.Exists('hide_alert_desc'), 'Hide', 'Show' )] descriptions, Shift D."
                        }
                        shortcut = mapmode_house_secondary
                    }

                    text_single = {
                        raw_text = "Right click to dismiss."
                        margin_top = 2
                    }

                    button_text = {
                        blockoverride "margins" { }
                        blockoverride "text" {
                            raw_text = "Dismiss all, Control A."
                        }
                        shortcut = map_mode_6
                        onclick = "[PdxGuiTriggerAllAnimations('dismiss_alert')]"
                        onclick  = "[GetVariableSystem.Toggle('hide_alerts')]"
                    }

                    button_text = {
                        blockoverride "margins" { }
                        onclick = "[GetVariableSystem.Toggle('hide_alerts')]"
                        blockoverride "text" {
                            raw_text = "Hide, Shift A or Escape."
                        }
                    }

                }
            }
        }

        scrollbox = {
            # autoresizescrollarea = yes
            # visible = "[Or( DataModelHasItems(InGameTopbar.GetAlertItems), DataModelHasItems(InGameTopbar.GetDiplomaticItems) )]"
            maximumsize = { 1 1 } #TODO
            blockoverride "scrollbox_margins" {
                margin_top = 20
            }
            blockoverride "scrollbox_background" { }
            blockoverride "scrollbox_background_fade" { }
            blockoverride "scrollbox_content" {
                vbox = {
                    widget = {
                        # this is just for sound
                        size = { 0 0 }
                        # visible = "[GetVariableSystem.Exists('hide_alerts')]"

                        scissor = yes

                        dynamicgridbox = {
                            name = "alert_items"
                            datamodel = "[InGameTopbar.GetAlertItems]"
                            # flipdirection = yes
                            ignoreinvisible = yes
                            # maxverticalslots = 3

                            item = {
                                container = {
                                    button = {
                                        name = "action_icon"
                                        parentanchor = center
                                        framesize = { 144 144 }
                                        size = { 60 60 }

                                        onclick = "[GUIAlertItem.OnClick]"
                                        onrightclick = "[GUIAlertItem.OnRightClick]"
                                        button_ignore = none

                                        state = {
                                            name = "when_added"
                                            next = e
                                            position_y = 0
                                            duration = 0.45
                                            size = { 1 1 }
                                            using = Animation_Curve_Default
                                            trigger_when = "[GUIAlertItem.IsAdding]"
                                            on_start = "[GUIAlertItem.StartAnimation]"
                                            on_start = "[GUIAlertItem.PlayShowSound]"
                                        }

                                        state = {
                                            name = e
                                            next = f
                                            # position_y = 60
                                            duration = 0.45
                                            size = { 1 1 }
                                            using = Animation_Curve_Default
                                        }

                                        state = {
                                            name = f
                                            next = a
                                            position_y = 0
                                            duration = 0.45
                                            size = { 1 1 }
                                            # bezier = { 0.43 0 0.2 2.2 }
                                            on_finish = "[GUIAlertItem.AddingFinished]"
                                            on_finish = "[GUIAlertItem.EndAnimation]"
                                        }

                                        ### idle animation ###
                                        state = {
                                            name = a
                                            next = b
                                            duration = 0
                                            delay = 10
                                            size = { 1 1 }
                                            position_y = 0
                                            on_start = "[GUIAlertItem.StartAnimation]"
                                            on_finish = "[GUIAlertItem.AddingFinished]"
                                            on_finish = "[GUIAlertItem.EndAnimation]"
                                            using = Animation_Curve_Default
                                        }

                                        state = {
                                            name = b
                                            next = c
                                            duration = 0.3
                                            size = { 1 1 }
                                            # scale = 1.6
                                            bezier = { 0 1.6 0.7 1.8 }
                                            # position_y = 50
                                            on_start = "[GUIAlertItem.StartAnimation]"
                                            on_finish = "[GUIAlertItem.AddingFinished]"
                                            on_finish = "[GUIAlertItem.EndAnimation]"
                                            using = Animation_Curve_Default
                                        }

                                        state = {
                                            name = c
                                            next = d
                                            duration = 0.2
                                            size = { 1 1 }
                                            # scale = 0.8
                                            position_y = 0
                                            on_start = "[GUIAlertItem.StartAnimation]"
                                            on_finish = "[GUIAlertItem.AddingFinished]"
                                            on_finish = "[GUIAlertItem.EndAnimation]"
                                            using = Animation_Curve_Default
                                        }

                                        state = {
                                            name = d
                                            duration = 0.2
                                            # scale = 0.9
                                            size = { 1 1 }
                                            position_y = 0
                                            on_start = "[GUIAlertItem.StartAnimation]"
                                            on_finish = "[GUIAlertItem.AddingFinished]"
                                            on_finish = "[GUIAlertItem.EndAnimation]"
                                            using = Animation_Curve_Default
                                        }

                                        state = {
                                            name = "already_added"
                                            duration = 0
                                            size = { 1 1}
                                            # scale = 0.9
                                            trigger_when = "[GUIAlertItem.IsAdded]"
                                        }

                                        state = {
                                            name = "when_removed"
                                            duration = 0.3
                                            size = { 0 0 }
                                            trigger_when = "[GUIAlertItem.IsRemoving]"
                                            on_start = "[GUIAlertItem.StartAnimation]"
                                            on_finish = "[GUIAlertItem.RemovingFinished]"
                                            on_finish = "[GUIAlertItem.EndAnimation]"
                                        }

                                        # tooltip = "[GUIAlertItem.GetTooltip]"
                                        using = tooltip_below
                                    }
                                }
                            }
                        }

                        ### Diplomatic offers
                        dynamicgridbox = {
                            name = "diplomatic_items"
                            datamodel = "[InGameTopbar.GetDiplomaticItems]"

                            # flipdirection = yes
                            ignoreinvisible = yes
                            # maxhorizontalslots = 10
                            # maxverticalslots = 3

                            item = {
                                container = {
                                    visible = "[DiplomaticItem.IsVisible]"


                                    button = {
                                        name = "action_icon"
                                        parentanchor = center

                                        size = { 0 0 }
                                        filter_mouse = right

                                        texture = "[DiplomaticItem.GetIcon]"
                                        onclick = "[DiplomaticItem.OnClick]"
                                        onclick = "[GetVariableSystem.Toggle('hide_alerts')]"
                                        onrightclick = "[DiplomaticItem.OnRightClick]"
                                        button_ignore = none

                                        tooltip = "DIPLOMATIC_ITEM_TOOLTIP"

                                        state = {
                                            trigger_when = "[LessThan_int32( DiplomaticItem.GetDaysUntilTimeout, '(int32)30')]"
                                            name = "timeout"
                                            next = b

                                            using = Animation_Curve_Default
                                            duration = 0.5
                                            delay = 0.2
                                            alpha = 1
                                        }

                                        state = {
                                            name = b
                                            next = "timeout"

                                            using = Animation_Curve_Default
                                            delay = 1.5
                                            duration = 0.4
                                            alpha = 0.5
                                        }

                                        ### Adding animation ###
                                        state = {
                                            name = "when_added"
                                            next = e
                                            position_y = 0
                                            duration = 0.2
                                            size = { 1 1 }
                                            using = Animation_Curve_Default
                                            trigger_when = "[DiplomaticItem.IsAdding]"
                                            on_start = "[DiplomaticItem.StartAnimation]"

                                            start_sound = {
                                                soundeffect = "event:/SFX/UI/Notifications/TopBar/sfx_ui_notifications_topbar_diplomacy"
                                            }
                                        }

                                        state = {
                                            name = e
                                            next = f
                                            position_y = 60
                                            duration = 0.45
                                            size = { 1 1 }
                                            using = Animation_Curve_Default
                                        }

                                        state = {
                                            name = f
                                            next = a
                                            position_y = 0
                                            duration = 0.25

                                            size = { 1 1 }
                                            bezier = { 0.43 0 0.2 2.2 }
                                            on_finish = "[DiplomaticItem.AddingFinished]"
                                            on_finish = "[DiplomaticItem.EndAnimation]"
                                        }

                                        ### idle animation ###
                                        state = {
                                            name = "already_added"
                                            duration = 0
                                            size = { 1 1 }
                                            trigger_when = "[DiplomaticItem.IsAdded]"
                                        }

                                        state = {
                                            name = "when_removed"
                                            duration = 0.3
                                            size = { 0 0 }
                                            trigger_when = "[DiplomaticItem.IsRemoving]"
                                            on_start = "[DiplomaticItem.StartAnimation]"
                                            on_finish = "[DiplomaticItem.RemovingFinished]"
                                            on_finish = "[DiplomaticItem.EndAnimation]"
                                            start_sound = {
                                                soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_show"
                                            }
                                        }

                                        modify_texture = {
                                            name = "glow"
                                            texture = "gfx/interface/component_effects/effect_shimmer_blue.dds"
                                            blend_mode = colordodge
                                            translate_uv = { 0.2 0.2 }
                                        }

                                        #### Shimmer ####
                                        state = {
                                            trigger_when = "[DiplomaticItem.IsAdding]"
                                            name = _show
                                            next = shimmer
                                            duration = 0.2
                                            scale = 0.9

                                            modify_texture = {
                                                name = "glow"
                                                translate_uv = { 1 -2 }
                                            }
                                        }

                                        state = {
                                            name = shimmer
                                            next = pause
                                            duration = 1.2
                                            scale = 0.9
                                            position = { 0 0 }

                                            bezier = { 0 0.9 1 0.4 }

                                            modify_texture = {
                                                name = "glow"
                                                translate_uv = { -1 1 }
                                            }
                                        }

                                        state = {
                                            name = pause
                                            next = shimmer
                                            duration = 0
                                            delay = 5

                                            modify_texture = {
                                                name = "glow"
                                                translate_uv = { 1 -1 }
                                            }
                                        }

                                        state = {
                                            name = _show
                                            duration = 1
                                            frame = 1
                                            scale = 0.9
                                            position = { 0 0 }
                                            start_sound = {
                                                soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_show"
                                            }
                                        }

                                        state = {
                                            name = _mouse_enter
                                            duration = 0.05
                                            frame = 2
                                            position = { 0 10 }
                                            scale = 1
                                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
                                        }

                                        state = {
                                            name = _mouse_leave
                                            duration = 0.1
                                            frame = 1
                                            position = { 0 0 }
                                            scale = 0.9
                                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
                                        }

                                        state = {
                                            name = _mouse_press
                                            duration = 0.25
                                            frame = 3
                                            position = { 0 10 }
                                            scale = 1
                                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_press"}
                                        }

                                        state = {
                                            name = _mouse_release
                                            duration = 0.25
                                            frame = 2
                                            position = { 0 10 }
                                            scale = 1
                                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_release"}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    ######################################################
    ###################### TOASTS ########################
    ######################################################
    type notifications_toasts = widget {
        name = "toast_container_widget"
        visible_at_creation = no
        allow_outside = yes
        alwaystransparent = yes
        size = { 100% 100% }
        # position = { 0 30 }

        visible = "[And(And( Not(IsGameViewOpen('barbershop')), And( ToastMessageHandler.HasMessage, Not(SinglePlayerShowingPausedSuccession) ) ), Not( IsPauseMenuShown ))]"

        datacontext = "[ToastMessageHandler.GetMessage]"
        datacontext = "[GetPlayer]"

        # state = {
        #     name = please_pause
        #     trigger_on_create = yes
        #     on_finish = "[PdxGuiWidget.FindChild('pause').TriggerAnimation('pause_game')]"
        # }

        state = {
            name = _show
            on_finish = "[GetVariableSystem.Set('toasted', 'yes')]"

            next = toast_1
        }

        state = {
            name = toast_1
            on_finish = "[Set('toast_1', PlayerMessageItem.GetTitle)]"
            on_finish = "[Set('toast_desc_1', PlayerMessageItem.GetDescription)]"
        }

        state = {
            name = toast_extras
            trigger_when = "[Or(PlayerMessageItem.HasLeftIcon, PlayerMessageItem.HasRightIcon)]"
            on_finish = "[Set('toast_extras', 'yes')]"
        }

        state = {
          name = _hide
          on_finish = "[GetVariableSystem.Clear('toasted')]"
          on_finish = "[GetVariableSystem.Clear('toast_1')]"
          on_finish = "[GetVariableSystem.Clear('toast_desc_1')]"
          on_finish = "[GetVariableSystem.Clear('toast_extras')]"
        }

        flowcontainer = {
            background = { using = Background_Area_Border_Solid }
            min_width = 700
            name = "toast_content"
            datacontext = "[ToastMessageHandler.GetMessage]"
            ignoreinvisible = yes
            direction = vertical
            margin_left = 10
            margin_bottom = 5
            visible = "[And(And(And(Not(SinglePlayerShowingPausedSuccession), ToastMessageHandler.HasMessage), Isnt('resources')), Isnt('ocr'))]"
            # margin_bottom = 20

            # background = {
            #     using = Background_Area_Solid
            #     margin = { 5 5 }
            # }

            text_single = {
                name = "title"
                raw_text = "Popup. [PlayerMessageItem.GetTitle]."
                max_width = 700

                fontsize_min = 15
            }

            text_multi = {
                name = "desc"
                autoresize = yes
                using = wide
                fontsize_min = 15
                # size = { 700 120 }
                visible = "[Not(EqualTo_string(PlayerMessageItem.GetDescription, 'DESCRIPTION'))]"

                raw_text = "[PlayerMessageItem.GetDescription][AddTextIf(Not(StringIsEmpty(PlayerMessageItem.GetDescription)), '.')]"
                # tooltip = "[PlayerMessageItem.GetDescription]"
            }

            flowcontainer = {
                ignoreinvisible = yes
                # direction = vertical

                flowcontainer = {
                    ignoreinvisible = yes
                    visible = "[PlayerMessageItem.HasLeftIcon]"

                    spacing = 3
                    button_text = {
                        blockoverride "text" {
                            raw_text = "Select [PlayerMessageItem.GetLeftCharacter.GetFirstName]."
                        }
                        using = char_click
                        datacontext = "[PlayerMessageItem.GetLeftCharacter]"
                        visible = "[And(Character.IsValid, Not(Character.IsLocalPlayer))]"
                        onclick = "[ToastMessageHandler.DismissMessage]"
                    }

                    button_text = {
                        datacontext = "[PlayerMessageItem.GetLeftTitle]"
                        blockoverride "text" {
                            raw_text = "Select [PlayerMessageItem.GetLeftTitle.GetNameNoTooltip]."
                        }
                        using = title_click
                        visible = "[And(Title.IsValid, GreaterThanOrEqualTo_int32(Title.GetTierFrame, '(int32)3'))]"
                        onclick = "[ToastMessageHandler.DismissMessage]"
                    }

                    button_text = {
                        datacontext = "[PlayerMessageItem.GetLeftTitle]"
                        blockoverride "text" {
                            raw_text = "Go to [PlayerMessageItem.GetLeftTitle.GetNameNoTooltip]."
                        }
                        using = prov_click
                        visible = "[And(Title.IsValid, LessThan_int32(Title.GetTierFrame, '(int32)3'))]"
                        onclick = "[ToastMessageHandler.DismissMessage]"
                    }

                    button_text = {
                        datacontext = "[PlayerMessageItem.GetLeftArtifact]"
                        blockoverride "text" {
                            raw_text = "[Artifact.GetName]."
                            alwaystransparent = yes
                        }
                        visible = "[Artifact.IsValid]"
                        onclick = "[OpenGameViewData('artifact_details', Artifact.Self)]"
                    }
                }

                flowcontainer = {
                    ignoreinvisible = yes
                    visible = "[PlayerMessageItem.HasRightIcon]"

                    spacing = 3
                    button_text = {
                        blockoverride "text" {
                            raw_text = "Select [PlayerMessageItem.GetRightCharacter.GetFirstName]."
                        }
                        using = char_click
                        onclick = "[ToastMessageHandler.DismissMessage]"
                        datacontext = "[PlayerMessageItem.GetRightCharacter]"
                        visible = "[And(Character.IsValid, Not(Character.IsLocalPlayer))]"
                    }

                    button_text = {
                        datacontext = "[PlayerMessageItem.GetRightTitle]"
                        blockoverride "text" {
                            raw_text = "Select [PlayerMessageItem.GetRightTitle.GetNameNoTooltip]."
                        }
                        using = title_click
                        onclick = "[ToastMessageHandler.DismissMessage]"
                        visible = "[And(Title.IsValid, GreaterThanOrEqualTo_int32(Title.GetTierFrame, '(int32)3'))]"
                    }

                    button_text = {
                        datacontext = "[PlayerMessageItem.GetRightTitle]"
                        blockoverride "text" {
                            raw_text = "Go to [PlayerMessageItem.GetRightTitle.GetNameNoTooltip]."
                        }
                        using = prov_click
                        onclick = "[ToastMessageHandler.DismissMessage]"
                        visible = "[And(Title.IsValid, LessThan_int32(Title.GetTierFrame, '(int32)3'))]"
                    }

                    text_single = {
                        datacontext = "[PlayerMessageItem.GetRightArtifact]"
                        visible = "[Artifact.IsValid]"
                        raw_text = "[Artifact.GetName]."
                        #TODO open artifact view
                    }
                }

                button_text = {
                    # using = NoWindowsOpen
                    blockoverride "text" {
                        raw_text = "Dismiss, T."
                    }
                    onclick = "[ToastMessageHandler.DismissMessage]"
                    shortcut = map_mode_2
                }
                state = {
                    name = dismiss_toast
                    on_finish = "[ToastMessageHandler.DismissMessage]"
                }
            }
        }

        widget = {
            using = vanilla
            parentanchor = hcenter
            allow_outside = yes
            visible_at_creation = no

            #TODO
            notifications_toasts_default = {
                position = "[Select_CVector2f( IsGameViewOpen('activity_locale'), '(CVector2f)-620,185', '(CVector2f)0,165' )]"
                datacontext = "[ToastMessageHandler.GetMessage]"
                visible = "[Not( PlayerMessageItem.GetType.HasFlags )]"

                state = {
                  name = "auto-dismiss"
                  delay = 11
                  trigger_on_create = yes
                  on_finish = "[ToastMessageHandler.DismissMessage]"
                }
            }

            notifications_toasts_contests = {
                position = { 0 165 }
                datacontext = "[ToastMessageHandler.GetMessage]"
                visible = "[PlayerMessageItem.GetType.HasFlag( 'tournament_reward' )]"
                state = {
                  name = "auto-dismiss"
                  delay = 11
                  trigger_on_create = yes
                  on_finish = "[ToastMessageHandler.DismissMessage]"
                }
            }
        }
    }

    ######################################################
    ################### SUGGESTIONS ######################
    ######################################################
    type notifications_suggestions = widget {
      name = "action_items"
      # visible = "[And(And(And( Not( IsPauseMenuShown ), And( Not(SinglePlayerShowingPausedSuccession), ActionItemHandler.ShouldBeVisible)), Not(IsRightWindowOpen)), Not(IsObserver))]"
      visible = "[And(And(And(Not(IsObserver), NoBarber), ActionItemHandler.ShouldBeVisible), Not( IsPauseMenuShown ))]"
      visible_at_creation = no
      alwaystransparent = yes
      allow_outside = yes
      size = { 100% 100% }
      using = Animation_ShowHide_Quick

      # widget = {
      #     size = { 100% 100% }
      #
      #     alwaystransparent = yes
      # }
      empty_screen = {
        using = ocr
        container = {
          using = NoWindowsOpen
          position = { 15 25 }

          container = {
                visible = "[Not(GetScriptedGui('show_suggestions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ))]"
                ignoreinvisible = yes

                button_text = {
                    background = {
                        using = Background_Area_Border_Solid
                        margin = { 5 0 }
                    }
                    onclick = "[ActionItemHandler.ToggleList]"
                    visible = "[Not(GetVariableSystem.Exists('ocr'))]"
                    shortcut = "action_list"
                    blockoverride "text" {
                        margin_right = 5
                        raw_text = "[ActionItemHandler.GetNumberOfActions] suggestions, Tab."
                    }
                }
            }
        }

        container = {
            using = AnyWindowOpen
            parentanchor = right|bottom
            position = { -115 -3 }

            container = {
                visible = "[Not(GetScriptedGui('show_suggestions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ))]"
                ignoreinvisible = yes

                button_text = {
                    background = {
                        using = Background_Area_Border_Solid
                        margin = { 5 0 }
                    }
                    onclick = "[ActionItemHandler.ToggleList]"
                    visible = "[Not(GetVariableSystem.Exists('ocr'))]"
                    shortcut = "action_list"
                    blockoverride "text" {
                        margin_right = 5
                        raw_text = "[ActionItemHandler.GetNumberOfActions] suggestions, Tab."
                    }
                }
            }
        }

        container = {
      		visible = "[GetScriptedGui('show_suggestions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
          button = {
            onclick = "[ActionItemHandler.ToggleList]"
            visible = "[Not(GetVariableSystem.Exists('ocr'))]"
            shortcut = "action_list"
          }
        }

        widget = {
            # parentanchor = right
            visible = "[ActionItemHandler.IsListVisible]"
            visible_at_creation = no
            # parentanchor = right
            # position = { 30 0 }
            alwaystransparent = no
            filter_mouse = all


            state = {
                name = _show
                on_start = "[GetVariableSystem.Set('suggestions', 'open')]"
            }

            state = {
                name = _hide
                on_start = "[GetVariableSystem.Clear('suggestions')]"
            }
            state = {
                name = _show
                using = Animation_FadeIn_Quick
                using = Sound_WindowShow_Suggestion
                position_y = 0
            }

            state = {
                name = _hide
                using = Animation_FadeOut_Quick
                using = Sound_WindowHide_Suggestion
                position_y = -20
            }

            background = { using = Background_Area_Border_Solid }

            widget = {
                name = "button"
                parentanchor = top|right
                position = { -5 5 }

                background = {
                    using = Background_Area
                    mirror = vertical
                    margin_left = 55
                    margin_bottom = 55
                    modify_texture = {
                        texture = "gfx/interface/component_masks/mask_fade_corner.dds"
                        blend_mode = alphamultiply
                    }
                }

                buttons_window_control = {
                    name = "close_suggestions_button"
                    resizeparent = yes

                    blockoverride "button_close" {
                        onclick = "[ActionItemHandler.ToggleList]"
                        shortcut = "close_window"
                        tooltip = "CLOSE_TOOLTIP"
                    }
                }
            }

            vbox = {
                name = "action_items_container"
                set_parent_size_to_minimum = yes
                minimumsize = { 440 50 }
                margin_top = 5
                spacing = 15
                ignoreinvisible = yes

                @sug_width = 700

                vbox = {
                    name = "suggestions"
                    visible = "[Or( Not(IsDataModelEmpty(AccessSuggestionItems) ), IsDataModelEmpty(ActionItemHandler.GetGuiActionItems ) )]"
                    layoutpolicy_horizontal = expanding
                    spacing = 10
                    ignoreinvisible = yes

                    text_single = {
                        text = "CURRENT_SITUATION_SUGGESTIONS"
                    }

                    text_single = {
                        visible = "[IsDataModelEmpty(AccessSuggestionItems)]"
                        text = "CURRENT_SITUATION_SUGGESTIONS_EMPTY"
                    }

                    flowcontainer = {
                        name = "suggestion_items"
                        datamodel = "[AccessSuggestionItems]"
                        layoutpolicy_horizontal = expanding
                        direction = vertical
                        margin_left = 20
                        ignoreinvisible = yes

                        item = {
                            button_suggestion_item_ocr = {
                                minimumsize = { @sug_width 0 }
                            }
                        }
                    }
                }

                vbox = {
                    name = "actions"
                    layoutpolicy_horizontal = expanding
                    margin = { 8 0 }
                    margin_bottom = 8

                    hbox = {
                        layoutpolicy_horizontal = expanding
                        spacing = 3

                        text_single = {
                            text = "CURRENT_SITUATION_HEADER"
                            max_width = 220
                        }

                        comma = {}

                        text_single = {
                            raw_text = "[ActionItemHandler.GetNumberOfActions] suggestions."
                        }

                        text_single = {
                          raw_text = "See tooltips for details."
                        }

                        expand = { }
                    }

                    # text_single = {
                    #     layoutpolicy_horizontal = expanding
                    #     raw_text = "Every entry has a tooltip."
                    # }

                    text_single = {
                        layoutpolicy_horizontal = expanding
                        visible = "[Not( ActionItemHandler.HasAvailableCurrentSituationItems )]"
                        text = "CURRENT_SITUATION_SUGGESTIONS_EMPTY"
                    }

                    scrollbox = {
                        layoutpolicy_horizontal = expanding
                        visible = "[ActionItemHandler.HasAvailableCurrentSituationItems]"
                        maximumsize = { -1 940 }

                        blockoverride "scrollbox_background_fade" { }
                            blockoverride "scrollbox_background" { }

                                blockoverride "scrollbox_margins"
                                {
                                    margin_top = 20
                                }

                                blockoverride "scrollbox_content" {
                                    set_parent_size_to_minimum = yes
                                    spacing = 10

                                    vbox = {
                                        datamodel = "[ActionItemHandler.GetGuiActionItems]"

                                        item = {
                                            flowcontainer = {
                                                ignoreinvisible = yes
                                                minimumsize = { @sug_width 0 }
                                                direction = vertical

                                                flowcontainer = {
                                                    name = "expanded_action_items"
                                                    datamodel = "[GuiActionItem.GetImportantActionItems]"
                                                    visible = "[GuiActionItem.IsExpanded]"
                                                    direction = vertical
                                                    margin_left = 10

                                                    button_current_situation_item_multiple_ocr = {
                                                        visible = "[And(GuiActionItem.IsVisible, GuiActionItem.HasMultipleActions)]"
                                                        minimumsize = { @sug_width 0 }
                                                    }

                                                    ignoreinvisible = yes

                                                    item = {
                                                        button_current_situation_item_combined_ocr = {
                                                            datacontext = "[GuiActionImportantActionItem.GetImportantAction]"
                                                            minimumsize = { @sug_width 0 }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    vbox = {
                                        datamodel = "[ActionItemHandler.GetGuiActionItems]"
                                        layoutpolicy_horizontal = expanding

                                        item = {
                                            flowcontainer = {
                                              layoutpolicy_horizontal = expanding
                                                ignoreinvisible = yes
                                                minimumsize = { @sug_width 0 }
                                                direction = vertical

                                                flowcontainer = {
                                                    ignoreinvisible = yes
                                                    minimumsize = { @sug_width 0 }
                                                    direction = vertical

                                                    button_current_situation_item_ocr = {
                                                        visible = "[And(GuiActionItem.IsVisible, Not(GuiActionItem.HasMultipleActions))]"
                                                        datacontext = "[GuiActionItem.GetFirstVisibleActionItem]"
                                                        minimumsize = { @sug_width 0 }
                                                    }

                                                    button_current_situation_item_multiple_ocr = {
                                                        visible = "[And(And(GuiActionItem.IsVisible, GuiActionItem.HasMultipleActions), Not(GuiActionItem.IsExpanded))]"
                                                        minimumsize = { @sug_width 0 }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                    widget = {
                        size = { 0 5 }
                    }

                    text_single = {
                        margin_left = 5
                        layoutpolicy_horizontal = expanding
                        raw_text = "Right click to dismiss a suggestion."
                    }

                    button_text = {
                        layoutpolicy_horizontal = expanding
                        blockoverride "text" {
                            raw_text = "Reset dismissed."
                        }
                        onclick = "[ActionItemHandler.ResetAllDismissed]"
                        tooltip = "RESET_DISMISSED_TOOLTIP"
                    }

                    button_text = {
                        layoutpolicy_horizontal = expanding
                        onclick = "[GetScriptedGui('show_suggestions').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
                        blockoverride "pre" {
                            spacing = 3
                            text_single = {
                                raw_text = "[Select_CString(GetScriptedGui('show_suggestions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ), 'unchecked', 'checked')],"
                            }
                        }
                        blockoverride "text" {
                            raw_text = "show the number of suggestions on screen."
                        }
                    }
                }
            }
        }
      }

      ## Suggestions / Current Situation toggle button
      button = {
        name = "suggestions_button"
        parentanchor = top|right
        size = { 79 69 }
        position = { -620 -10 }
        gfxtype = togglepushbuttongfx
        effectname = "NoHighlight"
        shaderfile = "gfx/FX/pdxgui_pushbutton.shader"

        onclick = "[ActionItemHandler.ToggleList]"
        shortcut = "action_list"

        texture = "gfx/interface/hud/button_hud_suggestions.dds"

        tooltip = "ACTIONS_TT"
        using = tooltip_se
        visible = "[GetVariableSystem.Exists('ocr')]"

        modify_texture = {
          name = "mouseover"
          visible = "[GreaterThan_int32(ActionItemHandler.GetNumberOfUnreadActions, '(int32)0')]"
          texture = "gfx/interface/component_effects/effect_shimmer.dds"
          blend_mode = colordodge
          alpha = 0
        }

        state = {
          name = _mouse_enter
          duration = 0.05
          frame = 2
          position = { -620 0 }

          modify_texture = {
            name = "mouseover"
            alpha = 1
          }
        }

        state = {
          name = _mouse_leave
          duration = 0.1
          position = { -620 -10 }

          modify_texture = {
            name = "mouseover"
            alpha = 0
          }
        }

        state = {
          name = _mouse_press
          scale = 1
          position = { -620 -5 }
        }

        state = {
          name = _mouse_release
          scale = 1
        }

        glow = {
          using = Color_Bright_Yellow
          glow_radius = 5
          using = Glow_Standard
          alpha = 0
        }

        state = {
          name = "up_start"
          next = "up_end"
          position = { -620 0 }
          duration = 0.5
          trigger_when = "[ActionItemHandler.ActionsWentUp]"

          using = Animation_Curve_Default
          glow_alpha = 1
        }

        state = {
          name = "up_end"
          duration = 0.3
          position = { -620 -15 }

          using = Animation_Curve_Default
          glow_alpha = 0
        }

        modify_texture = {
          name = "shimmer"
          visible = "[And(GreaterThan_int32(ActionItemHandler.GetNumberOfUnreadActions, '(int32)0'), Not(ActionItemHandler.HasVisibleDangerousAction))]"
          texture = "gfx/interface/component_effects/effect_shimmer.dds"
          blend_mode = colordodge
          translate_uv = { 0.2 0.2 }
        }

        state = {
          name = shimmer
          next = pause
          delay = 0.5

          trigger_when = "[ActionItemHandler.ActionsWentUp]"

          bezier = { 0 0.9 1 0.4 }

          modify_texture = {
            name = "shimmer"
            translate_uv = { 1 -1 }
          }
        }
        state = {
          name = pause
          next = inbetween
          duration = 1.5

          modify_texture = {
            name = "shimmer"
            translate_uv = { -1 1 }
          }
        }

        state = {
          name = inbetween
          next = shimmer
          duration = 3

          modify_texture = {
            name = "shimmer"
            translate_uv = { -1 -1 }
          }

        }

        modify_texture = {
          name = "shimmer_dangerous"
          visible = "[And(GreaterThan_int32(ActionItemHandler.GetNumberOfUnreadActions, '(int32)0'), ActionItemHandler.HasVisibleDangerousAction)]"
          texture = "gfx/interface/component_effects/effect_shimmer_dangerous.dds"
          blend_mode = colordodge
          translate_uv = { 1 1 }
        }

        state = {
          name = shimmer_2
          next = pause_2
          trigger_on_create = yes
          delay = 0.5

          trigger_when = "[ActionItemHandler.ActionsWentUp]"

          bezier = { 0 0.9 1 0.4 }

          modify_texture = {
            name = "shimmer_dangerous"
            translate_uv = { 1 -1 }
          }
        }

        state = {
          name = pause_2
          next = inbetween_2
          duration = 1.5

          modify_texture = {
            name = "shimmer_dangerous"
            translate_uv = { -1 1 }
          }
        }

        state = {
          name = inbetween_2
          next = shimmer_2
          duration = 2

          modify_texture = {
            name = "shimmer_dangerous"
            translate_uv = { -1 -1 }
          }
        }

        ## dangerous action
        text_single = {
          name = "actions_number_dangerous"
          visible = "[ActionItemHandler.HasVisibleDangerousAction]"
          parentanchor = center

          text = "[ActionItemHandler.GetNumberOfUnreadActions]"
          align = left
          using = Font_Size_Big
          default_format = "#high;glow_color:{0.9,0.1,0.1,1.0}"
          snap_to_pixels = no
          alpha = "[Select_float(GreaterThan_int32(ActionItemHandler.GetNumberOfUnreadActions, '(int32)0'),'(float)1.0','(float)0.5')]"

          state = {
            name = "up_start"
            next = "up_end"
            scale = 1.5
            duration = 0.25
            trigger_when = "[ActionItemHandler.ActionsWentUp]"
          }

          state = {
            name = "up_end"
            scale = 1
            duration = 0.25
          }
        }

        text_single = {
          name = "actions_number"
          visible = "[Not(ActionItemHandler.HasVisibleDangerousAction)]"
          parentanchor = center

          text = "[ActionItemHandler.GetNumberOfUnreadActions]"
          align = left
          using = Font_Size_Big
          default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
          snap_to_pixels = no

          state = {
            name = "up_start"
            next = "up_end"
            scale = 1.5
            duration = 0.25
            trigger_when = "[ActionItemHandler.ActionsWentUp]"
          }

          state = {
            name = "up_end"
            scale = 1
            duration = 0.25
          }
        }
      }

      widget = {
          visible = "[And(ActionItemHandler.IsListVisible, Is('ocr'))]"
          visible_at_creation = no
          parentanchor = top|right
          position = { -620 80 }
          alwaystransparent = no
          filter_mouse = all

          state = {
              name = _show
              using = Animation_FadeIn_Quick
              using = Sound_WindowShow_Suggestion
              position_y = 80
          }

          state = {
              name = _hide
              using = Animation_FadeOut_Quick
              using = Sound_WindowHide_Suggestion
              position_y = 40
          }

          background = {
              name = "paper_texture_shadow"
              texture = "gfx/interface/window_event/tile_letter_shadow.dds"
              spriteType = Corneredtiled
              spriteborder = { 200 200 }
          }

          background = {
              name = "paper_texture_flat"
              texture = "gfx/interface/window_event/tile_letter_flat.dds"
              spriteType = Corneredtiled
              spriteborder = { 200 200 }
              alpha = 0.9
              color = { 0.51 0.53 0.58 1 }

              modify_texture = {
                  name = "paper_texture_overlay"
                  texture = "gfx/interface/window_event/overlay_letter_texture.dds"
                  spriteType = Corneredstretched
                  blend_mode = overlay
              }
          }

          #### DECOR
          widget = {
              size = { 100%% 97% }
              scissor = yes

              widget = {
                  size = { 322 544 }
                  position = { 6 6 }
                  scale = 0.5
                  alpha = 0.6

                  background = {
                      texture = "gfx/interface/window_event/letter_event_pattern_big.dds"
                      tintcolor = { 0.75 0.9 0.9 1 }

                      modify_texture = {
                          name = "paper_texture_overlay"
                          texture = "gfx/interface/window_event/overlay_letter_texture.dds"
                          spriteType = Corneredstretched
                          blend_mode = overlay
                      }
                  }
              }

              widget = {
                  size = { 322 544 }
                  parentanchor = top|right
                  position = { -6 6 }
                  scale = 0.5
                  alpha = 0.6

                  background = {
                      texture = "gfx/interface/window_event/letter_event_pattern_big.dds"
                      mirror = horizontal
                      tintcolor = { 0.75 0.9 0.9 1 }

                      modify_texture = {
                          name = "paper_texture_overlay"
                          texture = "gfx/interface/window_event/overlay_letter_texture.dds"
                          blend_mode = overlay
                      }
                  }
              }
          }

          widget = {
              name = "button"
              parentanchor = top|right
              position = { -5 5 }

              background = {
                  using = Background_Area
                  mirror = vertical
                  margin_left = 55
                  margin_bottom = 55
                  modify_texture = {
                      texture = "gfx/interface/component_masks/mask_fade_corner.dds"
                      blend_mode = alphamultiply
                  }
              }

              buttons_window_control = {
                  name = "close_suggestions_button"
                  resizeparent = yes

                  blockoverride "button_close" {
                      onclick = "[ActionItemHandler.ToggleList]"
                      shortcut = "close_window"
                      tooltip = "CLOSE_TOOLTIP"
                  }
              }
          }

          vbox = {
              name = "action_items_container"
              set_parent_size_to_minimum = yes
              minimumsize = { 384 50 }
              margin_top = 14
              spacing = 15
              ignoreinvisible = yes

              vbox = {
                  name = "suggestions"
                  visible = "[Or( Not(IsDataModelEmpty(AccessSuggestionItems) ), IsDataModelEmpty(ActionItemHandler.GetGuiActionItems ) )]"
                  layoutpolicy_horizontal = expanding
                  spacing = 10
                  ignoreinvisible = yes

                  text_single = {
                      text = "CURRENT_SITUATION_SUGGESTIONS"
                      using = Font_Size_Medium
                      using = Font_Type_Flavor
                      default_format = "#light_background"
                  }

                  text_single = {
                      visible = "[IsDataModelEmpty(AccessSuggestionItems)]"
                      text = "CURRENT_SITUATION_SUGGESTIONS_EMPTY"
                      default_format = "#light_background;italic"
                  }

                  flowcontainer = {
                      name = "suggestion_items"
                      datamodel = "[AccessSuggestionItems]"
                      layoutpolicy_horizontal = expanding
                      direction = vertical
                      margin_left = 20
                      ignoreinvisible = yes

                      item = {
                          button_suggestion_item = {
                              minimumsize = { 360 0 }
                              using = tooltip_sw
                          }
                      }
                  }
              }

              vbox = {
                  name = "actions"
                  layoutpolicy_horizontal = expanding
                  spacing = 5
                  margin = { 8 0 }
                  margin_bottom = 8

                  vbox = {
                      layoutpolicy_horizontal = expanding

                      text_single = {
                          layoutpolicy_horizontal = expanding
                          text = "CURRENT_SITUATION_HEADER"
                          max_width = 220
                          using = Font_Size_Medium
                          allow_outside = yes
                          align = center
                          using = Font_Type_Flavor
                          default_format = "#light_background"

                          widget = {
                              allow_outside = yes
                              parentanchor = right

                              button_change = {
                                  name = "reset_dismissed"
                                  position = { 2 -2 }
                                  onclick = "[ActionItemHandler.ResetAllDismissed]"
                                  tooltip = "RESET_DISMISSED_TOOLTIP"

                                  background = {
                                      using = Background_Area
                                      mirror = horizontal
                                      margin = { 8 3 }

                                      tintcolor = { 0.22 0.16 0.04 0.5 }

                                      modify_texture = {
                                          texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
                                          blend_mode = alphamultiply
                                      }
                                  }
                              }
                          }
                      }
                  }

                  text_single = {
                      visible = "[Not( ActionItemHandler.HasAvailableCurrentSituationItems )]"
                      text = "CURRENT_SITUATION_SUGGESTIONS_EMPTY"
                      default_format = "#light_background;italic"
                  }

                  container = {
                      scrollbox = {
                          visible = "[ActionItemHandler.HasAvailableCurrentSituationItems]"
                          maximumsize = { -1 600 }

                          blockoverride "scrollbox_background_fade" {}
                          blockoverride "scrollbox_background" {}

                          blockoverride "scrollbox_margins"
                          {
                              margin_bottom = 15
                              margin_left = 14
                              margin_right = 14
                          }

                          blockoverride "scrollbox_content" {
                              name = "current_situation"
                              datamodel = "[ActionItemHandler.GetGuiActionItems]"
                              set_parent_size_to_minimum = yes
                              spacing = 5

                              item = {
                                  flowcontainer = {
                                      ignoreinvisible = yes
                                      minimumsize = { 368 0 }
                                      direction = vertical

                                      button_current_situation_item = {
                                          visible = "[And(GuiActionItem.IsVisible, Not(GuiActionItem.HasMultipleActions))]"
                                          datacontext = "[GuiActionItem.GetFirstVisibleActionItem]"
                                          minimumsize = { 360 0 }
                                          using = tooltip_sw
                                      }

                                      button_current_situation_item_multiple = {
                                          visible = "[And(GuiActionItem.IsVisible, GuiActionItem.HasMultipleActions)]"
                                          minimumsize = { 360 0 }
                                          using = tooltip_sw
                                      }

                                      flowcontainer = {
                                          name = "expanded_action_items"
                                          datamodel = "[GuiActionItem.GetImportantActionItems]"
                                          visible = "[GuiActionItem.IsExpanded]"
                                          direction = vertical
                                          spacing = 3

                                          margin_left = 10
                                          margin_top = 3
                                          margin_bottom = 5

                                          ignoreinvisible = yes

                                          item = {
                                              button_current_situation_item_combined = {
                                                  datacontext = "[GuiActionImportantActionItem.GetImportantAction]"
                                                  minimumsize = { 350 0 }
                                                  using = tooltip_sw
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
    }

    ######################################################
    ################### MESSAGE FEED #####################
    ######################################################
    type notifications_message_feed_combined = widget {
        size = { 100% 100% }
        name = "message_feed_widget"
        visible_at_creation = no
        alwaystransparent = yes
        visible = "[And( Not(IsGameViewOpen('barbershop')), And( Not(IsPauseMenuShown), And( Not(SinglePlayerShowingPausedSuccession), IsDefaultGUIMode ) ) )]"
        empty_screen = {
          using = ocr
          window = {
              using = ocr_window_bg
              # visible = "[And(Or(DataModelHasItems(MessageFeedHandler.GetItems), GetVariableSystem.Exists('toasted')), Not(GetVariableSystem.Exists('show_feed')))]"
              visible = "[And(DataModelHasItems(MessageFeedHandler.GetItems), Is('show_feed'))]"

              vbox = {
                  layoutpolicy_horizontal = expanding
                  layoutpolicy_vertical = expanding
                  using = ocr_margins

                  vbox = {
                      # visible = "[Is('show_feed')]"
                      layoutpolicy_horizontal = expanding
                      layoutpolicy_vertical = expanding
                      margin = { 5 5 }

                      hbox = {
                          layoutpolicy_horizontal = expanding
                          visible = "[Not(IsDataModelEmpty(MessageFeedHandler.GetItems))]"

                          text_single = {
                              visible = "[EqualTo_int32(GetDataModelSize(MessageFeedHandler.GetItems), '(int32)1')]"
                              raw_text = "Update."
                          }
                          text_single = {
                              visible = "[GreaterThan_int32(GetDataModelSize(MessageFeedHandler.GetItems), '(int32)1')]"
                              raw_text = "[GetDataModelSize(MessageFeedHandler.GetItems)] Updates."
                          }

                          expand = { }
                      }

                      error_button = {
                        layoutpolicy_horizontal = expanding
                      }

                      scrollbox = {
                          layoutpolicy_horizontal = expanding
                          layoutpolicy_vertical = expanding
                          visible = "[Not(IsDataModelEmpty(MessageFeedHandler.GetItems))]"

                          blockoverride "scrollbox_background_fade" {

                          }
                          blockoverride "scrollbox_margins" {
                              margin_top = 20
                          }
                          blockoverride "scrollbox_content" {

                              vbox = {
                                  layoutpolicy_horizontal = expanding
                                  layoutpolicy_vertical = expanding

                                  vbox = {
                                      # background = { using = Background_Area_Light margin = { 5 0 } }
                                      name = "message_feed"
                                      layoutpolicy_horizontal = expanding
                                      datamodel = "[MessageFeedHandler.GetItems]"
                                      # set_parent_size_to_minimum = yes
                                      bottomtotop = yes

                                      item = {
                                          vbox = {
                                              layoutpolicy_horizontal = expanding
                                              datacontext = "[FeedMessageItem.GetPlayerMessageItem]"

                                              state = {
                                                  name = "mark_to_delete"
                                                  trigger_when = "[FeedMessageItem.IsSetToDelete]"
                                                  on_finish = "[FeedMessageItem.StartAnimation]"
                                                  on_finish = "[FeedMessageItem.EndAnimation]"
                                                  on_finish = "[FeedMessageItem.Delete]"
                                                  # duration = 0.3
                                                  # alpha = 0
                                                  # using = Animation_Curve_Default
                                              }

                                              vbox = {
                                                  layoutpolicy_horizontal = expanding
                                                  name = "text_and_icons"

                                                  text_multi = {
                                                      layoutpolicy_horizontal = expanding
                                                      raw_text = "[PlayerMessageItem.GetTitle], [Subtract_int32(GetCurrentDate.GetDateAsTotalDays, PlayerMessageItem.GetDate.GetDateAsTotalDays)] days ago."
                                                      using = wide
                                                      autoresize = yes
                                                  }

                                                  text_multi = {
                                                      layoutpolicy_horizontal = expanding
                                                      visible = "[Not(StringIsEmpty(PlayerMessageItem.GetDescription))]"

                                                      raw_text = "[PlayerMessageItem.GetDescription]."
                                                      using = wide
                                                      autoresize = yes
                                                  }

                                                  vbox = {
                                                      layoutpolicy_horizontal = expanding

                                                      button_text = {
                                                          layoutpolicy_horizontal = expanding
                                                          datacontext = "[PlayerMessageItem.GetLeftArtifact]"
                                                          onclick = "[Toggle('show_feed')]"
                                                          visible = "[Artifact.IsValid]"
                                                          blockoverride "text" {
                                                              raw_text = "Select [Artifact.GetNameNoTooltip]."
                                                          }
                                                          onclick = "[ToggleGameViewData('artifact_details', Artifact.Self)]"
                                                      }

                                                      button_text = {
                                                          layoutpolicy_horizontal = expanding
                                                          datacontext = "[PlayerMessageItem.GetRightArtifact]"
                                                          onclick = "[Toggle('show_feed')]"
                                                          visible = "[Artifact.IsValid]"
                                                          blockoverride "text" {
                                                              raw_text = "Select [Artifact.GetNameNoTooltip]."
                                                          }
                                                          onclick = "[ToggleGameViewData('artifact_details', Artifact.Self)]"
                                                      }

                                                      button_text = {
                                                          layoutpolicy_horizontal = expanding
                                                          blockoverride "text" {
                                                              raw_text = "Select [PlayerMessageItem.GetLeftCharacter.GetFirstNameNoTooltip]."
                                                          }
                                                          using = char_click
                                                          onclick = "[GetVariableSystem.Toggle('show_feed')]"
                                                          datacontext = "[PlayerMessageItem.GetLeftCharacter]"
                                                          visible = "[And(Character.IsValid, Not(Character.IsLocalPlayer))]"
                                                      }

                                                      button_text = {
                                                          layoutpolicy_horizontal = expanding
                                                          blockoverride "text" {
                                                              raw_text = "Select [PlayerMessageItem.GetRightCharacter.GetFirstNameNoTooltip]."
                                                          }
                                                          using = char_click
                                                          onclick = "[GetVariableSystem.Toggle('show_feed')]"
                                                          datacontext = "[PlayerMessageItem.GetRightCharacter]"
                                                          visible = "[Character.IsValid]"
                                                      }

                                                      button_text = {
                                                          layoutpolicy_horizontal = expanding
                                                          datacontext = "[PlayerMessageItem.GetLeftTitle]"
                                                          datacontext = "[PlayerMessageItem.GetLeftTitle.GetProvince]"
                                                          blockoverride "text" {
                                                              raw_text = "Go to [PlayerMessageItem.GetLeftTitle.GetNameNoTierNoTooltip]."
                                                          }
                                                          using = prov_click
                                                          onclick = "[GetVariableSystem.Toggle('show_feed')]"
                                                          visible = "[And(Title.IsValid, LessThan_int32(Title.GetTierFrame, '(int32)4'))]"
                                                      }

                                                      button_text = {
                                                          layoutpolicy_horizontal = expanding
                                                          datacontext = "[PlayerMessageItem.GetLeftTitle]"
                                                          blockoverride "text" {
                                                              raw_text = "Select title of [PlayerMessageItem.GetLeftTitle.GetNameNoTierNoTooltip]."
                                                          }
                                                          using = title_click
                                                          onclick = "[GetVariableSystem.Toggle('show_feed')]"
                                                          visible = "[And(Title.IsValid, GreaterThanOrEqualTo_int32(Title.GetTierFrame, '(int32)4'))]"
                                                      }

                                                      button_text = {
                                                        layoutpolicy_horizontal = expanding
                                                          datacontext = "[PlayerMessageItem.GetRightTitle]"
                                                          blockoverride "text" {
                                                              raw_text = "Select [PlayerMessageItem.GetRightTitle.GetNameNoTooltip]."
                                                          }
                                                          using = title_click
                                                          onclick = "[GetVariableSystem.Toggle('show_feed')]"
                                                          visible = "[And(Title.IsValid, GreaterThanOrEqualTo_int32(Title.GetTierFrame, '(int32)4'))]"
                                                      }

                                                      button_text = {
                                                          layoutpolicy_horizontal = expanding
                                                          datacontext = "[PlayerMessageItem.GetRightTitle]"
                                                          blockoverride "text" {
                                                              raw_text = "Go to [PlayerMessageItem.GetRightTitle.GetNameNoTooltip]."
                                                          }
                                                          using = prov_click
                                                          onclick = "[GetVariableSystem.Toggle('show_feed')]"
                                                          visible = "[And(Title.IsValid, LessThan_int32(Title.GetTierFrame, '(int32)4'))]"
                                                      }

                                                      hbox = {
                                                          visible = no

                                                          portrait_head_small = {
                                                              name = "portrait_left"
                                                              datacontext = "[PlayerMessageItem.GetLeftCharacter]"
                                                              visible = "[Character.IsValid]"
                                                          }

                                                          coa_title_medium = {
                                                              name = "title_left"
                                                              datacontext = "[PlayerMessageItem.GetLeftTitle]"
                                                              visible = "[Title.IsValid]"
                                                          }

                                                          icon_artifact = {
                                                              name = "artifact_left"
                                                              datacontext = "[PlayerMessageItem.GetLeftArtifact]"
                                                              visible = "[Artifact.IsValid]"
                                                          }

                                                          portrait_head_small = {
                                                              name = "portrait_right"
                                                              datacontext = "[PlayerMessageItem.GetRightCharacter]"
                                                              visible = "[Character.IsValid]"
                                                          }

                                                          coa_title_medium = {
                                                              name = "title_right"
                                                              datacontext = "[PlayerMessageItem.GetRightTitle]"
                                                              visible = "[Title.IsValid]"
                                                          }

                                                          icon_artifact = {
                                                              name = "artifact_right"
                                                              datacontext = "[PlayerMessageItem.GetRightArtifact]"
                                                              visible = "[Artifact.IsValid]"
                                                          }
                                                      }

                                                      expand = { }
                                                  }
                                              }
                                          }
                                      }
                                  }

                                  expand = { }

                              }
                          }
                      }

                      button_text = {
                          visible = "[And(Not(IsDataModelEmpty(MessageFeedHandler.GetItems)), Not(Show('feed_auto_close')))]"
                          layoutpolicy_horizontal = expanding
                          # visible = "[Not(IsDataModelEmpty(MessageFeedHandler.GetItems))]"
                          blockoverride "text" {
                              raw_text = "Dismiss all, Shift D."
                              align = left
                          }
                          onclick = "[MessageFeedHandler.MarkAllForDelete]"
                          onclick = "[PdxGuiTriggerAllAnimations('close_feed')]"
                          shortcut = mapmode_house_secondary
                      }

                      button_text = {
                          layoutpolicy_horizontal = expanding
                          visible = "[And(Not(IsDataModelEmpty(MessageFeedHandler.GetItems)), Show('feed_auto_close'))]"
                          blockoverride "text" {
                              raw_text = "Dismiss all, Shift D."
                              align = left
                          }
                          onclick = "[MessageFeedHandler.MarkAllForDelete]"
                          # onclick = "[PdxGuiTriggerAllAnimations('close_feed')]"
                          shortcut = mapmode_house_secondary
                      }

                      button_checked_text = {
                          layoutpolicy_horizontal = expanding
                          shortcut = increase_speed_2
                          visible = "[GetPlayer.IsValid]" # just in case
                          blockoverride "visible" {
                              visible = "[Not(Show('feed_auto_close'))]"
                          }
                          blockoverride "text" {
                              raw_text = "reopen full view after dismissing, X."
                          }
                          onclick = "[Click('feed_auto_close')]"
                      }
                  }

                  state = {
                      name = "close_feed"
                      delay = 0.2
                      on_finish = "[Clear('show_feed')]"
                  }

                  button_text = {
                      layoutpolicy_horizontal = expanding
                      shortcut = close_window
                      shortcut = go_back_2
                      # visible = "[Not(GetVariableSystem.Exists('show_feed'))]"
                      onclick = "[GetVariableSystem.Toggle('show_feed')]"
                      blockoverride "text" {
                          raw_text = "Hide, backspace Or Escape."
                      }
                  }

                  expand = { }
              }
          }

          widget = {
              parentanchor = right
              size = { 650 200 }
              alwaystransparent = yes
              visible = "[And(DataModelHasItems(MessageFeedHandler.GetItems), Isnt('show_feed'))]"
              # visible = "[Isnt('show_feed')]"
              position = { 0 75 }

              flowcontainer = {
                  background = { using = Background_Area_Border_Solid }
                  margin = { 5 0 }
                  margin_bottom = 5
                  direction = vertical

                  button_text = {
                      shortcut = go_back_2
                      onclick = "[Toggle('show_feed')]"
                      blockoverride "extra" {
                          text_single = {
                              raw_text = "[GetDataModelSize(MessageFeedHandler.GetItems)]"
                          }

                          text_single = {
                              raw_text = "Update[AddTextIf( GreaterThan_int32(GetDataModelSize(MessageFeedHandler.GetItems), '(int32)1'), 's' )],"
                          }

                          text_single = {
                              raw_text = "Backspace."
                          }
                      }
                  }

                  # button = {
                  #     onclick = "[MessageFeedHandler.MarkAllForDelete]"
                  #     shortcut = mapmode_house_secondary
                  # }


                  text_single = {
                      visible = "[GreaterThan_int32(GetDataModelSize(MessageFeedHandler.GetItems), '(int32)3')]"
                      raw_text = "3 Most recent:"
                  }

                  flowcontainer = {
                      ignoreinvisible = yes
                      direction = vertical
                      bottomtotop = yes

                      datamodel = "[DataModelLast(MessageFeedHandler.GetItems, Min_int32('(int32)3', GetDataModelSize(MessageFeedHandler.GetItems)))]"

                      item = {
                          text_single = {
                              state = {
                                  name = "mark_to_delete"
                                  trigger_when = "[FeedMessageItem.IsSetToDelete]"
                                  on_finish = "[FeedMessageItem.StartAnimation]"
                                  on_finish = "[FeedMessageItem.EndAnimation]"
                                  on_finish = "[FeedMessageItem.Delete]"
                              }
                              datacontext = "[FeedMessageItem.GetPlayerMessageItem]"
                              raw_text = "[PlayerMessageItem.GetTitle]."
                              max_width = 650
                              margin_right = 15
                              fontsize_min = 14
                          }
                      }
                  }

                  # button_text = {
                  #     visible = "[Not(IsDataModelEmpty(MessageFeedHandler.GetItems))]"
                  #     blockoverride "text" {
                  #         raw_text = "Dismiss all, Shift D."
                  #     }
                  #     onclick = "[MessageFeedHandler.MarkAllForDelete]"
                  #     onclick = "[PdxGuiTriggerAllAnimations('close_feed')]"
                  #     shortcut = mapmode_house_secondary
                  # }
              }
          }

          container = {
              parentanchor = bottom|right
              # visible = "[Isnt('show_feed')]"
              visible = no
              position = { -120 -3 }
              flowcontainer = {
                  visible = "[DataModelHasItems(MessageFeedHandler.GetItems)]]"
                  background = { using = Background_Area_Dark }
                  spacing = 3

                  flowcontainer = {
                      spacing = 3
                      ignoreinvisible = yes

                      text_single = {
                          raw_text = "[GetDataModelSize(MessageFeedHandler.GetItems)]"
                      }

                      text_single = {
                          raw_text = "Update[AddTextIf( GreaterThan_int32(GetDataModelSize(MessageFeedHandler.GetItems), '(int32)1'), 's' )],"
                      }
                  }

                  text_single = {
                      raw_text = "Backspace."
                  }
              }
          }
        }
        empty_screen = {
          using = vanilla
          notifications_message_feed = {
            position = { -10 -135 }
          }
        }
    }


    # only changing text color
    type notifications_toasts_default = widget {
        # name = "toast_container_widget"
        # visible = "[And( Not(IsGameViewOpen('barbershop')), And( ToastMessageHandler.HasMessage, Not(SinglePlayerShowingPausedSuccession) ) )]"
        visible_at_creation = no
        allow_outside = yes

        state = {
            name = _show
            on_start = "[PdxGuiWidget.AccessChild('toast_icon').TriggerAnimation('show')]"
            on_start = "[PdxGuiWidget.AccessChild('toast_paper').TriggerAnimation('show')]"
            on_start = "[PdxGuiWidget.AccessChild('toast_content').TriggerAnimation('show')]"
        }

        state = {
            name = _hide
            duration = 1
            on_start = "[PdxGuiWidget.AccessChild('toast_icon').TriggerAnimation('hide')]"
            on_start = "[PdxGuiWidget.AccessChild('toast_paper').TriggerAnimation('hide')]"
            on_start = "[PdxGuiWidget.AccessChild('toast_content').TriggerAnimation('hide')]"
        }

        ### SHIELD ###
        widget = {
            name = "toast_icon"
            visible = "[Not(SinglePlayerShowingPausedSuccession)]"
            datacontext = "[ToastMessageHandler.GetMessage]"

            size = { 160 160 }
            parentanchor = center

            state = {
                name = show
                next = a
                duration = 0.15

                animation = {
                    scale = 1.6
                    bezier = { 0.7 0 0.7 1 }
                }

                animation = {
                    alpha = 1
                    bezier = { 0 0 0.4 1 }
                }
            }

            state = {
                name = a
                next = b

                duration = 0.15
                scale = 0.95
                bezier = { 0.3 0 0.7 1 }
            }

            state = {
                name = b

                duration = 0.075
                scale = 1
                bezier = { 0.6 0 0.7 1 }
            }

            state = {
                name = hide
                using = Animation_FadeOut_Quick
                scale = 0.5
            }

            state = {
                name = _hide
                using = Animation_FadeOut_Quick
            }

            icon = {
                visible = "[PlayerMessageItem.GetType.IsGood]"
                texture = "gfx/interface/hud/toast_bg_good.dds"
                parentanchor = center
                size = { 160 160 }
            }

            icon = {
                visible = "[PlayerMessageItem.GetType.IsNeutral]"
                texture = "gfx/interface/hud/toast_bg_neutral.dds"
                parentanchor = center
                size = { 160 160 }
            }

            icon = {
                visible = "[PlayerMessageItem.GetType.IsBad]"
                texture = "gfx/interface/hud/toast_bg_bad.dds"
                parentanchor = center
                size = { 160 160 }
            }
        }

        ### PAPER ###
        widget = {
            name = "toast_paper"
            visible = "[Not(SinglePlayerShowingPausedSuccession)]"
            size = { 100% 100% }

            widgetanchor = center
            parentanchor = center
            alwaystransparent = yes

            button = {
                size = { 100% 100% }
                onmousehierarchyenter = "[ToastMessageHandler.StartDelayingMessage]"
                onmousehierarchyleave = "[ToastMessageHandler.StopDelayingMessage]"
                onrightclick = "[ToastMessageHandler.DismissMessage]"
                button_ignore = none
            }

            background = {
                texture = "gfx/interface/hud/toast_title_bg.dds"
                spriteType = Corneredstretched
                spriteborder = { 0 10 }
                margin = { 12 0 }
            }

            widget = {
                size = { 24 120 }
                widgetanchor = right|vcenter
                parentanchor = left|vcenter

                background = {
                    layoutpolicy_vertical = expanding
                    texture = "gfx/interface/hud/toast_title_bg_edge.dds"
                    spriteType = Corneredstretched
                    spriteborder = { 5 20 }
                }
            }

            widget = {
                size = { 24 120 }
                widgetanchor = left|vcenter
                parentanchor = right|vcenter

                background = {
                    layoutpolicy_vertical = expanding
                    texture = "gfx/interface/hud/toast_title_bg_edge.dds"
                    spriteType = Corneredstretched
                    spriteborder = { 0 20 }
                    mirror = horizontal
                }
            }

            state = {
                name = show
                next = a
                duration = 0.15

                animation = {
                    alpha = 1
                    bezier = { 0.7 0 0.7 1 }
                }
            }

            state = {
                name = a

                duration = 0.25
                bezier = { 0.3 0 0.7 1 }

                animation = {
                    size = { 585 100 }
                    bezier = { 0.8 0.3 0 1 }
                }

                animation = {
                    alpha = 1
                    bezier = { 0.7 0 0.7 1 }
                }
            }

            state = {
                name = hide
                using = Animation_FadeOut_Quick
                size = { -1 80 }
            }

            state = {
                name = _hide
                using = Animation_FadeOut_Quick
            }
        }

        ### CONTENT ###
        widget = {
            name = "toast_content"
            datacontext = "[ToastMessageHandler.GetMessage]"
            visible = "[Not(SinglePlayerShowingPausedSuccession)]"
            widgetanchor = center
            parentanchor = center
            size = { 560 100 }

            state = {
                name = show
                delay = 0.28
                using = Animation_FadeIn_Standard

                animation = {
                    size = { 560 100 }

                    bezier = { 0.8 0.3 0 1 }
                }

                animation = {
                    alpha = 1
                    bezier = { 0.7 0 0.7 1 }
                }
            }

            state = {
                name = hide
                using = Animation_FadeOut_Quick
                duration = 0.08
            }

            hbox = {
                ignoreinvisible = yes
                background = { using = Background_Area_Dark alpha = 0.65 margin = { 20 -5 } }

                spacer = {
                    size = { 120 90 }
                    visible = "[Not( PlayerMessageItem.HasLeftIcon )]"
                }

                widget_left_toast_icon_contents = {
                    size = { 120 90 }
                }

                vbox = {
                    name = "message"
                    layoutpolicy_horizontal = expanding
                    layoutpolicy_vertical = expanding
                    spacing = 2
                    margin_bottom = 5


                    text_single = {
                        name = "title"
                        layoutpolicy_horizontal = expanding
                        margin = { 5 5 }
                        autoresize = no
                        fontsize_min = 10
                        align = center|nobaseline

                        text = "[PlayerMessageItem.GetTitle]"
                        using = Font_Type_Flavor
                        using = Font_Size_Big

                        # default_format = "#ocr_black"
                        # using = Text_Light_Background_Overrides

                        background = {
                            name = "neutral"
                            visible = "[PlayerMessageItem.GetType.IsNeutral]"
                            using = Toast_Header
                            using = Color_Blue
                        }

                        background = {
                            name = "good"
                            visible = "[PlayerMessageItem.GetType.IsGood]"
                            using = Color_Green
                            using = Toast_Header
                        }

                        background = {
                            name = "bad"
                            visible = "[PlayerMessageItem.GetType.IsBad]"
                            using = Color_Red
                            using = Toast_Header
                        }
                    }

                    text_multi = {
                        name = "desc"
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding
                        margin = { 5 5 }
                        # using = Text_Light_Background_Overrides

                        align = top|hcenter

                        text = "[PlayerMessageItem.GetDescription]"
                        tooltip = "[PlayerMessageItem.GetDescription]"

                        # default_format = "#ocr_black"
                        # format_override = { E ocr_black }
                        fontsize_min = 10
                        alwaystransparent = yes
                    }
                }

                widget_right_toast_icon_contents = {
                    size = { 120 90 }
                }

                spacer = {
                    size = { 120 90 }
                    visible = "[Not( PlayerMessageItem.HasRightIcon )]"
                }
            }

            button_cancel = {
                parentanchor = top|right
                position = { 10 3 }
                onclick = "[ToastMessageHandler.DismissMessage]"
                tooltip = "DISMISS"
                alpha = 0

                blockoverride "master_color_frame" {
                    frame = 3
                }

                blockoverride "button_frames"
                {
                    gfxtype = togglepushbuttongfx

                    upframe = 3
                    uphoverframe = 2
                    uppressedframe = 3
                }

                state = {
                    name = a
                    next = b
                    trigger_on_create = yes
                    alpha = 0
                }

                state = {
                    name = b
                    alpha = 1
                    delay = 3
                    duration = 0.5
                    using = Animation_Curve_Default
                }
            }
        }
    }

    type notifications_toasts_contests = widget {
        name = "toast_background_contest"
        visible = "[Not(SinglePlayerShowingPausedSuccession)]"
        size = { 670 330 }

        widgetanchor = center
        parentanchor = center
        alwaystransparent = yes

        background = {
            texture = "gfx/interface/hud/toast_contest_bg.dds"

            modify_texture = {
                name = "contest_toast_ink_animation"
                visible = yes
                gfxtype = videogfx
                shaderfile = ""
                video = "gfx/interface/video/ink_animation_toasts.bk2"
                loop = no
                blend_mode = alphamultiply
            }
        }

        ### HEADER
        text_single = {
            parentanchor = hcenter|top
            position = { 0 24 }

            text = tournament_contest_reward_toast_title
            using = Font_Type_Flavor
            fontsize = 36

            state = {
                name = a
                next = b
                trigger_on_create = yes
                alpha = 0
                using = Animation_Curve_Default
            }

            state = {
                name = b
                alpha = 1
                delay = 0.7
                duration = 1
                using = Animation_Curve_Default
            }
        }

        ### ARTIFACT REWARD GOES HERE
        icon_artifact = {
            name = "artifact_left"
            datacontext = "[PlayerMessageItem.GetLeftArtifact]"
            visible = "[Artifact.IsValid]"
            parentanchor = center
            position = { 1 -4}
            size = { 70 70 }

            state = {
                name = a
                next = b
                trigger_on_create = yes
                alpha = 0
                using = Animation_Curve_Default
            }

            state = {
                name = b
                alpha = 1
                delay = 1
                duration = 1
                using = Animation_Curve_Default
            }
        }

        icon_artifact = {
            name = "artifact_right"
            datacontext = "[PlayerMessageItem.GetRightArtifact]"
            visible = "[Artifact.IsValid]"
            parentanchor = center
            position = { 1 -4}
            size = { 70 70 }

            state = {
                name = a
                next = b
                trigger_on_create = yes
                alpha = 0
                using = Animation_Curve_Default
            }

            state = {
                name = b
                alpha = 1
                delay = 1
                duration = 1
                using = Animation_Curve_Default
            }
        }

        ### FLAVOR TEXT ON WHAT YOU WON
        text_single = {
            parentanchor = hcenter|bottom
            position = { 0 -77 }
            datacontext = "[PlayerMessageItem.GetLeftArtifact]"
            visible = "[Artifact.IsValid]"

            text = tournament_contest_reward_toast_desc

            state = {
                name = a
                next = b
                trigger_on_create = yes
                alpha = 0
                using = Animation_Curve_Default
            }

            state = {
                name = b
                alpha = 1
                delay = 1.2
                duration = 1
                using = Animation_Curve_Default
            }
        }

        text_single = {
            parentanchor = hcenter|bottom
            position = { 0 -77 }
            datacontext = "[PlayerMessageItem.GetRightArtifact]"
            visible = "[Artifact.IsValid]"

            text = tournament_contest_reward_toast_desc

            state = {
                name = a
                next = b
                trigger_on_create = yes
                alpha = 0
                using = Animation_Curve_Default
            }

            state = {
                name = b
                alpha = 1
                delay = 1.2
                duration = 1
                using = Animation_Curve_Default
            }
        }
    }
}

template message_feed_text
{
    direction = vertical

    container = {

        widget = {
            block "WidgetSize"
            {
                size = { 200 22 }
            }
            name = "header"
        }
    }

    container = {
        text_multi = {
            position = { 12 4 }
            name = "effect"
            autoresize = yes
            block "MaxEffectSize"
            {
                maximumsize = { 200 -1 }
            }
            minimumsize = { -1 -1 }
            align = left
            parentanchor = left
            text = "[PlayerMessageItem.GetTooltip]"
        }
    }
}

template situation_entry_parent_hover_states
{
    state = {
        name = _mouse_hierarchy_enter
        on_start = "[PdxGuiWidget.FindChild('button_dismiss').TriggerAnimation('hover_enter')]"
    }

    state = {
        name = _mouse_hierarchy_leave
        on_start = "[PdxGuiWidget.FindChild('button_dismiss').TriggerAnimation('hover_leave')]"
    }
}

template situation_entry_child_hover_states
{
    name = "button_dismiss"
    alpha = 0

    state = {
        name = hover_enter
        alpha = 1
        duration = 0.05
        using = Animation_Curve_Default
    }

    state = {
        name = hover_leave
        alpha = 0
        duration = 0.2
        using = Animation_Curve_Default
    }
}

types Suggestions
{
    type button_suggestion_item_ocr = button {
        onclick = "[SuggestionItem.OnClick]"
        onclick = "[ActionItemHandler.ToggleList]"
        onrightclick = "[SuggestionItem.Dismiss]"
        button_ignore = none
        tooltip = "[SuggestionItem.GetTooltip]"

        background = {
            using = Status_Suggestion
        }

        background = {
            texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
            spriteType = Corneredtiled
            spriteborder = { 5 5 }
            margin = { -2 -2 }
            alpha = 0.3
        }

        using = situation_entry_parent_hover_states

        hbox = {
            margin = { 10 3 }
            margin_right = 5
            restrictparent_min = yes

            text_single = {
                layoutpolicy_horizontal = expanding
                text = "[SuggestionItem.GetLabel]"
            }

            button_cancel_small = {
                tooltip = "DISMISS_SUGGESTION_TT"
                onclick = "[SuggestionItem.Dismiss]"
                inherit_visual_state = no

                using = situation_entry_child_hover_states
            }
        }
    }

    type button_current_situation_item_ocr = button {
        visible = "[ImportantActionItem.IsVisible]"
        minimumsize = { @sug_width 0 }

        onclick = "[ImportantActionItem.OnClick]"
        onrightclick = "[ImportantActionItem.Dismiss]"
        onclick = "[ActionItemHandler.ToggleList]"
        button_ignore = none
        onmousehierarchyenter = "[ImportantActionItem.MarkAsRead]"

        using = situation_entry_parent_hover_states

        background = {
            visible = "[And(Not(ImportantActionItem.IsUnimportant), ImportantActionItem.GetActionType.IsDangerous)]"
            using = Status_Suggestion_Bad
        }

        background = {
            visible = "[And(Not(ImportantActionItem.IsUnimportant), Not(ImportantActionItem.GetActionType.IsDangerous))]"
            using = Status_Suggestion_Good
        }

        flowcontainer = {
            ignoreinvisible = yes
            resizeparent = yes
            minimumsize = { @sug_width 0 }
            margin_left = 5
            margin_top = 1
            tooltip = "[ImportantActionItem.GetTooltip]"

            text_multi = {
                autoresize = yes
                max_width = @sug_width
                text = "ACTION_IS_VISIBLE_READ_UNREAD"
                alwaystransparent = yes
                # align = left
            }

            # text_single = {
            #     tooltip = "[ImportantActionItem.GetTooltip]"
            #     raw_text = " Tooltip."
            #     margin_top = -3
            # }
        }
    }

    type button_current_situation_item_multiple_ocr = button {
        onclick = "[GuiActionItem.OnClick]"
        onrightclick = "[GuiActionItem.Dismiss]"
        button_ignore = none
        onmousehierarchyenter = "[GuiActionItem.MarkAsRead]"

        background = {
            visible = "[And(Not(GuiActionItem.IsUnimportant), GuiActionItem.HasAnyActionIsDangerous)]"
            using = Status_Suggestion_Bad
        }

        background = {
            visible = "[And(Not(GuiActionItem.IsUnimportant), Not(GuiActionItem.HasAnyActionIsDangerous))]"
            using = Status_Suggestion_Good
        }

        flowcontainer = {
            minimumsize = { @sug_width 0 }
            margin_left = 5
            margin_top = 1
            resizeparent = yes
            ignoreinvisible = yes
            tooltip = "[GuiActionItem.GetCombinedTooltip]"


            text_single = {
                margin_right = 0
                raw_text = "[AddTextIf(GuiActionItem.IsExpanded, 'Expanded,')]"
                align = nobaseline
            }

            text_multi = {
                autoresize = yes
                max_width = @sug_width
                text = "IMPORTANT_ACTION_COMBINED_LABEL"
                alwaystransparent = yes
            }

            text_single = {
                raw_text = ", [GuiActionItem.GetNumberOfVisibleItems]."
                alwaystransparent = yes
                align = nobaseline
            }

            # text_single = {
            #     align = nobaseline
            #     raw_text = " Tooltip."
            #     tooltip = "[GuiActionItem.GetCombinedTooltip]"
            # }
        }
    }

    type button_current_situation_item_combined_ocr = button {
        visible = "[ImportantActionItem.IsVisible]"
        onclick = "[ImportantActionItem.OnClick]"
        onclick = "[ActionItemHandler.ToggleList]"
        onrightclick = "[ImportantActionItem.Dismiss]"
        button_ignore = none

        onmousehierarchyenter = "[ImportantActionItem.MarkAsRead]"

        background = {
            visible = "[And(Not(ImportantActionItem.IsUnimportant), ImportantActionItem.GetActionType.IsDangerous)]"
            using = Status_Suggestion_Bad
        }

        background = {
            visible = "[And(Not(ImportantActionItem.IsUnimportant), Not(ImportantActionItem.GetActionType.IsDangerous))]"
            using = Status_Suggestion_Good
        }

        using = situation_entry_parent_hover_states

        flowcontainer = {
            resizeparent = yes
            minimumsize = { @sug_width 0 }

            text_multi = {
                margin_left = 5
                margin_top = 1
                autoresize = yes
                max_width = @sug_width

                align = left
                text = "ACTION_IS_VISIBLE_READ_UNREAD_COMBINED"
                alwaystransparent = yes
            }
            text_single = {
                margin_top = 1
                tooltip = "[ImportantActionItem.GetTooltip]"
                raw_text = " Tooltip."
            }
        }
    }
}

types OCR {
	type date_vanilla = icon {
			texture = "gfx/interface/skinned/hud_bg_gamespeed.dds"
			size = { 649 65 }
			position = { 50 -40 }

			using = Animation_ShowHide_Quick

			widget = {
				parentanchor = bottom|right
				size = { 629 45 }
				allow_outside = yes

				icon = {
					parentanchor = top|right
					position = { 7 -15}
					texture = "gfx/interface/skinned/component_decoration/decoration_arch.dds"
					size = { 30 30 }
				}

				icon = {
					visible = "[IsManuallyPaused]"
					size = { 100% 100% }
					texture = "gfx/interface/skinned/hud_pause_indicator.dds"
					color = { 0.4 0.25 0.25 0.7 }

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						using = Animation_FadeOut_Standard
					}
				}

				icon = {
					visible = "[IsPausedByEvent]"
					size = { 100% 100% }
					texture = "gfx/interface/skinned/hud_pause_indicator.dds"
					color = { 0.3 0.3 0.3 0.7 }

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						using = Animation_FadeOut_Standard
					}
				}

				hotkeys_HUD = {}

				### Extra Buttons
				flowcontainer = {
					name = "extra_buttons_menu"
					visible = "[And( Not( IsPauseMenuShown ), GetVariableSystem.Exists( 'extra_buttons_expand' ))]"
					visible_at_creation = no
					parentanchor = bottom|right
					widgetanchor = bottom|hcenter
					position = { -570 -20 }
					alwaystransparent = no
					margin = { 40 40 }
					direction = vertical
					spacing = 3
					ignoreinvisible = yes
					allow_outside = yes

					background = {
						using = Background_Area_Dark
						margin = { -25 -25 }
					}

					state = {
						name = _show
						using = Animation_FadeIn_Quick

						position_y = -20
					}

					state = {
						name = _hide

						using = Animation_FadeOut_Quick
						position_y = 60
					}

					state = {
						name = _mouse_hierarchy_leave
						on_finish = "[GetVariableSystem.Clear( 'extra_buttons_expand' )]"
					}

					button_standard = {
						name = "find_character_button"
						text = "FIND_CHARACTER"
						onclick = "[ToggleGameView( 'character_finder' )]"
						onclick = "[GetVariableSystem.Toggle( 'extra_buttons_expand' )]"
						tooltip = "IM_TT_FIND_CHARACTER"
						shortcut = "character_finder"
					}

					button_standard = {
						name = "find_title_button"

						onclick = "[ToggleGameView( 'find_title' )]"
						onclick = "[GetVariableSystem.Toggle( 'extra_buttons_expand' )]"

						down = "[IsGameViewOpen('find_title')]"
						shortcut = "find_title_shortcut"

						text = "FIND_TITLE"
						tooltip = "IM_TT_FIND_TITLE"
					}

          button_standard = {
            name = "plagues_button"

            onclick = "[ToggleGameView( 'epidemics' )]"
            onclick = "[GetVariableSystem.Toggle( 'extra_buttons_expand' )]"

            down = "[IsGameViewOpen('epidemics')]"
            shortcut = "explore_plagues"

            text = "EXPLORE_PLAGUES"
            tooltip = "EXPLORE_PLAGUES_TT"
          }

					button_standard = {
						name = "legacy_button"
						text = "SHOW_LEGACY"
						onclick = "[ToggleGameViewData( 'lineage_view', GetPlayer.GetID )]"
						down = "[IsGameViewOpen('succession_event')]"
						onclick = "[GetVariableSystem.Toggle( 'extra_buttons_expand' )]"
						tooltip = "IM_TT_SHOW_LEGACY"
					}

					button_standard = {
						name = "go_to_capital_button"
						text = "GO_TO_CAPITAL"
						onclick = "[OnGoToPlayerCapital]"
						onclick = "[GetVariableSystem.Toggle( 'extra_buttons_expand' )]"
						shortcut = "go_to_capital"
						tooltip = "IM_TT_GO_TO_CAPITAL"
						visible = "[GetPlayer.IsValid]"
					}
				}

				hbox = {
					margin_left = 35
					allow_outside = yes

					hbox = {
						margin_top = 12
						spacing = 3

						button_dots = {
							name = "button_hud_extra_buttons"
							onclick = "[GetVariableSystem.Toggle( 'extra_buttons_expand' )]"
							tooltip = MORE_POPOUT_TT
							using = tooltip_ne
						}

						button_menu = {
							name = "pause_menu_button"
							onclick = "[OnPauseMenu]"
							tooltip = INGAME_MENU_TT
							using = tooltip_ne

							tooltipwidget = {
								using = TooltipWithFakeShortcut
								blockoverride "shortcut_text"
								{
									text = FAKE_ESCAPE
								}
							}
						}

						button_encyclopedia_small = {
							name = "encyclopedia_button_extended_menu"
							tooltip = "OPEN_ENCYCLOPEDIA"
							onclick = "[ToggleEncyclopedia]"
							shortcut = "encyclopedia"
							using = tooltip_ne
						}
					}

					hbox = {
						name = "tutorial_highlight_bottom_right_bar"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin_right = 5
						margin_left = 15
						margin_top = 12
						allow_outside = yes

						## Date
						button_standard_hover = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
              name = "play_pause_button_tutorial_uses_this"

							onclick = "[OnPause]"

							tooltip = "CURRENT_DATE_TOOLTIP"
							using = tooltip_nw
							tooltip_offset = { 0 10 }

							margin_widget = {
								visible = "[Not(Or(IsPausedByEvent, IsManuallyPaused))]"
								size = { 100% 100% }

								state = {
									name = _show
									using = Animation_FadeIn_Quick
								}

								state = {
									name = _hide
									using = Animation_FadeOut_Standard
								}

								Animation_HUD_daily_tick = {
									visible = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)1')]"
									size = { 100% 100% }

									blockoverride "duration"
									{
										duration = 30
									}

									blockoverride "alpha"
									{
										alpha = 0.3
									}
								}

								Animation_HUD_daily_tick = {
									visible = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)2')]"
									size = { 100% 100% }

									blockoverride "duration"
									{
										duration = 15
									}

									blockoverride "alpha"
									{
										alpha = 0.25
									}
								}

								Animation_HUD_daily_tick = {
									visible = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)3')]"
									size = { 100% 100% }

									blockoverride "duration"
									{
										duration = 7.5
									}

									blockoverride "alpha"
									{
										alpha = 0.2
									}
								}

								Animation_HUD_daily_tick = {
									visible = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)4')]"
									size = { 100% 100% }

									blockoverride "duration"
									{
										duration = 3.75
									}

									blockoverride "alpha"
									{
										alpha = 0.15
									}
								}

								Animation_HUD_daily_tick = {
									visible = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)5')]"
									size = { 100% 100% }

									blockoverride "duration"
									{
										duration = 1.9
									}

									blockoverride "alpha"
									{
										alpha = 0.15
									}
								}
							}

							hbox = {
								margin = { 5 0 }
								margin_bottom = 2

								hbox = {
									layoutpolicy_horizontal = expanding
									margin_top = 2
									margin_right = 2

									expand = {}

									text_single = {
										name = "date_text_sp"
										visible = "[Not(GameHasMultiplePlayers)]"
										layoutpolicy_horizontal = expanding

										text = "CURRENT_DATE"
										default_format = "#date"
										autoresize = no
										align = right|nobaseline
										using = Font_Size_Medium
									}

									text_single = {
										name = "date_text_mp"
										visible = "[GameHasMultiplePlayers]"
										layoutpolicy_horizontal = expanding

										text = "CURRENT_DATE"
										default_format = "#medium;glow_color:{0.1,0.1,0.1,1}"
										autoresize = no
										align = right|nobaseline
										using = Font_Size_Medium
									}
								}

								container = {
									name = "pause_play_icons"

									button_pause = {
										visible = "[Not(Or(IsPausedByEvent, IsManuallyPaused))]"
										alwaystransparent = yes
										parentanchor = center
									}

									button_play = {
										visible = "[Or(IsPausedByEvent, IsManuallyPaused)]"
										alwaystransparent = yes
										parentanchor = center
									}
								}
							}
						}

						button_normal = {
							shortcut = "decrease_speed"
							shortcut = "decrease_speed_2"
							shortcut = "decrease_speed_3"
							onclick = "[OnDecreaseGameSpeed]"
						}

						button_normal = {
							shortcut = "increase_speed"
							shortcut = "increase_speed_2"
							shortcut = "increase_speed_3"
							onclick = "[OnIncreaseGameSpeed]"
						}

						hbox = {
							layoutpolicy_vertical = expanding
							margin = { 0 -4 }
							allow_outside = yes

							icon = {
								name = "speed_indicator"
								layoutpolicy_vertical = expanding
								size = { 170 0 }
								framesize = { 200 28 }
								texture = "gfx/interface/hud/speed_indicator.dds"
								frame = "[GetCurrentGameSpeed]"
								tooltip = "CURRENT_SPEED_TOOLTIP"
								tooltip_offset = { 0 -170 }
								alpha = 0.8

								modify_texture = {
									visible = "[IsPausedByEvent]"
									texture = "gfx/interface/hud/speed_indicator_auto_pause.dds"
									spritetype = corneredtiled
									blend_mode = darken
									texture_density = 2
								}

								modify_texture = {
									visible = "[And(IsManuallyPaused, Not(IsPausedByEvent))]"
									texture = "gfx/interface/hud/speed_indicator_pause.dds"
									spritetype = corneredtiled
									blend_mode = darken
									texture_density = 2
								}

								modify_texture = {
									visible = "[Not(Or(IsPausedByEvent, IsManuallyPaused))]"
									texture = "gfx/interface/hud/speed_indicator_play.dds"
									spritetype = corneredtiled
									blend_mode = darken
									texture_density = 2
								}

								button = {
									visible = "[Not( GameHasMultiplePlayers )]"
									onclick = "[OnPause]"
									shortcut = "pause"
								}

								icon = {
									parentanchor = right|vcenter
									position = { 10 0 }
									size = { 15 90%}
									texture = "gfx/interface/skinned/overlay_stone.dds"
									color = { 0.32 0.32 0.32 1 }
								}

								icon = {
									size = { 100% 100% }
									texture = "gfx/interface/skinned/speed_indicator_frame.dds"
								}

								hbox = {
									margin_left = 6
									margin_right = 6

									button = {
										name = "speed_1"
										shortcut = "speed_1"
										layoutpolicy_horizontal = shrinking
										layoutpolicy_vertical = expanding
										size = { 34 18 }

										alwaystransparent = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)1')]"
										onclick = "[SetGameSpeed('(int32)0')]"
										tooltip = "CHANGE_SPEED_TOOLTIP_1"
										using = tooltip_ne

										alpha = 0

										state = {
											name = _mouse_enter
											alpha = 1
											duration = 0.1
											using = Animation_Curve_Default
										}

										state = {
											name = _mouse_leave
											alpha = 0
											duration = 0.1
											using = Animation_Curve_Default
										}

										margin_widget = {
											size = { 100% 100% }
											margin = { 0 8 }

											icon = {
												size = { 100% 100% }
												texture = "gfx/interface/hud/speed_indicator_mouseover.dds"
											}
										}
									}

									button = {
										name = "speed_2"
										shortcut = "speed_2"
										layoutpolicy_horizontal = shrinking
										layoutpolicy_vertical = expanding
										size = { 34 18 }

										alwaystransparent = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)2')]"
										onclick = "[SetGameSpeed('(int32)1')]"
										tooltip = "CHANGE_SPEED_TOOLTIP_2"
										using = tooltip_ne

										alpha = 0

										state = {
											name = _mouse_enter
											alpha = 1
											duration = 0.1
											using = Animation_Curve_Default
										}

										state = {
											name = _mouse_leave
											alpha = 0
											duration = 0.1
											using = Animation_Curve_Default
										}

										margin_widget = {
											size = { 100% 100% }
											margin = { 0 8 }

											icon = {
												size = { 100% 100% }
												texture = "gfx/interface/hud/speed_indicator_mouseover.dds"
											}
										}
									}

									button = {
										name = "speed_3"
										shortcut = "speed_3"
										layoutpolicy_horizontal = shrinking
										layoutpolicy_vertical = expanding
										size = { 34 18 }

										alwaystransparent = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)3')]"
										onclick = "[SetGameSpeed('(int32)2')]"
										tooltip = "CHANGE_SPEED_TOOLTIP_3"
										using = tooltip_ne

										alpha = 0

										state = {
											name = _mouse_enter
											alpha = 1
											duration = 0.1
											using = Animation_Curve_Default
										}

										state = {
											name = _mouse_leave
											alpha = 0
											duration = 0.1
											using = Animation_Curve_Default
										}

										margin_widget = {
											size = { 100% 100% }
											margin = { 0 8 }

											icon = {
												size = { 100% 100% }
												texture = "gfx/interface/hud/speed_indicator_mouseover.dds"
											}
										}
									}

									button = {
										name = "speed_4"
										shortcut = "speed_4"
										layoutpolicy_horizontal = shrinking
										layoutpolicy_vertical = expanding
										size = { 34 18 }

										alwaystransparent = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)4')]"
										onclick = "[SetGameSpeed('(int32)3')]"
										tooltip = "CHANGE_SPEED_TOOLTIP_4"
										using = tooltip_ne

										alpha = 0

										state = {
											name = _mouse_enter
											alpha = 1
											duration = 0.1
											using = Animation_Curve_Default
										}

										state = {
											name = _mouse_leave
											alpha = 0
											duration = 0.1
											using = Animation_Curve_Default
										}

										margin_widget = {
											size = { 100% 100% }
											margin = { 0 8 }

											icon = {
												size = { 100% 100% }
												texture = "gfx/interface/hud/speed_indicator_mouseover.dds"
											}
										}
									}

									button = {
										name = "speed_5"
										shortcut = "speed_5"
										layoutpolicy_horizontal = shrinking
										layoutpolicy_vertical = expanding
										size = { 34 18 }

										alwaystransparent = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)5')]"
										onclick = "[SetGameSpeed('(int32)4')]"
										tooltip = "CHANGE_SPEED_TOOLTIP_5"
										using = tooltip_ne

										alpha = 0

										state = {
											name = _mouse_enter
											alpha = 1
											duration = 0.1
											using = Animation_Curve_Default
										}

										state = {
											name = _mouse_leave
											alpha = 0
											duration = 0.1
											using = Animation_Curve_Default
										}

										margin_widget = {
											size = { 100% 100% }
											margin = { 0 8 }

											icon = {
												size = { 100% 100% }
												texture = "gfx/interface/hud/speed_indicator_mouseover.dds"
											}
										}
									}
								}
							}
						}
					}

					# Just the hotkeys for increase/decrease speed
					container = {
						name = "speed_hotkeys"

						button = {
							name = "increase_speed"
							size = { 0 0 }

							shortcut = "increase_speed"
							shortcut = "increase_speed_2"
							shortcut = "increase_speed_3"
							onclick = "[OnIncreaseGameSpeed]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_increment"
						}

						button = {
							name = "decrease_speed"
							size = { 0 0 }

							shortcut = "decrease_speed"
							shortcut = "decrease_speed_2"
							shortcut = "decrease_speed_3"
							onclick = "[OnDecreaseGameSpeed]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
						}
					}

					widget_gamespeed_sounds = {}
				}
			}
		}

	type hotkeys_HUD_ocr = widget {

    container = {
      using = ocr

      button = {
        name = "plagues_shortcut"
        onclick = "[ToggleGameView( 'epidemics' )]"
        onclick = "[GetVariableSystem.Clear( 'extra_buttons_expand' )]"
        shortcut = "explore_plagues"
      }

      button = {
        name = "legends_shortcut"
        onclick = "[ToggleGameView( 'legends' )]"
        onclick = "[GetVariableSystem.Clear( 'extra_buttons_expand' )]"
        visible = "[HasDlcFeature( 'legends' )]"
        shortcut = "explore_legends"
      }

  		button = {
  			shortcut = map_mode_5
  			visible = "[GetPlayer.HasRoyalCourt]"
  			onclick = "[GetPlayer.OpenRoyalCourtView( 'characters' )]"
  		}

  		button = {
  			onclick = "[ToggleGameViewData( 'inventory', GetPlayer.GetID )]"
  			shortcut = "mapmode_kingdoms_secondary"
  			visible = "[Not(IsGameViewOpen('character'))]"
  		}

  		button = {
  			onclick = "[ToggleGameView('my_realm')]"
  			shortcut = "my_realm_window"
  			onclick = "[CloseGameView('character')]"
  		}
  		button = {
  			onclick = "[ToggleGameViewData('military', GetPlayer.GetID)]"
  			shortcut = "military_window"
  		}
  		button = {
  			onclick = "[ToggleGameViewData('council_window', GetPlayer.GetID)]"
  			shortcut = "council_window"
  		}
  		button = {
  			onclick = "[ToggleGameViewData( 'court_window', GetPlayer.GetID )]"
  			shortcut = "court_window"
  		}
  		button = {
  			onclick = "[ToggleGameViewData('intrigue_window', GetPlayer.GetID)]"
  			shortcut = "intrigue_window"
  		}
  		button = {
  			onclick = "[ToggleGameView('factions_window')]"
  			shortcut = "factions_window"
  		}
  		button = {
  			onclick = "[ToggleGameView('decisions')]"
  			shortcut = "decision_window"
  		}
  		button = {
  			onclick = "[ToggleGameView('activity_list_window')]"
  			shortcut = "activity_list_window"
  		}
      container = {
        visible = "[GetPlayer.IsValid]"
        ignoreinvisible = yes
    		button = {
    			onclick = "[ToggleGameViewData('manage_tax_slots', GetPlayer.GetID)]"
    			enabled = "[GetPlayer.HasTaxSlots]"
          visible = "[GetScriptedGui('tycv_have_clan_vassals').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
    			shortcut = map_mode_11
    		}
      }

      sorcery_button_shortcut_locr = {}
    }

		container = {
			using = vanilla

			hotkeys_HUD = {}
		}

		button_normal = {
			name = "find_title_shortcut"
			onclick = "[ToggleGameView( 'find_title' )]"
			onclick = "[GetVariableSystem.Clear( 'extra_buttons_expand' )]"
			shortcut = "find_title_shortcut"
		}

		# 0 size button for shortcut to work
		button_normal = {
			name = "find_character_shortcut"
			onclick = "[ToggleGameView( 'character_finder' )]"
			onclick = "[GetVariableSystem.Clear( 'extra_buttons_expand' )]"
			shortcut = "character_finder"
		}

		# 0 size button for shortcut to work
		button_normal = {
			name = "encyclopedia_shortcut"
			onclick = "[ToggleEncyclopedia]"
			onclick = "[GetVariableSystem.Clear( 'extra_buttons_expand' )]"
			shortcut = "encyclopedia"
		}
	}

  type legitimacy_hud_tooltip_ocr = object_tooltip_pop_out
	{
    state = {
      name = _show
      on_finish = "[Clear('legitimacy_effect')]"
    }
		blockoverride "title_text"
		{
			margin = { 0 8 }
      text = "LEGITIMACY_TRACK_TITLE"
		}

		blockoverride "concept_link"
		{
      text = "legitimacy_hud_tt"

		}

		blockoverride "subheading"
		{
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "legitimacy_hud_tt_subheading"
			}
		}

		blockoverride "header_additions"
		{
		}


		blockoverride "main_description"
		{
      legitimacy_tooltip_ocr = {}
		}
	}

  type legitimacy_tooltip_ocr = vbox {
    layoutpolicy_horizontal = expanding
    margin_right = 10

    vbox = {
      layoutpolicy_horizontal = expanding

      hbox = {
        layoutpolicy_horizontal = expanding

        cooltip_paragraph = {
          text = "LEGITIMACY_EFFECTS"
          max_width = 500
        }

        expand = {}
      }
    }

    vbox = {
      visible = "[Character.HasVassals]"
      spacing = 10
      layoutpolicy_horizontal = expanding

      hbox = {
        layoutpolicy_horizontal = expanding

        cooltip_paragraph = {
          visible = "[LessThan_int32( LegitimacyLevel.GetIndex, Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex )]"
          text = "LEGITIMACY_BELOW_AVERAGE_EXPECTATIONS"
        }

        expand = {}
      }

      hbox = {
        layoutpolicy_horizontal = expanding

        cooltip_paragraph = {
          text = "LEGITIMACY_AVERAGE_EXPECTATIONS"
        }

        expand = {}
      }
    }
  }
  type button_epidemics_ocr = button_text
	{
		onclick = "[ToggleGameView( 'epidemics' )]"
    background = { using = Background_Area_Border_Solid }

		tooltipwidget = {
			epidemic_hud_tooltip = {}
		}

    blockoverride "extra" {
      text_single = {
        raw_text = "Black Death has come!"
        visible = "[InGameBottomBar.HasGlobalNotificationEpidemic]"
      }
      # text_single = {
      #   raw_text = "A plague is near! Hotkey P."
      #   # visible = "[Not( InGameBottomBar.HasGlobalNotificationEpidemic )]"
      # }

      text_single = {
        visible = "[DataModelHasItems( InGameBottomBar.GetEpidemicsInRealm )]"
        raw_text = "[GetDataModelSize( InGameBottomBar.GetEpidemicsInRealm )] plagues in your realm!"
      }

      text_single = {
        visible = "[DataModelHasItems( InGameBottomBar.GetEpidemicsBorderingRealm )]"
        raw_text = "[GetDataModelSize( InGameBottomBar.GetEpidemicsBorderingRealm )][AddTextIf(IsDataModelEmpty( InGameBottomBar.GetEpidemicsInRealm ), ' plagues')] nearby,"
      }

      text_single = {
        margin_left = 2
        raw_text = "Hotkey P."
      }
    }
	}
}
