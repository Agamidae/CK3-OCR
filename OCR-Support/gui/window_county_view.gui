######################################################
################### COUNTY VIEW ######################
######################################################

window = {
	name = "holding_view"
	widgetid = "holding_view_id"
	parentanchor = bottom|left
	allow_outside = yes
	movable = no
	layer = windows_layer
	maximumsize = { 650 -1 }
	scissor = yes
	size = { 650 100% }
	datacontext = "[HoldingView.GetHolding]"
	datacontext = "[HoldingView.GetProvince]"
	datacontext = "[HoldingView.GetHolder]"
	datacontext = "[Province.GetCounty]"

	state = {
		name = pan_to_previous_county
		delay = 0.1
		on_start = "[HoldingView.PanToCountyCapital]"
		on_start = "[GetScriptedGui('adjacent_counties').Execute( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).AddScope( 'player', GetPlayer.MakeScope).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"
		on_start = "[GetScriptedGui('county_holding_list').Execute( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).End )]"
		on_start = "[GetScriptedGui('find_closest').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"
	}

	state = {
		name = _show
		on_start = "[HoldingView.PanToCountyCapital]"
		on_start = "[GetVariableSystem.Set( 'county_view_open', 'true' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"
		on_start = "[GetScriptedGui('adjacent_counties').Execute( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).AddScope( 'player', GetPlayer.MakeScope).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"
		on_start = "[DefaultOnCoatOfArmsRightClick(HoldingView.GetProvince.GetCoATitle.GetID)]"
		on_start = "[GetScriptedGui('county_holding_list').Execute( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).End )]"
		on_start = "[GetScriptedGui('find_closest').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"

		# on_start = "[GetScriptedGui('county_controller').Execute( GuiScope.SetRoot( HoldingView.GetProvince.MakeScope ).End )]"

		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
		using = Animation_FadeIn_BottomLeft
	}

	state = {
		name = adjacent_counties
		trigger_on_create = yes
		on_start = "[GetScriptedGui('adjacent_counties').Execute( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).AddScope( 'player', GetPlayer.MakeScope).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"
		on_start = "[GetScriptedGui('county_holding_list').Execute( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).End )]"
		on_start = "[GetScriptedGui('find_closest').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"

	}

	state = {
		name = _hide
		on_start = "[GetVariableSystem.Clear( 'county_view_open' )]"
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"

		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
		using = Animation_FadeOut_BottomLeft
	}

	widget = {
		size = { 0 0 }
		scissor = yes

		buttons_window_control = {
			blockoverride "button_go_to" {
				onclick = "[HoldingView.PanToCountyCapital]"
			}

			blockoverride "button_back" {
				visible = "[HasViewHistory]"
				onclick = "[OpenFromViewHistory]"
				onclick = "[PdxGuiTriggerAllAnimations('pan_to_previous_county')]"
			}
			blockoverride "button_close" {
				onclick = "[HoldingView.Close]"
			}
		}
	}

	vbox = {
		layoutpolicy_vertical = expanding
		name = "window_content"
		using = ocr_margins
		using = ocr
		background = { using = Background_Area_Border_Solid }

		# button_text = {
		# 	layoutpolicy_horizontal = expanding
		# 	datacontext = "[GetPlayer.GetCapitalLocation]"
		# 	blockoverride "text" {
		# 		raw_text = "Capital"
		# 	}
		# 	onclick = "[OpenGameViewData('holding_view', Province.Self )]"
		# }

		error_button = {
			layoutpolicy_horizontal = expanding
		}

		# debug
		# text_single = {
		# 	layoutpolicy_horizontal = expanding
		# 	raw_text = "Barony controller: [HoldingView.GetProvince.GetController.GetNameOrMeNoTooltip]"
		# }
		#
		# text_single = {
		# 	layoutpolicy_horizontal = expanding
		# 	raw_text = "Safe"
		#
		# 	visible = "[GetScriptedGui('safe_county').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"
		# }
		#
		# text_single = {
		# 	layoutpolicy_horizontal = expanding
		# 	raw_text = "Hostile county!"
		# 	visible = "[GetScriptedGui('is_hostile_county').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'target', HoldingView.GetProvince.MakeScope ).End )]"
		# }
		#
		# text_multi = {
		# 	autoresize = yes
		# 	layoutpolicy_horizontal = expanding
		#
		# 	raw_text = "[GetScriptedGui('county_controller_test').BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"
		# }

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_margins" {
				margin_top = 20

			}
			blockoverride "scrollbox_content" {
				#title
				vbox = {
					margin_left = 10
					# margin to avoid tooltips after selecting adjacent counties
					layoutpolicy_horizontal = expanding
					visible = "[Not(GetVariableSystem.Exists('county_tabs'))]"
					# spacing = 5

					## get controller, debug
					# button_text = {
					# 	datacontext = "[GetScriptedGui('county_controller')]"
					# 	onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( HoldingView.GetProvince.MakeScope ).End )]"
					# 	layoutpolicy_horizontal = expanding
					# 	blockoverride "text" {
					# 		raw_text = "Controller: [HoldingView.GetProvince.MakeScope.Var('controller').GetCharacter.GetNameNoTooltip]"
					# 	}
					# }
					vbox = {
						layoutpolicy_horizontal = expanding

						# holding
						hbox = {
							layoutpolicy_horizontal = expanding

							button_text = {
								using = title_click
								datacontext = "[HoldingView.GetHolding.GetProvince.GetTitle]"
								using = county_holding_click
								blockoverride "pre" {

									text_single = {
										raw_text = "Your Capital,"
										visible = "[ObjectsEqual(HoldingView.GetProvince, GetPlayer.GetCapitalLocation)]"
									}
									text_single = {
										raw_text = "Your"
										visible = "[And(HoldingView.GetTitle.GetLesseeOrHolder.IsLocalPlayer, Not( ObjectsEqual( HoldingView.GetProvince, GetPlayer.GetCapitalLocation ) ) )]"
									}
									text_single = {
										raw_text = "Hostle"
										visible = "[GetScriptedGui('is_hostile_barony').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'target', Province.MakeScope ).End )]"
									}
									text_single = {
										visible = "[HoldingView.GetHolding.IsEmpty]"
										raw_text = "[HoldingView.GetProvince.GetTerrain.GetNameNoTooltip] of"
									}
									text_single = {
										visible = "[Not(HoldingView.GetHolding.IsEmpty)]"
										raw_text = "[HoldingView.GetHolding.GetType.GetName] of"
									}
									text_single = {
										raw_text = "[HoldingView.GetHolding.GetNameNoTooltip],"
									}
									text_single = {
										datacontext = "[HoldingView.GetProvince]"
										visible = "[Not(ObjectsEqual(HoldingView.GetProvince, GetPlayer.GetCapitalLocation))]"
										raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)],"
									}
								}
							}

							hbox = {
								# using = agot_character_is_not_ruin
								button_text = {
									datacontext = "[HoldingView.GetTitle]"
									datacontext = "[HoldingView.GetTitle.GetLesseeOrHolder]"
									visible = "[And(And(Not(Character.IsLocalPlayer), Not(HoldingView.GetHolding.IsEmpty)), Not(ObjectsEqual(Character.Self, HoldingView.GetCountyTitle.GetHolder)))]"
									using = char_click
									blockoverride "text" {
										raw_text = "[Select_CString(Title.IsLeasedOut, 'leased by', 'held by')] [Character.GetFirstNameNoTooltip]."
									}
								}
							}


							button_primary_text = {
								blockoverride "text" {
									text = "CREATE_NEW_HOLDING_BUTTON"
								}
								blockoverride "hotkey" {
									visible = "[And(HoldingView.CanNewHoldingBeConstructed, Not(HoldingView.IsSelectingHoldingType))]"
								}
								blockoverride "disabled" {
									visible = "[Not(And(HoldingView.CanNewHoldingBeConstructed, Not(HoldingView.IsSelectingHoldingType)))]"
								}
								visible = "[And(Not(HoldingView.HasHolding), Not(HoldingView.IsBeingConstructed))]"
								onclick = "[HoldingView.OnConstructHoldingClick]"
								tooltip = "[HoldingView.GetHoldingConstructionTooltip]"
								tooltip_enabled = "[And(HoldingView.CanNewHoldingBeConstructed, Not(HoldingView.IsSelectingHoldingType))]"
								enabled = "[And(HoldingView.CanNewHoldingBeConstructed, Not(HoldingView.IsSelectingHoldingType))]"
							}

							expand = { }
						}

						# county
						hbox = {
							layoutpolicy_horizontal = expanding

							button_text = {
								datacontext = "[HoldingView.GetCountyTitle]"
								using = title_click
								blockoverride "pre" {
									spacing = 3
									text_single = {
										raw_text = "In"
									}
									text_single = {
										raw_text = "Your"
										visible = "[And(Title.GetHolder.IsLocalPlayer, Not(HoldingView.GetTitle.GetLesseeOrHolder.IsLocalPlayer) )]"
									}
									text_single = {
										raw_text = "Hostile"
										visible = "[GetScriptedGui('is_hostile_county').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'target', Province.MakeScope ).End )]"
									}
									text_single = {
										raw_text = "capital"
										visible = "[And(ObjectsEqual(HoldingView.GetCountyTitle, GetPlayer.GetCapitalLocation.GetCoATitle), Not( ObjectsEqual( HoldingView.GetProvince, GetPlayer.GetCapitalLocation ) ) )]"
									}
								}
								blockoverride "text" {
									raw_text = "County of [Title.GetNameNoTierNoTooltip],"
								}
							}

							hbox = {
								# using = agot_character_is_not_ruin
								button_text = {
									datacontext = "[HoldingView.GetCountyTitle]"
									datacontext = "[Title.GetHolder]"
									using = char_click
									visible = "[Not(Character.IsLocalPlayer)]"
									blockoverride "pre" {
										spacing = 3
										text_single = {
											visible = "[ObjectsEqual(Character.Self, HoldingView.GetHolding.GetLesseeOrHolder)]"
											raw_text = "both"
										}
									}
									blockoverride "text" {
										raw_text = "held by [Character.GetFirstNameNoTooltip]."
									}
								}
							}


							expand = { }
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							onclick = "[GetVariableSystem.Set('county_tabs', 'tasks')]"
							shortcut = map_mode_2
							datacontext = "[HoldingView.GetCountyTitle]"
							datacontext = "[Title.GetHolder]"
							visible = "[GetScriptedGui('any_task_active').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target_character', Character.MakeScope).AddScope('county', Title.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End )]"
							blockoverride "pre" {
								spacing = 3

								text_single = {
									raw_text = "[GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target_character', Character.MakeScope).AddScope('county', Title.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).ScriptValue('active_tasks')] active"
								}
							}
							blockoverride "text" {
								raw_text = "tasks, hotkey T."
							}
						}
					}

					# claim
					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(ObjectsEqual(HoldingView.GetCountyTitle.GetHolder, GetPlayer))]"

						text_single = {
							margin_left = 5
							datacontext = "[HoldingView.GetCountyTitle]"
							raw_text = "[Title.GetClaimStateFor(GetPlayer)]."
							visible = "[And(NotEqualTo_uint32( Title.GetHolder.GetID, GetPlayer.GetID ), GetPlayer.HasClaimOnTitle( Title.Self ))]"
						}

						expand = { }
					}

					# hostile
					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3
						datacontext = "[HoldingView.GetProvince]"

						# text_single = {
						# 	margin_left = 5
						# 	raw_text = "Friendly"
						# 	visible = "[GetScriptedGui('is_friendly_county').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'target', Province.MakeScope ).End )]"
						# }


						### SIEGE AND RAID GOTO BUTTON ###
						button_group = {
							name = "open_siege_button"
							datacontext = "[HoldingView.GetProvince.GetSiege]"
							visible = "[HoldingView.GetProvince.HasActiveSiege]"
							onclick = "[DefaultOnSiegeClick(Siege.GetID)]"
							tooltip = "[Siege.GetSiegeDescription]"
							using = tooltip_se
							# shortcut = confirm
							shortcut = find_title_shortcut
							using = siege_goto_template
							blockoverride "key" {
								shortcut = find_title_shortcut
							}
							blockoverride "extra" {
								spacing = 3
								text_single = {
									raw_text = "hotkey V."
								}
								text_single = {
									raw_text = "[Siege.GetSiegingRealmCharacter.GetNameNoTooltip]."
								}
							}
						}

						button_group = {
							name = "open_raid_button"
							datacontext = "[HoldingView.GetProvince.GetRaid]"
							visible = "[HoldingView.GetProvince.HasActiveRaid]"
							onclick = "[DefaultOnRaidClick( Raid.Self )]"
							tooltip = "MAP_RAID_TOOLTIP"
							# shortcut = confirm
							shortcut = find_title_shortcut
							using = tooltip_se
							using = raid_goto_template
							blockoverride "tooltip" { }
							blockoverride "key" {
								shortcut = find_title_shortcut
							}
							blockoverride "extra" {
								text_single = {
									raw_text = " hotkey V."
								}
							}
						}

						# text_single = {
						# 	raw_text = "Adjacent to an allied county."
						# 	visible = "[GetScriptedGui('adjacent_to_ally').IsShown( GuiScope.SetRoot( HoldingView.GetProvince.MakeScope ).AddScope( 'me', GetPlayer.MakeScope ).End )]"
						# }

						button_text = {
							visible = "[Province.IsOccupied]"
							datacontext = "[Province.GetController]"
							blockoverride "text" {
								align = left
								raw_text = "Occupied by [Character.GetPrimaryTitle.GetNameNoTierNoTooltip]."
							}
							using = char_click
						}

						expand = { }
					}

					# holder
					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(ObjectsEqual(HoldingView.GetCountyTitle.GetHolder, GetPlayer))]"

						hbox = {
							layoutpolicy_horizontal = expanding

							button_text = {
								using = char_click
								datacontext = "[HoldingView.GetTopLiege]"
								blockoverride "pre" {
									spacing = 3
									text_single = {
										raw_text = "Inside"
									}
									flowcontainer = {
										ignoreinvisible = yes
										visible = "[Not(Character.IsLocalPlayer)]"
										spacing = 3

										text_single = {
											raw_text = "[Character.GetPrimaryTitle.GetNameNoTooltip],"
										}
										text_single = {
											raw_text = "[Character.RealmSize] counties,"
										}
										text_single = {
											raw_text = "[Character.GetMilitaryStrengthText] soldiers."
										}
									}
									flowcontainer = {
										ignoreinvisible = yes
										visible = "[Character.IsLocalPlayer]"

										text_single = {
											raw_text = "your realm."
										}

									}
								}
							}

							expand = { }
						}

						# char_name = {
						# 	layoutpolicy_horizontal = expanding
						# 	datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
						# 	blockoverride "pre" {
						# 		text_single = {
						# 			margin_right = 3
						# 			raw_text = "Holder,"
						# 		}
						# 	}
						#
						# 	blockoverride "extra" {
						# 		# text_single = {
						# 		# 	visible = "[Not(ObjectsEqual(Character.Self, GetPlayer ))]"
						# 		# 	raw_text = " Opinion [Character.GetOpinionOf( GetPlayer )]."
						# 		# }
						# 		flowcontainer = {
						# 		    ignoreinvisible = yes
						#
						# 			visible = "[Not(ObjectsEqual( Character.Self, GetPlayer ))]"
						#
						# 			text_single = {
						# 				visible = "[Character.HasRelationTo( GetPlayer )]"
						# 				raw_text = " [Character.GetRelationToString( GetPlayer )]."
						# 			}
						# 		}
						# 		# flowcontainer = {
						# 		#     ignoreinvisible = yes
						# 		# 	visible = "[Not(ObjectsEqual( Character.GetTopLiege, GetPlayer ))]"
						# 		#
						# 		# 	text_single = {
						# 		# 		visible = "[Character.HasRelationTo( Character.GetTopLiege )]"
						# 		# 		raw_text = " [Character.GetRelationToString( Character.GetTopLiege )]."
						# 		# 	}
						# 		#
						# 		# }
						# 	}
						# }
					}

					# enemies
					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[GetScriptedGui('is_county_not_in_fog').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('this_county', HoldingView.GetCountyTitle.MakeScope).End )]"

						hbox = {
							visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Province.MakeScope).ScriptValue('enemies_in_the_county'), '(CFixedPoint)0' )]"
							layoutpolicy_horizontal = expanding
							spacing = 3

							#TODO hide in the fog

							text_single = {
								visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Province.MakeScope).ScriptValue('enemies_in_the_province'), '(CFixedPoint)0' )]"
								raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Province.MakeScope).ScriptValue('enemies_in_the_province')] enemies here."
							}

							text_single = {
								raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Province.MakeScope).ScriptValue('enemies_in_the_county')] enemies in the county."
								visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Province.MakeScope).ScriptValue('enemies_in_the_county'), GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Province.MakeScope).ScriptValue('enemies_in_the_province'))]"
							}

							expand = { }
						}

						expand = { }
					}

					# allies
					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3
						visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Province.MakeScope).ScriptValue('allies_in_the_county'), '(CFixedPoint)0' )]"

						text_single = {
							visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Province.MakeScope).ScriptValue('allies_in_the_province'), '(CFixedPoint)0' )]"
							raw_text = "[GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('province', Province.MakeScope).ScriptValue('allies_in_the_province')] allies here."
						}

						text_single = {
							visible = "[GreaterThan_CFixedPoint( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Province.MakeScope).ScriptValue('allies_in_the_county'), GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Province.MakeScope).ScriptValue('allies_in_the_province'))]"

							raw_text = "[GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('province', Province.MakeScope).ScriptValue('allies_in_the_county')] allies in the county."
						}

						expand = { }
					}


					# de jure
					hbox = {
						layoutpolicy_horizontal = expanding

						button_text = {
							using = title_click
							datacontext = "[HoldingView.GetCountyTitle.GetDeJureLiege]"
							blockoverride "text" {
								raw_text = "De jure in [Title.GetNameNoTierNoTooltip], [Title.GetDeJureLiege.GetNameNoTierNoTooltip], Page Up."
							}
							shortcut = "zoom_out"
						}

						expand = { }
					}

					# distance
					vbox = {
						layoutpolicy_horizontal = expanding


						# distance
						hbox = {
							margin_left = 5
							layoutpolicy_horizontal = expanding
							spacing = 3

							text_single = {
								raw_text = "Coastal county."
								visible = "[GetScriptedGui('is_coastal_or_river').IsShown( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).End )]"
							}

							text_single = {
								raw_text = "Riverside county."
								visible = "[GetScriptedGui('is_riverside_county').IsShown( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).End )]"
							}

							hbox = {
								visible = "[GetScriptedGui('show_coordinates').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
								text_single = {
									raw_text = "Coordinates: X [HoldingView.GetProvince.MakeScope.Var('pos_x').GetValue|0], Y [HoldingView.GetProvince.MakeScope.Var('pos_y').GetValue|0]."
								}

							}

							expand = { }
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								margin_left = -5
								raw_text = "Your closest county,"
							}
							datacontext = "[HoldingView.GetProvince.MakeScope.Var('closest_county').Title]"
							datacontext = "[HoldingView.GetProvince.MakeScope.Var('closest_county').Title.GetProvince]"
							blockoverride "extra" {
								text_single = {
									raw_text = " [Title.GetNameNoTierNoTooltip], Home."
									visible = "[HoldingView.GetProvince.MakeScope.Var('closest_county').IsSet]"
								}
							}
							using = prov_click
							visible = "[Not(Or(ObjectsEqual( Character.Self, GetPlayer ),Character.IsOtherLiegeOrAbove( GetPlayer )))]"
							shortcut = go_to_capital
						}
					}



					# holding info
					vbox = {
						layoutpolicy_horizontal = expanding
						datacontext = "[HoldingView.GetProvince]"

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "pre" {
								spacing = 3
								text_single = {
									raw_text = "Holding info,"
								}
								text_single = {
									raw_text = "hotkey E"
								}
							}
							onclick = "[GetVariableSystem.Set('county_tabs', 'holding')]"
							shortcut = map_mode_1
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[HoldingView.HasHolding]"

						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3
							visible = "[HoldingView.HasHolding]"
							hbox = {
								spacing = 3
								tooltip = "[Holding.GetTaxTooltip]"

								text_single = {
									visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
									raw_text = "Low"
								}

								text_single = {
									raw_text = "Tax, [Holding.GetIncome|1]."
								}
							}

							hbox = {
								spacing = 3
								tooltip = "[Holding.GetLeviesTooltip]"

								text_single = {
									tooltip = "[Holding.GetTaxTooltip]"
									raw_text = "Levies, [Holding.GetMaxLevySize|0]."
								}
							}


							expand = { }
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							visible = "[Regiment.IsValid]"
							datacontext = "[HoldingView.GetProvince.GetMaaOriginHere]"
							raw_text = "[Regiment.GetNameNoTooltip] stationed here."
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							datacontext = "[HoldingView.GetProvince.GetMaaOriginHere]"
							visible = "[And( ObjectsEqual( HoldingView.GetTitle.GetHolder, GetPlayer ), Regiment.IsValid)]"
						    blockoverride "text" {
						        raw_text = "Click to view."
						    }

							onclick = "[OpenGameView( 'military' )]"
							onclick = "[OpenGameViewData( 'men_at_arms', Regiment.GetID )]"
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[Province.GetTerrain.GetName]."
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3


							# text_single = {
							# 	visible = "[Or(HoldingView.GetGUIDuchyCapitalBuilding.IsBuildNewIconShown, HoldingView.GetGUISpecialBuilding.IsBuildNewIconShown)]"
							# 	raw_text = "plus"
							# }
							# text_single = {
							# 	visible = "[HoldingView.GetGUIDuchyCapitalBuilding.IsBuildNewIconShown]"
							# 	raw_text = "ducal,"
							# }
							# text_single = {
							# 	visible = "[And(HoldingView.GetGUIDuchyCapitalBuilding.IsBuildNewIconShown, HoldingView.GetGUISpecialBuilding.IsBuildingSlotShown)]"
							# 	raw_text = "and"
							# }
							# text_single = {
							# 	visible = "[HoldingView.GetGUISpecialBuilding.IsBuildNewIconShown]"
							# 	raw_text = "special."
							# }

							expand = { }
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							onclick = "[GetVariableSystem.Set('county_tabs', 'holding')]"
							onclick = "[GetVariableSystem.Set('holding_tabs', 'buildings')]"
						    blockoverride "pre" {
								spacing = 3
								text_single = {
									raw_text = "[Province.MakeScope.ScriptValue('free_building_slots_sval')] empty slots,"
								}

								text_single = {
									visible = "[HoldingView.HasHolding]"
									raw_text = "[Province.MakeScope.ScriptValue('num_buildings_sval')] buildings,"
								}

								text_single = {
									visible = "[Or(HoldingView.GetGUIDuchyCapitalBuilding.HasLevel, HoldingView.GetGUISpecialBuilding.HasLevel)]"
									raw_text = "plus"
								}
								text_single = {
									visible = "[HoldingView.GetGUIDuchyCapitalBuilding.HasLevel]"
									raw_text = "ducal,"
								}
								text_single = {
									visible = "[And(HoldingView.GetGUIDuchyCapitalBuilding.HasLevel, HoldingView.GetGUISpecialBuilding.HasLevel)]"
									raw_text = "and"
								}
								text_single = {
									visible = "[HoldingView.GetGUISpecialBuilding.HasLevel]"
									raw_text = "special."
								}
						    }
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "This is a county capital, so its holder controls the county."
							visible = "[HoldingView.GetProvince.GetTitle.IsCountyCapital]"
						}

						button_agot_abandon_ruin = { }

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Make realm capital."
							}
							blockoverride "disabled" {
								visible = "[Not(HoldingView.CanSetRealmCapital)]"
							}
							enabled = "[HoldingView.CanSetRealmCapital]"
							visible = "[HoldingView.PotentialSetRealmCapital]"
							onclick = "[HoldingView.SetRealmCapital]"
							tooltip = "[HoldingView.GetSetRealmCapitalTooltip]"
						}
						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(HoldingView.GetHolding.IsEmpty)]"

							button_text = {
								blockoverride "text" {
									raw_text = "Grant [Select_CString(HoldingView.GetProvince.GetTitle.IsCountyCapital, 'holding and county', 'holding')], hotkey G."
								}
								shortcut = army_merge
								onclick = "[HoldingView.ToggleFindVassalListWindow]"
								visible = "[And( And( ObjectsEqual( HoldingView.GetTitle.GetHolder, GetPlayer ), HoldingView.GetTitle.CanUseFindVassal( GetPlayer ) ), Not(HoldingView.GetTitle.IsLeasedOut))]"
							}

							expand = { }
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set('county_tabs', 'adjacent counties')]"
						shortcut = map_mode_6
						blockoverride "text" {
							raw_text = "[GetDataModelSize(HoldingView.GetCountyTitle.MakeScope.GetList('adjacent_counties'))] Adjacent counties, Control A."
						}
					}

					# tasks
					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(GetVariableSystem.Exists('county_tabs'))]"

						button_text = {
							onclick = "[GetVariableSystem.Set('county_tabs', 'tasks')]"
							shortcut = map_mode_2
							datacontext = "[HoldingView.GetCountyTitle]"
							datacontext = "[Title.GetHolder]"
							visible = "[Not(GetScriptedGui('any_task_active').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target_character', Character.MakeScope).AddScope('county', Title.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End ))]"
							blockoverride "pre" {
								spacing = 3
								text_single = {
									raw_text = "View"
									visible = "[Not(GetScriptedGui('any_task_active').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target_character', Character.MakeScope).AddScope('county', Title.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End ))]"
								}
							}
							blockoverride "text" {
								raw_text = "tasks, hotkey T."
							}
						}

						expand = { }
					}
				}

				# holding info
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[GetVariableSystem.HasValue('county_tabs', 'holding')]"
					# name
					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3
						datacontext = "[HoldingView.GetTitle.GetLesseeOrHolder]"

						text_single = {
							visible = "[Character.IsLocalPlayer]"
							raw_text = "Your"
						}

						text_single = {
							raw_text = "[AddTextIf(Not(HoldingView.GetHolding.IsEmpty), Concatenate(HoldingView.GetHolding.GetPrimaryBuildingType.GetTypeName, ' of '))][HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]."
							tooltip = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
						}

						#button
						hbox = {
							visible = "[HoldingView.GetTitle.HasHolder]"

							text_single = {
								raw_text = "County capital."
								visible = "[And(HoldingView.GetProvince.GetTitle.IsCountyCapital, Not(HoldingView.GetProvince.IsRealmCapital))]"
								tooltip = "COUNTY_CAPITAL_TOOLTIP"
							}

							hbox = {
								using = agot_character_is_not_ruin
								text_single = {
									raw_text = "Realm capital." #TODO what realm
									visible = "[HoldingView.GetProvince.IsRealmCapital]"
									tooltip = "REALM_CAPITAL_TOOLTIP"
								}
							}

						}

						expand = { }
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(GetVariableSystem.HasValue('holding_tabs', 'buildings'))]"

						### info
						flowcontainer = {
							layoutpolicy_horizontal = expanding
							direction = vertical
							margin_top = 5
							ignoreinvisible = yes

							#modifiers
							dynamicgridbox = {
								name = "holding_modifiers_grid"
								datamodel = "[HoldingView.GetHoldingModifiers]"
								# flipdirection = yes

								item = {
									text_single = {
										raw_text = " [ModifierItem.GetName],"
										tooltip = "[ModifierItem.GetTooltip]"
									}
								}
							}

							flowcontainer = {
								direction = vertical
								ignoreinvisible = yes

								#holder
								flowcontainer = {
									direction = vertical
									ignoreinvisible = yes

									button_text = {
										blockoverride "text" {
											raw_text = "Make realm capital."
										}
										blockoverride "disabled" {
											visible = "[Not(HoldingView.CanSetRealmCapital)]"
										}
										enabled = "[HoldingView.CanSetRealmCapital]"
										visible = "[HoldingView.PotentialSetRealmCapital]"
										onclick = "[HoldingView.SetRealmCapital]"
										tooltip = "[HoldingView.GetSetRealmCapitalTooltip]"
									}

									button_text = {
										blockoverride "text" {
											raw_text = "Make county capital."
										}
										visible = "[HoldingView.CanSetCountyCapital]"
										onclick = "[HoldingView.SetCountyCapital]"
										tooltip = "SET_COUNTY_CAPITAL_TOOLTIP"
									}


									button_text = {
										layoutpolicy_horizontal = expanding

										blockoverride "text" {
											text = "CREATE_NEW_HOLDING_BUTTON"
											align = left
										}
										blockoverride "extra" {
											text_single = {
												raw_text = ", disabled"
												visible = "[Not(And(HoldingView.CanNewHoldingBeConstructed, Not(HoldingView.IsSelectingHoldingType)))]"
											}
										}
										blockoverride "dot" { }
										name = "construct_holding"
										visible = "[And(Not(HoldingView.HasHolding), Not(HoldingView.IsBeingConstructed))]"
										onclick = "[HoldingView.OnConstructHoldingClick]"
										# tooltip = "[HoldingView.GetHoldingConstructionTooltip]"
										enabled = "[And(HoldingView.CanNewHoldingBeConstructed, Not(HoldingView.IsSelectingHoldingType))]"
									}

									button_text  = {
										blockoverride "text" {
											raw_text = "Fuedalize tribe button"
											align = left
										}
										blockoverride "extra" {
											text_single = {
												raw_text = ", disabled"
												visible = "[Not(Character.IsPlayerInteractionWithTargetTitleValid('feudalize_tribal_holding_interaction', Title.Self))]"
											}
										}
										blockoverride "dot" { }
										datacontext = "[HoldingView.GetGUIHoldingBuilding]"
										datacontext = "[HoldingView.GetTitle]"
										datacontext = "[HoldingView.GetHolder]"
										visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('feudalize_tribal_holding_interaction', Title.Self) )]"
										enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('feudalize_tribal_holding_interaction', Title.Self)]"
										tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('feudalize_tribal_holding_interaction', Title.Self)]"
										oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
										clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
										onclick = "[Character.OpenPlayerInteractionWithTargetTitle('feudalize_tribal_holding_interaction', Title.Self)]"
									}

									#construction
									flowcontainer = {
										direction = vertical
										ignoreinvisible = yes
										spacing = 3
										name = "constructing_holding"
										visible = "[HoldingView.IsBeingConstructed]"

										text_single = {
											raw_text = "Construction: [HoldingView.GetConstructionTimeLeftForSlot('(int32)0')], [HoldingView.GetConstructionProgressForSlot('(int32)0')|0]% done."
											tooltip = "[HoldingView.GetHoldingUnderConstructionTooltip]"
										}

										button_text = {
											blockoverride "text" {
												raw_text = "CANCEL_HOLDING_CONSTRUCTION"
												align = left
											}
											blockoverride "extra" {
												text_single = {
													raw_text = ", cost will be refunded."
												}
											}
											onclick = "[HoldingView.CancelHoldingConstruction]"
											visible = "[HoldingView.CanCancelConstruction]"
											# tooltip = "CANCEL_HOLDING_CONSTRUCTION_TOOLTIP"
										}
									}

									#occupation
									text_single = {
										visible = "[HoldingView.GetProvince.IsOccupied]"
										text = "[HoldingView.GetOccupiedInfo]"
									}
								}

								flowcontainer = {
									spacing = 3
									ignoreinvisible = yes

									### Tax Income
									flowcontainer = {
										visible = "[HoldingView.HasHolding]"
										ignoreinvisible = yes
										tooltip = "[Holding.GetTaxTooltip]"

										text_single = {
											text = "HOLDING_TAX"
										}

										widget = {
											size = { 5 0 }
										}

										text_single = {
											text = "HOLDING_TAX_VALUE"
											default_format = "#V"
										}

										text_single = {
											raw_text = "."
											default_format = "#high"
										}

										text_single = {
											raw_text = " Reduced."
											visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
										}
									}

									### Raid loot
									flowcontainer = {
										name = "tutorial_highlight_holding_view_loot_box"
										visible = "[HoldingView.HasHolding]"
										margin = { 2 0 }
										tooltip = "[Holding.GetProvince.GetRaidLootTooltip]"
										ignoreinvisible = yes

										background = {
											visible = "[Holding.GetProvince.IsRecentlyLooted]"
											using = Status_Bad
										}

										text_single = {
											# layoutpolicy_horizontal = expanding
											text = "HOLDING_LOOT"
											default_format = "#high"
										}

										widget = {
											size = { 5 0 }
										}

										text_single = {
											text = "HOLDING_LOOT_VALUE"
										}

										text_single = {
											raw_text = "."
											default_format = "#high"
										}

										text_single = {
											raw_text = " Recently looted."
											visible = "[Holding.GetProvince.IsRecentlyLooted]"
										}
									}

								}

								### Levies
								flowcontainer = {
									visible = "[HoldingView.HasHolding]"
									layoutpolicy_horizontal = expanding
									spacing = 2
									ignoreinvisible = yes

									flowcontainer = {
										# spacing = 3
										ignoreinvisible = yes
										# margin = { 2 0 }

										tooltip = "[Holding.GetLeviesTooltip]"

										text_single = {
											# layoutpolicy_horizontal = expanding
											text = "LEVIES"
										}

										widget = {
											size = { 5 0 }
										}

										text_single = {
											raw_text = "[Holding.GetMaxLevySize|0],"
										}

										widget = {
											size = { 5 0 }
										}

										text_single = {
											raw_text = "[Holding.GetUnraisedLevyRatioPercent|0]% available"
										}

										text_single = {
											raw_text = "."
											default_format = "#high"
										}

										text_single = {
											raw_text = " Reduced."
											visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
										}
									}
								}

								#winter
								flowcontainer = {
									datacontext = "[HoldingView.GetProvince]"
									ignoreinvisible = yes
									spacing = 3

									text_single = {
										raw_text = "[Terrain.GetNameNoTooltip]."
										datacontext = "[HoldingView.GetProvince.GetTerrain]"
										tooltip = "HOLDING_TERRAIN_TOOLTIP"
									}

									### Supply Level
									flowcontainer = {
										tooltip = "[HoldingView.GetSupplyLimitTooltip]"
										layoutpolicy_horizontal = expanding
										spacing = 3

										text_single = {
											# layoutpolicy_horizontal = expanding
											text = "SUPPLY_LIMIT"
											default_format = "#high"
										}

										text_single = {
											raw_text = " [HoldingView.GetSupplyLimit|V]."
											default_format = "#high"
										}
									}

									container = {
										ignoreinvisible = yes
										# margin_left = 5
										text_single = {
											raw_text = " Mild winter."
											visible = "[Province.HasWinterLevel( '(int32)1' )]"
										}

										text_single = {
											raw_text = " Winter."
											visible = "[Province.HasWinterLevel( '(int32)2' )]"
										}

										text_single = {
											raw_text = " Harsh winter."
											visible = "[Province.HasWinterLevel( '(int32)3' )]"
										}
										tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
									}
								}

								text_single = {
									visible = "[GreaterThan_CFixedPoint(Province.MakeScope.ScriptValue('armies_present_here'), '(CFixedPoint)0')]"
									raw_text = "Effective supply [GuiScope.SetRoot(HoldingView.GetProvince.MakeScope).AddScope('player', GetPlayer.MakeScope ).ScriptValue('supply_limit_true')], due to armies present."
								}
							}

							# holder
							flowcontainer = {
								visible = "[Not(HoldingView.GetHolding.IsEmpty)]"
								direction = vertical
								ignoreinvisible = yes

								#grant to
								button_text = {
									blockoverride "text" {
										raw_text = "Grant [Select_CString(HoldingView.GetProvince.GetTitle.IsCountyCapital, 'holding and county', 'holding')], hotkey V."
									}
									shortcut = "find_title_shortcut"
									onclick = "[HoldingView.ToggleFindVassalListWindow]"
									visible = "[And( And( ObjectsEqual( HoldingView.GetTitle.GetHolder, GetPlayer ), HoldingView.GetTitle.CanUseFindVassal( GetPlayer ) ), Not(HoldingView.GetTitle.IsLeasedOut))]"
								}

								container = {
									using = agot_character_is_not_ruin
									flowcontainer = {
										visible = "[Not(Character.IsLocalPlayer)]"
										name = "theocracy_property"
										datacontext = "[HoldingView.GetTitle.GetLesseeOrHolder]"
										margin_left = 2
										ignoreinvisible = yes
										direction = vertical

										char_name = {
											blockoverride "pre" {
												spacing = 3
												text_single = {
													datacontext = "[HoldingView.GetTitle]"
													visible = "[Not(Title.IsLeasedOut)]"
													text = "HOLDING_VIEW_HOLDER"
												}

												text_single = {
													datacontext = "[HoldingView.GetTitle]"
													visible = "[Title.IsLeasedOut]"
													text = "HOLDING_VIEW_LESSEE"
												}
											}
											blockoverride "extra" {

												text_single = {
													raw_text = "[Character.RealmSize] counties."
												}
											}
										}

										text_single = {
											layoutpolicy_horizontal = expanding
											visible = "[Character.IsIndependentRuler]"
											raw_text = "Independent."
										}

										button_text = {
											using = char_click
											visible = "[Character.HasRelationTo( GetPlayer )]"
											tooltip = "EXTENDED_RELATIONS_TOOLTIP"
											blockoverride "text" {
												raw_text = "[Character.GetRelationToString( GetPlayer )]."
											}
										}

										button_text = {
											using = char_click
											visible = "[And(Character.HasLiege, Not(Character.GetLiege.IsLocalPlayer))]"
											tooltip = "EXTENDED_RELATIONS_TOOLTIP"

											blockoverride "text" {
												raw_text = "[Character.GetRelationToString( Character.GetLiege )]."
											}
										}

										flowcontainer = {
											layoutpolicy_horizontal = expanding

											container = {
												name = "revoke_lease_button"
												datacontext = "[HoldingView.GetTitle]"
												visible = "[Title.IsLeasedOut]"

												button_text = {
													blockoverride "text" {
														raw_text = "Revoke lease"
														align = left
													}
													blockoverride "extra" {
														text_single = {
															raw_text = ", disabled"
															visible = "[Not(Character.IsPlayerInteractionWithTargetTitleValid('revoke_leased_title_interaction', Title.Self))]"
														}
													}
													blockoverride "dot" { }
													datacontext = "[Title.GetLessee]"
													visible = "[And( Title.GetHolder.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('revoke_leased_title_interaction', Title.Self) )]"
													enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('revoke_leased_title_interaction', Title.Self)]"
													tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('revoke_leased_title_interaction', Title.Self)]"
													onclick = "[Character.OpenPlayerInteractionWithTargetTitle('revoke_leased_title_interaction', Title.Self)]"
												}
											}

											text_single = {
												raw_text = "Church property."
												tooltip = "CHURCH_PROPERTY_TOOLTIP"
												datacontext = "[HoldingView.GetTitle]"
												visible = "[Title.IsUnderTheocraticLease]" #TODO
											}
										}
									}
								}

							}
						}
					}

					### buildings
					flowcontainer = {
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes
						direction = vertical

						flowcontainer = {
							@building_width = 500
							@building_height = 45 # breaks things, need to redo the whole thing
							direction = vertical
							margin_top = 5
							visible = "[HoldingView.GetTitle.HasHolder]"

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "pre" {
									spacing = 3
									text_single = {
										raw_text = "Buildings,"
									}
									text_single = {
										visible = "[Not(GetVariableSystem.HasValue('holding_tabs', 'buildings'))]"
										raw_text = "hotkey E"
									}
								}
								onclick = "[GetVariableSystem.Set('holding_tabs', 'buildings')]"
								shortcut = map_mode_1
							}

							button = {
								datacontext = "[HoldingView.GetGUIHoldingBuilding]"
								parentanchor = right
								size = { @building_width @building_height }
								allow_outside = yes
								onclick = "[GUIBuildingItem.OnClick]"
								down = "[GUIBuildingItem.IsHighlighted]"
								enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"

								vbox = {
									# resizeparent = yes
									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 5
										text_single = {
											raw_text = "Main,"
										}

										text_single = {
											text = "[HoldingView.GetHolding.GetPrimaryBuildingType.GetTypeName]"
										}

										text_single = {
											visible = "[GUIBuildingItem.HasLevel]"
											raw_text = "level [GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]."
										}

										text_single = {
											raw_text = "Tooltip."
											tooltip = "[GUIBuildingItem.GetTooltip]"
										}

										text_single = {
											raw_text = "Construction: [GUIBuildingItem.GetConstructingProgress|0]%."
											tooltip = "[GUIBuildingItem.GetTooltip]"
											visible = "[GUIBuildingItem.IsConstructing]"
										}

										text_single = {
											datacontext = "[HoldingView.GetHolder]"
											raw_text = "Wrong type for the holder."
											visible = "[And(Not(HoldingView.GetHolding.IsEmpty),Not(HoldingView.GetHolding.IsValidForLesseeOrHolder))]"
											tooltip = HOLDING_VIEW_WRONG_HOLDING_TYPE
										}

										text_single = {
											raw_text = "Disabled."
											visible = "[GUIBuildingItem.IsBuildingDisabled]"
										}
										expand = { }
									}

									### Fort Info

									hbox = {
									    layoutpolicy_horizontal = expanding
										using = agot_character_is_not_ruin

										hbox = {
											tooltip = "[HoldingView.GetGarrisonTooltip]"
											visible = "[HoldingView.GetProvince.HasFort]"
											spacing = 3
											text_single = {
												raw_text = "Fort level [HoldingView.GetProvince.GetFortLevel]."
												tooltip = "[Province.GetFortLevelTooltip]"
												default_format = "#high"
											}

											text_single = {
												raw_text = "Garrison: [HoldingView.GetCurrentGarrisonSize],"
											}

											text_single = {
												raw_text = "[HoldingView.GetGarrisonRatio|0]% of total."
											}
										}

									    expand = { }
									}

									expand = { }
								}
							}

							flowcontainer = {
								ignoreinvisible = yes

								text_single = {
									raw_text = "[GuiScope.SetRoot(HoldingView.GetProvince.MakeScope).ScriptValue('num_buildings_sval')] buildings"
								}

								text_single = {
									raw_text = ", [GuiScope.SetRoot(HoldingView.GetProvince.MakeScope).ScriptValue('free_building_slots_sval')] empty slots"
									visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(HoldingView.GetProvince.MakeScope).ScriptValue('free_building_slots_sval'), '(CFixedPoint)0')]"
								}

								dot = { }


								# text_single = {
								# 	raw_text = "[GetDataModelSize(HoldingView.GetBuildings)] Common buildings slots:"
								# 	visible = "[EqualTo_CFixedPoint(HoldingView.GetProvince.MakeScope.ScriptValue('free_building_slots_sval'), '(CFixedPoint)0')]"
								# }
							}


							flowcontainer = {
								name = "buildings_grid_special"
								ignoreinvisible = yes
								direction = vertical

								# Upgrade buildings
								flowcontainer = {
									name = "buildings_grid"
									datamodel = "[HoldingView.GetBuildings]"
									ignoreinvisible = yes
									direction = vertical

									item = {
										widget_building_text = {
											blockoverride "special" { }
										}
									}
								}

								flowcontainer = {
									visible = "[Or(HoldingView.HasDuchyCapitalBuildingSlot, HoldingView.HasSpecialBuildingSlot )]"
									# spacing = 3
									ignoreinvisible = yes
									direction = vertical

									text_single = {
										raw_text = "Duchy capital building:"
										datacontext = "[HoldingView.GetGUIDuchyCapitalBuilding]"
										visible = "[HoldingView.HasDuchyCapitalBuildingSlot]"
									}

									widget_building_text = {
										blockoverride "normal" { }
										name = "duchy_capital_building"
										datacontext = "[HoldingView.GetGUIDuchyCapitalBuilding]"
										visible = "[HoldingView.HasDuchyCapitalBuildingSlot]"
									}

									text_single = {
										raw_text = "Special building:"
										datacontext = "[HoldingView.GetGUISpecialBuilding]"
										visible = "[HoldingView.HasSpecialBuildingSlot]"
									}

									widget_building_text = {
										blockoverride "normal" { }
										name = "special_building"
										datacontext = "[HoldingView.GetGUISpecialBuilding]"
										visible = "[HoldingView.HasSpecialBuildingSlot]"
									}

									# widget = {
									# 	# This is needed to offset the building slots correctly when special building slots exist.
									# 	name = "Conditional_margin_widget"
									# 	size = { 0 0 }
									# 	visible = "[HoldingView.HasSpecialBuildingSlot]"
									# }
								}
							}
						}
					}
				}

				# selected tab
				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[GetVariableSystem.Clear('county_tabs')]"
					visible = "[GetVariableSystem.Exists('county_tabs')]"
					shortcut = close_window

					# blockoverride "extra" {
					# 	text_single = {
					# 		visible = "[GetVariableSystem.HasValue('county_tabs', 'holdings')]"
					# 		raw_text = "[GetDataModelSize(HoldingView.GetCountyTitle.MakeScope.GetList('county_holdings'))]"
					# 		margin_right = 3
					# 	}
					# 	text_single = {
					# 		raw_text = "[GetVariableSystem.Get('county_tabs')]"
					# 	}
					# 	text_single = {
					# 		raw_text = " in [HoldingView.GetCountyTitle.GetNameNoTierNoTooltip]."
					# 	}
					#
					# 	text_single = {
					# 		visible = "[GetVariableSystem.HasValue('county_tabs', 'holdings')]"
					# 		raw_text = " Can select with hotkeys."
					# 	}
					# }
				}

				button = {
					visible = "[GetVariableSystem.Exists('holding_tabs')]"
					shortcut = close_window
					onclick = "[GetVariableSystem.Clear('holding_tabs')]"
				}


				dynamicgridbox = {
					visible = "[GetVariableSystem.HasValue('county_tabs', 'holdings')]"
					layoutpolicy_horizontal = expanding
					# datamodel_wrap = 5
					# flipdirection = yes
					datamodel = "[HoldingView.GetCountyTitle.MakeScope.GetList('county_holdings')]"

					item = {
						button_text = {
							datacontext = "[Scope.GetProvince.GetHolding]"
							blockoverride "text" {
								raw_text = "[AddTextIf(Not(Holding.IsEmpty), Concatenate(Holding.GetPrimaryBuildingType.GetTypeName, ' '))][Holding.GetNameNoTooltip],"
							}
							blockoverride "pre" {
								spacing = 3
								text_single = {
									raw_text = "[Scope.GetProvince.MakeScope.Var('order').GetValue],"
									visible = "[LessThan_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)6')]"
								}
								text_single = {
									raw_text = "T,"
									visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)6')]"
								}
								text_single = {
									raw_text = "Y,"
									visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)7')]"
								}

								text_single = {
									visible = "[Scope.GetProvince.GetHolding.GetLesseeOrHolder.IsLocalPlayer]"
									raw_text = "Your"
								}
							}
							blockoverride "extra" {
								text_single = {
									raw_text = "[Scope.GetProvince.GetTerrain.GetName]."
								}
							}
							onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
							onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
							onclick = "[GetVariableSystem.Clear('county_tabs')]"

							button = {
								onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
								onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
								shortcut = speed_1
								visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)1')]"
								onclick = "[GetVariableSystem.Clear('county_tabs')]"
							}
							button = {
								onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
								onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
								shortcut = speed_2
								visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)2')]"
								onclick = "[GetVariableSystem.Clear('county_tabs')]"
							}
							button = {
								onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
								onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
								shortcut = speed_3
								visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)3')]"
								onclick = "[GetVariableSystem.Clear('county_tabs')]"
							}
							button = {
								onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
								onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
								shortcut = speed_4
								visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)4')]"
								onclick = "[GetVariableSystem.Clear('county_tabs')]"
							}
							button = {
								onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
								onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
								shortcut = speed_5
								visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)5')]"
								onclick = "[GetVariableSystem.Clear('county_tabs')]"
							}
							button = {
								onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
								onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
								shortcut = map_mode_4
								visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)6')]"
								onclick = "[GetVariableSystem.Clear('county_tabs')]"
							}
							button = {
								onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
								onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
								shortcut = mapmode_duchies_secondary
								visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)7')]"
								onclick = "[GetVariableSystem.Clear('county_tabs')]"
							}
						}
					}
				}

				# county info
				vbox = {
					margin_left = 15
					visible = "[Or(Not(GetVariableSystem.Exists('county_tabs')), GetVariableSystem.HasValue('county_tabs', 'county'))]"
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding
						shortcut = map_mode_11
						onclick = "[GetVariableSystem.Set('county_tabs', 'county')]"
						blockoverride "text" {
							raw_text = "County info, Shift E."
						}
					}

					vbox = {
						datacontext = "[HoldingView.GetProvince.GetCountyCapitalProvince]"
						layoutpolicy_horizontal = expanding
						spacing = 5

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3

							flowcontainer = {
								datacontext = "[Province.GetCounty.GetFaith]"
								spacing = 5
								using = tooltip_ne

								tooltipwidget = {
									faith_tooltip = {
										blockoverride "extra_info" {
											using = faith_tooltip_click_default_extra_info

											text_single = {
												margin = { 10 0 }
												layoutpolicy_horizontal = expanding
												fonttintcolor = "[TooltipInfo.GetTintColor]"
												using = DefaultTooltipText
												visible = "[Not( ObjectsEqual( Faith.Self, GetPlayer.GetFaith ) )]"
												text = "COUNTY_NOT_YOUR_FAITH"
											}
										}
									}
								}

								button_group = {
									shortcut = "army_split_half"
									onclick = "[OpenGameViewData( 'faith', Faith.GetID )]"

									text_single = {
										raw_text = "[Faith.GetAdjective], F."
									}
								}
							}

							flowcontainer = {
								layoutpolicy_horizontal = expanding
								datacontext = "[Province.GetCounty.GetCulture]"

								using = tooltip_ne

								# expand = { }

								tooltipwidget = {
									culture_tooltip = {
										blockoverride "extra_info"
										{
											text_single = {
												fonttintcolor = "[TooltipInfo.GetTintColor]"
												using = DefaultTooltipText
												visible = "[Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) )]"
												text = "COUNTY_NOT_YOUR_CULTURE"
											}
										}
									}
								}

								button_group = {
									shortcut = character_finder
									# shortcut = "innovations_window"
									onclick = "[OpenGameViewData( 'culture_window', Culture.GetID )]"

									text_single = {
										text = "CULTURE_COUNTY_WINDOW"
									}
								}

								text_single = {
									raw_text = ", C."
								}
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding


							#resources
							flowcontainer = {
								ignoreinvisible = yes
								layoutpolicy_horizontal = expanding
								direction = vertical

								flowcontainer = {
									spacing = 5
									# layoutpolicy_horizontal = expanding
									datacontext = "[HoldingView.GetProvince.GetCounty]";
									# expand = { }

									text_single = {
										# layoutpolicy_horizontal = expanding
										raw_text = "[control|E]:"
									}

									text_single = {
										raw_text = "[County.GetControlLevel], [HoldingView.GetCountyTitle.MakeScope.ScriptValue('county_control_rate_sval')|1=] growth."
										tooltip = "COUNTY_CONTROL_TOOLTIP"
									}
								}

								flowcontainer = {
									spacing = 5


									text_single = {
										# layoutpolicy_horizontal = expanding
										raw_text = "[development|E]:"
									}

									text_single = {
										raw_text = "[HoldingView.GetProvince.GetCounty.GetDevelopmentLevelString], [HoldingView.GetCountyTitle.MakeScope.ScriptValue('development_rate_sval')|1=] growth."
										tooltip = "COUNTY_DEVELOPMENT_TOOLTIP"
									}
								}
							}

							flowcontainer = {
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes
								direction = vertical
								flowcontainer = {
									spacing = 5
									ignoreinvisible = yes
									# expand = { }

									text_single = {
										# layoutpolicy_horizontal = expanding
										raw_text = "[county_opinion|E]:"
									}

									button_normal = {
										name = "in_faction"
										visible = "[HoldingView.IsInFaction]"
										onclick = "[HoldingView.OnGotoFaction]"
										tooltip = "COUNTY_IN_FACTION_TOOLTIP"
										size = { 20 20 }
										texture = "gfx/interface/icons/symbols/icon_warning.dds"
									}

									text_single = {
										raw_text = "[HoldingView.GetCountyOpinion|=+]."
										default_format = "#high"
										tooltip = "COUNTY_OPINION_TOOLTIP"
									}
								}
							}
						}


						vbox = {
							visible = "[Not( IsDataModelEmpty(HoldingView.GetCountyModifiers))]"
							layoutpolicy_horizontal = expanding
							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[GetDataModelSize(HoldingView.GetCountyModifiers)] County modifiers:"
							}

							dynamicgridbox = {
								datamodel_wrap = 3
								datamodel = "[HoldingView.GetCountyModifiers]"

								item = {
									text_single = {
										raw_text = "[ModifierItem.GetName]."
										raw_tooltip = "[ModifierItem.GetTooltip]"
									}
								}
								layoutpolicy_horizontal = expanding
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
						visible = "[And(GetVariableSystem.HasValue('county_tabs', 'county'), Not(Character.IsLocalPlayer))]"

						char_name = {
							layoutpolicy_horizontal = expanding
							blockoverride "pre" {
								spacing = 3
								text_single = {
									raw_text = "Holder,"
								}
							}
							blockoverride "extra" {

								text_single = {
									raw_text = "[Character.RealmSize] counties."
								}
							}
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							visible = "[Character.IsIndependentRuler]"
							raw_text = "Independent."
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							using = char_click
							visible = "[Character.HasRelationTo( GetPlayer )]"
							tooltip = "EXTENDED_RELATIONS_TOOLTIP"
							blockoverride "text" {
								raw_text = "[Character.GetRelationToString( GetPlayer )]."
							}
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							using = char_click
							visible = "[And(Character.HasLiege, Not(Character.GetLiege.IsLocalPlayer))]"
							tooltip = "EXTENDED_RELATIONS_TOOLTIP"

							blockoverride "text" {
								raw_text = "[Character.GetRelationToString( Character.GetLiege )]."
							}
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[DefaultOnCoatOfArmsRightClick(HoldingView.GetProvince.GetCoATitle.GetID)]"
						onclick = "[PdxGuiTriggerAllAnimations('adjacent_counties')]"
						blockoverride "text" {
							raw_text = "Pan camera here, Shift Q."
						}
						shortcut = map_mode_9
					}

					expand = { }
				}

				# tasks
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[GetVariableSystem.HasValue('county_tabs', 'tasks')]"

					# tasks
					vbox = {
						layoutpolicy_horizontal = expanding
						margin = { 0 5 }
						margin_left = 20
						spacing = 5

						# active
						vbox = {
							layoutpolicy_horizontal = expanding
							datacontext = "[HoldingView.GetCountyTitle]"
							visible = "[GetScriptedGui('any_task_active').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target_character', HoldingView.GetCountyTitle.GetHolder.MakeScope).AddScope('county', Title.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End )]"

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								text_single = {
									raw_text = "[GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target_character', HoldingView.GetCountyTitle.GetHolder.MakeScope).AddScope('county', Title.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).ScriptValue('active_tasks')]"
								}

								text_single = {
									raw_text = "Active tasks,"
								}
								expand = { }
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Character.IsValid]"
								datacontext = "[GetPlayer.GetCouncillor('councillor_court_chaplain')]"

								active_task_hbox = {
									datacontext = "[GetScriptedGui('is_fabricating_claim')]"

									blockoverride "task" {
										raw_text = "Fabricating a claim,"
									}
								}

								active_task_hbox = {
									datacontext = "[GetPlayer.GetCouncillor('councillor_court_chaplain')]"
									datacontext = "[GetScriptedGui('is_converting_faith')]"
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Character.IsValid]"
								datacontext = "[GetPlayer.GetCouncillor('councillor_chancellor')]"

								active_task_hbox = {
									datacontext = "[GetScriptedGui('is_integrating_title')]"

									blockoverride "task" {
										raw_text = "Integrating [Title.GetName],"
									}
									blockoverride "skill" {
										raw_text = "[Character.GetSkill('diplomacy')] diplomacy."
									}
								}
								active_court_task_hbox = {
									datacontext = "[GetScriptedGui('is_bestowing_favor')]"

									blockoverride "task" {
										raw_text = "Bestowing favor on [HoldingView.GetCountyTitle.GetHolder.GetFirstNameNoTooltip], opinion [HoldingView.GetCountyTitle.GetHolder.GetOpinionOf( GetPlayer )]."
									}
									blockoverride "skill" {
										raw_text = "[Character.GetSkill('diplomacy')] diplomacy."
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Character.IsValid]"
								datacontext = "[GetPlayer.GetCouncillor('councillor_marshal')]"

								active_task_hbox = {
									datacontext = "[GetScriptedGui('is_increasing_control')]"

									blockoverride "task" {
										raw_text = "Increasing control, currently [HoldingView.GetCountyTitle.GetCountyData.GetControlLevel|0]."
									}
									blockoverride "skill" {
										raw_text = "[Character.GetSkill('martial')] martial."
									}
								}

								# debug
								button_text = {
									visible = no
									datacontext = "[GetPlayer.GetCouncillor('councillor_marshal')]"
									layoutpolicy_horizontal = expanding
									onclick = "[GetScriptedGui('finish_task').Execute( GuiScope.SetRoot( Character.MakeScope ).End )]"
									blockoverride "text" {
										raw_text = "Finish marshal's task"
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Character.IsValid]"
								datacontext = "[GetPlayer.GetCouncillor('councillor_steward')]"

								active_task_hbox = {
									datacontext = "[GetScriptedGui('is_developing')]"

									blockoverride "task" {
										raw_text = "Developing, currently [HoldingView.GetProvince.GetCounty.GetDevelopmentLevelString], [Title.MakeScope.ScriptValue('development_rate_sval')|1=] growth."
									}
									blockoverride "skill" {
										raw_text = "[Character.GetSkill('stewardship')] stewardship."
									}
								}

								active_task_hbox = {
									datacontext = "[GetScriptedGui('is_promoting')]"

									blockoverride "task" {
										raw_text = "Promoting [GetPlayer.GetCulture.GetNameNoTooltip] culture,"
									}
									blockoverride "skill" {
										raw_text = "[Character.GetSkill('stewardship')] stewardship."
									}
								}

								active_task_hbox = {
									datacontext = "[GetScriptedGui('is_accepting')]"

									blockoverride "task" {
										raw_text = "Increasing [Title.GetCountyData.GetCulture.GetNameNoTooltip] acceptance, currently [Title.GetCountyData.GetCulture.GetAcceptance( GetPlayer.GetCulture )|0]%"
									}
									blockoverride "skill" {
										raw_text = "[Character.GetSkill('stewardship')] stewardship"
									}
								}

								active_task_hbox = {
									datacontext = "[GetScriptedGui('is_convincing_de_jure')]"

									blockoverride "task" {
										raw_text = "Convincing to join de jure liege."
									}
									blockoverride "skill" {
										raw_text = "[Character.GetSkill('stewardship')] stewardship"
									}
								}

								# debug
								button_text = {
									visible = no
									layoutpolicy_horizontal = expanding
									onclick = "[GetScriptedGui('finish_task').Execute( GuiScope.SetRoot( Character.MakeScope ).End )]"
									blockoverride "text" {
										raw_text = "Finish task"
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Character.IsValid]"
								datacontext = "[GetPlayer.GetCouncillor('councillor_spymaster')]"

								active_court_task_hbox = {
									datacontext = "[GetScriptedGui('is_searching_for_secrets')]"

									blockoverride "task" {
										raw_text = "Finding secrets in [HoldingView.GetCountyTitle.GetHolder.GetFirstNamePossessiveOrMyNoTooltip] court."
									}
								}
							}

							# debug
							button_text = {
								visible = no
								datacontext = "[GetPlayer.GetCouncillor('councillor_chancellor')]"
								layoutpolicy_horizontal = expanding
								onclick = "[GetScriptedGui('finish_task').Execute( GuiScope.SetRoot( Character.MakeScope ).End )]"
								blockoverride "text" {
									raw_text = "Finish chancellor's task"
								}
							}
						}

						# available
						vbox = {
							layoutpolicy_horizontal = expanding

							datacontext = "[HoldingView.GetCountyTitle]"

							#TODO number of tasks and hide if none. Annoying to do because we need to account for whether a task is valid and not performed right now

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "Available tasks,"
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[GetPlayer.GetCouncillor('councillor_court_chaplain')]"
								visible = "[Character.IsValid]"

								county_task_button = {
									datacontext = "[GetScriptedGui('fabricate_claim_button')]"

									blockoverride "text" {
										alwaystransparent = yes
										raw_text = "Fabricate claim."
									}
								}

								county_task_button = {
									datacontext = "[GetScriptedGui('convert_faith_button')]"

									blockoverride "text" {
										alwaystransparent = yes
										raw_text = "Convert [Title.GetCountyData.GetFaith.GetAdjective] faith."
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[GetPlayer.GetCouncillor('councillor_chancellor')]"
								visible = "[Character.IsValid]"

								county_task_button = {
									datacontext = "[GetScriptedGui('task_integrate_title')]"

									blockoverride "text" {
										alwaystransparent = yes
										raw_text = "Integrate [Title.GetNameNoTierNoTooltip] into [GetPlayer.GetPrimaryTitle.GetNameNoTierNoTooltip]."
									}
								}

								court_task_button = {
									datacontext = "[GetScriptedGui('task_bestow_royal_favor')]"

									blockoverride "text" {
										alwaystransparent = yes
										raw_text = "Bestow favor on [HoldingView.GetCountyTitle.GetHolder.GetFirstNameNoTooltip], opinion [HoldingView.GetCountyTitle.GetHolder.GetOpinionOf( GetPlayer )]."
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[GetPlayer.GetCouncillor('councillor_marshal')]"
								visible = "[Character.IsValid]"

								county_task_button = {
									datacontext = "[GetScriptedGui('task_increase_control')]"

									blockoverride "text" {
										alwaystransparent = yes
										raw_text = "Increase control,"
									}
									blockoverride "extra" {
										spacing = 3
										text_single = {
											visible = "[LessThan_CFixedPoint(Title.GetCountyData.GetControl, '(CFixedPoint)100')]"
											raw_text = "currently at [Title.GetCountyData.GetControlLevel]."
										}
										text_single = {
											visible = "[GetScriptedGui('has_county_corruption_trigger_sgui').IsShown( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).End )]"
											raw_text = "County has corruption modifiers."
										}
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[GetPlayer.GetCouncillor('councillor_steward')]"
								visible = "[Character.IsValid]"

								county_task_button = {
									datacontext = "[GetScriptedGui('task_develop_county')]"

									blockoverride "text" {
										alwaystransparent = yes
										raw_text = "Increase development, currently [HoldingView.GetProvince.GetCounty.GetDevelopmentLevelString], [Title.MakeScope.ScriptValue('development_rate_sval')|1=] growth."
									}
								}
								county_task_button = {
									datacontext = "[GetScriptedGui('task_promote_culture')]"

									blockoverride "text" {
										alwaystransparent = yes
										raw_text = "Promote [GetPlayer.GetCulture.GetNameNoTooltip] culture over [Title.GetCountyData.GetCulture.GetNameNoTooltip]."
									}
								}
								county_task_button = {
									datacontext = "[GetScriptedGui('task_accept_culture')]"

									blockoverride "text" {
										alwaystransparent = yes
										raw_text = "Accept [Title.GetCountyData.GetCulture.GetNameNoTooltip] culture."
									}
								}

								county_task_button = {
									datacontext = "[GetScriptedGui('task_convince_dejure')]"

									blockoverride "text" {
										alwaystransparent = yes
										raw_text = "Convince to join de jure liege, [Title.GetDeJureLiege.GetHolder.GetNameNoTooltip]."
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[GetPlayer.GetCouncillor('councillor_spymaster')]"
								visible = "[Character.IsValid]"

								court_task_button = {
									datacontext = "[GetScriptedGui('task_find_secrets')]"

									blockoverride "text" {
										alwaystransparent = yes
										raw_text = "Find secrets in [HoldingView.GetCountyTitle.GetHolder.GetFirstNamePossessiveOrMyNoTooltip] court."
									}
								}
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding

							button_agot_abandon_ruin = { }

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Make realm capital."
								}
								blockoverride "disabled" {
									visible = "[Not(HoldingView.CanSetRealmCapital)]"
								}
								enabled = "[HoldingView.CanSetRealmCapital]"
								visible = "[HoldingView.PotentialSetRealmCapital]"
								onclick = "[HoldingView.SetRealmCapital]"
								tooltip = "[HoldingView.GetSetRealmCapitalTooltip]"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Rename holding."
								}
								visible = "[HoldingView.GetProvince.GetTitle.CanPlayerCustomizeTitle]"
								onclick = "[OpenTitleCustomizationWindow(HoldingView.GetProvince.GetTitle)]"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								visible = "[HoldingView.GetCountyTitle.CanPlayerCustomizeTitle]"
								onclick = "[OpenTitleCustomizationWindow(HoldingView.GetCountyTitle)]"
								blockoverride "text" {
									raw_text = "Rename county."
								}
							}

							# button_text = {
							# 	layoutpolicy_horizontal = expanding
							# 	onclick = "[DefaultOnCoatOfArmsClick(HoldingView.GetCountyTitle.GetID)]"
							# 	blockoverride "text" {
							# 		raw_text = "Open title window."
							# 	}
							# }

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "Settings:"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								onclick = "[GetScriptedGui('show_coordinates').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
								blockoverride "text" {
									raw_text = "[Select_CString( GetPlayer.MakeScope.Var('show_coordinates').IsSet, 'Checked', 'Unchecked')], Show coordinates."
								}
							}
						}
					}
				}

				#navigation
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[GetVariableSystem.HasValue('county_tabs', 'adjacent counties')]"

					hbox = {
						spacing = 3
						layoutpolicy_horizontal = expanding

						button_text = {
							blockoverride "text" {
								raw_text = "  [GetDataModelSize(HoldingView.GetCountyTitle.MakeScope.GetList('adjacent_counties'))] Adjacent counties."
							}
							onclick = "[GetScriptedGui('adjacent_counties').Execute( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).AddScope( 'player', GetPlayer.MakeScope).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"
						}

						button = {
							onclick = "[GetVariableSystem.Toggle('hide_adjacent')]"
							onclick = "[GetScriptedGui('adjacent_counties').Execute( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).AddScope( 'player', GetPlayer.MakeScope).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"
							shortcut = map_mode_1
						}
						expand = { }
					}

					state = {
						on_start = "[GetScriptedGui('adjacent_counties').Execute( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).AddScope( 'player', GetPlayer.MakeScope).AddScope('target', HoldingView.GetProvince.MakeScope).End )]"
						trigger_when = "[IsDataModelEmpty(HoldingView.GetCountyTitle.MakeScope.GetList('adjacent_counties'))]"
					}

					dynamicgridbox = {
						minimumsize = { 50 25 }
						# datamodel_wrap = 3
						layoutpolicy_horizontal = expanding
						# flipdirection = yes
						visible = "[Not(GetVariableSystem.Exists('hide_adjacent'))]"

						datamodel = "[HoldingView.GetCountyTitle.MakeScope.GetList('adjacent_counties')]"

						item = {
							adjacent_county_button = { }
						}
					}

					vbox = {
						visible =  "[Not(IsDataModelEmpty(HoldingView.GetCountyTitle.MakeScope.GetList('adjacent_counties_across_water')))]"
						layoutpolicy_horizontal = expanding

						button = {
							size = { 400 22 }
							layoutpolicy_horizontal = expanding

							flowcontainer = {
								ignoreinvisible = yes
								spacing = 5
								background = { using = Background_Area_Border_Solid }

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "  [GetDataModelSize(HoldingView.GetCountyTitle.MakeScope.GetList('adjacent_counties_across_water'))] Across"
								}

								text_single = {
									raw_text = "sea:"
									visible = "[GetScriptedGui('is_coastal_county').IsShown( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).End )]"
								}
								text_single = {
									raw_text = "river:"
									visible = "[GetScriptedGui('is_riverside_county').IsShown( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).End )]"
								}
								text_single = {
									raw_text = "sea or river:"
									visible = "[GetScriptedGui('is_river_and_coastal').IsShown( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).End )]"
								}
							}
						}

						dynamicgridbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(GetVariableSystem.Exists('hide_across_water'))]"

							datamodel = "[HoldingView.GetCountyTitle.MakeScope.GetList('adjacent_counties_across_water')]"

							item = {
								adjacent_county_button = { }
							}
						}
					}
				}


				vbox = {
					layoutpolicy_horizontal = expanding
					margin_top = 5
					margin_left = 10
					visible = "[Not(GetVariableSystem.HasValue('county_tabs', 'holdings'))]"
					alpha = "[Select_float( GetVariableSystem.Exists('county_tabs'), '(float)0', '(float)1' )]"

					# holdings
					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set('county_tabs', 'holdings')]"
						shortcut = army_create_new
						blockoverride "text" {
							raw_text = "View [GetDataModelSize(HoldingView.GetCountyTitle.MakeScope.GetList('county_holdings'))] Holdings, hotkey H."
						}
					}

					dynamicgridbox = {
						layoutpolicy_horizontal = expanding
						# datamodel_wrap = 5
						# flipdirection = yes
						datamodel = "[HoldingView.GetCountyTitle.MakeScope.GetList('county_holdings')]"

						item = {
							button_text = {
								datacontext = "[Scope.GetProvince.GetHolding]"
								blockoverride "text" {
									raw_text = "[AddTextIf(Not(Holding.IsEmpty), Concatenate(Holding.GetPrimaryBuildingType.GetTypeName, ' '))][Holding.GetNameNoTooltip],"
								}
								blockoverride "pre" {
									spacing = 3
									text_single = {
										raw_text = "[Scope.GetProvince.MakeScope.Var('order').GetValue],"
										visible = "[LessThan_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)6')]"
									}
									text_single = {
										raw_text = "Y,"
										visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)6')]"
									}
									text_single = {
										raw_text = "U,"
										visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)7')]"
									}

									text_single = {
										visible = "[Scope.GetProvince.GetHolding.GetLesseeOrHolder.IsLocalPlayer]"
										raw_text = "Your"
									}
								}
								blockoverride "extra" {
									text_single = {
										raw_text = "[Scope.GetProvince.GetTerrain.GetName]."
									}
								}
								onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
								onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"

								button = {
									onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
									onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
									shortcut = speed_1
									visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)1')]"
								}
								button = {
									onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
									onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
									shortcut = speed_2
									visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)2')]"
								}
								button = {
									onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
									onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
									shortcut = speed_3
									visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)3')]"
								}
								button = {
									onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
									onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
									shortcut = speed_4
									visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)4')]"
								}
								button = {
									onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
									onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
									shortcut = speed_5
									visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)5')]"
								}
								button = {
									onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
									onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
									shortcut = map_mode_4
									visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)6')]"
								}
								button = {
									onclick = "[OpenGameViewData('holding_view', Scope.GetProvince)]"
									onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
									shortcut = mapmode_duchies_secondary
									visible = "[EqualTo_CFixedPoint(Scope.GetProvince.MakeScope.Var('order').GetValue, '(CFixedPoint)7')]"
								}
							}
						}
					}
				}
			}
		}

		state = {
			name = holdings_check
			trigger_when = "[IsDataModelEmpty(HoldingView.GetCountyTitle.MakeScope.GetList('county_holdings'))]"
			on_finish = "[GetScriptedGui('county_holding_list').Execute( GuiScope.SetRoot( HoldingView.GetCountyTitle.MakeScope ).End )]"
		}

	}

	old_county = { }
}

######################################################
########### CONSTRUCT NEW BUILDING WINDOW ############
######################################################

window = {
	name = "holding_tracks_view"
	size = { 100% 100% }
	movable = no
	layer = middle
	datacontext = "[HoldingView.GetHolder]"
	using = TooltipFocus
	alwaystransparent = yes

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		position_x = 0
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		position_x = -50
	}

	button = {
		shortcut = close_window

	}

	widget = {
		layoutpolicy_vertical = expanding
		size = { 670 0 }
		allow_outside = yes

		vbox = {
			layoutpolicy_horizontal = expanding
			# margin_top = 170
			margin_bottom = 10

			vbox = {
				layoutpolicy_horizontal = expanding
				minimumsize = { 0 700 }

				## New Building
				vbox = {
					visible = "[Not(HoldingView.IsSelectingBuildingToConstruct)]"
					layoutpolicy_horizontal = expanding
					alwaystransparent = no
					margin = { 3 3 }
					margin_bottom = 5
					using = Window_Background_Subwindow

					header_pattern = {
						layoutpolicy_horizontal = expanding

						blockoverride "header_text"
						{
							text = "[HoldingView.GetTracksViewLabel]"
						}

						blockoverride "button_close"
						{
							onclick = "[HoldingView.CloseSubwindows]"
						}
					}

					building_in_vassal_warning_hbox = { }

					text_single = {
						layoutpolicy_horizontal = expanding
						margin_left = 10
						raw_text = "Use the preview buttons to read building effects."
					}

					text_single = {
						layoutpolicy_horizontal = shrinking
						name = "prompt"
						text = "[HoldingView.GetTracksViewPrompt]"
						margin_bottom = 10
					}

					text_single = {
						visible = "[IsDataModelEmpty(HoldingView.GetPotentialBuildings)]"
						layoutpolicy_horizontal = shrinking
						name = "no_potential_buildings_text"
						text = "NO_POTENTIAL_BUILDINGS_WARNING"
						margin_bottom = 10
					}

					## Construct New Building
					container = {
						visible = "[Not(IsDataModelEmpty(HoldingView.GetPotentialBuildings))]"
						layoutpolicy_vertical = expanding

						scrollbox = {
							visible = "[Not(HoldingView.IsSelectingBuildingToConstruct)]"
							size = { 700 300 }
							autoresizescrollarea = yes
							maximumsize = { -1 960 }

							blockoverride "scrollbox_content"
							{
								name = "tracks_grid"
								datamodel = "[HoldingView.GetPotentialBuildings]"
								datacontext = "[HoldingView.GetProvince]"
								datacontext = "[HoldingView.GetProvince.GetCounty.GetCulture]"
								visible = "[HoldingView.IsSelectingNewBuilding]"
								spacing = 10
								set_parent_size_to_minimum = yes

								block "scrollbox_margins"
								{
									using = Scrollbox_Margins
									margin_right = 15
									margin_top = 20
								}

								item = {
									vbox = {
										layoutpolicy_horizontal = expanding

										background = {
											using = Background_Area_Light
										}

										hbox = {
											name = "header"
											layoutpolicy_horizontal = expanding

											background = {
												using = Background_Area
											}

											hbox = {
												layoutpolicy_horizontal = expanding

												hbox = {
													layoutpolicy_horizontal = expanding

													button_text = {
														blockoverride "text" {
															text = "CONSTRUCT"
															visible = "[GUIPotentialBuildingItem.CanConstruct]"
														}
														enabled = "[GUIPotentialBuildingItem.CanConstruct]"
														onclick = "[GUIPotentialBuildingItem.Construct]"
													}

													text_single = {
														raw_text = " "
													}

													text_single = {
														raw_text = "[GUIPotentialBuildingItem.GetBuilding.GetTypeName]."
													}

													text_single = {
														visible = "[Not(GUIPotentialBuildingItem.CanConstruct)]"
														raw_text = " Disabled, "
													}
													text_single = {
														visible = "[Not(GUIPotentialBuildingItem.CanConstruct)]"
														raw_text = " tooltip."
														tooltip = "[GUIPotentialBuildingItem.GetTooltip]"
													}

													button_text = {
														blockoverride "text" {
															raw_text = "CONSTRUCT_BUILDINGS_DETAILS"
														}
														onclick = "[GUIPotentialBuildingItem.ShowDetails]"
													}

													dot = { }

													hbox = {
														min_width = 120
														# spacing = 3
														# margin_top = -6

														text_single = {
															datacontext = "[GUIPotentialBuildingItem.GetGoldCost]"
															visible = "[GUIPotentialBuildingItem.HasGoldCost]"
															# layoutpolicy_horizontal = expanding
															raw_text = "[ValueBreakdown.GetValue], you have [GetPlayer.GetGold|0],"
															tooltip_enabled = "[ValueBreakdown.HasTooltip]"

															tooltipwidget = {
																widget_value_breakdown_tooltip = { }
															}

															background = {
																visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
																using = Status_Bad
																alpha = 0.6
															}
														}

														text_single = {
															datacontext = "[GUIPotentialBuildingItem.GetPrestigeCost]"
															visible = "[GUIPotentialBuildingItem.HasPrestigeCost]"
															# layoutpolicy_horizontal = expanding
															raw_text = "[ValueBreakdown.GetValue], you have [GetPlayer.GetPrestige|0],"
															tooltip_enabled = "[ValueBreakdown.HasTooltip]"

															tooltipwidget = {
																widget_value_breakdown_tooltip = { }
															}

															background = {
																visible = "[LessThan_CFixedPoint(GetPlayer.GetPrestige, ValueBreakdown.GetFixedPointValue)]"
																using = Status_Bad
																alpha = 0.6
															}
														}

														text_single = {
															# layoutpolicy_horizontal = expanding
															datacontext = "[GUIPotentialBuildingItem.GetPietyCost]"
															visible = "[GUIPotentialBuildingItem.HasPietyCost]"
															raw_text = "[ValueBreakdown.GetValue], you have [GetPlayer.GetPiety|0]."
															tooltip_enabled = "[ValueBreakdown.HasTooltip]"

															tooltipwidget = {
																widget_value_breakdown_tooltip = { }
															}

															background = {
																visible = "[LessThan_CFixedPoint(GetPlayer.GetPiety, ValueBreakdown.GetFixedPointValue)]"
																using = Status_Bad
																alpha = 0.6
															}
														}

														text_single = {
															# layoutpolicy_horizontal = expanding
															datacontext = "[GUIPotentialBuildingItem.GetConstructionTime]"
															raw_text = "[ValueBreakdown.GetValue]."
															tooltip_enabled = "[ValueBreakdown.HasTooltip]"

															tooltipwidget = {
																widget_value_breakdown_tooltip = { }
															}
														}

														expand = { }
													}

													expand = { }
												}
											}
										}

										hbox = {
											name = "dynamic_content"
											layoutpolicy_horizontal = expanding
											margin = {5 5}
											visible = no# "[Not(GetVariableSystem.Exists('hide_building_desc'))]"

											vbox = {
												spacing = 8

												hbox = {
													layoutpolicy_horizontal = expanding
													margin_left = 10

													text_label_left = {
														layoutpolicy_horizontal = expanding
														datacontext = "[GUIPotentialBuildingItem.GetBuilding]"
														text = CV_BUILDING_LEVEL_AND_NAME
														autoresize = no
													}
												}

												text_multi = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													autoresize = yes
													max_width = 330
													min_width = 330
													text = "[GUIPotentialBuildingItem.GetBuilding.GetEffectDescriptionAtProvince( Character.Self, Province.Self, Culture.Self )]"
													margin = { 15 10 }

													background = {
														using = Background_Frame
													}
												}
											}

											text_multi = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												margin = {5 0}
												margin_top = 30
												text = "[GUIPotentialBuildingItem.GetBuilding.GetTypeDescription]"
												default_format = "#F"
												autoresize = yes
												max_width = 280
												min_width = 280
											}
										}
									}
								}
							}
						}
					}
				}

				vbox = {
					vbox = {
						visible = "[HoldingView.IsSelectingBuildingToConstruct]"
						layoutpolicy_horizontal = expanding
						alwaystransparent = no

						## Upgrade Building
						vbox = {
							name = "upgrade"
							datacontext = "[HoldingView.GetTrack]"
							layoutpolicy_horizontal = expanding
							#minimumsize = { 0 700 }
							using = Window_Background_Subwindow
							margin_bottom = 0

							vbox = {
								datacontext = "[HoldingView.GetTrack]"
								visible = "[GUITrackItem.IsConstructing]"
								layoutpolicy_horizontal = expanding
								margin = { 0 15 }
								spacing = 10

								text_single = {
									text = "HOLDING_VIEW_IN_PROGRESS"
									margin = { 0 5 }
								}

								hbox = {
									spacing = 5

									button_text = {
										blockoverride "text" {
											raw_text = "Abort construction."
										}
										blockoverride "extra" {
											text_single = {
												raw_text = " Disabled."
												visible = "[Not(GUITrackItem.CanReplaceOrCancel)]"
												align = left
											}
										}
										visible = "[GUITrackItem.CanShowReplaceOrCancel]"
										enabled = "[GUITrackItem.CanReplaceOrCancel]"
										onclick = "[GUITrackItem.ReplaceOrCancel]"
										tooltip = "[GUITrackItem.GetReplaceOrCancelTooltip]"
									}
									text_single = {
										# parentanchor = center
										raw_text = "[GUITrackItem.GetConstructTimeLeft]."
									}
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								margin = { 15 0 }
								spacing = 10

								background = {
									using = Background_Area
								}

								hbox = {
									layoutpolicy_horizontal = expanding

									text_single = {
										raw_text = "[GUITrackItem.GetSelectedBuilding.GetTypeName], "
									}

									building_in_vassal_warning_hbox = {
									}

									expand = { }
								}

								buttons_window_control = {
									blockoverride "button_close"
									{
										onclick = "[HoldingView.CloseSubwindows]"
									}
								}
							}


							vbox = {
								layoutpolicy_horizontal = expanding
								# layoutpolicy_vertical = expanding
								margin = { 15 5 }
								spacing = 5

								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[Not(GUITrackItem.IsConstructing)]"
									margin_bottom = 10
									# layoutpolicy_horizontal = expanding
									button_primary_text = {
										layoutpolicy_horizontal = expanding
										blockoverride "text" {
											raw_text = "[SelectLocalization(EqualTo_int32(GUITrackItem.GetNextBuilding.GetLevel, '(int32)1'),'CONSTRUCT','UPGRADE')]"
										}
										blockoverride "disabled" {
											visible = "[Not(GUITrackItem.CanConstructNextBuilding)]"
											tooltip = "[GUITrackItem.GetNextBuildingTooltip]"

										}
										blockoverride "hotkey" {
											visible = "[GUITrackItem.CanConstructNextBuilding]"
										}
										onclick = "[GUITrackItem.OnClick]"
										enabled = "[GUITrackItem.CanConstructNextBuilding]"
										visible = "[GUITrackItem.HasNextBuilding]"
									}
									hbox = {
										layoutpolicy_horizontal = expanding
										visible = "[GUITrackItem.HasNextBuilding]"

										text_single = {
											raw_text = " Cost: "
										}

										hbox = {
											background = {
												using = Background_Area
												margin_bottom = 4
												margin_left = 6
											}

											text_single = {
												datacontext = "[GUITrackItem.GetNextGoldCost]"
												visible = "[GUITrackItem.HasNextGoldCost]"
												text = "[ValueBreakdown.GetValue]"
												tooltip_enabled = "[ValueBreakdown.HasTooltip]"

												tooltipwidget = {
													widget_value_breakdown_tooltip = { }
												}

												background = {
													visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
													using = Status_Bad
												}
											}

											text_single = {
												datacontext = "[GUITrackItem.GetNextPrestigeCost]"
												visible = "[GUITrackItem.HasNextPrestigeCost]"
												text = "[ValueBreakdown.GetValue]"
												tooltip_enabled = "[ValueBreakdown.HasTooltip]"

												tooltipwidget = {
													widget_value_breakdown_tooltip = { }
												}

												background = {
													visible = "[LessThan_CFixedPoint(GetPlayer.GetPrestige, ValueBreakdown.GetFixedPointValue)]"
													using = Status_Bad
												}
											}


											hbox = {
												layoutpolicy_horizontal = expanding
												datacontext = "[GUITrackItem.GetNextPietyCost]"
												visible = "[GUITrackItem.HasNextPietyCost]"

												text_single = {
													text = "[ValueBreakdown.GetValue]"
													tooltip_enabled = "[ValueBreakdown.HasTooltip]"

													tooltipwidget = {
														widget_value_breakdown_tooltip = { }
													}
												}

												text_single = {
													visible = "[LessThan_CFixedPoint(GetPlayer.GetPiety, ValueBreakdown.GetFixedPointValue)]"
													raw_text = "@warning_icon!"
												}

												expand = { }
											}

											text_single = {
												layoutpolicy_horizontal = expanding
												datacontext = "[GUITrackItem.GetNextConstructionTime]"
												text = "[ValueBreakdown.GetValue]"
												tooltip_enabled = "[ValueBreakdown.HasTooltip]"

												tooltipwidget = {
													widget_value_breakdown_tooltip = { }
												}
											}
										}

										expand = { }
									}

									button_text = {
										layoutpolicy_horizontal = expanding
										name = "back_button"
										blockoverride "text" {
											raw_text = "Go back, B."
										}
										visible = "[And(EqualTo_int32(GUITrackItem.GetNextBuilding.GetLevel,'(int32)1'), Not(GUITrackItem.IsConstructing))]"
										onclick = "[GUITrackItem.GoBack]"
										oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
										clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
										shortcut = "go_back"
										# shortcut = close_window
									}

									button_text = {
										layoutpolicy_horizontal = expanding
										blockoverride "text" {
											raw_text = "Replace building."
										}
										onclick = "[GUITrackItem.ReplaceOrCancel]"
										# tooltip = "[GUITrackItem.GetReplaceOrCancelTooltip]"
										visible = "[And(GUITrackItem.IsCurrentBuildingSelected, GUITrackItem.CanReplaceOrCancel)]"
									}

									expand = { }
								}

								# next level
								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[And(And(GUITrackItem.HasNextBuilding, Not(GUITrackItem.IsNextBuildingSelected)), GUITrackItem.IsCurrentBuildingSelected)]"
									datacontext = "[GUITrackItem.GetNextBuilding]"

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "Will upgrade to [Building.GetNameNoTooltip]."
									}

									text_multi = {
										datacontext = "[HoldingView.GetProvince.GetCounty.GetCulture]"
										layoutpolicy_horizontal = expanding
										autoresize = yes
										max_width = 700
										min_width = 330
										raw_text = "Effects on [Building.GetEffectDescriptionAtProvince( Character.Self, HoldingView.GetProvince, Culture.Self)]"
									}

									text_multi = {
										visible = "[Not(GetVariableSystem.Exists('hide_building_desc'))]"
										layoutpolicy_horizontal = expanding
										autoresize = yes
										max_width = 700
										min_width = 330
										raw_text = "[Building.GetDescription]."
									}

									vbox = {
										visible = "[And(And(GreaterThan_int32(GUITrackItem.GetSelectedBuilding.GetLevel,GUITrackItem.GetCurrentBuilding.GetLevel),GreaterThan_int32(GUITrackItem.GetSelectedBuilding.GetLevel,'(int32)1')), Not(GUITrackItem.IsNextBuildingSelected))]"
										layoutpolicy_horizontal = expanding
										margin_left = 10
										margin_bottom = 5
										# spacing = 5

										text_label_left = {
											layoutpolicy_horizontal = expanding
											text = "UPGRADE_COST"
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 10
											# margin = { 10 10 }

											hbox = {
												spacing = 10

												text_single = {
													datacontext = "[GUITrackItem.GetSelectedGoldCost]"
													visible = "[GUITrackItem.HasSelectedGoldCost]"
													text = "[ValueBreakdown.GetValue]"
													align = left
													tooltip_enabled = "[ValueBreakdown.HasTooltip]"

													tooltipwidget = {
														widget_value_breakdown_tooltip = { }
													}

													background = {
														visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
														using = Status_Bad
													}
												}

												text_single = {
													datacontext = "[GUITrackItem.GetSelectedPrestigeCost]"
													visible = "[GUITrackItem.HasSelectedPrestigeCost]"
													text = "[ValueBreakdown.GetValue]"
													align = left
													tooltip_enabled = "[ValueBreakdown.HasTooltip]"

													tooltipwidget = {
														widget_value_breakdown_tooltip = { }
													}
												}

												text_single = {
													datacontext = "[GUITrackItem.GetSelectedPietyCost]"
													visible = "[GUITrackItem.HasSelectedPietyCost]"
													text = "[ValueBreakdown.GetValue]"
													align = left
													tooltip_enabled = "[ValueBreakdown.HasTooltip]"

													tooltipwidget = {
														widget_value_breakdown_tooltip = { }
													}
												}

												text_single = {
													datacontext = "[GUITrackItem.GetSelectedConstructionTime]"
													raw_text = "[ValueBreakdown.GetValue]."
													align = left
													tooltip_enabled = "[ValueBreakdown.HasTooltip]"

													tooltipwidget = {
														widget_value_breakdown_tooltip = { }
													}
												}
											}

											expand = { }
										}

										text_single = {
											raw_text = "Warning, can't construct. See tooltip."
											tooltip = "[GUITrackItem.GetSelectedBuildingBlockReasons]"
											visible = "[Not(GUITrackItem.CanConstructSelectedBuilding)]"
											align = left
											layoutpolicy_horizontal = expanding
										}
									}
								}

								# current building
								vbox = {
									layoutpolicy_horizontal = expanding
									# visible = "[GUITrackItem.IsCurrentBuildingSelected]"
									datacontext = "[GUITrackItem.GetSelectedBuilding]"

									hbox = {
										spacing = 3
										layoutpolicy_horizontal = expanding

										text_single = {
											visible = "[GUITrackItem.IsCurrentBuildingSelected]"
											raw_text = "Current building,"
										}

										text_single = {
											visible = "[Not(GUITrackItem.IsCurrentBuildingSelected)]"
											raw_text = "Previewing"
										}

										text_single = {
											raw_text = "[Building.GetNameNoTooltip]"
										}

										expand = { }
									}

									text_multi = {
										datacontext = "[HoldingView.GetProvince.GetCounty.GetCulture]"
										layoutpolicy_horizontal = expanding
										autoresize = yes
										max_width = 700
										min_width = 330
										raw_text = "Effects on [Building.GetEffectDescriptionAtProvince( Character.Self, HoldingView.GetProvince, Culture.Self)]"
									}

									text_multi = {
										visible = "[Not(GetVariableSystem.Exists('hide_building_desc'))]"
										layoutpolicy_horizontal = expanding
										autoresize = yes
										max_width = 700
										min_width = 330
										raw_text = "[Building.GetDescription]."
									}

									vbox = {
										visible = "[And(And(GreaterThan_int32(GUITrackItem.GetSelectedBuilding.GetLevel,GUITrackItem.GetCurrentBuilding.GetLevel),GreaterThan_int32(GUITrackItem.GetSelectedBuilding.GetLevel,'(int32)1')), Not(GUITrackItem.IsNextBuildingSelected))]"
										layoutpolicy_horizontal = expanding
										margin_left = 10
										margin_bottom = 5
										# spacing = 5

										text_label_left = {
											layoutpolicy_horizontal = expanding
											text = "UPGRADE_COST"
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 10
											# margin = { 10 10 }

											hbox = {
												spacing = 10

												text_single = {
													datacontext = "[GUITrackItem.GetSelectedGoldCost]"
													visible = "[GUITrackItem.HasSelectedGoldCost]"
													text = "[ValueBreakdown.GetValue]"
													align = left
													tooltip_enabled = "[ValueBreakdown.HasTooltip]"

													tooltipwidget = {
														widget_value_breakdown_tooltip = { }
													}

													background = {
														visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
														using = Status_Bad
													}
												}

												text_single = {
													datacontext = "[GUITrackItem.GetSelectedPrestigeCost]"
													visible = "[GUITrackItem.HasSelectedPrestigeCost]"
													text = "[ValueBreakdown.GetValue]"
													align = left
													tooltip_enabled = "[ValueBreakdown.HasTooltip]"

													tooltipwidget = {
														widget_value_breakdown_tooltip = { }
													}
												}

												text_single = {
													datacontext = "[GUITrackItem.GetSelectedPietyCost]"
													visible = "[GUITrackItem.HasSelectedPietyCost]"
													text = "[ValueBreakdown.GetValue]"
													align = left
													tooltip_enabled = "[ValueBreakdown.HasTooltip]"

													tooltipwidget = {
														widget_value_breakdown_tooltip = { }
													}
												}

												text_single = {
													datacontext = "[GUITrackItem.GetSelectedConstructionTime]"
													raw_text = "[ValueBreakdown.GetValue]."
													align = left
													tooltip_enabled = "[ValueBreakdown.HasTooltip]"

													tooltipwidget = {
														widget_value_breakdown_tooltip = { }
													}
												}
											}

											expand = { }
										}

										text_single = {
											raw_text = "Warning, can't construct. See tooltip."
											tooltip = "[GUITrackItem.GetSelectedBuildingBlockReasons]"
											visible = "[Not(GUITrackItem.CanConstructSelectedBuilding)]"
											align = left
											layoutpolicy_horizontal = expanding
										}
									}
								}
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								onclick = "[GetVariableSystem.Toggle('hide_building_desc')]"
								blockoverride "text" {
									margin_left = 10
									raw_text = "[Select_CString(GetVariableSystem.Exists('hide_building_desc'), 'Show', 'Hide')] descriptions, Shift D."
								}
								shortcut = mapmode_house_secondary
							}

							text_single = {
								margin_left = 10
								raw_text = "All building levels:"
								layoutpolicy_horizontal = expanding
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								margin_bottom = 10
								margin_left = 10

								### PREVIOUS BUILDINGS
								vbox = {
									name = "level_track_previous"
									datamodel = "[GUITrackItem.GetPreLevelItems]"

									item = {
										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "[BuildingLevelItem.GetBuilding.GetNameNoTooltip]"
											}
											blockoverride "extra" {
												text_single = {
													raw_text = ", selected"
													visible = "[BuildingLevelItem.IsSelected]"
													align = left
												}
											}
											blockoverride "dot" { }
											onclick = "[BuildingLevelItem.OnClick]"
										}
									}
								}

								### CURRENT BUILDING


								button_text = {
									layoutpolicy_horizontal = expanding
									blockoverride "text" {
										raw_text = "[GUITrackItem.GetCurrentBuilding.GetNameNoTooltip]"
									}
									blockoverride "extra" {
										text_single = {
											raw_text = ", selected"
											visible = "[GUITrackItem.IsCurrentBuildingSelected]"
											align = left
										}
									}
									blockoverride "dot" { }
									visible = "[GUITrackItem.HasCurrentBuilding]"
									onclick = "[GUITrackItem.OnCurrentBuildingClick]"
								}


								### NEXT BUILDING

								button_text = {
									layoutpolicy_horizontal = expanding
									blockoverride "text" {
										raw_text = "[GUITrackItem.GetNextBuilding.GetNameNoTooltip]"
									}
									blockoverride "extra" {
										text_single = {
											raw_text = ", selected"
											visible = "[GUITrackItem.IsNextBuildingSelected]"
											align = left
										}
									}
									blockoverride "dot" { }
									visible = "[GUITrackItem.HasNextBuilding]"
									onclick = "[GUITrackItem.OnNextBuildingClick]"
								}

								#Post Track
								### LEVEL TRACK
								vbox = {
									layoutpolicy_horizontal = expanding
									name = "level_track_next"
									datamodel = "[GUITrackItem.GetPostLevelItems]"

									item = {
										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "[BuildingLevelItem.GetBuilding.GetNameNoTooltip]"
											}
											blockoverride "extra" {
												text_single = {
													raw_text = ", selected"
													visible = "[BuildingLevelItem.IsSelected]"
													align = left
												}
											}
											blockoverride "dot" { }
											onclick = "[BuildingLevelItem.OnClick]"
										}
									}
								}

								expand = { }
							}
						}
					}

					expand = { }
				}

				expand = { }
			}
		}
	}

	# button = {
	# 	shortcut = close_window
	# 	onclick = "[GetVariableSystem.Clear('county_tabs')]"
	# 	onclick = "[GetVariableSystem.Clear('holding_tabs')]"
	# 	onclick = "[HoldingView.CloseHoldingConstruction]"
	# 	# onclick = "[HoldingView.Close]"
	# }
}

######################################################
############ HOLDING TYPE SELECTION VIEW #############
######################################################

window = {
	name = "holding_type_selection_view"
	movable = yes
	layer = top
	parentanchor = bottom|hcenter
	position = { 40 0 } #40
	using = Animation_ShowHide_Quick
	using = TooltipFocus

	using = Window_Background_Subwindow

	vbox = {
		set_parent_size_to_minimum = yes
		margin = { 4 4 }
		margin_bottom = 15
		spacing = 15

		header_pattern = {
			layoutpolicy_horizontal = expanding
			size = { 0 30 }

			blockoverride "header_text"
			{
				text = "CREATE_NEW_HOLDING_HEADING"
			}

			blockoverride "button_close"
			{
				onclick = "[HoldingView.CloseHoldingConstruction]"
			}
		}

		building_in_vassal_warning_hbox = { }

		flowcontainer = {
			name = "holding_types"
			datamodel = "[HoldingView.GetHoldingTypeItems]"
			layoutpolicy_horizontal = expanding
			ignoreinvisible = yes
			direction = vertical
			spacing = 5
			margin_left = 5

			button_text = {
				layoutpolicy_horizontal = expanding
			    blockoverride "text" {
			        raw_text = "[Select_CString(GetVariableSystem.Exists('hide_holding_desc'), 'Hide', 'Show')] descriptions, Shift D."
			    }
				shortcut = mapmode_house_secondary
				onclick = "[GetVariableSystem.Toggle('hide_holding_desc')]"
			}
			# margin = { 10 10 }

			item = {
				button_standard = {
					size = { 600 148 }
					enabled = "[HoldingTypeItem.CanConstructBuilding]"
					onclick = "[HoldingTypeItem.OnClick]"
					datacontext = "[HoldingTypeItem.GetProvince]"

					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical
						resizeparent = yes
						margin = { 10 5 }
						spacing = 5

						button_text = {
							tooltip = "[HoldingTypeItem.GetTooltip]"
							alwaystransparent = yes

						    blockoverride "text" {
								raw_text = "Build [HoldingTypeItem.GetHoldingType.GetName]."
						    }
							blockoverride "disabled" {
								visible = "[Not(HoldingTypeItem.CanConstructBuilding)]"
							}
							visible = "[Not(GetVariableSystem.Exists('hide_holding_desc'))]"
						}

						flowcontainer = {
							ignoreinvisible = yes
							direction = vertical
							visible = "[GetVariableSystem.Exists('hide_holding_desc')]"
							# layoutpolicy_horizontal = expanding

							text_multi = {
								raw_text = "[HoldingTypeItem.GetTooltip]."
								max_width = 700
								min_width = 700
								autoresize = yes
								alwaystransparent = yes
							}

							text_multi = {
								name = "wrong_type"
								max_width = 700
								min_width = 700
								autoresize = yes
								visible = "[Not(HoldingTypeItem.IsValidForPlayer)]"
								size = { 35 35 }
								raw_text = "HOLDING_SELECTION_VIEW_WRONG_HOLDING_TYPE"
								alwaystransparent = yes
							}
						}
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types CountyViewTypes
{
	type widget_building_text = button {
		size = { @building_width 20 }
		allow_outside = yes
		onclick = "[GUIBuildingItem.OnClick]"
		down = "[GUIBuildingItem.IsHighlighted]"
		enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"

		vbox = {
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 5

				text_single = {
					raw_text = "Upgrade"
					visible = "[GUIBuildingItem.CanUpgrade]"
				}

				text_single = {
					raw_text = "Empty. Preview."
					visible = "[And(Not(GUIBuildingItem.IsBuildNewIconShown), Not(GUIBuildingItem.HasLevel))]"
				}

				text_single = {
					text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetNameNoTooltip]"
					visible = "[GUIBuildingItem.HasLevel]"
				}

				text_single = {
					visible = "[GUIBuildingItem.HasLevel]"
					raw_text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]."
				}

				text_single = {
					raw_text = "Button disabled."
					visible = "[Not(GUIBuildingItem.IsBuildingButtonEnabled)]"
				}

				block "normal" {
					text_single = {
						raw_text = "Build new, Enter."
						visible = "[And(And(GUIBuildingItem.IsBuildNewIconShown, GUIBuildingItem.IsBuildingButtonEnabled), Not(GUIBuildingItem.HasLevel))]"

						button = {
							onclick = "[GUIBuildingItem.OnClick]"
							shortcut = confirm
						}
					}
				}

				block "special" {
					text_single = {
						raw_text = "Build new."
						visible = "[And(And(GUIBuildingItem.IsBuildNewIconShown, GUIBuildingItem.IsBuildingButtonEnabled), Not(GUIBuildingItem.HasLevel))]"
					}
				}

				text_single = {
					raw_text = "Construction: [GUIBuildingItem.GetConstructingProgress|0]%."
					tooltip = "[GUIBuildingItem.GetTooltip]"
					visible = "[GUIBuildingItem.IsConstructing]"
				}

				text_single = {
					raw_text = "Building disabled."
					visible = "[GUIBuildingItem.IsBuildingDisabled]"
				}

				text_single = {
					visible = "[GUIBuildingItem.HasLevel]"
					raw_text = "Tooltip."
					tooltip = "[GUIBuildingItem.GetTooltip]"
				}
				expand = { }
			}

			expand = { }
		}
	}

	type adjacent_county_button = button_text {
		block "datacontext" {
			# datacontext = "[HoldingView.GetProvince]"
			datacontext = "[Scope.Title]"
		}
		blockoverride "extra" {
			spacing = 3

			text_single = {
				raw_text = "Hostile,"
				visible = "[GetScriptedGui('is_hostile_county').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'target', Title.GetProvince.MakeScope ).End )]"
			}

			text_single = {
				visible = "[GreaterThan_CFixedPoint( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Title.GetProvince.MakeScope).ScriptValue('enemies_in_the_county'), '(CFixedPoint)0' )]"
				raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Title.GetProvince.MakeScope).ScriptValue('enemies_in_the_county')] enemies,"
			}

			text_single = {
				raw_text = "[Title.GetBaseNameNoTierNoTooltip], "
			}
			# text_single = {
			# 	raw_text = "[Scope.Title.Custom('county_direction')]."
			# }
			text_single = {
				raw_text = "[GuiScope.SetRoot(HoldingView.GetProvince.MakeScope).AddScope('second', Title.GetProvince.MakeScope).Custom('province_direction')],"
			}
			text_single = {
				visible = "[Not(Or(ObjectsEqual(Title.GetHolder.GetTopLiege, GetPlayer), ObjectsEqual(Title.GetHolder, GetPlayer)))]"
				raw_text = "in [Title.GetHolder.GetTopLiege.GetPrimaryTitle.GetNameNoTierNoTooltip]."
			}

			text_single = {
				raw_text = "your county."
				visible = "[ObjectsEqual(Title.GetHolder, GetPlayer)]"
			}
			text_single = {
				visible = "[And(ObjectsEqual(Title.GetHolder.GetTopLiege, GetPlayer), Not(ObjectsEqual(Title.GetHolder, GetPlayer)))]"
				raw_text = "in your realm."
			}
			block "county_extra" { }
			# [Scope.Title.GetHolder.GetTopLiege.RealmSize] counties.
		}
		block "click" {
			# onclick = "[CloseGameView('holding_view')]"
			onclick = "[OpenGameViewData('holding_view', Scope.Title.GetProvince.Self)]"
			onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
			onclick = "[GetVariableSystem.Clear('county_tabs')]"
			onclick = "[PdxGuiTriggerAllAnimations('adjacent_counties')]"
			onrightclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
		}
	}

	type widget_building_item = widget {
		parentanchor = bottom
		size = { 55 55 }
		enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"
		tooltip = "[GUIBuildingItem.GetTooltip]"
		using = tooltip_ne

		button_standard = {
			name = "building_button"
			size = { 100% 100% }
			onclick = "[GUIBuildingItem.OnClick]"
			down = "[GUIBuildingItem.IsHighlighted]"

			highlight_icon = {
				name = "build_new_icon"
				visible = "[And(And(GUIBuildingItem.IsBuildNewIconShown, GUIBuildingItem.IsBuildingButtonEnabled), Not(GUIBuildingItem.HasLevel))]"
				parentanchor = center
				size = { 28 28 }
				alpha = 0.7
				texture = "gfx/interface/icons/symbols/icon_plus.dds"
			}

			icon_building = {
				name = "building_icon"
				visible = "[Not( GUIBuildingItem.CanUpgrade )]"
				parentanchor = center
				size = { 40 40 }
				texture = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetTypeIcon]"
			}

			highlight_icon_building = {
				name = "building_icon_can_upgrade"
				visible = "[GUIBuildingItem.CanUpgrade]"
				parentanchor = center
				size = { 40 40 }
				texture = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetTypeIcon]"
			}

			text_single= {
				visible = "[GUIBuildingItem.HasLevel]"
				text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]"
				parentanchor = bottom|right
				position = { -6 -3 }
				fontsize = 15
				default_format = "#low;bold"
				align = left

				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}

				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}

				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}
			}

			warning_icon = {
				name = "reduced_by_fixable_situation"
				visible = "[GUIBuildingItem.IsBuildingDisabled]"
				size = { 25 25 }
			}
		}

		icon = {
			name = "building_slot"
			size = { 100% 100% }
			using = Background_Area
			visible = "[GUIBuildingItem.IsBuildingSlotShown]"
		}

		progressbar_standard = {
			name = "construct_progressbar"
			visible = "[GUIBuildingItem.IsConstructing]"
			parentanchor = bottom
			position = { 0 8 }
			alwaystransparent = yes
			size = { 100% 10 }
			value = "[GUIBuildingItem.GetConstructingProgress]"
			direction = horizontal
			tooltip = "[GUIBuildingItem.GetTooltip]"
		}
	}

	type building_in_vassal_warning_hbox = hbox
	{
		name = "vassal_warning"
		visible = "[Not( ObjectsEqual( HoldingView.GetHolder, GetPlayer ) )]"
		layoutpolicy_horizontal = expanding
		margin = { 5 0 }

		# coa_title_tiny = {
		# 	datacontext = "[HoldingView.GetHolder.GetPrimaryTitle]"
		# }

		text_single = {
			text = "HOLDING_VIEW_BUILDING_IN_VASSAL"
			layoutpolicy_horizontal = expanding
		}
	}

	type county_task_button = button_text {
		layoutpolicy_horizontal = expanding
		datacontext = "[HoldingView.GetCountyTitle]"

		visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('county', Title.MakeScope).AddScope('councillor', Character.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End )]"

		blockoverride "disabled" {
			visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('county', Title.MakeScope).AddScope('councillor', Character.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End ))]"
		}

		enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('county', Title.MakeScope).AddScope('councillor', Character.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End )]"

		tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('county', Title.MakeScope).AddScope('councillor', Character.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End )]"

		tooltip_enabled = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('county', Title.MakeScope).AddScope('councillor', Character.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End ))]"

		onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('county', Title.MakeScope).AddScope('councillor', Character.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End )]"
	}

	type court_task_button = button_text {
		layoutpolicy_horizontal = expanding

		visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target_character', HoldingView.GetCountyTitle.GetHolder.MakeScope).AddScope('councillor', Character.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End )]"

		blockoverride "disabled" {
			visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target_character', HoldingView.GetCountyTitle.GetHolder.MakeScope).AddScope('councillor', Character.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End ))]"
		}

		enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target_character', HoldingView.GetCountyTitle.GetHolder.MakeScope).AddScope('councillor', Character.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End )]"

		tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target_character', HoldingView.GetCountyTitle.GetHolder.MakeScope).AddScope('councillor', Character.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End )]"

		tooltip_enabled = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target_character', HoldingView.GetCountyTitle.GetHolder.MakeScope).AddScope('councillor', Character.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End ))]"

		onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target_character', HoldingView.GetCountyTitle.GetHolder.MakeScope).AddScope('councillor', Character.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End )]"
	}

	type active_task_hbox = hbox {
		layoutpolicy_horizontal = expanding
		datacontext = "[HoldingView.GetCountyTitle]"
		datacontext = "[Character.GetActiveCouncilTask]"
		visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('county', Title.MakeScope).AddScope('councillor', Character.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End )]"

		spacing = 3

		tooltipwidget = {
			council_task_progress_breakdown_widget = { }
		}

		text_single = {
			block "task" {
				raw_text = "Converting [Title.GetCountyData.GetFaith.GetAdjective] faith."
			}
		}

		text_single = {
			raw_text = "[ActiveCouncilTask.GetETA],"
		}

		text_single = {
			raw_text = "[ActiveCouncilTask.GetProgress|0]%."
			visible = "[ActiveCouncilTask.GetTaskType.IsPercentageTask]"
		}

		text_single = {
			raw_text = "[ActiveCouncilTask.GetProgress|0]%."
			visible = "[ActiveCouncilTask.GetTaskType.IsPercentageTask]"
		}

		text_single = {
			raw_text = "[Character.GetFirstNameNoTooltip],"
		}

		text_single = {
			block "skill" {
				raw_text = "[Character.GetSkill('learning')] learning."
			}
		}

		expand = { }
	}

	type active_court_task_hbox = hbox {
		layoutpolicy_horizontal = expanding
		datacontext = "[HoldingView.GetCountyTitle]"
		datacontext = "[Character.GetActiveCouncilTask]"
		visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('county', Title.MakeScope ).AddScope('target_character', HoldingView.GetCountyTitle.GetHolder.MakeScope).AddScope('councillor', Character.MakeScope).AddScope('councillor_liege', GetPlayer.MakeScope).End )]"

		spacing = 3

		tooltipwidget = {
			council_task_progress_breakdown_widget = { }
		}

		text_single = {
			block "task" {
				raw_text = "Finding secrets in [HoldingView.GetCountyTitle.GetHolder.GetFirstNamePossessiveOrMyNoTooltip] court."
			}
		}

		text_single = {
			raw_text = "[ActiveCouncilTask.GetETA],"
		}

		text_single = {
			raw_text = "[ActiveCouncilTask.GetProgress|0]%."
		}

		text_single = {
			raw_text = "[Character.GetFirstNameNoTooltip],"
		}

		text_single = {
			block "skill" {
				raw_text = "[Character.GetSkill('learning')] intrigue."
			}
		}

		expand = { }
	}
}

