window = {
	name = "modify_vassal_contract_interaction_window"
	layer = top

	using = base_ocr_window

  blockoverride "bg_margins"
  {
      # margin = { -23 0 }
  }

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	button_close = {
		onclick = "[ModifyVassalContractInteractionWindow.Close]"
		shortcut = close_window
	}

	window_ocr = {
		blockoverride "ocr_header" {

		}
		blockoverride "ocr_content" {
			vbox = {
				name = "window_content"
				layoutpolicy_horizontal = expanding
				datacontext = "[ModifyVassalContractInteractionWindow.GetCharacterInteractionConfirmationWindow]"
				datacontext = "[ModifyVassalContractInteractionWindow.GetContractPreview]"
				datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"


				vbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					char_name = {
						layoutpolicy_horizontal = expanding
						blockoverride "pre" {
							spacing = 3
							text_single = {
								visible = "[Character.GetGovernment.IsType('feudal_government')]"
								text = "FEUDAL_CONTRACT"
							}

							text_single = {
								visible = "[Not(Character.GetGovernment.IsType('feudal_government'))]"
								raw_text = "Clan vassal contract"
							}
							text_single = {
								raw_text = "with"
							}
						}
						datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						shortcut = map_mode_1
						onclick = "[Toggle('contract_details')]"
						blockoverride "text" {
							raw_text = "Details, [Collapse('contract_details')] E."
						}
					}


					vbox = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterInteractionConfirmationWindow.GetEffectsDescription.GetDisplayedEffects]"


						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Isnt('contract_details')]"

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not( ModifyVassalContractInteractionWindow.IsPreviewSameAsCurrent )]"

								text_single = {
									layoutpolicy_horizontal = expanding
									text = CONTRACT_EFFECTS_HEADER
								}

								# effects
								vbox_character_interaction_effects_simple = {
									layoutpolicy_horizontal = expanding
									datacontext = "[CharacterInteractionConfirmationWindow.GetEffectsDescription]"
									blockoverride "width" {
										max_width = 650
									}
								}

							}

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not( ModifyVassalContractInteractionWindow.IsPreviewSameAsCurrent )]"

								button_primary_text = {
									layoutpolicy_horizontal = expanding
									visible = "[DisplayedInteractionEffects.HasAnyEffects]"
									name = "send_offer_button"

									blockoverride "text" {
										raw_text = "Confirm [CharacterInteractionConfirmationWindow.GetSendName]"
									}

									blockoverride "disabled" {
										visible = "[Not(CharacterInteractionConfirmationWindow.CanSend)]"
									}

									enabled = "[CharacterInteractionConfirmationWindow.CanSend]"
									onclick = "[ModifyVassalContractInteractionWindow.Send]"
									tooltip = "[CharacterInteractionConfirmationWindow.GetCanSendDescription]"
									clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_advance"
								}

								vbox_interaction_options = {
									layoutpolicy_horizontal = expanding
									margin = { 0 0 }
									margin_top = 5
									name = "tutorial_highlight_modify_contract_hook_button"
									visible = "[And(CharacterInteractionConfirmationWindow.HasOptions, DisplayedInteractionEffects.HasAnyEffects)]"
								}

								button_text = {
									shortcut = increase_speed_2
									layoutpolicy_horizontal = expanding
									name = "reset_button"
									onclick = "[ModifyVassalContractInteractionWindow.ResetToCurrent]"
									visible = "[Not( ModifyVassalContractInteractionWindow.IsPreviewSameAsCurrent )]"
									blockoverride "text" {
										raw_text = "Reset all changes, X"
									}
									blockoverride "dot" {
									}
									using = tooltip_above
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								vbox = {
									visible = "[Not( ModifyVassalContractInteractionWindow.IsPreviewSameAsCurrent )]"
									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding
										datacontext = "[ModifyVassalContractInteractionWindow.GetContractPreviewOpinionBreakdown]"

										visible = "[Not(VassalContract.GetVassal.IsLocalPlayer)]"
										tooltip_enabled = "[ValueBreakdown.HasTooltip]"
										tooltipwidget = {
											widget_value_breakdown_tooltip = { }
										}

										text_single = {
											raw_text = "Opinion will change to [VassalContract.GetVassalOpinionModification|+=]"
										}

										text_single = {
											raw_text = ". Current [VassalContract.GetVassal.GetOpinionOf( GetPlayer )]."
										}

										expand = { }
									}
								}

								text_single = {
									raw_text = "Will provide:"
									layoutpolicy_horizontal = expanding
									visible = "[Not( ModifyVassalContractInteractionWindow.IsPreviewSameAsCurrent )]"
								}
								# tax and levy

								vbox = {
									name = "tax_levy_opinion_info"
									layoutpolicy_horizontal = expanding


									text_single = {
										visible = "[ModifyVassalContractInteractionWindow.IsPreviewSameAsCurrent]"
										layoutpolicy_horizontal = expanding
										raw_text = "[CharacterInteractionConfirmationWindow.GetRecipient.GetFirstNameNoTooltip] provides:"
									}

									hbox = {
										spacing = 5
										layoutpolicy_horizontal = expanding
										tooltipwidget = {
											my_realm_window_contribution_tooltip = {
												datacontext = "[ModifyVassalContractInteractionWindow.GetContractPreviewTaxBreakdown]"
												blockoverride "levy_info_visible"
												{
													visible = no
												}
												blockoverride "contribution_tooltip_header"
												{
													text = "[SelectLocalization(VassalContract.GetVassal.IsLocalPlayer, 'MRW_TT_TAXES_TO_MY_LIEGE', 'MRW_TT_TAXES_TO_ME')]"
												}
											}
										}
										datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"

										text_single = {
											raw_text = "[ModifyVassalContractInteractionWindow.GetContractPreviewCachedTax|1] gold,"
										}

										text_single = {
											raw_text = "[VassalContract.GetTaxRatioForLiege|0%] of [CharacterInteractionConfirmationWindow.GetRecipient.GetHerHis] income of [Character.MakeScope.ScriptValue('monthly_character_income_sval')|1]."
										}

										text_single = {
											visible = "[Character.GetGovernment.IsType('feudal_government')]"
											raw_text = "[VassalContract.GetShortObligationLevelNameWithHighlightFor( 'feudal_government_taxes' )] tax level."
										}

										expand = { }
									}

									hbox = {
										spacing = 5
										layoutpolicy_horizontal = expanding
										tooltipwidget = {
											my_realm_window_contribution_tooltip = {
												datacontext = "[ModifyVassalContractInteractionWindow.GetContractPreviewLeviesBreakdown]"
												blockoverride "tax_info_visible"
												{
													visible = no
												}
												blockoverride "contribution_tooltip_header"
												{
													text = "[SelectLocalization(VassalContract.GetVassal.IsLocalPlayer, 'MRW_TT_LEVIES_TO_MY_LIEGE', 'MRW_TT_LEVIES_TO_ME')]"
												}
											}
										}

										text_single = {
											raw_text = "[ModifyVassalContractInteractionWindow.GetContractPreviewCachedLeviesFormatted|1] levies,"
										}

										text_single = {
											datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
											raw_text = "[VassalContract.GetLevyRatioForLiege|0%]. Total strength: [Character.GetMilitaryStrengthText] men."
										}

										text_single = {
											visible = "[Character.GetGovernment.IsType('feudal_government')]"
											raw_text = "[VassalContract.GetShortObligationLevelNameWithHighlightFor( 'feudal_government_levies' )] levies level."
										}

										expand = { }
									}

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "You are not [VassalContract.GetVassal.GetHerHis] rightful liege, decreasing obligations by [Subtract_CFixedPoint( '(CFixedPoint)1',  GuiScope.SetRoot(VassalContract.GetVassal.MakeScope).ScriptValue('de_jure_penalty'))|%0]."
										visible = "[LessThan_CFixedPoint(GuiScope.SetRoot(VassalContract.GetVassal.MakeScope).ScriptValue('de_jure_penalty'), '(CFixedPoint)1')]"
									}

									text_single = {
										layoutpolicy_horizontal = expanding
										visible = "[ModifyVassalContractInteractionWindow.IsPreviewSameAsCurrent]"
										raw_text = "[VassalContract.GetVassal.GetOpinionOf( GetPlayer )] opinion. [VassalContract.GetVassal.GetVassalStance.GetName]."
										tooltip = "[VassalContract.GetVassal.GetOpinionBreakdownText( GetPlayer)]"
									}
								}
							}
						}

						vbox = {
							name = "no_effect_notice"
							visible = "[Not( DisplayedInteractionEffects.HasAnyEffects )]"
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding
								visible = "[And( Not( DisplayedInteractionEffects.HasAnyEffects ), Character.GetGovernment.IsType( 'feudal_government' ) )]"
								text = "VASSAL_CONTRACT_OBLIGATION_NO_EFFECT"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								visible = "[And( Not( DisplayedInteractionEffects.HasAnyEffects ), Not( Character.GetGovernment.IsType( 'feudal_government' ) ) )]"
								text = "NON_FEUDAL_VASSAL_CONTRACT_OBLIGATION_NO_EFFECT"
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Not( ModifyVassalContractInteractionWindow.IsPreviewSameAsCurrent )]"
							## Options

							hbox = {
								visible = "[And(DisplayedInteractionEffects.HasAnyEffects, ObjectsEqual( GetPlayer, VassalContract.GetLiege ))]"
								layoutpolicy_horizontal = expanding
								name = "change_only_once_text"

								text_single = {
									visible = "[Character.GetGovernment.IsType('feudal_government')]"
									text = "VASSAL_CONTRACT_OBLIGATION_ONLY_ONCE"
								}

								text_single = {
									visible = "[Not(Character.GetGovernment.IsType('feudal_government'))]"
									text = "NON_FEUDAL_VASSAL_CONTRACT_OBLIGATION_ONLY_ONCE"
								}

								dot = { }

								expand = { }
							}
						}
					}

					vbox = {
						name = "obligation_level_negotiation"
						layoutpolicy_horizontal = expanding

						# Vbox for Feudal Contract
						contract_details = {
							visible = "[Character.GetGovernment.IsType('feudal_government')]"
						}

						# Vbox for other government contract

						contract_details = {
							visible = "[Not(Character.GetGovernment.IsType('feudal_government'))]"
							blockoverride "levels" {
							}
							blockoverride "radio" {
								visible = "[And(Not(Character.GetPrimaryTitle.IsBarony),Not( Character.GetPrimaryTitle.IsCounty))]"
							}
						}
					}

					expand = { }
				}
			}
		}
	}

	window_modify_vassal_old = {}
}


types OCR_Contract {
	type contract_details = vbox {
		name = "paper_contract"
		layoutpolicy_horizontal = expanding

		block "levels" {

			vbox = {
				name = "major_line_tree_levels"
				layoutpolicy_horizontal = expanding

				datamodel = "[ModifyVassalContractInteractionWindow.AccessObligationLevelLineTrees]"

				item = {
					vbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding

						datacontext = "[ObligationLevelLineTree.GetContainerData]"

						visible = "[ObligationContainerData.ShouldShow( ModifyVassalContractInteractionWindow.GetContractPreview )]"

						text_single = {
							margin_left = 10
							layoutpolicy_horizontal = expanding
							raw_text = "[ObligationContainerData.GetName]:"
						}

						vbox = {
							layoutpolicy_horizontal = expanding

							name = "obligation_level_item_line_area" # Name used in code do not change

							datamodel = "[ObligationLevelLineTree.AccessItems]"

							item = {
								widget = {
									datacontext = "[ObligationLevelLineItem.AccessItem]"
									size = { 580 25 }
									position = "[ObligationLevelLineTree.GetItemPosition( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"

									button_text = {
										onclick = "[Clear('contract_details')]"
										blockoverride "pre" {
											text_single = {
												raw_text = " Choose"
												visible = "[Not( ModifyVassalContractInteractionWindow.IsObligationLevelSelected( ModifyVassalContractInteractionWindowObligationLevelOption.Self ) )]"
											}
										}
										blockoverride "extra" {
											space = { }
											text_single = {
												text = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
												visible = "[Not( ModifyVassalContractInteractionWindow.IsObligationLevelSelected( ModifyVassalContractInteractionWindowObligationLevelOption.Self ) )]"
											}

											text_single = {
												text = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
												visible = "[ModifyVassalContractInteractionWindow.IsObligationLevelSelected( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"
											}

											text_single = {
												raw_text = ", current level"
												visible = "[ModifyVassalContractInteractionWindow.IsCurrentObligationLevel( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"
											}

											text_single = {
												raw_text = ", Selected"
												visible = "[ModifyVassalContractInteractionWindow.IsObligationLevelSelected( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"
											}

											text_single = {
												raw_text = ". Tooltip"
												tooltip = "[ModifyVassalContractInteractionWindow.GetObligationLevelTooltipFor( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"
											}
											dot = { }
										}
										blockoverride "disabled" {
											align = left
											visible = "[Not(ModifyVassalContractInteractionWindow.IsObligationLevelEnabled( ModifyVassalContractInteractionWindowObligationLevelOption.Self ))]"
										}

										onclick = "[ModifyVassalContractInteractionWindow.SelectObligationLevel( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"
										enabled = "[ModifyVassalContractInteractionWindow.IsObligationLevelEnabled( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"
									}
								}
							}
						}
					}
				}
			}
		}

		vbox = {
			name = "minor_list_levels_radio_buttons"
			datamodel = "[ModifyVassalContractInteractionWindow.AccessObligationLevelRadioButtons]"
			layoutpolicy_horizontal = expanding
			block "radio" { }

			item = {
				vbox = {
					layoutpolicy_horizontal = expanding
					datacontext = "[ObligationLevelRadioButtons.GetContainerData]"

					visible = "[ObligationContainerData.ShouldShow( ModifyVassalContractInteractionWindow.GetContractPreview )]"

					text_single = {
						text = "[ObligationContainerData.GetName]"
						layoutpolicy_horizontal = expanding
					}

					vbox = {
						datamodel = "[ObligationLevelRadioButtons.Access]"
						layoutpolicy_horizontal = expanding
						item = {
							button_text = {
								tooltip = "[ModifyVassalContractInteractionWindow.GetObligationLevelTooltipFor( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"
								layoutpolicy_horizontal = expanding
								onclick = "[ModifyVassalContractInteractionWindow.SelectObligationLevel( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"
								visible = "[ModifyVassalContractInteractionWindow.IsObligationLevelVisible( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"
								blockoverride "pre" {
									text_single = {
										raw_text = "Can't"
										visible = "[And(Not(ModifyVassalContractInteractionWindow.IsObligationLevelEnabled( ModifyVassalContractInteractionWindowObligationLevelOption.Self )), Not(ModifyVassalContractInteractionWindow.IsObligationLevelSelected( ModifyVassalContractInteractionWindowObligationLevelOption.Self )))]"
										margin_right = 3
									}
									text_single = {
										raw_text = "Choose"
										visible = "[Not( ModifyVassalContractInteractionWindow.IsObligationLevelSelected( ModifyVassalContractInteractionWindowObligationLevelOption.Self ) )]"
									}
								}
								blockoverride "text" {
									raw_text = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
								}
								blockoverride "extra" {
									text_single = {
										raw_text = "selected"
										visible = "[ModifyVassalContractInteractionWindow.IsObligationLevelSelected( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"
									}
									dot_l = { }
								}
							}
						}
					}
				}
			}
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			raw_text = "[GetDataModelSize(ModifyVassalContractInteractionWindow.AccessObligationLevelCheckboxes)] Priviliges and Restrictions:"
		}

		dynamicgridbox = {
			name = "minor_list_levels_checkboxes"
			layoutpolicy_horizontal = expanding

			datamodel = "[ModifyVassalContractInteractionWindow.AccessObligationLevelCheckboxes]"

			item = {
				button_text = {
					onclick = "[Clear('contract_details')]"
					datacontext = "[ObligationLevelCheckbox.GetContainerData]"
					datacontext = "[ObligationLevelCheckbox.GetLevel( '(int32)1' )]"
					tooltip = "[ModifyVassalContractInteractionWindow.GetObligationLevelTooltipFor( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"

					visible = "[ObligationContainerData.ShouldShow( ModifyVassalContractInteractionWindow.GetContractPreview )]"
					enabled = "[ModifyVassalContractInteractionWindow.IsObligationLevelEnabled( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"
					onclick = "[ModifyVassalContractInteractionWindow.SelectObligationLevel( ObligationLevelCheckbox.GetLevel( ObligationLevelCheckbox.GetUnselectedLevelIndex ) )]"
					onclick = "[ObligationLevelCheckbox.ToggleSelection]"

					blockoverride "pre" {
						text_single = {
							raw_text = "Can't "
							visible = "[And(Not(ModifyVassalContractInteractionWindow.IsObligationLevelEnabled( ModifyVassalContractInteractionWindowObligationLevelOption.Self )), Not(ModifyVassalContractInteractionWindow.IsObligationLevelSelected( ModifyVassalContractInteractionWindowObligationLevelOption.Self )))]"
						}
						text_single = {
							raw_text = "Change"
							visible = "[Not( ModifyVassalContractInteractionWindow.IsObligationLevelSelected( ModifyVassalContractInteractionWindowObligationLevelOption.Self ) )]"
						}
					}

					blockoverride "text" {
						text = "[ObligationContainerData.GetName]"
					}

					blockoverride "extra" {
						text_single = {
							raw_text = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
							visible = "[ModifyVassalContractInteractionWindow.IsObligationLevelSelected( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"
						}

						dot_l = { }

						text_single = {
							raw_text = "Can't"
							visible = "[And(ModifyVassalContractInteractionWindow.IsObligationLevelSelected( ModifyVassalContractInteractionWindowObligationLevelOption.Self ), Not(ModifyVassalContractInteractionWindow.IsObligationLevelEnabled( ModifyVassalContractInteractionWindowObligationLevelOption.Self )))]"
						}
						text_single = {
							raw_text = "Revoke."
							visible = "[ModifyVassalContractInteractionWindow.IsObligationLevelSelected( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"
						}
					}
				}
			}
		}
	}
}
