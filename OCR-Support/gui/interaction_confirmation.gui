######################################################
############# INTERACTION CONFIRMATION ###############
######################################################

window = {
	name = "character_interaction_confirmation_window"
	position = { 0 0 }
	allow_outside = yes
	layer = middle
	using = base_ocr_window
	# using = TooltipFocus

	state = {
		name = _show
		on_start = "[GetVariableSystem.Clear( 'character_interaction_change_title' )]"
		on_start = "[GetVariableSystem.Clear( 'character_interaction_change_artifact' )]"
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	window_ocr = {
		blockoverride "ocr_header" {
			hbox = {
				layoutpolicy_horizontal = expanding
				margin_bottom = -4

				header_text = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text" {
						raw_text = "[CharacterInteractionConfirmationWindow.GetSendName] wndow"
					}

					blockoverride "button_close"
					{
						onclick = "[CharacterInteractionConfirmationWindow.Close]"
					}

				}
			}
		}
		blockoverride "ocr_content" {
			vbox = {
				layoutpolicy_horizontal = expanding

				## Options
				vbox_interaction_options = {
					layoutpolicy_horizontal = expanding
					visible = "[CharacterInteractionConfirmationWindow.HasOptions]"
				}

				### Acceptance
				hbox_character_interaction_acceptance = {
					visible = "[CharacterInteractionConfirmationWindow.ShouldShowAnswer]"
					layoutpolicy_horizontal = expanding
				}

				text_multi_on_decline_summary = {
					max_width = 650
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[CharacterInteractionConfirmationWindow.HasCost]"
					tooltip = "[CharacterInteractionConfirmationWindow.GetCostTooltip]"

					text_single = {
						text = "INTERACTION_COST"
					}

					text_single = {
						raw_text = "[CharacterInteractionConfirmationWindow.GetCostDescription]."
					}

					expand = { }
				}

				## Send Button
				hbox = {
					name = "button"
					# margin = { 20 10 }
					spacing = 10
					layoutpolicy_horizontal = expanding

					button_primary_text = {
						layoutpolicy_horizontal = expanding

						blockoverride "text" {
							raw_text = "Confirm [CharacterInteractionConfirmationWindow.GetSendName]"
						}

						blockoverride "disabled" {
							visible = "[Not(CharacterInteractionConfirmationWindow.CanSend)]"
						}
						blockoverride "hotkey" {
							visible = "[CharacterInteractionConfirmationWindow.CanSend]"
						}

						onclick = "[CharacterInteractionConfirmationWindow.Send]"
						enabled = "[CharacterInteractionConfirmationWindow.CanSend]"
						tooltip = "[CharacterInteractionConfirmationWindow.GetCanSendDescription]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
					}

					button_standard = {
						visible = "[InDebugMode]"
						size = { 42 42 }
						raw_text = ""
						tooltip = "[CharacterInteractionConfirmationWindow.GetDebugInfo]"
					}
				}
				# Title Picker
				vbox = {
					visible = "[CharacterInteractionConfirmationWindow.UsesTitleTarget]"
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[CharacterInteractionConfirmationWindow.HasSelectedTitle]"

						text_single = {
							layoutpolicy_horizontal = expanding
							datacontext = "[CharacterInteractionConfirmationWindow.GetSelectedTitle]"
							raw_text = "Selected: [Title.GetNameNoTooltip|U]."
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Change title."
							}
							datacontext = "[GetVariableSystem]"
							visible = "[CharacterInteractionConfirmationWindow.CanChangeTitle]"
							onclick = "[VariableSystem.Toggle( 'character_interaction_change_title' )]"
						}
					}

					hbox = {
						visible = "[Not( CharacterInteractionConfirmationWindow.HasSelectedTitle )]"
						layoutpolicy_horizontal = expanding

						text_single = {
							text = "CHARACTER_INTERACTION_NO_TARGET_SELECTED"
						}
						expand = { }
					}

					#### replaces character effects ###
					scrollbox = {
						visible = "[GetVariableSystem.Exists('character_interaction_change_title')]"
						layoutpolicy_horizontal = expanding
						size = { 500 400 }

						blockoverride "scrollbox_content"
						{
							vbox_list_interaction_title_selection = {
								maximumsize = { 450 400 }
								layoutpolicy_horizontal = expanding

								blockoverride "button_toggles" {}
							}
						}
					}
				}

				vbox_character_interaction_three_characters = {
					visible = "[And(Not(GetVariableSystem.Exists('character_interaction_change_title')), CharacterInteractionConfirmationWindow.ShowThreeCharacters)]"
					layoutpolicy_horizontal = expanding
				}

				# Artifact Picker
				vbox = {
					visible = "[CharacterInteractionConfirmationWindow.UsesArtifactTarget]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					vbox = {
						visible = "[CharacterInteractionConfirmationWindow.HasSelectedArtifact]"
						datacontext = "[CharacterInteractionConfirmationWindow.GetSelectedArtifact]"
						layoutpolicy_horizontal = expanding

						widget = {
							size = { 80 80 }
							alwaystransparent = yes
							visible = "[GetVariableSystem.Exists('ocr')]"

							icon_artifact = {
								size = { 100% 100% }
							}

							tooltipwidget = {
								artifact_tooltip = {}
							}
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "Selected, [Artifact.GetName]."

							tooltipwidget = {
								artifact_tooltip = {}
							}
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "[Select_CString(GetVariableSystem.Exists('character_interaction_change_artifact'), 'Close artifact selection.', 'Change artifact.')]"
							}
							datacontext = "[GetVariableSystem]"
							onclick = "[VariableSystem.Toggle( 'character_interaction_change_artifact' )]"
						}
					}

					hbox = {
						visible = "[Not( CharacterInteractionConfirmationWindow.HasSelectedArtifact )]"
						minimumsize = { 0 112 }
						margin = { 10 10 }

						text_single = {
							text = "CHARACTER_INTERACTION_NO_TARGET_SELECTED"
							using = Font_Size_Medium
							align = left
						}
					}

					#### replaces character effects ###
					scrollbox = {
						visible = "[GetVariableSystem.Exists( 'character_interaction_change_artifact' )]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						# size = { 400 400 }

						blockoverride "scrollbox_content"
						{
							vbox_list_interaction_artifact_selection = {
								# maximumsize = { 250 400 }
								layoutpolicy_horizontal = expanding

								blockoverride "button_toggles" {}
							}
						}
					}

					expand = { }
				}

				### EDUCATE CHILD ###
				widget_character_interaction_four_characters = {
					visible = "[CharacterInteractionConfirmationWindow.ShowFourCharacters]"
					layoutpolicy_horizontal = expanding
				}

				vbox_interaction_character_list = {
					datacontext = "[CharacterInteractionConfirmationWindow.GetCharacterList]"
					layoutpolicy_horizontal = expanding
					minimumsize = { 640 750 }
					layoutpolicy_vertical = expanding

					blockoverride "item_size"
					{
						size = { 600 70 }
						layoutpolicy_horizontal = expanding

					}

					blockoverride "click" {
						onclick = "[CharacterListItem.OnClick('character')]"
						onrightclick = "[DefaultOnCharacterClick(CharacterListItem.GetCharacter.GetID)]"
						# onrightclick = "[DefaultOnCharacterRightClick(CharacterListItem.GetCharacter.GetID)]"
					}
				}

				## Effects on Characters
				vbox_character_interaction_effects = {
					visible = "[And(And(And( Not(GetVariableSystem.Exists('character_interaction_change_title') ), Not(GetVariableSystem.Exists('character_interaction_change_artifact') ) ), CharacterInteractionConfirmationWindow.HasPickedCharacters ), InteractionEffectsDescription.GetDisplayedEffects.HasAnyEffects )]"
					datacontext = "[CharacterInteractionConfirmationWindow.GetEffectsDescription]"
					layoutpolicy_horizontal = expanding
				}

				expand = { }

				## Scheme Information
				vbox_scheme_info = {
					visible = "[CharacterInteractionConfirmationWindow.ShouldShowScheme]"
					datacontext = "[CharacterInteractionConfirmationWindow.GetSchemeInfo]"
					layoutpolicy_horizontal = expanding
				}

			}
		}
	}

	confirm_interaction_old = {}

	window_character_filter = {
		datacontext = "[CharacterInteractionConfirmationWindow.GetCharacterList]"
		blockoverride "addition_filter" {

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
			}
		}
	}
}
