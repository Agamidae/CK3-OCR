######################################################
##################### CULTURE ########################
######################################################

window = {
	name = "culture_window"
	datacontext = "[CultureWindow.GetCulture]"
	datacontext = "[Culture.GetReformation]"
	widgetid = "culture_window_id"
	layer = windows_layer
	movable = no

	using = base_ocr_window

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard

		position = { 0 0 }
		on_start = "[GetVariableSystem.Set( 'culture_tab', 'early' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"
		on_start = "[GetVariableSystem.Set( 'culture_view_tabs', 'overview' )]"
		on_start = "[CultureWindow.HideReformationMode]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		on_finish = "[Click('clear_last_view')]"

		position = { -90 0 }
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"
	}
	window_ocr = {
		blockoverride "ocr_header" {
			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = ""
				}

				blockoverride "button_close"
				{
					onclick = "[CultureWindow.Close]"
					# shortcut = "innovations_window"
				}

				blockoverride "button_back"
				{
					visible = "[HasViewHistory]"
					onclick = "[OpenFromViewHistory]"
					tooltip = "[GetViewHistoryTooltip]"
					size = { 0 0 }
				}

				blockoverride "button_me"
				{
					onclick = "[DefaultOnCharacterClick(GetPlayer.GetID)]"
					size = { 0 0 }
				}

				flowcontainer = {
					ignoreinvisible = yes
					spacing = 3
					text_single = {
						raw_text = "CULTURE_WINDOW_CULTURE"
					}
					comma = {}
					text_single = {
						visible = "[Has('culture_view_tabs', 'overview')]"
						raw_text = "[Culture.GetPlayerRelationString]."
					}
					text_single = {
						raw_text = "[Get('culture_view_tabs')] tab,"
					}
				}
			}
		}

		blockoverride "ocr_content" {
			vbox = {
				visible = "[Not(GetVariableSystem.Exists('ocr'))]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				hbox = {
					name = "tabs"
					layoutpolicy_horizontal = expanding
					margin_top = 10
					visible = "[Not(CultureWindow.IsInReformationMode)]"

					text_single = {
						raw_text = "Tabs:"
					}

					button_text = {
						shortcut = speed_1
						blockoverride "text" {
							raw_text = "Overview,"
						}
						blockoverride "pre" {
							text_single = {
								raw_text = "1,"
							}
						}
						onclick = "[GetVariableSystem.Set( 'culture_view_tabs', 'overview' )]"
						onclick = "[CultureWindow.HideReformationMode]"
					}

					button_text = {
						shortcut = speed_2
						name = innovations_tab_tutorial_uses_this
						blockoverride "text" {
							raw_text = "2, Innovations,"
						}
						onclick = "[GetVariableSystem.Set( 'culture_view_tabs', 'innovations' )]"
						onclick = "[CultureWindow.HideReformationMode]"
					}

					button_text = {
						shortcut = speed_3
						blockoverride "text" {
							raw_text = "3, other cultures."
						}
						onclick = "[GetVariableSystem.Set( 'culture_view_tabs', 'other cultures' )]"
						onclick = "[ClickAdd('culture_list', GetPlayer, Culture)]"
						onclick = "[CultureWindow.HideReformationMode]"
					}

					button_text = {
						shortcut = speed_4
						blockoverride "text" {
							raw_text = "4, counties."
						}
						onclick = "[GetVariableSystem.Set( 'culture_view_tabs', 'counties' )]"
						onclick = "[ClickAdd('culture_counties_list', GetPlayer, Culture)]"
						onclick = "[CultureWindow.HideReformationMode]"
					}

					expand = {}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Has('culture_view_tabs', 'overview')]"

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						text_single = {
							raw_text = "There are"
						}

						text_single = {
							raw_text = "[Culture.MakeScope.ScriptValue('culture_counties')] [Culture.GetNameNoTooltip] counties"
						}

						text_single = {
							raw_text = "and"
						}

						text_single = {
							raw_text = "[Culture.MakeScope.ScriptValue('culture_rulers')] rulers."
						}

						expand = {}
					}

					hbox = {
						visible = "[Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) )]"
						name = "acceptance"
						layoutpolicy_horizontal = expanding

						text_single = {
							name = "acceptance_text"
							text = "CULTURE_VIEW_ACCEPTANCE"
							tooltip = "CULTURE_ACCEPTANCE_TOOLTIP"
						}

						dot = { }

						space = { }

						text_single = {
							visible = "[NotEqualTo_CFixedPoint( Culture.GetAcceptanceDiff( GetPlayer.GetCulture ), '(CFixedPoint)0')]"
							text = "CULTURE_VIEW_ACCEPTANCE_DIFF"
							tooltip = "CULTURE_ACCEPTANCE_TOOLTIP"
						}

						text_single = {
							visible = "[NotEqualTo_CFixedPoint( Culture.GetAcceptanceDiff( GetPlayer.GetCulture ), '(CFixedPoint)0')]"
							raw_text = " per year."
						}

						expand = { }
					}

					text_single = {
						raw_text = "[Culture.GetCreationString]."
						visible = "[And(Not(StringIsEmpty(Culture.GetCreationString)), Not(CultureWindow.IsInReformationMode))]"
						layoutpolicy_horizontal = expanding
					}
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Reforming culture."
					visible = "[CultureWindow.IsInReformationMode]"
				}

				hbox = {
					visible = "[CultureWindow.IsInReformationMode]"
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding
						name = "cancel_reform_culture"
						shortcut = close_window
						blockoverride "text" {
							text = "REFORM_CULTURE_CLOSE_LABEL"
						}
						blockoverride "extra" {
							comma = {}
							text_single = {
								raw_text = "Escape."
							}
						}
						onclick = "[CultureWindow.HideReformationMode]"
						visible = "[Not(IsGameViewOpen('add_culture_tradition'))]"
						tooltip = "REFORM_CULTURE_CLOSE_TOOLTIP"
						using = tooltip_nw
					}
				}

				vbox = {
					visible = "[And(Not(CultureWindow.IsInReformationMode), Has('culture_view_tabs', 'overview'))]"
					layoutpolicy_horizontal = expanding

					vbox = {
						visible = "[And( And( HasDlcFeature( 'hybridize_culture' ), Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) ) ), GetPlayer.IsValid )]"
						layoutpolicy_horizontal = expanding

						text_multi_wide = {
							name = "no_hybridize_parent"
							visible = "[GetPlayer.GetCulture.IsChildOf( Culture.Self )]"
							text = "NO_HYBRIDIZE_INFO_PARENT"
						}

						text_multi_wide = {
							name = "no_hybridize_child"
							visible = "[Culture.IsChildOf( GetPlayer.GetCulture )]"
							text = "NO_HYBRIDIZE_INFO_CHILD"
						}

						text_multi_wide = {
							name = "no_hybridize_heritage"
							visible = "[And( ObjectsEqual(Culture.GetHeritage, GetPlayer.GetCulture.GetHeritage ), And( Not( GetPlayer.GetCulture.IsChildOf( Culture.Self ) ), Not( Culture.IsChildOf( GetPlayer.GetCulture ) ) ) )]"
							text = "NO_HYBRIDIZE_INFO_HERITAGE"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							shortcut = army_create_new
							blockoverride "disabled" {
								visible = "[Not( GetPlayer.GetCulture.CanHybridize( Culture.Self ) )]"
							}
							blockoverride "text" {
								raw_text = "HYBRIDIZE_CULTURE_LABEL"
							}
							blockoverride "extra" {
								comma = {}
								text_single = {
									raw_text = "H."
								}
							}
							# blockoverride "extra" {
							# 	comma = {}
							# 	text_single = {
							# 		raw_text = "not accessible yet"
							# 	}
							# }
							tooltip = "HYBRIDIZE_CULTURE_TOOLTIP"
							name = "hybridize_tutorial_uses_this"
							visible = "[And( Not( ObjectsEqual(Culture.GetHeritage, GetPlayer.GetCulture.GetHeritage ) ), And( Not( GetPlayer.GetCulture.IsChildOf( Culture.Self ) ), Not( Culture.IsChildOf( GetPlayer.GetCulture ) ) ) )]"
							minimumsize = { 240 0 }
							onclick = "[Culture.OpenHybridizationWindow]"
							onclick = "[CultureWindow.Close]"
						}
					}

					flowcontainer = {
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes
						direction = vertical
						visible = "[Not(IsGameViewOpen('add_culture_tradition'))]"

						button_text = {
							blockoverride "disabled" {
								visible = "[Not( Culture.CanAddTradition )]"
							}
							visible = "[And(ObjectsEqual(Culture.GetCultureHead.Self, GetPlayer ), Not(HasDlcFeature( 'reform_culture' )))]"
							tooltip = "ADD_TRADITION_TOOLTIP"
							blockoverride "text" {
								raw_text = "ADD_TRADITION_LABEL"
							}
							onclick = "[Culture.OpenAddTraditionWindow]"
						}

						button_text = {
							visible = "[And(And(ObjectsEqual(Culture.GetCultureHead.Self, GetPlayer ), HasDlcFeature( 'reform_culture' )), GetPlayer.IsValid)]"
							shortcut = army_split_half
							blockoverride "disabled" {
								visible = "[Culture.IsReforming]"
							}
							blockoverride "text" {
								text = "REFORM_CULTURE_LABEL"
							}
							blockoverride "extra" {
								comma = {}
								text_single = {
									raw_text = "F."
								}
							}
							name = "reform_culture"
							enabled = "[Not(Culture.IsReforming)]"
							onclick = "[CultureWindow.ShowReformationMode]"
							tooltip = "REFORM_CULTURE_TOOLTIP"
							using = tooltip_nw
						}
					}

					button_text = {
						name = "diverge"
						shortcut = mapmode_house_secondary
						layoutpolicy_horizontal = expanding
						visible = "[And( ObjectsEqual(Culture.Self, GetPlayer.GetCulture ), HasDlcFeature( 'diverge_culture' ) )]"
						onclick = "[Culture.OpenDivergenceWindow]"
						onclick = "[CultureWindow.Close]"
						blockoverride "text" {
							text = "DIVERGE_CULTURE_LABEL"
						}
						blockoverride "extra" {
							comma = {}
							text_single = {
								raw_text = "Shift D."
							}
						}
						# blockoverride "extra" {
						# 	comma = {}
						# 	text_single = {
						# 		raw_text = "not accessible yet."
						# 	}
						# }
						tooltip = "DIVERGE_CULTURE_TOOLTIP"
						using = tooltip_nw

						blockoverride "disabled" {
							visible = "[Not( GetPlayer.GetCulture.CanDiverge )]"
						}
					}

					expand = { }
				}

				#tabs

				#cultures
				vbox = {
					datamodel = "[GetPlayer.MakeScope.GetList('cultures')]"
					layoutpolicy_horizontal = expanding
					visible = "[Has('culture_view_tabs', 'other cultures')]"

					button_text = {
						layoutpolicy_horizontal = expanding
						shortcut = map_mode_11
						blockoverride "text" {
							raw_text = "Refresh, Shift E."
						}
						onclick = "[ClickAdd('culture_list', GetPlayer, Culture)]"
					}

					button_checked_text = {
						layoutpolicy_horizontal = expanding

						visible = "[Or(GetPlayer.MakeScope.Var('heritage_filter').IsSet, GreaterThan_CFixedPoint(Culture.MakeScope.ScriptValue('same_heritage_cultures'), '(CFixedPoint)0'))]"
						onclick = "[Click('heritage_filter')]"
						onclick = "[ClickAdd('culture_list', GetPlayer, Culture)]"
						shortcut = army_create_new

						blockoverride "visible" {
							visible = "[Not(GetPlayer.MakeScope.Var('heritage_filter').IsSet)]"
						}
						blockoverride "text" {
							raw_text = "same heritage, H, [Culture.MakeScope.ScriptValue('same_heritage_cultures')]."
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[EqualTo_CFixedPoint(Culture.MakeScope.ScriptValue('same_heritage_cultures'), '(CFixedPoint)0')]"
						raw_text = "There are no cultures with the same heritage."
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[Click('cultural_acceptance_sorting')]"
						onclick = "[ClickAdd('culture_list', GetPlayer, Culture)]"
						shortcut = map_mode_2
						blockoverride "text" {
							raw_text = "Sorted by [Select_CString( GetPlayer.MakeScope.Var('cultural_acceptance_sorting').IsSet, 'acceptance', 'counties' )]. T to sort by [Select_CString( GetPlayer.MakeScope.Var('cultural_acceptance_sorting').IsSet, 'counties', 'acceptance' )]."
						}
					}

					text_single = {
						visible = "[Not(GetPlayer.MakeScope.Var('heritage_filter').IsSet)]"
						layoutpolicy_horizontal = expanding
						raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('cultures'))] cultures:"
					}

					item = {
						button_text = {
							layoutpolicy_horizontal = expanding
							datacontext = "[Scope.Culture]"
							onclick = "[OpenGameViewData( 'culture_window', Culture.GetID )]"
							onclick = "[Set('culture_view_tabs', 'overview')]"

							blockoverride "extra" {
								text_single = {
									raw_text = "[Culture.GetNameNoTooltip],"
								}

								text_single = {
									visible = "[And(Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) ), GetPlayer.MakeScope.Var('cultural_acceptance_sorting').IsSet)]"
									raw_text = "[Culture.GetAcceptance( GetPlayer.GetCulture )|%/0],"
									tooltip = "CULTURE_ACCEPTANCE_TOOLTIP"
								}

								text_single = {
									raw_text = "[Culture.MakeScope.ScriptValue('culture_counties')] counties."
								}

								# text_single = {
								# 	raw_text = "[Culture.MakeScope.ScriptValue('culture_rulers')] rulers."
								# }

								text_single = {
									visible = "[And(Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) ), Not(GetPlayer.MakeScope.Var('cultural_acceptance_sorting').IsSet))]"
									raw_text = "[Culture.GetAcceptance( GetPlayer.GetCulture )|%/0] acceptance."
									tooltip = "CULTURE_ACCEPTANCE_TOOLTIP"
								}
							}
						}
					}
				}

				#culture counties
				vbox = {
					datamodel = "[GetPlayer.MakeScope.GetList('culture_counties')]"
					layoutpolicy_horizontal = expanding
					visible = "[Has('culture_view_tabs', 'counties')]"

					button_text = {
						layoutpolicy_horizontal = expanding
						shortcut = map_mode_11
						blockoverride "text" {
							raw_text = "Refresh, Shift E."
						}
						onclick = "[ClickAdd('culture_counties_list', GetPlayer, Culture)]"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('culture_counties'))] counties:"
					}

					item = {
						button_text = {
							layoutpolicy_horizontal = expanding
							datacontext = "[Scope.Title]"
							onclick = "[OpenGameViewData('holding_view', Scope.Title.GetProvince.Self)]"
							onclick = "[CloseGameView('culture_window')]"

							blockoverride "extra" {
								text_single = {
									raw_text = "[Title.GetNameNoTierNoTooltip],"
								}
								text_single = {
									visible = "[Not(ObjectsEqual(Title.Self, Title.GetHolder.GetTopLiege.GetPrimaryTitle))]"
									raw_text = "in [Title.GetHolder.GetTopLiege.GetPrimaryTitle.GetNameNoTierNoTooltip],"
								}

								text_single = {
									datacontext = "[Title.GetProvince]"
									visible = "[Not(ObjectsEqual(MyCapital, Province.Self))]"
									raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)]"
								}
							}
						}
					}
				}

				vbox = {
					name = "traditions_and_pillars_tab_tutorial_uses_this"
					visible = "[GetVariableSystem.HasValue( 'culture_view_tabs', 'overview' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					container_pillar_item_ocr = {
						layoutpolicy_horizontal = expanding
						datacontext = "[Culture.GetEthos]"

						blockoverride "reform" {
							button_text = {
								blockoverride "text" {
									raw_text = "Change Ethos."
								}
								visible = "[CultureWindow.IsInReformationMode]"
								onclick = "[Culture.OpenReplaceEthosWindow]"
							}
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[culture_pillars|E]:"
						visible = "[Not(CultureWindow.IsInReformationMode)]"
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						hbox = {
							name = "heritage"
							datacontext = "[Culture.GetHeritage]"
							layoutpolicy_horizontal = expanding
							visible = "[Not(CultureWindow.IsInReformationMode)]"

							hbox = {
								tooltipwidget = {
									using = culture_pillar_tooltip
								}

								text_single = {
									datacontext = "[Culture.GetHeritage]"
									text = "CULTURE_VIEW_HERITAGE_TEXT"
								}

								dot = { }
							}

							expand = { }
						}

						hbox = {
							name = "martial"
							datacontext = "[Culture.GetMartial]"
							layoutpolicy_horizontal = expanding

							# Only show Martial if culture affects martial customs,
							# which is only the case if we are able to modify
							# the culture pillars.
							visible = "[HasDlcFeature( 'diverge_culture' )]"

							vbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding

									spacing = 3

									tooltipwidget = {
										using = culture_pillar_tooltip
									}
									button_text = {
										blockoverride "text" {
											raw_text = "Change custom:"
										}
										visible = "[CultureWindow.IsInReformationMode]"
										onclick = "[Culture.OpenReplaceMartialWindow]"
									}

									text_single = {
										text = "CULTURE_VIEW_MARTIAL_CUSTOM_TEXT"
									}

									dot_l = { }

									expand = { }
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									visible = "[And(CultureReformation.IsReformingSamePillarTypeAs(Culture.GetMartial), Not(CultureWindow.IsInReformationMode))]"

									margin_top = 3

									progressbar_reform = {

										blockoverride "progressbar_reform_size"
										{
											size = { 150 14 }
										}

										tooltipwidget = {
											using = culture_pillar_tooltip_establishing
										}
									}

									expand = { }
								}
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(CultureWindow.IsInReformationMode)]"

							hbox = {
								name = "language"
								datacontext = "[Culture.GetLanguage]"
								layoutpolicy_horizontal = expanding

								vbox = {
									layoutpolicy_horizontal = expanding
									tooltipwidget = {
										using = culture_pillar_tooltip
									}

									text_single = {
										layoutpolicy_horizontal = expanding
										datacontext = "[Culture.GetLanguage]"
										text = "CULTURE_VIEW_LANGUAGE_TEXT"
									}

									button_text = {
										layoutpolicy_horizontal = expanding
										datacontext = "[GetPlayer]"
										blockoverride "disabled" {
											visible = "[Not(Character.CanAdoptCourtLanguage( CulturePillar.Self ))]"
										}
										blockoverride "text" {
											raw_text = "Adopt as court language"
											align = left
										}
										blockoverride "dot" {

										}
										onclick = "[ToggleGameViewData( 'language', CulturePillar.Self )]"
										enabled = "[Character.CanAdoptCourtLanguage( CulturePillar.Self )]"
										tooltip = "ADOPT_COURT_LANGUAGE_CULTURE_WINDOW"
										visible = "[And( HasDlcFeature( 'royal_court' ), And( Character.HasRoyalCourt, Not( ObjectsEqual( CulturePillar.Self, Character.GetCourtLanguage ) ) ) )]"
									}
								}

								expand = { }
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									spacing = 10

									tooltip = "CULTURE_AESTHETICS_TOOLTIP"
									text_multi = {
										text = "CULTURE_AESTHETICS"
										autoresize = yes
										max_width = 220
									}
								}

								expand = { }
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3
						text_single = {
							raw_text = "[traditions|E],"
						}

						text_single = {
							raw_text = "[GetDataModelSize(Culture.GetTraditions)] out of [Culture.GetMaxNumberOfTraditions] possible."
							tooltip = "[Culture.GetMaxNumberOfTraditionsBreakdown]"
						}
						expand = { }
					}

					scrollbox = {
						name = "traditions_holder"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						scrollbarpolicy_horizontal = always_off

						blockoverride "scrollbox_content" {
							vbox = {
								layoutpolicy_horizontal = expanding

								vbox = {
									layoutpolicy_horizontal = expanding
									datamodel = "[CultureWindow.GetCultureTraditions]"
									visible = "[Not(CultureWindow.IsInReformationMode)]"

									item = {
										hbox = {
											datacontext = "[GuiCultureTradition.GetTradition]"
											layoutpolicy_horizontal = expanding
											tooltipwidget = {
												using = culture_tradition_tooltip
											}

											text_single = {
												datacontext = "[GuiCultureTradition.GetTradition]"
												raw_text = "[CultureTradition.GetNameNoTooltip]"
											}

											hbox = {
												layoutpolicy_horizontal = expanding

												datacontext = "[CultureReformation.GetNewTradition]"
												visible = "[And(GuiCultureTradition.IsNextAvailable, CultureReformation.IsAddingNewTradition)]"

												text_single = {
													raw_text = "[CultureTradition.GetNameNoTooltip],"
												}

												space = { }

												text_single = {
													name = "name_adding"
													text = "REFORMATION_NEW_TRADITION_INFO"
												}

												dot = { }

												expand = { }

											}

											expand = { }
										}
									}
								}

								vbox = {
									datamodel = "[CultureWindow.GetCultureTraditions]"
									visible = "[CultureWindow.IsInReformationMode]"
									layoutpolicy_horizontal = expanding

									item = {

										hbox = {
											layoutpolicy_horizontal = expanding
											datacontext = "[GuiCultureTradition.GetTradition]"

											button_text = {
												shortcut = map_mode_1
												blockoverride "text" {
													raw_text = "CULTURE_CLICK_TO_ADD_TRADITION"
												}
												blockoverride "extra" {
													comma = {}
													text_single = {
														raw_text = "E."
													}
												}
												visible = "[GuiCultureTradition.IsNextAvailable]"
												onclick = "[Culture.OpenAddTraditionWindow]"
											}

											button_text = {
												onclick = "[Culture.OpenReplaceTraditionWindow(CultureTradition.Self)]"
												visible = "[Not(GuiCultureTradition.IsEmpty)]"
												blockoverride "pre" {
													text_single = {
														raw_text = "Replace"
													}
												}
												tooltipwidget = {
													using = culture_tradition_tooltip
												}
												blockoverride "text" {
													align = left
													text = "[CultureTradition.GetNameNoTooltip]"
												}
												blockoverride "dot" {

												}
											}

											expand = { }
										}
									}
								}
							}
						}
					}

					expand = { }
				}

				# inno
				vbox = {
					name = "innovations_area_tutorial_uses_this"
					visible = "[GetVariableSystem.HasValue( 'culture_view_tabs', 'innovations' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch


					vbox = {
						layoutpolicy_horizontal = expanding
						datamodel = "[CultureWindow.GetCultureEras]"
						visible = "[Not(Is('all_eras'))]"

						item = {
							vbox_era_tab_ocr = {
								visible = "[GuiCultureEra.IsSelected]"
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						datamodel = "[CultureWindow.GetCultureEras]"
						visible = "[Is('all_eras')]"

						item = {
							vbox_era_tab_ocr = {
							}
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						shortcut = map_mode_1
						onclick = "[Toggle('all_eras')]"
						blockoverride "text" {
							raw_text = "[Select_CString(Is('all_eras'), 'Hide', 'Show')] all eras, E."
						}
					}

					scrollbox = {
						name = "selected_culture_era"
						datacontext = "[CultureWindow.GetSelectedCultureEra]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content"
						{
							vbox = {
								datacontext = "[GuiCultureEra.GetCultureEra]"
								layoutpolicy_horizontal = expanding

								state = {
									name = "culture_refresh"
									using = Animation_Refresh_FadeOut
								}

								state = {
									using = Animation_Refresh_FadeIn
								}

								text_single = {
									visible = "[GuiCultureEra.GetCultureEra.GetType.IsInvalidForPlayerGovernment]"
									layoutpolicy_horizontal = expanding
									text = "CULTURE_WINDOW_ERA_INNOVATION_BLOCKED_FOR_PLAYER_GOVERNMENT"
								}

								hbox = {
									visible = "[Not(CultureEra.IsActive)]"
									layoutpolicy_horizontal = expanding

									vbox = {
										layoutpolicy_horizontal = expanding


										hbox = {
											layoutpolicy_horizontal = expanding

											text_multi_wide = {
												layoutpolicy_horizontal = expanding
												text = "CULTURE_ERA_BLOCKED_BLOCKED_TILE"
											}

											expand = { }
										}

										hbox = {
											layoutpolicy_horizontal = expanding

											text_multi_wide = {
												visible = "[Not(CultureEra.CanGainProgress)]"
												layoutpolicy_horizontal = expanding
												text = "[CultureEra.GetCantGainProgressReason]"
											}

											expand = { }
										}

										vbox = {
											visible = "[CultureEra.CanGainProgress]"
											layoutpolicy_horizontal = expanding
											# margin = { 0 10 }
											spacing = 3
											tooltip = "[CultureEra.GetProgressAndGainBreakdown]"

											hbox = {
												layoutpolicy_horizontal = expanding

												text_label_left = {
													raw_text = "[CultureEra.GetCultureEraProgressEstimation] left. [CultureEra.GetProgress]% done."
												}

												expand = { }
											}
										}
									}

									spacer = {
										size = { 70 10 }
									}
								}

								vbox = {
									name = "era_groups"
									datamodel = "[GuiCultureEra.GetCultureEraGroups]"
									layoutpolicy_horizontal = expanding

									item = {
										vbox = {
											visible = "[GuiCultureEraGroup.HasInnovations]"
											layoutpolicy_horizontal = expanding
											# spacing = 10

											text_single = {
												layoutpolicy_horizontal = expanding
												raw_text = "[GuiCultureEraGroup.GetName], [GetDataModelSize(GuiCultureEraGroup.GetInnovations)]."
											}

											dynamicgridbox = {
												layoutpolicy_horizontal = expanding
												datamodel = "[GuiCultureEraGroup.GetInnovations]"

												item = {
													flowcontainer_innovation = {
														visible = "[Or(Isnt('hide_discovered'), And(Is('hide_discovered'), Not(CultureInnovation.IsActive)))]"
													}
												}
											}
										}
									}
								}

								background = {
									name = "gray_overlay"
									visible = "[GuiCultureEra.GetCultureEra.GetType.IsInvalidForPlayerGovernment]"
									using = Background_Area_Border_Solid
									tintcolor = { 0.5 0.5 0.5 0.3 }
									alwaystransparent = no
									margin = { 10 10 }
								}
							}
						}
					}
				}

				#head
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Or(Has('culture_view_tabs', 'overview'), Has('culture_view_tabs', 'innovations'))]"
					hbox = {
						name = "no_culture_head"
						visible = "[And(Not(CultureWindow.IsInReformationMode), Not( Culture.HasCultureHead ))]"
						layoutpolicy_horizontal = expanding
						spacing = 3

						text_single = {
							text = "CULTURE_WINDOW_NO_HEAD"
						}

						comma = {}

						text_single = {
							raw_text = "[Culture.GetNoHeadReason]."
						}

						expand = { }
					}

					hbox = {
						name = "culture_head_tutorial_uses_this"
						datacontext = "[Culture.GetCultureHead]"
						visible = "[And(Not(CultureWindow.IsInReformationMode), Culture.HasCultureHead)]"
						layoutpolicy_horizontal = expanding

						hbox = {
							layoutpolicy_horizontal = expanding

							vbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									datacontext = "[CultureWindow.GetLearningLevel]"
									tooltip = "SKILL_ITEM_TOOLTIP"
									visible = "[Character.IsLocalPlayer]"
									raw_text = "You are the [culture_head|E], [CultureWindow.GetLearningLevel.GetValue] [learning|e]."
								}

								realm_name = {
									visible = "[Not(Character.IsLocalPlayer)]"
									layoutpolicy_horizontal = expanding
									blockoverride "pre" {
										text_single = {
											alwaystransparent = yes
											raw_text = "[culture_head|E],"
										}
										text_single = {
											datacontext = "[CultureWindow.GetLearningLevel]"
											tooltip = "SKILL_ITEM_TOOLTIP"
											raw_text = "[CultureWindow.GetLearningLevel.GetValue] [learning|e]."
										}
									}
								}

								vbox = {
									name = "culture_head_influence_info"
									visible = "[And(EqualTo_uint32( CultureWindow.GetCulture.GetID, GetPlayer.GetCulture.GetID ), Hasnt('culture_view_tabs', 'innovations'))]"
									layoutpolicy_horizontal = expanding

									text_multi_wide = {
										visible = "[Not(CultureWindow.ShouldShowMyCultureInfo)]"
										layoutpolicy_horizontal = expanding
										text = "[CultureWindow.GetCultureHeadInfo]"
									}

									text_multi_wide = {
										visible = "[CultureWindow.ShouldShowMyCultureInfo]"
										layoutpolicy_horizontal = expanding
										text = "CULTURE_WINDOW_CULTURE_HEAD_NOTPLAYER"
									}
								}

								hbox = {
									name = "fascination_info_tutorial_uses_this"
									datacontext = "[CultureWindow.GetCulture]"
									visible = "[Culture.HasFascination]"
									layoutpolicy_horizontal = expanding

									vbox = {
										layoutpolicy_horizontal = expanding

										hbox = {
											layoutpolicy_horizontal = expanding
											datacontext = "[CultureWindow.GetCulture.GetFascination]"
											spacing = 3

											text_single = {
												tooltipwidget = {
													using = culture_innovation_tooltip
												}
												name = "current_fascination"
												raw_text = "Fascination: [CultureWindow.GetCulture.GetFascination.GetName],"
											}

											text_single = {
												raw_text = "[CultureInnovation.GetProgress|1]%."
											}

											text_single = {
												raw_text = "[CultureInnovation.GetInnovationState]."
											}

											# hbox = {
											# 	spacing = 3
											# 	visible = "[And(CultureInnovation.CanGainProgress, Not(CultureInnovation.IsActive))]"
											#
											# 	text_single = {
											# 		raw_text = "[CultureInnovation.GetProgressChance]% to gain"
											# 	}
											#
											# 	text_single = {
											# 		raw_text = "[CultureInnovation.GetProgressGain]% every month."
											# 	}
											# }

											expand = { }
										}
									}

									expand = { }
								}
							}
						}
					}
				}

				expand = {}
			}
		}
	}

	window_culture_old = {}

}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types OCR {

	type vbox_era_tab_ocr = hbox {
		datacontext = "[GuiCultureEra.GetCultureEra]"
		layoutpolicy_horizontal = expanding

		using = tooltip_se

		button_text = {
			layoutpolicy_horizontal = expanding
			state = {
				name = _mouse_click
				on_finish = "[GuiCultureEra.Select]"
			}
			onclick = "[Clear('all_eras')]"
			onclick = "[PdxGuiTriggerAllAnimations('culture_refresh')]"
			blockoverride "pre" {
				text_single = {
					raw_text = "Showing"
					visible = "[GuiCultureEra.IsSelected]"
				}
			}
			blockoverride "text" {
				raw_text = "[CultureEra.GetNameNoTooltip]"
				align = left
			}
			blockoverride "extra" {

				text_single = {
					raw_text = "era,"
				}

				text_single = {
					raw_text = "[CultureEra.GetNumberOfActiveInnovations] out of [CultureEra.GetNumberOfInnovations]"
				}

				text_single = {
					raw_text = "innovations discovered."
				}

				text_single = {
					raw_text = "Tooltip."
					tooltipwidget = {
						using = culture_era_tooltip
					}
				}
			}
		}
	}
}

types CultureWindow
{

	type vbox_era_tab = vbox {
		datacontext = "[GuiCultureEra.GetCultureEra]"
		layoutpolicy_horizontal = expanding

		tooltipwidget = {
			using = culture_era_tooltip
		}

		using = tooltip_se

		spacer = {
			visible = "[GuiCultureEra.IsSelected]"
			size = { 150 0 }

			state = {
				name = _show
				size = { 135 0 }
				duration = 0.3
			}

			state = {
				name = _hide
				size = { 0 0 }
				duration = 0.3
			}
		}

		button = {
			layoutpolicy_horizontal = expanding
			size = { 0 128 }
			onclick = "[PdxGuiTriggerAllAnimations('culture_refresh')]"
			scissor = yes

			state = {
				name = _mouse_click
				on_finish = "[GuiCultureEra.Select]"
			}

			highlight_icon = {
				parentanchor = center
				size = { 248 128 }
				texture = "[CultureEra.GetType.GetIllustration]"
				using = Mask_Rough_Edges

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_culture_era_tab.dds"
					blend_mode = alphamultiply
					alpha = 0.9
				}
			}

			highlight_icon = {
				visible = "[Not(CultureEra.IsActive)]"
				parentanchor = center
				size = { 248 128 }
				texture = "[CultureEra.GetType.GetIllustration]"
				tintcolor = { 0 0 0 0.5 }
			}

			##### FRAYED EDGES ####
			widget = {
				parentanchor = left
				size = { 6 128 }

				background = {
					using = Background_Area_Solid
					spriteType = Corneredtiled
					spriteborder = { 20 20 }
					spriteborder_right = 11
					margin = { 0 20 }
					margin_left = 10
				}
			}

			widget = {
				parentanchor = right
				size = { 6 128 }

				background = {
					using = Background_Area_Solid
					mirror = horizontal
					spriteType = Corneredtiled
					spriteborder = { 20 20 }
					spriteborder_right = 11
					margin = { 0 20 }
					margin_right = 10
				}
			}

			text_multi = {
				visible = "[GuiCultureEra.IsSelected]"
				size = { 100% 100% }
				margin = { 5 10 }
				autoresize = no
				text = "[CultureEra.GetNameNoTooltip]"
				align = top|hcenter
				default_format = "#low"

				state = {
					name = _show
					using = Animation_FadeIn_Standard
				}

				state = {
					name = _hide
					using = Animation_FadeOut_Standard
				}
			}

			text_label_center = {
				visible = "[Not(CultureEra.IsActive)]"
				parentanchor = bottom|hcenter
				position = { 0 -8 }
				text = "CULTURE_ERA_INNOVATION_COUNT"
				default_format = "#low"
			}

			text_label_center = {
				visible = "[CultureEra.IsActive]"
				parentanchor = bottom|hcenter
				position = { 0 -8 }
				text = "CULTURE_ERA_INNOVATION_COUNT_JOIN_LEAVE"
				default_format = "#high"
			}
		}
	}

	type icon_innovation_no_context = icon {
		size = { 90 60 }

		icon = {
			texture = "[CultureInnovationType.GetIcon]"
			size = { 90 60 }
		}

		icon = {
			texture = "[CultureInnovationType.GetCultureEraType.GetFrame]"
			size = { 90 60 }
		}
	}

	type icon_innovation = icon {
		size = { 90 60 }

		icon = {
			texture = "[CultureInnovation.GetType.GetIcon]"
			size = { 90 60 }

			modify_texture = {
				name = "shimmer"
				texture = "gfx/interface/component_effects/effect_shimmer.dds"
				blend_mode = colordodge
				translate_uv = { 0.2 0.2 }
			}

			state = {
				name = shimmer
				next = pause
				trigger_on_create = yes
				duration = 1.2
				trigger_when = "[CultureInnovation.IsFascination]"
				bezier = { 0 0.9 1 0.4 }

				modify_texture = {
					name = "shimmer"
					translate_uv = { -1 1 }
				}
			}

			state = {
				name = pause
				duration = 0
				delay = 5

				modify_texture = {
					name = "shimmer"
					translate_uv = { 1 -1 }
				}
			}
		}

		icon = {
			texture = "[CultureInnovation.GetType.GetCultureEraType.GetFrame]"
			size = { 90 60 }
		}

		icon = {
			visible = "[Not(CultureInnovation.IsActive)]"
			size = { 100% 100% }
			texture = "[CultureInnovation.GetType.GetIcon]"
			tintcolor = { 0 0 0 0.5 }
		}

		highlight_icon = {
			visible = "[Not(CultureInnovation.CanGainProgress)]"
			size = { 100% 100% }
			texture = "[CultureInnovation.GetType.GetIcon]"
			tintcolor = { 0 0 0 0.5 }
		}

		highlight_icon = {
			name = "fascination"
			visible = "[CultureInnovation.IsFascination]"
			parentanchor = center
			size = { 110 78 }
			texture = "gfx/interface/component_effects/innovation_glow.dds"
			tintcolor = { 1 0.8 0.6 1 }

			state = {
				trigger_on_create = yes

				name = max_glow
				next = min_glow
				duration = 1
				using = Animation_Curve_Default
				alpha = 0.8
			}

			state = {
				name = min_glow
				next = max_glow
				duration = 1.6
				using = Animation_Curve_Default
				alpha = 0.5
			}
		}

		highlight_icon = {
			name = "exposure"
			visible = "[CultureInnovation.HasExposureMarker]"
			parentanchor = center
			size = { 110 78 }
			texture = "gfx/interface/component_effects/innovation_glow.dds"
			using = Color_Blue

			state = {
				name = max_glow
				next = min_glow
				trigger_on_create = yes
				duration = 1
				using = Animation_Curve_Default
				alpha = 0.8
			}

			state = {
				name = min_glow
				next = max_glow
				duration = 1.6
				using = Animation_Curve_Default
				alpha = 0.5
			}
		}
	}
}

types OCR {
	type container_pillar_item_ocr = hbox {
		using = tooltip_ws

		tooltipwidget = {
			using = culture_pillar_tooltip
		}

		hbox = {
			margin_bottom = 5
			spacing = 3
			layoutpolicy_horizontal = expanding

			block "reform" { }

			text_single = {
				name = "name"
				raw_text = "[CulturePillar.GetNameNoTooltip] ethos."
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3
				visible = "[And(CultureReformation.IsReformingSamePillarTypeAs(Culture.GetEthos), Not(CultureWindow.IsInReformationMode))]"

				tooltipwidget = {
					using = culture_pillar_tooltip_establishing
				}

				text_single = {
					text = "REFORM_ETHOS_NEW_NAME"
					align = left
				}

				text_single = {
					text = "REFORMATION_NEW_TRADITION_INFO"
					align = left
				}

				progressbar_reform = {

					blockoverride "progressbar_reform_size"
					{
						size = { 200 14 }
					}
				}

				expand = { }
			}

			expand = { }
		}
	}

	type flowcontainer_innovation = flowcontainer {
		datacontext = "[GuiCultureInnovation.GetCultureInnovation]"
		direction = horizontal

		allow_outside = yes
		using = tooltip_es
		ignoreinvisible = yes

		######### NOT CLICKABLE ######
		widget = {
			# visible = "[Not(And(CultureInnovation.GetCulture.IsPlayerCultureHead, Not(CultureInnovation.IsActive)))]"
			size = { 560 22 }

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				text_single = {
					visible = "[CultureInnovation.IsFascination]"
					raw_text = "Current fascination:  "
				}

				hbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					tooltipwidget = {
						using = culture_innovation_tooltip
					}

					text_single = {
						size = { 500 22 }
						text = "[CultureInnovation.GetNameNoTooltip]"
					}

					text_single = {
						name = "name_unlocked"
						visible = "[CultureInnovation.IsActive]"
						raw_text = ", discovered."
					}

					text_single = {
						name = "name_blocked"
						visible = "[And(Not(CultureInnovation.CanBeFascination),Not(CultureInnovation.IsActive))]"
						raw_text = ", not available."
					}

					hbox = {
						visible = "[And(CultureInnovation.CanGainProgress, Not(CultureInnovation.IsActive))]"

						text_single = {
							raw_text = ", [CultureInnovation.GetProgress|1]%."
							visible = "[And(CultureInnovation.CanGainProgress, Not(CultureInnovation.IsActive))]"
						}
					}

					hbox = {
						text_single = {
							visible = "[And(CultureInnovation.CanBeFascination, Not(CultureInnovation.IsFascination))]"
							raw_text = " Click to select as fascination."
						}

						visible = "[And(CultureInnovation.GetCulture.IsPlayerCultureHead, Not(CultureInnovation.IsActive))]"
					}
					expand = { }
				}

				expand = { }
			}

			button = {
				hbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					visible = "[Not(CultureInnovation.IsFascination)]"
					tooltipwidget = {
						using = culture_innovation_tooltip
					}
				}
				visible = "[And(And(CultureInnovation.GetCulture.IsPlayerCultureHead, Not(CultureInnovation.IsActive)), Not(CultureInnovation.IsFascination))]"
				enabled = "[CultureInnovation.CanBeFascination]"
				size = { 100% 100% }
				onclick = "[CultureInnovation.SelectAsFascination]"
			}
		}
	}
}


types CultureShared
{
	type container_pillar_item = container {
		using = tooltip_ws

		tooltipwidget = {
			using = culture_pillar_tooltip
		}

		highlight_icon = {
			name = "icon"
			alpha = 0.3
			using = vanilla
			block "icon_size" {
				size = { 592 130 }
			}
			texture = "[CulturePillar.GetIcon]"
			using = Mask_Rough_Edges
		}

		widget = {
			size = { 100% 100% }

			hbox = {
				margin_bottom = 5
				spacing = 3
				layoutpolicy_horizontal = expanding

				block "reform" { }

				text_single = {
					name = "name"
					raw_text = "[CulturePillar.GetNameNoTooltip] ethos."
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 3
					visible = "[And(CultureReformation.IsReformingSamePillarTypeAs(Culture.GetEthos), Not(CultureWindow.IsInReformationMode))]"


					tooltipwidget = {
						using = culture_pillar_tooltip_establishing
					}

					text_single = {
						text = "REFORM_ETHOS_NEW_NAME"
						align = left
					}

					text_single = {
						text = "REFORMATION_NEW_TRADITION_INFO"
						align = left
					}

					progressbar_reform = {

						blockoverride "progressbar_reform_size"
						{
							size = { 200 14 }
						}
					}

					expand = { }
				}

				expand = { }
			}
		}
	}

	type widget_tradition_icon = widget
	{

		icon = {
			name = "background"
			texture = "[CultureTradition.GetLayeredIcon.GetTexture( '(int32)0' )]"
			size = { 100% 100% }
		}

		icon = {
			name = "pattern_left"
			texture = "[CultureTradition.GetLayeredIcon.GetTexture( '(int32)1' )]"
			size = { 100% 100% }
			parentanchor = hcenter
		}

		icon = {
			name = "pattern_right"
			texture = "[CultureTradition.GetLayeredIcon.GetTexture( '(int32)1' )]"
			size = { 100% 100% }
			parentanchor = hcenter
			mirror = horizontal
		}

		icon = {
			name = "support"
			texture = "[CultureTradition.GetLayeredIcon.GetTexture( '(int32)2' )]"
			size = { 100% 100% }
		}

		icon = {
			name = "stroke"
			texture = "[CultureTradition.GetLayeredIcon.GetTexture( '(int32)3' )]"
			size = { 90% 90% }
			parentanchor = center
		}

		icon = {
			name = "items"
			texture = "[CultureTradition.GetLayeredIcon.GetTexture( '(int32)4' )]"
			size = { 100% 100% }
			parentanchor = center
		}
	}

	type widget_tradition_selectable_glow = widget
	{

		size = { 276 138 }

		button_standard_clean = {
			onclick = "[Culture.OpenReplaceTraditionWindow(CultureTradition.Self)]"
			size = { 276 138 }

			icon = {
				texture = "gfx/interface/icons/flat_icons/circle.dds"
				parentanchor = bottom|right
				size = { 45 45 }
				position = { -1 2 }
				alpha = 0.6

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_circle.dds"
					blend_mode = alphamultiply
				}
			}

			button_text = {
				parentanchor = hcenter|bottom
				blockoverride "text" {
					raw_text = "Replace tradition."
				}
				visible = "[Not(GuiCultureTradition.IsEmpty)]"
				onclick = "[Culture.OpenReplaceTraditionWindow(CultureTradition.Self)]"
			}
		}
	}

	type widget_tradition_empty = widget
	{

		icon = {
			name = "background"
			texture = "gfx/interface/colors/black.dds"
			alpha = 0.3
			size = { 100% 100% }
			parentanchor = center

			using = Mask_Rough_Edges
		}
	}

	type progressbar_reform = progressbar_standard
	{
		block "progressbar_reform_size" { }

		min = 0
		max = 100
		value = "[CultureReformation.GetProgress]"
	}

	type button_replace_culture = button_normal
	{
		size = { 35 35 }

		icon = {
			texture = "gfx/interface/buttons/button_lifestyles_base.dds"
			size = { 100% 100% }
		}

		icon = {
			name = "progress_frame"
			texture = "gfx/interface/progressbars/action_progress_frame.dds"
			size = { 100% 100% }
			alpha = 0.5
		}

		button_icon_highlight = {
			block "highlight_icon_size"
			{
				size = { 25 25 }
			}
			parentanchor = center
			texture = "gfx/interface/icons/flat_icons/replace.dds"
		}
	}
}
