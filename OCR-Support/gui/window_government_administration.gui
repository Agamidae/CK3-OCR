window = {
	name = "government_administration_window"
	widgetid = "government_administration_window"
	visible = "[And( IsGameViewOpen('government_administration'), IsDefaultGUIMode )]"
	using = base_ocr_window

	state = {
		name = _show
		using = Sound_WindowShow_Standard
		on_finish = "[Set('opened_admin', 'yes')]"
		on_finish = "[Set('admin_refresh', 'yes')]"
	}

	state = {
		name = _hide
		using = Sound_WindowHide_Standard
		on_finish = "[Clear(Get('selected_group_directive'))]"
		on_finish = "[Clear('selected_group_directive')]"
	}

	window_ocr = {
		state = {
			on_finish = "[GetScriptedGui('reset_admin_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
			trigger_when = "[Or(PageReset('admin_page', AdministrativeHouseItem.GetControlledThemes), Not(GetPlayer.MakeScope.Var('admin_page').IsSet))]"
		}
		blockoverride "ocr_header" {
			header_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "header_text" {
					raw_text = "ADMINISTRATIVE_GOVERNMENT_HEADER"
				}
				blockoverride "dot" {
					visible = no
				}
				blockoverride "extra" {
					comma = {}
					text_single = {
						visible = "[Isnt('admin_tab')]"
						raw_text = "[GetPlayer.Custom('GetProvincePluralConceptNoTooltip')] tab,"
					}
					text_single = {
						visible = "[Has('admin_tab', 'families')]"
						raw_text = "[Localize('administraction_tab_families')] tab."
					}
					text_single = {
						visible = "[Has('admin_tab', 'interactions')]"
						raw_text = "5 interactions."
					}
					text_single = {
						visible = "[Has('admin_tab', 'directives')]"
						raw_text = "Directives."
					}
					#TODO unassigned number?
				}
			}
			button = {
				shortcut = close_window
				onclick = "[GovernmentAdministrationWindow.Close]"
			}

			datacontext = "[GovernmentAdministrationWindow.GetTitle]"
			datacontext = "[Title.GetHolder]"

			flowcontainer = {
				ignoreinvisible = yes
				direction = vertical
				layoutpolicy_horizontal = expanding
				visible = "[Isnt('admin_tab')]"

				button_text = {
					datacontext = "[GetDecisionWithKey('change_state_faith')]"
					enabled = "[Decision.IsShownForPlayer]"

					onclick = "[OpenGameViewData( 'decision_detail', Decision.Self )]"

					blockoverride "text" {
						text = "[state_faith|E]"
						alwaystransparent = yes
					}
					blockoverride "extra" {
						text_single = {
							raw_text = "is [Title.GetStateFaith.GetNameNoTooltip],"
						}
						text_single = {
							raw_text = "bav_counties_of_wrong_faith"
						}
						comma = {}
						text_single = {
							visible = "[Decision.IsShownForPlayer]"
							tooltip = "[Decision.GetShortDescForPlayer]"
							raw_text = "click to change."
						}
					}
				}

				button_text = {
					datacontext = "[GetDecisionWithKey('adopt_state_faith')]"
					visible = "[Decision.IsShownForPlayer]"
					onclick = "[OpenGameViewData( 'decision_detail', Decision.Self )]"
					# tooltip = "[Decision.GetShortDescForPlayer]"
					blockoverride "text" {
						raw_text = "[Decision.GetName]"
					}
				}

				button_text = {
					shortcut = find_title_shortcut
					visible = "[Not(GetPlayer.IsIndependentRuler)]"
					onclick = "[Set('admin_tab', 'interactions')]"
					blockoverride "text" {
						raw_text = "Open liege interactions, V."
					}
				}

				button_text = {
					shortcut = army_split_half
					onclick = "[Set('admin_tab', 'families')]"
					blockoverride "text" {
						raw_text = "[Localize('administraction_tab_families')], F. [GetPlayer.Custom('GetProvincePluralConceptNoTooltip')] list below."
					}
				}

				button_text = {
					shortcut = character_finder
					visible = "[GetPlayer.IsIndependentRuler]"
					onclick = "[Set('admin_tab', 'directives')]"
					onclick = "[GetScriptedGui('refresh_directives').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					blockoverride "text" {
						raw_text = "Change directives in bulk, C."
					}
				}

				flowcontainer = {
					ignoreinvisible = yes
					spacing = 7
					visible = "[Not(GovernmentAdministrationWindow.ShouldGroupByHouse)]"

					dropdown_menu_standard = {

						blockoverride "dropdown_properties"
						{
							datamodel = "[GovernmentAdministrationWindow.GetOrderOptions]"
							onselectionchanged = "[GovernmentAdministrationWindow.SortThemes]"
							onselectionchanged = "[GetScriptedGui('reset_admin_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
							selectedindex = "[GovernmentAdministrationWindow.GetSortSelectedIndex]"
						}

						blockoverride "dropdown_active_item_properties"
						{
							raw_text = "Sorted by [ThemeOrderOption.GetName], in [Select_CString(Not(GovernmentAdministrationWindow.GetSortOrder), 'descending', 'ascending')] order, toggle Shift D."
						}

						blockoverride "dropdown_item_properties"
						{
							text = "[ThemeOrderOption.GetName]"
						}
					}

					button_text = {
						shortcut = mapmode_house_secondary
						blockoverride "text" {
							raw_text = ""
						}
						onclick = "[GovernmentAdministrationWindow.ReverseSortOrder]"
					}
				}

				flowcontainer = {
					spacing = 3

					button_checked_text = {
						shortcut = army_create_new
						onclick = "[GovernmentAdministrationWindow.ToggleGroupByHouse]"
						blockoverride "visible"
						{
							visible = "[Not(GovernmentAdministrationWindow.ShouldGroupByHouse)]"
						}

						blockoverride "text"
						{
							text = "ADMIN_WINDOW_THEME_GROUP_BY_HOUSE"
							margin_left = -3
						}
						blockoverride "extra" {
							spacing = 3
							comma = {}
							text_single = {
								raw_text = "H."
							}
							text_single = {
								visible = "[GovernmentAdministrationWindow.ShouldGroupByHouse]"
								raw_text = "number keys select houses."
							}
						}
					}

					button_text = {
						shortcut = map_mode_11
						visible = "[Not(GovernmentAdministrationWindow.ShouldGroupByHouse)]"
						onclick = "[PdxGuiTriggerAllAnimations('fold_all_themes')]"
						blockoverride "text" {
							raw_text = "Collapse all, Shift E."
						}
						blockoverride "extra" {
							text_single = {
								raw_text = "Number keys select themes."
							}
						}
					}
				}
			}

			flowcontainer = {
				layoutpolicy_horizontal = expanding
				ignoreinvisible = yes
				direction = vertical
				visible = "[Has('admin_tab', 'families')]"

				button_text = {
					onclick = "[Clear('admin_tab')]"
					shortcut = map_mode_2
					blockoverride "text" {
						raw_text = "Switch to [GetPlayer.Custom('GetProvincePluralConceptNoTooltip')], T."
					}
				}
				button_text = {
					shortcut = map_mode_11
					onclick = "[PdxGuiTriggerAllAnimations('fold_all_families')]"
					blockoverride "pre" {
						text_single = {
							raw_text = "[GetDataModelSize(GovernmentAdministrationWindow.GetFamilyGroups)] groups,"
						}
					}
					blockoverride "text" {
						raw_text = "Collapse all, Shift E."
					}
					blockoverride "extra" {
						text_single = {
							raw_text = "Number keys toggle groups."
						}
						margin_bottom = 5
					}
				}
			}

			flowcontainer = {
				ignoreinvisible = yes
				direction = vertical
				layoutpolicy_horizontal = expanding
				button = {
					shortcut = close_window
					onclick = "[Clear('admin_tab')]"
				}

				visible = "[Has('admin_tab', 'directives')]"

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical

					visible = "[Is('selected_group_directive')]"

					button = {
						shortcut = close_window
						onclick = "[Clear(Get('selected_group_directive'))]"
						onclick = "[Clear('selected_group_directive')]"
					}

					text_single = {
						raw_text = "Apply a new directive for [GetDataModelSize(GetPlayer.MakeScope.GetList(Get(Get('selected_group_directive'))))] vassals[AddTextIf(Isnt('global_directive'), ' with ')][Localize(Concatenate(Get(Get('selected_group_directive')), '_name'))]."
					}

					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical

						datamodel = "[GetGlobalList('directive_lists')]"

						item = {
							button_text = {
								shortcuts_list = {
									blockoverride "click" {
										onclick = "[GetScriptedGui('mass_directive').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('directive', MakeScopeFlag( Scope.GetFlagName )).AddScope('group', MakeScopeFlag(Get(Get('selected_group_directive')))).End )]"
										onclick = "[Clear(Get('selected_group_directive'))]"
										onclick = "[Clear('selected_group_directive')]"
										onclick = "[GetScriptedGui('refresh_directives').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
										clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
									}
								}
								blockoverride "num" {}
								blockoverride "text" {
									raw_text = "[Localize(Concatenate(Scope.GetFlagName, '_name'))]"
								}
								onclick = "[GetScriptedGui('mass_directive').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('directive', MakeScopeFlag( Scope.GetFlagName )).AddScope('group', MakeScopeFlag(Get(Get('selected_group_directive')))).End )]"

								onclick = "[Clear(Get('selected_group_directive'))]"
								onclick = "[Clear('selected_group_directive')]"
								onclick = "[GetScriptedGui('refresh_directives').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
								clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
							}
						}
					}

					text_single = {
						raw_text = "Affected vassals:"
					}
				}
			}
		}
		blockoverride "ocr_content" {
			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Isnt('admin_tab')]"

				vbox = {
					name = "house_list"
					visible = "[GovernmentAdministrationWindow.ShouldGroupByHouse]"
					datamodel = "[GovernmentAdministrationWindow.GetHousesWithThemes]"

					layoutpolicy_horizontal = expanding

					item = {
						vbox = {
							datacontext = "[AdministrativeHouseItem.GetHouse]"
							layoutpolicy_horizontal = expanding

							button_text = {
								layoutpolicy_horizontal = expanding
								datacontext = "[AdministrativeHouseItem.GetHouse]"
								# onclick = "[GovernmentAdministrationWindow.ToggleCollapseHouse( DynastyHouse.Self )]"
								onclick = "[Set('focused_noble_house', DynastyHouse.GetNameNoTooltip)]"
								visible = "[Or(Not(Is('focused_noble_house')), Has('focused_noble_house', DynastyHouse.GetNameNoTooltip))]"

								shortcuts_list = {
									blockoverride "click" {
										onclick = "[Set('focused_noble_house', DynastyHouse.GetNameNoTooltip)]"
									}
								}

								blockoverride "num" {}
								blockoverride "text" {
									visible = "[Not(GovernmentAdministrationWindow.ShouldGroupByHouse)]"
									raw_text = "[GetDataModelSize(AdministrativeHouseItem.GetControlledThemes)]"
								}
								blockoverride "extra" {
									text_single = {
										visible = "[Not(GovernmentAdministrationWindow.ShouldGroupByHouse)]"
										raw_text = "[SelectLocalization(DynastyHouse.IsValid, SelectLocalization(GovernmentAdministrationWindow.ShouldGroupByHouse, '', 'ADMIN_WINDOW_ASSIGNED_THEME'), 'ADMIN_WINDOW_UNASSIGNED_THEME')],"
									}
									text_single = {
										visible = "[And(GovernmentAdministrationWindow.ShouldGroupByHouse, Not(DynastyHouse.IsValid))]"
										raw_text = "ADMIN_WINDOW_UNASSIGNED_THEME"
									}
									text_single = {
										visible = "[GovernmentAdministrationWindow.ShouldGroupByHouse]"
										raw_text = "[DynastyHouse.GetNameNoTooltip], [GetDataModelSize(AdministrativeHouseItem.GetControlledThemes)] [themes|e]."
									}

									text_single = {
										visible = "[And(GovernmentAdministrationWindow.ShouldGroupByHouse, DynastyHouse.IsValid)]"
										raw_text = "[DynastyHouse.GetHousePower] power."
									}
									text_single = {
										visible = "[Is('focused_noble_house')]"
										raw_text = "Escape to clear."
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Has('focused_noble_house', DynastyHouse.GetNameNoTooltip)]"

								button = {
									shortcut = close_window
									onclick = "[Clear('focused_noble_house')]"
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[GreaterThan_int32(GetDataModelSize(AdministrativeHouseItem.GetControlledThemes), '(int32)10')]"

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "Showing items from [PageStart('admin_page')] to [PageEnd('admin_page', '(CFixedPoint)10', AdministrativeHouseItem.GetControlledThemes)]."
										margin_left = 5
									}

									dynamicgridbox = {
										name = "assigned_themes_list"
										datamodel = "[PageModel('admin_page', '(int32)10', AdministrativeHouseItem.GetControlledThemes)]"
										layoutpolicy_horizontal = expanding
										ignoreinvisible = yes

										item = {
											widget_theme_item_ocr = {
												datacontext = "[AdministrativeThemeItem.GetTitle]"
												visible = "[AdministrativeThemeItem.ShouldShowTitle]"
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 3

											button_text = {
												blockoverride "text" {
													raw_text = "Previous 10, Z."
												}
												visible = "[GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('admin_page').GetValue, '(CFixedPoint)0' )]"
												onclick = "[GetScriptedGui('prev_admin_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
												shortcut = decrease_speed_2
												using = paper_flip_back_ocr
											}

											button_text = {
									      onclick = "[GetScriptedGui('reset_admin_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
									      shortcut = map_mode_18
									      using = paper_flip_back_ocr
									      blockoverride "text" {
									        raw_text = "Reset, Control R."
									      }
									    }
											expand = {}
										}

										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "Next 10, X."
											}
											onclick = "[GetScriptedGui('next_admin_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
											shortcut = increase_speed_2
											visible = "[GreaterThan_int32( Subtract_int32( GetDataModelSize( AdministrativeHouseItem.GetControlledThemes ), FixedPointToInt(GetPlayer.MakeScope.Var('admin_page').GetValue )), '(int32)10' )]"
											using = paper_flip_forward_ocr
										}
									}
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[LessThanOrEqualTo_int32(GetDataModelSize(AdministrativeHouseItem.GetControlledThemes), '(int32)10')]"

									dynamicgridbox = {
										name = "assigned_themes_list"
										datamodel = "[AdministrativeHouseItem.GetControlledThemes]"
										layoutpolicy_horizontal = expanding
										ignoreinvisible = yes

										item = {
											widget_theme_item_ocr = {
												blockoverride "admin_index" {
													raw_text = "[IndexNumber],"
												}
												datacontext = "[AdministrativeThemeItem.GetTitle]"
												visible = "[AdministrativeThemeItem.ShouldShowTitle]"
											}
										}
									}
								}
							}
						}
					}
				}
				vbox = {
					name = "theme_list"
					visible = "[Not(GovernmentAdministrationWindow.ShouldGroupByHouse)]"
					datamodel = "[GovernmentAdministrationWindow.GetHousesWithThemes]"

					layoutpolicy_horizontal = expanding

					item = {
						vbox = {
							datacontext = "[AdministrativeHouseItem.GetHouse]"
							layoutpolicy_horizontal = expanding

							oncreate = "[BindFoldOutContext]"
							oncreate = "[PdxGuiFoldOut.Unfold]"

							state = {
								name = "fold_all_themes"
								on_finish = "[PdxGuiFoldOut.Fold]"
								on_finish = "[Set('imperial_theme', 'yes')]"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								datacontext = "[AdministrativeHouseItem.GetHouse]"
								# onclick = "[GovernmentAdministrationWindow.ToggleCollapseHouse( DynastyHouse.Self )]"
								onclick = "[PdxGuiFoldOut.Toggle]"

								blockoverride "text" {
									raw_text = "[GetDataModelSize(AdministrativeHouseItem.GetControlledThemes)]"
								}
								blockoverride "extra" {
									text_single = {
										raw_text = "[SelectLocalization(DynastyHouse.IsValid, SelectLocalization(GovernmentAdministrationWindow.ShouldGroupByHouse, 'ADMIN_WINDOW_HOUSE_DROPDOWN', 'ADMIN_WINDOW_ASSIGNED_THEME'), 'ADMIN_WINDOW_UNASSIGNED_THEME')],"
									}
									text_single = {
										raw_text = "[CollapseIf(PdxGuiFoldOut.IsFolded)]"
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[PdxGuiFoldOut.IsUnfolded]"

								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[GreaterThan_int32(GetDataModelSize(AdministrativeHouseItem.GetControlledThemes), '(int32)10')]"

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "Showing items from [PageStart('admin_page')] to [PageEnd('admin_page', '(CFixedPoint)10', AdministrativeHouseItem.GetControlledThemes)]."
										margin_left = 5
									}

									dynamicgridbox = {
										name = "assigned_themes_list"
										datamodel = "[PageModel('admin_page', '(int32)10', AdministrativeHouseItem.GetControlledThemes)]"
										layoutpolicy_horizontal = expanding
										ignoreinvisible = yes

										item = {
											widget_theme_item_ocr = {
												datacontext = "[AdministrativeThemeItem.GetTitle]"
												visible = "[AdministrativeThemeItem.ShouldShowTitle]"
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 3

											button_text = {
												blockoverride "text" {
													raw_text = "Previous 10, Z."
												}
												visible = "[GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('admin_page').GetValue, '(CFixedPoint)0' )]"
												onclick = "[GetScriptedGui('prev_admin_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
												shortcut = decrease_speed_2
												using = paper_flip_back_ocr
											}

											button_text = {
									      onclick = "[GetScriptedGui('reset_admin_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
									      shortcut = map_mode_18
									      using = paper_flip_back_ocr
									      blockoverride "text" {
									        raw_text = "Reset, Control R."
									      }
									    }
											expand = {}
										}

										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "text" {
												raw_text = "Next 10, X."
											}
											onclick = "[GetScriptedGui('next_admin_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
											shortcut = increase_speed_2
											visible = "[GreaterThan_int32( Subtract_int32( GetDataModelSize( AdministrativeHouseItem.GetControlledThemes ), FixedPointToInt(GetPlayer.MakeScope.Var('admin_page').GetValue )), '(int32)10' )]"
											using = paper_flip_forward_ocr
										}
									}
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[LessThanOrEqualTo_int32(GetDataModelSize(AdministrativeHouseItem.GetControlledThemes), '(int32)10')]"

									dynamicgridbox = {
										name = "assigned_themes_list"
										datamodel = "[AdministrativeHouseItem.GetControlledThemes]"
										layoutpolicy_horizontal = expanding
										ignoreinvisible = yes

										item = {
											widget_theme_item_ocr = {
												blockoverride "admin_index" {
													raw_text = "[IndexNumber],"
												}
												datacontext = "[AdministrativeThemeItem.GetTitle]"
												visible = "[AdministrativeThemeItem.ShouldShowTitle]"
											}
										}
									}
								}
							}

							vbox = {
								name = "imperial"
								datamodel = "[AdministrativeHouseItem.GetControlledThemes]"
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes
								visible = "[GetScriptedGui('is_there_imperial_theme').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"

								item = {
									vbox = {
										layoutpolicy_horizontal = expanding
										datacontext = "[AdministrativeThemeItem.GetTitle]"
										visible = "[And(AdministrativeThemeItem.ShouldShowTitle, GetScriptedGui('is_imperial_theme').IsShown( GuiScope.SetRoot( Title.MakeScope ).End ))]"
										button_text = {
											layoutpolicy_horizontal = expanding
											onclick = "[Toggle('imperial_theme')]"
											blockoverride "text" {
												raw_text = "Imperial theme, [Collapse('imperial_theme')]"
											}
										}
										widget_theme_item_ocr = {
											visible = "[Isnt('imperial_theme')]"
											layoutpolicy_horizontal = expanding
											blockoverride "admin_index" {}
											blockoverride "shortcuts" {
												visible = no
											}
										}
									}
								}
							}
						}
					}
				}
			}

			####

			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Has('admin_tab', 'families')]"
				state = {
					name = "reset_noble_families"
					on_finish = "[GetScriptedGui('reset_noble_families_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					trigger_when = "[Or(Or(PageReset('noble_families_page', AdminFamilyGroupItem.GetFamilyItems), Not(GetPlayer.MakeScope.Var('noble_families_page_size').IsSet)), Not(GetPlayer.MakeScope.Var('noble_families_page').IsSet))]"
					trigger_on_create = yes
				}


				vbox = {
					layoutpolicy_horizontal = expanding
					datamodel = "[GovernmentAdministrationWindow.GetFamilyGroups]"

					item = {
						vbox_family_group_foldout_ocr = {}
					}
				}
			}

			flowcontainer = {
				ignoreinvisible = yes
				direction = vertical
				datacontext = "[GovernmentAdministrationWindow.GetTitle]"
				datacontext = "[Title.GetHolder]"
				layoutpolicy_horizontal = expanding

				visible = "[Has('admin_tab', 'interactions')]"

				button = {
					shortcut = close_window
					shortcut = find_title_shortcut
					onclick = "[Clear('admin_tab')]"
				}

				button_text = {
					shortcut = speed_1
				  blockoverride "text" {
				    raw_text = "1, [Character.GetPlayerInteractionName('request_governorship_interaction')]"
				  }
				  blockoverride "disabled" {
				    visible = "[Not(Character.IsPlayerInteractionValid('request_governorship_interaction'))]"
				  }
				  enabled = "[Character.IsPlayerInteractionValid('request_governorship_interaction')]"
				  tooltip = "[Character.GetPlayerInteractionTooltip('request_governorship_interaction')]"
				  onclick = "[Character.OpenPlayerInteraction('request_governorship_interaction')]"
				}
				button_text = {
					shortcut = speed_2
				  blockoverride "text" {
				    raw_text = "2, [Character.GetPlayerInteractionName('admin_vassal_modify_vassal_contract_interaction')]"
				  }
				  blockoverride "disabled" {
				    visible = "[Not(Character.IsPlayerInteractionValid('admin_vassal_modify_vassal_contract_interaction'))]"
				  }
				  enabled = "[Character.IsPlayerInteractionValid('admin_vassal_modify_vassal_contract_interaction')]"
				  tooltip = "[Character.GetPlayerInteractionTooltip('admin_vassal_modify_vassal_contract_interaction')]"
				  onclick = "[Character.OpenPlayerInteraction('admin_vassal_modify_vassal_contract_interaction')]"
				}
				button_text = {
					shortcut = speed_3
				  blockoverride "text" {
				    raw_text = "3, [Character.GetPlayerInteractionName('request_council_interaction')]"
				  }
				  blockoverride "disabled" {
				    visible = "[Not(Character.IsPlayerInteractionValid('request_council_interaction'))]"
				  }
				  enabled = "[Character.IsPlayerInteractionValid('request_council_interaction')]"
				  tooltip = "[Character.GetPlayerInteractionTooltip('request_council_interaction')]"
				  onclick = "[Character.OpenPlayerInteraction('request_council_interaction')]"
				}
				button_text = {
					shortcut = speed_4
				  blockoverride "text" {
				    raw_text = "4, [Character.GetPlayerInteractionName('start_foster_legitimacy_interaction')]"
				  }
				  blockoverride "disabled" {
				    visible = "[Not(Character.IsPlayerInteractionValid('start_foster_legitimacy_interaction'))]"
				  }
				  enabled = "[Character.IsPlayerInteractionValid('start_foster_legitimacy_interaction')]"
				  tooltip = "[Character.GetPlayerInteractionTooltip('start_foster_legitimacy_interaction')]"
				  onclick = "[Character.OpenPlayerInteraction('start_foster_legitimacy_interaction')]"
				}
				button_text = {
					shortcut = speed_5
				  blockoverride "text" {
				    raw_text = "5, [Character.GetPlayerInteractionName('start_damage_legitimacy_interaction')]"
				  }
				  blockoverride "disabled" {
				    visible = "[Not(Character.IsPlayerInteractionValid('start_damage_legitimacy_interaction'))]"
				  }
				  enabled = "[Character.IsPlayerInteractionValid('start_damage_legitimacy_interaction')]"
				  tooltip = "[Character.GetPlayerInteractionTooltip('start_damage_legitimacy_interaction')]"
				  onclick = "[Character.OpenPlayerInteraction('start_damage_legitimacy_interaction')]"
				}
			}

			flowcontainer = {
				ignoreinvisible = yes
				direction = vertical
				layoutpolicy_horizontal = expanding
				visible = "[Has('admin_tab', 'directives')]"

				state = {
					trigger_when = "[Is('admin_refresh')]"
					on_finish = "[GetScriptedGui('refresh_directives').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					name = "refresh"
				}

				state = {
					name = "close"
					trigger_when = "[Not(GetPlayer.IsIndependentRuler)]"
				}

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical

					visible = "[Isnt('selected_group_directive')]"

					button_text = {
						shortcut = find_title_shortcut
						onclick = "[Set('global_directive', 'all_available_vassals_for_directive')]"
						onclick = "[Set('selected_group_directive', 'global_directive')]"

						blockoverride "text" {
							raw_text = "V, Change directive for all [GetDataModelSize(GetPlayer.MakeScope.GetList('all_available_vassals_for_directive'))] vassals."
						}
						blockoverride "extra" {
							text_single = {
								visible = "[GreaterThan_CFixedPoint(GetPlayer.MakeScope.ScriptValue('vassals_refuse_directive'), '(CFixedPoint)0')]"
								raw_text = "[GetPlayer.MakeScope.ScriptValue('vassals_refuse_directive')] more can't change theirs."
							}
						}
					}

					text_single = {
						raw_text = "Or select a group of vassals below:"
					}

					text_single = {
						raw_text = "[PdxGuiWidget.AccessParent.AccessParent.FindChild('directive_lists').CountVisibleChildren] directive groups:"
					}
				}

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical
					visible = "[Is('global_directive')]"

					datamodel = "[GetPlayer.MakeScope.GetList('all_available_vassals_for_directive')]"

					item = {
						char_name = {
							blockoverride "extra" {
								text_single = {
									raw_text = "[Character.Custom('vassal_directive_text')],"
								}
							}
							datacontext = "[Scope.GetCharacter]"
						}
					}
				}

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical
					datamodel = "[GetGlobalList('directive_lists')]"
					name = "directive_lists"
					visible = "[Or(Isnt('selected_group_directive'), Has('selected_group_directive', 'directive_list_focus'))]"

					item = {
						flowcontainer = {
							ignoreinvisible = yes
							direction = vertical
							visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList(Scope.GetFlagName))]"

							flowcontainer = {
								ignoreinvisible = yes
								direction = vertical
								visible = "[Or(Has('directive_list_focus', Scope.GetFlagName), Isnt('directive_list_focus'))]"

								button_text = {
									onclick = "[Set('directive_list_focus', Scope.GetFlagName)]"
									onclick = "[Set('selected_group_directive', 'directive_list_focus')]"

									blockoverride "text" {
										raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList(Scope.GetFlagName))] [Localize(Concatenate(Scope.GetFlagName, '_name'))],"
									}
								}

								flowcontainer = {
									ignoreinvisible = yes
									direction = vertical
									visible = "[Has('directive_list_focus', Scope.GetFlagName)]"

									datamodel = "[GetPlayer.MakeScope.GetList(Scope.GetFlagName)]"

									# button = {
									# 	shortcut = close_window
									# 	onclick = "[Clear('directive_list_focus')]"
									# }

									item = {
										char_name = {
											blockoverride "extra" {
												text_single = {
													raw_text = "[Character.Custom('vassal_directive_text')],"
												}
											}
											datacontext = "[Scope.GetCharacter]"
										}
									}
								}
							}
						}
					}
				}

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical
					visible = "[Or(Isnt('selected_group_directive'), Has('selected_group_directive', 'wrong_counties_list'))]"

					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical
						visible = "[Or(Isnt('wrong_counties_list'), Has('wrong_counties_list', 'have_wrong_state_faith_counties'))]"

						button_text = {
							onclick = "[Set('selected_group_directive', 'wrong_counties_list')]"
							onclick = "[Set('wrong_counties_list', 'have_wrong_state_faith_counties')]"
							visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('have_wrong_state_faith_counties'))]"
							blockoverride "text" {
								raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('have_wrong_state_faith_counties'))] [GetPlayer.GetPrimaryTitle.GetStateFaith.GetAdjectiveNoTooltip] vassals with non-[GetPlayer.GetPrimaryTitle.GetStateFaith.GetAdjectiveNoTooltip] counties,"
							}
						}

						flowcontainer = {
							ignoreinvisible = yes
							direction = vertical
							visible = "[Has('wrong_counties_list', 'have_wrong_state_faith_counties')]"

							datamodel = "[GetPlayer.MakeScope.GetList('have_wrong_state_faith_counties')]"

							item = {
								char_name = {
									blockoverride "extra" {
										text_single = {
											raw_text = "[Character.Custom('vassal_directive_text')],"
										}
									}
									datacontext = "[Scope.GetCharacter]"
								}
							}
						}
					}

					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical

						visible = "[Or(Isnt('wrong_counties_list'), Has('wrong_counties_list', 'have_wrong_culture_counties'))]"

						button_text = {
							onclick = "[Set('selected_group_directive', 'wrong_counties_list')]"
							onclick = "[Set('wrong_counties_list', 'have_wrong_culture_counties')]"
							visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('have_wrong_culture_counties'))]"
							blockoverride "text" {
								raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('have_wrong_culture_counties'))] [GetPlayer.GetCulture.GetNameNoTooltip] vassals with non-[GetPlayer.GetCulture.GetNameNoTooltip] counties,"
							}
						}

						flowcontainer = {
							ignoreinvisible = yes
							direction = vertical
							visible = "[Has('wrong_counties_list', 'have_wrong_culture_counties')]"

							datamodel = "[GetPlayer.MakeScope.GetList('have_wrong_culture_counties')]"

							item = {
								char_name = {
									blockoverride "extra" {
										text_single = {
											raw_text = "[Character.Custom('vassal_directive_text')],"
										}
									}
									datacontext = "[Scope.GetCharacter]"
								}
							}
						}
					}
				}

				text_single = {
					raw_text = "[PdxGuiWidget.AccessParent.FindChild('theme_type_lists').CountVisibleChildren] theme type groups:"
					visible = "[Isnt('selected_group_directive')]"
				}

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical
					datamodel = "[GetGlobalList('theme_type_lists')]"
					name = "theme_type_lists"
					visible = "[Or(Isnt('selected_group_directive'), Has('selected_group_directive', 'theme_type_list_focus'))]"

					item = {
						flowcontainer = {
							ignoreinvisible = yes
							direction = vertical
							visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList(Scope.GetFlagName))]"

							flowcontainer = {
								ignoreinvisible = yes
								direction = vertical
								visible = "[Or(Has('theme_type_list_focus', Scope.GetFlagName), Isnt('theme_type_list_focus'))]"

								button_text = {
									onclick = "[Set('theme_type_list_focus', Scope.GetFlagName)]"
									onclick = "[Set('selected_group_directive', 'theme_type_list_focus')]"
									blockoverride "text" {
										raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList(Scope.GetFlagName))][Localize(Concatenate(Scope.GetFlagName, '_name'))],"
									}
								}

								flowcontainer = {
									ignoreinvisible = yes
									direction = vertical
									visible = "[Has('theme_type_list_focus', Scope.GetFlagName)]"

									datamodel = "[GetPlayer.MakeScope.GetList(Scope.GetFlagName)]"

									item = {
										char_name = {
											blockoverride "extra" {
												text_single = {
													raw_text = "[Character.Custom('vassal_directive_text')],"
												}
											}
											datacontext = "[Scope.GetCharacter]"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	window_ocr = {
		name = "featured_house_members_window"
		datacontext = "[GovernmentAdministrationWindow.GetFeaturedHouse]"
		datacontext = "[GovernmentAdministrationWindow.GetHouseMembersList]"
		datacontext = "[GetPlayer.MakeScope.Var('noble_house_members_page')]"
		datacontext = "[GetScriptedGui('reset_noble_house_members_page')]"
		state = {
			name = _show
			on_finish = "[CharacterSelectionList.OnResetFilters]"
		}
		state = {
			name = close
			trigger_on_create = yes
			on_finish = "[CharacterSelectionList.OnToggleFilters]"
			on_finish = "[CharacterSelectionList.OnToggleFilters]"
		}
		blockoverride "show_window" {
			visible = "[And(DynastyHouse.IsValid, Isnt('ocr'))]"
		}
		blockoverride "ocr_header" {
			datacontext = "[DynastyHouse.GetHeadOfHouse]"

			button_text = {
				shortcut = army_create_new
				layoutpolicy_horizontal = expanding
				onclick = "[OpenGameViewData('dynasty_house_view', Character.GetHouse.GetID)]"
				blockoverride "text" {
					raw_text = "ADMINISTRATIVE_GOVERNMENT_HOUSE_WITH_NAME"
				}
				blockoverride "extra" {
					comma = {}
					text_single = {
						raw_text = "open house view, H."
					}
				}
			}

			button = {
				shortcut = close_window
				onclick = "[GovernmentAdministrationWindow.ClearFeaturedHouse]"
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				datacontext = "[DynastyHouse.GetHeadOfHouse]"

				button_text = {
					layoutpolicy_horizontal = expanding
					shortcut = "council_window"

					# from the type
					datacontext = "[Character.GetDomicile]"
					onclick = "[ToggleGameViewData( 'domicile', Domicile.Self )]"
					tooltip = "[Domicile.GetMapPinTooltip( GetPlayer.Self )]"

					visible = "[Character.HasDomicile]"
					blockoverride "text" {
						raw_text = "Open [Domicile.GetName], Shift Q."
					}
					shortcut = map_mode_9
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					shortcut = find_title_shortcut
					onclick = "[Toggle('house_interactions')]"
					blockoverride "text" {
						raw_text = "[PdxGuiWidget.AccessParent.AccessParent.FindChild('house_interactions').CountVisibleChildren] interactions, [Collapse('house_interactions')] V."
					}
					container = {
						name = "house_interactions"
						container = {
							visible = "[And( Character.HasDomicile, Not( DynastyHouse.GetHeadOfHouse.IsPlayer ) )]"
						}
						container = { visible = "[Not( DynastyHouse.GetHeadOfHouse.IsPlayer )]" }
						container = { visible = "[Not( DynastyHouse.GetHeadOfHouse.IsPlayer )]" }
						container = { visible = "[Not( DynastyHouse.GetHeadOfHouse.IsPlayer )]" }
					}
				}

				flowcontainer = {
					visible = "[Isnt('house_interactions')]"
					ignoreinvisible = yes
					direction = vertical
					layoutpolicy_horizontal = expanding

					button_text = {
						shortcut = speed_1
						visible = "[And( Character.HasDomicile, Not( DynastyHouse.GetHeadOfHouse.IsPlayer ) )]"
						enabled = "[Character.IsPlayerInteractionValid('start_raid_estate_interaction')]"
						tooltip = "[Character.GetPlayerInteractionTooltip('start_raid_estate_interaction')]"
						onclick = "[Character.OpenPlayerInteraction('start_raid_estate_interaction')]"
						blockoverride "disabled" {
							visible = "[Not(Character.IsPlayerInteractionValid('start_raid_estate_interaction'))]"
						}

						blockoverride "text" {
							raw_text = "1, [Character.GetPlayerInteractionName('start_raid_estate_interaction')]"
						}
					}

					button_text = {
						shortcut = speed_2
						visible = "[Not( DynastyHouse.GetHeadOfHouse.IsPlayer )]"
						enabled = "[Character.IsPlayerInteractionValid('start_slander_interaction')]"
						tooltip = "[Character.GetPlayerInteractionTooltip('start_slander_interaction')]"
						onclick = "[Character.OpenPlayerInteraction('start_slander_interaction')]"
						blockoverride "disabled" {
							visible = "[Not(Character.IsPlayerInteractionValid('start_slander_interaction'))]"
						}

						blockoverride "text" {
							raw_text = "2, [Character.GetPlayerInteractionName('start_slander_interaction')]"
						}
					}

					button_text = {
						shortcut = speed_3
						visible = "[Not( DynastyHouse.GetHeadOfHouse.IsPlayer )]"
						enabled = "[Character.IsPlayerInteractionValid('start_challenge_status_interaction')]"
						tooltip = "[Character.GetPlayerInteractionTooltip('start_challenge_status_interaction')]"
						onclick = "[Character.OpenPlayerInteraction('start_challenge_status_interaction')]"
						blockoverride "disabled" {
							visible = "[Not(Character.IsPlayerInteractionValid('start_challenge_status_interaction'))]"
						}

						blockoverride "text" {
							raw_text = "3, [Character.GetPlayerInteractionName('start_challenge_status_interaction')]"
						}
					}

					button_text = {
						shortcut = speed_4
						visible = "[Not( DynastyHouse.GetHeadOfHouse.IsPlayer )]"
						enabled = "[Character.IsPlayerInteractionValid('request_appointment_support')]"
						tooltip = "[Character.GetPlayerInteractionTooltip('request_appointment_support')]"
						onclick = "[Character.OpenPlayerInteraction('request_appointment_support')]"
						blockoverride "disabled" {
							visible = "[Not(Character.IsPlayerInteractionValid('request_appointment_support'))]"
						}

						blockoverride "text" {
							raw_text = "4, [Character.GetPlayerInteractionName('request_appointment_support')]"
						}
					}
				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				shortcut = map_mode_1
				onclick = "[Toggle('noble_house_members')]"
				blockoverride "pre" {
					text_single = {
						raw_text = "[GetDataModelSize(CharacterSelectionList.GetList)]"
					}
				}
				blockoverride "text" {
					raw_text = "ADMIN_WINDOW_MEMBERS_OF_HOUSE_TITLE"
				}
				blockoverride "extra" {
					comma = {}
					text_single = {
						raw_text = "[CollapseIf(Isnt('noble_house_members'))] E."
					}
				}
			}

			# text_single = {
			# 	datacontext = "[GetPlayer.MakeScope.Var('global_page_size')]"
			# 	visible = "[Scope.IsSet]"
			# 	raw_text = "GLOBAL PAGE"
			# }
		}
		blockoverride "ocr_content" {
			vbox_character_list_paged_ocr = {
				visible = "[Is('noble_house_members')]"

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				state = {
				  name = "reset"
				  on_finish = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
				  trigger_when = "[Or(Or(PageReset('noble_house_members_page', CharacterSelectionList.GetList), Not(GetPlayer.MakeScope.Var('global_page_size').IsSet)), Not(Scope.IsSet))]"
					trigger_on_create = yes
				}

				blockoverride "pre_count" {
					hbox = {
					  spacing = 3
						margin_right = 3

					  text_single = {
					    raw_text = "Showing from [PageStartGlobal] to [PageEndGlobal(CharacterSelectionList.GetList)],"
					  }

					  button_resize_page_ocr = {}
					}
				}
				blockoverride "click_info" {

				}

				blockoverride "scrollbox" {
					fixedgridbox = {
						layoutpolicy_horizontal = expanding
						addcolumn = 600
						addrow = 65
						datamodel_reuse_widgets = yes

						datamodel = "[PageModelGlobal(CharacterSelectionList.GetList)]"
						item = {
							widget_house_member_item_ocr = {
								size = { 600 65 }
							}
						}
					}
				}
				blockoverride "post_scrollbox" {
					page_buttons_ocr = {
					  blockoverride "prev" {
					    datacontext = "[GetScriptedGui('prev_noble_house_members_page')]"
					  }
					  blockoverride "next_page" {
							datacontext = "[GetScriptedGui('next_noble_house_members_page')]"
					  }
					}
				}
				expand = {}
			}
		}

		window_character_filter = {
			position = { 0 0 }
			size = { 100% 100% }
			blockoverride "addition_filter" {
				filter_item = {
					layoutpolicy_horizontal = expanding
					datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
				}
				filter_item = {
					layoutpolicy_horizontal = expanding
					datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
				}
				filter_item = {
					layoutpolicy_horizontal = expanding
					datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
				}
				filter_item = {
					layoutpolicy_horizontal = expanding
					datacontext = "[CharacterSelectionList.GetFilter('alive_filter')]"
				}
			}
		}
	}

	government_administration_window_old = {}
}

types OCR
{
	type widget_empty_governor_portrait_ocr = widget
	{
		background = {
			using = Background_Area_Solid

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
				blend_mode = alphamultiply
				alpha = 0.2
				mirror = vertical
			}
		}

		widget = {
			size = { 100% 100% }

			background = {
				texture = "gfx/portraits/portrait_frame.dds"
				using = Color_Grey
				margin = { -4 -4 }
				alpha = 0.5
			}
		}

		button = {
			size = { 100% 100% }
			using = Placeholder_Inactive_Button

			# TODO_CODE: Open create title and assign based on whether or not the emperor holds this title.
			#onclick = ""

			state = {
				name = _mouse_hierarchy_enter
				on_start = "[PdxGuiWidget.FindChild('highlight_frame').TriggerAnimation('show')]"
			}

			state = {
				name = _mouse_hierarchy_leave
				on_start = "[PdxGuiWidget.FindChild('highlight_frame').TriggerAnimation('hide')]"
			}

			highlight_icon = {
				name = "portrait_unknown_head_small_glow"
				parentanchor = center
				position = { 3 -9 }
				gfxtype = framedbuttongfx
				effectname = "NoHighlight"
				texture = "gfx/portraits/unknown_portraits/button_unknown_head.dds"
				size = { 80 100 }
				framesize = { 384 480 }
				upframe = 1
				overframe = 2
			}

			button_plus = {
				alwaystransparent = yes
				parentanchor = center
			}

			widget = {
				name = "highlight_frame"
				size = { 100% 100% }
				alwaystransparent = yes
				alpha = 0

				state = {
					name = "show"
					alpha = 1
				}

				state = {
					name = "hide"
					alpha = 0
				}

				background = {
					size = { 100% 100% }
					texture = "gfx/portraits/portrait_frame.dds"
					using = Color_Grey
					alpha = 0.7
					margin = { -4 -4 }
				}
			}
		}
	}

	type button_unassigned_county_item_ocr = button_standard_list
	{
		layoutpolicy_horizontal = expanding

		button_ignore = none

		raw_tooltip = "#X Not yet implemented button.#!"
		default_format = "#X"

		background = {
			using = Background_Area_Border
			using = Background_Frame_Gold
		}

		hbox = {
			position = { 0 -5 }
			margin = { 8 0 }

			coa_title_tiny_crown = { }

			text_single = {
				layoutpolicy_horizontal = expanding

				text = "[Title.GetNameNoTooltip]"
			}

			expand = { }

			button_plus = { }
		}
	}

	type vbox_house_theme_list_ocr = vbox
	{
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding

		hbox = {
			layoutpolicy_horizontal = expanding

			coa_house_tiny = {
				visible = "[And(DynastyHouse.IsValid, GovernmentAdministrationWindow.ShouldGroupByHouse)]"
			}

			button_expandable_toggle_field = {
				layoutpolicy_horizontal = expanding
				datacontext = "[AdministrativeHouseItem.GetHouse]"

				blockoverride "onclick"
				{
					onclick = "[GovernmentAdministrationWindow.ToggleCollapseHouse( DynastyHouse.Self )]"
				}

				blockoverride "button_expand"
				{
					frame = "[BoolTo1And2( GovernmentAdministrationWindow.IsHouseCollapsed( DynastyHouse.Self ) )]"
				}

				blockoverride "text"
				{
					text = "[SelectLocalization(DynastyHouse.IsValid, SelectLocalization(GovernmentAdministrationWindow.ShouldGroupByHouse, 'ADMIN_WINDOW_HOUSE_DROPDOWN', 'ADMIN_WINDOW_ASSIGNED_THEME'), 'ADMIN_WINDOW_UNASSIGNED_THEME')]"
				}
			}
		}

		dynamicgridbox = {
			name = "assigned_themes_list"
			datamodel = "[AdministrativeHouseItem.GetControlledThemes]"
			visible = "[GovernmentAdministrationWindow.IsHouseCollapsed( AdministrativeHouseItem.GetHouse )]"
			layoutpolicy_horizontal = expanding

			datamodel_wrap = 3
			flipdirection = yes
			ignoreinvisible = yes
			item = {
				widget_theme_item = {
					datacontext = "[AdministrativeThemeItem.GetTitle]"
					visible = "[AdministrativeThemeItem.ShouldShowTitle]"
				}
			}
		}
	}

	type widget_theme_item_ocr = widget
	{
		size = { 600 90 }

		button_text = {
			resizeparent = yes
			datacontext = "[Title.GetHolder]"
			blockoverride "extra" {
				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical

					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3

						text_single = {
							block "admin_index" {
								raw_text = "[Add_int32(PdxGuiWidget.GetIndexInDataModel, Add_int32(FixedPointToInt( GetPlayer.MakeScope.Var('admin_page').GetValue ), '(int32)1'))],"
							}
						}


						text_single = {
							raw_text = "[Title.GetNameNoTierNoTooltip],"
						}

						flowcontainer = {
							visible = "[Character.IsValid]"
							ignoreinvisible = yes
							spacing = 3

							text_single = {
								visible = "[Not(IsAdministrativeRuler(Title.GetHolder))]"
								raw_text = "[Title.GetHolder.GetGovernment.GetNameNoTooltip],"
							}
						}

						text_single = {
							raw_text = "no successor,"
							visible = "[And( And( And( Title.HasHolder, Not( AdministrativeThemeItem.HasValidSuccessor ) ), Not( Title.GetHolder.IsIndependentRuler ) ), IsAdministrativeRuler( Title.GetHolder ) )]"

							tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_NO_VALID_SUCCESSOR_TT"
						}

						text_single = {
							visible = "[And( And( Not( AdministrativeThemeItem.HasLocalPlayerInvested ), AdministrativeThemeItem.HasLocalPlayerCandidate ), AdministrativeThemeItem.HasLocalPlayerCandidateInFirst )]"

							tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_WINNING_TT"
							margin_left = -3

							raw_text = "winning,"
						}

						text_single = {
							visible = "[And( AdministrativeThemeItem.HasLocalPlayerInvested, AdministrativeThemeItem.HasLocalPlayerCandidateInFirst )]"

							tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_WINNING_TT"
							raw_text = "winning,"
							margin_left = -3
						}

						text_single = {
							visible = "[And( And( Not( AdministrativeThemeItem.HasLocalPlayerInvested ), AdministrativeThemeItem.HasLocalPlayerCandidate ), Not( AdministrativeThemeItem.HasLocalPlayerCandidateInFirst ) )]"

							tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_LOSING_TT"
							raw_text = "losing,"
						}


						text_single = {
							visible = "[And( AdministrativeThemeItem.HasLocalPlayerInvested, Not( AdministrativeThemeItem.HasLocalPlayerCandidateInFirst ) )]"

							tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_LOSING_TT"
							raw_text = "losing,"
						}

						# text_single = {
						# 	raw_text = "[Title.MakeScope.ScriptValue('counties_in_title_de_facto')|0] counties."
						# }

						flowcontainer = {
							ignoreinvisible = yes
							visible = "[Character.IsValid]"
							spacing = 3

							text_single = {
								raw_text = "[GuiScope.SetRoot(Title.MakeScope).AddScope('player', Character.MakeScope).ScriptValue('your_counties_in_title')] counties,"
							}

							# text_single = {
							# 	raw_text = "out of [Title.MakeScope.ScriptValue('counties_in_title')]."
							# }
						}

						text_single = {
							visible = "[Not(Character.IsValid)]" # shouldn't happen? dunno
							raw_text = "[Title.MakeScope.ScriptValue('counties_in_title_de_facto')] counties,"
						}

						text_single = {
							visible = "[Not(ObjectsEqual(MyCapital, Province.Self))]"
							datacontext = "[Title.GetPreferredCapital.GetProvince]"
							raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)],"
						}

						text_single = {
							datacontext = "[Title.GetPreferredCapital.GetProvince]"
							visible = "[ObjectsEqual(MyCapital, Province.Self)]"
							raw_text = "your capital,"
						}

						text_single = {
							visible = "[GetScriptedGui('is_border_theme').IsShown( GuiScope.SetRoot( Title.MakeScope ).End )]"
							raw_text = "on the border,"
						}

						text_single = {
							visible = "[Not(Title.GetHolder.IsValid)]"
							raw_text = "no holder!"
						}

						flowcontainer = {
							ignoreinvisible = yes
							spacing = 3

							visible = "[Character.IsValid]"

							flowcontainer = {
								ignoreinvisible = yes
								visible = "[Character.GetHouse.IsValid]"
								spacing = 3

								text_single = {
									visible = "[IsIndexFirst]"
									raw_text = "held by"
								}

								text_single = {
									visible = "[And(ObjectsEqual(Character.GetHouse, GetPlayer.GetHouse), Not(Character.IsLocalPlayer))]"
									raw_text = "your kin,"
								}
							}

							text_single = {
								raw_text = "[Character.GetFirstNameOrMeNoTooltip]"
							}

							flowcontainer = {
								ignoreinvisible = yes
								visible = "[Character.GetHouse.IsValid]"

								text_single = {
									visible = "[Not(ObjectsEqual(Character.GetHouse, GetPlayer.GetHouse))]"
									raw_text = "[Character.GetHouse.GetNameNoTooltip]."
								}
							}

						}
					}

					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3

						# alive text
						flowcontainer = {
							visible = "[Title.GetHolder.IsValid]"
							datacontext = "[Title.GetHolder]"
							datacontext = "[Title.GetHolder.GetVassalContract]"
							spacing = 3
							ignoreinvisible = yes

							text_single = {
								visible = "[IsAdministrativeRuler( Title.GetHolder )]"
								raw_text = "[Character.MakeScope.ScriptValue( 'governor_efficiency_presented')|0]% efficiency,"
								tooltip = ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_TT
							}

							text_single = {
								visible = "[GetScriptedGui('is_coastal_theme').IsShown( GuiScope.SetRoot( Title.MakeScope ).End )]"
								raw_text = "Coastal,"
							}

							flowcontainer = {
								ignoreinvisible = yes
								visible = "[And(Not( Title.GetHolder.IsIndependentRuler ), IsAdministrativeRuler( Title.GetHolder ))]"
								spacing = 3
								datacontext = "[Title.GetHolder]"
								margin_left = -3

								text_single = {
									raw_text = "[Title.GetHolder.GetVassalContract.GetShortObligationLevelNameWithHighlightFor('administrative_themes')],"
								}
							}

							flowcontainer = {
								ignoreinvisible = yes
								spacing = 3
								visible = "[Not(Title.GetHolder.IsIndependentRuler)]"
								text_single = {
									raw_text = "Tax: [Character.MakeScope.ScriptValue('bav_tax_to_liege')|1v],"
								}

								text_single = {
									raw_text = "Levies, [Character.MakeScope.ScriptValue('bav_levies_to_liege')|0v],"
								}
							}

							text_single = {
								raw_text = "[Title.GetTotalTitleMAATroopsDesc],"
								visible = "[Not(DataModelHasItems(Title.GetControlledMAA))]"
							}

							text_single = {
								visible = "[DataModelHasItems(Title.GetControlledMAA)]"
								raw_text = "Men at arms: [Title.MakeScope.ScriptValue('bav_conrtolled_title_maa')|v0],"

								tooltipwidget = {
									container = {
										alwaystransparent = no

										using = DefaultTooltipBackground

										flowcontainer = {
											margin = { 15 15 }
											ignoreinvisible = yes
											direction = vertical
											datamodel = "[Title.GetControlledMAA]"

											item = {
												flowcontainer = {
													ignoreinvisible = yes
													spacing = 3

													text_single = {
														raw_text = "[Regiment.GetMAAType.GetNameNoTooltip] [Regiment.MakeScope.ScriptValue('bav_maa_current_size')]/[Regiment.GetMaxCount], [Regiment.GetMAAChunkCount]."
													}

													tooltipwidget = {
														using = regiment_container_text_tooltip
													}
												}
											}
										}
									}
								}
							}

							text_single = {
								visible = "[DataModelHasItems(Title.GetControlledMAA)]"
								raw_text = "[GetDataModelSize(Title.GetControlledMAA)] of [Add_CFixedPoint(Character.MakeScope.ScriptValue('bav_maa_title_cap'), Select_CFixedPoint(EqualTo_string(Character.GetHouse.GetHousePowerBonus.GetName, GetHousePowerBonus('army_quartermasters').GetName), '(CFixedPoint)1', '(CFixedPoint)0'))],"
							}

							# overlappingitembox = {
							# 	# layoutpolicy_vertical = expanding
							# 	size = { 40 18 }
							# 	visible = "[DataModelHasItems(Title.GetControlledMAA)]"
							#
							# 	datamodel = "[Title.GetControlledMAA]"
							#
							# 	item = {
							# 		icon = {
							# 			size = { 25 25 }
							# 			texture = "[Regiment.GetMAAType.GetIcon]"
							# 			tooltipwidget = {
							# 				using = regiment_container_text_tooltip
							# 			}
							# 		}
							# 	}
							# }


							flowcontainer = {
								visible = "[IsAdministrativeRuler( Title.GetHolder )]"
								ignoreinvisible = yes


								text_single = {
									visible = "[Title.GetHolder.IsIndependentRuler]"
									text = ADMIN_WINDOW_THEME_IMPERIAL_LANDS

									max_width = 140
								}
							}

							flowcontainer = {
								visible = "[Character.IsValid]"
								ignoreinvisible = yes
								spacing = 3

								text_single = {
									visible = "[And( And( And( Not( IsAdministrativeRuler( Character ) ), Character.IsValid ), Character.GetLiege.IsPlayer ), Character.IsPlayerInteractionValid('demand_admin_interaction') )]"
									raw_text = "click to convert to admin,"
								}
							}
						}

						# dead text
						# flowcontainer = {
						# 	visible = "[Not(Title.GetHolder.IsValid)]"
						# 	datacontext = "[Title.GetHolder]"
						#
						# 	text_single = {
						# 		raw_text = "[Character.MakeScope.ScriptValue( 'governor_efficiency_presented')|0]"
						# 		tooltip = ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_TT
						# 	}
						# }
					}
				}
			}
		}

		container = {
			block "shortcuts" {
				visible = "[Not(Title.GetHolder.IsIndependentRuler)]"
			}
			shortcuts_list = {
				visible = "[IsAdministrativeRuler(Title.GetHolder)]"
				blockoverride "click" {
					onclick = "[ToggleAdminVassalDetailView( Title.Self )]"
				}
			}

			shortcuts_list = {
				visible = "[Or( Not(Title.GetHolder.IsValid),  And( And( Not( IsAdministrativeRuler( Title.GetHolder )), Not(Title.GetHolder.IsPlayerInteractionValid('demand_admin_interaction'))), Title.GetHolder.GetLiege.IsPlayer  ) ) ]"
				blockoverride "click" {
					onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
				}
			}

			shortcuts_list = {
				visible = "[And( And( And( Not( IsAdministrativeRuler( Character ) ), Character.IsValid ), Character.GetLiege.IsPlayer ), Character.IsPlayerInteractionValid('demand_admin_interaction') )]"
				blockoverride "click" {
					onclick = "[Character.OpenPlayerInteraction('demand_admin_interaction')]"
				}
			}
		}

		button = {
			name = "open_detail_button"
			visible = "[IsAdministrativeRuler(Title.GetHolder)]"
			size = { 100% 100% }
			onclick = "[ToggleAdminVassalDetailView( Title.Self )]"
			down = "[IsAdminVassalDetailViewShown( Title.Self )]"
		}

		button = {
			visible = "[Or( Not(Title.GetHolder.IsValid),  And( And( Not( IsAdministrativeRuler( Title.GetHolder )), Not(Title.GetHolder.IsPlayerInteractionValid('demand_admin_interaction'))), Title.GetHolder.GetLiege.IsPlayer  ) ) ]"
			size = { 100% 100% }
			onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
		}

		button = {
			name = "demand_admin_interaction_button"
			datacontext = "[Title.GetHolder]"
			visible = "[And( And( And( Not( IsAdministrativeRuler( Character ) ), Character.IsValid ), Character.GetLiege.IsPlayer ), Character.IsPlayerInteractionValid('demand_admin_interaction') )]"
			size = { 100% 100% }
			tooltip = "[Character.GetPlayerInteractionTooltip('demand_admin_interaction')]"
			onclick = "[Character.OpenPlayerInteraction('demand_admin_interaction')]"
		}

		# tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_THEME_TT"
		# tooltip_visible = "[AdministrativeThemeItem.ShouldShowTooltip]"
		using = tooltip_ne
	}

	type hbox_theme_contract_obligation_result_ocr = hbox
	{
		layoutpolicy_horizontal = expanding
		spacing = 8

		text_single = {
			text = ADMIN_WINDOW_THEME_ADMINISTRATION_LEVIES
		}

		text_single = {
			text = ADMIN_WINDOW_THEME_ADMINISTRATION_TAXES
		}
	}

	type button_modify_theme_ocr = button_text {
		visible = "[Character.IsPlayerInteractionShown('admin_liege_modify_vassal_contract_interaction')]"
		enabled = "[Character.IsPlayerInteractionValid('admin_liege_modify_vassal_contract_interaction')]"
		block "theme_key" {
			shortcut = map_mode_2
		}

		onclick = "[Character.OpenPlayerInteraction('admin_liege_modify_vassal_contract_interaction')]"
		onclick = "[Character.PanCameraTo]"

		tooltip = "[Character.GetPlayerInteractionTooltip('admin_liege_modify_vassal_contract_interaction')]"

		tooltip_visible = "[Not(Character.IsPlayerInteractionValid('admin_liege_modify_vassal_contract_interaction'))]"

		blockoverride "text" {
			raw_text = "ADMIN_WINDOW_THEME_ADMINISTRATION_TYPE"
		}
		blockoverride "extra" {
			block "theme_key" {
				text_single = {
					raw_text = "type,"
				}
				text_single = {
					visible = "[Character.IsPlayerInteractionValid('admin_liege_modify_vassal_contract_interaction')]"
					raw_text = "T."
				}
				text_single = {
					visible = "[Not(Character.IsPlayerInteractionValid('admin_liege_modify_vassal_contract_interaction'))]"
					raw_text = "Disabled."
				}
			}
		}
	}

	type button_replace_governor_ocr = button_round {
		using = Placeholder_Inactive_Button

		tooltip = "REPLACE_GOVERNOR_TOOLTIP"

		button_change = {
			parentanchor = center
		}
	}

	type button_revoke_theme_ocr = button_round {
		enabled = "[Character.IsPlayerInteractionValid('revoke_title_interaction')]"

		onclick = "[Character.OpenPlayerInteraction('revoke_title_interaction')]"
		onclick = "[Character.PanCameraTo]"

		tooltip = "[Character.GetPlayerInteractionTooltip('revoke_title_interaction')]"

		button_cancel = {
			alwaystransparent = yes
			parentanchor = center
		}
	}

	type vbox_themes_list_ocr = vbox
	{
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		using = Animation_Tab_Switch

		vbox = {
			name = "house_list"
			datamodel = "[GovernmentAdministrationWindow.GetHousesWithThemes]"

			layoutpolicy_horizontal = expanding

			item = {
				vbox_house_theme_list = {
					datacontext = "[AdministrativeHouseItem.GetHouse]"
					layoutpolicy_horizontal = expanding
				}
			}
		}

		expand = { }
	}
}

types OCR
{
	type widget_house_member_item_ocr = widget {
		datacontext = "[CharacterListItem.GetCharacter]"

		flowcontainer = {
			ignoreinvisible = yes
			direction = vertical

			button_text = {
				using = char_click
				blockoverride "pre" {
					block "widget_index" {}
				}
				blockoverride "text" {
					raw_text = "[Character.GetUINameNoTooltip], [Character.GetAge]."
				}
				blockoverride "extra" {
					text_single = {
						visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"
						text = "[Character.GetRelationToString( GetPlayer )]"
						tooltip = "EXTENDED_RELATIONS_TOOLTIP"
					}
				}
			}

			flowcontainer = {
				ignoreinvisible = yes
				spacing = 3

				flowcontainer = {
					ignoreinvisible = yes
					spacing = 3
					tooltipwidget = {
						widget_value_breakdown_tooltip = {
							datacontext = "[GovernmentAdministrationWindow.GetInvestmentCapTooltip( Character.Self )]"
						}
					}

					text_single = {
						raw_text = "[Character.GetInvestmentCap]"
					}

					text_single = {
						visible = "[IsIndexFirst]"
						raw_text = "[investment_cap|E]"
					}

					text_single = {
						visible = "[Not(IsIndexFirst)]"
						raw_text = "investment"
					}
					comma = {}
				}


				text_single = {
					text = "ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_VALUE"
					tooltip = "ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_TT"
				}

				text_single = {
					raw_text = "admin"
				}

				text_single = {
					visible = "[IsIndexFirst]"
					raw_text = "efficiency"
				}

				comma = {}

				text_single = {
					using = opinion_of_me_text
				}
			}

			flowcontainer = {
				ignoreinvisible = yes
				spacing = 3
				visible = "[IsAdministrativeRuler( Character )]"

				flowcontainer = {
					ignoreinvisible = yes
					spacing = 3
					visible = "[GreaterThan_int32( PdxGuiWidget.AccessParent.FindChild('governorships').CountVisibleChildren, '(int32)0')]"

					text_single = {
						raw_text = "[PdxGuiWidget.AccessParent.AccessParent.FindChild('governorships').CountVisibleChildren] high titles:"
					}
				}

				text_single = {
					visible = "[EqualTo_int32( PdxGuiWidget.AccessParent.FindChild('governorships').CountVisibleChildren, '(int32)0')]"

					text_single = {
						raw_text = "No high titles."
					}
				}

				flowcontainer = {
					ignoreinvisible = yes
					datamodel = "[Character.GetTitles]"
					name = "governorships"

					item = {
						button_text = {
							using = title_click
							visible = "[GreaterThan_int32( Title.GetTierFrame, '(int32)3' )]" # Show only Duke or Emperor
							blockoverride "text" {
								raw_text = "[Title.GetNameNoTooltip],"
							}
						}
					}
				}

				expand = {}
			}
		}
	}

	type vbox_family_group_foldout_ocr = vbox {
		layoutpolicy_horizontal = expanding

		oncreate = "[BindFoldOutContext]"
		oncreate = "[PdxGuiFoldOut.Unfold]"

		state = {
			name = "fold_all_families"
			on_finish = "[PdxGuiFoldOut.Fold]"
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			onclick = "[PdxGuiFoldOut.Toggle]"
			shortcuts_list = {
				blockoverride "click" {
					onclick = "[PdxGuiFoldOut.Toggle]"
				}
			}
			blockoverride "num" {

			}
			blockoverride "text" {
				raw_text = "[AdminFamilyGroupItem.GetName],"
				alwaystransparent = yes
			}
			blockoverride "extra" {
				text_single = {
					raw_text = "[CollapseIf(PdxGuiFoldOut.IsFolded)]"
				}
			}
		}

		vbox = {
			visible = "[PdxGuiFoldOut.IsUnfolded]"

			layoutpolicy_horizontal = expanding

			fixedgridbox = {
				name = "families_in_group"

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				addcolumn = 600
				addrow = 65
				visible = "[Not(GreaterThan_int32(GetDataModelSize(AdminFamilyGroupItem.GetFamilyItems), '(int32)10'))]"

				datamodel = "[AdminFamilyGroupItem.GetFamilyItems]"
				item = {
					button_family_group_item_ocr = {}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[GreaterThan_int32(GetDataModelSize(AdminFamilyGroupItem.GetFamilyItems), '(int32)10')]"

				hbox = {
					spacing = 3
					layoutpolicy_horizontal = expanding

					text_single = {
						raw_text = "Showing houses from [PageStart('noble_families_page')] to [PageEnd('noble_families_page', GetPlayer.MakeScope.Var('noble_families_page_size').GetValue, AdminFamilyGroupItem.GetFamilyItems)],"
					}

					button_text = {
						shortcut = army_merge
						onclick = "[GetScriptedGui('resize_noble_families_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						blockoverride "text" {
							margin_left = -5
							raw_text = "Show [Select_CString(EqualTo_CFixedPoint(GetPlayer.MakeScope.Var('noble_families_page_size').GetValue, '(CFixedPoint)10'), '5', '10')] per page, G."
						}
					}
					expand = {}
				}

				fixedgridbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					addcolumn = 600
					addrow = 65

					datamodel = "[PageModel('noble_families_page', FixedPointToInt(GetPlayer.MakeScope.Var('noble_families_page_size').GetValue), AdminFamilyGroupItem.GetFamilyItems)]"

					blockoverride "widget_index" {
						alwaystransparent = yes
						margin_left = 3
						raw_text = "[Add_int32(PdxGuiWidget.GetIndexInDataModel, Add_int32(FixedPointToInt( GetPlayer.MakeScope.Var('noble_families_page').GetValue ), '(int32)1'))],"
					}

					item = {
						button_family_group_item_ocr = {}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						button_text = {
							visible = "[GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('noble_families_page').GetValue, '(CFixedPoint)0' )]"
							blockoverride "text" {
								raw_text = "Previous [GetPlayer.MakeScope.Var('noble_families_page_size').GetValue|0], Z."
							}
							onclick = "[GetScriptedGui('prev_noble_families_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
							shortcut = decrease_speed_2
							using = paper_flip_back_ocr
						}

						button_text = {
							onclick = "[GetScriptedGui('reset_noble_families_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
							shortcut = map_mode_18
							using = paper_flip_back_ocr
							blockoverride "text" {
								raw_text = "Reset, Control R."
							}
						}

						expand = {}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "Next [GetPlayer.MakeScope.Var('noble_families_page_size').GetValue|0], X."
						}
						onclick = "[GetScriptedGui('next_noble_families_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						visible = "[GreaterThan_int32( Subtract_int32( GetDataModelSize( AdminFamilyGroupItem.GetFamilyItems ), FixedPointToInt(GetPlayer.MakeScope.Var('noble_families_page').GetValue )), FixedPointToInt(GetPlayer.MakeScope.Var('noble_families_page_size').GetValue) )]"
						using = paper_flip_forward_ocr
						shortcut = increase_speed_2
					}
				}
			}

		}
	}

	type button_family_group_item_ocr = button
	{
		size = { 600 70 }
		datacontext = "[AdminHouseItem.GetHouse]"
		datacontext = "[DynastyHouse.GetHeadOfHouse]"
		onclick = "[GovernmentAdministrationWindow.SelectFeaturedHouse( DynastyHouse.Self )]"
		datacontext = "[DynastyHouse.GetHeadOfHouse]"

		flowcontainer = {
			ignoreinvisible = yes
			direction = vertical

			#TODO number of governors of this house
			flowcontainer = {
				ignoreinvisible = yes
				spacing = 3

				text_single = {
					block "widget_index" {
						raw_text = "[IndexNumber],"
					}
				}

				text_single = {
					raw_text = "[DynastyHouse.GetHousePower] power,"
					tooltipwidget = {
						widget_value_breakdown_tooltip = {
							datacontext = "[GovernmentAdministrationWindow.GetHousePowerTooltip( DynastyHouse.Self )]"
						}
					}
				}

				text_single = {
					max_width = 350
					raw_text = "ADMINISTRATIVE_GOVERNMENT_HOUSE_WITH_NAME"
				}

				comma = {}

				text_single = {
					raw_text = "[DynastyHouse.GetNumberOfMembers] members,"
				}

				text_single = {
					visible = "[IsIndexFirst]"
					raw_text = "controls"
				}
				text_single = {
					raw_text = "[GuiScope.SetRoot( DynastyHouse.MakeScope ).AddScope('target', GetPlayer.GetTopLiege.MakeScope).ScriptValue('house_land_share')|%0] of the realm"
				}
			}

			button_text = {
				using = char_click
				blockoverride "pre" {
					text_single = {
						visible = "[And(IsIndexFirst, Not(Character.IsLocalPlayer))]"
						raw_text = "Head has"
					}
					text_single = {
						visible = "[Character.IsLocalPlayer]"
						raw_text = "Head:"
					}
					text_single = {
						using = opinion_of_me_text
					}
				}
				blockoverride "text" {
					raw_text = "[Character.GetShortUIName],"
				}
				blockoverride "extra" {
					text_single = {
						raw_text = "[Character.GetMilitaryStrengthText] men."
					}
				}
			}

			powerful_family_bonus_ocr = {
				blockoverride "show_button" {
					visible = "[Or(IsIndexFirst, Character.IsLocalPlayer)]"
				}
			}
		}
	}
}

types BAV {
	type widget_theme_item_bav = widget
	{
		size = { 520 58 }
		state = {
			name = _mouse_hierarchy_enter
			on_start = "[PdxGuiWidget.FindChild('theme_glow').TriggerAnimation('appear')]"
		}

		state = {
			name = _mouse_hierarchy_leave
			on_start = "[PdxGuiWidget.FindChild('theme_glow').TriggerAnimation('disappear')]"
		}

		datacontext = "[Title.GetHolder]"

		button = {
			name = "open_detail_button"
			visible = "[And(Not( GetVariableSystem.Exists( 'admin_vassal_details_refresh' ) ), IsAdministrativeRuler(Title.GetHolder))]"
			size = { 100% 100% }

			onclick = "[ToggleAdminVassalDetailView( Title.Self )]"
			onrightclick = "[Character.PanCameraTo]"
			button_ignore = none
			# onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
			down = "[IsAdminVassalDetailViewShown( Title.Self )]"
			onclick = "[Character.PanCameraTo]"
		}

		button = {
			name = "refresh_detail_button"
			visible = "[And(GetVariableSystem.Exists( 'admin_vassal_details_refresh' ),IsAdministrativeRuler(Title.GetHolder))]"
			size = { 100% 100% }

			onclick = "[PdxGuiTriggerAllAnimations('admin_vassal_details_refresh')]"
			down = "[IsAdminVassalDetailViewShown( Title.Self )]"

			state = {
				name = _mouse_click
				delay = 0.2
				on_finish = "[ToggleAdminVassalDetailView( Title.Self )]"
			}
		}

		button = {
			visible = "[Or( Not(Title.GetHolder.IsValid),  And( And( Not( IsAdministrativeRuler( Title.GetHolder )), Not(Title.GetHolder.IsPlayerInteractionValid('demand_admin_interaction'))), Title.GetHolder.GetLiege.IsPlayer  ) ) ]"
			size = { 100% 100% }
			onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
		}

		button = {
			name = "demand_admin_interaction_button"
			datacontext = "[Title.GetHolder]"
			visible = "[And( And( And( Not( IsAdministrativeRuler( Character ) ), Character.IsValid ), Character.GetLiege.IsPlayer ), Character.IsPlayerInteractionValid('demand_admin_interaction') )]"
			size = { 100% 100% }
			tooltip = "[Character.GetPlayerInteractionTooltip('demand_admin_interaction')]"
			onclick = "[Character.OpenPlayerInteraction('demand_admin_interaction')]"
		}

		background = {
			visible = "[Title.GetHolder.IsPlayer]"
			using = Background_Area_Border
			using = Background_Frame_Gold
		}

		icon = {
			name = "theme_glow"
			parentanchor = center
			size = { 105% 105% }
			texture = "gfx/interface/window_theme_administration/admin_theme_glow.dds"
			alpha = 0

			state = {
				name = appear
				using = Animation_Curve_Default
				duration = 0.2
				position = { 0 0 }
				alpha = 0.7
				scale = 1.01
			}

			state = {
				name = disappear
				using = Animation_Curve_Default
				duration = 0.2
				position = { 0 0 }
				alpha = 0
				scale = 0.97
			}
		}

		widget = {
			size = { 100% 100% }

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					bottomtotop = yes # in order to put the header background on top

					# bottom
					widget = {
						layoutpolicy_horizontal = expanding
						size = { 0 38 }



						# alive background
						widget = {
							name = "theme_type_title"
							datacontext = "[Title.GetHolder]"
							visible = "[Title.GetHolder.IsValid]"

							size = { 100% 100% }

							background = {
								texture = "gfx/interface/colors/black.dds"
								using = Mask_Rough_Edges
								alpha = 0.8
								margin_bottom = 2
							}

							background = {
								texture = "gfx/interface/colors/blue.dds"
								color = { 0.5 0.6 0.65 1 }
								using = Mask_Rough_Edges

								visible = "[IsAdministrativeRuler(Title.GetHolder)]"

								modify_texture = {
									texture = "gfx/interface/component_overlay/seamless_noise.dds"
									blend_mode = overlay
									spriteType = CorneredTiled

									alpha = 0.1
								}
							}

							background = {
								texture = "gfx/interface/colors/red.dds"
								color = { 0.4 0.7 0.7 1 }
								using = Mask_Rough_Edges

								visible = "[Not(IsAdministrativeRuler(Title.GetHolder))]"

								modify_texture = {
									texture = "gfx/interface/component_overlay/seamless_noise.dds"
									blend_mode = overlay
									spriteType = CorneredTiled

									alpha = 0.3
								}
							}

							background = {
								texture = "gfx/interface/colors/black.dds"
								using = Mask_Rough_Edges
								alpha = 0.1
								margin_bottom = 2
							}

							background = {
								visible = no
								texture = "[Title.GetPreferredCapital.GetProvince.GetTerrain.GetIllustration]"
								fittype = centercrop
								# alpha = 0.7

								modify_texture = {
									blend_mode = alphaMultiply
									texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
									# mirror = horizontal
								}
								modify_texture = {
									blend_mode = alphaMultiply
									texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
									mirror = horizontal
								}
							}
						}

						# dead background
						widget = {
							datacontext = "[Title.GetHolder]"
							visible = "[Not(Title.GetHolder.IsValid)]"

							size = { 100% 100% }
							parentanchor = bottom

							background = {
								texture = "gfx/interface/colors/black.dds"
								using = Mask_Rough_Edges
								alpha = 0.8

								margin_bottom = 2
							}

							background = {
								texture = "gfx/interface/colors/grey.dds"
								color = { 0.6 0.6 0.6 1 }
								using = Mask_Rough_Edges

								modify_texture = {
									texture = "gfx/interface/component_overlay/seamless_noise.dds"
									blend_mode = overlay
									spriteType = CorneredTiled

									alpha = 0.2
								}
							}
						}

						# coa
						widget = {
							name = "background"
							scissor = yes
							size = { 100% 100% }
							alpha = 0.3
							position = { 50 0 }

							coat_of_arms_icon = {
								size = { 128 128 }
								coat_of_arms = "[Title.GetTitleCoA.GetTexture('(int32)230','(int32)230')]"
								coat_of_arms_slot = "[Title.GetTitleCoA.GetSlot('(int32)230','(int32)230')]"
								coat_of_arms_mask = "gfx/interface/coat_of_arms/designer_mask.dds"

								color = { 1 1 1 0.5 }

								modify_texture = {
									texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
									rotate_uv = 1.08
									translate_uv = { 0.3 0 }
									blend_mode = alphamultiply
								}

								using = Mask_Rough_Edges
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							margin = { 60 0 }
							margin_right = 100

							# alive text
							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Title.GetHolder.IsValid]"
								datacontext = "[Title.GetHolder]"
								datacontext = "[Title.GetHolder.GetVassalContract]"

								text_single = {
									raw_text = "@gold_icon! [Character.MakeScope.ScriptValue('bav_tax_to_liege')|1v]"
									alpha = "[Select_float(  LessThan_CFixedPoint(Character.MakeScope.ScriptValue('bav_tax_to_liege'), '(CFixedPoint)0.1'), '(float)0.5', '(float)1.0' )]"
									min_width = 60
									max_width = 60
								}

								text_single = {
									raw_text = "@soldier_icon! [Character.MakeScope.ScriptValue('bav_levies_to_liege')|0v]"
									alpha = "[Select_float(  LessThan_CFixedPoint(Character.MakeScope.ScriptValue('bav_levies_to_liege'), '(CFixedPoint)0.1'), '(float)0.5', '(float)1.0' )]"
									min_width = 60
									max_width = 60
								}


								text_single = {
									raw_text = "[Title.GetTotalTitleMAATroopsDesc]"
									visible = "[Not(DataModelHasItems(Title.GetControlledMAA))]"
									max_width = 100
									alpha = "[Select_float( DataModelHasItems(Title.GetControlledMAA), '(float)1.0', '(float)0.7' )]"

								}

								text_single = {
									visible = "[DataModelHasItems(Title.GetControlledMAA)]"
									raw_text = "[Title.MakeScope.ScriptValue('bav_conrtolled_title_maa')|v0]"
									min_width = 30
									max_width = 30

									tooltipwidget = {
										container = {
											alwaystransparent = no

											using = DefaultTooltipBackground

											flowcontainer = {
												margin = { 15 15 }
												ignoreinvisible = yes
												direction = vertical
												datamodel = "[Title.GetControlledMAA]"

												item = {
													flowcontainer = {
														ignoreinvisible = yes
														spacing = 3
														icon = {
															size = { 25 25 }
															texture = "[Regiment.GetMAAType.GetIcon]"
														}

														text_single = {
															raw_text = "[Regiment.GetMAAType.GetNameNoTooltip] [Regiment.MakeScope.ScriptValue('bav_maa_current_size')]/[Regiment.GetMaxCount], [Regiment.GetMAAChunkCount]"
														}

														tooltipwidget = {
															using = regiment_container_text_tooltip
														}
													}
												}
											}
										}
									}
								}

								spacer = {
									size = { 5 0 }
								}

								text_single = {
									visible = "[DataModelHasItems(Title.GetControlledMAA)]"
									raw_text = "[GetDataModelSize(Title.GetControlledMAA)]/[Add_CFixedPoint(Character.MakeScope.ScriptValue('bav_maa_title_cap'), Select_CFixedPoint(EqualTo_string(Character.GetHouse.GetHousePowerBonus.GetName, GetHousePowerBonus('army_quartermasters').GetName), '(CFixedPoint)1', '(CFixedPoint)0'))]"
									align = right
									min_width = 20
									max_width = 20
								}

								spacer = {
									size = { 3 0 }
								}

								# text_single = {
								# 	raw_text = "[GetHousePowerBonus('army_quartermasters').GetName]"
								# }


								overlappingitembox = {
									# layoutpolicy_vertical = expanding
									size = { 40 18 }
									visible = "[DataModelHasItems(Title.GetControlledMAA)]"

									datamodel = "[Title.GetControlledMAA]"

									item = {
										icon = {
											size = { 25 25 }
											texture = "[Regiment.GetMAAType.GetIcon]"
											tooltipwidget = {
												using = regiment_container_text_tooltip
											}
										}
									}
								}

								expand = {
								}

								hbox = {
									visible = "[IsAdministrativeRuler( Title.GetHolder )]"

									hbox = {
										visible = "[Not( Title.GetHolder.IsIndependentRuler )]"
										spacing = 5
										datacontext = "[Title.GetHolder]"

										button_round = {
											size = { 30 30 }
											datacontext = "[Title.GetHolder.GetLiege]"
											visible = "[And(Title.GetHolder.IsPlayer,Title.GetHolder.GetLiege.IsValid)]"
											enabled = "[Character.IsPlayerInteractionValid('admin_vassal_modify_vassal_contract_interaction')]"
											tooltip = "[Character.GetPlayerInteractionTooltip('admin_vassal_modify_vassal_contract_interaction')]"
											onclick = "[Character.OpenPlayerInteraction('admin_vassal_modify_vassal_contract_interaction')]"

											text_single = {
												alwaystransparent = yes
												text = ADMIN_WINDOW_THEME_ADMINISTRATION_TYPE_TEXT_ICON
												parentanchor = center
												scale = 1.2
												position = { 0 -2 }
												alpha = "[Select_float( Character.IsPlayerInteractionValid('admin_vassal_modify_vassal_contract_interaction'), '(float)1.0', '(float)0.5' )]"
											}

											blockoverride "button_bg_color"
											{
												color = { 0.5 0.5 0.7 1 }
												alpha = 0.1
											}
										}

										button_round = {
											size = { 26 26 }
											visible = "[Character.IsPlayerInteractionShown('admin_liege_modify_vassal_contract_interaction')]"
											enabled = "[Character.IsPlayerInteractionValid('admin_liege_modify_vassal_contract_interaction')]"

											onclick = "[Character.OpenPlayerInteraction('admin_liege_modify_vassal_contract_interaction')]"
											onclick = "[Character.PanCameraTo]"
											blockoverride "button_bg_color"
											{
												color = { 0.5 0.5 0.7 1 }
												alpha = 0.1
											}

											tooltip = "[Character.GetPlayerInteractionTooltip('admin_liege_modify_vassal_contract_interaction')]"

											text_single = {
												alwaystransparent = yes
												text = ADMIN_WINDOW_THEME_ADMINISTRATION_TYPE_TEXT_ICON
												parentanchor = center
												scale = 1.2
												position = { 0 -2 }
												alpha = "[Select_float( Character.IsPlayerInteractionValid('admin_liege_modify_vassal_contract_interaction'), '(float)1.0', '(float)0.5' )]"
											}
										}

										button_round = {
											size = { 26 26 }
											visible = "[Character.IsPlayerInteractionShown('give_vassal_directive_interaction')]"
											enabled = "[Character.IsPlayerInteractionValid('give_vassal_directive_interaction')]"
											onclick = "[Character.OpenPlayerInteraction('give_vassal_directive_interaction')]"
											tooltip = "[Character.GetPlayerInteractionTooltip('give_vassal_directive_interaction')]"

											blockoverride "button_bg_color"
											{
												color = { 0.5 0.5 0.7 1 }
												alpha = 0.1
											}

											text_single = {
											 	visible = "[Title.GetHolder.IsPlayerInteractionShown('give_vassal_directive_interaction')]"
											 	text = "[Title.GetHolder.Custom('vassal_directive_icon')]"
											 	# tooltip = "[Title.GetHolder.Custom('vassal_directive_text')]"
											 	using = tooltip_se
												alwaystransparent = yes
												position = { 0 -6 }
												alpha = "[Select_float( Character.IsPlayerInteractionValid('give_vassal_directive_interaction'), '(float)1.0', '(float)0.5' )]"
											}

											using = tooltip_se
										}
										#
										# text_single = {
										# 	text = ADMIN_WINDOW_THEME_ADMINISTRATION_TYPE_TEXT_ICON
										# 	max_width = 90
										# }
										# text_single = {
										# 	visible = "[Title.GetHolder.IsPlayerInteractionShown('give_vassal_directive_interaction')]"
										# 	text = "[Title.GetHolder.Custom('vassal_directive_icon')]"
										# 	tooltip = "[Title.GetHolder.Custom('vassal_directive_text')]"
										# 	using = tooltip_se
										#
										# }

										# spacer = {
										# 	size = { 5 0 }
										# }

										text_single = {
											text = ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY
											tooltip = ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_TT
											default_format = "#low"
											align = right
											max_width = 60
											min_width = 60
										}
									}

									text_single = {
										visible = "[Title.GetHolder.IsIndependentRuler]"
										text = ADMIN_WINDOW_THEME_IMPERIAL_LANDS

										max_width = 140
									}
								}

								# wrong type
								hbox = {
									visible = "[Not(IsAdministrativeRuler(Title.GetHolder))]"
									margin_top = 6

									text_single = {
										text = "ADMIN_WINDOW_VASSAL_GOVERNMENT_TYPE"

									}
								}

								hbox = {
									spacing = 3
									margin_top = 5
									ignoreinvisible = no
									visible = no

									# succession
									widget = {
										size = { 28 28 }

										widget = {
											name = "no_valid_successor"
											size = { 100% 100% }

											visible = "[And( And( And( Title.HasHolder, Not( AdministrativeThemeItem.HasValidSuccessor ) ), Not( Title.GetHolder.IsIndependentRuler ) ), IsAdministrativeRuler( Title.GetHolder ) )]"

											tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_NO_VALID_SUCCESSOR_TT"

											background = {
												texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
											}

											button_heir = {
												parentanchor = center
												position = { 0 -8 }
												alwaystransparent = yes
											}
										}

										widget = {
											name = "no_investment_has_candidate_winning"
											size = { 100% 100% }

											visible = "[And( And( Not( AdministrativeThemeItem.HasLocalPlayerInvested ), AdministrativeThemeItem.HasLocalPlayerCandidate ), AdministrativeThemeItem.HasLocalPlayerCandidateInFirst )]"

											tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_WINNING_TT"

											background = {
												texture = "gfx/interface/window_theme_administration/admin_theme_sucession.dds"
											}

											button_house = {
												parentanchor = center
												position = { 0 -8 }
												alwaystransparent = yes
											}
										}

										widget = {
											name = "no_investment_has_candidate_losing"
											size = { 100% 100% }

											visible = "[And( And( Not( AdministrativeThemeItem.HasLocalPlayerInvested ), AdministrativeThemeItem.HasLocalPlayerCandidate ), Not( AdministrativeThemeItem.HasLocalPlayerCandidateInFirst ) )]"

											tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_LOSING_TT"

											background = {
												texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
											}

											button_house = {
												parentanchor = center
												position = { 0 -8 }
												alwaystransparent = yes
											}
										}

										widget = {
											name = "invested_winning"
											size = { 100% 100% }

											visible = "[And( AdministrativeThemeItem.HasLocalPlayerInvested, AdministrativeThemeItem.HasLocalPlayerCandidateInFirst )]"

											tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_WINNING_TT"

											background = {
												texture = "gfx/interface/window_theme_administration/admin_theme_sucession.dds"
											}

											button_promote_candidate = {
												parentanchor = center
												position = { 0 -8 }
												alwaystransparent = yes
											}
										}

										widget = {
											name = "invested_losing"
											size = { 100% 100% }

											visible = "[And( AdministrativeThemeItem.HasLocalPlayerInvested, Not( AdministrativeThemeItem.HasLocalPlayerCandidateInFirst ) )]"

											tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_LOSING_TT"

											background = {
												texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
											}

											button_promote_candidate = {
												parentanchor = center
												position = { 0 -8 }
												alwaystransparent = yes
											}
										}
									}

									# house
									widget = {
										name = "governing_house_coat_of_arms"
										size = { 32 32 }

										datacontext = "[Title.GetHolder.GetHouse]"
										visible = "[Title.HasHolder]"

										# background = {
										# 	texture = "gfx/interface/window_theme_administration/admin_theme_coa_holder.dds"
										# }

										coa_house_tiny = {
											scale = 0.75
											parentanchor = center
											position = { 0 -5 }
										}
									}
								}
							}

							# dead text
							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not(Title.GetHolder.IsValid)]"
								datacontext = "[Title.GetHolder]"

								hbox = {
									layoutpolicy_horizontal = expanding

									text_single = {
										layoutpolicy_horizontal = expanding
										text = ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY
										margin_left = 4

										tooltip = ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_TT
									}

									expand = {}
								}

								expand = {}
							}
						}
					}

					# header
					widget = {
						size = { 0 18 }
						layoutpolicy_horizontal = expanding

						background = {
							margin_bottom = 14
							margin_top = 1
							visible = "[Title.HasHolder]"
							texture = "gfx/interface/window_theme_administration/admin_theme_banner.dds"
						}

						background = {
							margin_bottom = 14
							margin_top = 1
							visible = "[Not(Title.HasHolder)]"
							texture = "gfx/interface/window_theme_administration/admin_theme_banner_gray.dds"
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							margin = { 50 0 }
							margin_right = 100

							widget = {
								size = { 40 20 }
								allow_outside = yes

								widget = {
									size = { 40 34 }
									allow_outside = yes

									widget = {
										name = "no_valid_successor"
										size = { 100% 100% }

										visible = "[And( And( And( Title.HasHolder, Not( AdministrativeThemeItem.HasValidSuccessor ) ), Not( Title.GetHolder.IsIndependentRuler ) ), IsAdministrativeRuler( Title.GetHolder ) )]"

										tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_NO_VALID_SUCCESSOR_TT"

										background = {
											texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
										}

										button_heir = {
											parentanchor = center
											position = { 0 -8 }
											size = { 24 24  }
											alwaystransparent = yes
										}
									}

									widget = {
										name = "no_investment_has_candidate_winning"
										size = { 100% 100% }

										visible = "[And( And( Not( AdministrativeThemeItem.HasLocalPlayerInvested ), AdministrativeThemeItem.HasLocalPlayerCandidate ), AdministrativeThemeItem.HasLocalPlayerCandidateInFirst )]"

										tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_WINNING_TT"

										background = {
											texture = "gfx/interface/window_theme_administration/admin_theme_sucession.dds"
										}

										button_house = {
											size = { 24 24 }
											parentanchor = center
											position = { 0 -4 }
											alwaystransparent = yes
										}
									}

									widget = {
										name = "no_investment_has_candidate_losing"
										size = { 100% 100% }

										visible = "[And( And( Not( AdministrativeThemeItem.HasLocalPlayerInvested ), AdministrativeThemeItem.HasLocalPlayerCandidate ), Not( AdministrativeThemeItem.HasLocalPlayerCandidateInFirst ) )]"

										tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_LOSING_TT"

										background = {
											texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
										}

										button_house = {
											size = { 24 24 }
											parentanchor = center
											position = { 0 -4 }
											alwaystransparent = yes
										}
									}

									widget = {
										name = "invested_winning"
										size = { 100% 100% }

										visible = "[And( AdministrativeThemeItem.HasLocalPlayerInvested, AdministrativeThemeItem.HasLocalPlayerCandidateInFirst )]"

										tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_WINNING_TT"

										background = {
											texture = "gfx/interface/window_theme_administration/admin_theme_sucession.dds"
										}

										button_promote_candidate = {
											size = { 24 24 }
											parentanchor = center
											position = { 0 -4 }
											alwaystransparent = yes
										}
									}

									widget = {
										name = "invested_losing"
										size = { 100% 100% }

										visible = "[And( AdministrativeThemeItem.HasLocalPlayerInvested, Not( AdministrativeThemeItem.HasLocalPlayerCandidateInFirst ) )]"

										tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_LOSING_TT"

										background = {
											texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
										}

										button_promote_candidate = {
											size = { 24 24 }
											parentanchor = center
											position = { 0 -4 }
											alwaystransparent = yes
										}
									}
								}
							}

							spacer = {
								size = { 5 0 }
							}

							text_single = {
								text = ADMIN_WINDOW_THEME_NAME
								default_format = "#high"
								alpha = 0.75
								max_width = 210
							}

							expand = {}

							text_single = {
								visible = "[Title.HasHolder]"
								raw_text = "[Title.GetHolder.GetFirstNameNoTooltip]"
								max_width = 210
							}

							hbox = {
								visible = no
								text_single = {
									visible = "[Character.IsValid]"
									max_width = 45
									fontsize = 13
									margin = { 3 0 }

									tooltipwidget = character_opinion_tooltip
									using = tooltip_es
									default_format = "#high"
									text = "[Character.GetOpinionOf( GetPlayer )|=]"
									# fonttintcolor = "[Character.GetOpinionOfTint( GetPlayer )]"

									text_single = {
										visible = "[Character.IsValid]"
										max_width = 45
										fontsize = 13
										margin = { 3 0 }

										tooltipwidget = character_opinion_tooltip
										using = tooltip_es
										default_format = "#high"
										text = "[Character.GetOpinionOf( GetPlayer )|=]"
										fonttintcolor = "[Character.GetOpinionOfTint( GetPlayer )]"
										alpha = 0.6
									}
								}
								widget = {
									size = { 16 16 }
									visible = "[Character.ShouldShowDreadEffectIcon]"
									icon = {
										position = { 0 3 }
										name = "dread"
										size = { 16 16 }
										texture = "gfx/interface/icons/portraits/dread_values.dds"
										framesize = { 40 40 }
										frame = "[Character.GetPlayerDreadEffectIconFrame]"
										tooltip = "[Character.GetPlayerDreadEffectTooltip]"
									}
								}
							}


							widget = {
								size = { 40 20 }
								visible = no
								allow_outside = yes

								widget = {
									visible = no
									size = { 40 40 }
									allow_outside = yes

									widget = {
										name = "no_valid_successor"
										size = { 40 40 }

										visible = "[And( And( And( Title.HasHolder, Not( AdministrativeThemeItem.HasValidSuccessor ) ), Not( Title.GetHolder.IsIndependentRuler ) ), IsAdministrativeRuler( Title.GetHolder ) )]"

										tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_NO_VALID_SUCCESSOR_TT"

										background = {
											texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
										}

										button_heir = {
											parentanchor = center
											position = { 0 -8 }
											size = { 24 24 }
											alwaystransparent = yes
										}
									}

									widget = {
										name = "no_investment_has_candidate_winning"
										size = { 40 40 }

										visible = "[And( And( Not( AdministrativeThemeItem.HasLocalPlayerInvested ), AdministrativeThemeItem.HasLocalPlayerCandidate ), AdministrativeThemeItem.HasLocalPlayerCandidateInFirst )]"

										tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_WINNING_TT"

										background = {
											texture = "gfx/interface/window_theme_administration/admin_theme_sucession.dds"
										}

										button_house = {
											size = { 24 24 }
											parentanchor = center
											position = { 0 -8 }
											alwaystransparent = yes
										}
									}

									widget = {
										name = "no_investment_has_candidate_losing"
										size = { 40 40 }

										visible = "[And( And( Not( AdministrativeThemeItem.HasLocalPlayerInvested ), AdministrativeThemeItem.HasLocalPlayerCandidate ), Not( AdministrativeThemeItem.HasLocalPlayerCandidateInFirst ) )]"

										tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_LOSING_TT"

										background = {
											texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
										}

										button_house = {
											size = { 24 24 }
											parentanchor = center
											position = { 0 -8 }
											alwaystransparent = yes
										}
									}

									widget = {
										name = "invested_winning"
										size = { 40 40 }

										visible = "[And( AdministrativeThemeItem.HasLocalPlayerInvested, AdministrativeThemeItem.HasLocalPlayerCandidateInFirst )]"

										tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_WINNING_TT"

										background = {
											texture = "gfx/interface/window_theme_administration/admin_theme_sucession.dds"
										}

										button_promote_candidate = {
											size = { 24 24 }
											parentanchor = center
											position = { 0 -8 }
											alwaystransparent = yes
										}
									}

									widget = {
										name = "invested_losing"
										size = { 100% 100% }

										visible = "[And( AdministrativeThemeItem.HasLocalPlayerInvested, Not( AdministrativeThemeItem.HasLocalPlayerCandidateInFirst ) )]"

										tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_LOSING_TT"

										background = {
											texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
										}

										button_promote_candidate = {
											size = { 24 24 }
											parentanchor = center
											position = { 0 -8 }
											alwaystransparent = yes
										}
									}
								}
							}
						}
					}
				}
			}

			# coa and portrait, here to overlap everything else
			hbox = {
				layoutpolicy_horizontal = expanding
				alwaystransparent = yes
				spacing = -4

				widget = {
					size = { 50 60 }
					scissor = yes

					widget = {
						size = { 56 56 }
						position = { 0 0 }
						parentanchor = hcenter

						coat_of_arms_icon = {
							parentanchor = top|hcenter
							size = { 100% 100% }
							coat_of_arms = "[Title.GetTitleCoA.GetTexture('(int32)256','(int32)256')]"
							coat_of_arms_slot = "[Title.GetTitleCoA.GetSlot('(int32)256','(int32)256')]"
							coat_of_arms_mask = "gfx/interface/window_theme_administration/admin_theme_mask.dds"
							alpha = 1

							modify_texture = {
								texture = "gfx/interface/coat_of_arms/coa_overlay.dds"
								blend_mode = overlay
								spritetype = corneredTiled
							}

							# modify_texture = {
							# 	texture = "gfx/interface/component_masks/mask_glow.dds"
							# 	blend_mode = alphaMultiply
							# 	alpha = 0.3
							# }

							modify_texture = {
								texture = "gfx/interface/colors/black.dds"
								blend_mode = normal
								alpha = 0.5

								visible = "[Not(Title.GetHolder.IsValid)]"
							}

							modify_texture = {
								texture = "gfx/interface/colors/black.dds"
								blend_mode = normal
								alpha = 0.2
							}
						}
					}
				}

				expand = {}

				widget = {
					size = { 45 50 }
					# layoutpolicy_vertical = expanding
					alwaystransparent = yes

					widget = {
						scissor = yes
						size = { 60 100% }
						alwaystransparent = yes
						position = { 0 -2 }

						portrait_map = {
							position = { -10 5 }
							# portrait_opinion_small = {
							# 	parentanchor = bottom|hcenter
							# 	scale = 1.5
							# 	position = { 0 -15 }
							# }
							scale = 0.7
							visible = "[Title.HasHolder]"
							datacontext = "[Title.GetHolder]"
							parentanchor = center
						}
					}
				}

				widget = {
					name = "governing_house_coat_of_arms"
					size = { 50 58 }

					datacontext = "[Title.GetHolder.GetHouse]"
					visible = "[Title.HasHolder]"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_coa_holder.dds"
					}

					coa_house_tiny = {
						scale = 0.9
						parentanchor = center
						position = { 0 -6 }
					}
				}
			}
		}

		icon = {
			parentanchor = top
			size = { 58 10 }
			position = { -4 0 }
			texture = "gfx/interface/window_theme_administration/admin_theme_coa_header.dds"
		}

		widget = {
			size = { 40 20 }
			allow_outside = yes
			position = { -11 0 }
			visible = no
			# parentanchor = hcenter

			widget = {
				size = { 40 40 }
				allow_outside = yes

				widget = {
					name = "no_valid_successor"
					size = { 40 40 }

					visible = "[And( And( And( Title.HasHolder, Not( AdministrativeThemeItem.HasValidSuccessor ) ), Not( Title.GetHolder.IsIndependentRuler ) ), IsAdministrativeRuler( Title.GetHolder ) )]"

					tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_NO_VALID_SUCCESSOR_TT"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
					}

					button_heir = {
						parentanchor = center
						position = { 0 -8 }
						size = { 24 24 }
						alwaystransparent = yes
					}
				}

				widget = {
					name = "no_investment_has_candidate_winning"
					size = { 40 40 }

					visible = "[And( And( Not( AdministrativeThemeItem.HasLocalPlayerInvested ), AdministrativeThemeItem.HasLocalPlayerCandidate ), AdministrativeThemeItem.HasLocalPlayerCandidateInFirst )]"

					tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_WINNING_TT"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_sucession.dds"
					}

					button_house = {
						size = { 24 24 }
						parentanchor = center
						position = { 0 -8 }
						alwaystransparent = yes
					}
				}

				widget = {
					name = "no_investment_has_candidate_losing"
					size = { 40 40 }

					visible = "[And( And( Not( AdministrativeThemeItem.HasLocalPlayerInvested ), AdministrativeThemeItem.HasLocalPlayerCandidate ), Not( AdministrativeThemeItem.HasLocalPlayerCandidateInFirst ) )]"

					tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_LOSING_TT"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
					}

					button_house = {
						size = { 24 24 }
						parentanchor = center
						position = { 0 -8 }
						alwaystransparent = yes
					}
				}

				widget = {
					name = "invested_winning"
					size = { 40 40 }

					visible = "[And( AdministrativeThemeItem.HasLocalPlayerInvested, AdministrativeThemeItem.HasLocalPlayerCandidateInFirst )]"

					tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_WINNING_TT"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_sucession.dds"
					}

					button_promote_candidate = {
						size = { 24 24 }
						parentanchor = center
						position = { 0 -8 }
						alwaystransparent = yes
					}
				}

				widget = {
					name = "invested_losing"
					size = { 100% 100% }

					visible = "[And( AdministrativeThemeItem.HasLocalPlayerInvested, Not( AdministrativeThemeItem.HasLocalPlayerCandidateInFirst ) )]"

					tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_LOSING_TT"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
					}

					button_promote_candidate = {
						size = { 24 24 }
						parentanchor = center
						position = { 0 -8 }
						alwaystransparent = yes
					}
				}
			}
		}

		# tooltip = "[AdministrativeThemeItem.GetTooltip]"
		# tooltip_visible = "[Not( StringIsEmpty( AdministrativeThemeItem.GetTooltip ) )]"
		using = tooltip_ne
	}
}

types GovernmentAdministrationThemes
{
	type widget_empty_governor_portrait = widget
	{
		background = {
			using = Background_Area_Solid

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
				blend_mode = alphamultiply
				alpha = 0.2
				mirror = vertical
			}
		}

		widget = {
			size = { 100% 100% }

			background = {
				texture = "gfx/portraits/portrait_frame.dds"
				using = Color_Grey
				margin = { -4 -4 }
				alpha = 0.5
			}
		}

		button = {
			size = { 100% 100% }
			using = Placeholder_Inactive_Button

			# TODO_CODE: Open create title and assign based on whether or not the emperor holds this title.
			#onclick = ""

			state = {
				name = _mouse_hierarchy_enter
				on_start = "[PdxGuiWidget.FindChild('highlight_frame').TriggerAnimation('show')]"
			}

			state = {
				name = _mouse_hierarchy_leave
				on_start = "[PdxGuiWidget.FindChild('highlight_frame').TriggerAnimation('hide')]"
			}

			highlight_icon = {
				name = "portrait_unknown_head_small_glow"
				parentanchor = center
				position = { 3 -9 }
				gfxtype = framedbuttongfx
				effectname = "NoHighlight"
				texture = "gfx/portraits/unknown_portraits/button_unknown_head.dds"
				size = { 80 100 }
				framesize = { 384 480 }
				upframe = 1
				overframe = 2
			}

			button_plus = {
				alwaystransparent = yes
				parentanchor = center
			}

			widget = {
				name = "highlight_frame"
				size = { 100% 100% }
				alwaystransparent = yes
				alpha = 0

				state = {
					name = "show"
					alpha = 1
				}

				state = {
					name = "hide"
					alpha = 0
				}

				background = {
					size = { 100% 100% }
					texture = "gfx/portraits/portrait_frame.dds"
					using = Color_Grey
					alpha = 0.7
					margin = { -4 -4 }
				}
			}
		}
	}

	type button_unassigned_county_item = button_standard_list
	{
		layoutpolicy_horizontal = expanding

		button_ignore = none

		raw_tooltip = "#X Not yet implemented button.#!"
		default_format = "#X"

		background = {
			using = Background_Area_Border
			using = Background_Frame_Gold
		}

		hbox = {
			position = { 0 -5 }
			margin = { 8 0 }

			coa_title_tiny_crown = { }

			text_single = {
				layoutpolicy_horizontal = expanding

				text = "[Title.GetNameNoTooltip]"
			}

			expand = { }

			button_plus = { }
		}
	}

	type vbox_house_theme_list = vbox
	{
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding

		hbox = {
			layoutpolicy_horizontal = expanding

			coa_house_tiny = {
				visible = "[And(DynastyHouse.IsValid, GovernmentAdministrationWindow.ShouldGroupByHouse)]"
			}

			button_expandable_toggle_field = {
				layoutpolicy_horizontal = expanding
				datacontext = "[AdministrativeHouseItem.GetHouse]"

				blockoverride "onclick"
				{
					onclick = "[GovernmentAdministrationWindow.ToggleCollapseHouse( DynastyHouse.Self )]"
				}

				blockoverride "button_expand"
				{
					frame = "[BoolTo1And2( GovernmentAdministrationWindow.IsHouseCollapsed( DynastyHouse.Self ) )]"
				}

				blockoverride "text"
				{
					raw_text = "[GetDataModelSize(AdministrativeHouseItem.GetControlledThemes)] [SelectLocalization(DynastyHouse.IsValid, SelectLocalization(GovernmentAdministrationWindow.ShouldGroupByHouse, 'ADMIN_WINDOW_HOUSE_DROPDOWN', 'ADMIN_WINDOW_ASSIGNED_THEME'), 'ADMIN_WINDOW_UNASSIGNED_THEME')]"
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			visible = "[GovernmentAdministrationWindow.IsHouseCollapsed( AdministrativeHouseItem.GetHouse )]"

			fixedgridbox = {
				datamodel = "[AdministrativeHouseItem.GetControlledThemes]"
				visible = "[Not(GetVariableSystem.Exists('big_theme_widgets'))]"
				layoutpolicy_horizontal = expanding
				addcolumn = 520
				addrow = 62

				# flipdirection = yes
				ignoreinvisible = yes

				item = {
					widget_theme_item_bav = {
						datacontext = "[AdministrativeThemeItem.GetTitle]"
						visible = "[AdministrativeThemeItem.ShouldShowTitle]"
					}
				}
			}

			dynamicgridbox = {
				datamodel = "[AdministrativeHouseItem.GetControlledThemes]"
				visible = "[GetVariableSystem.Exists('big_theme_widgets')]"
				layoutpolicy_horizontal = expanding

				datamodel_wrap = 3
				flipdirection = yes
				ignoreinvisible = yes
				item = {
					widget_theme_item = {
						datacontext = "[AdministrativeThemeItem.GetTitle]"
						visible = "[AdministrativeThemeItem.ShouldShowTitle]"
					}
				}
			}


		}

	}

	type widget_theme_item = widget
	{
		size = { 176 176 }
		state = {
			name = _mouse_hierarchy_enter
			on_start = "[PdxGuiWidget.FindChild('theme_glow').TriggerAnimation('appear')]"
		}

		state = {
			name = _mouse_hierarchy_leave
			on_start = "[PdxGuiWidget.FindChild('theme_glow').TriggerAnimation('disappear')]"
		}

		button = {
			name = "open_detail_button"
			visible = "[And(Not( GetVariableSystem.Exists( 'admin_vassal_details_refresh' ) ), IsAdministrativeRuler(Title.GetHolder))]"
			size = { 100% 100% }

			onclick = "[ToggleAdminVassalDetailView( Title.Self )]"
			down = "[IsAdminVassalDetailViewShown( Title.Self )]"
		}

		button = {
			name = "refresh_detail_button"
			visible = "[And(GetVariableSystem.Exists( 'admin_vassal_details_refresh' ),IsAdministrativeRuler(Title.GetHolder))]"
			size = { 100% 100% }

			onclick = "[PdxGuiTriggerAllAnimations('admin_vassal_details_refresh')]"
			down = "[IsAdminVassalDetailViewShown( Title.Self )]"

			state = {
				name = _mouse_click
				delay = 0.2
				on_finish = "[ToggleAdminVassalDetailView( Title.Self )]"
			}
		}

		button = {
			visible = "[Or( Not(Title.GetHolder.IsValid),  And( And( Not( IsAdministrativeRuler( Title.GetHolder )), Not(Title.GetHolder.IsPlayerInteractionValid('demand_admin_interaction'))), Title.GetHolder.GetLiege.IsPlayer  ) ) ]"
			size = { 100% 100% }
			onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
		}

		button = {
			name = "demand_admin_interaction_button"
			datacontext = "[Title.GetHolder]"
			visible = "[And( And( And( Not( IsAdministrativeRuler( Character ) ), Character.IsValid ), Character.GetLiege.IsPlayer ), Character.IsPlayerInteractionValid('demand_admin_interaction') )]"
			size = { 100% 100% }
			tooltip = "[Character.GetPlayerInteractionTooltip('demand_admin_interaction')]"
			onclick = "[Character.OpenPlayerInteraction('demand_admin_interaction')]"
		}

		background = {
			visible = "[Title.GetHolder.IsPlayer]"
			using = Background_Area_Border
			using = Background_Frame_Gold
		}

		widget = {
			parentanchor = center
			size = { 164 164 }

			icon = {
				size = { 100% 100% }
				texture = "gfx/interface/window_theme_administration/admin_theme_coa_title.dds"
			}

			coat_of_arms_icon = { #Dynasty
				parentanchor = top|hcenter
				size = { 100% 100% }
				coat_of_arms = "[Title.GetTitleCoA.GetTexture('(int32)256','(int32)256')]"
				coat_of_arms_slot = "[Title.GetTitleCoA.GetSlot('(int32)256','(int32)256')]"
				coat_of_arms_mask = "gfx/interface/window_theme_administration/admin_theme_mask.dds"
				alpha = 0.8

				modify_texture = {
					texture = "gfx/interface/coat_of_arms/coa_overlay.dds"
					blend_mode = overlay
					spritetype = corneredTiled
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_glow.dds"
					blend_mode = alphaMultiply
					alpha = 0.6
				}

				modify_texture = {
					texture = "gfx/interface/colors/black.dds"
					blend_mode = normal
					alpha = 0.5

					visible = "[Not(Title.GetHolder.IsValid)]"
				}
			}

			icon = {
				name = "theme_glow"
				parentanchor = center
				size = { 100% 100% }
				texture = "gfx/interface/window_theme_administration/admin_theme_glow.dds"
				alpha = 0

				state = {
					name = appear
					using = Animation_Curve_Default
					duration = 0.2
					position = { 0 0 }
					alpha = 0.7
					scale = 1.01
				}

				state = {
					name = disappear
					using = Animation_Curve_Default
					duration = 0.2
					position = { 0 0 }
					alpha = 0
					scale = 0.97
				}
			}

			icon = {
				parentanchor = top
				size = { 100% 10 }
				texture = "gfx/interface/window_theme_administration/admin_theme_coa_header.dds"
			}

			widget = {
				name = "governing_house_coat_of_arms"
				parentanchor = top|right
				position = { -10 0 }
				size = { 56 64 }

				datacontext = "[Title.GetHolder.GetHouse]"
				visible = "[Title.HasHolder]"

				background = {
					texture = "gfx/interface/window_theme_administration/admin_theme_coa_holder.dds"
				}

				coa_house_tiny = {
					parentanchor = center
					position = { 1 -8 }
				}
			}

			widget = {
				position = { 4 0 }
				parentanchor = top|left
				size = { 56 64 }

				widget = {
					name = "no_valid_successor"
					size = { 100% 100% }

					visible = "[And( And( And( Title.HasHolder, Not( AdministrativeThemeItem.HasValidSuccessor ) ), Not( Title.GetHolder.IsIndependentRuler ) ), IsAdministrativeRuler( Title.GetHolder ) )]"

					tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_NO_VALID_SUCCESSOR_TT"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
					}

					button_heir = {
						parentanchor = center
						position = { 0 -8 }
						alwaystransparent = yes
					}
				}

				widget = {
					name = "no_investment_has_candidate_winning"
					size = { 100% 100% }

					visible = "[And( Not( AdministrativeThemeItem.HasLocalPlayerIndependentSelfInFirst ), And( And( AdministrativeThemeItem.HasLocalPlayerCandidate, Not( AdministrativeThemeItem.HasLocalPlayerInvestedInTopCandidate ) ), AdministrativeThemeItem.HasLocalPlayerCandidateInFirst ) )]"

					tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_WINNING_TT"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_sucession.dds"
					}

					button_house = {
						parentanchor = center
						position = { 0 -8 }
						alwaystransparent = yes
					}
				}

				widget = {
					name = "no_investment_has_candidate_losing"
					size = { 100% 100% }

					visible = "[And( Not( AdministrativeThemeItem.HasLocalPlayerIndependentSelfInFirst ), And( And( AdministrativeThemeItem.HasLocalPlayerCandidate, Not( AdministrativeThemeItem.HasLocalPlayerInvestedInTopCandidate ) ), Not( AdministrativeThemeItem.HasLocalPlayerCandidateInFirst ) ) )]"

					tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_LOSING_TT"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
					}

					button_house = {
						parentanchor = center
						position = { 0 -8 }
						alwaystransparent = yes
					}
				}

				widget = {
					name = "invested_winning"
					size = { 100% 100% }

					visible = "[And( Not( AdministrativeThemeItem.HasLocalPlayerIndependentSelfInFirst ), And( And( AdministrativeThemeItem.HasLocalPlayerCandidate, AdministrativeThemeItem.HasLocalPlayerInvestedInTopCandidate ), AdministrativeThemeItem.HasLocalPlayerCandidateInFirst ) )]"

					tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_WINNING_TT"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_sucession.dds"
					}

					button_promote_candidate = {
						parentanchor = center
						position = { 0 -8 }
						alwaystransparent = yes
					}
				}

				widget = {
					name = "invested_losing"
					size = { 100% 100% }

					visible = "[And( Not( AdministrativeThemeItem.HasLocalPlayerIndependentSelfInFirst ), And( And( AdministrativeThemeItem.HasLocalPlayerCandidate, AdministrativeThemeItem.HasLocalPlayerInvestedInTopCandidate ), Not( AdministrativeThemeItem.HasLocalPlayerCandidateInFirst ) ) )]"

					tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_LOSING_TT"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
					}

					button_promote_candidate = {
						parentanchor = center
						position = { 0 -8 }
						alwaystransparent = yes
					}
				}
			}

			widget = {
				name = "theme_type_title"
				datacontext = "[Title.GetHolder]"
				visible = "[Title.GetHolder.IsValid]"

				size = { 100% 48}
				parentanchor = bottom
				position = { 0 -16 }

				background = {
					texture = "gfx/interface/colors/black.dds"
					using = Mask_Rough_Edges
					alpha = 0.8

					margin_bottom = 2
				}

				background = {
					texture = "gfx/interface/colors/blue.dds"
					color = { 0.5 0.6 0.65 1 }
					using = Mask_Rough_Edges

					visible = "[IsAdministrativeRuler(Title.GetHolder)]"

					modify_texture = {
						texture = "gfx/interface/component_overlay/seamless_noise.dds"
						blend_mode = overlay
						spriteType = CorneredTiled

						alpha = 0.1
					}
				}

				background = {
					texture = "gfx/interface/colors/red.dds"
					color = { 0.4 0.7 0.7 1 }
					using = Mask_Rough_Edges

					visible = "[Not(IsAdministrativeRuler(Title.GetHolder))]"

					modify_texture = {
						texture = "gfx/interface/component_overlay/seamless_noise.dds"
						blend_mode = overlay
						spriteType = CorneredTiled

						alpha = 0.3
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 4 0 }
					margin_top = 8
					margin_right = 10

					visible = "[IsAdministrativeRuler( Title.GetHolder )]"

					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Not( Title.GetHolder.IsIndependentRuler )]"

						spacing = 3

						text_single = {

							text = ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY
							tooltip = ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_TT
							default_format = "#low"

							max_width = 80
						}

						expand = {}

						text_single = {
							text = ADMIN_WINDOW_THEME_ADMINISTRATION_TYPE_TEXT_ICON
							max_width = 90
						}

						text_single = {
							fontsize = 12
							fontsize_min = 11
							visible = "[Title.GetHolder.IsPlayerInteractionShown('give_vassal_directive_interaction')]"
							text = "[Title.GetHolder.Custom('vassal_directive_icon')]"
							tooltip = "[Title.GetHolder.Custom('vassal_directive_text')]"
							using = tooltip_se
						}
					}

					text_single = {
						visible = "[Title.GetHolder.IsIndependentRuler]"

						text = ADMIN_WINDOW_THEME_IMPERIAL_LANDS
						#default_format = "#low"

						max_width = 140
					}
				}

				hbox = {
					visible = "[Not(IsAdministrativeRuler(Title.GetHolder))]"
					layoutpolicy_horizontal = expanding
					margin_top = 6

					text_single = {
						text = "ADMIN_WINDOW_VASSAL_GOVERNMENT_TYPE"
					}
				}
			}

			widget = {
				datacontext = "[Title.GetHolder]"
				visible = "[Not(Title.GetHolder.IsValid)]"

				size = { 100% 48 }
				parentanchor = bottom
				position = { 0 -16 }

				background = {
					texture = "gfx/interface/colors/black.dds"
					using = Mask_Rough_Edges
					alpha = 0.8

					margin_bottom = 2
				}

				background = {
					texture = "gfx/interface/colors/grey.dds"
					color = { 0.6 0.6 0.6 1 }
					using = Mask_Rough_Edges

					modify_texture = {
						texture = "gfx/interface/component_overlay/seamless_noise.dds"
						blend_mode = overlay
						spriteType = CorneredTiled

						alpha = 0.2
					}
				}

				text_single = {
					parentanchor = center
					position = { 0 4 }
					layoutpolicy_horizontal = expanding
					text = ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY
					margin_left = 4

					tooltip = ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_TT
				}
			}

			widget = {
				parentanchor = bottom
				position = { 0 -40 }
				size = { 100% 48 }

				background = {
					visible = "[Title.HasHolder]"
					texture = "gfx/interface/window_theme_administration/admin_theme_banner.dds"
				}

				background = {
					visible = "[Not(Title.HasHolder)]"
					texture = "gfx/interface/window_theme_administration/admin_theme_banner_gray.dds"
				}

				text_single = {
					parentanchor = center
					position = { 0 -4 }
					layoutpolicy_horizontal = expanding
					text = ADMIN_WINDOW_THEME_NAME
					default_format = "#high"
					max_width = 150
				}
			}
		}

		tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_THEME_TT"
		tooltip_visible = "[AdministrativeThemeItem.ShouldShowTooltip]"
		using = tooltip_ne
	}

	type hbox_theme_contract_obligation_result = hbox
	{
		layoutpolicy_horizontal = expanding
		spacing = 8

		text_single = {
			text = ADMIN_WINDOW_THEME_ADMINISTRATION_LEVIES
		}

		text_single = {
			text = ADMIN_WINDOW_THEME_ADMINISTRATION_TAXES
		}
	}

	type button_modify_theme = button_round {
		visible = "[Character.IsPlayerInteractionShown('admin_liege_modify_vassal_contract_interaction')]"
		enabled = "[Character.IsPlayerInteractionValid('admin_liege_modify_vassal_contract_interaction')]"

		onclick = "[Character.OpenPlayerInteraction('admin_liege_modify_vassal_contract_interaction')]"
		onclick = "[Character.PanCameraTo]"

		tooltip = "[Character.GetPlayerInteractionTooltip('admin_liege_modify_vassal_contract_interaction')]"

		block "feudal_contract_button_round" {}

		button_add_laws = {
			alwaystransparent = yes
			parentanchor = center
		}
	}

	type button_replace_governor = button_round {
		using = Placeholder_Inactive_Button

		tooltip = "REPLACE_GOVERNOR_TOOLTIP"

		button_change = {
			parentanchor = center
		}
	}

	type button_revoke_theme = button_round {
		enabled = "[Character.IsPlayerInteractionValid('revoke_title_interaction')]"

		onclick = "[Character.OpenPlayerInteraction('revoke_title_interaction')]"
		onclick = "[Character.PanCameraTo]"

		tooltip = "[Character.GetPlayerInteractionTooltip('revoke_title_interaction')]"

		button_cancel = {
			alwaystransparent = yes
			parentanchor = center
		}
	}

	type vbox_themes_list = vbox
	{
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		using = Animation_Tab_Switch

		vbox = {
			name = "house_list"
			datamodel = "[GovernmentAdministrationWindow.GetHousesWithThemes]"

			layoutpolicy_horizontal = expanding

			item = {
				vbox_house_theme_list = {
					datacontext = "[AdministrativeHouseItem.GetHouse]"
					layoutpolicy_horizontal = expanding
				}
			}
		}

		expand = { }
	}
}

types GovernmentAdministration
{
	type widget_house_member_item = widget {
		datacontext = "[CharacterListItem.GetCharacter]"

		hbox = {
			portrait_head = {}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					# Name and age
					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 0 3 }
						margin_left = 5
						margin_right = 10

						background = {
							using = Background_Area_Characterlist
						}

						background = {
							using = Background_Area_Dark

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
								blend_mode = alphamultiply
								alpha = 1
								rotate_uv = 90
								mirror = vertical
							}
						}

						hbox = {
							margin_left = 3
							layoutpolicy_horizontal = expanding
							maximumsize = { 338 -1 }

							text_single = {
								using = Font_Size_Medium
								layoutpolicy_horizontal = expanding
								align = nobaseline
								text = "[Character.GetUINameNoTooltip|U]"
								autoresize = no
								fontsize_min = 14
							}

							block "character_relation"
							{
								hbox = {
									visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"
									text_single = {
										raw_text = "•"
										align = nobaseline
										margin = { 5 0 }
									}

									text_single = {
										name = "character_relation"
										text = "[Character.GetRelationToString( GetPlayer )]"
										tooltip = "EXTENDED_RELATIONS_TOOLTIP"
										default_format = "#low"
										align = nobaseline
										fontsize_min = 14
										max_width = 180
									}
								}
							}

							expand = {}
						}

						hbox = {
							using = character_age_or_death_text
						}
						expand = {}
					}

					### BOTTOM ROW ###
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							block "additional_info_kill_list" {}

							hbox = {
								layoutpolicy_horizontal = expanding

								text_label_left = {
									margin_left = 10
									max_width = 250

									layoutpolicy_horizontal = expanding

									text = "ADMINISTRATIVE_GOVERNMENT_INVESTMENT_CAP"

									tooltipwidget = {
										widget_value_breakdown_tooltip = {
											datacontext = "[GovernmentAdministrationWindow.GetInvestmentCapTooltip( Character.Self )]"
										}
									}
								}
								expand = {}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								background = {
									using = Background_Area_Dark
									alpha = 0.5
									margin = { 0 2 }
								}

								hbox = {
									visible = "[IsAdministrativeRuler( Character )]"

									layoutpolicy_horizontal = expanding

									fixedgridbox = {
										flipdirection = yes
										addrow = 60
										addcolumn = 38
										maxverticalslots = 1
										datamodel_wrap = 9

										datamodel = "[Character.GetTitles]"
										item = {
											coa_title_tiny_crown = {
												visible = "[GreaterThan_int32( Title.GetTierFrame, '(int32)3' )]" # Show only Duke or Emperor

												icon = {
													name = "has_laws"
													visible = "[Title.HasLaws]"
													parentanchor = bottom|right
													size = { 25 25 }
													position = { 5 0 }
													texture = "gfx/interface/icons/title_status/icon_title_law.dds"
												}

												using = tooltip_ne
											}
										}
									}
									expand = {}
								}

								expand = {}

								vbox = {
									icon = {
										size = { 32 32 }
										texture = "gfx/interface/icons/icon_skill_governor_efficiency.dds"
									}

									text_single = {
										text = "ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_VALUE"
										align = nobaseline
									}

									tooltip = "ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_TT"
									using = tooltip_ne
								}
							}
						}
					}
				}
			}
		}
	}

	type vbox_family_group_foldout = vbox {
		layoutpolicy_horizontal = expanding

		oncreate = "[BindFoldOutContext]"
		oncreate = "[PdxGuiFoldOut.Unfold]"

		button_expandable_toggle_field = {
			blockoverride "text"
			{
				text = "[AdminFamilyGroupItem.GetName]"
			}
		}

		vbox = {
			visible = "[PdxGuiFoldOut.IsUnfolded]"

			layoutpolicy_horizontal = expanding

			fixedgridbox = {
				name = "families_in_group"

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				addcolumn = 525
				addrow = 120

				datamodel = "[AdminFamilyGroupItem.GetFamilyItems]"
				item = {
					vbox = {
						layoutpolicy_horizontal = expanding

						button_family_group_item = {}
						expand = {}
					}
				}
			}
		}
	}

	type button_family_group_item = button
	{
		size = { 525 110 }
		datacontext = "[AdminHouseItem.GetHouse]"
		datacontext = "[DynastyHouse.GetHeadOfHouse]"
		onclick = "[GovernmentAdministrationWindow.SelectFeaturedHouse( DynastyHouse.Self )]"

		background = {
			visible = "[ObjectsEqual( Character.GetHouse, Character.GetTopLiege.GetHouse )]"
			margin = { 4 4 }
			using = Background_Area_Admin_Purple
		}

		background = {
			visible = "[DynastyHouse.IsDominant]"
			margin = { 4 4 }
			using = Background_Area_Admin_Orange
		}

		background = {
			visible = "[And( And( DynastyHouse.IsPowerful, Not( DynastyHouse.IsDominant ) ), Not( ObjectsEqual( Character.GetHouse, Character.GetTopLiege.GetHouse ) ) )]"
			margin = { 4 4 }
			using = Background_Area_Admin_Blue
		}

		background = {
			texture = "gfx/interface/window_administrative_government/family_decoration.dds"
			spriteType = Corneredtiled
			margin_bottom = 2
			spriteborder_bottom = 14
			texture_density = 1.5
			alpha = 0.1
			using = Mask_Rough_Edges
		}

		background = {
			texture = "gfx/interface/window_administrative_government/family_decoration.dds"
			spriteType = Corneredtiled
			margin_top = 2
			spriteborder_top = 14
			texture_density = 1.5
			alpha = 0.1
			using = Mask_Rough_Edges
		}

		background = {
			texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
			spriteType = corneredtiled
			color = { 0.1 0.1 0.12 1 }
			texture_density = 0.75
			margin = { 0 -10 }
			alpha = 0.2

			using = Mask_Rough_Edges

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_clouds.dds"
				blend_mode = alphamultiply
				spriteType = corneredTiled
				alpha = 0.5
			}

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_scratches.dds"
				blend_mode = alphamultiply
				spriteType = corneredTiled
			}
		}

		background = {
			spriteType = Corneredtiled
			texture_density = 2
			visible = "[ObjectsEqual( Character.GetHouse, Character.GetTopLiege.GetHouse )]"
			texture = "gfx/interface/window_administrative_government/imperial_family_decoration.dds"
			spriteborder = { 212 0 }

			using = Mask_Rough_Edges

			modify_texture = {
				blend_mode = alphaMultiply
				texture = "gfx/interface/component_masks/mask_horizontal_extended.dds"
			}
		}

		background = {
			spriteType = Corneredtiled
			texture_density = 2
			visible = "[DynastyHouse.IsDominant]"
			texture = "gfx/interface/window_administrative_government/dominant_family_decoration.dds"
			spriteborder = { 212 0 }

			using = Mask_Rough_Edges

			modify_texture = {
				blend_mode = alphaMultiply
				texture = "gfx/interface/component_masks/mask_horizontal_extended.dds"
			}
		}

		background = {
			spriteType = Corneredtiled
			texture_density = 2
			visible = "[And( And( DynastyHouse.IsPowerful, Not( DynastyHouse.IsDominant ) ), Not( ObjectsEqual( Character.GetHouse, Character.GetTopLiege.GetHouse ) ) )]"
			texture = "gfx/interface/window_administrative_government/powerful_family_decoration.dds"
			spriteborder = { 212 0 }

			using = Mask_Rough_Edges

			modify_texture = {
				blend_mode = alphaMultiply
				texture = "gfx/interface/component_masks/mask_horizontal_extended.dds"
			}
		}

		background = {
			visible = "[DynastyHouse.GetHeadOfHouse.IsPlayer]"
			using = Background_Area_Border
			using = Background_Frame_Gold
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_left = 12
			margin_right = 12

			coa_house_medium = {

				widget = {
					size = { 92% 32 }
					parentanchor = bottom|hcenter
					position = { 0 -14}

					background = {
						texture = "gfx/interface/window_theme_administration/rating_banner.dds"
					}

					tooltipwidget = {
						widget_value_breakdown_tooltip = {
							datacontext = "[GovernmentAdministrationWindow.GetHousePowerTooltip( DynastyHouse.Self )]"
						}
					}

					text_single = {
						parentanchor = center
						position = { 0 -1 }
						max_width = 250
						align = nobaseline

						text = "[DynastyHouse.GetHousePower]"

						default_format = "#light_background"
					}
				}

				powerful_family_bonus = {
					parentanchor = top|right
				}
			}

			hbox = {
				margin_left = 8
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[DynastyHouse.GetHeadOfHouse]"

				vbox = {
					spacing = 2
					margin_left = 8
					margin_top = 8
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						text_single = {
							layoutpolicy_horizontal = expanding
							max_width = 250
							text = "ADMINISTRATIVE_GOVERNMENT_HOUSE_WITH_NAME"
						}
						expand = {}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						text_single = {
							max_width = 250
							layoutpolicy_horizontal = expanding
							text = "ADMINISTRATIVE_GOVERNMENT_HOUSE_HEAD"
						}
						expand = {}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_top = 4
						datacontext = "[DynastyHouse.GetHeadOfHouse]"

						hbox_access_domicile_button = {
							datacontext = "[DynastyHouse.GetHeadOfHouse]"
							visible = "[Character.HasDomicile]"

						}

						button_round = {
							visible = "[And( Character.HasDomicile, Not( DynastyHouse.GetHeadOfHouse.IsPlayer ) )]"
							enabled = "[Character.IsPlayerInteractionValid('start_raid_estate_interaction')]"
							tooltip = "[Character.GetPlayerInteractionTooltip('start_raid_estate_interaction')]"
							onclick = "[Character.OpenPlayerInteraction('start_raid_estate_interaction')]"

							button_army_toggle_raiding = {
								parentanchor = center
								alwaystransparent = yes
							}
						}

						button_round = {
							visible = "[Not( DynastyHouse.GetHeadOfHouse.IsPlayer )]"
							enabled = "[Character.IsPlayerInteractionValid('start_slander_interaction')]"
							tooltip = "[Character.GetPlayerInteractionTooltip('start_slander_interaction')]"
							onclick = "[Character.OpenPlayerInteraction('start_slander_interaction')]"

							button_slander = {
								parentanchor = center
								alwaystransparent = yes
							}
						}

						button_round = {
							visible = "[Not( DynastyHouse.GetHeadOfHouse.IsPlayer )]"
							enabled = "[Character.IsPlayerInteractionValid('start_challenge_status_interaction')]"
							tooltip = "[Character.GetPlayerInteractionTooltip('start_challenge_status_interaction')]"
							onclick = "[Character.OpenPlayerInteraction('start_challenge_status_interaction')]"

							button_challenge_status = {
								parentanchor = center
								alwaystransparent = yes
							}
						}

						button_round = {
							visible = "[Not( DynastyHouse.GetHeadOfHouse.IsPlayer )]"
							enabled = "[Character.IsPlayerInteractionValid('request_appointment_support')]"
							tooltip = "[Character.GetPlayerInteractionTooltip('request_appointment_support')]"
							onclick = "[Character.OpenPlayerInteraction('request_appointment_support')]"

							button_request_appointment_support = {
								parentanchor = center
								alwaystransparent = yes
							}
						}

						expand = {}
					}
					expand = {}
				}

				portrait_head_small = {
					blockoverride "portrait_button"
					{
						using = tooltip_ws
					}
					blockoverride "glow_visible"
					{
						visible = no
					}
				}
			}
		}
	}
}

template Background_Area_Admin_Purple {
	texture = "gfx/interface/colors/grey.dds"

	using = Mask_Rough_Edges
	color = { 0.5 0.1 0.5 0.6 }

	modify_texture = {
		blend_mode = alphaMultiply
		texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
		alpha = 0.5
	}
	modify_texture = {
		texture = "gfx/interface/component_masks/mask_clouds.dds"
		blend_mode = alphamultiply
		spriteType = corneredTiled
		alpha = 0.5
	}

	modify_texture = {
		texture = "gfx/interface/component_masks/mask_scratches.dds"
		blend_mode = alphamultiply
		spriteType = corneredTiled
	}
}

template Background_Area_Admin_Blue {
	texture = "gfx/interface/colors/grey.dds"

	using = Mask_Rough_Edges
	color = { 0 0.635 0.9 0.3 }

	modify_texture = {
		blend_mode = alphaMultiply
		texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
		alpha = 0.5
	}
	modify_texture = {
		texture = "gfx/interface/component_masks/mask_clouds.dds"
		blend_mode = alphamultiply
		spriteType = corneredTiled
		alpha = 0.5
	}

	modify_texture = {
		texture = "gfx/interface/component_masks/mask_scratches.dds"
		blend_mode = alphamultiply
		spriteType = corneredTiled
	}
}

template Background_Area_Admin_Orange {
	texture = "gfx/interface/colors/grey.dds"

	using = Mask_Rough_Edges
	color = { 1 0.5 0.1 0.6 }

	modify_texture = {
		blend_mode = alphaMultiply
		texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
		alpha = 0.5
	}

	modify_texture = {
		texture = "gfx/interface/component_masks/mask_clouds.dds"
		blend_mode = alphamultiply
		spriteType = corneredTiled
		alpha = 0.5
	}

	modify_texture = {
		texture = "gfx/interface/component_masks/mask_scratches.dds"
		blend_mode = alphamultiply
		spriteType = corneredTiled
	}
}

template Expand_Admin_Themes {
	on_start = "[GetVariableSystem.Set( 'admin_gov_unassigned_counties_list', 'true' )]"
	on_start = "[GetVariableSystem.Set( 'admin_gov_assigned_duchy_themes_list', 'true' )]"
	on_start = "[GetVariableSystem.Set( 'admin_gov_unassigned_duchy_themes_list', 'true' )]"
}
