######################################################
#################### DECLARE WAR "####################
######################################################

# These ~50 first lines are a placeholder way to show who will defend
window = {
	name = "declare_war_window"
	datacontext = "[DeclareWarInteractionWindow.GetCharacterInteractionConfirmationWindow]"
	position = { 0 0 }
	size = { 100% 100% } #1020
	allow_outside = yes
	movable = no
	layer = windows_layer
	alwaystransparent = yes
	using = agot_war_datacontexts

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = agot_rv_save_defender
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		on_start = "[SetMapMode('realms')]"
		using = agot_rv_clear_revenge_list
	}

	widget = {
		# name = "declare_war_window"
		size = { 700 100% }
		visible = "[Not(GetVariableSystem.Exists('ocr'))]"

		using = Window_Background_Subwindow
		# using = Window_Decoration_Warfare

		vbox = {
			using = ocr_margins

			error_button = {
				layoutpolicy_horizontal = expanding
			}

			button = {
				visible = "[And(GetVariableSystem.Exists('hide_tutorial'), GetTutorial.ShouldBeVisible)]"
				onclick = "[GetVariableSystem.Clear('hide_tutorial')]"
				shortcut = go_to_capital
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				using = char_click
				onclick = "[DeclareWarInteractionWindow.Close]"
				datacontext = "[DeclareWarInteractionWindow.GetDefenderCharacter.GetCharacter]"
				blockoverride "text" {
					raw_text = "Declaring against [Character.GetPrimaryTitle.GetNameNoTierNoTooltip], [Character.GetTitledFirstNameNicknamedNoTooltipRegnal]."
				}
			}

			button_close = {
				onclick = "[DeclareWarInteractionWindow.Close]"
				shortcut = "close_window"
			}

			vbox = {
				visible = "[DeclareWarInteractionWindow.HasSelectedCasusBelli]"
				layoutpolicy_horizontal = expanding
				### COST
				hbox = {
					layoutpolicy_horizontal = expanding

					declare_war_cost_ocr = {
					}

					expand = {}
				}

				hbox_declare_war_buttons = {}


				vbox = {
					name = "additional_warning_box"
					layoutpolicy_horizontal = expanding
					margin_top = 3

					flow_war_protection_locr = {}

					agot_liege_join_warning = {}

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "Warning, others might join."
						datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
						visible = "[DeclareWarInteractionWindow.GetCbType.GuiDefenderFaithMightJoin]"
						tooltip = "WAR_DEFENDER_FAITH_MIGHT_JOIN"
					}

					hbox = {
						visible = "[DeclareWarInteractionWindow.ShouldShowAdditionalWarning]"
						layoutpolicy_horizontal = expanding

						text_multi = {
							raw_text = "Warning, [DeclareWarInteractionWindow.WriteAdditionalWarningMessage]"
							max_width = 400
							autoresize = yes
						}
						expand = { }
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 5
						visible = "[Not(IsDataModelEmpty(DeclareWarInteractionWindow.GetDefenders))]"
						using = tooltip_ne

						tooltipwidget = {
							container = {
								using = DefaultTooltipBackground
								alwaystransparent = no

								flowcontainer = {
									margin = { 10 10 }
									ignoreinvisible = yes
									direction = vertical

									text_single = {
										raw_text = "Joining rulers, see tooltips for acceptance:"
									}

									datamodel = "[DeclareWarInteractionWindow.GetDefenders]"

									item = {
										button_text = {
											using = char_click
											datacontext = "[WarAllyItem.GetCharacter]"

											tooltip = "WAR_DEFENDER_ALLY_TOOLTIP"
											blockoverride "text" {
												raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip],"
											}
											blockoverride "extra" {
												text_single = {
													raw_text = "[Character.GetMilitaryStrengthText] men, [Character.GetGold|0] gold."
												}
											}
										}
									}
								}
							}
						}

						text_single = {
							raw_text = "[GetDataModelSize(DeclareWarInteractionWindow.GetDefenders)] joining:"
						}

						hbox = {
							datamodel = "[DataModelFirst(DeclareWarInteractionWindow.GetDefenders, '(int32)2')]"

							item = {
								button_text = {
									using = char_click
									datacontext = "[WarAllyItem.GetCharacter]"

									tooltip = "WAR_DEFENDER_ALLY_TOOLTIP"
									blockoverride "text" {
										raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip], [Character.GetMilitaryStrengthText] men,"
									}
								}
							}
						}

						text_single = {
							visible = "[GreaterThan_int32(GetDataModelSize(DeclareWarInteractionWindow.GetDefenders), '(int32)2')]"
							raw_text = "see tooltip for more."
						}

						expand = {}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[And(DeclareWarInteractionWindow.ShouldShowAdditionalWarning, IsDataModelEmpty(DeclareWarInteractionWindow.GetDefenders))]"
						raw_text = "No one joined yet."
					}
				}

				margin_bottom = 5
			}


			text_single = {
				text = "DECLARE_WAR_CHOOSE_CASUS_BELLI_INSTRUCTION"
				visible = "[Not(DeclareWarInteractionWindow.HasSelectedCasusBelli)]"
				layoutpolicy_horizontal = expanding
			}

			vbox = {
				name = "casus_belli_scroll_box"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[Not(DeclareWarInteractionWindow.HasSelectedCasusBelli)]"

				### Casus Belli Scrollarea
				scrollbox = {
					visible = "[Not(DeclareWarInteractionWindow.HasSelectedCasusBelli)]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_margins"
					{
						margin = { 10 15 }
					}


					blockoverride "scrollbox_empty"
					{
						text = NO_VALID_CASUS_BELLIS
						visible = "[DeclareWarInteractionWindow.HasNoValidCasusBellis]"
					}

					blockoverride "scrollbox_content"
					{
						vbox = {
							name = "casus_belli_items"
							datamodel = "[DeclareWarInteractionWindow.GetCasusBelliItems]"
							spacing = 5
							layoutpolicy_horizontal = expanding

							item = {
								button_text = {
									blockoverride "num" {	}
									name = "tutorial_highlight_cb_button"
									using = agot_show_cb

									shortcuts_list = {
										blockoverride "click" {
											using = agot_show_cb
											onclick = "[CasusBelliItem.OnClick]"
											onclick = "[PdxGuiTriggerAllAnimations('declare_war_goal_refresh')]"
										}
									}

									layoutpolicy_horizontal = expanding
									blockoverride "text" {
										raw_text = "Choose [CasusBelliItem.GetLabel],"
										alwaystransparent = yes
									}

									blockoverride "extra" {
										text_single = {
											raw_text = " invalid, see tooltip."
											visible = "[Not( CasusBelliItem.IsValid )]"
											tooltip = "[CasusBelliItem.GetInvalidText]"
										}
									}

									blockoverride "pre" {
										text_single = {
											raw_text = "Selected "
											visible = "[CasusBelliItem.IsSelected]"
										}
									}

									onclick = "[CasusBelliItem.OnClick]"
									onclick = "[PdxGuiTriggerAllAnimations('declare_war_goal_refresh')]"
								}
							}
						}
					}
				}
			}

			### Selected casus belli
			vbox = {
				visible = "[DeclareWarInteractionWindow.HasSelectedCasusBelli]"
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area
				}

				button_text = {
					shortcut = army_merge
					layoutpolicy_horizontal = expanding
					tooltip = "[CasusBelliItem.GetInvalidText]"
					tooltip_visible = "[Not( CasusBelliItem.IsValid )]"
					#TODO show this tooltip below and collapse

					blockoverride "text" {
						raw_text = "[CasusBelliItem.GetLabel],"
						alwaystransparent = yes
					}

					blockoverride "extra" {
						text_single = {
							raw_text = " warning, see tooltip."
							visible = "[Not( CasusBelliItem.IsValid )]"
						}
						text_single = {
							raw_text = "Change, G."
						}
					}

					blockoverride "pre" {
						text_single = {
							raw_text = "Selected"
							visible = "[CasusBelliItem.IsSelected]"
						}
					}
					datacontext = "[DeclareWarInteractionWindow.GetSelectedCasusBelliItem]"
					onclick = "[CasusBelliItem.OnClick]"
				}

			}

			flowcontainer = {
				visible = "[And(DeclareWarInteractionWindow.HasSelectedCasusBelli, DeclareWarInteractionWindow.CanShowWarGoalSubview)]"
				margin_left = 5
				text_single = {
					text = "DECLARE_WAR_CHOOSE_WARGOAL_INSTRUCTION"
					# layoutpolicy_horizontal = expanding
				}
				text_single = {
					raw_text = ", right-click to view the title."
				}
				layoutpolicy_horizontal = expanding
			}

			### War preview after selecting a Casus Belli
			vbox = {
				name = "war_preview"
				visible = "[DeclareWarInteractionWindow.HasSelectedCasusBelli]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				using = Animation_Tab_Switch

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					# spacing = 8

					vbox_agot_rv_targets = {}

					scrollbox = {
						using = agot_show_selected_cb
						datacontext = "[DeclareWarInteractionWindow.GetSelectedCasusBelliItem]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding


						blockoverride "scrollbox_content"
						{
							fixedgridbox = {
								datamodel = "[DeclareWarInteractionWindow.GetTitleItems]"
								layoutpolicy_horizontal = expanding
								addcolumn = 550
								addrow = 22

								state = {
									name = "declare_war_goal_refresh"
									using = Animation_Refresh_FadeOut
								}

								state = {
									using = Animation_Refresh_FadeIn
								}

								item = {
									button_text = {
										blockoverride "num" {

										}
										shortcuts_list = {
											blockoverride "click" {
												onclick = "[CasusBelliTitleItem.OnClick]"
												onrightclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
												using = title_pan_right
											}
										}
										datacontext = "[CasusBelliTitleItem.GetTitle]"
										blockoverride "text" {
											raw_text = "[CasusBelliTitleItem.GetName],"
										}
										blockoverride "pre" {
											text_single = {
												raw_text = "Selected"
												visible = "[CasusBelliTitleItem.IsSelected]"
											}
											text_single = {
												raw_text = "Choose"
												visible = "[Not(CasusBelliTitleItem.IsSelected)]"
											}
										}

										blockoverride "extra" {
											text_single = {
												raw_text = "[GuiScope.SetRoot(GetPlayer.GetCapitalLocation.MakeScope).AddScope('second', Title.GetPreferredCapital.GetCountyData.GetCapital.MakeScope).ScriptValue('province_distance')|0] days"
											}

											text_single = {
												raw_text = "[GuiScope.SetRoot(GetPlayer.GetCapitalLocation.MakeScope).AddScope('second', Title.GetPreferredCapital.GetCountyData.GetCapital.MakeScope).Custom('province_direction')]"
											}

											text_single = {
												margin_left = 3
												raw_text = "Coastal."
												visible = "[GetScriptedGui('is_coastal_or_river').IsShown( GuiScope.SetRoot( Title.MakeScope ).End )]"
											}
										}
										onclick = "[CasusBelliTitleItem.OnClick]"
										onrightclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
										using = title_pan_right
									}
								}
							}
						}
					}

					expand = { }

					hbox = {
						name = "war_outcomes_tabs"
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							margin_left = 15
							text = "[DeclareWarInteractionWindow.GetCurrentTabEffectsLabel]"
							align = left
						}

						background = {
							using = Background_Area
						}
					}

					### Info
					scrollbox = {
						name = "war_outcome_info"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = fixed
						size = { -1 200 }

						blockoverride "scrollbox_content"
						{
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								vbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									hbox = {
										layoutpolicy_horizontal = expanding

										text_multi = {
											name = "main_end_war_effect"
											layoutpolicy_horizontal = expanding
											autoresize = yes
											max_width = 530
											raw_text = "[DeclareWarInteractionWindow.GetCurrentTabMainOutputDescription]"
										}

										expand = {}
									}


									hbox_agot_rescue_list = {}

									text_single = {
										name = "other_end_war_effects"
										layoutpolicy_horizontal = expanding
										raw_text = "See this tooltip for details."
										tooltip = "[DeclareWarInteractionWindow.GetCurrentTabEffectsDescription]"
										#TODO should it be only in the victory tab for agot?
									}

									char_name = {
										layoutpolicy_horizontal = expanding
										datacontext = "[DeclareWarInteractionWindow.GetClaimant]"
										visible = "[Character.IsValid]"
										blockoverride "pre" {
											text_single = {
												raw_text = "Select "
											}
										}

									}
									expand = { }
								}
							}
						}
					}

					### Tabs
					flowcontainer = {
						direction = vertical
						ignoreinvisible = yes
						name = "outcome_effect_tabs"
						layoutpolicy_horizontal = expanding

						button_text = {
						    blockoverride "text" {
						        raw_text = "Show vctory effects."
						    }
							visible = "[Not(DeclareWarInteractionWindow.IsEffectsTabVictory)]"
							onclick = "[DeclareWarInteractionWindow.SetEffectsTabVictory]"
						}

						button_text = {
						    blockoverride "text" {
						        raw_text = "Show white peace effects."
						    }
							visible = "[And(Not(DeclareWarInteractionWindow.IsEffectsTabWhitePeace), DeclareWarInteractionWindow.GetCbType.IsWhitePeacePossible)]"
							onclick = "[DeclareWarInteractionWindow.SetEffectsTabWhitePeace]"
						}

						button_text = {
						    blockoverride "text" {
						        raw_text = "Show defeat effects."
						    }
							visible = "[Not(DeclareWarInteractionWindow.IsEffectsTabDefeat)]"
							onclick = "[DeclareWarInteractionWindow.SetEffectsTabDefeat]"
						}
					}
				}

				vbox_interaction_options = {
					visible = "[DeclareWarInteractionWindow.HasSelectedCasusBelli]"
					layoutpolicy_horizontal = expanding
				}
			}

			flowcontainer = {
				name = "layer_one_war"
				margin_left = 5
				datacontext = "[DeclareWarInteractionWindow.GetMilitaryStrengthInfo]"
				direction = vertical
				layoutpolicy_horizontal = expanding
				using = agot_show_war_comparison

				text_single = {
					raw_text = "[DeclareWarInteractionWindow.GetMilitaryStrength] [GuiMilitaryStrength.GetRatio|0]% ratio."
				}

				text_single = {
					raw_text = ""
				}

				soldiers_and_quality_small_text = {
					datacontext = "[DeclareWarInteractionWindow.GetAttackerCharacter]"
					datacontext = "[CharacterItem.GetComposition]"
					blockoverride "side" {
						raw_text = "Your side:"
					}
				}

				button_text = {
					datacontext = "[DeclareWarInteractionWindow.GetAttackerCharacter]"
					blockoverride "text" {
						raw_text = "[CharacterItem.GetAllyCount] allies. Click to show."
					}
					visible = "[GreaterThan_int32( CharacterItem.GetAllyCount, '(int32)0' )]"
					onclick = "[DeclareWarInteractionWindow.ShowAlliesForCharacter( CharacterItem.Self )]"
				}

				soldiers_and_quality_small_text = {
					datacontext = "[DeclareWarInteractionWindow.GetDefenderCharacter]"
					datacontext = "[CharacterItem.GetComposition]"
					blockoverride "side" {
						raw_text = "Enemy side:"
					}
				}

				button_text = {
					datacontext = "[DeclareWarInteractionWindow.GetDefenderCharacter]"
					blockoverride "text" {
						raw_text = "[CharacterItem.GetAllyCount] enemies. Click to show."
					}
					visible = "[GreaterThan_int32( CharacterItem.GetAllyCount, '(int32)0' )]"
					onclick = "[DeclareWarInteractionWindow.ShowAlliesForCharacter( CharacterItem.Self )]"
				}
			}
		}
	}

	old_declare_war = { }

	window = {
		name = "character_ally_list_subview"
		datacontext = "[DeclareWarInteractionWindow.GetAllyListContext]"
		size = { 640 100% }
		movable = no
		visible = "[And(Not(GetVariableSystem.Exists('ocr')), AllyListSubview.IsShown)]"

		using = Window_Background_Subwindow
		using = Animation_ShowHide_Standard

		vbox = {
			margin = { 3 3 }

			header_pattern = {
				layoutpolicy_horizontal = expanding
				datacontext = "[AllyListSubview.GetAllyList]"
				blockoverride "header_text"
				{
					raw_text = "[GetDataModelSize(CharacterSelectionList.GetList)] [AllyListSubview.GetHeaderTitle]."
				}
				blockoverride "button_close"
				{
					onclick = "[AllyListSubview.Close]"
				}
			}

			vbox_character_list = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[AllyListSubview.GetAllyList]"

				blockoverride "sort_buttons"
				{
					hbox_list_sort_buttons = {
						layoutpolicy_horizontal = expanding

						blockoverride "skill_sort_buttons" { }

						blockoverride "filters_visible" {
							visible = no
						}
					}
				}


				blockoverride "container_implementation" {

					vbox = {
						datamodel = "[CharacterSelectionList.GetList]"
						layoutpolicy_horizontal = expanding

						item = {
							text_single = {
								layoutpolicy_horizontal = expanding
								datacontext = "[CharacterListItem.GetCharacter]"
								raw_text = "[Character.GetMilitaryStrengthText] men, [Character.GetPrimaryTitle.GetNameNoTierNoTooltip], [Character.GetTitledFirstNameNicknamedNoTooltipRegnal]."
							}
						}
					}
				}

				blockoverride "character_count" { }
			}
		}
	}

	old_war_allies = { }
}

types DeclareWarTypes
{
	type declare_war_cost = vbox {
		name = "cost"
		margin = { 10 0 }

		background = {
			visible = "[Not( DeclareWarInteractionWindow.CanAffordCosts )]"
			using = Status_Bad
			margin_top = 5
		}

		hbox = {
			name = "costs"
			visible = "[DeclareWarInteractionWindow.HasCost]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 5

			text_single = {
				name = "cost_heading"
				align = left
				text = "WAR_COST"
				using = Font_Size_Big
			}

			hbox = {
				datacontext = "[DeclareWarInteractionWindow.GetCostBreakdown( 'piety' )]"
				tooltipwidget = { widget_value_breakdown_tooltip = { } }
				spacing = 2

				icon = {
					name = "icon_piety"
					datacontext = "[DeclareWarInteractionWindow.GetCostBreakdown( 'piety' )]"
					visible = "[NotEqualTo_CFixedPoint( DeclareWarInteractionWindow.GetSpecificCost( 'piety' ), '(CFixedPoint)0' )]"
					size = { 30 30 }
					texture = "[GetPlayer.GetPietyLevelTexture]"
				}

				text_single = {
					name = "piety"
					datacontext = "[DeclareWarInteractionWindow.GetCostBreakdown( 'piety' )]"
					visible = "[NotEqualTo_CFixedPoint( DeclareWarInteractionWindow.GetSpecificCost( 'piety' ), '(CFixedPoint)0' )]"

					text = "[DeclareWarInteractionWindow.GetSpecificCost( 'piety' )|0]"
					align = left
					using = Font_Size_Big
					default_format = "#high"
				}
			}

			text_single = {
				name = "prestige"
				datacontext = "[DeclareWarInteractionWindow.GetCostBreakdown( 'prestige' )]"
				visible = "[NotEqualTo_CFixedPoint( DeclareWarInteractionWindow.GetSpecificCost( 'prestige' ), '(CFixedPoint)0' )]"

				raw_text = "@prestige_icon![DeclareWarInteractionWindow.GetSpecificCost( 'prestige' )|0]"
				using = Font_Size_Big
				align = left
				default_format = "#high"

				tooltipwidget = { widget_value_breakdown_tooltip = { } }
			}

			text_single = {
				name = "renown"
				datacontext = "[DeclareWarInteractionWindow.GetCostBreakdown( 'renown' )]"
				visible = "[NotEqualTo_CFixedPoint( DeclareWarInteractionWindow.GetSpecificCost( 'renown' ), '(CFixedPoint)0' )]"

				raw_text = "@dynasty_prestige_icon![DeclareWarInteractionWindow.GetSpecificCost( 'renown' )|0]"
				align = left
				using = Font_Size_Big
				default_format = "#high"

				tooltipwidget = { widget_value_breakdown_tooltip = { } }
			}

			text_single = {
				name = "gold"
				datacontext = "[DeclareWarInteractionWindow.GetCostBreakdown( 'gold' )]"
				visible = "[NotEqualTo_CFixedPoint( DeclareWarInteractionWindow.GetSpecificCost( 'gold' ), '(CFixedPoint)0' )]"

				raw_text = "@gold_icon![DeclareWarInteractionWindow.GetSpecificCost( 'gold' )|0]"
				align = left
				using = Font_Size_Big
				default_format = "#high"

				tooltipwidget = { widget_value_breakdown_tooltip = { } }
			}
		}

		text_single  = {
			visible = "[Not(DeclareWarInteractionWindow.HasCost)]"
			text = "DECLARE_WAR_NO_COST"
			using = Font_Size_Medium
			align = left
		}
	}

	type declare_war_cost_ocr = vbox {
		name = "cost"

		hbox = {
			name = "costs"
			visible = "[DeclareWarInteractionWindow.HasCost]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 5

			text_single = {
				name = "cost_heading"
				text = "WAR_COST"
				layoutpolicy_horizontal = expanding
			}

			hbox = {
				datacontext = "[DeclareWarInteractionWindow.GetCostBreakdown( 'piety' )]"
				tooltipwidget = { widget_value_breakdown_tooltip = { } }
				spacing = 2
				text_single = {
					name = "piety"
					datacontext = "[DeclareWarInteractionWindow.GetCostBreakdown( 'piety' )]"
					visible = "[NotEqualTo_CFixedPoint( DeclareWarInteractionWindow.GetSpecificCost( 'piety' ), '(CFixedPoint)0' )]"

					raw_text = "[DeclareWarInteractionWindow.GetSpecificCost( 'piety' )|0] piety."
				}
			}

			text_single = {
				name = "prestige"
				datacontext = "[DeclareWarInteractionWindow.GetCostBreakdown( 'prestige' )]"
				visible = "[NotEqualTo_CFixedPoint( DeclareWarInteractionWindow.GetSpecificCost( 'prestige' ), '(CFixedPoint)0' )]"

				raw_text = "[DeclareWarInteractionWindow.GetSpecificCost( 'prestige' )|0] prestige."

				tooltipwidget = { widget_value_breakdown_tooltip = { } }
			}

			text_single = {
				name = "renown"
				datacontext = "[DeclareWarInteractionWindow.GetCostBreakdown( 'renown' )]"
				visible = "[NotEqualTo_CFixedPoint( DeclareWarInteractionWindow.GetSpecificCost( 'renown' ), '(CFixedPoint)0' )]"

				raw_text = "[DeclareWarInteractionWindow.GetSpecificCost( 'renown' )|0] renown"

				tooltipwidget = { widget_value_breakdown_tooltip = { } }
			}

			text_single = {
				name = "gold"
				datacontext = "[DeclareWarInteractionWindow.GetCostBreakdown( 'gold' )]"
				visible = "[NotEqualTo_CFixedPoint( DeclareWarInteractionWindow.GetSpecificCost( 'gold' ), '(CFixedPoint)0' )]"

				raw_text = "[DeclareWarInteractionWindow.GetSpecificCost( 'gold' )|0] gold"


				tooltipwidget = { widget_value_breakdown_tooltip = { } }
			}

			text_single = {
				name = "influence"
				datacontext = "[DeclareWarInteractionWindow.GetCostBreakdown( 'influence' )]"
				visible = "[NotEqualTo_CFixedPoint( DeclareWarInteractionWindow.GetSpecificCost( 'influence' ), '(CFixedPoint)0' )]"

				raw_text = "[DeclareWarInteractionWindow.GetSpecificCost( 'influence' )|0] influence"

				tooltipwidget = { widget_value_breakdown_tooltip = {} }
			}

			text_single = {
				raw_text = "You do not have enough."
				visible = "[Not( DeclareWarInteractionWindow.CanAffordCosts )]"
			}
			expand = { }
		}

		text_single  = {
			visible = "[Not(DeclareWarInteractionWindow.HasCost)]"
			text = "DECLARE_WAR_NO_COST"
			layoutpolicy_horizontal = expanding
		}

	}
}

types CharacterInteractionDeclareWar
{
	type widget_progressbar_declare_war = widget {
		widget = {
			size = { 100% 100% }
			scissor = yes

			icon = {
				block "progressbar_texture"
				{
					texture = "gfx/interface/progressbars/war_progress_blue.dds"
				}
				size = { 100% 100% }
				spriteType = Corneredtiled

				modify_texture = {
					name = overlay
					texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_solid.dds"
					blend_mode = mask
				}
			}
		}

		icon = {
			using = Animation_ShowHide_Standard
			parentanchor = right|vcenter
			position = { 5 0 }

			size = { 20 100% }
			texture = "gfx/interface/progressbars/progressbar_center_glow.dds"

			state = {
				name = a
				next = b
				trigger_on_create = yes
				duration = 0.1
				alpha = 1
			}

			state = {
				name = b
				next = a
				duration = 0.2
				alpha = 0.9
			}
		}
	}

	type declare_war_progressbar = 	widget {
		size = { 200 24 }

		widget = {
			size = { 100% 100% }
			scissor = yes

			widget = {
				size = { 100% 100% }

				background = {
					texture = "gfx/interface/progressbars/war_progress_red.dds"
				}
			}

			hbox = {
				widget_progressbar_declare_war = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					layoutstretchfactor_horizontal = "[GetProgressBarValueMaxScaled( GuiMilitaryStrength.GetRatio, '(float)100', '(int32)200' )]"

					blockoverride "progressbar_texture"
					{
						texture = "gfx/interface/progressbars/war_progress_blue.dds"
					}
				}

				widget = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					layoutstretchfactor_horizontal = "[GetProgressBarValueMaxOtherScaled( GuiMilitaryStrength.GetRatio, '(float)100', '(int32)200' )]"
				}
			}
		}

		widget = {
			name = "power_bar_frame"
			parentanchor = top
			size = { 100% 100% }
			alwaystransparent = yes

			background = {
				texture = "gfx/interface/progressbars/progress_frame_war.dds"
				spriteType = Corneredstretched
				spriteborder = { 10 10 }
				margin = { 5 4 }
			}
		}
	}


	type declare_war_character_portrait = hbox {

		vbox = {
			datacontext = "[CharacterItem.GetCharacter]"
			spacing = -37

			portrait_torso = {
				blockoverride "status_icons" { }
				blockoverride "portrait_texture"
				{
					portrait_texture = "[Character.GetPortrait('environment_torso', 'camera_torso', 'war_attacker', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
				}
				blockoverride "portrait_button" {

					vbox = {
						expand = { }

						hbox = {
							layoutpolicy_horizontal = expanding

							expand = {
								layoutpolicy_horizontal = expanding
							}

							spacer = {
								size = { 8 0 }
							}
						}
					}
				}
				blockoverride "opinion_box" { }
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				expand = { }

				button_standard = {
					name = "view_allies"
					enabled = "[GreaterThan_int32( CharacterItem.GetAllyCount, '(int32)0' )]"
					size = { 120 30 }
					onclick = "[DeclareWarInteractionWindow.ShowAlliesForCharacter( CharacterItem.Self )]"
					text = "DECLARE_WAR_ALLY_COUNT"
				}
			}
		}
	}

	type declare_war_casus_belli_item = hbox {
		name = "casus_belli_item"
		margin = { 5 0 }
		spacing = 5
		alwaystransparent = yes
		using = tooltip_es

		icon = {
			name = "icon"
			texture = "[CasusBelliItem.GetType.GetIcon]"
			size = { 33 33 }
			alwaystransparent = yes
		}

		text_single = {
			name = "name"
			layoutpolicy_horizontal = expanding
			text = "[CasusBelliItem.GetLabel]"
			align = left
			autoresize = no
			alwaystransparent = yes
		}

		warning_icon = {
			visible = "[Not( CasusBelliItem.IsValid )]"
			size = { 25 25 }
			alwaystransparent = yes
			tooltip = "[CasusBelliItem.GetInvalidText]"
		}
	}

	type declare_war_casus_belli_item_ocr = hbox {
		name = "casus_belli_item"
		margin = { 5 0 }
		spacing = 5
		alwaystransparent = yes
		using = tooltip_es

		text_single = {
			name = "name"
			layoutpolicy_horizontal = expanding
			raw_text = "[CasusBelliItem.GetLabel],"
			align = left
			autoresize = no
			alwaystransparent = yes
		}

		text_single = {
			raw_text = "warning, see tooltip."
			visible = "[Not( CasusBelliItem.IsValid )]"
			tooltip = "[CasusBelliItem.GetInvalidText]"
		}
	}
}

types CharacterGold
{
	type character_gold = hbox {
		datacontext = "[DeclareWarInteractionWindow.GetAttackerCharacter]"
		margin_top = -4
		spacing = 4

		icon = {
			name = "gold_icon"
			size = { 30 30 }
			texture = "gfx/interface/icons/icon_gold.dds"
		}

		text_single = {
			name = "gold_value_positive"
			visible = "[GreaterThanOrEqualTo_CFixedPoint(CharacterItem.GetGold, '(CFixedPoint)0')]"
			layoutpolicy_horizontal = expanding

			text = "[CharacterItem.GetGold|0]"
			align = left
			default_format = "#high"
			using = Font_Size_Medium
			max_width = 50
		}

		text_single = {
			name = "gold_value_negative"
			visible = "[LessThan_CFixedPoint(CharacterItem.GetGold, '(CFixedPoint)0')]"
			layoutpolicy_horizontal = expanding

			text = "[CharacterItem.GetGold|0]"
			default_format = "#N"
			using = Font_Size_Medium
			max_width = 50
		}
	}

	type soldiers_and_quality_small_text = flowcontainer {
		ignoreinvisible = yes
		spacing = 3
		block "tooltipwidget" {
			using = army_comp_tooltip_war_dec
		}

		text_single = {
			block "side" {
				raw_text = ""
			}
		}

		block "dragons" {
			flow_dragons_for_soldiers = {}
		}

		text_single = {
			name = "strength"
			raw_text = "[ArmyComposition.GetSoldierCountString] men."
		}

		text_single = {
			raw_text = "Missing [Subtract_int32(ArmyComposition.GetMaxNumberOfSoldiers, ArmyComposition.GetCurrentNumberOfSoldiers)]."
			visible = "[And( NotEqualTo_int32(ArmyComposition.GetCurrentNumberOfSoldiers, ArmyComposition.GetMaxNumberOfSoldiers), NotEqualTo_int32(ArmyComposition.GetMaxNumberOfSoldiers, '(int32)0' ) )]"
		}

		text_single = {
			raw_text = "[ArmyComposition.GetArmyQualityName]."
		}

		text_single = {
			raw_text = "[CharacterItem.GetGold|0] gold."
			block "gold" { }
		}

		text_single = {
			raw_text = "Details in tooltip."
			block "tooltip" {
				visible = no
			}
		}
	}

	type soldiers_and_quality_small_text_war = soldiers_and_quality_small_text {
		blockoverride "dragons" {
			flow_dragons_for_war = {}
		}
		block "tooltipwidget" {
			using = army_comp_tooltip_war_overview
		}
	}
}

types AGOT_OCR {
	type agot_liege_join_warning = container {}
	type vbox_agot_rv_targets = container {}
	type hbox_agot_rescue_list = container {}

	type hbox_declare_war_buttons = hbox {
		layoutpolicy_horizontal = expanding
		name = "tutorial_highlight_declare_war_send_button"

		button_declare_war = {
			name = "send_button"
		}

		expand = {}
	}

	type button_declare_war = button_primary_text {
		tooltip = "[DeclareWarInteractionWindow.GetDeclareWarButtonTooltip]"
		block "disable_declare_war" {
			enabled = "[DeclareWarInteractionWindow.CanSend]"
			blockoverride "disabled" {
				visible = "[Not(DeclareWarInteractionWindow.CanSend)]"
			}
		}
		blockoverride "text" {
			text = "[CharacterInteractionConfirmationWindow.GetSendName]"
		}
		onclick = "[DeclareWarInteractionWindow.Send]"
		clicksound = "event:/SFX/UI/War/sfx_ui_war_declare_war"

		blockoverride "extra" {
			text_single = {
				raw_text = ", warning, see tooltip"
				visible = "[And(DeclareWarInteractionWindow.HasSelectedCasusBelli, Or( Or( Not( DeclareWarInteractionWindow.CanAffordCosts ), DeclareWarInteractionWindow.IsBreakingTruce), DeclareWarInteractionWindow.IsBreakingAlliance))]"
			}
		}
	}
}


template agot_rv_save_defender {}
template agot_rv_clear_revenge_list {}

template agot_show_war_comparison {}
template agot_show_cb {}

template agot_show_selected_cb {
	visible = "[DeclareWarInteractionWindow.CanShowWarGoalSubview]"
}

template agot_war_datacontexts {}

template army_comp_tooltip_war_dec {
	tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
}
