JominiMultiplayerLobby = {
	state = {
		name = _show
		on_start = "[GetVariableSystem.Set( 'mp_lobby_tabs', 'show_players' )]"

		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		on_start = "[GetVariableSystem.Clear( 'tabs_open' )]"
		on_start = "[GetVariableSystem.Clear( 'mp_lobby_tabs' )]"

		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
	}

	blockoverride "left_panel_properties"
	{
		size = { 700 100% }
		widgetid = "left"
		visible = "[GameIsMultiplayer]"
	}

	blockoverride "lobby_view_back_onclick" {
		onclick = "[SetIronmanEnabledStatus( '(bool)no' )]"
		onclick = "[ReturnToMenu]"
	}

	blockoverride "host_button"
	{
		text = "[SelectLocalization( IsIronmanEnabled, 'GAME_SETUP_IRONMAN_SINGLEPLAYER_ONLY', 'JOMINI_MULTIPLAYER_GUI_HOST_BUTTON' )]"
	}

	blockoverride "host_button_enabled"
	{
		enabled = "[And( And( JominiIsMultiplayerAccessible, JominiIsHostOrLocal ), Not( IsIronmanEnabled ) )]"
	}

	# blockoverride "lobby_module_background"
	# {
	# 	using = Background_Area_Dark
	# 	margin = { 10 10 }
	# }

	blockoverride "playerbackgroundstyle"
	{
		using = Background_Area
	}

	blockoverride "jominimultiplayertextbox" {
		default_format = "#medium"
	}

	blockoverride "buttonstyle" {
		gfxtype = togglepushbuttongfx
		effectname = "NoHighlight"

		upframe = 1
		uphoverframe = 2
		uppressedframe = 3
		downframe = 4
		downhoverframe = 5
		downpressedframe = 6
		texture = "gfx/interface/buttons/button_entry_02.dds"
		spriteType = Corneredstretched
		spriteborder = { 20 20 }
		framesize  = { 249 78 }

		default_format = "#medium"
	}

	blockoverride "playerlist_playable" {
	}

	blockoverride "game_info" {
		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text" {
				text = "[GetCurrentDate.GetString]"
			}

			blockoverride "button_close" {
				visible = no
			}
		}
	}

	blockoverride "selected_playable" {
		state = {
			name = "jomini_preselected_changed"
			next = "preselected_shown"
			alpha = 0.5
		}

		state = {
			name = "preselected_shown"
			alpha = 1
			duration = 0.5
			using = Animation_Curve_Default
			
			start_sound = {
				soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_selected_playable"

				soundparam = {
					name = "click_index"
					value = "[LobbyView.GetSelectionClickIndex]"
				}

				soundparam = {
					name = "culture"
					value = "[LobbyView.GetSelectedPlayable.GetCharacter.GetCulture.GetHeritage.GetAudioParameter]"
				}
			}
		}

		datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			using = show_selected_character_lobby

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				ignoreinvisible = yes

				visible = "[Not(GetVariableSystem.Exists('sub_selection'))]"

				background = { using = Background_Area_Border_Solid }

				#### MAIN PORTRAIT ###
				vbox = {
					layoutpolicy_horizontal = expanding

					button_primary_text = {
						layoutpolicy_horizontal = expanding
						visible = "[And(Not( IsPreparationLobby ), LobbyView.CanControlSelected)]"
						blockoverride "text" {
							raw_text = "Start game as [Character.GetUINameNoTooltip], [Character.GetAge] years"
						}

						blockoverride "disabled" {
							visible = "[Not(LobbyView.CanControlSelected)]"
						}

						blockoverride "hotkey" {
							visible = "[LobbyView.CanControlSelected]"
						}

						onclick = "[LobbyView.ControlSelected]"
						onclick = "[LobbyView.Ready]"
						enabled = "[LobbyView.CanControlSelected]"

						tooltip = "[LobbyView.GetControlToolTip]"
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						name = "select_and_customize_character"
						datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"

						vbox = {
							layoutpolicy_horizontal = expanding
							margin = { 10 10 }
							visible = "[Not( Or( Character.IsOtherPlayer, Character.IsLocalPlayer ) )]"

							button_primary_text = {
								layoutpolicy_horizontal = expanding
								visible = "[And( GameIsMultiplayer, IsPreparationLobby )]"
								blockoverride "text" {
									text = "JOMINI_MULTIPLAYER_GUI_SELECT"
								}
								blockoverride "extra" {
									text_single = {
										raw_text = " [Character.GetFirstNameNoTooltip]"
									}
								}
								blockoverride "disabled" {
									visible = "[Not(LobbyView.CanControlSelected)]"
								}
								blockoverride "hotkey" {
									visible = "[LobbyView.CanControlSelected]"
								}

								onclick = "[LobbyView.ControlSelected]"
								tooltip = "[LobbyView.GetControlToolTip]"
								enabled = "[LobbyView.CanControlSelected]"
							}
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"
							blockoverride "text" {
								raw_text = "[Localize('RULER_DESIGNER_OPEN')]."
							}
							onclick = "[LobbyView.UnReady]"
							onclick = "[TryStartRulerDesigning( Character.Self )]"
							visible = "[And(LobbyView.CanTryStartRulerDesigning( Character.Self ), IsPreparationLobby)]"
							tooltip = "[LobbyView.GetTryStartRulerDesigningDesc( Character.Self )]"
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Or(Or(Character.IsOtherPlayer, Character.IsLocalPlayer), And(Not(Character.IsValid), IsObserver))]"

							vbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									name = "player"
									visible = "[Character.IsOtherPlayer]"
									raw_text = "[Localize('MULTIPLAYER_LOBBY_PLAYED_BY')]."
									align = left
									default_format = "#high"
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									name = "its_you"
									visible = "[Character.IsLocalPlayer]"
									raw_text = "[Localize('MULTIPLAYER_LOBBY_PLAYED_BY_YOU')]."
									align = left
									default_format = "#high"
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									visible = "[And(Not(Character.IsValid), IsObserver)]"
									size = { 380 100 }
									raw_text = "[Localize('MULTIPLAYER_LOBBY_PLAY_OBSERVER')]."
								}
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						hbox = {
							spacing = 3
							datamodel = "[Character.GetTraitIndices]"

							item = {
								text_single = {
									layoutpolicy_horizontal = expanding
									datacontext = "[GetTraitForIndex(int32.GetInt)]"
									visible = "[Trait.IsPersonality]"
									raw_text = "[Trait.GetName( GetNullCharacter )],"
								}
							}
						}

						hbox = {
							text_single = {
								datacontext = "[Character.GetFaith]"
								text = "FAITH_LOBBY_WINDOW"
								max_width = 220

								tooltipwidget = { faith_tooltip_core_tenents = { } }

								using = tooltip_ws
							}

							text_single = {
								raw_text = ","
							}

							space = { }

							text_single = {
								datacontext = "[Character.GetCulture]"
								text = "CULTURE_LOBBY_WINDOW"
								max_width = 220

								tooltipwidget = { ruler_designer_culture_tooltip = { } }

								using = tooltip_ws
							}

							dot = { }
						}

						text_single = {
							datacontext = "[Character.GetHouse]"
							visible = "[Character.HasDynasty]"
							raw_text = "House [DynastyHouse.GetBaseNameNoTooltip]."
						}

						expand = { }
					}

					hbox = {
				    layoutpolicy_horizontal = expanding
						spacing = 3

						text_single = {
							visible = "[Character.HasLandedTitles]"
							raw_text = "[Character.GetMilitaryStrengthText] soldiers, [Character.RealmSize] counties."
						}

					    text_single = {
							visible = "[Character.HasLandedTitles]"
							name = "government_type"
							raw_text = "[Character.GetGovernment.GetName] [Character.GetPrimaryTitle.GetRankConcept]."
						}

					    expand = { }
					}

					realm_name = {
						layoutpolicy_horizontal = expanding
						datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter.GetLiege]"
						visible = "[And(Character.IsValid, Not(Character.IsSelected))]"
						blockoverride "pre" {
							text_single = {
								raw_text = "Liege:"
							}
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter.GetPlayerHeir]"
						visible = "[Character.IsValid]"
						raw_text = "Heir: [Character.GetUINameNoTooltip]."
					}
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('playable_vassals')] playable vassals, hotkey E."
					}
					shortcut = map_mode_1
					visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('playable_vassals'), '(CFixedPoint)0')]"
					onclick = "[GetVariableSystem.Set('sub_selection', 'playable_vassals')]"
					onclick = "[GetScriptedGui('playable_vassals').Execute( GuiScope.SetRoot( Character.MakeScope ).End )]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "View playable neighbours, hotkey Control A."
					}
					shortcut = map_mode_6
					onclick = "[GetVariableSystem.Set('sub_selection', 'playable_neighbours')]"
					onclick = "[GetScriptedGui('playable_neighbours').Execute( GuiScope.SetRoot( Character.MakeScope ).End )]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Select another, hotkey B or Escape."
					}
					onclick = "[GetVariableSystem.Set('selected_character', 'yes')]"
					shortcut = go_back
					shortcut = close_window
				}

				button_text = {
					datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"
					layoutpolicy_horizontal = expanding


					visible = "[Not( IsPreparationLobby )]"
					onclick = "[TryStartRulerDesigning( Character.Self )]"
					enabled = "[LobbyView.CanTryStartRulerDesigning( Character.Self )]"
					# tooltip = "[LobbyView.GetTryStartRulerDesigningDesc( Character.Self )]"

					blockoverride "text" {
						text = "RULER_DESIGNER_OPEN"
					}
					blockoverride "disabled" {
						visible = "[Not(LobbyView.CanTryStartRulerDesigning( Character.Self ))]"
					}

					blockoverride "extra" {
						visible = "[LobbyView.CanTryStartRulerDesigning( Character.Self )]"
						text_single = {
							raw_text = " and replace [Character.GetFirstNameNoTooltip]"
							align = left
						}
						text_single = {
							raw_text = ", hotkey Tab"
							align = left
						}
					}
					blockoverride "dot" {
					}
					shortcut = action_list
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					### REALM ###
					hbox = {
						layoutpolicy_horizontal = expanding
						visible = no

						# visible = "[Character.HasLandedTitles]"

						vbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "Primary title:"
							}

							text_single = {
								name = "character_title"
								layoutpolicy_horizontal = expanding
								raw_text = "[Character.GetPrimaryTitle.GetNameNoTooltip|U]."
							}
						}

						expand = { }
					}
				}

				spacer = {
					size = { 10 5 }
				}

				scrollarea = {
					layoutpolicy_horizontal = expanding
					maximumsize = { -1 150 }
					autoresizescrollarea = yes
					scrollbarpolicy_horizontal = always_off
					visible = "[Character.HasDifficultyInfo]"

					scrollwidget = {
						### DIFFICULTY ###
						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3
							visible = "[Character.HasDifficultyInfo]"

							text_single = {
								name = "difficulty_label"
								layoutpolicy_horizontal = expanding
								text = "MULTIPLAYER_LOBBY_DIFFICULTY_HEADER"
							}

							text_multi = {
								name = "difficulty"
								layoutpolicy_horizontal = expanding
								autoresize = yes
								text = "MULTIPLAYER_LOBBY_DIFFICULTY_INFO_TEXT"
								max_width = 680
							}
						}
					}

					scrollbar_vertical = {
						using = Scrollbar_Vertical
					}
				}

				expand = { }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[GetVariableSystem.Exists('sub_selection')]"

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					visible = "[GetVariableSystem.HasValue('sub_selection', 'playable_vassals')]"

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "Vassals of [Character.GetTitledFirstNameNoTooltip]. Close with Escape or E."
						}
						onclick = "[GetVariableSystem.Clear('sub_selection')]"
						shortcut = map_mode_1
						shortcut = close_window
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						blockoverride "scrollbox_margins" {
							margin_top = 20
						}

						blockoverride "scrollbox_content" {
							region_list = {
								datamodel = "[Character.MakeScope.GetList('playable_vassals')]"
								blockoverride "extra_click" {
									onclick = "[GetVariableSystem.Clear('sub_selection')]"
								}
							}
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					visible = "[GetVariableSystem.HasValue('sub_selection', 'playable_neighbours')]"

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "Neighbours of [Character.GetTitledFirstNameNoTooltip]. Close with Escape or Control A."
						}
						onclick = "[GetVariableSystem.Clear('sub_selection')]"
						shortcut = map_mode_6
						shortcut = close_window
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						blockoverride "scrollbox_margins" {
							margin_top = 20
						}

						blockoverride "scrollbox_content" {
							region_list = {
								datamodel = "[Character.MakeScope.GetList('adjacent_rulers')]"
								blockoverride "extra_click" {
									onclick = "[GetVariableSystem.Clear('sub_selection')]"
								}
								blockoverride "direction" {
									text_single = {
										raw_text = "[GuiScope.SetRoot(LobbyView.GetSelectedPlayable.GetCharacter.GetCapitalLocation.MakeScope).AddScope('second', Scope.GetCharacter.GetCapitalLocation.MakeScope).Custom('province_direction')],"
									}
								}
							}
							region_list = {
								datamodel = "[Character.MakeScope.GetList('adjacent_vassals')]"
								blockoverride "extra_click" {
									onclick = "[GetVariableSystem.Clear('sub_selection')]"
								}
								blockoverride "direction" {
									text_single = {
										raw_text = "[GuiScope.SetRoot(LobbyView.GetSelectedPlayable.GetCharacter.GetCapitalLocation.MakeScope).AddScope('second', Scope.GetCharacter.GetCapitalLocation.MakeScope).Custom('province_direction')],"
									}
								}
							}
						}
					}
				}
			}
		}

		vbox_selected_wasteland_locr = {}
	}

	blockoverride "game_rules" {
		vbox = {
			visible = "[Not(GetVariableSystem.Exists('sub_selection'))]"
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin_right = 10
			margin_bottom = 15

			button_text = {
				layoutpolicy_horizontal = expanding
				shortcut = map_mode_3

				blockoverride "pre" {
					text_single = {
						align = left
						raw_text = "Open"
						margin_right = 3
					}
				}
			    blockoverride "text" {
			        raw_text = "GAME_RULES"
			    }
				blockoverride "extra" {
					text_single = {
						margin_left = -3
						raw_text = ", R"
					}
				}
				blockoverride "dot" {
				}
				onclick = "[OpenGameRules]"
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				visible = "[IsIronmanEnabled]"
				onclick = "[SetIronmanEnabledStatus( '(bool)no' )]"
				blockoverride "text" {
					raw_text = "BOOKMARK_IRONMAN_ENABLED"
					align = left
				}
				blockoverride "extra" {
					text_single = {
						raw_text = ": Enabled."
					}
				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				visible = "[Not( IsIronmanEnabled )]"
				onclick = "[SetIronmanEnabledStatus( '(bool)yes' )]"
				blockoverride "text" {
					raw_text = "BOOKMARK_IRONMAN_ENABLED"
					align = left
				}
				blockoverride "extra" {
					text_single = {
						raw_text = ": Disabled."
					}
				}
			}

			flowcontainer_game_rules_mini = {
				layoutpolicy_horizontal = expanding
				name = "game_rules_mini"
				margin_left = 5
			}
		}
	}

	### Chosen character name left side ###
	blockoverride "readyness" {
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			maximumsize = { 390 -1 }

			text_multi = {
				layoutpolicy_horizontal = expanding
				raw_text = "[Localize('MULTIPLAYER_LOBBY_READY')]."
				visible = "[And( LobbyPlayer.HasPlayable, Not( LobbyPlayer.IsObserver ) )]"
				max_width = 390
				autoresize = yes
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				raw_text = "[SelectLocalization( IsMachineRulerDesigning( LobbyPlayer.GetID ), 'MULTIPLAYER_LOBBY_RULER_DESIGNING', 'MULTIPLAYER_LOBBY_NOT_READY' )]."
				visible = "[Not( Or( Or( LobbyPlayer.HasPlayable, LobbyPlayer.IsObserver ), LobbyPlayer.IsHotjoining ) )]"
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				raw_text = "[Localize('JOMINI_MULTIPLAYER_GUI_OBSERVER')]."
				visible = "[LobbyPlayer.IsObserver]"
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				visible = "[LobbyPlayer.IsHotjoining]"
				raw_text = "[Localize('MULTIPLAYER_LOBBY_JOIN_PROGRESS')]."
			}

			expand = { }
		}
	}

	hbox = {
		layoutpolicy_horizontal = expanding
		allow_outside = yes

		expand = { }

		map_modes = {
			visible = "[GetVariableSystem.Exists('ocr')]"
			scale = 0.8
			filter_mouse = all
			alwaystransparent = no
			hotkeys_HUD = { }
		}
	}

	### MAPMODES, OBSERVE MODE ###
}

JominiLobbyViewEndPreparationConfirmation = { }
JominiMultiplayerJoinRequest = { }
JominiMultiplayerOosMessage = {
	blockoverride "oos_item" {
		layoutpolicy_horizontal = expanding

		hbox = {
			datacontext = "[OosData.GetPlayable.GetCharacter]"
			layoutpolicy_horizontal = expanding

			widget = {
				size = { 68 106 }

				coa_realm_medium_crown = {
					visible = "[And( Character.IsValid, Not( OosData.IsObserver ))]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 5 0 }

				text_single = {
					text = "[Character.GetName]"
					visible = "[And( Character.IsValid, Not( OosData.IsObserver ))]"
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OBSERVER"
					visible = "[OosData.IsObserver]"
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_PLAYER_NAME"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_TYPE"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_multi = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_FOLDER"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}
			}
		}
	}
}

template show_selected_character_lobby {
	visible = "[Character.IsValid]"
}
