JominiMultiplayerLobby = {
	state = {
		name = _show
		on_start = "[GetVariableSystem.Set( 'mp_lobby_tabs', 'show_players' )]"
		on_finish = "[OpenGameView( 'lobby_helper_window' )]"
		on_finish = "[CloseGameView( 'outliner' )]"

		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		on_start = "[GetVariableSystem.Clear( 'tabs_open' )]"
		on_start = "[GetVariableSystem.Clear( 'mp_lobby_tabs' )]"
		on_finish = "[CloseGameView( 'lobby_helper_window' )]"

		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
	}

	# Tabs setup
	oncreate = "[BindTabsContext]"
	oncreate = "[PdxGuiTabs.SetResetOnShown( '(bool)yes' )]"
	oncreate = "[PdxGuiTabs.AddTab( 'character' )]"
	oncreate = "[PdxGuiTabs.AddTabIf( 'landless_rulers', HasDlcFeature( 'landless_playable' ) )]"

	# Code can send an event which we can listen for to switch tabs
	oncreate = "[PdxGuiTabs.ListenFor( 'lobby_window_change_tab' )]"

	blockoverride "left_panel_properties"
	{
		size = { 700 100% }
		widgetid = "left"
		visible = "[GameIsMultiplayer]"
	}

	blockoverride "lobby_view_back_onclick" {
		onclick = "[SetIronmanEnabledStatus( '(bool)no' )]"
		onclick = "[ReturnToMenu]"
	}

	blockoverride "host_button"
	{
		text = "[SelectLocalization( IsIronmanEnabled, 'GAME_SETUP_IRONMAN_SINGLEPLAYER_ONLY', 'JOMINI_MULTIPLAYER_GUI_HOST_BUTTON' )]"
	}

	blockoverride "host_button_enabled"
	{
		enabled = "[And( And( JominiIsMultiplayerAccessible, JominiIsHostOrLocal ), Not( IsIronmanEnabled ) )]"
	}

	# blockoverride "lobby_module_background"
	# {
	# 	using = Background_Area_Dark
	# 	margin = { 10 10 }
	# }

	blockoverride "playerbackgroundstyle"
	{
		using = Background_Area
	}

	blockoverride "jominimultiplayertextbox" {
		default_format = "#medium"
	}

	blockoverride "buttonstyle" {
		gfxtype = togglepushbuttongfx
		effectname = "NoHighlight"

		upframe = 1
		uphoverframe = 2
		uppressedframe = 3
		downframe = 4
		downhoverframe = 5
		downpressedframe = 6
		texture = "gfx/interface/buttons/button_entry_02.dds"
		spriteType = Corneredstretched
		spriteborder = { 20 20 }
		framesize  = { 249 78 }

		default_format = "#medium"
	}

	blockoverride "playerlist_playable" {
	}

	blockoverride "game_info" {
		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text" {
				text = "[GetCurrentDate.GetString]"
			}

			blockoverride "button_close" {
				visible = no
			}
		}
	}

	blockoverride "game_rules" {
		vbox = {
			visible = "[Not(GetVariableSystem.Exists('sub_selection'))]"
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin_right = 10
			margin_bottom = 15

			button_text = {
				layoutpolicy_horizontal = expanding
				shortcut = map_mode_3

				blockoverride "pre" {
					text_single = {
						align = left
						raw_text = "Open"
						margin_right = 3
					}
				}
			    blockoverride "text" {
			        raw_text = "GAME_RULES"
			    }
				blockoverride "extra" {
					text_single = {
						margin_left = -3
						raw_text = ", R"
					}
				}
				blockoverride "dot" {
				}
				onclick = "[OpenGameRules]"
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				visible = "[IsIronmanEnabled]"
				onclick = "[SetIronmanEnabledStatus( '(bool)no' )]"
				blockoverride "text" {
					raw_text = "BOOKMARK_IRONMAN_ENABLED"
					align = left
				}
				blockoverride "extra" {
					text_single = {
						raw_text = ": Enabled."
					}
				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				visible = "[Not( IsIronmanEnabled )]"
				onclick = "[SetIronmanEnabledStatus( '(bool)yes' )]"
				blockoverride "text" {
					raw_text = "BOOKMARK_IRONMAN_ENABLED"
					align = left
				}
				blockoverride "extra" {
					text_single = {
						raw_text = ": Disabled."
					}
				}
			}

			flowcontainer_game_rules_mini = {
				layoutpolicy_horizontal = expanding
				name = "game_rules_mini"
				margin_left = 5
			}
		}
	}

	### Chosen character name left side ###
	blockoverride "readyness" {
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			maximumsize = { 390 -1 }

			text_multi = {
				layoutpolicy_horizontal = expanding
				raw_text = "[Localize('MULTIPLAYER_LOBBY_READY')]."
				visible = "[And( LobbyPlayer.HasPlayable, Not( LobbyPlayer.IsObserver ) )]"
				max_width = 390
				autoresize = yes
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				raw_text = "[SelectLocalization( IsMachineRulerDesigning( LobbyPlayer.GetID ), 'MULTIPLAYER_LOBBY_RULER_DESIGNING', 'MULTIPLAYER_LOBBY_NOT_READY' )]."
				visible = "[Not( Or( Or( LobbyPlayer.HasPlayable, LobbyPlayer.IsObserver ), LobbyPlayer.IsHotjoining ) )]"
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				raw_text = "[Localize('JOMINI_MULTIPLAYER_GUI_OBSERVER')]."
				visible = "[LobbyPlayer.IsObserver]"
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				visible = "[LobbyPlayer.IsHotjoining]"
				raw_text = "[Localize('MULTIPLAYER_LOBBY_JOIN_PROGRESS')]."
			}

			expand = { }
		}
	}

	hbox = {
		layoutpolicy_horizontal = expanding
		allow_outside = yes

		expand = { }

		map_modes = {
			visible = "[GetVariableSystem.Exists('ocr')]"
			scale = 0.8
			filter_mouse = all
			alwaystransparent = no
			# hotkeys_HUD = { }
		}
	}

	### MAPMODES, OBSERVE MODE ###
}

JominiLobbyViewEndPreparationConfirmation = { }
JominiMultiplayerJoinRequest = { }
JominiMultiplayerOosMessage = {
	blockoverride "oos_item" {
		layoutpolicy_horizontal = expanding

		hbox = {
			datacontext = "[OosData.GetPlayable.GetCharacter]"
			layoutpolicy_horizontal = expanding

			widget = {
				size = { 68 106 }

				coa_realm_medium_crown = {
					visible = "[And( Character.IsValid, Not( OosData.IsObserver ))]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 5 0 }

				text_single = {
					text = "[Character.GetName]"
					visible = "[And( Character.IsValid, Not( OosData.IsObserver ))]"
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OBSERVER"
					visible = "[OosData.IsObserver]"
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_PLAYER_NAME"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_TYPE"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_multi = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_FOLDER"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}
			}
		}
	}
}

template show_selected_character_lobby {
	visible = "[Character.IsValid]"
}


types LobbyWindowTypes {

	type button_landless_ruler_list_item = button_standard {
		datacontext = "[CharacterListItem.GetCharacter]"

		onclick = "[CharacterListItem.OnClick('character')]"
		enabled = "[CharacterListItem.IsSelectable]"
		tooltip = "[CharacterListItem.GetUnselectableReason]"

		block "overlay" {
			using = default_character_list_overlay
		}

		hbox = {
			layoutpolicy_vertical = expanding

			spacing = 4

			portrait_head_small = {}

			vbox = {
				layoutpolicy_horizontal = expanding

				text_multi = {
					layoutpolicy_horizontal = expanding
					min_width = 250
					max_width = 250
					max_height = 50
					autoresize = yes
					alwaystransparent = yes

					text = lobby_landless_ruler_name
					using = Font_Size_Medium
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					max_width = 250
					alwaystransparent = yes

					text = lobby_landless_domicile_location
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					max_width = 250
					alwaystransparent = yes

					text = lobby_landless_domicile_followers
				}
			}
		}

		block "widget" {}
	}

	type hbox_lobby_government_filter = hbox {
		name = "filters"
		layoutpolicy_horizontal = expanding

		dropdown_menu_standard = {
			blockoverride "dropdown_properties"
			{
				datamodel = "[LobbyHelperWindow.GetLandlessGovernmentFilters]"
				onselectionchanged = "[LobbyHelperWindow.OnSelectGovernmentFilter]"
				selectedindex = "[LobbyHelperWindow.GetLandlessGovernmentSetIndex]"
			}

			blockoverride "dropdown_size"
			{
				size = { 250 32 }
			}

			blockoverride "dropdown_list_maxsize"
			{
				maximumsize = { 250 550 }
			}

			blockoverride "dropdown_active_item_properties"
			{

				flowcontainer = {
					ignoreinvisible = yes
					spacing = 3


					text_single = {
						raw_text = "Filtered by:"
					}

					text_single = {
						visible = "[GovernmentType.IsValid]"

						raw_text = "[GovernmentType.GetNameNoTooltip]"
					}

					text_single = {
						visible = "[Not( GovernmentType.IsValid )]"

						text = "any_filter_option"
					}

				}
			}

			blockoverride "dropdown_item_properties"
			{
				text_single = {
					visible = "[GovernmentType.IsValid]"
					align = nobaseline|left
					margin_left = 5
					parentanchor = vcenter

					text = "[GovernmentType.GetNameNoTooltip]"
				}

				text_single = {
					visible = "[Not( GovernmentType.IsValid )]"
					align = nobaseline|left
					margin_left = 5
					parentanchor = vcenter

					text = "any_filter_option"
				}
			}

			tooltip = lobby_landless_government_filter_tt
			using = tooltip_ne
		}

		expand = {}
	}
}

types OCR {

	type button_landless_ruler_list_item_ocr = vbox {
		datacontext = "[CharacterListItem.GetCharacter]"

		enabled = "[CharacterListItem.IsSelectable]"
		tooltip = "[CharacterListItem.GetUnselectableReason]"

		text_single = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(CharacterListItem.IsSelectable)]"
			raw_text = "Cannot select, see tooltip."
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			onclick = "[CharacterListItem.OnClick('character')]"
			onclick = "[Clear('landless_rulers')]"

			blockoverride "text" {
				raw_text = "lobby_landless_ruler_name"
			}
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			onclick = "[Clear('landless_rulers')]"
			onclick = "[CharacterListItem.OnClick('character')]"
			blockoverride "pre" {
				text_single = {
					raw_text = "lobby_landless_domicile_followers"
				}
				comma = {}
			}
			blockoverride "text" {
				raw_text = "lobby_landless_domicile_location"
			}
		}

		block "widget" {}
	}
}
