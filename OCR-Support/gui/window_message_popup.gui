window = {
	name = "window_message_popup"
	using = base_ocr_window
	layer = top

	state = {
		name = _show
		using = Animation_FadeIn_Quick
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	window_ocr = {
		datacontext = "[MessagePopup.GetMessage]"
		blockoverride "ocr_header" {
			button_text = {
				layoutpolicy_horizontal = expanding
				onclick = "[ToggleGameViewData('message_settings', PlayerMessageItem.GetType)]"
				onclick = "[MessagePopup.Close]"
				blockoverride "pre" {
					text_single = {
						raw_text = "MESSAGE_SETTINGS_WINDOW_APPEARANCE_POPUP"
					}
					text_single = {
						raw_text = ","
					}
				}
				blockoverride "text" {
					raw_text = "[PlayerMessageItem.GetTitle]."
				}
				blockoverride "extra" {
					text_single = {
						raw_text = "MESSAGE_SETTINGS_WINDOW_SHORTCUT_TT"
					}
				}
				blockoverride "dot" {}
			}

			button = {
				onclick = "[MessagePopup.Close]"
				using = close_window_ocr
			}
		}

		blockoverride "ocr_content" {
			vbox = {
				layoutpolicy_horizontal = expanding

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical
					layoutpolicy_horizontal = expanding

					text_multi_wide = {
						name = "text"
						text = "[PlayerMessageItem.GetDescription]"
					}

					text_single = {
						name = "date"
						text = "[PlayerMessageItem.GetArrivalDate.GetStringLong]"
					}

					flowcontainer = {
	          ignoreinvisible = yes
	          visible = "[PlayerMessageItem.HasLeftIcon]"

	          spacing = 3
	          button_text = {
	            blockoverride "text" {
	              raw_text = "Select [PlayerMessageItem.GetLeftCharacter.GetFirstName]."
	            }
	            using = char_click
	            datacontext = "[PlayerMessageItem.GetLeftCharacter]"
	            visible = "[And(Character.IsValid, Not(Character.IsLocalPlayer))]"
	            onclick = "[MessagePopup.Close]"
	          }

	          button_text = {
	            datacontext = "[PlayerMessageItem.GetLeftTitle]"
	            blockoverride "text" {
	              raw_text = "Select [PlayerMessageItem.GetLeftTitle.GetNameNoTooltip]."
	            }
	            using = title_click
	            visible = "[And(Title.IsValid, GreaterThanOrEqualTo_int32(Title.GetTierFrame, '(int32)3'))]"
	            onclick = "[MessagePopup.Close]"
	          }

	          button_text = {
	            datacontext = "[PlayerMessageItem.GetLeftTitle]"
	            blockoverride "text" {
	              raw_text = "Go to [PlayerMessageItem.GetLeftTitle.GetNameNoTooltip]."
	            }
	            using = prov_click
	            visible = "[And(Title.IsValid, LessThan_int32(Title.GetTierFrame, '(int32)3'))]"
	            onclick = "[MessagePopup.Close]"
	          }

	          button_text = {
	            datacontext = "[PlayerMessageItem.GetLeftArtifact]"
	            blockoverride "text" {
	              raw_text = "[Artifact.GetName]."
	              alwaystransparent = yes
	            }
	            visible = "[Artifact.IsValid]"
	            onclick = "[OpenGameViewData('artifact_details', Artifact.Self)]"
	          }
	        }

	        flowcontainer = {
	          ignoreinvisible = yes
	          visible = "[PlayerMessageItem.HasRightIcon]"

	          spacing = 3
	          button_text = {
	            blockoverride "text" {
	              raw_text = "Select [PlayerMessageItem.GetRightCharacter.GetFirstName]."
	            }
	            using = char_click
	            onclick = "[MessagePopup.Close]"
	            datacontext = "[PlayerMessageItem.GetRightCharacter]"
	            visible = "[And(Character.IsValid, Not(Character.IsLocalPlayer))]"
	          }

	          button_text = {
	            datacontext = "[PlayerMessageItem.GetRightTitle]"
	            blockoverride "text" {
	              raw_text = "Select [PlayerMessageItem.GetRightTitle.GetNameNoTooltip]."
	            }
	            using = title_click
	            onclick = "[MessagePopup.Close]"
	            visible = "[And(Title.IsValid, GreaterThanOrEqualTo_int32(Title.GetTierFrame, '(int32)3'))]"
	          }

	          button_text = {
	            datacontext = "[PlayerMessageItem.GetRightTitle]"
	            blockoverride "text" {
	              raw_text = "Go to [PlayerMessageItem.GetRightTitle.GetNameNoTooltip]."
	            }
	            using = prov_click
	            onclick = "[MessagePopup.Close]"
	            visible = "[And(Title.IsValid, LessThan_int32(Title.GetTierFrame, '(int32)3'))]"
	          }

	          text_single = {
	            datacontext = "[PlayerMessageItem.GetRightArtifact]"
	            visible = "[Artifact.IsValid]"
	            raw_text = "[Artifact.GetName]."
	            #TODO open artifact view
	          }
	        }
				}
			}
		}
		blockoverride "ocr_footer" {
			button_primary_text = {
				name = "apply_button"
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					text = "CONFIRM"
				}
				onclick = "[MessagePopup.Close]"
			}
		}
	}

	window_message_popup_old = {
		using = vanilla
	}
}

types VANILLA {
	type window_message_popup_old = window {
		parentanchor = hcenter|top
		position = { 0 200 }
		minimumsize = { 508 420 }
		layer = middle
		allow_outside = yes

		using = Window_Movable
		using = Window_Background
		using = Window_Decoration_Spike

		vbox = {
			datacontext = "[MessagePopup.GetMessage]"

			using = Window_Margins

			header_pattern = {
				layoutpolicy_horizontal = expanding

				hbox = {
					icon = {
						name = "message_type"
						size = { 48 48 }
						texture = "[PlayerMessageItem.GetType.GetIcon]"
						tooltip = "[PlayerMessageItem.GetTooltip]"
						using = tooltip_ws
					}
					expand = {}
				}

				blockoverride "header_text"
				{
					text = "[PlayerMessageItem.GetTitle]"
				}

				blockoverride "extra_buttons"
				{
					button_menu = {
						onclick = "[ToggleGameViewData('message_settings', PlayerMessageItem.GetType)]"
						tooltip = "MESSAGE_SETTINGS_WINDOW_SHORTCUT_TT"
						using = tooltip_se
					}
				}

				blockoverride "button_close"
				{
					onclick = "[MessagePopup.Close]"
				}
			}
			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				text_single = {
					visible = no
					name = "date"
					text = "[PlayerMessageItem.GetDate.GetStringShortNoYear]"
					align = nobaseline
				}

				hbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					vbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						vbox = {
							hbox = {
								portrait_head_small = {
									name = "portrait_left"
									datacontext = "[PlayerMessageItem.GetLeftCharacter]"
									visible = "[Character.IsValid]"
								}

								coa_title_medium = {
									name = "title_left"
									datacontext = "[PlayerMessageItem.GetLeftTitle]"
									visible = "[Title.IsValid]"
								}

								icon_artifact = {
									name = "artifact_left"
									datacontext = "[PlayerMessageItem.GetLeftArtifact]"
									visible = "[Artifact.IsValid]"
								}

								portrait_head_small = {
									name = "portrait_right"
									datacontext = "[PlayerMessageItem.GetRightCharacter]"
									visible = "[Character.IsValid]"
								}

								coa_title_medium = {
									name = "title_right"
									datacontext = "[PlayerMessageItem.GetRightTitle]"
									visible = "[Title.IsValid]"
								}

								icon_artifact = {
									name = "artifact_right"
									datacontext = "[PlayerMessageItem.GetRightArtifact]"
									visible = "[Artifact.IsValid]"
								}
							}
						}
						vbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							text_single = {
								name = "date"
								text = "[PlayerMessageItem.GetArrivalDate.GetStringLong]"
								default_format = "#weak"
								align = nobaseline

								margin = { 20 0 }
								layoutpolicy_horizontal = expanding
								expand = {}
							}

							text_multi = {
								name = "text"
								size = { 0 164 }

								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								margin = { 20 10 }
								text = "[PlayerMessageItem.GetDescription]"
								elide = right

								background = {
									margin = { -5 0 }
									using = Background_Area
								}
							}
						}
						expand = {}
					}
				}

				vbox = {
					margin = { 0 10 }
					button_primary = {
						name = "apply_button"
						size = { 155 33 }

						text = "CONFIRM"
						onclick = "[MessagePopup.Close]"
						tooltip = "MESSAGE_SETTINGS_WINDOW_CLOSE_POPUP"
						using = tooltip_ne
					}
				}
			}
		}
	}
}
