types OCR {

  type hbox_personality_traits = hbox {
    spacing = 3
    datamodel = "[Character.GetTraitIndices]"

    item = {
      text_single = {
        datacontext = "[GetTraitForIndex(int32.GetInt)]"
        visible = "[Trait.IsPersonality]"
        raw_text = "[Trait.GetName( GetNullCharacter )],"
      }
    }
  }

  type hbox_other_traits = hbox {

    text_single = {
      raw_text = "[CountItems] traits"

      hbox = {
        name = "items"
        datamodel = "[Character.GetTraitIndices]"
        item = {
          hbox = {
            datacontext = "[GetTraitForIndex(int32.GetInt)]"
            visible = "[Not(Trait.IsPersonality)]"
          }
        }
      }
    }

    tooltipwidget = {
      container = {
        using = DefaultTooltipBackground
        flowcontainer = {
          ignoreinvisible = yes
          direction = vertical
          margin = { 10 10 }
          datamodel = "[Character.GetTraitIndices]"

          item = {
            text_single = {
              datacontext = "[GetTraitForIndex(int32.GetInt)]"
              visible = "[Not(Trait.IsPersonality)]"
              raw_text = "[Trait.GetName( GetNullCharacter )],"
            }
          }
        }
      }
    }
  }

  type text_health = text_single {
    raw_text = "[Character.Custom('character_health')] health."
  	tooltip = "[Character.GetHealthInfo]"
  }

  type text_distance_capital = text_single {
    visible = "[Not(ObjectsEqual(MyCapital, Province.Self))]"
    raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)]."
  }

  type text_multi_wide_hbox = hbox {
    layoutpolicy_horizontal = expanding
    text_multi_wide = {
      block "wtext" {}
    }
    expand = {}
  }

	type button_decision_entry_text = button_text {
		tooltipwidget = {
			decision_tooltip = {}
		}
		blockoverride "extra" {
			text_single = {
				visible = "[Decision.IsImportantForPlayer]"
				raw_text = "will notify."
			}
		}
		tooltip_visible = "[Not(Decision.IsPossibleForPlayer)]"
	    blockoverride "text" {
	        raw_text = "[Decision.GetTitleForPlayer]."
	    }
		blockoverride "disabled" {
			visible = "[Not(Decision.IsPossibleForPlayer)]"
		}
	}

  type button_decision_entry_text_cached = button_text {
		tooltipwidget = {
			decision_tooltip = {}
		}
		blockoverride "extra" {
			text_single = {
				visible = "[Decision.IsImportantForPlayer]"
				raw_text = "will notify."
			}
		}
		tooltip_visible = "[Not(DecisionsViewItem.IsPossibleForPlayer)]"
    blockoverride "text" {
        raw_text = "[Decision.GetTitleForPlayer]."
    }
		blockoverride "disabled" {
			visible = "[Not(DecisionsViewItem.IsPossibleForPlayer)]"
		}
	}

	type button_court_ocr = button_text {
		blockoverride "text" {
			raw_text = "[Decision.GetTitleForPlayer]."
		}

		blockoverride "disabled" {
			visible = "[Not(Decision.IsPossibleForPlayer)]"
		}
	}

	type contract_item_ocr = vbox {
		layoutpolicy_horizontal = expanding

		button_text = {
			layoutpolicy_horizontal = expanding
			onclick = "[ToggleGameViewData('task_contract', TaskContract.Self )]"
			shortcuts_list = {
				blockoverride "click" {
					onclick = "[ToggleGameViewData('task_contract', TaskContract.Self )]"
				}
			}

			blockoverride "extra" {
				text_single = {
					raw_text = "[IndexNumber],"
				}
				text_single = {
					raw_text = "[TaskContract.GetType.GetName],"
				}

				text_single = {
					raw_text = "Tier [AddTextIf(TaskContract.IsEasy, 'one')][AddTextIf(TaskContract.IsMedium, 'two')][AddTextIf(TaskContract.IsHard, 'three')]"
				}

				text_single = {
					visible = "[TaskContract.IsCriminal]"
					raw_text = "criminal"
				}

				text_single = {
					raw_text = "contract,"
				}

				text_single = {
					visible = "[ObjectsEqual(MyCapital, TaskContract.GetLocation)]"
					raw_text = "at your [GetPlayer.GetDomicile.GetType.GetName]"
				}

				text_single = {
					visible = "[Not(ObjectsEqual(MyCapital, TaskContract.GetLocation))]"
					raw_text = "[DistanceTo(MyCapital, TaskContract.GetLocation)|0] [DaysTo(MyCapital, TaskContract.GetLocation)] [Direction(MyCapital, TaskContract.GetLocation)]."
				}
			}
		}

		# Contractor
		button_text = {
			layoutpolicy_horizontal = expanding
			datacontext = "[TaskContract.GetEmployer]"
			visible = "[Character.IsValid]"
			using = char_click
			blockoverride "text" {
				raw_text = "Contractor:"
			}
			blockoverride "extra" {
				text_single = {
					raw_text = "[Character.GetFirstNameNoTooltip] of"
				}
				text_single = {
					raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip],"
				}
				text_single = {
					raw_text = "opinion [Character.GetOpinionOf( GetPlayer )|=],"
					tooltip = "[Character.GetOpinionBreakdownText( GetPlayer )]"
				}
				text_single = {
					raw_text = "[Character.GetCulture.GetNameNoTooltip],"
				}
				text_single = {
					raw_text = "[Character.GetFaith.GetAdjectiveNoTooltip]."
				}
			}
		}

		# no contractor
		text_single = {
			layoutpolicy_horizontal = expanding
			datacontext = "[TaskContract.GetEmployer]"
			visible = "[Not(Character.IsValid)]"
			raw_text = "No contractor."
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			text_multi_wide = {
				text = "[TaskContract.GetTaskContractRequest]"
			}

			expand = {}
		}

		expand = {}
	}

  type button_county_ocr = button_text {
    block "datacontext" {
      datacontext = "[Scope.GetLandedTitle.GetProvince]"
      datacontext = "[Scope.Title]"
      datacontext = "[Scope.Title.GetCountyData]"
    }
    onclick = "[OpenGameViewData('holding_view', Scope.GetLandedTitle.GetProvince.Self)]"
    onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetLandedTitle.GetID)]"

    blockoverride "pre" {
      text_single = {
        raw_text = "[Scope.Title.GetNameNoTierNoTooltip],"
      }

      text_single = {
        block "faith"{
          visible = no
        }
        raw_text = "[County.GetFaith.GetNameNoTooltip],"
      }

      text_single = {
        block "culture"{
          visible = no
        }
        raw_text = "[County.GetCulture.GetNameNoTooltip],"
      }

      text_single = {
        visible = "[Not(ObjectsEqual(Province.Self, MyCapital))]"
        datacontext = "[Scope.Title.GetProvince]"
        raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)]."
      }

      text_single = {
        raw_text = "in"
      }

      text_single = {
        block "holder" {
          visible = no
        }
        raw_text = "[Scope.Title.GetHolder.GetPrimaryTitle.GetNameNoTierNoTooltip],"
      }

      text_single = {
        visible = "[Not(Scope.Title.GetHolder.GetTopLiege.IsLocalPlayer)]"
        raw_text = "[Scope.Title.GetHolder.GetTopLiege.GetPrimaryTitle.GetNameNoTierNoTooltip]."
      }
      text_single = {
        visible = "[Scope.Title.GetHolder.GetTopLiege.IsLocalPlayer]"
        raw_text = "your realm."
      }
    }
  }
}
