types ProgressBars
{

	type vassal_progressbars_ocr = hbox {
		spacing = 3


		hbox = {
			spacing = 3
			text_single = {
				raw_text = "Taxes:"
			}

			text_single = {
				raw_text = "gold"
			}

			text_single = {
				block "tax_value"
				{
					text = "[MyRealmWindowVassalItem.GetCachedTax|=1]"
				}
			}

			tooltipwidget = {
				my_realm_window_contribution_tooltip = {
					block "tax_breakdown"
					{
						datacontext = "[MyRealmWindowVassalItem.GetTaxBreakdown]"

					}
					blockoverride "levy_info_visible" { visible = no }
					blockoverride "contribution_tooltip_header"
					{
						text = "MRW_TT_TAXES_TO_ME"
					}

					blockoverride "levy_info"
					{
						text_single = {
							multiline = yes
							maximumsize = { 250 -1 }
							text = "[MyRealmWindowVassalItem.GetLevyTooltip]"
						}
					}
				}
			}
			using = tooltip_ws
		}

		comma = {}

		hbox = {
			spacing = 3

			text_single = {
				raw_text = "levies"
			}

			text_single = {
				block "levy_value"
				{
					text =  "[MyRealmWindowVassalItem.GetCachedLeviesFormatted]"
				}
			}

			tooltipwidget = {
				my_realm_window_contribution_tooltip = {
					block "levy_breakdown"
					{
						datacontext = "[MyRealmWindowVassalItem.GetLeviesBreakdown]"
					}
					blockoverride "tax_info_visible" { visible = no }
					blockoverride "contribution_tooltip_header"
					{
						text = "MRW_TT_LEVIES_TO_ME"
					}
					blockoverride "tax_info"
					{
						text_single = {
							multiline = yes
							maximumsize = { 250 -1 }
							text = "[MyRealmWindowVassalItem.GetTaxTooltip]"
						}
					}
				}
			}
			using = tooltip_ws
		}

		dot_l = {}
	}

	type hbox_complex_bar_progress_next_ocr = vbox {
		layoutpolicy_horizontal = expanding

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetNextWidth]"
			visible = "[GreaterThanOrEqualTo_CFixedPoint( ComplexBar.GetNeutralValue, ComplexBar.GetNextValue )]"
			allow_outside = yes

			block "next" {
				background = {
					visible = "[ComplexBar.IsIncreasing]"


					block "texture_increase" {
						block "texture_next" {
							texture = "gfx/interface/progressbars/progress_green.dds"

						}
					}
				}

				background = {
					visible = "[ComplexBar.IsDecreasing]"
					spriteType = Corneredstretched
					spriteborder = { 6 6 }

					block "texture_decrease" {
						block "texture_next" {
							texture = "gfx/interface/progressbars/progress_red.dds"
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetFilledWidth]"
			allow_outside = yes

			block "filled" {
				background = {
					spriteType = Corneredstretched
					spriteborder = { 6 6 }

					block "texture_filled" {
						texture = "gfx/interface/progressbars/progress_standard.dds"
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetNextWidth]"
			visible = "[GreaterThan_CFixedPoint( ComplexBar.GetNextValue, ComplexBar.GetNeutralValue )]"
			allow_outside = yes

			block "next" {
				background = {
					spriteType = Corneredstretched
					spriteborder = { 6 6 }

					visible = "[ComplexBar.IsIncreasing]"

					block "texture_increase" {
						block "texture_next" {
							texture = "gfx/interface/progressbars/progress_green.dds"
						}
					}
				}

				background = {
					visible = "[ComplexBar.IsDecreasing]"

					block "texture_decrease" {
						block "texture_next" {
							texture = "gfx/interface/progressbars/progress_red.dds"
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetRightEmptyWidth]"
			allow_outside = yes

			block "empty" {
				background = {
					block "texture_empty" {
						texture = "gfx/interface/progressbars/progress_black.dds"
					}
				}
			}
		}
	}

	# first shows description of the active/selected tier
	# then the list of all tiers
	# overried marker_text and marker_tooltip, use tier_button to select one
	type hbox_complex_bar_levels_ocr = vbox {
		allow_outside = yes
		datamodel = "[ComplexBar.GetItems]"
		layoutpolicy_horizontal = expanding

		# this should be the first active
		flowcontainer = {
			layoutpolicy_horizontal = expanding
			datamodel = "[ComplexBar.GetItems]"
			direction = vertical
			ignoreinvisible = yes

			item = {
				flowcontainer = {
					allow_outside = yes
					ignoreinvisible = yes
					container = {
						block "active_only" {
							visible = no
						}
						block "marker" {}
					}
				}
			}
		}

		hbox = {
	    layoutpolicy_horizontal = expanding
			block "track_name" {}
			spacing = 3

			# tiers with tooltip
			text_single = {
				layoutpolicy_horizontal = expanding
				block "tiers" {
					raw_text = "[Subtract_int32(GetDataModelSize(ComplexBar.GetItems), '(int32)1')] tiers, view tooltip."
				}

			}
			tooltipwidget = {
				widget = {
					using = DefaultTooltipBackground
					alwaystransparent = no

					flowcontainer = {
						datamodel = "[ComplexBar.GetItems]"
						direction = vertical
						ignoreinvisible = yes
						resizeparent = yes
						margin = { 20 15 }
						margin_top = 5

						text_single = {
							block "modifiers" {}
							raw_text = "See tooltips for each modifier."
						}

						item = {
							flowcontainer = {
								allow_outside = yes

								block "widget" {
									block "marker" {}
								}
							}
						}
					}
				}
			}

	    expand = { }
		}

		block "xp" {}

		# all of the tiers with descriptions
		flowcontainer = {
			block "show_all" {
				visible = no
			}
			datamodel = "[ComplexBar.GetItems]"
			direction = vertical
			ignoreinvisible = yes
			layoutpolicy_horizontal = expanding
			# resizeparent = yes
			margin = { 20 15 }
			margin_top = 5

			text_single = {
				block "modifiers" {}
				raw_text = "See tooltips for each modifier."
			}

			item = {
				flowcontainer = {
					allow_outside = yes

					block "widget" {
						block "marker" {}
					}
				}
			}
		}
	}

	type widget_level_marker_ocr = flowcontainer {
		ignoreinvisible = yes
		direction = vertical

		button_text = {
			block "tier_button" {}

			blockoverride "extra" {
				text_single = {
					block "active_only" {
						visible = no
					}
				}

				text_single = {
					raw_text = "Active"

					block "visible_active" {}
				}

				text_single = {
					raw_text = "Inactive"

					block "visible_inactive" {}
				}

				text_single = {

					# block "visible_inactive" {}

					block "marker_text" {}
				}

				text_single = {
					block "progress" {
						raw_text = "at [Divide_CFixedPoint(ComplexBarItem.GetValue, ComplexBar.GetMaxValue)|%0]."
					}
				}
			}
		}

		text_multi_wide = {
			block "marker_tooltip" {}
		}
	}
}

# # reference
# flowcontainer = {
# 	visible = no
# 	ignoreinvisible = yes
# 	direction = vertical
# 	layoutpolicy_horizontal = expanding
#
# 	datacontext = "[ActivityWindow.AccessSpecialTypeComplexBar( 'activity_special_type_progression' )]"
#
# 	text_single = {
# 		raw_text = "Neutral [ComplexBar.GetNeutralValue]"
# 	}
# 	text_single = {
# 		raw_text = "Min [ComplexBar.GetMinValue]"
# 	}
# 	text_single = {
# 		raw_text = "Filled [ComplexBar.GetFilledWidth]"
# 	}
# 	text_single = {
# 		raw_text = "Current filled [ComplexBar.GetCurrentFilledWidth]"
# 	}
# 	text_single = {
# 		raw_text = "Current left width [ComplexBar.GetCurrentLeftWidth]"
# 	}
# 	text_single = {
# 		raw_text = "Current right width [ComplexBar.GetCurrentRightWidth]"
# 	}
# 	text_single = {
# 		raw_text = "Max [ComplexBar.GetMaxValue]"
# 	}
# 	text_single = {
# 		raw_text = "Next [ComplexBar.GetNextValue]"
# 	}
# 	text_single = {
# 		raw_text = "next neutral left width [ComplexBar.GetNeutralMarkerLeftWidth]"
# 	}
# 	text_single = {
# 		raw_text = "next neutral right width [ComplexBar.GetNeutralMarkerRightWidth]"
# 	}
# 	text_single = {
# 		raw_text = "next left width [ComplexBar.GetNextMarkerLeftWidth]"
# 	}
# 	text_single = {
# 		raw_text = "next right width [ComplexBar.GetNextMarkerRightWidth]"
# 	}
# 	text_single = {
# 		visible = "[ComplexBar.IsDecreasing]"
# 		raw_text = "Decreasing"
# 	}
# 	text_single = {
# 		visible = "[ComplexBar.IsIncreasing]"
# 		raw_text = "Increasing"
# 	}
#
# 	datamodel = "[ComplexBar.GetItems]"
#
# 	item = {
# 		flowcontainer = {
# 			ignoreinvisible = yes
# 			spacing = 3
#
# 			text_single = {
# 				raw_text = "Level [IndexNumber],"
# 			}
#
# 			text_single = {
# 				raw_text = "Value [ComplexBarItem.GetValue],"
# 			}
#
# 			text_single = {
# 				raw_text = "Width [ComplexBarItem.GetWidth]"
# 			}
# 		}
# 	}
# }
