types ProgressBars
{
	# type progressbar_royal_court = progressbar {
	# 	min = 0
	# 	max = 100
	# 	value = 35
	# 	size = { 100% 100% }
	#
	# 	progresstexture = "gfx/interface/progressbars/progress_grandeur.dds"
	# 	noprogresstexture = "gfx/interface/progressbars/progress_black.dds"
	# 	spriteType = Corneredtiled
	# 	spriteborder = { 6 6 }
	#
	# 	# modify_texture = {
	# 	#	 name = "pattern"
	# 	#	 texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
	# 	#	 spriteType = corneredtiled
	# 	#	 blend_mode = alphamultiply
	# 	#	 alpha = 0.15
	# 	# }
	#
	# 	# block "grandeur_trend_arrows"
	# 	# {
	# 	#	 icon = {
	# 	#		 name = "trend_decrease_arrows"
	# 	#		 size = { 60 24 }
	# 	#		 texture = "gfx/interface/progressbars/progress_grandeur_arrows.dds"
	# 	#		 widgetanchor = right
	# 	#	 }
	# 	# }
	#
	# 	icon = {
	# 		name = "overlay"
	# 		texture = "gfx/interface/progressbars/progress_overlay.dds"
	# 		spriteType = Corneredstretched
	# 		spriteborder = { 2 2 }
	# 		size = { 100% 100% }
	# 	}
	# }
	#
	# type progressbar_standard = progressbar {
	# 	min = 0
	# 	max = 100
	# 	value = 35
	# 	size = { 50 20 }
	#
	# 	progresstexture = "gfx/interface/progressbars/progress_standard.dds"
	# 	noprogresstexture = "gfx/interface/progressbars/progress_red.dds"
	# 	spriteType = Corneredtiled
	# 	spriteborder = { 6 6 }
	#
	# 	icon = {
	# 		name = "overlay"
	# 		texture = "gfx/interface/progressbars/progress_overlay.dds"
	# 		spriteType = Corneredstretched
	# 		spriteborder = { 2 2 }
	# 		size = { 100% 100% }
	# 	}
	# }
	#
	# type progressbar_standard_transparent = progressbar {
	# 	min = 0
	# 	max = 100
	# 	value = 35
	# 	size = { 50 20}
	#
	# 	progresstexture = "gfx/interface/progressbars/progress_standard_transparent.dds"
	# 	noprogresstexture = "gfx/interface/progressbars/progress_red_transparent.dds"
	# 	spriteType = Corneredtiled
	# 	spriteborder = { 6 6 }
	#
	# 	icon = {
	# 		name = "overlay"
	# 		texture = "gfx/interface/progressbars/progress_overlay.dds"
	# 		spriteType = Corneredstretched
	# 		spriteborder = { 2 2 }
	# 		size = { 100% 100% }
	# 	}
	# }
	#
	# type progressbar_red = progressbar {
	# 	min = 0
	# 	max = 100
	# 	value = 35
	# 	size = { 50 20}
	#
	# 	progresstexture = "gfx/interface/progressbars/progress_red.dds"
	# 	noprogresstexture = "gfx/interface/progressbars/progress_black.dds"
	# 	spriteType = Corneredtiled
	# 	spriteborder = { 6 6 }
	#
	# 	icon = {
	# 		name = "overlay"
	# 		texture = "gfx/interface/progressbars/progress_overlay.dds"
	# 		spriteType = Corneredstretched
	# 		spriteborder = { 2 2 }
	# 		size = { 100% 100% }
	# 	}
	# }
	#
	# type progressbar_green = progressbar {
	# 	min = 0
	# 	max = 100
	# 	value = 35
	# 	size = { 50 20 }
	#
	# 	progresstexture = "gfx/interface/progressbars/progress_green.dds"
	# 	noprogresstexture = "gfx/interface/progressbars/progress_black.dds"
	# 	spriteType = Corneredtiled
	# 	spriteborder = { 6 6 }
	#
	# 	icon = {
	# 		name = "overlay"
	# 		texture = "gfx/interface/progressbars/progress_overlay.dds"
	# 		spriteType = Corneredstretched
	# 		spriteborder = { 2 2 }
	# 		size = { 100% 100% }
	# 	}
	# }
	#
	# type progressbar_frozen = progressbar {
	# 	min = 0
	# 	max = 100
	# 	value = 35
	# 	size = { 50 20}
	#
	# 	progresstexture = "gfx/interface/progressbars/progress_frozen.dds"
	# 	noprogresstexture = "gfx/interface/progressbars/progress_black.dds"
	# 	spriteType = Corneredtiled
	# 	spriteborder = { 6 6 }
	#
	# 	icon = {
	# 		name = "overlay"
	# 		texture = "gfx/interface/progressbars/progress_overlay.dds"
	# 		spriteType = Corneredstretched
	# 		spriteborder = { 2 2 }
	# 		size = { 100% 100% }
	# 	}
	# }
	#
	# type progressbar_frozen_transparent = progressbar {
	# 	min = 0
	# 	max = 100
	# 	value = 35
	# 	size = { 50 20}
	#
	# 	progresstexture = "gfx/interface/progressbars/progress_frozen.dds"
	# 	noprogresstexture = "gfx/interface/progressbars/progress_black.dds"
	# 	spriteType = Corneredtiled
	# 	spriteborder = { 6 6 }
	#
	# 	icon = {
	# 		name = "overlay"
	# 		texture = "gfx/interface/progressbars/progress_overlay.dds"
	# 		spriteType = Corneredstretched
	# 		spriteborder = { 2 2 }
	# 		size = { 100% 100% }
	# 	}
	# }
	#
	# type progress_threshold = icon {
	# 	alwaystransparent = yes
	# 	texture = "gfx/interface/window_factions/faction_progress_threshold.dds"
	# }
	#
	# # Set the datamodel to something using function as GetSegmentedProgressChanceBar( Max, NumFrames, CurrentProgress, ChangeTopProgress )
	# # eg: "[GetSegmentedProgressChanceBar( GetDefine( 'NScheme', 'STEPS_TO_PROGRESS' ), GetDefine( 'NScheme', 'PROGRESS_FRAMES' ), Scheme.GetProgress, Scheme.GetProgressChance )]"
	# type progressbar_segmented_chance = flowcontainer
	# {
	# 	spacing = 2
	#
	# 	item = {
	# 		icon = {
	# 			texture = "gfx/interface/progressbars/progress_scheme.dds"
	# 			size = { 25 25 }
	# 			framesize = { 45 45 }
	# 			frame = "[int32.GetInt]"
	# 		}
	# 	}
	# }
	#
	# # Set the datamodel to something using function as GetSegmentedProgressTargetBar( Max, Current, Target )
	# # eg: "[GetSegmentedProgressTargetBar( '(int32)5', Object.GetProgress, Object.GetTarget )]"
	# type progressbar_segmented_target = flowcontainer
	# {
	# 	spacing = 2
	#
	# 	item = {
	# 		icon = {
	# 			texture = "gfx/interface/progressbars/progress_magnificence.dds"
	# 			size = { 25 25 }
	# 			framesize = { 45 45 }
	# 			frame = "[int32.GetInt]"
	# 		}
	# 	}
	# }

	# type hbox_complex_bar_progress = hbox {
	# 	allow_outside = yes
	#
	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		layoutpolicy_vertical = expanding
	# 		layoutstretchfactor_horizontal = "[ComplexBar.GetCurrentLeftWidth]"
	# 		allow_outside = yes
	#
	# 		block "empty" {
	# 			background = {
	# 				block "texture_empty" {
	# 					texture = "gfx/interface/progressbars/progress_black.dds"
	# 				}
	# 			}
	# 		}
	# 	}
	#
	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		layoutpolicy_vertical = expanding
	# 		layoutstretchfactor_horizontal = "[ComplexBar.GetCurrentFilledWidth]"
	# 		allow_outside = yes
	#
	# 		block "filled" {
	# 			background = {
	# 				block "texture_filled" {
	# 					texture = "gfx/interface/progressbars/progress_standard.dds"
	# 				}
	# 			}
	# 		}
	# 	}
	#
	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		layoutpolicy_vertical = expanding
	# 		layoutstretchfactor_horizontal = "[ComplexBar.GetCurrentRightWidth]"
	# 		allow_outside = yes
	#
	# 		block "empty" {
	# 			background = {
	# 				block "texture_empty" {
	# 					texture = "gfx/interface/progressbars/progress_black.dds"
	# 				}
	# 			}
	# 		}
	# 	}
	# }
	#
	type hbox_complex_bar_progress_next_ocr = vbox {
		layoutpolicy_horizontal = expanding

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetNextWidth]"
			visible = "[GreaterThanOrEqualTo_CFixedPoint( ComplexBar.GetNeutralValue, ComplexBar.GetNextValue )]"
			allow_outside = yes

			block "next" {
				background = {
					visible = "[ComplexBar.IsIncreasing]"


					block "texture_increase" {
						block "texture_next" {
							texture = "gfx/interface/progressbars/progress_green.dds"

						}
					}
				}

				background = {
					visible = "[ComplexBar.IsDecreasing]"
					spriteType = Corneredstretched
					spriteborder = { 6 6 }

					block "texture_decrease" {
						block "texture_next" {
							texture = "gfx/interface/progressbars/progress_red.dds"
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetFilledWidth]"
			allow_outside = yes

			block "filled" {
				background = {
					spriteType = Corneredstretched
					spriteborder = { 6 6 }

					block "texture_filled" {
						texture = "gfx/interface/progressbars/progress_standard.dds"
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetNextWidth]"
			visible = "[GreaterThan_CFixedPoint( ComplexBar.GetNextValue, ComplexBar.GetNeutralValue )]"
			allow_outside = yes

			block "next" {
				background = {
					spriteType = Corneredstretched
					spriteborder = { 6 6 }

					visible = "[ComplexBar.IsIncreasing]"

					block "texture_increase" {
						block "texture_next" {
							texture = "gfx/interface/progressbars/progress_green.dds"
						}
					}
				}

				background = {
					visible = "[ComplexBar.IsDecreasing]"

					block "texture_decrease" {
						block "texture_next" {
							texture = "gfx/interface/progressbars/progress_red.dds"
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetRightEmptyWidth]"
			allow_outside = yes

			block "empty" {
				background = {
					block "texture_empty" {
						texture = "gfx/interface/progressbars/progress_black.dds"
					}
				}
			}
		}
	}
	#
	# type hbox_complex_bar_neutral_marker = hbox {
	# 	allow_outside = yes
	#
	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		layoutpolicy_vertical = expanding
	# 		layoutstretchfactor_horizontal = "[ComplexBar.GetNeutralMarkerLeftWidth]"
	# 	}
	#
	# 	hbox = {
	# 		allow_outside = yes
	#
	# 		widget = {
	# 			allow_outside = yes
	#
	# 			block "marker" {
	# 				debug_square = {
	# 					size = { 20 20 }
	# 					parentanchor = center
	# 					widgetanchor = center
	# 				}
	# 			}
	# 		}
	# 	}
	#
	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		layoutpolicy_vertical = expanding
	# 		layoutstretchfactor_horizontal = "[ComplexBar.GetNeutralMarkerRightWidth]"
	# 	}
	# }
	#
	# type hbox_complex_bar_current_marker = hbox {
	# 	allow_outside = yes
	#
	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		layoutpolicy_vertical = expanding
	# 		layoutstretchfactor_horizontal = "[ComplexBar.GetCurrentLeftWidth]"
	# 	}
	#
	# 	hbox = {
	# 		visible = "[GreaterThanOrEqualTo_CFixedPoint( ComplexBar.GetNeutralValue, ComplexBar.GetCurrentValue )]"
	# 		allow_outside = yes
	#
	# 		widget = {
	# 			allow_outside = yes
	#
	# 			block "marker" {
	# 				debug_square = {
	# 					size = { 20 20 }
	# 					parentanchor = center
	# 					widgetanchor = center
	# 				}
	# 			}
	# 		}
	# 	}
	#
	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		layoutpolicy_vertical = expanding
	# 		layoutstretchfactor_horizontal = "[ComplexBar.GetCurrentFilledWidth]"
	# 	}
	#
	# 	hbox = {
	# 		visible = "[GreaterThan_CFixedPoint( ComplexBar.GetCurrentValue, ComplexBar.GetNeutralValue )]"
	# 		allow_outside = yes
	#
	# 		widget = {
	# 			allow_outside = yes
	#
	# 			block "marker" {
	# 				debug_square = {
	# 					size = { 20 20 }
	# 					parentanchor = center
	# 					widgetanchor = center
	# 				}
	# 			}
	# 		}
	# 	}
	#
	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		layoutpolicy_vertical = expanding
	# 		layoutstretchfactor_horizontal = "[ComplexBar.GetCurrentRightWidth]"
	# 	}
	# }
	#
	# type hbox_complex_bar_next_marker = hbox {
	# 	allow_outside = yes
	#
	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		layoutpolicy_vertical = expanding
	# 		layoutstretchfactor_horizontal = "[ComplexBar.GetNextMarkerLeftWidth]"
	# 	}
	#
	# 	hbox = {
	# 		allow_outside = yes
	# 		visible = "[ComplexBar.IsDecreasing]"
	#
	# 		widget = {
	# 			allow_outside = yes
	#
	# 			block "decreasing_marker" {
	# 				block "marker" {
	# 					debug_square = {
	# 						size = { 20 20 }
	# 						parentanchor = center
	# 						widgetanchor = center
	# 					}
	# 				}
	# 			}
	# 		}
	# 	}
	#
	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		layoutpolicy_vertical = expanding
	# 		layoutstretchfactor_horizontal = "[ComplexBar.GetNextWidth]"
	# 	}
	#
	# 	hbox = {
	# 		allow_outside = yes
	# 		visible = "[ComplexBar.IsIncreasing]"
	#
	# 		widget = {
	# 			allow_outside = yes
	#
	# 			block "increasing_marker" {
	# 				block "marker" {
	# 					debug_square = {
	# 						size = { 20 20 }
	# 						parentanchor = center
	# 						widgetanchor = center
	# 					}
	# 				}
	# 			}
	# 		}
	# 	}
	#
	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		layoutpolicy_vertical = expanding
	# 		layoutstretchfactor_horizontal = "[ComplexBar.GetNextMarkerRightWidth]"
	# 	}
	# }

	type hbox_complex_bar_levels_ocr = vbox {
		allow_outside = yes
		datamodel = "[ComplexBar.GetItems]"
		layoutpolicy_horizontal = expanding

		# this should be the first active
		flowcontainer = {
			layoutpolicy_horizontal = expanding
			datamodel = "[ComplexBar.GetItems]"
			direction = vertical
			ignoreinvisible = yes

			item = {
				flowcontainer = {
					allow_outside = yes
					ignoreinvisible = yes
					container = {
						block "active_only" {
							visible = no
						}
						block "marker" {}
					}
				}
			}
		}

		hbox = {
		    layoutpolicy_horizontal = expanding
			block "track_name" {}
			spacing = 3

			# tiers with tooltip
			text_single = {
				layoutpolicy_horizontal = expanding
				block "tiers" {
					raw_text = "[Subtract_int32(GetDataModelSize(ComplexBar.GetItems), '(int32)1')] tiers, view tooltip."
				}

			}
			tooltipwidget = {
				widget = {
					using = DefaultTooltipBackground
					alwaystransparent = no

					flowcontainer = {
						datamodel = "[ComplexBar.GetItems]"
						direction = vertical
						ignoreinvisible = yes
						resizeparent = yes
						margin = { 20 15 }
						margin_top = 5

						text_single = {
							block "modifiers" {}
							raw_text = "See tooltips for each modifier."
						}

						item = {
							flowcontainer = {
								allow_outside = yes

								block "widget" {
									block "marker" {}
								}
							}
						}
					}
				}
			}

		    expand = { }
		}

		block "xp" {}

		# all of the tiers with descriptions
		flowcontainer = {
			block "show_all" {
				visible = no
			}
			datamodel = "[ComplexBar.GetItems]"
			direction = vertical
			ignoreinvisible = yes
			# resizeparent = yes
			margin = { 20 15 }
			margin_top = 5

			text_single = {
				block "modifiers" {}
				raw_text = "See tooltips for each modifier."
			}

			item = {
				flowcontainer = {
					allow_outside = yes

					block "widget" {
						block "marker" {}
					}
				}
			}
		}
	}
	# # reference
	# flowcontainer = {
	# 	visible = no
	# 	ignoreinvisible = yes
	# 	direction = vertical
	# 	layoutpolicy_horizontal = expanding
	#
	# 	datacontext = "[ActivityWindow.AccessSpecialTypeComplexBar( 'activity_special_type_progression' )]"
	#
	# 	text_single = {
	# 		raw_text = "Neutral [ComplexBar.GetNeutralValue]"
	# 	}
	# 	text_single = {
	# 		raw_text = "Min [ComplexBar.GetMinValue]"
	# 	}
	# 	text_single = {
	# 		raw_text = "Filled [ComplexBar.GetFilledWidth]"
	# 	}
	# 	text_single = {
	# 		raw_text = "Current filled [ComplexBar.GetCurrentFilledWidth]"
	# 	}
	# 	text_single = {
	# 		raw_text = "Current left width [ComplexBar.GetCurrentLeftWidth]"
	# 	}
	# 	text_single = {
	# 		raw_text = "Current right width [ComplexBar.GetCurrentRightWidth]"
	# 	}
	# 	text_single = {
	# 		raw_text = "Max [ComplexBar.GetMaxValue]"
	# 	}
	# 	text_single = {
	# 		raw_text = "Next [ComplexBar.GetNextValue]"
	# 	}
	# 	text_single = {
	# 		raw_text = "next neutral left width [ComplexBar.GetNeutralMarkerLeftWidth]"
	# 	}
	# 	text_single = {
	# 		raw_text = "next neutral right width [ComplexBar.GetNeutralMarkerRightWidth]"
	# 	}
	# 	text_single = {
	# 		raw_text = "next left width [ComplexBar.GetNextMarkerLeftWidth]"
	# 	}
	# 	text_single = {
	# 		raw_text = "next right width [ComplexBar.GetNextMarkerRightWidth]"
	# 	}
	# 	text_single = {
	# 		visible = "[ComplexBar.IsDecreasing]"
	# 		raw_text = "Decreasing"
	# 	}
	# 	text_single = {
	# 		visible = "[ComplexBar.IsIncreasing]"
	# 		raw_text = "Increasing"
	# 	}
	#
	# 	datamodel = "[ComplexBar.GetItems]"
	#
	# 	item = {
	# 		flowcontainer = {
	# 			ignoreinvisible = yes
	# 			spacing = 3
	#
	# 			text_single = {
	# 				raw_text = "Level [IndexNumber],"
	# 			}
	#
	# 			text_single = {
	# 				raw_text = "Value [ComplexBarItem.GetValue],"
	# 			}
	#
	# 			text_single = {
	# 				raw_text = "Width [ComplexBarItem.GetWidth]"
	# 			}
	# 		}
	# 	}
	# }

	type widget_level_marker_ocr = flowcontainer {
		ignoreinvisible = yes
		direction = vertical

		flowcontainer = {
			ignoreinvisible = yes
			spacing = 3

			text_single = {
				block "active_only" {
					visible = no
				}
			}
			text_single = {
				raw_text = "Active"

				block "visible_active" {}
			}

			text_single = {
				raw_text = "Inactive"

				block "visible_inactive" {}
			}

			text_single = {

				# block "visible_inactive" {}

				block "marker_text" {}
			}

			text_single = {
				block "progress" {
					raw_text = "at [Divide_CFixedPoint(ComplexBarItem.GetValue, ComplexBar.GetMaxValue)|%0]."
				}
			}

			expand = { }
		}

		text_multi_wide = {
			block "marker_tooltip" {}
		}
	}
	#
	# type arrow_progressbar_icon = icon
	# {
	# 	texture = "gfx/interface/colors/white.dds"
	# 	shaderfile = "gfx/FX/pdxgui_repeat_texture.shader"
	# 	alpha = 0.7
	#
	# 	block "color" {}
	#
	# 	modify_texture = {
	# 		name = "arrows"
	# 		texture = "gfx/interface/window_combat/combat_advantage_progressbar.dds"
	# 		blend_mode = alphamultiply
	# 		spritetype = corneredtiled
	# 		texture_density = 2
	# 		spriteborder = { 0 5 }
	#
	# 		block "modify_texture" {}
	# 	}
	#
	# 	modify_texture = {
	# 		texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
	# 		blend_mode = alphamultiply
	# 		spritetype = corneredtiled
	# 		spriteborder_right = 6
	# 	}
	#
	# 	state = {
	# 		name = a
	# 		next = b
	# 		trigger_on_create = yes
	#
	# 		duration = 0
	#
	# 		modify_texture = {
	# 			name = "arrows"
	# 			translate_uv = { 0 0 }
	# 		}
	# 	}
	#
	# 	state = {
	# 		name = b
	# 		next = a
	# 		trigger_on_create = yes
	#
	# 		duration = 4
	#
	# 		modify_texture = {
	# 			name = "arrows"
	# 			block "animation_uv"
	# 			{
	# 				translate_uv = { -1 0 }
	# 			}
	# 		}
	# 	}
	# }
	#
	# type filled_line_progressbar_icon = icon
	# {
	# 	texture = "gfx/interface/colors/white.dds"
	# 	alpha = 0.7
	# 	block "color" {}
	# }
}

# template Progressbar_Changed_Animation
# {
# 	state = {
# 		name = progress_changed
# 		using = Animation_Curve_Default
# 		duration = 0.5
# 	}
# }
#
# template Progressbar_Changed_Animation_Curve
# {
# 	progress_change_to_duration_curve = { 0.17 0.67 0.83 0.67 }
#
# 	state = {
# 		name = progress_changed
# 		using = Animation_Curve_Default
# 		duration = 0.5
# 	}
# }
