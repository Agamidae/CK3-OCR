
template ocr_window {
  using = Window_Size_CharacterList
  alwaystransparent = no
  background = { using = Background_Area_Border_Solid }
  visible = "[Not(GetVariableSystem.Exists('ocr'))]"
}

template old_window {
  alwaystransparent = no
  parentanchor = top|right
  using = Window_Size_MainTab
  visible = "[GetVariableSystem.Exists('ocr')]"
}

template base_ocr_window {
  size = { 100% 100% }
  layer = windows_layer
  alwaystransparent = yes
}

template Window_Size_CharacterList_Small
{
  size = { 580 100% }
}

template Window_Position_CharacterList_Small
{
  parentanchor = center
  position = { 0 0 }
}

template old_margins
{
  margin_bottom = 10
  margin_top = 50
  margin_right = 13
}

# Standard margins for windows, to get inside the standard decoration gfx around the frame.
template Window_Margins
{
  margin_left = 40
  margin_right = 40
  margin_top = 18
  margin_bottom = 40
}


template Scrollbox_Margins
{
  margin_top = 20
  margin_bottom = 15
  margin_left = 15
  margin_right = 20
}

template Window_Size_CharacterList
{
  size = { 745 100% }
}

template ocr_size {
  using = Window_Size_CharacterList
}

template ocr_window_bg {
  block "ocr_size" {
    using = Window_Size_CharacterList
  }
  alwaystransparent = no
  background = { using = Background_Area_Border_Solid }
}

template ocr_margins
{
  margin = { 10 5 }
  # margin_top = 30 #TODO

  widget = {
    size = { 0 90 }
    using = ocr
  }

  vbox = {
    alpha = 0
    visible = no
    # visible = "[Is('toasted')]"
    # widget = {
      #     size = { 0 50 }
      # }
      text_single = {
        raw_text = "[Get('toast_1')]"
        max_width = 700
        fontsize_min = 14
      }
      text_multi = {
        using = wide
        autoresize = yes
        fontsize_min = 14
        raw_text = "[Get('toast_desc_1')]"
      }
      widget = {
        size = { 0 15 }
      }
      widget = {
        size = { 0 25 }
        visible = "[Is('toast_extras')]"
      }
      text_single = {
        raw_text = "Dismiss"
      }

      widget = {
        size = { 0 25 }
      }
    }
  }

  types WindowTypes
  {
    ## Regular header without picture

    type empty_screen = widget {
      using = base_ocr_window
    }
    type window_ocr = widget {
      using = ocr_window_bg # background and size
      block "show_window" {
        using = ocr
      }

      vbox = {
        layoutpolicy_horizontal = expanding
        layoutpolicy_vertical = expanding

        block "ocr_margins" {
          using = ocr_margins # 5 5 margins + empty space for popups
        }
        error_button = {
          layoutpolicy_horizontal = expanding
        }

        block "ocr_header" {}


        block "ocr_scrollbox" {
          scrollbox = {
            layoutpolicy_horizontal = expanding
            layoutpolicy_vertical = expanding

            blockoverride "scrollbox_content" {
              block "ocr_content" {}
            }
          }
        }

        block "ocr_footer" {}

        expand = { }
      }
    }

    type header_text = hbox {
      spacing = 3
      # dublicated because I didn't realize "pre" would also overwrite any button_text I put in here
      block "pre" {}
      block "pre_header" {}

      text_single = {
        block "header_text" {

        }
      }

      dot_l = {
        block "dot" {}
      }

      block "extra_header" {}

      block "extra" {}

      buttons_window_control = {
      }

      expand = { }
    }

    type header_standard = widget {
      name = "header"
      size = { 0 30 }

      icon = {
        name = "background"
        size = { 100% 100% }
        texture = "gfx/interface/component_tiles/header_full_window_background.dds"
        spriteType = Corneredtiled
        spriteborder = { 80 10 }
        texture_density = 2
        alpha = 0.9
      }

      icon = {
        name = "border"
        size = { 100% 100% }
        texture = "gfx/interface/component_tiles/header_full_window_border.dds"
        spriteType = Corneredtiled
        spriteborder = { 80 10 }
        texture_density = 2
        alpha = 0.6

        modify_texture = {
          texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
          blend_mode = alphamultiply
        }
      }

      icon = {
        name = "gradient"
        size = { 890 47 }
        texture = "gfx/interface/component_tiles/header_full_window_gradient.dds"
        parentanchor = hcenter|vcenter
      }

      icon = {
        name = "pattern"
        size = { 890 47 }
        texture = "gfx/interface/component_tiles/header_full_window_pattern.dds"
        parentanchor = hcenter|vcenter

        modify_texture = {
          texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
          blend_mode = alphamultiply
        }
      }

      buttons_window_control = {
        parentanchor = top|right
      }

      header_text = {
        name = "header_text"
        parentanchor = top
        position = { 5 5 }
      }
    }

    type header_pattern = widget {
      name = "header"
      size = { 100 30 }

      state = {
        name = "ocr"
        trigger_when = "[Isnt('ocr')]"
        size = { 100 30 }
      }
      state = {
        name = "vanilla"
        trigger_when = "[Is('ocr')]"
        size = { 100 56 }
      }


      background = {
        name = "header"
        texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
        spriteType = Corneredtiled
        texture_density = 2

        modify_texture = {
          name = "mask"
          texture = "gfx/interface/component_masks/mask_title_big_top.dds"
          spriteType = Corneredtiled
          spriteborder = { 160 0 }
          blend_mode = alphamultiply
          alpha = 0.5
        }

        modify_texture = {
          name = "overlay"
          texture = "gfx/interface/component_overlay/overlay_title_big_top.dds"
          spriteType = Corneredstretched
          spriteborder = { 0 0 }
          blend_mode = overlay
        }
      }


      flowcontainer = {
        position = { 5 5 }
        ignoreinvisible = yes
        alwaystransparent = yes
        block "pre" {}
        text_single = {
          name = "header_text"


          block "header_text" {
            text = "DEFAULT_TEXT"
          }

          block "size" {
            maximumsize = { 400 -1 }
          }

          # using = Font_Type_Flavor
          # using = Font_Size_Big
        }

        block "extra" { }
      }
      buttons_window_control = {
        parentanchor = top|right
      }

    }

    type header_pattern_interaction = widget {
      name = "header"
      size = { 100 35 }

      background = {
        name = "header"
        texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
        spriteType = Corneredtiled
        texture_density = 2

        modify_texture = {
          name = "mask"
          texture = "gfx/interface/component_masks/mask_title_big_top.dds"
          spriteType = Corneredtiled
          spriteborder = { 160 0 }
          blend_mode = alphamultiply
          alpha = 0.5
        }

        modify_texture = {
          name = "overlay"
          texture = "gfx/interface/component_overlay/overlay_title_big_top.dds"
          spriteType = Corneredstretched
          spriteborder = { 0 0 }
          blend_mode = overlay
        }
      }

      buttons_window_control = {
        parentanchor = top|right
      }

      header_text = {
        name = "header_text"
        parentanchor = top|hcenter
        position = { 0 5 }
      }
    }
  }

# This should be on top of everything
layer debug
{
    priority = 50
}

layer confirmation
{
    priority = 12
}

layer frontend
{
    priority = 11
}

layer tutorial
{
    priority = 10
}

layer top
{
    priority = 9
}

layer events
{
    priority = 8
}

layer middle
{
    priority = 7
}

layer royal_court
{
    priority = 6
}

layer hud_layer
{
    priority = 5
}

layer windows_layer_top
{
    priority = 4
}

layer windows_layer
{
    priority = 3
}

layer bottom
{
    priority = 2
}

layer bottom_bottom
{
    priority = 1
}
