######################################################
############## LIST TYPES AND TEMPLATES ##############
######################################################

# 01_ so agot can overwrite them

template character_age_or_death_text
{
	hbox = {

		spacing = 2

		block "character_age"
		{
			text_single = {
				raw_text = "[Character.GetAge]."
				align = left
			}
		}

		block "is_dead"
		{
			text_single = {
				name = "is_dead"
				visible = "[Character.IsDeadAndValid]"
				size = { 23 23 }
				raw_text = "Dead."
				tooltip = "CHARACTER_DEAD_TOOLTIP"
			}
		}
	}
}

types OCR {
	type widget_vassal_list_item_ocr = button {
		datacontext = "[CharacterListItem.GetCharacter]"
		size = { 200 190 }

		onclick = "[DefaultOnCharacterClick( Character.GetID )]"
		onclick = "[GetVariableSystem.Clear('expand_view')]"
		onrightclick = "[DefaultOnCharacterRightClick( Character.GetID )]"
		button_ignore = none

		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 0 0 }
			margin_left = 10
			margin_right = 15

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10

				background = {
					using = Background_Area
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_right = 10

					vbox = {
						layoutpolicy_horizontal = expanding
						# spacing = 3

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3


							block "pre_name" { }

							text_single = {
								raw_text = "VassalName"
							}

							text_single = {
								raw_text = "[Character.RealmSize] counties."
								tooltip = "REALM_WINDOW_SIZE_TT"
								visible = "[NotEqualTo_int32(Character.GetPrimaryTitle.GetTierFrame, '(int32)2')]" #nonbaron
							}

							text_single = {
								name = "character_relation"
								raw_text = "[Character.GetRelationToString(GetPlayer)]."
								tooltip = "EXTENDED_RELATIONS_TOOLTIP"
								max_width = 300
								visible = "[Character.GetLiege.IsLocalPlayer]"
							}

							# text_single = {
							# 	datacontext = "[Character.GetVassalContract]"
							# 	raw_text = "Not de-jure."
							# 	visible = "[Not( VassalContract.IsRightfulLiege )]"
							# 	tooltip = "MRW_TT_NOT_RIGHTFUL_LIEGE"
							# 	# align = left
							# }

							expand = { }
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						text_single = {
							raw_text = "[Character.GetOpinionOf(GetPlayer)|=] opinion,"
							tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
						}

						text_single = {
							raw_text = "[Character.GetMilitaryStrengthText]"
						}

						text_single = {
							raw_text = "Soldiers,"
						}

						hbox = {
							spacing = 3
							visible = "[Character.IsAlive]"

							text_single = {
								raw_text = "[Character.GetBalance|1=]"
							}
							text_single = {
								raw_text = "gold."
							}
						}

						text_single = {
							visible = "[Character.IsPowerfulVassal]"
							raw_text = "[Localize('MY_REALM_WINDOW_POWERFUL_VASSAL')]."
						}

						vassal_stance_text = { }

						vassal_expected_legitimacy_text = {
							name = "legitimacy_expectation"
						}

						text_single = {
							visible = "[Not(Character.GetLiege.IsLocalPlayer)]"
							raw_text = "[Character.GetOpinionOf( Character.GetLiege )] opinion of liege."
							tooltip = "[Character.GetOpinionBreakdownText( Character.GetLiege )]"
						}

						text_single = {
							visible = "[Character.ShouldShowDreadEffectIconFor( Character.GetLiege )]"
							raw_text = "[CharacterWindow.GetCharacter.GetSheHe|U] is intimidated."
							tooltip = "[Character.GetDreadEffectTooltipFor( Character.GetLiege )]"
						}

						text_single = {
							raw_text = "You have a hook."
							visible = "[Character.PlayerHasHooksOrHookableSecrets]"
							tooltip = "[Character.HookTooltip]"
						}

						text_single = {
							raw_text = "Loyal to your title, not you."
							datacontext = "[VassalContract.GetTitleAllegiance]"
							visible = "[Title.IsValid]"
							tooltip = "MRW_TITLE_ALLEGIANCE"
						}

						expand = { }
					}

					expand = { }
				}
			}

			block "own_vassal"
			{
				block "feudal_contract"
				{
					vbox = {
						name = "feudal_info"
						layoutpolicy_horizontal = expanding

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3

							# Display the usual Levy and Tax for Feudal

							button_text = {
								visible = "[Character.GetGovernment.IsType('clan_government')]"
								onclick = "[ToggleGameViewData( 'tax_slot_assign_vassal', Character.Self )]"
								blockoverride "extra" {
									text_single = {
										datacontext = "[Character.GetAssignedTaxSlot]"
										visible = "[And(Character.IsAssignedAsTaxpayer, Not(TaxSlot.HasTaxCollector))]"
										raw_text = "No collector,"
									}
									text_single = {
										visible = "[Character.IsAssignedAsTaxpayer]"
										datacontext = "[Character.GetAssignedTaxSlot]"
										raw_text = "[TaxSlot.GetObligation.GetName],"
										alwaystransparent = yes
									}
									text_single = {
										visible = "[Not(Character.IsAssignedAsTaxpayer)]"
										raw_text = "No tax jurisdiction,"
									}
								}
							}

							button_text = {
								onclick = "[Character.OpenPlayerInteraction('liege_modify_vassal_contract_interaction')]"
								enabled = "[And(And( VassalContract.UsesObligationLevels, Not( Character.GetPrimaryTitle.IsBarony)), Character.IsPlayerInteractionValid('liege_modify_vassal_contract_interaction'))]"

								blockoverride "extra" {
									margin_left = -3

									text_single = {
										visible = "[And(And( VassalContract.UsesObligationLevels, Not( Character.GetPrimaryTitle.IsBarony)), Character.GetGovernment.IsType('feudal_government'))]"
										raw_text = "[VassalContract.GetShortObligationLevelNameWithHighlightFor( 'feudal_government_taxes' )]"
										using = tooltip_se
										alwaystransparent = yes
									}

									text_single = {
										visible = "[Or(And(Character.GetGovernment.IsType('clan_government'), Character.IsAssignedAsTaxpayer), Not(Character.GetGovernment.IsType('clan_government')))]"
										raw_text = "Tax, [MyRealmWindowVassalItem.GetCachedTax|=1]."
										alwaystransparent = yes
										tooltipwidget = {
											my_realm_window_contribution_tooltip = {
												datacontext = "[MyRealmWindowVassalItem.GetTaxBreakdown]"
												blockoverride "levy_info_visible" { visible = no }
												blockoverride "contribution_tooltip_header"
												{
													text = "MRW_TT_TAXES_TO_ME"
												}

												blockoverride "levy_info"
												{
													text_single = {
														multiline = yes
														maximumsize = { 250 -1 }
														text = "[MyRealmWindowVassalItem.GetLevyTooltip]"
													}
												}
											}
										}
										using = tooltip_ws
									}

									text_single = {
										visible = "[And(And( VassalContract.UsesObligationLevels, Not( Character.GetPrimaryTitle.IsBarony)), Character.GetGovernment.IsType('feudal_government'))]"
										raw_text = "[VassalContract.GetShortObligationLevelNameWithHighlightFor( 'feudal_government_levies' )]"
										alwaystransparent = yes
									}

									text_single = {
										visible = "[Or(And(Character.GetGovernment.IsType('clan_government'), Character.IsAssignedAsTaxpayer), Not(Character.GetGovernment.IsType('clan_government')))]"
										alwaystransparent = yes
										raw_text =  "Levies: [MyRealmWindowVassalItem.GetCachedLeviesFormatted]."
										tooltipwidget = {
											my_realm_window_contribution_tooltip = {
												datacontext = "[MyRealmWindowVassalItem.GetLeviesBreakdown]"
												blockoverride "tax_info_visible" { visible = no }
												blockoverride "contribution_tooltip_header"
												{
													text = "MRW_TT_LEVIES_TO_ME"
												}
												blockoverride "tax_info"
												{
													text_single = {
														multiline = yes
														maximumsize = { 250 -1 }
														text = "[MyRealmWindowVassalItem.GetTaxTooltip]"
													}
												}
											}
										}
										using = tooltip_ws
									}
								}
							}

							button_text = {
								blockoverride "text" {
									raw_text = "Change type"
								}
								blockoverride "disabled" {
									visible = "[Not(Character.IsPlayerInteractionValid('admin_liege_modify_vassal_contract_interaction'))]"
								}
								visible = "[Character.GetGovernment.IsType('administrative_government')]"
								enabled = "[Character.IsPlayerInteractionValid('admin_liege_modify_vassal_contract_interaction')]"
								onclick = "[Character.OpenPlayerInteraction('admin_liege_modify_vassal_contract_interaction')]"
								tooltip = "[Character.GetPlayerInteractionTooltip('admin_liege_modify_vassal_contract_interaction')]"
								block "admin_contract_button_round" {}
							}

							button_text = {
								block "give_directive_button_round" {}
								blockoverride "text" {
									raw_text = "[Character.Custom('vassal_directive_text')] directive"
								}
								visible = "[Character.IsPlayerInteractionShown('give_vassal_directive_interaction')]"
								enabled = "[Character.IsPlayerInteractionValid('give_vassal_directive_interaction')]"
								onclick = "[Character.OpenPlayerInteraction('give_vassal_directive_interaction')]"
								tooltip = "[Character.GetPlayerInteractionTooltip('give_vassal_directive_interaction')]"
								blockoverride "disabled" {
									visible = "[Not(Character.IsPlayerInteractionValid('give_vassal_directive_interaction'))]"
								}
							}


							flowcontainer = {
								ignoreinvisible = yes
								visible = "[Not( VassalContract.IsRightfulLiege )]"
								spacing = 3

								text_single = {
									# visible = "[LessThan_CFixedPoint(GuiScope.SetRoot(MyRealmWindowVassalItem.GetCharacter.MakeScope).ScriptValue('de_jure_penalty'), '(CFixedPoint)1')]"
									visible = "[Or(And(Character.GetGovernment.IsType('clan_government'), Character.IsAssignedAsTaxpayer), Not(Character.GetGovernment.IsType('clan_government')))]"
									raw_text = "-[Subtract_CFixedPoint( '(CFixedPoint)1',  GuiScope.SetRoot(MyRealmWindowVassalItem.GetCharacter.MakeScope).ScriptValue('de_jure_penalty'))|%0] for"
									alwaystransparent = yes
								}

								text_single = {
									alwaystransparent = yes
									raw_text = "not de jure."
								}
							}

							flowcontainer = {
								visible = "[And( VassalContract.UsesObligationLevels, Not( Character.GetPrimaryTitle.IsBarony))]"
								margin_left = -3
								ignoreinvisible = yes

								button_text = {
									blockoverride "pre" {
										text_single = {
											raw_text = "Can't"
											visible = "[Not(Character.IsPlayerInteractionValid('liege_modify_vassal_contract_interaction'))]"
										}
									}
									blockoverride "extra" {
										text_single = {
											raw_text = "Change"
										}
										text_single = {
											visible = "[Character.GetGovernment.IsType('feudal_government')]"
											raw_text = "feudal"
										}
										text_single = {
											visible = "[Character.GetGovernment.IsType('clan_government')]"
											raw_text = "clan"
										}
										text_single = {
											raw_text = "contract."
										}
									}
									enabled = "[Character.IsPlayerInteractionValid('liege_modify_vassal_contract_interaction')]"
									onclick = "[Character.OpenPlayerInteraction('liege_modify_vassal_contract_interaction')]"
									visible = "[VassalContract.IsContractDefault]"

									block "feudal_contract_button_round" {} #TODO
								}
							}

							# text_single = {
							# 	visible = "[And(And(Not(Character.GetGovernment.IsType('feudal_government')), VassalContract.UsesObligationLevels), Not( Character.GetPrimaryTitle.IsBarony ))]"
							# 	raw_text = "No levels in a [Character.GetGovernment.GetName]."
							# }

							text_single = {
								layoutpolicy_horizontal = expanding
								visible = "[Character.GetPrimaryTitle.IsBarony]"
								raw_text = "Barons have no contract."
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[And( Not( VassalContract.UsesObligationLevels ), Not( Character.GetPrimaryTitle.IsBarony ) )]"

								text_single = {
									tooltip = MY_REALM_WINDOW_NO_FEUDAL_CONTRACT_TT
									raw_text = "No contract for [Character.GetGovernment.GetName]."
								}

								expand = { }
							}

							hbox = {
								visible = "[And( VassalContract.UsesObligationLevels, Not( Character.GetPrimaryTitle.IsBarony))]"
								spacing = 3

								text_single = {
									raw_text = "Contract was changed."
									visible = "[Not(VassalContract.IsContractDefault)]"
								}

								text_single = {
									raw_text = "Blocked."
									tooltip = "VASSAL_CONTRACT_IS_BLOCKED"
									visible = "[VassalContract.IsBlockedFromModification]"
								}
							}

							expand = { }
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[And( VassalContract.UsesObligationLevels, Not( Character.GetPrimaryTitle.IsBarony))]"
							spacing = 3

							button_round = {
								visible = "[GetVariableSystem.Exists('ocr')]"
								enabled = "[Character.IsPlayerInteractionValid('liege_modify_vassal_contract_interaction')]"
								onclick = "[Character.OpenPlayerInteraction('liege_modify_vassal_contract_interaction')]"
								tooltip = "[Character.GetPlayerInteractionTooltip('liege_modify_vassal_contract_interaction')]"

								block "feudal_contract_button_round" {}

								button_feudal_contract = {
									alwaystransparent = yes
									parentanchor = center
								}
							}

							expand = { }

						}

						expand = { }
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3

				text_single = {
					raw_text = "Skills:"
				}

				hbox_skills_grid_character_named_full = { }

				expand = { }
			}
			expand = { }
		}
	}

	type widget_character_list_item_finder_ocr = widget {
		datacontext = "[CharacterListItem.GetCharacter]"
		size = { 200 70 }

		background = { using = Background_Area }

		block "divider" { }

		block "widget" { }

		hbox = {
			button = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				block "click" {
					onclick = "[CharacterListItem.OnClick('character')]"
					onclick = "[GetVariableSystem.Clear('expand_view')]"
					onrightclick = "[GetVariableSystem.Clear('expand_view')]"
					onrightclick = "[DefaultOnCharacterClick(CharacterListItem.GetCharacter.GetID)]"
					# onrightclick = "[DefaultOnCharacterRightClick(CharacterListItem.GetCharacter.GetID)]"
				}
				block "extra_click" { }
				block "button" { }
				button_ignore = none
				# enabled = "[CharacterListItem.IsSelectable]"
				block "button_content"
				{
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						spacing = 5

						widget = {
							using = vanilla
							size =  { 70 70 }
							portrait_head_small = {
								size =  { 70 70 }
								# scale = 0.8
								position = { 2 2 }
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							# Name and age
							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								background = {
									using = Background_Area_Characterlist
									alpha = 0.4
								}

								block "pre_name" { }

								text_single = {
									raw_text = "[Add_int32(CharacterListItem.GetOrderIndex, '(int32)1')]"
									visible = "[GetVariableSystem.Exists('index')]"
								}

								# sorted skill
								block "skills_pre" {

									hbox = {
										datacontext = "[CharacterListItem.GetCharacter]"
										text_single = {
											raw_text = "[Character.GetSkill('diplomacy')] diplo,"
											align = left
											visible = "[CharacterSelectionList.IsSortingBySkill('(int32)0')]"
										}
										text_single = {
											raw_text = "[Character.GetSkill('martial')] martial,"
											align = left
											visible = "[CharacterSelectionList.IsSortingBySkill('(int32)1')]"
										}
										text_single = {
											raw_text = "[Character.GetSkill('stewardship')] steward,"
											align = left
											visible = "[CharacterSelectionList.IsSortingBySkill('(int32)2')]"
										}
										text_single = {
											raw_text = "[Character.GetSkill('intrigue')] intrigue,"
											align = left
											visible = "[CharacterSelectionList.IsSortingBySkill('(int32)3')]"
										}
										text_single = {
											raw_text = "[Character.GetSkill('learning')] learning,"
											align = left
											visible = "[CharacterSelectionList.IsSortingBySkill('(int32)4')]"
										}
										text_single = {
											raw_text = "[Character.GetSkill('prowess')] prowess,"
											align = left
											visible = "[CharacterSelectionList.IsSortingBySkill('(int32)5')]"
										}
									}
								}

								block "interaction_accept" { }


								text_single = {
									# using = Font_Size_Medium
									# layoutpolicy_horizontal = expanding
									raw_text = "[Character.GetUINameNoTooltip|U],"
									autoresize = yes
									fontsize_min = 14
									max_width = 430
								}

								hbox = {
									using = character_age_or_death_text
								}

								text_single = {
									visible = "[Character.GetHouse.IsValid]"
									raw_text = "House [Character.GetHouse.GetName]."
									align = left
								}

								block "top_bar" { }

								expand = { }
							}

							block "middle" { }

							hbox = {
								layoutpolicy_horizontal = expanding
								# visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"

								# for the courties
								block "action_buttons" {
									visible = no
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									# visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"

									text_single = {
										name = "character_relation"
										raw_text = "[Character.GetRelationToString( GetPlayer )]."
										tooltip = "EXTENDED_RELATIONS_TOOLTIP"
										align = left
										fontsize_min = 14
										max_width = 260
									}

									# expand = { }
									text_single = {
										block "court_window" {
											visible = "[And(Character.GetLiege.IsValid, Not(ObjectsEqual(Character.GetLiege, CharacterWindow.GetCharacter)))]"
										}
										raw_text = "[Character.GetRelationToString( Character.GetLiege )]."
										tooltip = "EXTENDED_RELATIONS_TOOLTIP"
										align = left
										fontsize_min = 14
										margin_left = 5
									}

									expand = { }
								}
							}

							block "character_description_extra" { }

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								block "pre_relation" { }

								block "action_buttons" {
									block "character_relation"
									{
										#TODO courtowner relation
										hbox = {
											visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"

											text_single = {
												name = "character_relation"
												raw_text = "[Character.GetRelationToString( GetPlayer )]."
												tooltip = "EXTENDED_RELATIONS_TOOLTIP"
												fontsize_min = 14
												max_width = 260
											}

										}
									}
								}

								hbox = {
									spacing = 5

									button_recruit_character = { }

									text_single = {
										raw_text = "Might leave."
										visible = "[And( Character.CourtierWantsToLeaveCourt, Not( Character.IsImprisoned))]"
										tooltip = "[Character.GetCourtierLeaveDescription]"
										align = left
									}

									block "action_buttons" {
										visible = no
									}
								}

								block "bottom_middle_box" { }

								text_single = {
									block "show_opinion" {
										visible = "[And(And(And(Not(Character.IsLocalPlayer), Character.IsAlive), GetPlayer.IsValid), Isnt('ocr'))]"
									}
									raw_text = "[Character.GetHerHis|U] opinion, [Character.GetOpinionOf(GetPlayer)]."
									tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
									align = left
								}

								container = {
									visible = "[Not(CharacterWindow.GetCourtOwner.IsLocalPlayer)]"
									text_single = {
										block "action_buttons" {
											visible = no
										}
										raw_text = "Opinion of host: [Character.GetOpinionOf(CharacterWindow.GetCharacter)]."
										tooltip = "[Character.GetOpinionBreakdownText(CharacterWindow.GetCharacter)]"
									}
								}

								block "strength" {
									text_single = {
										raw_text = "Soldiers: [Character.GetMilitaryStrengthText]."
										visible = "[And(Character.HasLandedTitles, Character.IsAlive)]"
									}
								}

								text_single = {
									block "powerful" {
										visible = no
										# visible = "[Character.IsPowerfulVassal]"
									}
									text = "MY_REALM_WINDOW_POWERFUL_VASSAL"
									# layoutpolicy_horizontal = expanding
								}

								block "skills" {

									hbox_skills_grid_character_model = {
										using = vanilla
									}

									# Skills
									hbox_skills_grid_character_named = {
										using = ocr
									}

									# text_single = {
									# 	raw_text = "[Character.GetProwess]."
									# 	raw_tooltip = "[Character.GetProwessBreakdown]"
									# }
								}

								block "extra_skills" { }

								expand = { }
							}

							### BOTTOM ROW ###
							vbox = {
								layoutpolicy_horizontal = expanding
								block "bottom_row" {}

								block "additional_info_kill_list" { }

								hbox = {
									spacing = 3
									block "bottom_pre" { }
									layoutpolicy_horizontal = expanding
									block "expand_traits" { }

									block "small_traits" {
										flowcontainer = {
												ignoreinvisible = yes

											tooltipwidget = {
												widget = {
													using = DefaultTooltipBackground
													# using = TooltipSound
													# using = GeneralTooltipSetup
													# size = { 300 50 }
													alwaystransparent = no

													flowcontainer = {
														name = "traits_grid"
														datamodel = "[CharacterListItem.GetTraits]"
														direction = vertical

														ignoreinvisible = yes
														resizeparent = yes
														margin = { 20 15 }
														margin_top = 5

														item = {
															text_single = {
																margin_left = 3
																visible = "[Trait.IsValid]"
																datacontext = "[Character.GetFaith]"
																raw_text = "[Trait.GetNameNoTooltip(Character.Self)][AddTextIf(Faith.IsTraitVirtue( Trait.Self ), ' (virtue)')][AddTextIf(Faith.IsTraitSin( Trait.Self ), ' (sin)')][AddTextIf(Trait.IsInheritable, ' (inheritable)')]."
																tooltip = "trait_tooltip"
															}
														}
													}
												}
											}
											using = tooltip_se

											flowcontainer = {
												datamodel = "[DataModelFirst(CharacterListItem.GetTraits, '(int32)1')]"
												visible = "[DataModelHasItems(CharacterListItem.GetTraits)]"
												ignoreinvisible = yes

												item = {
													text_single = {
														margin_left = 3
														visible = "[Trait.IsValid]"
														datacontext = "[Character.GetFaith]"
														raw_text = "[Trait.GetNameNoTooltip(Character.Self)],[AddTextIf(GreaterThanOrEqualTo_int32( GetDataModelSize(CharacterListItem.GetTraits), '(int32)2'), ' +')]"
														tooltip = "trait_tooltip"
														tooltip_visible = "[EqualTo_int32(GetDataModelSize(CharacterListItem.GetTraits), '(int32)1')]"
													}
												}
											}

											text_single = {
												visible = "[GreaterThanOrEqualTo_int32( GetDataModelSize(CharacterListItem.GetTraits), '(int32)2')]"
												# layoutpolicy_horizontal = expanding
												raw_text = " [Subtract_int32(GetDataModelSize(CharacterListItem.GetTraits), '(int32)1')] traits,"
											}
										}
									}

									block "bottom_right_box" {
										hbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											spacing = 3

											block "claims" { # for kill list
												widget_list_claims = { }
											}

											# Religion and culture
											hbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												spacing = 3
												# minimumsize = { 110 0 }

												text_single = {
													raw_text = "[Character.GetFaith.GetAdjectiveNoTooltip],"
													using = tooltip_se
												}

												flowcontainer = {
													datacontext = "[Character.GetCulture]"

													text_single = {
														using = tooltip_se
														layoutpolicy_horizontal = expanding
														text = "CULTURE_LISTS_WINDOW"
													}
													dot = { }
												}
												text_single = {
													raw_text = "[Character.Custom('character_health')] health."
													visible = "[Not(Character.IsDeadAndValid)]"
													tooltip = "[Character.GetHealthInfo]"

												}

												block "bottom_right_box_extra" {}
												expand = { }
											}
										}
									}
									expand = { }
								}

								expand = { }
							}

							block "bottom_extra" {}

							expand = { }
						}
					}
				}
			}
		}
	}

	type data_model_view_filter_hbox_ocr = vbox
	{
		layoutpolicy_horizontal = expanding

		vbox = {
			name = "toggle_filters"
			layoutpolicy_horizontal = expanding
			datamodel = "[DataModelView.GetFilters]"

			item = {
				data_model_view_toggle_filter_ocr = {}
			}
		}

		vbox = {
			name = "grouped_filters"
			layoutpolicy_horizontal = expanding
			datamodel = "[DataModelView.GetGroupedFilters]"

			item = {
				data_model_view_dropdown_filter_ocr = {}
			}
		}
	}

	type data_model_view_toggle_filter_ocr = button_checked_text
	{
		layoutpolicy_horizontal = expanding

		onclick = "[DataModelView.ToggleFilter( PdxGuiWidget.GetIndexInDataModel )]"

		block "toggle_onclick"
		{
		}

		blockoverride "visible"
		{
			visible = "[Not(DataModelFilter.IsEnabled)]"
		}

		blockoverride "text"
		{
			text = "[DataModelFilter.GetName]"
		}
	}

	type data_model_view_dropdown_filter_ocr = hbox
	{
		layoutpolicy_horizontal = expanding

		dropdown_menu_standard = {
			layoutpolicy_horizontal = expanding
			blockoverride "dropdown_size"
			{
				size = { 500 22 }
			}
			blockoverride "dropdown_list_maxsize"
			{
				maximumsize = { 492 500 }
			}
			blockoverride "dropdown_properties"
			{
				datamodel = "[DataModelGroupedFilter.GetFilters]"
				selectedindex = "[DataModelGroupedFilter.GetActiveFilter]"
				onselectionchanged = "[DataModelView.SelectGroupFilter( PdxGuiWidget.GetIndexInDataModel )]"

				block "dropdown_onselect"
				{
				}
			}

			blockoverride "dropdown_active_item_properties"
			{
				raw_text = "Dropdown [DataModelGroupedFilter.GetGroupName]: [CString.GetString]"
			}

			blockoverride "dropdown_item_properties"
			{
				raw_text = "[CString.GetString] option"
			}
		}
	}
}

types Lists
{
	## Character List Items

	type dropdown_menu_standard = dropDown {
		block "dropdown_properties"
		{
			#datamodel = "[GetPlayer.GetCourt]"
		}

		block "dropdown_size"
		{
			size = { 200 32 }
		}

		active_item = {
			container = {
				alwaystransparent = no

				button_drop = {
					block "dropdown_size"
					{
						size = { 200 32 }
					}
					block "dropdown_active_item_properties"
					{
						raw_text = "#D Current Option#!"
					}
					button_trigger = none


				}
			}
		}

		item = {
			container = {
				alwaystransparent = no

				button_dropdown = {
					block "dropdown_size"
					{
						size = { 200 22 }
					}
					button_trigger = none

					block "dropdown_item_properties"
					{
						raw_text = "#D Option#!"
					}

					default_format = "#clickable"
				}
			}
		}

		list = {
			scrollarea = {
				position = { 5 22 }
				block "dropdown_list_maxsize"
				{
					maximumsize = { 192 500 }
				}
				using = TooltipFocus

				block "dropdown_list_properties"
				{

				}

				autoresizescrollarea = yes
				scrollbarpolicy_horizontal = always_off

				using = Background_DropDown

				scrollwidget = {
					dynamicgridbox = {
						alwaystransparent = no
					}
				}

				scrollbar_vertical = {
					using = Scrollbar_Vertical
				}
			}
		}
	}

	type dropdown_sort_characterlist = dropDown {
		name = "sort_options"

		block "size_button_drop" {   ########### only used for character finder
			size = { 225 25 }
		}

		active_item = {
			widget = {
				position = { -3 -3 }
				alwaystransparent = no
				size = { 100% 100% }

				button_drop = {
					text = ""
					hbox = {
						margin_left = 15
						margin_bottom = 5
						layoutpolicy_horizontal = expanding

						block "option_name" {
							text_single = {
								raw_text = "SORT_BY"
							}
						}

						spacing = 3

						text_single = {
							block "text_button_drop" {
								margin_left = 2
								raw_text = "[CharacterListSortItem.GetName]."
							}
						}
						expand = { }
					}
				}
			}
		}

		item = {
			widget = {
				alwaystransparent = no
				block "size_dropdown" {
					size = { 400 25 }
				}

				button_normal = {
					size = { 100% 25 }
					button_trigger = none
					gfxtype = framedbuttongfx
					effectname = "NoHighlight"
					shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
					upframe = 1
					overframe = 2
					downframe = 3
					disableframe = 1
					texture = "gfx/interface/buttons/button_interaction_menu.dds"
					framesize = { 317 25 }
				}

				button_dropdown = {
					block "size_dropdown" {
						size = { 400 25 }
					}
						text = ""

					text_single = {
						position = { 10 0 }
						block "text_button_drop" {
							raw_text = "[CharacterListSortItem.GetName] sorting"
						}
					}

					default_format = "#clickable"
				}
			}
		}

		list = {
			scrollarea = {
				position = { 5 25 }
				maximumsize = { 400 500 }
				autoresizescrollarea = yes
				scrollbarpolicy_horizontal = always_off
				using = TooltipFocus

				using = Background_DropDown

				scrollwidget = {
					dynamicgridbox = {
						alwaystransparent = no
					}
				}

				scrollbar_vertical = {
					using = Scrollbar_Vertical
				}
			}
		}
	}

	type widget_list_claims = text_single {
		datacontext = "[CharacterListItem.GetFirstClaim]"
		# layoutpolicy_vertical = expanding

		block "claims_visibility" { }

		visible = "[CharacterListItem.HasTitleItems]"
		raw_text = "[CharacterListItem.GetTitleItemCount] claims."
		tooltipwidget = {
				widget = {
					using = DefaultTooltipBackground
					alwaystransparent = no

					flowcontainer = {
						direction = vertical
						datamodel = "[CharacterListItem.GetTitleItems]"
						resizeparent = yes
						margin = { 20 15 }
						# margin_top = 10

						item = {
							button_text = {
								datacontext = "[Claim.GetTitle]"
								onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
								onrightclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
								blockoverride "text" {
									raw_text = "[Title.GetNameNoTooltip]."
									align = left
								}
								blockoverride "extra" {
									text_single = {
										visible = "[And(Claim.IsPressed, Not(Claim.IsImplicit))]"
										raw_text = "Pressed."
									}
									text_single = {
										visible = "[And(Not(Claim.IsPressed), Not(Claim.IsImplicit))]"
										raw_text = "Unpressed."
									}
									text_single = {
										visible = "[Claim.IsImplicit]"
										raw_text = "Implicit."
									}
								}
							}
						}
					}
				}
			}

			# resizeparent = yes
			# parentanchor = center
			# position = { 18 0 }
			# default_format = "#high"
			# using = Font_Size_Medium
			# align = center

	}

	type hbox_skills_grid = hbox {
		name = "skills_grid"
		block "skills_datamodel"
		{
			datamodel = "[CharacterListItem.GetSkillItems]"
		}
		spacing = 3

		text_single = {
			raw_text = "Skills: "
			align = left
			using = ocr
		}

		item = {
			container = {
				ignoreinvisible = yes
				widget_skill_item_no_icon = {
					using = vanilla
				}
				widget = {
					size = { 0 25 }
					using = ocr
					text_single = {
						name = "value"
						resizeparent = yes
						align = left
						raw_text = "[SkillItem.GetValue],"
						tooltip = "[SkillItem.GetName]"
					}
				}
			}
		}
	}

	type hbox_skills_grid_character = hbox {
		spacing = 3
		text_single = {
			raw_text = "[Character.GetSkill('diplomacy')],"
			tooltip = "diplomacy_concept"
		}
		text_single = {
			raw_text = "[Character.GetSkill('martial')],"
			tooltip = "martial_concept"
		}
		text_single = {
			raw_text = "[Character.GetSkill('stewardship')],"
			tooltip = "stewardship_concept"
		}
		text_single = {
			raw_text = "[Character.GetSkill('intrigue')],"
			tooltip = "intrigue_concept"
		}
		text_single = {
			raw_text = "[Character.GetSkill('learning')],"
			tooltip = "learning_concept"
		}
		text_single = {
			block "prowess" {}
			raw_text = "[Character.GetSkill('prowess')],"
			tooltip = "prowess_concept"
		}
	}

	type hbox_skills_grid_character_named = hbox {
		spacing = 3
		text_single = {
			raw_text = "Dip [Character.GetSkill('diplomacy')],"
			tooltip = "diplomacy_concept"
		}
		text_single = {
			raw_text = "Martial [Character.GetSkill('martial')],"
			tooltip = "martial_concept"
		}
		text_single = {
			raw_text = "Stew [Character.GetSkill('stewardship')],"
			tooltip = "stewardship_concept"
		}
		text_single = {
			raw_text = "Int [Character.GetSkill('intrigue')],"
			tooltip = "intrigue_concept"
		}
		text_single = {
			raw_text = "Learn [Character.GetSkill('learning')],"
			tooltip = "learning_concept"
		}
		text_single = {
			raw_text = "Prow [Character.GetSkill('prowess')],"
			tooltip = "prowess_concept"
		}
	}

	type hbox_skills_grid_character_named_full = hbox {
		spacing = 3
		text_single = {
			raw_text = "Diplomacy [Character.GetSkill('diplomacy')],"
			tooltip = "diplomacy_concept"
		}
		text_single = {
			raw_text = "Martial [Character.GetSkill('martial')],"
			tooltip = "martial_concept"
		}
		text_single = {
			raw_text = "Stewardship [Character.GetSkill('stewardship')],"
			tooltip = "stewardship_concept"
		}
		text_single = {
			raw_text = "Intrigue [Character.GetSkill('intrigue')],"
			tooltip = "intrigue_concept"
		}
		text_single = {
			raw_text = "Learning [Character.GetSkill('learning')],"
			tooltip = "learning_concept"
		}
		text_single = {
			block "prowess" {}
			raw_text = "Prowess [Character.GetSkill('prowess')],"
			tooltip = "prowess_concept"
		}
	}

	type flow_skills_grid_character_named_full = flowcontainer {
		spacing = 3
		ignoreinvisible = yes
		text_single = {
			raw_text = "Diplomacy [Character.GetSkill('diplomacy')],"
			tooltip = "diplomacy_concept"
		}
		text_single = {
			raw_text = "Martial [Character.GetSkill('martial')],"
			tooltip = "martial_concept"
		}
		text_single = {
			raw_text = "Stewardship [Character.GetSkill('stewardship')],"
			tooltip = "stewardship_concept"
		}
		text_single = {
			raw_text = "Intrigue [Character.GetSkill('intrigue')],"
			tooltip = "intrigue_concept"
		}
		text_single = {
			raw_text = "Learning [Character.GetSkill('learning')],"
			tooltip = "learning_concept"
		}
		text_single = {
			block "prowess" {}
			raw_text = "Prowess [Character.GetSkill('prowess')],"
			tooltip = "prowess_concept"
		}
	}

	type flow_skills_grid_character_short = flowcontainer {
		spacing = 3
		ignoreinvisible = yes
		text_single = {
			raw_text = "Skills:"
		}
		text_single = {
			raw_text = "[Character.GetSkill('diplomacy')],"
			tooltip = "diplomacy_concept"
		}
		text_single = {
			raw_text = "[Character.GetSkill('martial')],"
			tooltip = "martial_concept"
		}
		text_single = {
			raw_text = "[Character.GetSkill('stewardship')],"
			tooltip = "stewardship_concept"
		}
		text_single = {
			raw_text = "[Character.GetSkill('intrigue')],"
			tooltip = "intrigue_concept"
		}
		text_single = {
			raw_text = "[Character.GetSkill('learning')],"
			tooltip = "learning_concept"
		}
		text_single = {
			block "prowess" {}
			raw_text = "[Character.GetSkill('prowess')],"
			tooltip = "prowess_concept"
		}
	}

	type hbox_list_sort_buttons = vbox {
		name = "sort_buttons"

		hbox = {
			layoutpolicy_horizontal = expanding

			button_text = {
				name = "filters"
				# size = { 25 25 }

				down = "[CharacterSelectionList.FiltersShown]"
				# frame = "[BoolTo1And2(CharacterSelectionList.IsAllDefault)]"
				onclick = "[CharacterSelectionList.OnToggleFilters]"
				shortcut = army_split_half

				# tooltip = "TOGGLE_FILTERS"
				using = tooltip_nw

				# button_search = {
				# 	alwaystransparent = yes
				# 	parentanchor = center
				# 	size = { 20 20 }
				# }

				block "filters_visible" { }

				blockoverride "text" {
					raw_text = "Filters[AddTextIf(CharacterSelectionList.FiltersShown, ', opened')][AddTextIf(Not(CharacterSelectionList.IsAllDefault), ', applied')] F:"
					# using : becuse it gives a better pause than a dot. Dunno why
				}

			}

			button_text = {
				# size = { 200 25 }
				# name = "drop_filters"
				visible = "[Not(CharacterSelectionList.IsAllDefault)]"
				blockoverride "text" {
					raw_text = "Reset." #CHARACTER_RESET_FILTERS
				}
				onclick = "[CharacterSelectionList.OnResetFilters]"
			}

			block "sort_dropdown" {
				dropdown_sort_characterlist = {
				}
			}
			expand = { }
		}

		block "skill_sort_buttons"
		{
			hbox = {
				visible = "[Not(IsGameViewOpen('character'))]"
				layoutpolicy_horizontal = expanding
				spacing = 1
				text_single = {
					raw_text = "Use number keys to sort by skills and Shift W for prowess."
					align = left
				}
				button_text = {
				    blockoverride "text" {
				        # raw_text = "Diplomacy 1,"
				    }
					onclick = "[CharacterSelectionList.SortBySkill('(int32)0')]"
					shortcut = speed_1
				}

				button_text = {
				    blockoverride "text" {
				        # raw_text = "Martial 2,"
				    }
					onclick = "[CharacterSelectionList.SortBySkill('(int32)1')]"
					shortcut = speed_2
				}
				button_text = {
				    blockoverride "text" {
				        # raw_text = "Stewardship 3,"
				    }
					onclick = "[CharacterSelectionList.SortBySkill('(int32)2')]"
					shortcut = speed_3
				}
				button_text = {
				    blockoverride "text" {
				        # raw_text = "Intrigue 4,"
				    }
					onclick = "[CharacterSelectionList.SortBySkill('(int32)3')]"
					shortcut = speed_4
				}

				button_text = {
				    blockoverride "text" {
				        # raw_text = "Learning 5."
				    }
					onclick = "[CharacterSelectionList.SortBySkill('(int32)4')]"
					shortcut = speed_5
				}
				button_text = {
				    blockoverride "text" {
				        # raw_text = "Prowess 5."
				    }
					onclick = "[CharacterSelectionList.SortBySkill('(int32)5')]"
					shortcut = map_mode_10
				}
				expand = { }
			}
		}
	}

	type vbox_character_list = vbox {
		name = "character_list"

		block "sort_buttons"
		{
			hbox_list_sort_buttons = {
				layoutpolicy_horizontal = expanding
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			button_text = {
				name = "sort_order"
				onclick = "[CharacterSelectionList.RevertSortOrder]"

				blockoverride "text" {
					raw_text = "In [Select_CString(CharacterSelectionList.GetSortOrder, 'ascending', 'descending')] order. Toggle."
				}

			}
			expand = { }
		}

		block "special_character" { }

		block "character_count" {
			block "bottom_bar" { }
			hbox = {
				layoutpolicy_horizontal = expanding
				# visible = "[DataModelHasItems(CharacterSelectionList.GetList)]"
				# margin_bottom = 8
				# spacing = 5

				text_single = {
					name = "character_count"
					datacontext = "[CharacterSelectionList]"
					text = "CHARACTER_FINDER_COUNT"
					align = left
				}

				dot = {
					align = left
				}

				text_single = {
					visible = "[DataModelHasItems(CharacterSelectionList.GetList)]"
					margin_left = 3
					block "click_info" {
						raw_text = "Click to select, right click to view."
					}
				}

				block "count_extra" { }

				expand = { }
			}
		}

		scrollbox = {
			name = "characters_scroll_area"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			block "scrollbox_properties" { }

			blockoverride "scrollbox_content" {

				block "container_implementation" {
					vbox = {
						margin_top = 15
						name = "characters_grid"
						block "list_datamodel" {
							datamodel = "[CharacterSelectionList.GetList]"
						}
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"
						layoutpolicy_horizontal = expanding

						item = {
							block "list_item" {
								widget_character_list_item_finder_ocr = {
									block "item_size" {
										size = { 650 110 }
										layoutpolicy_horizontal = expanding
									}
								}
							}
						}
					}
				}
			}

			blockoverride "scrollbox_empty"
			{
				block "scrollbox_empty_visibility"
				{
					layoutpolicy_vertical = expanding
					visible = "[IsDataModelEmpty( CharacterSelectionList.GetList )]"
					text = "NO_CHARACTERS_TO_SELECT"
				}
			}
		}
	}

	type button_recruit_character = container
	{
		ignoreinvisible = yes
		visible = "[Character.IsPlayerInteractionShown('recruit_guest_interaction')]"
		enabled = "[Character.IsPlayerInteractionValid('recruit_guest_interaction')]"

		button_text = {
			using = ocr
			onclick = "[Character.OpenPlayerInteraction('recruit_guest_interaction')]"
			tooltip = "[Character.GetPlayerInteractionTooltip('recruit_guest_interaction')]"

			blockoverride "text" {
				raw_text = "[AddTextIf(Character.IsPlayerInteractionValid('recruit_guest_interaction'), 'Click to ')]Recruit[AddTextIf(Not(Character.IsPlayerInteractionValid('recruit_guest_interaction')), ', disabled')]."
			}
		}

		button_round =	{
			using = vanilla
			onclick = "[Character.OpenPlayerInteraction('recruit_guest_interaction')]"
			tooltip = "[Character.GetPlayerInteractionTooltip('recruit_guest_interaction')]"

			button_add_character = {
				alwaystransparent = yes
				parentanchor = center
			}
		}



		# button_add_character = {
		# 	alwaystransparent = yes
		# 	parentanchor = center
		# }
	}
}
