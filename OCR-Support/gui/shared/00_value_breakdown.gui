types Breakdowns
{
	## List of values tooltip
	type widget_value_breakdown_list = widget {
		name = "values_grid"
		size = { 50 50 }
		alwaystransparent = no

		block "background" {
		}

		vbox = {
			set_parent_size_to_minimum = yes
			hide_tooltip = { }


			vbox = {
				datamodel = "[ValueBreakdown.GetSubValues]"
				alwaystransparent = no
				margin = { 17 10 }
				spacing = 3
				block "focus" {
					using = ActualTooltipFocus
				}

				background = {
					using = Background_Area_Border_Solid
				}

				block "list" {}

				block "header" { }

				item = {
					hbox = {
						name = "value_breakdown"
						layoutpolicy_horizontal = expanding
						spacing = 3

						text_single = {
							block "margin_left" { }
							name = "name"
							raw_text = "[ValueBreakdown.GetName]"
						}

						# spacing = -6
						#

						text_single = {
							visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
							name = "value_with_tooltip"
							raw_text = "[ValueBreakdown.GetValue|L],"

							max_width = 130
							fontsize_min = 14
							elide = left

							using = tooltip_below

							tooltipwidget = {
								recursive = yes

								widget_value_breakdown_tooltip = {}
							}
						}

						text_single = {
							visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
							name = "value_with_no_tooltip"
							raw_text = "[ValueBreakdown.GetValue],"
							max_width = 70
							fontsize_min = 14
							elide = left
						}

						expand = { }
					}
				}
			}
		}
	}

	# Used in a 'top level' aka directly inside a `tooltipwidget = {}`
	type widget_value_breakdown_tooltip = widget_value_breakdown_list
	{
		blockoverride "header"
		{
			# We have the header be the name, if it exists
			block "header" {
				text_single = {
					layoutpolicy_horizontal = expanding
					block "header_text" {
						text = "[ValueBreakdown.GetName]"
					}
					default_format = "#T"
					visible = "[Not( StringIsEmpty( ValueBreakdown.GetName ) )]"
				}
			}
		}

		blockoverride "background"
		{
			using = DefaultTooltipBackground
		}

		blockoverride "list"
		{
			# We want more spacing in bottom for this background
			margin_bottom = 17
		}
	}

	## Gold Breakdown Tooltip
	type widget_gold_breakdown_tooltip = widget {
		alwaystransparent = no

		vbox = {
			set_parent_size_to_minimum = yes
			hide_tooltip = { }

			vbox = {
				block "background" { #### needed to solve the hack for tooltip in Realm View
					using = DefaultTooltipBackground
				}
				layoutpolicy_horizontal = expanding
				margin = { 14 8 }
				margin_bottom = 18
				spacing = 14


				block "my_gold" { }

				vbox_gold_breakdown = {
					name = "income"
					layoutpolicy_horizontal = expanding
					block "income" { }
				}

				vbox_gold_breakdown = {
					name = "expenses"
					layoutpolicy_horizontal = expanding
					block "expenses" { }
				}

				block "gold_income" { }
			}
		}
	}

	type vbox_gold_breakdown = vbox {
		spacing = 6
		alwaystransparent = no

		vbox = {
			layoutpolicy_horizontal = expanding

			text_single = {
				layoutpolicy_horizontal = expanding
				raw_text = "[ValueBreakdown.GetName]:"
				default_format = "#T"

				background = {
					using = Background_Area
					margin = { 10 0 }
					margin_bottom = 8
				}
			}

			vbox = {
				name = "values_grid"
				datamodel = "[ValueBreakdown.GetSubValues]"
				layoutpolicy_horizontal = expanding
				margin_top = 2

				item = {
					hbox = {
						name = "value_breakdown"
						layoutpolicy_horizontal = expanding
						spacing = 3

						text_single = {
							name = "name"
							# layoutpolicy_horizontal = expanding
							text = "[ValueBreakdown.GetName]"
						}

						text_single = {
							name = "value_with_tooltip"
							visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
							raw_text = "[ValueBreakdown.GetValue|L]."
							# align = right


							using = tooltip_se

							tooltipwidget = {
								widget_value_breakdown_tooltip = { }
							}
						}

						text_single = {
							name = "value_with_no_tooltip"
							visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
							raw_text = "[ValueBreakdown.GetValue]."
							# align = right
						}

						expand = { }
					}
				}
			}

			text_single = {
				visible = "[Not(DataModelHasItems( ValueBreakdown.GetSubValues ))]"
				layoutpolicy_horizontal = expanding
				block "no_values" {
					text = "VALUE_BREAKDOWN_NO_VALUES"
				}
				default_format = "#weak"
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					visible = "[DataModelHasItems( ValueBreakdown.GetSubValues )]"
					layoutpolicy_horizontal = expanding
					spacing = 3

					text_single = {
						visible = "[ValueBreakdown.ShouldShowValue]"
						# layoutpolicy_horizontal = expanding
						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						text = "[ValueBreakdown.GetValue|+]"

					}

					expand = { }
				}
			}
		}
	}

	## Resource Breakdown Tooltip
	type widget_resource_value_tooltip = widget {
		alwaystransparent = no

		vbox = {
			set_parent_size_to_minimum = yes
			hide_tooltip = { }

			vbox = {
				using = DefaultTooltipBackground
				name = "tooltip_container"
				filter_mouse = all
				margin = { 14 8 }
				margin_bottom = 12

				vbox = {
					layoutpolicy_horizontal = expanding
					margin_bottom = 14
					spacing = 5

					block "header" { }

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "MY_VALUE_LABEL"
						default_format = "#high;bold"
						using = Font_Size_Medium
						fonttintcolor = "[TooltipInfo.GetTintColor]"

						background = {
							using = Background_Area
							margin = { 10 0 }
							margin_bottom = 5
						}
					}


					text_single = {
						name = "total_label_no_tooltip"
						layoutpolicy_horizontal = expanding
						text = "TOTAL_BREAKDOWN_LABEL"
						visible = "[EqualTo_CFixedPoint(PlayerValueItem.GetBalance, '(CFixedPoint)0')]"
					}

					text_single = {
						name = "total_label"
						layoutpolicy_horizontal = expanding
						text = "TOTAL_BREAKDOWN_LABEL"
						visible = "[NotEqualTo_CFixedPoint(PlayerValueItem.GetBalance, '(CFixedPoint)0')]"
						using = tooltip_ws

						datacontext = "[PlayerValueItem.GetBalanceGained]"
						tooltip_visible = "[ValueBreakdown.HasTooltip]"

						tooltipwidget = {
							widget_value_breakdown_tooltip = {
								blockoverride "header" {}
							}
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 15

					hbox = {
						spacing = 5
						layoutpolicy_horizontal = expanding

						background = {
							using = Background_Area
							margin = { 10 0 }
							margin_bottom = 5
						}

						text_single = {
							text = "PLAYER_VALUE_LEVEL_LABEL"
							# layoutpolicy_horizontal = expanding

							default_format = "#T"
							fonttintcolor = "[TooltipInfo.GetTintColor]"
						}

						text_single = {
							name = "current_level"
							layoutpolicy_horizontal = expanding

							raw_text = "[PlayerValueItem.GetCurrentLevelName]."
							fonttintcolor = "[TooltipInfo.GetTintColor]"
						}

						expand = { }
					}

					vbox = {
						visible = "[PlayerValueItem.HasNextLevel]"
						layoutpolicy_horizontal = expanding
						spacing = 5

						text_single = {
							name = "progress_label"
							layoutpolicy_horizontal = expanding

							raw_text = "Next level: [PlayerValueItem.GetNextLevelName]."
							fonttintcolor = "[TooltipInfo.GetTintColor]"
						}

						text_single = {
							raw_text = "[PlayerValueItem.GetProgressTooltip]."
						}
					}
				}
			}
		}
	}

	# Requires a ActiveCouncilTask datacontext
	type council_task_progress_breakdown_widget = widget
	{
		size = { 50 50 }
		alwaystransparent = no
		datacontext = "[ActiveCouncilTask.GetProgressBreakdown]"
		using = DefaultTooltipBackground

		vbox = {
			set_parent_size_to_minimum = yes

			hide_tooltip = { }

			vbox = {
				layoutpolicy_horizontal = expanding
				minimumsize = { 280 0 }
				using = ActualTooltipFocus
				using = tooltip_header

				margin = { 10 10 }

				text_single = {
					layoutpolicy_horizontal = expanding
					name = "header"
					text = COUNCIL_TASK_PROGRESSBAR_TOOLTIP_HEADER
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					name = "frozen"
					text = COUNCIL_TASK_PROGRESSBAR_FROZEN
					visible = "[ActiveCouncilTask.IsFrozen]"
				}

				vbox = {
					name = "progress_breakdown"
					layoutpolicy_horizontal = expanding
					visible = "[And( ActiveCouncilTask.GetTaskType.IsProgressDefined, Not( ActiveCouncilTask.IsFrozen ) )]"

					margin = { 10 5 }

					hbox = {
					    layoutpolicy_horizontal = expanding
						visible = "[ActiveCouncilTask.GetTaskType.IsPercentageTask]"

						text_single = {
							raw_text = "Gain:"
						}

						space = { }

						text_single = {
							name = "progress_rate_header"
							text = "COUNCIL_TASK_PROGRESS_RATE"
						}

						dot = { }


					    expand = { }
					}

					hbox = {
					    layoutpolicy_horizontal = expanding
						visible = "[Not( ActiveCouncilTask.GetTaskType.IsPercentageTask )]"

						text_single = {
							raw_text = "Gain:"
						}

						space = { }

						text_single = {
							name = "progress_rate_header_value"
							text = COUNCIL_TASK_PROGRESS_RATE_VALUE
						}

						dot = { }

					    expand = { }
					}


					widget_value_breakdown_list = {
						layoutpolicy_horizontal = expanding
						blockoverride "focus" { }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						name = "task_eta"
						raw_text = "[ActiveCouncilTask.GetETA]."
					}

					text_multi = {
						datacontext = "[ActiveCouncilTask.GetCouncillor]"
						autoresize = yes
						max_width = 600
						raw_text = "[ActiveCouncilTask.GetTaskEffect]"
					}
				}
			}
		}
	}

	type court_position_aptitude_breakdown_tooltip = widget {
		name = "AptitudeBreakdownTooltip"
		using = GeneralTooltipSetup
		alwaystransparent = no

		using = DefaultTooltipBackground
		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 16 8 }
			minimumsize = { 300 80 }

			# Header
			hbox = {
				layoutpolicy_horizontal = expanding
				minimumsize = { 100% 50 }

				background = {
					name = "header"
					texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
					spriteType = Corneredstretched
					margin = { 15 0 }
					texture_density = 2

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 160 0 }
						blend_mode = alphamultiply
						alpha = 0.5
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					block "header_additions" { }

					vbox = {
						name = "FancyHeader"
						layoutpolicy_horizontal = expanding
						alwaystransparent = no

						text_single = {
							layoutpolicy_horizontal = expanding
							autoresize = yes
							name = "title"
							margin_bottom = 18

							using = Font_Size_Medium
							fonttintcolor = "[TooltipInfo.GetTintColor]"

							block "header_text" {

							}
						}
					}
				}

				expand = { }
			}

			# Modifiers
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				text_single = {
					layoutpolicy_horizontal = expanding
					default_format = "#S"
					text = COURT_POSITION_TOOLTIP_EFFECT_ON_LIEGE
				}

				vbox = {
					margin = { 16 4 }
					textbox = {
						name = "modifiers"
						using = DefaultTooltipText
						layoutpolicy_horizontal = expanding
						multiline = yes
						fonttintcolor = "[TooltipInfo.GetTintColor]"
						alwaystransparent = no

						block "modifier_list" { }
					}
				}
			}

			# Breakdown
			vbox = {
				name = "aptitude_breakdown"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 0 8 }


				# Header
				hbox = {
					layoutpolicy_horizontal = expanding
					text_single = {
						layoutpolicy_horizontal = expanding
						default_format = "#S"
						text = COURT_POSITION_aptitude_character_possessive
					}
					expand = { }
				}

				# The Breakdown
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datamodel = "[ValueBreakdown.GetSubValues]"
					alwaystransparent = no
					margin = { 16 4 }

					item = {
						hbox = {
							name = "value_breakdown"
							spacing = 5

							layoutpolicy_horizontal = expanding

							text_single = {
								name = "name"
								layoutpolicy_horizontal = expanding
								text = "[ValueBreakdown.GetName]"
								fonttintcolor = "[TooltipInfo.GetTintColor]"
								margin_right = 10
							}

							text_single = {
								visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
								name = "value_with_tooltip"
								text = "[ValueBreakdown.GetValue|L]"
								align = right
								fonttintcolor = "[TooltipInfo.GetTintColor]"

								using = tooltip_below

								tooltipwidget = {
									recursive = yes

									widget_value_breakdown_tooltip = { }
								}
							}

							text_single = {
								visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
								name = "value_with_no_tooltip"
								text = "[ValueBreakdown.GetValue]"
								align = right
								fonttintcolor = "[TooltipInfo.GetTintColor]"
							}
						}
					}
				}
			}
		}
	}

	type cost_breakdown_vbox = vbox
	{
		vbox = {
			using = ocr_off
			margin = { 10 0 }

			background = {
				visible = "[Not( CostBreakdown.CanAffordCosts( GetPlayer ) )]"
				using = Status_Bad
				margin_top = 5
			}

			hbox = {
				name = "costs"
				visible = "[CostBreakdown.HasAnyCost]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 5

				block "heading"
				{
					text_single = {
						name = "cost_heading"


						block "heading_text"
						{
							text = "COST_HEADING"
						}
					}
				}

				hbox = {
					name = "piety_cost"
					visible = "[CostBreakdown.HasCost( 'piety' )]"
					datacontext = "[CostBreakdown.AccessBreakdownTooltip( 'piety' )]"
					tooltipwidget = { widget_value_breakdown_tooltip = { } }

					spacing = 2

					icon = {
						name = "icon_piety"
						size = { 30 30 }
						texture = "[GetPlayer.GetPietyLevelTexture]"
					}

					text_single = {
						name = "piety"
						text = "[CostBreakdown.GetCost( 'piety' )|0]"


					}
				}

				text_single = {
					name = "prestige"

					datacontext = "[CostBreakdown.AccessBreakdownTooltip( 'prestige' )]"
					visible = "[CostBreakdown.HasCost( 'prestige' )]"

					raw_text = "@prestige_icon![CostBreakdown.GetCost( 'prestige' )|0]"



					tooltipwidget = { widget_value_breakdown_tooltip = { } }
				}

				text_single = {
					name = "renown"

					datacontext = "[CostBreakdown.AccessBreakdownTooltip( 'renown' )]"
					visible = "[CostBreakdown.HasCost( 'renown' )]"

					raw_text = "@dynasty_prestige_icon![CostBreakdown.GetCost( 'renown' )|0]"



					tooltipwidget = { widget_value_breakdown_tooltip = { } }
				}

				text_single = {
					name = "gold"
					datacontext = "[CostBreakdown.AccessBreakdownTooltip( 'gold' )]"
					visible = "[CostBreakdown.HasCost( 'gold' )]"

					raw_text = "@gold_icon![CostBreakdown.GetCost( 'gold' )|0]"



					tooltipwidget = { widget_value_breakdown_tooltip = { } }
				}
			}

			text_single  = {
				visible = "[Not( CostBreakdown.HasAnyCost )]"
				text = "NO_COST_HEADING"
				using = Font_Size_Small

			}
		}

		vbox = {
			using = ocr_on

			hbox = {
				name = "costs"
				visible = "[CostBreakdown.HasAnyCost]"
				layoutpolicy_horizontal = expanding

				block "heading"
				{
					text_single = {
						name = "cost_heading"
						margin_right = 3

						block "heading_text"
						{
							text = "COST_HEADING"
						}
					}
				}

				hbox = {
					name = "piety_cost"
					visible = "[CostBreakdown.HasCost( 'piety' )]"
					datacontext = "[CostBreakdown.AccessBreakdownTooltip( 'piety' )]"
					tooltipwidget = { widget_value_breakdown_tooltip = { } }

					text_single = {
						name = "piety"
						raw_text = "piety [CostBreakdown.GetCost( 'piety' )|0]."
					}
				}

				text_single = {
					name = "prestige"

					datacontext = "[CostBreakdown.AccessBreakdownTooltip( 'prestige' )]"
					visible = "[CostBreakdown.HasCost( 'prestige' )]"

					raw_text = "prestige [CostBreakdown.GetCost( 'prestige' )|0]."


					tooltipwidget = { widget_value_breakdown_tooltip = { } }
				}

				text_single = {
					name = "renown"

					datacontext = "[CostBreakdown.AccessBreakdownTooltip( 'renown' )]"
					visible = "[CostBreakdown.HasCost( 'renown' )]"

					raw_text = "renown [CostBreakdown.GetCost( 'renown' )|0]."



					tooltipwidget = { widget_value_breakdown_tooltip = { } }
				}

				text_single = {
					name = "gold"
					datacontext = "[CostBreakdown.AccessBreakdownTooltip( 'gold' )]"
					visible = "[CostBreakdown.HasCost( 'gold' )]"

					raw_text = "gold [CostBreakdown.GetCost( 'gold' )|0]."

					tooltipwidget = { widget_value_breakdown_tooltip = { } }
				}
			}

			hbox = {
				visible = "[Not( CostBreakdown.HasAnyCost )]"

				text_single  = {
					text = "NO_COST_HEADING"
				}

				dot = { }

			}
		}

	}
}
