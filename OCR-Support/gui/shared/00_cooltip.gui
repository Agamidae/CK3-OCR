
types Cooltips
{
	type LandedTitleTooltipBase = object_tooltip_pop_out {
		blockoverride "header_additions" {
			# margin_top = -4

			button_text = {
			    blockoverride "text" {
			        raw_text = "Pan camera, shift Q"
			    }
				onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
				shortcut = map_mode_9
			}

			# coa_title_small_crown = {
			# 	size = { 40 50 }
			# 	blockoverride "coa_tooltip" { }
			# 	blockoverride "coa_hover_glow_visible"
			# 	{
			# 		visible = no
			# 	}
			# }
		}

		blockoverride "title_text" {
			text = "[Title.GetNameWithUnderlyingNoTooltip|U]"
		}

		blockoverride "subheading" {
			margin_left = 6

			vbox_title_type_text = {
				layoutpolicy_horizontal = expanding
			}
		}

		blockoverride "description_text" {
			text = "[Title.GetCOADefaultTooltip]"
		}

		blockoverride "concept_link" {
			text = [title|E]
		}

		blockoverride "extra_data" {
			textbox = {
				using = DefaultTooltipText
				layoutpolicy_horizontal = expanding
				multiline = yes
				fonttintcolor = "[TooltipInfo.GetTintColor]"
				block "highlight_text" { }
			}
		}
	}

	type artifact_tooltip = widget
	{
		using = GeneralTooltipSetup
		block "alwaystransparent" {
			alwaystransparent = no
		}

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			block "alwaystransparent" {
				alwaystransparent = no
			}
		}

		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 20 10 }
			margin_bottom = 16

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 6 4 }
				margin_bottom = 12

				background = {
					name = "header"
					texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
					spriteType = Corneredstretched
					align = vcenter|left
					margin = { 15 0 }
					texture_density = 2

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 160 0 }
						blend_mode = alphamultiply
						alpha = 0.5
					}

					modify_texture = {
						name = "overlay"
						texture = "gfx/interface/component_overlay/overlay_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					vbox = {
						text_single = {
							layoutpolicy_horizontal = expanding
							name = "title"
							raw_text = "[Artifact.GetNameNoTooltip]."
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3

							text_single = {
								layoutpolicy_horizontal = expanding
								name = "rarity"
								raw_text = "[Artifact.GetRarityAndSlotType]."
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								name = "artifact_category"
								raw_text = "[Artifact.GetCategory]."
							}

							expand = {}
						}

					}

					expand = {}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 10

				hbox = { #icon, durability and effects
					layoutpolicy_horizontal = expanding
					spacing = 10

					background = {
						layoutpolicy_horizontal = expanding
						using = Background_Area
						margin = { 15 5 }
						margin_top = 5
					}

					vbox = {
						layoutpolicy_vertical = expanding
						using = vanilla

						icon_artifact = {
							size = { 160 160 }
							blockoverride "tooltipwidget" {}
						}

						hbox_artifact_durability = {}

						expand = {}
					}

					vbox = {
						name = "main_text"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						spacing = 5

						hbox = {
							name = "modifiers"
							layoutpolicy_horizontal = expanding

							text_multi = {
								visible = "[Artifact.CanBenefitPlayer]"
								max_width = 300
								autoresize = yes
								text = ARTIFACT_EFFECT
							}

							text_multi = {
								visible = "[Not( Artifact.CanBenefitPlayer )]"
								max_width = 300
								autoresize = yes
								text = ARTIFACT_EFFECT
								default_format = "#low"
								format_override = { P low }
								#format_override = { L X }
								format_override = { E low }
								#format_override = { S low }
							}

							expand = {}
						}

						hbox = {
							name = "fallback"
							layoutpolicy_horizontal = expanding

							visible = "[Not( Artifact.CanBenefitPlayer )]"

							text_multi = {
								max_width = 300
								autoresize = yes
								text = "ARTIFACT_FALLBACK_EFFECT"
							}
							expand = {}
						}
						expand = {}
					}

					expand = {}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					spacing = 3

					vbox = {
						layoutpolicy_horizontal = expanding
						block "hide_artifact_creator" {}

						hbox = {
							name = "current_holder"
							layoutpolicy_horizontal = expanding
							text_single = {
								name = "imminent_claim"
								visible = "[Artifact.HasImminentHouseClaim( Artifact.GetOwner.Self )]"
								text = "IMMINENT_HOUSE_CLAIMANT"
								max_width = 230
							}
							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							text_single = {
								name = "owner"
								text = "ARTIFACT_CURRENT_HOLDER"
								max_width = 350
							}
							expand = {}
						}

						hbox = {
							name = "artifact_creator"
							visible = "[Artifact.HasCreator()]"
							layoutpolicy_horizontal = expanding

							text_single = {
								name = "creator"
								text = "ARTIFACT_CREATOR"
								max_width = 350
							}

							expand = {}
						}
					}

					hbox = {
						datacontext = "[Artifact.GetAssociatedTitle]"
						visible = "[Title.IsValid]"
						layoutpolicy_horizontal = expanding

						coa_title_tiny_crown = {
							size = { 40 50 }
							blockoverride "coa_tooltip" {}
							blockoverride "coa_hover_glow_visible"
							{
								visible = no
							}
						}

						text_single = {
							name = "association"
							text = "ARTIFACT_TITLE_ASSOCIATION"
						}
						expand = {}
					}

					text_multi = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						max_width = 490
						margin_bottom = 4
						align = left
						autoresize = yes

						text = "[Artifact.GetDesc]"
						default_format = "#F"
					}

					expand = {}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				block "extra_information"
				{
					text_multi = {
						visible = "[Not( Artifact.CanPlayerEquip )]"
						text = "[Artifact.GetCanPlayerEquipDesc]"
						max_width = 300
						autoresize = yes
					}
				}
				expand = {}
			}
		}
	}
}

container = {
	name = "GameConceptTooltipDefault"
	alwaystransparent = no

	object_tooltip_pop_out = {

		blockoverride "header_additions" {
			hbox = {
				visible = "[And(GameConceptTooltip.HasIcon, GetVariableSystem.Exists('ocr'))]"
				margin_right = 10
				margin_top = 8
				margin_left = -4

				icon = {
					size = { 52 52 }
					texture = "[GameConceptTooltip.GetIcon]"
					tintcolor = "[TooltipInfo.GetTintColor]"
					frame = "[GameConceptTooltip.GetFrame]"
					framesize = "[GameConceptTooltip.GetFrameSize]"
				}
			}
		}

		blockoverride "title_text" {
			margin = { 0 8 }
			raw_text = "Tooltip for [GameConceptTooltip.GetOriginalAliasName]." # modded
		}

		blockoverride "concept_link" {
			text = "[GameConceptTooltip.GetParentText]"
		}

		blockoverride "description_text" {
			text = "[GameConceptTooltip.GetDescription]"
			max_width = 400
		}

		blockoverride "bg_texture"
		{
			texture = "gfx/interface/tooltips/tooltip_bg_gameconcept.dds"
		}
	}
}


container = {
	name = CharacterTooltip

	alwaystransparent = no
	ignoreinvisible = yes

	container_character_tooltip = {
		using = vanilla
	}
	container_character_tooltip_ocr = {
		using = ocr
	}
}


types OCR {
	type container_character_tooltip_ocr = container
	{
		alwaystransparent = no

		using = DefaultTooltipBackground
		# using = GeneralTooltipSetup
		flowcontainer = {
			direction = vertical

			container = {
				cooltip_type_ocr = {
					blockoverride "bg_visible" {
						visible = no
					}

					blockoverride "char_tooltip_opinion"
					{
						# don't show opinion again
					}
				}
			}
		}
	}

	type cooltip_type_ocr = widget {
		name = "character_tooltip"
		alwaystransparent = no
		using = GeneralTooltipSetup

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
			block "bg_visible" {
				visible = yes
			}
		}

		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 15 15 }
			margin_top = 3
			maximumsize = { 600 -1 }

			## REAL CHARACTERS
			vbox = {
				visible = "[Character.IsValid]"
				layoutpolicy_horizontal = expanding

				vbox = {
					name = "personal"
					layoutpolicy_horizontal = expanding

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "Tooltip."
					}

					hbox = {
					    layoutpolicy_horizontal = expanding
							spacing = 3

							char_name = {
							}

							text_single = {
								raw_text = "[Character.GetAge]."
							}

							text_single = {
								visible = "[Not(Character.IsDeadAndValid)]"
								raw_text = "[Character.Custom('character_health')] health."
								tooltip = "[Character.GetHealthInfo]"
							}

					    expand = { }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[Character.GetRelationToString( GetPlayer )]."
					}

					hbox = {
					    layoutpolicy_horizontal = expanding
							visible = "[And(Character.IsAlive, Not(Character.IsLocalPlayer))]"

					    text_single = {
					    	raw_text = "[Character.GetOpinionOf( GetPlayer )|=0] opinion."
					    }

							text_single = {
								visible = "[Character.HasLandedTitles]"
								raw_text = "[Character.GetMilitaryStrengthText] men."
							}

					    expand = { }
					}

					hbox = {
					    layoutpolicy_horizontal = expanding
							spacing = 3

							hbox_personality_traits = {}

							text_single = {
								raw_text = "+"
							}

							hbox_other_traits = {}

							dot_l = { }

					    expand = { }
					}


					hbox = {
					    layoutpolicy_horizontal = expanding

					    hbox_skills_grid_character_named_full = {}

					    expand = { }
					}


					vbox = {
						layoutpolicy_horizontal = expanding
						margin_top = 10
						margin_bottom = 10

						hbox = {
							name = "AI_personality"
							layoutpolicy_horizontal = expanding
							spacing = 2

							text_single = {
								visible = "[Not( Character.IsPlayer )]"
								text = "[Character.GetAIPersonalityNoTooltip]"
								default_format = "#L"
								tooltip = "AI_PERSONALITY_TT"
								align = nobaseline
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								icon = {
									visible = "[Not(Character.IsFemale)]"
									size = { 20 20 }
									framesize = { 40 40 }
									frame = "[Character.GetSexualityFrame]"
									texture = "gfx/interface/icons/character_status/sexuality_icons_male.dds"
									tooltip = "SEXUALITY_TT"
								}

								icon = {
									visible = "[Character.IsFemale]"
									size = { 20 20 }
									framesize = { 40 40 }
									frame = "[Character.GetSexualityFrame]"
									texture = "gfx/interface/icons/character_status/sexuality_icons_female.dds"
									tooltip = "SEXUALITY_TT"
								}

								portrait_status_icons = {
									blockoverride "direction"
									{
										direction = horizontal
									}
								}

								expand = {}
							}

							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								visible = "[Character.IsAlive]"
								text = "[Character.Custom('CooltipSpouseListing')]"
								layoutpolicy_horizontal = expanding
								align = nobaseline
								max_width = 350
							}

							expand = {}
						}

						text_single = {
							visible = "[And( Character.IsAlive, Not( Character.IsImprisoned ) )]"
							layoutpolicy_horizontal = expanding
							text = "CHARACTER_LOCATION_TOOLTIP"
							align = nobaseline

						}

						text_single = {
							visible = "[And( Character.IsAlive, Character.IsImprisoned )]"
							layoutpolicy_horizontal = expanding
							text = "CHARACTER_IMPRISONED_TOOLTIP"
							align = nobaseline
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						background = {
							using = Background_Area
							margin = { 15 0 }
						}

						hbox = {
							name = "faith_and_culture"

							button_religion_icon = {
								name = "faith_button"
								datacontext = "[Character.GetFaith]"
								size = { 45 45 }
							}

							vbox = {
								margin_right = 10
								margin_left = 3

								text_single = {
									datacontext = "[Character.GetFaith]"
									layoutpolicy_horizontal = expanding
									text = "FAITH_COOLTIP_WINDOW"
									align = nobaseline

									tooltipwidget = { faith_tooltip_click = {} }

									button_normal = {
										size = { 100% 100% }
										onclick = "[OpenGameViewData( 'faith', Faith.GetID )]"
									}

								}

								text_single = {
									datacontext = "[Character.GetCulture]"
									layoutpolicy_horizontal = expanding
									text = "CULTURE_COOLTIP_WINDOW"
									align = nobaseline

									button_normal = {
										size = { 100% 100% }
										onclick = "[OpenGameViewData( 'culture_window', Culture.GetID )]"
										# shortcut = "innovations_window"
									}
								}
							}
						}

						hbox = {
							name = "house"
							datacontext = "[Character.GetHouse]"
							margin = { 10 5 }

							coa_house_small = {
								container = {
									name = "characters_status_in_house"
									parentanchor = bottom|right

									icon = {
										name = "bastard"
										visible = "[Not(Character.IsLegitimateMemberOfHouse)]"
										framesize = { 40 40 }
										frame = 4
										size = { 25 25 }
										texture = "gfx/interface/icons/portraits/relation.dds"
										tooltip = "CV_TT_BASTARD"
									}

									icon = {
										name = "head_icon"
										size = { 20 20 }
										visible = "[LessThan_int32(Character.GetDynastyHeadRelationFrame('(bool)no'), '(int32)9')]"

										texture = "gfx/interface/icons/portraits/relation.dds"
										framesize = { 40 40 }
										frame = "[Character.GetDynastyHeadRelationFrame('(bool)no')]"
										tooltip = "[Character.GetDynastyHeadTooltip]"
									}
								}
							}

							text_multi = {
								visible = "[Character.HasDynasty]"
								margin = { 5 0 }
								text = "HOUSE_VIEW_NAME_WITH_HOUSE"
								max_width = 100
								autoresize = yes
							}
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Character.HasLandedTitles]"
					margin = { 0 5 }
					spacing = 5

					coa_realm_small_crown = {
						name = "realm_flag"

						blockoverride "coa_hover_glow_visible"
						{
							visible = no
						}
					}

					realm_name_and_type_vbox = {
						datacontext = "[Character.GetPrimaryTitle]"
					}
				}


				block "extra_info" { }

				# Keep this here for now, may want something in character view
				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					text = "[Character.GetHeirToDesc]"
				}

				# mostly for pope
				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					text = "CHARACTER_BIRTH_NAME_TOOLTIP"
					visible = "[Character.HasRegnalName]"
				}

				spacer = {
					size = { 10 10 }
				}

				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					block "interaction_info" { }
				}

				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					text = "[Character.GetDebugTooltip]"
					visible = "[InDebugMode]"
				}

				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					text = "CHARACTER_KILLER_TOOLTIP"
					visible = "[And( InDebugMode, Character.GetKiller.IsValid )]"
				}

				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					raw_text = "[GetAnimationTooltip( PdxGuiWidget.Self, Character.Self )]"
					visible = "[ShouldShowAnimationInfo]"
				}
			}

			## NULL CHARACTER
			vbox = {
				visible = "[Not( Character.IsValid )]"

				cooltip_paragraph = {
					block "portrait_button_no_character_text"
					{
						text = "CHARACTER_TOOLTIP_NO_PORTRAIT"
					}
				}
			}
		}
	}
}

types StruggleTooltipTypes {

	type StrugglePhaseEffectWar = vbox {
		layoutpolicy_horizontal = expanding
		text_single = {
			layoutpolicy_horizontal = expanding
			tooltipwidget = phase_effect_tooltip_war
			text = "STRUGGLE_EFFECT_LABEL_WAR"
		}

	}

	type StrugglePhaseEffectCulture = vbox {
		layoutpolicy_horizontal = expanding
		text_single = {
			tooltipwidget = phase_effect_tooltip_culture
			layoutpolicy_horizontal = expanding
			text = "STRUGGLE_EFFECT_LABEL_CULTURE"
		}
	}

	type StrugglePhaseEffectFaith = vbox {
		layoutpolicy_horizontal = expanding
		text_single = {
			tooltipwidget = phase_effect_tooltip_faith
			layoutpolicy_horizontal = expanding
			text = "STRUGGLE_EFFECT_LABEL_FAITH"
		}

	}

	type StrugglePhaseEffectOther = vbox {
		layoutpolicy_horizontal = expanding
		text_single = {
			tooltipwidget = phase_effect_tooltip_other
			layoutpolicy_horizontal = expanding
			text = "STRUGGLE_EFFECT_LABEL_OTHER"
		}
	}
}

template unit_icon_item_tooltip {

	widget = {
		alwaystransparent = no
		using = GeneralTooltipSetup
		datacontext = "[UnitItem.GetArmy]"

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		hbox = {
			margin = { 10 5 }
			set_parent_size_to_minimum = yes

			vbox = {
				margin = { 10 10 }

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Tooltip."
				}
				text_single = {
					raw_text = "[UnitItem.GetArmy.GetNameNoTooltip]"
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					soldiers_and_quality_small_text = {
						datacontext = [Army.GetComposition]
					}
					expand = { }
				}

				hbox = {
					name = "troop_breakdown"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					dynamicgridbox = {
						name = "troops"
						datamodel = "[CalculateBreakdownItems(Army.Self)]"

						# datamodel_wrap = 5
						# flipdirection = yes
						# maxverticalslots = 2

						item = {
							widget = {
								tooltip = "ARMY_VIEW_TROOP_TT"

								hbox = {
									set_parent_size_to_minimum = yes
									margin_left = 5
									spacing = 3

									text_single = {
										name = "men_at_arms_icon"
										visible = "[TroopItem.IsMaa]"
										raw_text = "[TroopItem.GetRegiment.GetRegiment.GetMAAType.GetName]:"
									}

									text_single = {
										raw_text = "Levies:"
										visible = "[TroopItem.IsLevies]"
									}

									text_single = {
										raw_text = "Knights:"
										visible = "[TroopItem.IsKnight]"
									}

									text_single = {
										layoutpolicy_horizontal = growing
										raw_text = "[TroopItem.GetCount|*],"
									}
								}
							}
						}
					}
					expand = {
						layoutpolicy_vertical = expanding
					}
				}

				divider_light =
				{
					layoutpolicy_horizontal = expanding
				}

				button_text = {
					blockoverride "text" {
						raw_text = "Owner: [UnitItem.GetOwner.GetPrimaryTitle.GetNameNoTierNoTooltip]."
					}
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					datacontext = "[Army.GetCommander]"
					visible = "[Character.IsValid]"
					layoutpolicy_horizontal = expanding

					text_single = {
						# layoutpolicy_horizontal = expanding
						text = "ARMY_TOOLTIP_COMMANDER"
					}

					text_single = {
						raw_text = "."
					}

					text_single = {
						raw_text = " "
					}

					hbox = {
						tooltip = "[Character.GetCommanderAdvantageDesc]"
						spacing = 3
						text_single = {
							raw_text = "Advantage:"
						}
						text_single = {
							text = "ARMY_TOOLTIP_COMMANDER_ADVANTAGE"
						}
					}

					text_single = {
						raw_text = "."
					}

					expand = { }
				}

				text_single = {
					visible = "[Not( Army.GetCommander.IsValid )]"
					layoutpolicy_horizontal = expanding
					text = "ARMY_TOOLTIP_NO_COMMANDER"
				}

				expand = { }

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[UnitItem.IsRulerCommander]"
					margin_left = 4

					icon = {
						texture = "gfx/interface/icons/map_icons/commander_is_leader.dds"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						datacontext = "[UnitItem.GetUnitPortraitCharacter]"
						text = "COMMANDER_IS_LEADER"
						align = left
					}
				}
				hbox = {
					visible = "[UnitItem.HasDisembarkPenalty]"
					layoutpolicy_horizontal = expanding
					margin_left = 4

					icon = {
						name = "sea_sickness_icon"
						size = { 24 24 }
						texture = "gfx/interface/icons/map_icons/army_icon_disembarked.dds"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[Army.GetEmbarkInfoForTooltip]"
						align = left
					}
				}

				hbox = {
					visible = "[UnitItem.IsGathering]"
					layoutpolicy_horizontal = expanding
					margin_left = 4

					icon = {
						texture = "gfx/interface/icons/map_icons/army_icon_gathering.dds"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = "ARMY_TOOLTIP_IS_GATHERING"
						align = left
					}
				}


				vbox = {
					visible = "[Not(Army.IsNeutralToPlayer)]"
					layoutpolicy_horizontal = expanding
					spacing = 4
					hbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 4
						tooltip = "ARMY_ATTRITION_TT"
						visible = "[GreaterThan_CFixedPoint( Army.GetArmyAttritionPercentage, '(CFixedPoint)0' )]"
						icon = {
							texture = "gfx/interface/icons/map_icons/attrition_icon.dds"
							size = { 24 24 }
						}
						text_single = {
							layoutpolicy_horizontal = expanding
							name = "attrition"
							text = "ARMY_TOOLTIP_ATTRITION"
							align = left
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 4

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "[Army.GetSupplyInfoForTooltip]"
							tooltip = "[Army.GetSupplyStateTooltip]"
							align = left
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Army.IsMoving]"
						margin_left = 4
						icon = {
							name = "unit_retreating"
							visible = "[UnitItem.IsRetreating]"
							texture = "gfx/interface/icons/map_icons/army_icon_retreating.dds"
						}
						icon = {
							name = "unit_moving"
							visible = "[Not(UnitItem.IsRetreating)]"
							texture = "gfx/interface/icons/combat_effects/moving_army.dds"
							size = { 24 24 }
						}
						text_single = {
							layoutpolicy_horizontal = expanding
							text = "[Army.GetMovementInfoForTooltip]"
							align = left
						}
					}

					hbox = {
						visible = "[UnitItem.IsMovementLocked]"
						layoutpolicy_horizontal = expanding
						margin_left = 4

						icon = {
							texture = "gfx/interface/icons/map_icons/movement_locked.dds"
							size = { 24 24 }
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "ARMY_TOOLTIP_IS_MOVEMENT_LOCKED"
							align = left
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[UnitItem.GetArmy.IsRaidArmy]"
					margin_left = 4

					hbox = {
						visible = "[UnitItem.GetArmy.IsRaidLootCapped]"
						tooltip = ARMY_AT_LOOT_CAP_TOOLTIP
						layoutpolicy_horizontal = expanding

						icon = {
							texture = "gfx/interface/icons/map_icons/army_icon_at_loot_cap.dds"
							size = { 24 24 }
						}
						text_single = {
							layoutpolicy_horizontal = expanding
							text = "ARMY_AT_LOOT_CAP"
							align = left
						}
					}


					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(UnitItem.GetArmy.IsRaidLootCapped)]"
						text = "ARMY_LOOT_INFO"
						align = left
					}
				}

				block "extra_unit_info" { }

				text_single = {
					visible = "[And( InDebugMode, Not(ReleaseMode) )]"
					# Deliberately unlocalized since this is debug functionality
					layoutpolicy_horizontal = expanding
					raw_text = "Army: [Army.GetArmyId] Unit: [Army.GetUnitId]"
					align = left
				}

				text_single = {
					visible = "[And( InDebugMode, Not(ReleaseMode) )]"
					# Deliberately unlocalized since this is debug functionality
					layoutpolicy_horizontal = expanding
					raw_text = "#E AI Coordinator: [Army.GetAiCoordinatorId]#!"
					align = left
					raw_tooltip = "Stack: [Army.GetAiUnitStackId] Sub: [Army.GetAiSubUnitStackId]"
				}

				text_multi = {
					visible = "[And( InDebugMode, Not(ReleaseMode) )]"
					# Deliberately unlocalized since this is debug functionality
					layoutpolicy_horizontal = expanding
					autoresize = yes
					text = "[Army.GetAIInfo]"
					align = left
				}
			}
		}
	}
}

template unit_icon_item_tooltip_ocr {

	widget = {
		alwaystransparent = no
		using = GeneralTooltipSetup

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		hbox = {
			margin = { 10 5 }
			set_parent_size_to_minimum = yes

			vbox = {
				margin = { 10 10 }

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Tooltip."
				}
				text_single = {
					raw_text = "[Army.GetNameNoTooltip]."
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					soldiers_and_quality_small_text = {
						datacontext = [Army.GetComposition]
					}
					expand = { }
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[ObjectsEqual(Army.GetOwner.GetID, Army.GetCommander.GetID)]"
					margin_left = 4

					text_single = {
						layoutpolicy_horizontal = expanding
						datacontext = "[Army.GetCommander]"
						raw_text = "[Localize('COMMANDER_IS_LEADER')]."
						align = left
					}
				}
				hbox = {
					visible = "[Army.IsRecentlyDisembarked]"
					layoutpolicy_horizontal = expanding
					margin_left = 4

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[Army.GetEmbarkInfoForTooltip]."
						align = left
					}
				}

				hbox = {
					visible = "[Army.IsGathering]"
					layoutpolicy_horizontal = expanding
					margin_left = 4

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[Localize('ARMY_TOOLTIP_IS_GATHERING')]."
						align = left
					}
				}

				vbox = {
					visible = "[Not(Army.IsNeutralToPlayer)]"
					layoutpolicy_horizontal = expanding
					spacing = 4
					hbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 4
						tooltip = "ARMY_ATTRITION_TT"
						visible = "[GreaterThan_CFixedPoint( Army.GetArmyAttritionPercentage, '(CFixedPoint)0' )]"

						text_single = {
							layoutpolicy_horizontal = expanding
							name = "attrition"
							raw_text = "[Localize('ARMY_TOOLTIP_ATTRITION')]."
							align = left
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 4

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[Army.GetSupplyInfoForTooltip]."
							tooltip = "[Army.GetSupplyStateTooltip]"
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Army.IsMoving]"
						margin_left = 4
						spacing = 3

						text_single = {
							visible = "[Army.IsRetreating]"
							raw_text = "Retreating to"
						}

						text_single = {
							visible = "[Not(Army.IsRetreating)]"
							raw_text = "Moving to"
						}
						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[Army.GetMovementInfoForTooltip]."
						}
					}

					# hbox = {
					# 	visible = "[UnitItem.IsMovementLocked]"
					# 	layoutpolicy_horizontal = expanding
					# 	margin_left = 4
					#
					# 	icon = {
					# 		texture = "gfx/interface/icons/map_icons/movement_locked.dds"
					# 		size = { 24 24 }
					# 	}
					#
					# 	text_single = {
					# 		layoutpolicy_horizontal = expanding
					# 		text = "ARMY_TOOLTIP_IS_MOVEMENT_LOCKED"
					# 		align = left
					# 	}
					# }
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Army.IsRaidArmy]"
					margin_left = 4

					hbox = {
						visible = "[Army.IsRaidLootCapped]"
						tooltip = ARMY_AT_LOOT_CAP_TOOLTIP
						layoutpolicy_horizontal = expanding


						text_single = {
							layoutpolicy_horizontal = expanding
							text = "ARMY_AT_LOOT_CAP"
							align = left
						}
					}


					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(Army.IsRaidLootCapped)]"
						text = "ARMY_LOOT_INFO"
						align = left
					}
				}

				hbox = {
					name = "troop_breakdown"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					dynamicgridbox = {
						name = "troops"
						datamodel = "[CalculateBreakdownItems(Army.Self)]"

						# datamodel_wrap = 5
						# flipdirection = yes
						# maxverticalslots = 2

						item = {
							widget = {
								tooltip = "ARMY_VIEW_TROOP_TT"

								hbox = {
									set_parent_size_to_minimum = yes
									margin_left = 5
									spacing = 3

									text_single = {
										name = "men_at_arms_icon"
										visible = "[TroopItem.IsMaa]"
										raw_text = "[TroopItem.GetRegiment.GetRegiment.GetMAAType.GetName]:"
									}

									text_single = {
										raw_text = "Levies:"
										visible = "[TroopItem.IsLevies]"
									}

									text_single = {
										raw_text = "Knights:"
										visible = "[TroopItem.IsKnight]"
									}

									text_single = {
										layoutpolicy_horizontal = growing
										raw_text = "[TroopItem.GetCount|*],"
									}
								}
							}
						}
					}
					expand = {
						layoutpolicy_vertical = expanding
					}
				}

				button_text = {
					blockoverride "text" {
						raw_text = "Owner: [Army.GetOwner.GetPrimaryTitle.GetNameNoTierNoTooltip]."
					}
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					datacontext = "[Army.GetCommander]"
					visible = "[Character.IsValid]"
					layoutpolicy_horizontal = expanding

					text_single = {
						# layoutpolicy_horizontal = expanding
						text = "ARMY_TOOLTIP_COMMANDER"
					}

					text_single = {
						raw_text = "."
					}

					text_single = {
						raw_text = " "
					}

					hbox = {
						tooltip = "[Character.GetCommanderAdvantageDesc]"
						spacing = 3
						text_single = {
							raw_text = "Advantage:"
						}
						text_single = {
							text = "ARMY_TOOLTIP_COMMANDER_ADVANTAGE"
						}
					}

					text_single = {
						raw_text = "."
					}

					expand = { }
				}

				text_single = {
					visible = "[Not( Army.GetCommander.IsValid )]"
					layoutpolicy_horizontal = expanding
					text = "ARMY_TOOLTIP_NO_COMMANDER"
				}


				widget = {
					size = { 0 5 }
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Orders."
				}
				# text_single = {
				# 	visible = "[And( InDebugMode, Not(ReleaseMode) )]"
				# 	# Deliberately unlocalized since this is debug functionality
				# 	layoutpolicy_horizontal = expanding
				# 	raw_text = "Army: [Army.GetArmyId] Unit: [Army.GetUnitId]"
				# 	align = left
				# }
				# #
				# text_single = {
				# 	visible = "[And( InDebugMode, Not(ReleaseMode) )]"
				# 	# Deliberately unlocalized since this is debug functionality
				# 	layoutpolicy_horizontal = expanding
				# 	raw_text = "#E AI Coordinator: [Army.GetAiCoordinatorId]#!"
				# 	align = left
				# 	raw_tooltip = "Stack: [Army.GetAiUnitStackId] Sub: [Army.GetAiSubUnitStackId]"
				# }


				text_multi = {
					# visible = "[And( InDebugMode, Not(ReleaseMode) )]"
					# Deliberately unlocalized since this is debug functionality
					layoutpolicy_horizontal = expanding
					autoresize = yes
					raw_text = "[Army.GetAIInfo]"
					align = left
					max_width = 700
				}
			}
		}
	}
}

template unit_icon_tooltip {
	container = {
		using = GeneralTooltipSetup
		position = { 40 40 }

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		alwaystransparent = no

		flowcontainer = {
			datamodel = "[UnitMapIcon.GetUnitItems]"
			visible = "[GreaterThan_int32(GetDataModelSize(UnitMapIcon.GetUnitItems), '(int32)1')]"
			direction = vertical
			spacing = 5
			margin = { 30 15 }
			margin_right = 20


			text_single = {
				raw_text = "Tooltip."
			}

			text_single = {
				text = "ARMY_ICON_HEADER"
			}

			item = {
				flowcontainer = {
					spacing = 5
					ignoreinvisible = yes

					container_allied_unit_icon_item = {
						blockoverride "unit_items" { }
						blockoverride "multi_select" { }
						blockoverride "onclick" {
							onclick = "[UnitMapIcon.OnClickArmy( Army.Self )]"
						}
						min_width = 120
					}
					container_hostile_unit_icon_item = {
						blockoverride "unit_items" { }
						blockoverride "multi_select" { }
						min_width = 120
					}

					text_single = {
						text = "ARMY_UNIT_COOLTIP_NAME"
					}

					tooltipwidget = {
						using = unit_icon_item_tooltip
					}

					using = tooltip_es
				}
			}
		}
		container = {
			visible = "[EqualTo_int32(GetDataModelSize(UnitMapIcon.GetUnitItems), '(int32)1')]"
			datamodel = "[UnitMapIcon.GetUnitItems]"

			item = {
				using = unit_icon_item_tooltip
			}
		}
	}
}

template phase_effect {
	vbox = {
		layoutpolicy_horizontal = expanding
		spacing = 12
		margin_bottom = 15

		background = {
			using = Background_Area_With_Header
			margin_left = 16
			margin_right = 16
		}

		text_single = {
			max_width = 400
			margin = { 0 5 }
			text = "STRUGGLE_TOOLTIP_EFFECTS_HEADER"
		}

		vbox = {
			name = "phase_effects"
			layoutpolicy_horizontal = expanding

			StrugglePhaseEffectWar = { }

			StrugglePhaseEffectCulture = { }

			StrugglePhaseEffectFaith = { }

			StrugglePhaseEffectOther = { }
		}
	}
}

template character_trait_tooltip {
	object_tooltip_pop_out = {

		blockoverride "header_additions" {
			hbox = {
				margin_right = 10
				margin_top = 8
				margin_left = -4

				trait_icon_texture = {
					blockoverride "icon_size"
					{
						size = { 52 52 }
						using = ocr_off
						tintcolor = "[TooltipInfo.GetTintColor]"
					}
				}
			}
		}

		blockoverride "title_text" {
			margin = { 0 8 }
			text = "[Trait.GetNameNoTooltipWithDefault( Character.Self )]"
		}

		blockoverride "concept_link" {
			text = "[Trait.GetTraitCategoryLabel]"
		}

		blockoverride "description_text" {
			block "actual_description_text" {
				text = "[Trait.GetFullDescription( Character.Self, Faith.Self )]"
			}
		}

		blockoverride "extra_data_after_description"
		{
			vbox = {
				name = "trait_level_tracks"
				layoutpolicy_horizontal = expanding
				visible = "[DataModelHasItems( Trait.GetLevelTracks )]"
				allow_outside = yes

				spacer = {
					size = { 10 10 }
				}

				# text_single = {
				# 	layoutpolicy_horizontal = expanding
				# 	text = "TRAIT_LEVEL_TRACKS_HEADER"
				# }

				vbox = {
					layoutpolicy_horizontal = expanding
					datamodel = "[Trait.GetLevelTracks]"
					spacing = 5
					allow_outside = yes

					item = {
						hbox = {
							layoutpolicy_horizontal = expanding
							allow_outside = yes
							spacing = 5
							margin_right = 20

							vbox = {
								using = ocr_off
								margin_top = 6

								icon = {
									size = { 30 30 }
									texture = "[TraitLevelTrack.GetIcon( Trait.Self, Character.Self )]"
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5

								widget = {
									using = vanilla
									size = { 0 15 }
									layoutpolicy_horizontal = expanding
									allow_outside = yes

									datacontext = "[Character.GetTraitTrackProgressBar( Trait.Self, TraitLevelTrack.Self )]"

									hbox_complex_bar_progress_next = {
										size = { 0 15 }
										layoutpolicy_horizontal = expanding
										tooltip = "TRAIT_LEVEL_TRACK_PROGRESS_TOOTLIP"
										using = tooltip_se
									}

									hbox_complex_bar_levels = {
										size = { 0 15 }
										layoutpolicy_horizontal = expanding

										blockoverride "marker"
										{
											widget_level_marker = {
												scale = 0.75
												datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
												visible = "[GreaterThanOrEqualTo_int32( TraitLevelTrackEntry.GetLevel, '(int32)0' )]"

												blockoverride "visible_active"
												{
													visible = "[EqualTo_int32( Character.GetTraitTrackLevel( Trait.Self, TraitLevelTrack.Self ), TraitLevelTrackEntry.GetLevel )]"
												}

												blockoverride "visible_inactive"
												{
													visible = "[Not( EqualTo_int32( Character.GetTraitTrackLevel( Trait.Self, TraitLevelTrack.Self ), TraitLevelTrackEntry.GetLevel ) )]"
												}

												blockoverride "marker_tooltip"
												{
													tooltip = "TRAIT_LEVEL_TRACK_TT"
													using = tooltip_se
												}

												blockoverride "marker_text"
												{
													text = "[TraitLevelTrackEntry.GetLevel]"
												}
											}
										}
									}
								}

								vbox = {
									using = ocr
									layoutpolicy_horizontal = expanding
									allow_outside = yes

									datacontext = "[Character.GetTraitTrackProgressBar( Trait.Self, TraitLevelTrack.Self )]"

									hbox_complex_bar_levels_ocr = {
										layoutpolicy_horizontal = expanding
										blockoverride "progress" {
										}
										blockoverride "track_name" {
											text_single = {
												visible = "[GreaterThan_int32(GetDataModelSize(Trait.GetLevelTracks), '(int32)1')]"
												raw_text = "Track [TraitLevelTrack.GetName]"
											}

											text_single = {
												visible = "[LessThan_int32(GetDataModelSize(Trait.GetLevelTracks), '(int32)2')]"
												raw_text = "There are"
											}

											text_single = {
												visible = "[GreaterThan_int32(GetDataModelSize(Trait.GetLevelTracks), '(int32)1')]"
												raw_text = "has"
											}
										}
										blockoverride "tiers" {
											raw_text = "[Subtract_int32(GetDataModelSize(ComplexBar.GetItems), '(int32)1')] levels, view tooltip."
										}
										blockoverride "xp" {
											text_single = {
												layoutpolicy_horizontal = expanding
												raw_text = "[Character.GetTraitTrackXp( Trait.Self, TraitLevelTrack.Self )|0] experience."
											}
										}
										blockoverride "active_only" {
											# visible = "[EqualTo_int32( Character.GetTraitTrackLevel( Trait.Self, TraitLevelTrack.Self ), TraitLevelTrackEntry.GetLevel )]"
											visible = no
										}
										# blockoverride "show_all" {
										# }
										blockoverride "modifiers" {
											visible = no
										}
										blockoverride "marker"
										{
											widget_level_marker_ocr = {
												datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
												visible = "[GreaterThanOrEqualTo_int32( TraitLevelTrackEntry.GetLevel, '(int32)0' )]"

												blockoverride "visible_active"
												{
													visible = "[EqualTo_int32( Character.GetTraitTrackLevel( Trait.Self, TraitLevelTrack.Self ), TraitLevelTrackEntry.GetLevel )]"
													raw_text = "Active level"
												}

												blockoverride "visible_inactive"
												{
													raw_text = "Inactive level"
													visible = "[Not( EqualTo_int32( Character.GetTraitTrackLevel( Trait.Self, TraitLevelTrack.Self ), TraitLevelTrackEntry.GetLevel ) )]"
												}

												blockoverride "marker_tooltip"
												{
													raw_text = "[TraitLevelTrackEntry.GetModifierDescription( Character.Self )][AddLocalizationIf( GreaterThan_int32( TraitLevelTrackEntry.GetLevel, '(int32)1' ), 'MODIFIER_PREVIOUS_LEVELS_APPLY_NEWLINE' )]"
													using = tooltip_se
												}

												blockoverride "marker_text"
												{
													raw_text = "[TraitLevelTrackEntry.GetLevel], at [TraitLevelTrackEntry.GetXpRequired] xp."
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

template accolade_type_tooltip {
	container = {
		alwaystransparent = no

		object_tooltip_pop_out = {
			blockoverride "title_text" {
				margin = { 0 8 }
				text = "[AccoladeType.GetNameNoTooltip]"
				default_format = "#T"
			}

			blockoverride "subheading" {
			}

			blockoverride "main_description" {
				text_single = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					max_width = 500
					fontsize_min = 14
					using = Font_Size_Small

					visible = "[And(Accolade.IsValid, Accolade.IsPrimaryType( AccoladeType.Self ))]"
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					text = "ACCOLADE_PRIMARY_TYPE"
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					max_width = 500
					fontsize_min = 14
					using = Font_Size_Small

					visible = "[And(Accolade.IsValid, Accolade.IsSecondaryType( AccoladeType.Self ))]"
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					text = "ACCOLADE_SECONDARY_TYPE"
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Not(Accolade.IsValid)]"

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "If primary attribute:"
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						datamodel = "[AccoladeType.GetRanks]"
						visible = "[Isnt('accolade_rank')]"

						item = {
							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Or(Or(IsIndex('(int32)0'), IsIndex('(int32)2')), IsIndex('(int32)4'))]"

								# text_single = {
								# 	raw_text = "[IndexNumber]"
								# }

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "[AccoladeType.GetLevelAndGloryOfRank( AccoladeRank.Self )],"
								}
								text_multi_wide = {
									layoutpolicy_horizontal = expanding
									text = "[AccoladeRank.GetEffects]"
								}
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						datamodel = "[AccoladeType.GetRanks]"
						visible = "[Is('accolade_rank')]"

						item = {
							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[IsIndex('(int32)4')]"

								# text_single = {
								# 	raw_text = "[IndexNumber]"
								# }

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "[AccoladeType.GetLevelAndGloryOfRank( AccoladeRank.Self )],"
								}
								text_multi_wide = {
									layoutpolicy_horizontal = expanding
									text = "[AccoladeRank.GetEffects]"
								}
							}
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "If secondary, effects will be obtained a rank later and will not unlock MAA."
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						shortcut = map_mode_1
						onclick = "[Toggle('accolade_rank')]"
					    blockoverride "text" {
					        raw_text = "[Select_CString(Is('accolade_rank'), 'Show other ranks', 'Skip to fifth rank')], hotkey E."
					    }
					}
				}

				# current rank number
				text_single = {
					margin_top = 10
					margin_bottom = 10
					layoutpolicy_horizontal = expanding
					visible = "[Accolade.IsValid]"
					text = "CURRENT_ACCOLADE_GLORY_AND_LEVEL"

				}

				# breakdown of primary effects
				vbox = {
					visible = "[And(Accolade.IsValid, Accolade.IsPrimaryType( AccoladeType.Self ))]"
					datamodel = "[AccoladeType.GetRanks]"
					margin_bottom = 10
					spacing = 5

					item = {
						widget = {
							visible = "[AccoladeType.IsPrimaryRank( AccoladeRank.Self )]"
							size = { 300 40 }
							tooltip = "ACCOLADE_RANK_HEADER_AND_EFFECTS_TT"
							using = tooltip_se

							background = {
								using = Background_Frame
								margin = { 10 0 }
							}

							hbox = {
								text_single = {
									layoutpolicy_horizontal = expanding
									text = "[AccoladeType.GetLevelAndGloryOfRank( AccoladeRank.Self )]"
									align = nobaseline
								}
							}
						}
					}
				}

				# breakdown of secondary effects
				vbox = {
					visible = "[And(Accolade.IsValid, Accolade.IsSecondaryType( AccoladeType.Self ))]"
					datamodel = "[AccoladeType.GetRanks]"
					margin_bottom = 10
					spacing = 5

					item = {
						widget = {
							visible = "[AccoladeType.IsSecondaryRank( AccoladeRank.Self )]"
							size = { 300 40 }
							tooltip = "ACCOLADE_RANK_HEADER_AND_EFFECTS_TT"
							using = tooltip_se

							background = {
								using = Background_Frame
								margin = { 10 0 }
							}

							hbox = {
								text_single = {
									layoutpolicy_horizontal = expanding
									text = "[AccoladeType.GetLevelAndGloryOfRank( AccoladeRank.Self )]"
									align = nobaseline
								}
							}
						}
					}
				}
			}

			blockoverride "concept_link" {
				text = "[accolade_type|E]"
			}
		}
	}
}

template accolade_tooltip {
	container = {
		alwaystransparent = no

		object_tooltip_pop_out = {
			blockoverride "title_text" {
				margin = { 0 8 }
				text = "[Accolade.GetNameNoTooltip]"
				default_format = "#T"
			}

			blockoverride "subtitle_text" {
				text = "ACCOLADE_GLORY_AND_LEVEL"
			}

			blockoverride "main_description" {
				vbox = {

					hbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							raw_text = "[Accolade.GetPrimaryType.GetNameWithAccolade( Accolade.Self )], Primary."
						}

						expand = {}
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							raw_text = "[Accolade.GetSecondaryType.GetNameWithAccolade( Accolade.Self )], secondary."
						}

						expand = {}
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							raw_text = "[Accolade.GetAcclaimedKnight.GetUIName]."
						}

						expand = {}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Accolade.GetSuccessor.IsValid]"

						text_single = {
							text = "ACCOLADE_SUCCESSOR_NAME"
							align = left
						}

						expand = {}
					}

					hbox = {
						margin_top = 20
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						visible = "[Accolade.HasActiveEffects]"

						text_multi = {
							text = "[Accolade.BuildActiveRankEffects]"
							autoresize = yes
							max_width = 500
						}

						expand = {}
					}
				}
			}

			blockoverride "concept_link" {
				text = "[accolade|E]"
			}
		}
	}
}
