window = {
	name = "activity_planner"
	size = { 100% 100% }
	movable = no
	layer = middle
	# visible = "[Not(IsGameViewOpen('character'))]"


	alwaystransparent = yes

	datacontext = "[ActivityPlanner.GetActivityType]"
	datacontext = "[ActivityPlanner.AccessAsTravelPlanner]"
	datacontext = "[TravelPlanner.GetTravelPlanData]"
	datacontext = "[GetVariableSystem]"

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		on_start = "[GetVariableSystem.Clear( 'reorganizing_multi_location' )]"
		on_finish = "[GetVariableSystem.Clear('activity_details')]"
		on_finish = "[GetVariableSystem.Clear('travel_planner')]"
		on_finish = "[GetVariableSystem.Clear('show_dangers')]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		on_start = "[GetVariableSystem.Clear( 'activity_planner_hide_default_magnificence' )]"
	}

	window = {
		size = { 100% 100% }
		movable = no
		alwaystransparent = yes
		using = ocr_off

		location_picking_help_text_widget = {
			position = {0 160}
		}

		widget = {
			name = "bottom_right_area"
			visible = "[And(ActivityPlanner.IsPlanningStage( 'options' ), And(Not(IsGameViewOpen('court_window')), Not(IsGameViewOpen('travel_route_edit_window'))))]"

			allow_outside = yes

			parentanchor = bottom|right

			state = {
				name = _show
				using = Animation_FadeIn_Standard
				delay = 0.25
				position_y = 0
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Standard
				position_y = 50
			}

			vbox = {
				allow_outside = yes
				set_parent_size_to_minimum = yes

				activity_planner_activity_details_hbox = { }
			}
		}

		multi_location_picker_widget = { }

		activity_special_option_selection_widget = {
			visible = "[ActivityPlanner.IsPlanningStage( 'special_option_category' )]"

			parentanchor = center
		}

		activity_planner_main_heading_widget = { }

		travel_planning_window = {
			name = "travel_planning_tutorial_uses_this_1"
			state = {
				name = _show
				using = Animation_FadeIn_Quick
				position_x = 0
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
				position_x = -100
			}

			blockoverride "visible"
			{
				visible = "[ActivityPlanner.IsPlanningStage( 'options' )]"
			}

			blockoverride "button_close_overload"
			{
				visible = no
			}

			blockoverride "destination_text" {
				text_single = {
					visible = "[And(ActivityType.IsSingleLocation, TravelPlanData.HasNextDestination)]"
					align = nobaseline
					text = "TRAVEL_PLAN_CURRENT_DESTINATION"
					default_format = "#high"
					margin_left = 4
				}

				text_multi = {
					visible = "[And(Not(ActivityType.IsSingleLocation), TravelPlanData.HasNextDestination)]"
					min_width = 300
					align = nobaseline
					text = "TRAVEL_PLAN_NEXT_DESTINATION"
					default_format = "#high"
					margin_left = 4
				}

				text_single = {
					visible = "[Not(TravelPlanData.HasNextDestination)]"
					align = nobaseline
					text = "TRAVEL_PLAN_NO_DESTINATION"
					default_format = "#high"
					margin_left = 4
				}
			}
		}

		### CREATES THE CONTEST PICKING WINDOW DO NOT REMOVE!
		vbox = {
			name = "activity_plugin_center"
			layoutpolicy_horizontal = expanding

			state = {
				trigger_on_create = yes
				name = appear_test
				delay = 0.8
				using = Animation_Curve_Default
				alpha = 1
				duration = 0.6
			}
		}
	}

	window = {
		using = ocr_window_bg
		movable = no
		visible = "[And(And(And(Not(GetVariableSystem.Exists('ocr')), Not(TravelPlanner.IsEntourageListWindowOpen)), Not(GetVariableSystem.Exists('show_dangers'))), Not(IsGameViewOpen('character')))]"

		state = {
			name = hide_maa_window
			position = { -1500 0 }
		}
		state = {
			name = show_maa_window
			# on_start = "[PdxGuiTriggerAllAnimations('pan_to_army')]"
			position = { 0 0 }
		}
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			using = ocr_margins

			error_button = {
				layoutpolicy_horizontal = expanding
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content" {
					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[And(ActivityPlanner.IsPlanningStage( 'options' ), And(Not(IsGameViewOpen('court_window')), Not(IsGameViewOpen('travel_route_edit_window'))))]"

						vbox = {
							layoutpolicy_horizontal = expanding
							name = "activity_options"
							visible = "[Or(ActivityPlanner.IsPlanningStage( 'options' ), ActivityPlanner.PrevMultiDestStageWas('options'))]"

							activity_option_edit_widget_ocr = {
							}
						}
					}

					activity_planner_main_heading_widget_ocr = { }

					# Cost & Confirm Planning
					vbox = {
						visible = "[And(ActivityPlanner.IsPlanningStage( 'options' ), And(Not(IsGameViewOpen('court_window')), Not(IsGameViewOpen('travel_route_edit_window'))))]"
						layoutpolicy_horizontal = expanding

						hbox = {
							layoutpolicy_horizontal = expanding

							cost_breakdown_vbox = {
								datacontext = "[ActivityPlanner.AccessCostBreakdown]"
								name = "activity_cost"
							}

							expand = { }
						}

						button_primary_text = {
							layoutpolicy_horizontal = expanding
							name = "progress_planning"
							blockoverride "disabled" {
								visible = "[Not(ActivityPlanner.CanProgressPlanningStage)]"
							}
							blockoverride "text" {
								text = "ACTIVITY_PLANNER_START"
							}

							onclick = "[ActivityPlanner.ProgressPlanningStage]"
							enabled = "[ActivityPlanner.CanProgressPlanningStage]"


							tooltip = "[ActivityPlanner.GetCanProgressPlanningStageTooltip]"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								text = "ACTIVITY_ALL_GUESTS_BUTTON_TEXT"
							}
							visible = "[And(Not(DataModelHasItems(ActivityPlanner.AccessSpecialGuests)), DataModelHasItems(ActivityType.GetGuestInviteRules))]"
							onclick = "[OpenGameViewData( 'activity_guest_list', ActivityPlanner.AccessSelf )]"

						}
					}

					activity_special_option_selection_widget_ocr = { }

					travel_planning_window_ocr = { }

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[ActivityPlanner.IsPlanningStage( 'location' )]"

						using = zoom_out_title


						state = {
							name = _hide
							on_finish = "[DefaultOnCoatOfArmsRightClick(GetPlayer.GetCapitalLocation.GetCounty.GetTitle.GetID)]"
							on_finish = "[GetVariableSystem.Clear('travel_type')]"
						}

						state = {
							name = _show
							next = "clear_maa_list"
							on_finish = "[GetVariableSystem.Set('travel_type', 'pilgrimage')]"
							on_finish = "[PdxGuiTriggerAllAnimations('show_army_window')]"
						}

						state = {
							name = "clear_maa_list"
							delay = 0.3
							alpha = 1
							next = grab_origins
							on_finish = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
							on_start = "[GetScriptedGui('clear_maa_origin_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						}

						state = {
							name = grab_origins
							delay = 0.3
							on_finish = "[PdxGuiTriggerAllAnimations('grab_maa_origin')]"
							next = order_origins
						}

						state = {
							name = order_origins
							delay = 0.3
							on_finish = "[GetScriptedGui('order_maa_origin_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						}

						vbox_select_from_map = {
							blockoverride "maa" {
							}
							blockoverride "action" {
							}
							blockoverride "debug" {
								visible = no
							}
						}

						text_multi = {
							layoutpolicy_horizontal = expanding
							text = "ACTIVITY_DESTINATION_SELECTION"
							autoresize = yes
							max_width = 700
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						name = "bottom_right_area"
						visible = "[And(ActivityPlanner.IsPlanningStage( 'options' ), And(Not(IsGameViewOpen('court_window')), Not(IsGameViewOpen('travel_route_edit_window'))))]"

						vbox = {
							layoutpolicy_horizontal = expanding

							activity_planner_activity_details_hbox_ocr = { }
						}
					}

					expand = { }

				}
			}

		}
	}

	travel_entourage_list_window = {
		visible_at_creation = no
		visible = "[TravelPlanner.IsEntourageListWindowOpen]"
	}

	window_dangers = { }
}

types OCR {
	type selectable_target_portrait_widget_ocr = vbox
	{
		#expects a Character datacontext
		layoutpolicy_horizontal = expanding

		block "portrait" {
			char_name = {
				layoutpolicy_horizontal = expanding
				visible = "[Character.IsValid]"
				blockoverride "relation" {

				}
				block "filled_slot"
				{
				}
			}
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			name = "empty_slot"
			blockoverride "text" {
				block "button_add_visible" { }
				raw_text = "Add character,"
			}
			blockoverride "extra" {
				text_single = {
					block "button_add_visible" { }
					raw_text = "hotkey H."
				}
			}
			shortcut = army_create_new


			visible = "[Not(Character.IsValid)]"

			block "empty_slot"
			{
			}
		}
	}

	type potential_selectable_target_portrait_widget_ocr = vbox
	{
		layoutpolicy_horizontal = expanding

		char_name = {
			layoutpolicy_horizontal = expanding
			blockoverride "pre" {
				text_single = {
					visible = "[ActivityIntentSelectionWindow.MayNotArriveInTime( CharacterListItem.Self )]"
					raw_text = "Warning, may be late."

					tooltip = "ACTIVITY_GUEST_MAY_NOT_ARRIVE"
				}
			}
			blockoverride "relation" {
			}
		}
	}

	type activity_planner_main_heading_widget_ocr = vbox
	{
		datacontext = "[ActivityPlanner.GetSelectedSpecialOption]"
		datacontext = "[ActivityPlanner.GetActivityType]"
		layoutpolicy_horizontal = expanding

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3
				text_single = {
					name = "activity"
					raw_text = "Planning a"
				}
				text_single = {
					datacontext = "[ActivityPlanner.GetSelectedSpecialOption]"
					raw_text = "[ActivityOption.GetName]."
				}
				expand = { }
			}

			# vbox if you have selected a Type
			vbox = {
				name = "has_special_option"
				visible = "[Or(ActivityPlanner.IsPlanningStage( 'special_option_category' ), ActivityPlanner.HasSelectedSpecialOption)]"
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					name = "activity_type"
					datacontext = "[ActivityPlanner.GetSelectedSpecialOption]"
					visible = "[And(Not(ActivityPlanner.IsPlanningStage( 'special_option_category' )),ActivityType.HasSpecialOptionCategory)]"


					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[ActivityOption.GetName]."
						visible = no
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[ActivityPlanner.OpenSpecialOptionSelection]"
						blockoverride "text" {
							raw_text = "[Localize('ACTIVITY_PLANNER_CHANGE_TYPE_TT')]"
						}
						blockoverride "dot" {

						}
					}
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						# raw_text = "[Localize('ACTIVITY_PLANNER_QUIT')]."
					}
					onclick = "[ActivityPlanner.Close]"
					shortcut = "close_window"
					visible = "[Not(ActivityPlanner.IsEditingOption)]"
				}
			}
		}
	}

	type activity_special_option_selection_widget_ocr = vbox {
		layoutpolicy_horizontal = expanding
		visible = "[ActivityPlanner.IsPlanningStage( 'special_option_category' )]"

		datacontext = "[ActivityPlanner.GetEditingOption]"

		# using = Activity_Planner_Widget

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		vbox = {
			layoutpolicy_horizontal = expanding

			text_single = {
				layoutpolicy_horizontal = expanding
				raw_text = "Options:"
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				name = "special_options"
				datamodel = "[ActiveActivityOption.GetCategory.GetOptions]"

				item = {
					vbox = {
						layoutpolicy_horizontal = expanding

						button_text = {
							layoutpolicy_horizontal = expanding
							tooltip = "[ActivityOption.GetIsValidDesc(GetPlayer, ActivityPlanner.GetSelectedSpecialOption )]"
							using = tooltip_se

							onclick = "[ActivityPlanner.SelectOption( ActivityOption.Self )]"

							visible = "[ActivityOption.IsShown( GetPlayer, ActivityPlanner.GetSelectedSpecialOption )]"

							enabled = "[ActivityOption.IsValid( GetPlayer, ActivityPlanner.GetSelectedSpecialOption )]"

							blockoverride "disabled" {
								visible = "[Not(ActivityOption.IsValid( GetPlayer, ActivityPlanner.GetSelectedSpecialOption ))]"
							}
							blockoverride "disabled text" {
								raw_text = "Can't select"
							}
							shortcuts_list = {
								blockoverride "click" {
									onclick = "[ActivityPlanner.SelectOption( ActivityOption.Self )]"
								}
							}
							blockoverride "pre" {
								text_single = {
									raw_text = "[IndexNumber],"
								}
							}
							blockoverride "text" {
								raw_text = "[ActivityOption.GetName]."
							}
							blockoverride "extra" {
								text_single = {
									visible = "[ObjectsEqual(ActivityPlanner.GetSelectedSpecialOption, ActivityOption.Self)]"
									raw_text = "Selected"
								}
							}
						}

						# text_single = {
						# 	visible = "[Not(ActivityOption.IsValid( GetPlayer, ActivityPlanner.GetSelectedSpecialOption ))]"
						# 	layoutpolicy_horizontal = expanding
						# 	raw_text = "[ActivityOption.GetIsValidDesc(GetPlayer, ActivityPlanner.GetSelectedSpecialOption )]"
						# }
					}
				}
			}

			vbox = {
				datacontext = "[ActivityPlanner.GetSelectedSpecialOption]"
				layoutpolicy_horizontal = expanding

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Description of [ActivityOption.GetName]:"
				}

				text_multi = {
					text = "ACTIVITY_TYPE_DESC"
					min_width = 700
					max_width = 700

					autoresize = yes
				}
			}

			button_primary_text = {
				layoutpolicy_horizontal = expanding
				onclick = "[ActivityPlanner.ProgressPlanningStage]"
				blockoverride "text" {
					text = "CONFIRM"
				}
			}
		}
	}

	type caravan_master_portrait_widget_ocr = vbox
	{
		#expects a Character datacontext
		layoutpolicy_horizontal = expanding
		name = "portrait_area"

		char_name = {
			layoutpolicy_horizontal = expanding
			visible = "[Character.IsValid]"
		}

		block "filled_slot" { }

		button_text = {
			layoutpolicy_horizontal = expanding
			block "empty_slot"
			{
				visible = "[Not(Character.IsValid)]"
				shortcut = character_finder
			}
			blockoverride "extra" {
				text_single = {
					margin_left = -3
					visible = "[Not( TravelPlanner.GetTravelPlan.IsValid )]"
					raw_text = ", hotkey C"
				}
			}
		    blockoverride "text" {
		        raw_text = "[Localize('APPOINT_CARAVAN_MASTER')]"
		    }
			blockoverride "dot" {
			}
			# button_plus = {
			# 	visible = "[And( Not( TravelPlanner.GetTravelPlan.IsValid ), Not( Character.IsValid ) )]"
			# 	parentanchor = center
			# 	alwaystransparent = yes
			# }
		}

		text_multi = {
			visible = "[And( TravelPlanner.GetTravelPlan.IsValid, Not( Character.IsValid ) )]"

			text = "TRAVEL_LEADER_SELECTED_NONE"
			autoresize = yes
			using = wide
			layoutpolicy_horizontal = expanding
		}
	}

	type activity_option_edit_widget_ocr = vbox
	{
		layoutpolicy_horizontal = expanding
		name = "editing_option"
		visible = "[ActivityPlanner.IsEditingOption]"

		vbox = {
			datacontext = "[ActivityPlanner.GetEditingOption]"
			datacontext = "[ActiveActivityOption.GetCategory]"

			layoutpolicy_horizontal = expanding


			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					raw_text = "[ActivityOptionCategory.GetName]."
					max_width = 700
				}

				blockoverride "button_close"
				{
					onclick = "[ActivityPlanner.StopEditingOption]"
				}

				expand = { }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				datamodel = "[ActivityOptionCategory.GetOptions]"
				visible = "[HasDlcFeature('advanced_activities')]"

				item = {
					button_text = {
						layoutpolicy_horizontal = expanding
						visible = "[ActivityOption.IsShown( GetPlayer, ActivityPlanner.GetSelectedSpecialOption )]"
						enabled = "[ActivityOption.IsValid( GetPlayer, ActivityPlanner.GetSelectedSpecialOption )]"
						onclick = "[ActivityPlanner.SelectOption( ActivityOption.Self )]"
						tooltip = "ACTIVITY_OPTION_TOOLTIP"

					    blockoverride "text" {
					        raw_text = "[ActivityOption.GetName], level [Add_int32(ActivityOption.GetIndexInCategory, '(int32)1')]"
					    }
						shortcuts_list = {
							blockoverride "click" {
								enabled = "[ActivityOption.IsValid( GetPlayer, ActivityPlanner.GetSelectedSpecialOption )]"
								onclick = "[ActivityPlanner.SelectOption( ActivityOption.Self )]"
							}
						}
						blockoverride "pre" {
							text_single = {
								raw_text = "[IndexNumber],"
							}
							text_single = {
								visible = "[ObjectsEqual( ActiveActivityOption.GetOption, ActivityOption.Self )]"
								raw_text = "Selected,"
							}
						}

					}
				}
			}

			vbox = {
				datacontext = "[ActiveActivityOption.GetOption]"
				layoutpolicy_horizontal = expanding

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 3

					text_single = {
						raw_text = "[ActivityOption.GetName],"
						max_width = 600
					}

					text_single = {
						raw_text = "[ActivityPlanner.GetActivityOptionCost(ActivityOption.Self)]."
					}

					expand = { }
				}

				text_multi = {
					layoutpolicy_horizontal = expanding
					text = "[ActivityOption.GetDescription]"
					autoresize = yes
					using = wide
				}

				expand = { }
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				onclick = "[ActivityPlanner.StopEditingOption]"
			    blockoverride "text" {
			        raw_text = "Close option details, Escape."
			    }
			}
		}
	}

	type vbox_activity_or_travel_confirm_ocr = vbox
	{
		layoutpolicy_horizontal = expanding

		hbox = {
		    layoutpolicy_horizontal = expanding

			cost_breakdown_vbox = {
				name = "activity_cost"
				datacontext = "[ActivityPlanner.AccessCostBreakdown]"
			}

		    expand = { }
		}


		button_primary = {
			name = "progress_planning"
			size = { 260 40 }

			onclick = "[ActivityPlanner.ProgressPlanningStage]"
			enabled = "[ActivityPlanner.CanProgressPlanningStage]"

			text = "ACTIVITY_PLANNER_START"
			tooltip = "[ActivityPlanner.GetCanProgressPlanningStageTooltip]"
		}

		expand = { }
	}

	type vbox_special_guest_portrait_ocr = vbox
	{
		datacontext = "[ActivitySpecialGuest.GetCharacter]"
		layoutpolicy_horizontal = expanding

		hbox = {
			layoutpolicy_horizontal = expanding

			block "title_tooltip_properties"
			{
				# Default is for planning, override for ongoing
				tooltip = "ACTIVITY_PLANNER_SPECIAL_GUEST_PLANNING_TT"
				using = tooltip_ne
			}

			text_single = {
				block "title_text"
				{
					# Default is for planning, override for ongoing
					raw_text = "[ActivitySpecialGuest.GetType.GetNameForHost]."
				}
			}

			expand = { }
		}

		selectable_target_portrait_widget_ocr = {
			block "selectable_target_portrait_properties"
			{
			}

			blockoverride "empty_slot"
			{
				onclick = "[OpenGameViewData( 'activity_guest_list', ActivitySpecialGuest.AccessSelf )]"
			}
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			raw_text = "Warning, wrong [ActivitySpecialGuest.GetType.GetNameForHost]."
			visible = "[And( Not( Character.IsValid ), ActivitySpecialGuest.GetType.IsRequired)]"
			tooltip = "ACTIVITY_PLANNER_CHANGE_REQUIRED_SPECIAL_GUEST_TT"
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			blockoverride "text" {
				raw_text = "Change [ActivitySpecialGuest.GetType.GetNameForHost]."
			}
			block "button_change_visible"
			{
				visible = "[And( Character.IsValid, Not( ActivitySpecialGuest.GetType.HasAutoSelectCharacter ))]"
			}

			onclick = "[OpenGameViewData( 'activity_guest_list', ActivitySpecialGuest.AccessSelf )]"

			tooltip = "ACTIVITY_PLANNER_CHANGE_SPECIAL_GUEST_TT"
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			blockoverride "text" {
				raw_text = "Remove [ActivitySpecialGuest.GetType.GetNameForHost]."
			}
			block "button_change_visible"
			{
				visible = "[And( Character.IsValid, Not( ActivitySpecialGuest.GetType.HasAutoSelectCharacter ))]"
			}

			onclick = "[ActivitySpecialGuest.ClearCharacter]"
			tooltip = "ACTIVITY_PLANNER_CHANGE_SPECIAL_GUEST_TT"
		}
	}
}

types ActivityPlannerTypes
{
	type selectable_target_portrait_widget = widget
	{
		#expects a Character datacontext

		name = "portrait_area"

		block "size"
		{
			size = { 85 90 }
		}

		block "target_glow"
		{
		}

		background = {
			using = Background_Area_Solid

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
				blend_mode = alphamultiply
				alpha = 0.2
				mirror = vertical
			}
		}

		widget = {
			name = "frame"
			size = { 100% 100% }

			background = {
				texture = "gfx/portraits/portrait_frame.dds"
				using = Color_Grey
				margin = { -4 -4 }
				alpha = 0.5
			}
		}

		block "portrait"
		{
			portrait_head_small = {
				name = "filled_slot"

				visible = "[Character.IsValid]"
				parentanchor = center

				block "filled_slot"
				{
				}
			}
		}

		button = {
			name = "empty_slot"

			visible = "[Not(Character.IsValid)]"

			size = { 100% 100% }

			block "empty_slot"
			{
			}

			state = {
				name = _mouse_hierarchy_enter
				on_start = "[PdxGuiWidget.FindChild('highlight_frame').TriggerAnimation('show')]"
			}

			state = {
				name = _mouse_hierarchy_leave
				on_start = "[PdxGuiWidget.FindChild('highlight_frame').TriggerAnimation('hide')]"
			}

			highlight_icon = {
				name = "portrait_unknown_head_small_glow"
				parentanchor = center
				position = { 3 -9 }
				gfxtype = framedbuttongfx
				effectname = "NoHighlight"
				texture = "gfx/portraits/unknown_portraits/button_unknown_head.dds"
				size = { 105 110 }
				framesize = { 384 480 }
				upframe = 1
				overframe = 2
			}

			button_plus = {
				parentanchor = center
				alwaystransparent = yes
			}

			widget = {
				name = "highlight_frame"
				size = { 100% 100% }
				alwaystransparent = yes
				alpha = 0

				state = {
					name = "show"
					alpha = 1
				}

				state = {
					name = "hide"
					alpha = 0
				}

				background = {
					size = { 100% 100% }
					texture = "gfx/portraits/portrait_frame.dds"
					using = Color_Grey
					alpha = 0.7
					margin = { -4 -4 }
				}
			}
		}
	}

	type potential_selectable_target_portrait_widget = widget
	{
		size = { 475 94 }

		portrait_head_small = {
			parentanchor = left|vcenter
		}

		button_standard = {
			parentanchor = right|vcenter
			size = { 380 84 }

			block "onclick"
			{
			}

			character_list_arrow = {
				name = "character_list_arrow"
			}


			hbox = {
				margin = {16 16}

				vbox = {

					expand = { }

					text_single = {
						name = "character_name"
						layoutpolicy_horizontal = expanding

						text = "[Character.GetUINameNoTooltip]"
						align = nobaseline
						default_format = "#high"
						max_width = 320
						using = Font_Size_Medium

						alwaystransparent = yes
					}

					text_single = {
						name = "character_relation"
						layoutpolicy_horizontal = expanding

						text = "[Character.GetRelationToString( GetPlayer )]"
						default_format = "#low"
						align = nobaseline
						max_width = 360

						alwaystransparent = yes
					}

					expand = { }
				}

				expand = { }

				warning_icon = {
					visible = "[ActivityIntentSelectionWindow.MayNotArriveInTime( CharacterListItem.Self )]"
					size = { 30 30 }

					texture = "gfx/interface/icons/symbols/icon_cross.dds"

					tooltip = "ACTIVITY_GUEST_MAY_NOT_ARRIVE"
				}
			}
		}
	}

	type caravan_master_portrait_widget = widget
	{
		#expects a Character datacontext

		name = "portrait_area"
		size = { 125 160 }

		portrait_shoulders = {
			name = "filled_slot"

			visible = "[Character.IsValid]"

			block "filled_slot"
			{
			}
		}

		button = {
			name = "empty_slot"
			visible = "[Not(Character.IsValid)]"
			size = { 100% 100% }

			tooltip = "APPOINT_CARAVAN_MASTER"

			block "empty_slot"
			{
			}

			highlight_icon = {
				name = "portrait_unknown_head_small_glow"
				parentanchor = center
				position = { 3 -9 }
				gfxtype = framedbuttongfx
				effectname = "NoHighlight"
				texture = "gfx/portraits/unknown_portraits/unknown_spouse.dds"
				size = { 115 150 }
				framesize = { 554 780 }
				upframe = 1
				overframe = 2
			}

			button_plus = {
				visible = "[And( Not( TravelPlanner.GetTravelPlan.IsValid ), Not( Character.IsValid ) )]"
				parentanchor = center
				alwaystransparent = yes
			}
		}

		text_multi = {
			visible = "[And( TravelPlanner.GetTravelPlan.IsValid, Not( Character.IsValid ) )]"
			position = { 0 60 }

			text = "TRAVEL_LEADER_SELECTED_NONE"
			align = center|nobaseline
			autoresize = yes
			default_format = "#weak"
			max_width = 150

			background = {
				using = Background_Area_Dark
				margin = { 8 4 }

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
					blend_mode = alphamultiply
				}
			}
		}
	}

	type activity_multi_location_plan_item_widget = widget
	{
		datacontext = "[PlannedActivityPhase.GetLocation.GetTitle.GetHolder]"
		layoutpolicy_horizontal = expanding
		size = { 386 116 }

		background = {
			using = Background_Area_With_Header
			margin = { 4 4 }
		}

		widget = {
			size = { 386 30 }

			text_single = {
				layoutpolicy_horizontal = expanding

				text = "[Character.GetFullNameNoTooltip]"
				max_width = 370

				margin_left = 4
			}

			button_icon = {
				parentanchor = right|vcenter
				position = { -4 0 }
				size = { 30 30 }

				onclick = "[ActivityPlanner.RemovePhase( PlannedActivityPhase.AccessSelf )]"
				texture = "gfx/interface/icons/flat_icons/cancel.dds"
			}
		}

		widget = {
			position = { 0 26 }
			size = { 85 90 }

			portrait_head_small = { }
		}

		widget = {
			position = { 85 34 }
			size = { 386 30 }

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10

				margin_bottom = 5

				text_single = {
					text = "TRAVEL_TIME_MULTI_DESTINATION"
					max_width = 110
					datacontext = "[ActivityPlanner]"
					tooltip = "TRAVEL_TIME_MULTI_DESTINATION_TT"
				}

				text_single = {
					text = "[ActivityPlanner.GetCostForPhase(PlannedActivityPhase.Self)]"
					max_width = 100
				}

				expand = { }
			}
		}

		widget = {
			name = "pickable_phases_tutorial_uses_this"
			layoutpolicy_horizontal = expanding
			position = { 89 72 }
			size = { 120 40 }

			fixedgridbox = {
				visible = "[Not(VariableSystem.Exists( 'reorganizing_multi_location' ))]"
				datamodel = "[ActivityType.GetPickablePhases]"
				flipdirection = yes
				addcolumn = 40
				addrow = 40

				item = {
					button_standard = {
						size = { 40 40 }

						onclick = "[ActivityPlanner.SelectPhaseTypeFor(PlannedActivityPhase.AccessSelf, ActivityPhase.Self)]"
						enabled = "[PlannerCanPickActivityPhase( ActivityPhase, PlannedActivityPhase.GetLocation )]"
						down = "[ObjectsEqual(PlannedActivityPhase.GetPhase, ActivityPhase.Self)]"

						tooltip = "ACTIVITY_PLANNER_PHASE_REPLACE_TOOLTIP"
						using = tooltip_se

						button_icon_highlight = {
							parentanchor = center
							size = { 34 34 }
							texture = "[ActivityPhase.GetIcon]"
						}
					}
				}
			}
		}

		widget = {
			parentanchor = right|bottom
			position = { -4 8}
			size = { 30 60 }

			button_icon = {
				parentanchor = top
				size = { 30 30 }

				enabled = "[Not(ActivityPlanner.IsFirstPickedPhase(PlannedActivityPhase.Self))]"
				onclick = "[ActivityPlanner.MovePhaseEarlier(PlannedActivityPhase.AccessSelf)]"
				texture = "gfx/interface/icons/flat_icons/arrow_vertical.dds"
			}

			button_icon = {
				parentanchor = bottom
				size = { 30 30 }

				enabled = "[Not(ActivityPlanner.IsLastPickedPhase(PlannedActivityPhase.Self))]"
				onclick = "[ActivityPlanner.MovePhaseLater(PlannedActivityPhase.AccessSelf)]"
				texture = "gfx/interface/icons/flat_icons/arrow_vertical.dds"
				mirror = vertical
			}
		}
	}

	type activity_summary_entry_vbox = vbox
	{
		layoutpolicy_horizontal = expanding

		margin = { 5 5 }

		background = {
			using = Background_Area_With_Header
		}

		text_single = {
			layoutpolicy_horizontal = expanding

			align = left

			margin = { 10 5 }

			block "header_text"
			{
			}
		}

		block "contents"
		{
		}

		expand = { }
	}

	type activity_special_option_selection_widget = widget
	{
		datacontext = "[ActivityPlanner.GetEditingOption]"
		size = { 100% 100% }

		using = Activity_Planner_Widget

		background = {
			using = Background_Area_Dark
			margin = { 10 10 }
			alpha = 0.5
		}

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			margin_top = 80
			spacing = 32

			allow_outside = yes

			expand = {
				layoutpolicy_vertical = expanding
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				spacing = 50

				allow_outside = yes

				background = {
					using = Background_Area_ExtraDark

					margin_top = 150
					margin_bottom = 190
					margin_left = 200
					margin_right = 200

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
						blend_mode = alphamultiply
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_textured_vertical_up.dds"
						blend_mode = alphamultiply
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_textured_vertical_down.dds"
						blend_mode = alphamultiply
					}
				}

				expand = { }

				vbox = {
					datacontext = "[ActivityPlanner.GetSelectedSpecialOption]"
					layoutpolicy_vertical = expanding

					margin_top = 16

					allow_outside = yes

					text_single = {
						layoutpolicy_horizontal = expanding

						text = [ActivityOption.GetName]
						align = left|nobaseline
						fontsize = 32

						background = {
							texture = "gfx/interface/window_travel/travel_planner_header_banner.dds"

							margin = { 40 20 }

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
								blend_mode = alphamultiply
								mirror = horizontal
							}
						}
					}

					text_multi = {
						layoutpolicy_vertical = expanding

						text = "ACTIVITY_TYPE_DESC"
						min_width = 400
						max_width = 400

						autoresize = yes
						fontsize = 18
					}
				}

				hbox = {
					name = "special_options"
					datamodel = "[ActiveActivityOption.GetCategory.GetOptions]"

					spacing = 16

					allow_outside = yes

					item = {
						widget = {
							allow_outside = yes
							size = { 230 550 }

							visible = "[ActivityOption.IsShown( GetPlayer, ActivityPlanner.GetSelectedSpecialOption )]"

							enabled = "[ActivityOption.IsValid( GetPlayer, ActivityPlanner.GetSelectedSpecialOption )]"

							### Glow animation on selected type
							icon = {
								visible = "[ObjectsEqual( ActiveActivityOption.GetOption, ActivityOption.Self )]"
								parentanchor = center
								size = { 264 590 }

								texture = "gfx/interface/window_activities/activity_planning/type_selected_glow.dds"
								alpha = 0

								state = {
									name = a
									next = b
									trigger_on_create = yes
									alpha = 0.6
									duration = 1.5

									using = Animation_Curve_Default
								}

								state = {
									name = b
									next = a
									alpha = 0.2
									duration = 1.5

									using = Animation_Curve_Default
								}
							}

							icon = {
								visible = "[ObjectsEqual( ActiveActivityOption.GetOption, ActivityOption.Self )]"
								parentanchor = center
								size = { 264 590 }
								mirror = vertical

								texture = "gfx/interface/window_activities/activity_planning/type_selected_glow.dds"
								alpha = 0

								state = {
									name = a
									next = b
									trigger_on_create = yes
									alpha = 0.5
									delay = 0.5
									duration = 1.5

									using = Animation_Curve_Default
								}

								state = {
									name = b
									next = a
									alpha = 0.3
									duration = 1.5

									using = Animation_Curve_Default
								}
							}

							icon = {
								parentanchor = center
								size = { 226 546 }

								texture = "[ActivityOption.GetTexture]"

								modify_texture = {
									visible = "[Not(ActivityOption.IsValid( GetPlayer, ActivityPlanner.GetSelectedSpecialOption ))]"

									texture = "gfx/interface/component_masks/mask_clouds.dds"
									blend_mode = alphamultiply
									alpha = 0.3
								}

								modify_texture = {
									visible = "[Not(ActivityOption.IsValid( GetPlayer, ActivityPlanner.GetSelectedSpecialOption ))]"

									texture = "gfx/interface/component_masks/mask_scratches.dds"
									blend_mode = alphamultiply
									alpha = 0.8
								}

								modify_texture = {
									visible = "[Not(ActivityOption.IsValid( GetPlayer, ActivityPlanner.GetSelectedSpecialOption ))]"

									color = { 0.3 0.3 0.4 1 }
									blend_mode = multiply
									alpha = 0.3
								}
							}

							icon = {
								parentanchor = center
								size = { 226 546}

								texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
								spriteType = Corneredtiled
								spriteborder = { 5 5 }
							}

							button_standard_clean = {
								name = "special_option_button"
								size = { 100% 100% }

								allow_outside = yes

								widget = {
									parentanchor = bottom|hcenter
									size = { 230 70 }

									background = {
										using = Background_Area_ExtraDark
									}

									vbox = {
										text_single = {
											name = "special_option_name"

											text = "[ActivityOption.GetName]"
											using = Font_Size_Big
											max_width = 220
											align = nobaseline
										}
									}
								}

								# Activity Type Icon
								widget = {
									parentanchor = top|hcenter
									position = { 0 -29}
									size = { 60 60 }

									allow_outside = yes

									# Background
									highlight_icon = {
										parentanchor = top|hcenter
										size = { 60 60 }
										allow_outside = yes

										texture = "gfx/interface/window_activities/tournament/contest_selection_inactive_icon_bg.dds"


										#Disabled type
										modify_texture = {
											visible = "[Not(ActivityOption.IsValid( GetPlayer, ActivityPlanner.GetSelectedSpecialOption ))]"

											color = { 0.3 0.3 0.4 1 }
											blend_mode = multiply
											alpha = 0.7
										}

										modify_texture = {
											visible = "[ActivityOption.IsValid( GetPlayer, ActivityPlanner.GetSelectedSpecialOption )]"

											color = { 0.3 0.3 0.4 1 }
											blend_mode = multiply
											alpha = 0.4
										}

										modify_texture = {
											visible = "[Not( ObjectsEqual( ActiveActivityOption.GetOption, ActivityOption.Self ))]"

											color = { 0.3 0.3 0.4 1 }
											blend_mode = multiply
											alpha = 0.4
										}
									}

									icon_flat_standard = {
										parentanchor = center
										size = { 40 40 }

										texture = "[ActivityOption.GetIcon]"

										blockoverride "master_color_frame" {
											frame = 1
										}

										modify_texture = {
											visible = "[Not( ObjectsEqual( ActiveActivityOption.GetOption, ActivityOption.Self ))]"

											color = { 0.3 0.3 0.4 1 }
											blend_mode = multiply
											alpha = 0.6
										}

										modify_texture = {
											visible = "[Not(ActivityOption.IsValid( GetPlayer, ActivityPlanner.GetSelectedSpecialOption ))]"

											color = { 0.3 0.3 0.4 1 }
											blend_mode = multiply
											alpha = 0.3
										}
									}
								}

								tooltip = "[ActivityOption.GetIsValidDesc(GetPlayer, ActivityPlanner.GetSelectedSpecialOption )]"
								using = tooltip_se

								onclick = "[ActivityPlanner.SelectOption( ActivityOption.Self )]"

								blockoverride "disabled"  { }

							}
						}
					}
				}

				expand = { }
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				widget = {
					size = { 350 108 }

					background = {
						texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
						spriteType = Corneredtiled
						spriteborder = { 18 18 }
						texture_density = 2

						modify_texture = {
							name = "overlay"
							texture = "gfx/interface/component_overlay/overlay_effect.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = overlay
						}
					}

					button_primary_big = {
						parentanchor = center

						onclick = "[ActivityPlanner.ProgressPlanningStage]"
						text = "CONFIRM"
					}
				}
			}

			expand = {
				layoutpolicy_vertical = expanding
			}
		}
	}

	type activity_planner_activity_details_hbox_ocr = vbox
	{
		layoutpolicy_horizontal = expanding

		vbox = {
			layoutpolicy_horizontal = expanding

			button_text = {
				layoutpolicy_horizontal = expanding
			    blockoverride "text" {
			        raw_text = "[ActivityType.GetName] details,"
			    }
				blockoverride "extra" {
					text_single = {
						raw_text = "[Select_CString(GetVariableSystem.Exists('activity_details'), 'Collapsed', 'Expanded')], Page Down."
					}
				}
				shortcut = zoom_in
				onclick = "[GetVariableSystem.Toggle('activity_details')]"
			}

			vbox = {
				visible = "[Not(GetVariableSystem.Exists('activity_details'))]"
				layoutpolicy_horizontal = expanding

				# Intent
				vbox = {
					layoutpolicy_horizontal = expanding
					name = "intent"
					visible = "[Or(ActivityPlanner.IsPlanningStage( 'options' ), ActivityPlanner.PrevMultiDestStageWas('options'))]"

					datacontext = "[ActivityPlanner.GetSelectedHostIntent]"
					datacontext = "[ActivityIntentData.GetType]"

					button_text = {
						layoutpolicy_horizontal = expanding
						datacontext = "[ActivityIntentData.GetType]"
						shortcut = mapmode_kingdoms_secondary
						enabled = "[GreaterThan_int32( GetDataModelSize( ActivityType.GetHostIntents ), '(int32)1' )]"

						onclick = "[ToggleGameViewData( 'activity_intent_selection', ActivityPlanner.AccessSelf )]"

						blockoverride "text" {
							raw_text = "[intent|E]: [ActivityIntent.GetName],"
						}

						blockoverride "extra" {
							text_single = {
								raw_text = "hotkey i."
							}
						}
					}

					selectable_target_portrait_widget_ocr = {
						visible = "[ActivityIntent.HasTarget]"
						name = "intent_target"
						datacontext = "[ActivityIntentData.GetTarget]"

						blockoverride "empty_slot"
						{
							onclick = "[VariableSystem.Toggle( 'activity_intent_selection_target_list' )]"
						}
					}

					text_multi = {
						layoutpolicy_horizontal = expanding
						name = "intent_effects"
						using = wide
						tooltip = "ACTIVITY_SINGLE_INTENT_TOOLTIP"
						raw_text = "[ActivityIntent.GetDescription]"
						tooltip_enabled = "[LessThanOrEqualTo_int32( GetDataModelSize( ActivityType.GetHostIntents ), '(int32)1' )]"
					}
				}

				# Activity Options
				vbox = {
					name = "activity_options"
					visible = "[Or(ActivityPlanner.IsPlanningStage( 'options' ), ActivityPlanner.PrevMultiDestStageWas('options'))]"
					layoutpolicy_horizontal = expanding

					vbox = {
						name = "contents"
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[activity_options|E]."
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							cost_breakdown_vbox = {
								name = "activity_option_cost"
								datacontext = "[ActivityPlanner.AccessTotalActivityOptionCostBreakdown]"

								blockoverride "heading_text" {
									raw_text = "Total cost:"
								}
							}

							expand = { }
						}


						vbox = {
							name = "activity_option_categories"
							layoutpolicy_horizontal = expanding

							datamodel = "[ActivityPlanner.AccessOptions]"

							item = {
								button_text = {
									layoutpolicy_horizontal = expanding
									name = "activity_button"
									visible = "[Not( ObjectsEqual( ActiveActivityOption.GetCategory, ActivityType.GetSpecialOptionCategory ) )]"

									onclick = "[ActivityPlanner.ToggleEditingOption( ActiveActivityOption.AccessSelf )]"

									blockoverride "pre" {
										text_single = {
											visible = "[Not(ActivityPlanner.IsEditingOption)]"
											raw_text = "[IndexNumber],"
										}
									}
									blockoverride "text" {
										raw_text = "[ActiveActivityOption.GetCategory.GetName]: [ActiveActivityOption.GetOption.GetName]."
									}
									shortcuts_list = {
										visible = "[Not(ActivityPlanner.IsEditingOption)]"
										blockoverride "click" {
											onclick = "[ActivityPlanner.ToggleEditingOption( ActiveActivityOption.AccessSelf )]"
										}
									}

									tooltip = ACTIVITY_PLANNER_OPTION_TT
								}
							}
						}
					}
				}


				# Special Guests
				vbox = {
					visible = "[DataModelHasItems(ActivityPlanner.AccessSpecialGuests)]"
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding
						name = "special_guest_slots"
						datamodel = "[ActivityPlanner.AccessSpecialGuests]"
						visible = "[DataModelHasItems( ActivityPlanner.AccessSpecialGuests )]"

						item = {
							vbox_special_guest_portrait_ocr = { }
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[OpenGameViewData( 'activity_guest_list', ActivityPlanner.AccessSelf )]"
						blockoverride "pre" {
							text_single = {
								raw_text = "View"
							}
						}
						blockoverride "text" {
							text = "ACTIVITY_OTHER_GUESTS_BUTTON_TEXT"
						}
						blockoverride "extra" {
							text_single = {
								raw_text = "hotkey G"
							}
						}
						shortcut = army_merge
						blockoverride "dot" {
						}
					}
				}
			}
		}
	}
}

types ActivityPlannerNewTypes
{
	type activity_planner_main_heading_widget = widget
	{
		name = "activity_planner_main_heading"

		size = { 600 140 }

		datacontext = "[ActivityPlanner.GetSelectedSpecialOption]"
		datacontext = "[ActivityPlanner.GetActivityType]"

		background = {
			texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 18 }
			texture_density = 2

			margin = { 16 16 }

			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
				blend_mode = alphamultiply
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			margin = { 16 8 }

			ignoreinvisible = yes

			spacing = 8

			hbox = {
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area_Dark

					margin = { 20 16 }

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				text_single = {
					name = "activity"
					layoutpolicy_horizontal = expanding
					text = ACTIVITY_PLANNER_MAIN_HEADING
					align = left
				}
			}

			expand = { }

			# vbox if you have selected a Type
			vbox = {
				name = "has_special_option"
				visible = "[And(Not(ActivityPlanner.IsPlanningStage( 'special_option_category' )), ActivityPlanner.HasSelectedSpecialOption)]"

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin_top = 4
				margin_bottom = 4

				background = {
					texture = "[ActivityOption.GetTexture]"
					alpha = 0.3
					fittype = centercrop

					margin = { 16 0 }
					margin_top = 4
					margin_bottom = 8

					using = Mask_Rough_Edges

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				hbox = {
					name = "activity_type"
					datacontext = "[ActivityPlanner.GetSelectedSpecialOption]"
					visible = "[And(Not(ActivityPlanner.IsPlanningStage( 'special_option_category' )),ActivityType.HasSpecialOptionCategory)]"
					layoutpolicy_horizontal = expanding

					spacing = 8

					text_single = {
						text = [ActivityOption.GetName]
						using = Font_Size_Big
						align = left|nobaseline
						default_format = "#high"
					}

					button_round = {
						onclick = "[ActivityPlanner.OpenSpecialOptionSelection]"
						tooltip = "ACTIVITY_PLANNER_CHANGE_TYPE_TT"

						button_replace = {
							alwaystransparent = yes
							parentanchor = center
						}
					}

					expand = { }
				}

				expand = { }

				hbox = {
					layoutpolicy_horizontal = expanding

					button_tertiary = {
						name = "quit"
						text = "ACTIVITY_PLANNER_QUIT"
						min_width = 300

						onclick = "[ActivityPlanner.Close]"
						shortcut = "close_window"
					}

					expand = { }
				}
			}

			# vbox if you have no Type, just using regular Activity image
			vbox = {
				name = "no_special_option"
				visible = "[Or( ActivityPlanner.IsPlanningStage( 'special_option_category' ), Not(ActivityPlanner.HasSelectedSpecialOption))]"

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin_top = 4
				margin_bottom = 4

				background = {
					texture = "[ActivityType.GetHeaderBackground]"
					alpha = 0.3
					fittype = centercrop

					margin = { 16 0 }
					margin_top = 4
					margin_bottom = 8

					using = Mask_Rough_Edges

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				hbox = {
					name = "activity_type"
					datacontext = "[ActivityPlanner.GetSelectedSpecialOption]"
					visible = "[And(Not(ActivityPlanner.IsPlanningStage( 'special_option_category' )),ActivityType.HasSpecialOptionCategory)]"
					layoutpolicy_horizontal = expanding

					spacing = 8

					text_single = {
						text = [ActivityOption.GetName]
						using = Font_Size_Big
						align = left|nobaseline
						default_format = "#high"
					}

					button_round = {
						onclick = "[ActivityPlanner.OpenSpecialOptionSelection]"
						tooltip = "ACTIVITY_PLANNER_CHANGE_TYPE_TT"

						button_replace = {
							alwaystransparent = yes
							parentanchor = center
						}
					}

					expand = { }
				}

				expand = { }

				hbox = {
					layoutpolicy_horizontal = expanding

					button_tertiary = {
						name = "quit"
						text = "ACTIVITY_PLANNER_QUIT"
						min_width = 300

						onclick = "[ActivityPlanner.Close]"
						shortcut = "close_window"
					}

					expand = { }
				}
			}
		}
	}

	type multi_location_picker_widget = widget
	{
		name = "multi_destination_selection"
		datacontext = "[ActivityPlanner.GetActivityType]"
		visible = "[And(ActivityPlanner.IsPlanningStage( 'location' ), Not(ActivityType.IsSingleLocation))]"
		parentanchor = vcenter|right
		size = { 500 900 }

		alwaystransparent = no

		using = Window_Background
		using = Window_Decoration

		state = {
			name = _show
			using = Animation_FadeIn_Quick
			position_x = 0
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Standard
			position_x = 200
		}

		widget = {
			name = "tour_has_vassals_tutorial_uses_this"
			size = { 0 0 }
			visible = "[TravelPlanData.HasNextDestination]"
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			using = Window_Margins

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "CUSTOMIZE_TOUR"
				}

				blockoverride "button_close"
				{
					visible = no
				}
			}

			text_multi = {
				text = "MULTI_DESTINATION_PICKER_INSTRUCTION"
				default_format = "#I"
				align = center
				max_width = 400
				autoresize = yes

				margin_bottom = 8
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				background = {
					texture = "gfx/interface/illustrations/event_scenes/ep2_travel_bridge.dds"
					fittype = centercrop
					alpha = 0.15

					using = Mask_Rough_Edges

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick_vertical.dds"
						blend_mode = alphamultiply
					}
				}

				blockoverride "scrollbox_content" {
					layoutpolicy_horizontal = expanding

					vbox = {
						name = "planned_phases"
						datamodel = "[DataModelSkipLast(ActivityPlanner.AccessPlayerPickedPhases, '(int32)1')]"
						layoutpolicy_horizontal = expanding

						spacing = 8

						item = {
							activity_multi_location_plan_item_widget = { }
						}
					}
				}

				blockoverride "scrollbox_empty" {
					text = "MULTI_DESTINATION_PICKER_NO_VASSALS_ADDED"
					visible = "[Not(TravelPlanData.HasNextDestination)]"
				}
			}

			vbox = {
				spacing = 8
				margin = { 16 16 }

				text_single = {
					text = "[SelectLocalization(GreaterThanOrEqualTo_int32(ActivityPlanner.GetNumPickedPhases, ActivityPlanner.GetNumPickablePhases), 'MULTI_DESTINATION_PICKER_SELECTION_COUNT_MAX', 'MULTI_DESTINATION_PICKER_SELECTION_COUNT')]"
				}

				text_label_center = {
					visible = "[ActivityPlanner.HasPickedPhase]"

					text = TRAVEL_MULTI_DESTINATION_SUMMARY
				}

				cost_breakdown_vbox = {
					visible = "[ActivityPlanner.HasPickedPhase]"
					datacontext = "[ActivityPlanner.AccessTotalPhaseCostBreakdown]"
				}

				button_primary = {
					text = CONTINUE
					enabled = "[TravelPlanData.HasNextDestination]"
					onclick = "[ActivityPlanner.FinalizeMultiDestinationSelection]"
				}
			}
		}
	}

	type header_pattern_activity = widget {
		name = "activity_planning_header"
		size = { 100 56 }

		background = {
			name = "header"
			texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
			spriteType = Corneredtiled
			texture_density = 2
			margin_left = 30

			modify_texture = {
				name = "mask"
				texture = "gfx/interface/component_masks/mask_title_big_top.dds"
				spriteType = Corneredtiled
				spriteborder = { 160 0 }
				blend_mode = alphamultiply
				alpha = 0.5
			}

			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_title_big_top.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
				blend_mode = alphamultiply
				mirror = horizontal
			}
		}

		text_single = {
			name = "header_text"
			parentanchor = top|hcenter
			position = { 0 5 }

			block "header_text" {
				text = "DEFAULT_TEXT"
			}

			block "size" {
				maximumsize = { 400 -1 }
			}

			using = Font_Type_Flavor
			using = Font_Size_Big
		}
	}

	type activity_planner_activity_details_hbox = hbox
	{
		alwaystransparent = no
		allow_outside = yes

		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		minimumsize = { 0 266 }

		vbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			allow_outside = yes

			background = {
				texture = "gfx/interface/window_activities/activity_planning/tile_window_background_subwindow_rounded.dds"
				spriteType = Corneredtiled
				spriteborder = { 96 0 }
				margin = { 0 16 }
				margin_left = 56
				margin_right = 16
				texture_density = 2

				modify_texture = {
					name = "overlay"
					texture = "gfx/interface/component_overlay/overlay_effect_border.dds"
					spriteType = Corneredstretched
					blend_mode = overlay
					alpha = 1
				}
			}

			background = {
				texture = "[ActivityType.GetHeaderBackground]"
				alpha = 0.2
				fittype = end
				margin_top = -48

				using = Mask_Rough_Edges

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
					blend_mode = alphamultiply
					mirror = horizontal
				}
			}

			header_pattern_activity = {
				name = "planner_details_header"
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "[ActivityType.GetName]"
					parentanchor = left|vcenter
					align = nobaseline
					position = { 16 -4 }
				}

				expand = { }
			}

			hbox = {
				layoutpolicy_vertical = expanding

				allow_outside = yes

				# Intent
				vbox = {
					name = "intent"
					visible = "[Or(ActivityPlanner.IsPlanningStage( 'options' ), ActivityPlanner.PrevMultiDestStageWas('options'))]"
					margin = { 16 0 }
					margin_top = 8
					margin_bottom = 16
					spacing = 4

					datacontext = "[ActivityPlanner.GetSelectedHostIntent]"
					datacontext = "[ActivityIntentData.GetType]"

					layoutpolicy_vertical = expanding

					text_label_center = {
						text = "[intent|E]"
					}

					expand = { }

					flowcontainer = {
						visible = "[ActivityIntent.HasTarget]"

						spacing = 20

						selectable_target_portrait_widget = {
							name = "intent_target"
							datacontext = "[ActivityIntentData.GetTarget]"
							parentanchor = vcenter

							blockoverride "empty_slot"
							{
								onclick = "[VariableSystem.Toggle( 'activity_intent_selection_target_list' )]"
							}
						}

						text_multi = {
							name = "intent_effects"
							parentanchor = vcenter

							text = "[ActivityIntent.GetDescription]"
							align = center|nobaseline
							autoresize = yes
							maximumsize = { 160 120 }

							background = {
								using = Background_Area
								margin = { 16 8 }
							}
						}
					}

					text_multi = {
						name = "intent_effects"
						layoutpolicy_horizontal = expanding
						visible = "[Not( ActivityIntent.HasTarget )]"

						text = "[ActivityIntent.GetDescription]"
						align = center|nobaseline
						autoresize = yes
						maximumsize = { 250 120 }

						background = {
							using = Background_Area
							margin = { 16 8 }
						}
					}

					expand = { }

					button_standard = {
						size = { 270 44 }
						datacontext = "[ActivityIntentData.GetType]"
						visible = "[GreaterThan_int32( GetDataModelSize( ActivityType.GetHostIntents ), '(int32)1' )]"

						onclick = "[ToggleGameViewData( 'activity_intent_selection', ActivityPlanner.AccessSelf )]"
						tooltip = "ACTIVITY_OPEN_INTENT_WINDOW"

						flowcontainer = {
							parentanchor = vcenter
							spacing = 10
							margin = { 8 0 }

							datacontext = "[ActivityIntentData.GetType]"

							icon = {
								size = { 30 30 }
								texture = "[ActivityIntent.GetIcon]"

								modify_texture = {
									texture = "gfx/interface/colors/colors_textured.dds"
									blend_mode = add
									framesize = { 96 96 }

									block "master_color_frame" {
										frame = 1
									}
								}
							}

							text_single = {
								text = "[ActivityIntent.GetName]"
								align = left|nobaseline
								parentanchor = vcenter
								max_width = 250
								default_format = "#clickable"
							}
						}

						button_replace = {
							parentanchor = right|vcenter
							position = { -10 0 }

							alwaystransparent = yes
						}
					}

					button_standard = {
						size = { 270 44 }
						datacontext = "[ActivityIntentData.GetType]"

						visible = "[LessThanOrEqualTo_int32( GetDataModelSize( ActivityType.GetHostIntents ), '(int32)1' )]"
						enabled = no

						tooltip = "ACTIVITY_SINGLE_INTENT_TOOLTIP"

						flowcontainer = {
							parentanchor = vcenter
							spacing = 10
							margin = { 10 0 }

							icon = {
								size = { 30 30 }
								texture = "[ActivityIntent.GetIcon]"

								modify_texture = {
									texture = "gfx/interface/colors/colors_textured.dds"
									blend_mode = add
									framesize = { 96 96 }

									block "master_color_frame" {
										frame = 1
									}
								}
							}

							text_single = {
								text = "[ActivityIntent.GetName]"
								align = left|nobaseline
								parentanchor = vcenter
								max_width = 250
								default_format = "#clickable"
							}
						}
					}
				}

				vbox = {
					layoutpolicy_vertical = expanding

					margin = { 0 16}

					divider = {
						layoutpolicy_vertical = expanding
					}
				}

				# Special Guests
				vbox = {
					visible = "[DataModelHasItems(ActivityPlanner.AccessSpecialGuests)]"
					layoutpolicy_vertical = expanding

					margin = { 16 0 }
					margin_top = 8
					margin_bottom = 16

					#expand = { }

					hbox = {
						name = "special_guest_slots"
						datamodel = "[ActivityPlanner.AccessSpecialGuests]"
						visible = "[DataModelHasItems( ActivityPlanner.AccessSpecialGuests )]"
						spacing = 32

						item = {
							vbox_special_guest_portrait = { }
						}
					}

					expand = { }

					button_standard = {
						onclick = "[OpenGameViewData( 'activity_guest_list', ActivityPlanner.AccessSelf )]"
						text = "ACTIVITY_OTHER_GUESTS_BUTTON_TEXT"
						size = { 210 44 }
					}
				}

				vbox = {
					visible = "[DataModelHasItems(ActivityPlanner.AccessSpecialGuests)]"
					layoutpolicy_vertical = expanding

					margin_top = 8
					margin_bottom = 16

					divider = {
						layoutpolicy_vertical = expanding
					}
				}

				# Activity Options
				widget = {
					name = "activity_options"
					visible = "[Or(ActivityPlanner.IsPlanningStage( 'options' ), ActivityPlanner.PrevMultiDestStageWas('options'))]"
					layoutpolicy_vertical = expanding
					size = {350 0}

					allow_outside = yes

					activity_option_edit_widget = {
						parentanchor = top|hcenter
						widgetanchor = bottom|hcenter
					}

					vbox = {
						name = "contents"
						layoutpolicy_vertical = expanding

						margin = { 16 8 }
						spacing = 16

						widget = {
							layoutpolicy_horizontal = expanding
							size = { 0 26 }

							text_label_center = {
								text = "[activity_options|E]"
								parentanchor = center
							}

							widget = {
								size = { 80 26 }
								parentanchor = vcenter|right

								cost_breakdown_vbox = {
									name = "activity_option_cost"
									datacontext = "[ActivityPlanner.AccessTotalActivityOptionCostBreakdown]"

									blockoverride "heading" { }
								}
							}
						}

						hbox = {
							name = "activity_option_categories"

							datamodel = "[ActivityPlanner.AccessOptions]"
							spacing = 16

							background = {
								using = Background_Area_ExtraDark

								margin = { 90 0 }
								margin_top = -10
								margin_bottom = -30

								modify_texture = {
									texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
									blend_mode = alphamultiply
								}
							}

							item = {
								button = {
									name = "activity_button"
									visible = "[Not( ObjectsEqual( ActiveActivityOption.GetCategory, ActivityType.GetSpecialOptionCategory ) )]"
									size = { 66 110 }

									onclick = "[ActivityPlanner.ToggleEditingOption( ActiveActivityOption.AccessSelf )]"

									tooltip = ACTIVITY_PLANNER_OPTION_TT
									using = tooltip_above

									button_standard_clean = {
										size = { 66 90 }

										onclick = "[ActivityPlanner.ToggleEditingOption( ActiveActivityOption.AccessSelf )]"

										highlight_icon = {
											parentanchor = top|hcenter
											position = { 0 3 }
											size = { 60 84 }

											texture = "[ActiveActivityOption.GetCategory.GetTexture]"

											alwaystransparent = yes
										}
									}

									highlight_icon = {
										parentanchor = bottom|hcenter
										widgetanchor = center
										position = { 0 -21 }
										size = { 34 34 }

										texture = "gfx/interface/icons/activity_option_categories/activity_option_category_level_bg.dds"

										modify_texture = {
											color = { 0.3 0.3 0.4 1 }
											blend_mode = multiply
											alpha = 0.3
										}

										text_single = {
											parentanchor = center
											position = { 1 -2 }

											text = "[Add_int32( ActiveActivityOption.GetOption.GetIndexInCategory, '(int32)1' )]"
										}
									}
								}
							}
						}

						expand = { }

					}
				}

				vbox = {
					layoutpolicy_vertical = expanding

					margin_top = 8
					margin_bottom = 56

					divider = {
						layoutpolicy_vertical = expanding
					}
				}

				# Cost & Confirm Planning
				vbox = {
					alwaystransparent = no
					allow_outside = yes

					layoutpolicy_vertical = expanding

					margin = { 16 0 }
					margin_top = 16
					margin_bottom = 68
					spacing = 8

					expand = { }

					cost_breakdown_vbox = {
						datacontext = "[ActivityPlanner.AccessCostBreakdown]"
						name = "activity_cost"
					}

					button_standard = {
						visible = "[And(Not(DataModelHasItems(ActivityPlanner.AccessSpecialGuests)), DataModelHasItems(ActivityType.GetGuestInviteRules))]"
						size = { 260 40 }

						onclick = "[OpenGameViewData( 'activity_guest_list', ActivityPlanner.AccessSelf )]"

						text = "ACTIVITY_ALL_GUESTS_BUTTON_TEXT"
					}

					button_primary = {
						name = "progress_planning"
						size = { 260 60 }

						onclick = "[ActivityPlanner.ProgressPlanningStage]"
						enabled = "[ActivityPlanner.CanProgressPlanningStage]"

						text = "ACTIVITY_PLANNER_START"

						tooltip = "[ActivityPlanner.GetCanProgressPlanningStageTooltip]"
					}

					expand = { }
				}
			}
		}
	}

	type location_picking_help_text_widget = widget
	{
		name = "location_selection_guide"
		visible = "[ActivityPlanner.IsPlanningStage( 'location' )]"
		size = { 450 210 }

		state = {
			name = _show
			using = Animation_FadeIn_Standard
			position_x = 0
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Standard
			position_x = -50
		}

		vbox = {
			margin = { 16 0 }
			margin_bottom = 8
			spacing = 8

			background = {
				margin_top = 16
				margin_bottom = 40
				margin_left = 16
				margin_right = 170

				using = Background_Area_ExtraDark

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
					blend_mode = alphamultiply
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_textured_vertical_up.dds"
					blend_mode = alphamultiply
				}
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "[ActivityType.GetLocalizedTextWithFallback( 'destination_selection_header', 'ACTIVITY_DESTINATION_SELECTION_HEADER' )]"
				default_format = "#T"
				using = Font_Size_Medium
				max_width = 420
				align = left
			}

			text_multi = {
				layoutpolicy_horizontal = expanding
				text = "ACTIVITY_DESTINATION_SELECTION"
				autoresize = yes
				max_width = 420
			}

			expand = { }
		}
	}

	type activity_option_edit_widget = widget
	{
		name = "editing_option"
		visible = "[ActivityPlanner.IsEditingOption]"
		size = { 350 420 }

		allow_outside = yes

		using = Window_Background_Subwindow

		state = {
			name = _show
			using = Animation_FadeIn_Quick
			position_y = 0
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
			position_y = 100
		}

		vbox = {
			datacontext = "[ActivityPlanner.GetEditingOption]"
			datacontext = "[ActiveActivityOption.GetCategory]"

			allow_outside = yes
			alwaystransparent = no

			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			margin = { 8 8 }

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "[ActivityOptionCategory.GetName]"
					align = nobaseline
					max_width = 280
				}

				blockoverride "button_close"
				{
					onclick = "[ActivityPlanner.StopEditingOption]"
				}

				expand = { }
			}

			hbox = {
				datamodel = "[ActivityOptionCategory.GetOptions]"

				spacing = 8
				margin_bottom = 8

				item = {
					button_radio = {
						visible = "[ActivityOption.IsShown( GetPlayer, ActivityPlanner.GetSelectedSpecialOption )]"
						size = { 30 30 }

						enabled = "[ActivityOption.IsValid( GetPlayer, ActivityPlanner.GetSelectedSpecialOption )]"
						onclick = "[ActivityPlanner.SelectOption( ActivityOption.Self )]"
						frame = "[BoolTo1And2( ObjectsEqual( ActiveActivityOption.GetOption, ActivityOption.Self ) )]"

						alwaystransparent = "[ObjectsEqual( ActiveActivityOption.GetOption, ActivityOption.Self )]"

						tooltip = "ACTIVITY_OPTION_TOOLTIP"
						using = tooltip_ne
					}
				}
			}

			vbox = {
				datacontext = "[ActiveActivityOption.GetOption]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				spacing = 8

				background = {
					using = Background_Area
					margin = { 4 4 }
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					margin = { 16 0 }

					background = {
						using = Background_Area
						margin = { 4 4 }
					}

					text_single = {
						text = "[ActivityOption.GetName]"
						using = Font_Size_Medium
						align = nobaseline
						max_width = 240
					}

					expand = { }

					text_single = {
						text = "[ActivityPlanner.GetActivityOptionCost(ActivityOption.Self)]"
						using = Font_Size_Medium
						align = nobaseline
					}
				}

				text_multi = {
					layoutpolicy_horizontal = expanding
					text = "[ActivityOption.GetDescription]"
					autoresize = yes
					max_width = 300
				}

				expand = { }
			}
		}
	}

	type vbox_activity_or_travel_confirm = vbox
	{
		alwaystransparent = no
		allow_outside = yes

		layoutpolicy_vertical = expanding

		margin = { 16 0 }
		margin_top = 16
		margin_bottom = 64
		spacing = 8

		expand = { }

		cost_breakdown_vbox = {
			name = "activity_cost"
			datacontext = "[ActivityPlanner.AccessCostBreakdown]"
		}

		button_primary = {
			name = "progress_planning"
			size = { 260 40 }

			onclick = "[ActivityPlanner.ProgressPlanningStage]"
			enabled = "[ActivityPlanner.CanProgressPlanningStage]"

			text = "ACTIVITY_PLANNER_START"
			tooltip = "[ActivityPlanner.GetCanProgressPlanningStageTooltip]"
		}

		expand = { }
	}

	type vbox_special_guest_portrait = vbox
	{
		datacontext = "[ActivitySpecialGuest.GetCharacter]"
		spacing = 7

		hbox = {
			spacing = 10

			block "title_tooltip_properties"
			{
				# Default is for planning, override for ongoing
				tooltip = "ACTIVITY_PLANNER_SPECIAL_GUEST_PLANNING_TT"
				using = tooltip_ne
			}

			text_label_center = {
				block "title_text"
				{
					# Default is for planning, override for ongoing
					text = "[ActivitySpecialGuest.GetType.GetNameForHost]"
				}
			}

			button_change = {
				block "button_change_visible"
				{
					visible = "[And( Character.IsValid, Not( ActivitySpecialGuest.GetType.HasAutoSelectCharacter ))]"
				}

				button_ignore = none

				onclick = "[OpenGameViewData( 'activity_guest_list', ActivitySpecialGuest.AccessSelf )]"
				onrightclick = "[ActivitySpecialGuest.ClearCharacter]"

				tooltip = "ACTIVITY_PLANNER_CHANGE_SPECIAL_GUEST_TT"
			}

			warning_icon = {
				visible = "[And( Not( Character.IsValid ), ActivitySpecialGuest.GetType.IsRequired)]"
				size = { 30 30 }

				tooltip = "ACTIVITY_PLANNER_CHANGE_REQUIRED_SPECIAL_GUEST_TT"
			}
		}

		selectable_target_portrait_widget = {
			block "selectable_target_portrait_properties"
			{
			}

			blockoverride "empty_slot"
			{
				onclick = "[OpenGameViewData( 'activity_guest_list', ActivitySpecialGuest.AccessSelf )]"
			}
		}
	}
}

template Activity_Planner_Widget
{
	datacontext = "[ActivityPlanner.GetActivityType]"
	datacontext = "[GetPlayer]"
	datacontext = "[GetVariableSystem]"

	alwaystransparent = no
}
