window = {
	name = "change_court_type_window"
	visible = "[CourtTypeWindow.IsCourtTypeWindowVisible]"
	using = base_ocr_window
	layer = top

	state = {
		name = _show
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Sound_WindowHide_Standard
	}

	window_ocr = {
		blockoverride "ocr_header" {
			hbox = {
				layoutpolicy_horizontal = expanding

				header_text = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text" {
						text = "CHANGE_COURT_TYPE_HEADER"
					}

					blockoverride "button_close"
					{
						onclick = "[CourtTypeWindow.ToggleShowHideCourtTypeWindow]"
					}
				}
			}
		}
		blockoverride "ocr_content" {
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					# selection list
					vbox = {
						layoutpolicy_horizontal = expanding

						vbox = {
							# Showing current court type separately in case it's no longer valid
							datacontext = "[CourtTypeWindow.GetActiveCourtTypeItem]"
							visible = "[Or(Not(CourtTypeSettingItem.IsShown), Not(CourtTypeSettingItem.IsValid))]"
							layoutpolicy_horizontal = expanding


							text_single = {
								layoutpolicy_horizontal = expanding
								text = "CURRENT_INVALID_COURT_TYPE"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								onclick = "[CourtTypeWindow.SelectCourtType(CourtTypeSettingItem.Self)]"
								down = "[ObjectsEqual(CourtTypeWindow.GetCurrentlySelectedCourtTypeItem, CourtTypeSettingItem.Self)]"
							    blockoverride "text" {
							       raw_text = "[CourtTypeSettingItem.GetNameNoTooltip]."
							    }
								blockoverride "extra" {
									text_single = {
										visible = "[ObjectsEqual(CourtTypeWindow.GetCurrentlySelectedCourtTypeItem, CourtTypeSettingItem.Self)]"
										raw_text = "Selected."
									}
								}
							}
						}

						vbox = {
							datacontext = "[CourtTypeWindow.GetOwner.GetCulture]"
							layoutpolicy_horizontal = expanding

							hbox = {
							    layoutpolicy_horizontal = expanding
								spacing = 3

								text_single = {
									raw_text = "[CountItems]"

									hbox = {
										name = "items"
									    datamodel = "[CourtTypeWindow.GetCourtTypes]"
										item = {
											widget = {
												visible = "[CourtTypeSettingItem.IsShown]"
											}
										}
									}
								}

								text_single = {
									text = "COURT_TYPES_FOR_CULTURE"
								}

								dot_l = { }

							    expand = { }
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								name = "court_types"
								datamodel = "[CourtTypeWindow.GetCourtTypes]"

								item = {
									button_text = {
										layoutpolicy_horizontal = expanding
										onclick = "[CourtTypeWindow.SelectCourtType(CourtTypeSettingItem.Self)]"
										down = "[ObjectsEqual(CourtTypeWindow.GetCurrentlySelectedCourtTypeItem, CourtTypeSettingItem.Self)]"
										visible = "[CourtTypeSettingItem.IsShown]"
										tooltip = "[CourtTypeSettingItem.CannotSelectTooltip]"
										tooltip_visible = "[Not( CourtTypeSettingItem.IsValid )]"
										blockoverride "pre" {
											text_single = {
												visible = "[ObjectsEqual(CourtTypeSettingItem.Self, CourtTypeWindow.GetActiveCourtTypeItem)]"
												raw_text = "Current:"
											}
										}

									    blockoverride "text" {
									        raw_text = "[CourtTypeSettingItem.GetNameNoTooltip]."
									    }
										blockoverride "extra" {
											text_single = {
												raw_text = "Selected."
												visible = "[ObjectsEqual(CourtTypeWindow.GetCurrentlySelectedCourtTypeItem, CourtTypeSettingItem.Self)]"
											}
											text_single = {
												visible = "[Not( CourtTypeSettingItem.IsValid )]"
												raw_text = "Not valid."
											}
										}
									}
								}
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(ObjectsEqual(CourtTypeSettingItem.Self, CourtTypeWindow.GetActiveCourtTypeItem))]"
							datacontext = "[CourtTypeWindow.GetCurrentlySelectedCourtTypeItem]"

							hbox = {
								layoutpolicy_horizontal = expanding

								# change warning text
								text_multi_wide = {
									layoutpolicy_horizontal = expanding
									# max_width = 600
									datacontext = "[CourtTypeWindow.GetActiveCourtTypeItem]"
									visible = "[Or(Not(CourtTypeSettingItem.IsShown), Not(CourtTypeSettingItem.IsValid))]"
									multiline = yes
									text = "CHANGE_COURT_TYPE_WARNING"
								}

								expand = { }
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								spacing = 3

								# cost
								text_single = {
									datacontext = "[CourtTypeWindow.GetCurrentlySelectedCourtTypeItem]"

									text = "CHANGE_COURT_TYPE_COST"
								}

								dot_l = { }

								text_single = {
									visible = "[Not(CourtTypeWindow.GetCurrentlySelectedCourtTypeItem.CanAfford)]"
									raw_text = "You do not have enough."
								}

								expand = { }
							}

							# confirm button
							button_primary_text = {
								layoutpolicy_horizontal = expanding
								datacontext = "[CourtTypeWindow.GetCurrentlySelectedCourtTypeItem]"

								blockoverride "disabled" {
									visible = "[Not(And(CourtTypeSettingItem.IsValid, And(CourtTypeSettingItem.CanAfford, Not(ObjectsEqual(CourtTypeSettingItem.Self, CourtTypeWindow.GetActiveCourtTypeItem)))))]"
								}
								enabled = "[And(CourtTypeSettingItem.IsValid, And(CourtTypeSettingItem.CanAfford, Not(ObjectsEqual(CourtTypeSettingItem.Self, CourtTypeWindow.GetActiveCourtTypeItem))))]"
								onclick = "[CourtTypeWindow.FinalizeCourtTypeChange]"
								onclick = "[CourtTypeWindow.ToggleShowHideCourtTypeWindow]"
								tooltip = "[CourtTypeSettingItem.GetConfirmChangeTooltip]"
								# opposite of "enabled"
								tooltip_visible = "[Not(And(CourtTypeSettingItem.IsValid, And(CourtTypeSettingItem.CanAfford, Not(ObjectsEqual(CourtTypeSettingItem.Self, CourtTypeWindow.GetActiveCourtTypeItem)))))]"

								blockoverride "text" {
									text = "CHANGE_COURT_TYPE_ACCEPT"
								}
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								onclick = "[CourtTypeWindow.ToggleShowHideCourtTypeWindow]"
								blockoverride "text" {
									raw_text = "CANCEL"
								}
								blockoverride "dot" {

								}
							}

						}

						expand = {}
					}

					scrollbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding

						blockoverride "scrollbox_content"
						{
							vbox = {
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								# header
								text_single = {
									raw_text = "[CourtTypeWindow.GetCurrentlySelectedCourtTypeItem.GetNameNoTooltip] provides:"
									layoutpolicy_horizontal = expanding
								}

								hbox = {
								    layoutpolicy_horizontal = expanding


									text_multi_wide = {
										max_width = 600
										text = "[CourtTypeWindow.GetCurrentlySelectedCourtTypeItem.GetDescription]"
									}

								    expand = { }
								}
								# effects

								expand = {}
							}
						}
					}
				}
			}
		}
	}

	court_types_old = {}
}
