######################################################
#################### META INFO #######################
######################################################

widget = {
	size = { 100% 100% }
	name = "meta_info"
	visible = "[And(IsDefaultGUIMode, Is('ocr'))]"
	layer = bottom

	using = Animation_ShowHide_Standard

	flowcontainer = {
		name = "observer_status"
		visible = "[IsObserver]"
		visible_at_creation = no
		parentanchor = bottom|left
		position = { 240 -50 }
		ignoreinvisible = yes

		background = {
			using = Background_Area_Dark
		}

		text_single = {
			name = "global_observer_indication"
			visible = "[Not(GetPlayer.IsValid)]"
			text = "GLOBAL_OBSERVER"
		}

		text_single = {
			name = "player_observer_indication"
			visible = "[GetPlayer.IsValid]"
			text = "PLAYER_OBSERVER"
		}

		button_cancel = {
			name = "cancel_button"
			visible = "[GetPlayer.IsValid]"

			size = { 30 30 }
			onclick = "[ClearObserver]"
			tooltip = "OBSERVER_MODE_ON"
		}

		icon_observer = {
			size = { 30 30 }
			visible = "[Not(GetPlayer.IsValid)]"
		}
	}

	# ## Build version
	# text_single = {
	# 	name = "build_version_text"
	# 	position = { 5 5 }
	# 	visible = "[And( Not(IsGameViewOpen('barbershop')), Not(ReleaseMode))]"
	#
	# 	tooltip = "[GetBuildVersionDescription]"
	#
	# 	text = "VERSION_SHORT"
	# 	default_format = "#low"
	# 	max_width = 300
	# }


	error_horse = {
		parentanchor = bottom|left
		position = { 610 -10 }
		visible = "[And( Not(IsGameViewOpen('barbershop')), And( Not( IsPauseMenuShown ), Not(ReleaseMode) ) )]"
	}
	loaded_mods_icon = {
		parentanchor = bottom|left
		visible = "[And( Not( IsPauseMenuShown ), And( HasLoadedMods, Not(ReleaseMode) ) )]"
		tooltip = "[GetLoadedMods]"
		position = { 670 -5 }
	}

}

widget = {
	name = "ingame_topbar"
	visible = "[InGameTopbar.ShouldBeVisible]"
	size = { 100% 100% }
	layer = top

	# daily sound
	widget = {
		visible = "[And(Not(GetVariableSystem.Exists('daily_sound')), Isnt('ocr'))]"

		widget = {
			visible = "[Not(GetVariableSystem.Exists('daily_sound_loud'))]"
			state = {
				name = daily_tick
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
				}
			}
		}

		widget = {
			visible = "[GetVariableSystem.Exists('daily_sound_loud')]"
			state = {
				name = daily_tick
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_increment"
				}
			}
		}
	}

	# monthly sound
	widget = {
		visible = "[And(Not(GetVariableSystem.Exists('monthly_sound')), Isnt('ocr'))]"
		state = {
			name = monthly_tick
			start_sound = {
				# soundeffect = "event:/SFX/UI/Character/Lifestyle/sfx_ui_character_lifestyle_stewardship_lifestyle"
				soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
			}
		}
	}

	### Alerts
	notifications_alerts = {
		visible = "[And(And( Not(IsGameViewOpen('barbershop')), Not( IsPauseMenuShown ) ), Is('ocr'))]"
		parentanchor = top|right
		position = { -680 0 }
		spacing = 10

		using = Animation_ShowHide_Quick
	}

	### Alerts
	flowcontainer = {
		direction = vertical
		visible = "[And(And(And(And(And(Not( IsPauseMenuShown ), Not(IsLeftWindowOpen)), Not(IsBottomLeftWindowOpen)), Not(SinglePlayerShowingPausedSuccession)), Not(IsFullScreenWindowOpen)), Isnt('ocr'))]"
		ignoreinvisible = yes
		position = { 5 0 }
		spacing = 20

		notifications_alerts_ocr = {
			spacing = 10
		}
	}

	# suggestiosn
	widget = {
		size = { 100% 100% }
		alwaystransparent = yes
		# parentanchor = right
		widgetid = "suggestions_placer"
	}

	# error_button = {
	# 	position = { 10 35 }
	# 	visible = "[And(Is('ocr'), Not(ReleaseMode))]"
	# 	background = { using = Background_Area_Border_Solid }
	# }

	# mini alerts
	container = {
		# using = NoWindowsOpen
		background = { using = Background_Area_Border_Solid }
		position = { 15 0 }
		ignoreinvisible = yes
		visible = "[And(Isnt('royal_court_screenshot_window'), Isnt('ocr'))]"

		container = {
			visible = "[Isnt('suggestions')]"
			ignoreinvisible = yes
			background = {
				using = Background_Area_Border_Solid
				margin = { 5 0 }
			}

			button_text = {
				visible = "[And(Not(GetVariableSystem.Exists('hide_alerts')), Or(DataModelHasItems(InGameTopbar.GetAlertItems), DataModelHasItems(InGameTopbar.GetDiplomaticItems)))]"
				blockoverride "text" {
					raw_text = "[Add_int32(GetDataModelSize(InGameTopbar.GetAlertItems), GetDataModelSize(InGameTopbar.GetDiplomaticItems))] alerts, Shift A."
				}
				blockoverride "extra" {
					flowcontainer = {
						ignoreinvisible = yes
						visible = "[DataModelHasItems(InGameTopbar.GetDiplomaticItems)]"

						datamodel = "[DataModelLast(InGameTopbar.GetDiplomaticItems, '(int32)1')]"

						item = {
							button = {
								scissor = yes
								size = { 500 25 }
								onclick = "[DiplomaticItem.OnClick]"
		                        onrightclick = "[DiplomaticItem.OnRightClick]"
								button_ignore = none

								text_single = {
									raw_text = "DIPLOMATIC_ITEM_TOOLTIP"
									max_width = 500
									alwaystransparent = yes
									tooltip = "DIPLOMATIC_ITEM_TOOLTIP"
								}
							}
						}

					}
					flowcontainer = {
						ignoreinvisible = yes
						visible = "[And(IsDataModelEmpty(InGameTopbar.GetDiplomaticItems), DataModelHasItems(InGameTopbar.GetAlertItems))]"

						datamodel = "[DataModelLast(InGameTopbar.GetAlertItems, '(int32)1')]"

						item = {
							button = {
								scissor = yes
								size = { 500 25 }
								onclick = "[GUIAlertItem.OnClick]"
								onrightclick = "[GUIAlertItem.OnRightClick]"
								button_ignore = none

								text_single = {
									raw_text = "[GUIAlertItem.GetTooltip]"
									max_width = 500
									alwaystransparent = yes
									tooltip = "[GUIAlertItem.GetTooltip]"
								}
							}
						}

					}
				}
				onclick = "[GetVariableSystem.Toggle('hide_alerts')]"
			}
		}
	}

	# widget = {
	# 	size = { 600 28 }
	# 	background = { using = Background_Area_Border_Solid }
	# 	visible = "[And(Is('combat_prediction_header'), IsGameViewOpen('army'))]"
	# 	position = { 0 30 }
	# 	scissor = yes
	# 	flowcontainer = {
	# 		margin_left = 15
	# 		spacing = 3
	# 		text_single = {
	# 			raw_text = "[Get('combat_prediction_header')],"
	# 		}
	# 		text_single = {
	# 			raw_text = "[Get('combat_prediction_text')]."
	# 		}
	# 	}
	# }


	# hotkey for updates?
	button = {
		visible = "[Is('updates')]"
		onclick = "[GetVariableSystem.Toggle('show_feed')]"
		shortcut = go_back_2
	}

	######################################################
	#################### TOP RIGHT #######################
	######################################################

	### Top Right Bar
	widget_top_right_bar = {
		name = "top_bar"
		using = vanilla
		parentanchor = top|right
	}

	### Outliner Button
	container = {
		visible = "[And(And( Not( IsPauseMenuShown ), And(Not(IsRightWindowOpen), IsDefaultGUIMode)), Not(IsFullScreenWindowOpen))]"
		parentanchor = top|right
		position = { -3 55 }

		using = Animation_ShowHide_Quick

		button = {
			name = "outliner_button"
			size = { 0 0 }
			alpha = 0.7
			visible = "[And(And(And(And(Not(IsGameViewOpen('activity_window')), Not(Has('county_tabs', 'tasks'))), Not(Is('extra_window'))), Not(IsGameViewOpen('title_view_window'))), Isnt('activity_view'))]"
			shortcut = "mapmode_empires_secondary"

			onclick = "[CloseGameView('holding_view')]"
			onclick = "[CloseGameView('army')]"
			onclick = "[ToggleGameView('outliner')]"
			tooltip = "TOGGLE_OUTLINER"

			state = {
				name = _mouse_enter
				alpha = 1
				duration = 0.2
				using = Animation_Curve_Default
			}

			state = {
				name = _mouse_leave
				alpha = 0.7
				duration = 0.7
				using = Animation_Curve_Default
			}
		}

		button_round = {
			visible = "[GetVariableSystem.Exists('ocr')]"
			size = { 35 35 }
			alpha = 0.7
			shortcut = "mapmode_empires_secondary"

			onclick = "[ToggleGameView('outliner')]"
			tooltip = "TOGGLE_OUTLINER"

			state = {
				name = _mouse_enter
				alpha = 1
				duration = 0.2
				using = Animation_Curve_Default
			}

			state = {
				name = _mouse_leave
				alpha = 0.7
				duration = 0.7
				using = Animation_Curve_Default
			}

			button_outliner = {
				parentanchor = center
				alwaystransparent = yes
				size = { 25 25 }
			}
		}
	}

	# vanilla buttons
	widget = {
		name = "main_tabs"
		visible = "[And(And(And(And( Not( IsPauseMenuShown ), And(Or(Not(IsObserver), GetPlayer.IsValid), IsDefaultGUIMode)), Not(IsGameViewOpen('struggle'))), Is('ocr')), Not(IsFullScreenWindowOpen))]"
		parentanchor = top|right
		position = { 0 105 }
		size = { 50 0 }
		allow_outside = yes

		using = Animation_ShowHide_Quick

		vbox = {
			alwaystransparent = no
			filter_mouse = all
			visible = "[Not(IsGameViewOpen('barbershop'))]"
			margin = { 5 10 }

			Background = {
				visible = "[And(Not(IsRightWindowOpen) , Not(IsGameViewOpen('barbershop')) )]"
				texture = "gfx/interface/skinned/hud_maintab_bg_middle.dds"
				spriteType = CorneredTiled
				texture_density =  2
				margin = { 0 -50 }
			}

			Background = {
				visible = "[And(Not(IsRightWindowOpen) , Not(IsGameViewOpen('barbershop')) )]"
				spriteType = CorneredStretched
				spriteborder_top = 100
				parentanchor = top|right
				texture_density = 2
				size = { 50 100 }
				texture = "gfx/interface/skinned/hud_maintab_bg_top.dds"
			}

			Background = {
				visible = "[And(Not(IsRightWindowOpen) , Not(IsGameViewOpen('barbershop')) )]"
				spriteType = CorneredStretched
				spriteborder_bottom = 100
				parentanchor = top|right
				texture_density = 2
				size = { 50 100 }
				texture = "gfx/interface/skinned/hud_maintab_bg_bottom.dds"
			}

			vbox = {
				state = {
					name = _show
					alpha = 1
					duration = 0.1
					using = Animation_Curve_Default
				}

				state = {
					name = _hide
					duration = 0.6
					alpha = 0
					using = Animation_Curve_Default
				}

				widget_hud_main_tab = {
					name = "tab_my_realm_tutorial_uses_this"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_my_realm.dds"
						onclick = "[ToggleGameViewData('my_realm', 'domain')]"
						shortcut = "my_realm_window"
						tooltip = "MY_REALM_BUTTON"
						down = "[IsGameViewOpen('my_realm')]"
					}
				}

				widget_hud_main_tab = {
					name = "tab_military"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_military.dds"

						onclick = "[ToggleGameViewData('military', GetPlayer.GetID)]"
						shortcut = "military_window"
						tooltip = "MILITARY_BUTTON"
						down = "[IsGameViewOpen('military')]"
					}
				}

				widget_hud_main_tab = {
					name = "tab_council"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_council.dds"

						onclick = "[ToggleGameViewData('council_window', GetPlayer.GetID)]"
						shortcut = "council_window"
						tooltip = "COUNCIL_BUTTON"
						down = "[IsGameViewOpen('council_window')]"
					}
				}
			}

			widget = {
				layoutpolicy_horizontal = expanding
				size = { 0 15 }

				icon = {
					visible = "[And( Not( IsPauseMenuShown ), And(Or(Not(IsObserver), GetPlayer.IsValid), IsDefaultGUIMode))]"
					parentanchor = right|vcenter
					texture = "gfx/interface/skinned/hud_spike_big.dds"
					size = { 25 15 }

					using = Animation_ShowHide_Standard
				}
			}

			vbox = {
				widget_hud_main_tab = {
					name = "tab_court_tutorial_uses_this"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_court.dds"

						onclick = "[ToggleGameViewData( 'court_window', GetPlayer.GetID )]"
						shortcut = "court_window"
						tooltip = "COURT_BUTTON"
						down = "[IsGameViewOpen( 'court_window' )]"
					}
				}

				widget_hud_main_tab = {
					name = "tab_intrigue"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_intrigue.dds"

						onclick = "[ToggleGameViewData('intrigue_window', GetPlayer.GetID)]"
						shortcut = "intrigue_window"
						tooltip = "INTRIGUE_BUTTON"
						down = "[IsGameViewOpen('intrigue_window')]"
					}

				}

				widget_hud_main_tab = {
					name = "tab_factions"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_factions.dds"

						onclick = "[ToggleGameView('factions_window')]"
						shortcut = "factions_window"
						tooltip = "FACTION_BUTTON"
						down = "[IsGameViewOpen('factions_window')]"
					}
				}
			}

			widget = {
				layoutpolicy_horizontal = expanding
				size = { 0 15 }

				icon = {
					visible = "[And( Not( IsPauseMenuShown ), And(Or(Not(IsObserver), GetPlayer.IsValid), IsDefaultGUIMode))]"
					parentanchor = right|vcenter
					texture = "gfx/interface/skinned/hud_spike_big.dds"
					size = { 25 15 }

					using = Animation_ShowHide_Standard
				}
			}

			vbox = {
				widget_hud_main_tab = {
					name = "tab_decisions"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_decisions.dds"

						onclick = "[ToggleGameView('decisions')]"
						shortcut = "decision_window"
						tooltip = "DECISIONS_BUTTON"
						down = "[IsGameViewOpen('decisions')]"
					}
				}

				widget_hud_main_tab = {
					name = "tab_activities"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_activities.dds"

						onclick = "[ToggleGameView('activity_list_window')]"
						shortcut = "activity_list_window"
						tooltip = "ACTIVITY_LIST_BUTTON"
						down = "[IsGameViewOpen('activity_list_window')]"
					}
				}

				widget_hud_main_tab = {
					datacontext = "[GetPlayer]"
					datacontext = "[AccessLocalPlayerCachedData]"
					datacontext = "[LocalPlayerCachedData.AccessNewArtifacts]"
					datacontext = "[LocalPlayerCachedData.AccessCourtEvents]"
					datacontext = "[Character.GetCourtGrandeurData]"
					visible = "[And( And( Not( IsPauseMenuShown ), And(Or(Not(IsObserver), GetPlayer.IsValid), IsDefaultGUIMode)), HasDlcFeature( 'royal_court' ))]"
					enabled = "[Character.HasRoyalCourt]"

					allow_outside = yes
					name = "royal_court_button_tutorial_uses_this"

					tooltipwidget = {
						container_royal_court_tooltip = {}
					}

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_courtview.dds"
						onclick = "[Character.OpenRoyalCourtView( 'throne' )]"

						# Looping glow when you have unhandled court events or first get your royal court
						using = Animation_Glow_Pulse

						glow = {
							glow_radius = 8
							using = Glow_Standard
							using = Color_Bright_Yellow
							visible = "[Or( And( Character.HasRoyalCourt, Not( LocalPlayerCachedData.HasEverOpenedRoyalCourt ) ), GreaterThan_int32( LocalPlayerCourtEvents.GetNumberCourtEvents, '(int32)0' ) )]"
						}

						# Pulse when you get a new pending court event
						state = {
							name = "pending_court_event_start"
							next = "pending_court_event_a"
							position_x = 0
							duration = 0.2
							size = { 45 45 }
							using = Animation_Curve_Default
							trigger_when = "[GreaterThan_int32( Character.GetNumPendingCourtEvents, '(int32)0' )]"

							start_sound = {
								soundeffect = "event:/DLC/EP1/SFX/UI/Notifications/royal_court_event_available"
							}
						}

						state = {
							name = "pending_court_event_a"
							next = "pending_court_event_b"
							position_x = -30
							duration = 0.45
							size = { 85 85 }
							using = Animation_Curve_Default
						}

						state = {
							name = "pending_court_event_b"
							position_x = 0
							duration = 0.25
							size = { 45 45 }
							bezier = { 0.43 0 0.2 2.2 }
						}

						flowcontainer = {
							position = { -5 0 }
							direction = vertical
							ignoreinvisible = yes
							visible = "[Character.HasRoyalCourt]"
							datacontext = "[GetPlayer]"

							widget_royal_court_notification = {
								visible = "[And( GreaterThanOrEqualTo_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetMinimumExpectedLevel ), Or( GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' ), '(int32)0' ), Or( GreaterThan_int32( LocalPlayerCourtEvents.GetNumberCourtEvents, '(int32)0' ), GreaterThan_int32( Character.GetNumPendingCourtEvents, '(int32)0' ) ) ) )]"
							}

							widget_below_cgv_expectations = {
								visible = "[LessThan_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetMinimumExpectedLevel )]"
							}
						}
					}
				}

				widget_hud_main_tab = {
					name = "tab_tax_jurisdiction"
					datacontext = "[GetPlayer]"
					enabled = "[Character.HasTaxSlots]"
					visible = "[GetPlayer.GetGovernment.IsType( 'clan_government' )]"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_tax_jurisdictions.dds"

						onclick = "[ToggleGameViewData('manage_tax_slots', GetPlayer.GetID)]"
						down = "[IsGameViewOpen('manage_tax_slots')]"

						using = tooltip_ws
						tooltipwidget = {
							tax_jurisdictions_button_tooltip = {}
						}

						icon = {
							size = { 100% 100% }
							visible = "[GreaterThan_int32( GetPlayer.GetUnassignedVassalsCount, '(int32)0' )]"
							texture = "gfx/interface/skinned/hud_maintab/maintab_tax_jurisdictions.dds"

							glow = {
								glow_radius = 8
								using = Glow_Standard
								using = Color_Red
							}
							state = {
								name = a
								next = b
								alpha = 0.3
								trigger_on_create = yes
								duration = 1.2
								using = Animation_Curve_Default
							}

							state = {
								name = b
								next = a
								alpha = 0.5
								duration = 0.6
								using = Animation_Curve_Default
							}
						}

						icon = {
							visible = "[GreaterThan_int32( GetPlayer.GetUnassignedVassalsCount, '(int32)0' )]"
							size = { 25 25 }
							position = { -5 5}
							texture = "gfx/interface/icons/symbols/icon_warning.dds"

							icon = {
								size = { 100% 100% }
								alwaystransparent = yes
								texture = "gfx/interface/icons/symbols/icon_warning.dds"

								modify_texture = {
									texture = "gfx/interface/icons/focuses/hud_icon_mask.dds"
									blend_mode = alphamultiply
								}

								modify_texture = {
									texture = "gfx/interface/colors/red.dds"
									blend_mode = colordodge
								}

								state = {
									name = a
									next = b
									alpha = 0
									trigger_on_create = yes
									duration = 1.2
									using = Animation_Curve_Default
								}

								state = {
									name = b
									next = a
									alpha = 0.8
									duration = 0.6
									using = Animation_Curve_Default
								}
							}
						}
					}
				}
			}
		}

		# Invisible button to ensure that these shortcuts don't get hidden
		button = {
			size = { 0 0 }
			onclick = "[ToggleGameViewData( 'character', GetPlayer.GetID )]"
			shortcut = "character_window"
		}
	}

	# text shortcuts list
	widget = {
		visible = "[And(And(And( Not( IsPauseMenuShown ), And(Or(Not(IsObserver), GetPlayer.IsValid), IsDefaultGUIMode)), Not(IsGameViewOpen('struggle'))), Isnt('ocr'))]"
		parentanchor = top|right
		position = { 5 105 }
		size = { 50 390 }
		allow_outside = yes

		vbox = {
			alwaystransparent = no
			filter_mouse = all
			margin_top = 15
			margin_bottom = 20
			visible = "[GetVariableSystem.Exists('ocr')]"

			vbox = {
				widget_hud_main_tab = {
					name = "tab_my_realm"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_my_realm.dds"
						onclick = "[ToggleGameView('my_realm')]"
						shortcut = "my_realm_window"
						tooltip = "MY_REALM_BUTTON"
						down = "[IsGameViewOpen('my_realm')]"
					}

					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_my_realm_leave','hud_tab_glow_my_realm_enter')]"
					}

					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_my_realm_enter','hud_tab_glow_my_realm_leave')]"
					}
				}

				widget_hud_main_tab = {
					name = "tab_military"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_military.dds"

						onclick = "[ToggleGameViewData('military', GetPlayer.GetID)]"
						shortcut = "military_window"
						tooltip = "MILITARY_BUTTON"
						down = "[IsGameViewOpen('military')]"
					}

					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_military_leave','hud_tab_glow_military_enter')]"
					}

					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_military_enter','hud_tab_glow_military_leave')]"
					}
				}

				widget_hud_main_tab = {
					name = "tab_council"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_council.dds"

						onclick = "[ToggleGameViewData('council_window', GetPlayer.GetID)]"
						shortcut = "council_window"
						tooltip = "COUNCIL_BUTTON"
						down = "[IsGameViewOpen('council_window')]"
					}

					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_council_leave','hud_tab_glow_council_enter')]"
					}

					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_council_enter','hud_tab_glow_council_leave')]"
					}
				}
			}

			widget = {
				layoutpolicy_horizontal = expanding
				size = { 0 15 }

				icon = {
					visible = "[And( Not( IsPauseMenuShown ), And(Or(Not(IsObserver), GetPlayer.IsValid), IsDefaultGUIMode))]"
					parentanchor = right|vcenter
					position = { -5 0 }
					texture = "gfx/interface/skinned/hud_spike_big.dds"
					size = { 25 15 }

					using = Animation_ShowHide_Standard
				}
			}

			vbox = {
				vbox = {
					widget_hud_main_tab = {
						name = "tab_court_tutorial_uses_this"

						blockoverride "maintab_button"
						{
							texture = "gfx/interface/skinned/hud_maintab/maintab_court.dds"

							onclick = "[ToggleGameViewData( 'court_window', GetPlayer.GetID )]"
							shortcut = "court_window"
							tooltip = "COURT_BUTTON"
							down = "[IsGameViewOpen( 'court_window' )]"
						}

						state = {
							name = _mouse_hierarchy_enter
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_court_leave','hud_tab_glow_court_enter')]"
						}

						state = {
							name = _mouse_hierarchy_leave
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_court_enter','hud_tab_glow_court_leave')]"
						}
					}

					widget_hud_main_tab = {
						name = "tab_intrigue"

						blockoverride "maintab_button"
						{
							texture = "gfx/interface/skinned/hud_maintab/maintab_intrigue.dds"

							onclick = "[ToggleGameViewData('intrigue_window', GetPlayer.GetID)]"
							shortcut = "intrigue_window"
							tooltip = "INTRIGUE_BUTTON"
							down = "[IsGameViewOpen('intrigue_window')]"
						}

						state = {
							name = _mouse_hierarchy_enter
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_intrigue_leave','hud_tab_glow_intrigue_enter')]"
						}

						state = {
							name = _mouse_hierarchy_leave
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_intrigue_enter','hud_tab_glow_intrigue_leave')]"
						}
					}

					widget_hud_main_tab = {
						name = "tab_factions"

						blockoverride "maintab_button"
						{
							texture = "gfx/interface/skinned/hud_maintab/maintab_factions.dds"

							onclick = "[ToggleGameView('factions_window')]"
							shortcut = "factions_window"
							tooltip = "FACTION_BUTTON"
							down = "[IsGameViewOpen('factions_window')]"
						}

						state = {
							name = _mouse_hierarchy_enter
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_factions_leave','hud_tab_glow_factions_enter')]"
						}

						state = {
							name = _mouse_hierarchy_leave
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_factions_enter','hud_tab_glow_factions_leave')]"
						}
					}

					widget_hud_main_tab = {
						name = "tab_decisions"

						blockoverride "maintab_button"
						{
							texture = "gfx/interface/skinned/hud_maintab/maintab_decisions.dds"

							onclick = "[ToggleGameView('decisions')]"
							shortcut = "decision_window"
							tooltip = "DECISIONS_BUTTON"
							down = "[IsGameViewOpen('decisions')]"
						}

						state = {
							name = _mouse_hierarchy_enter
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_decisions_leave','hud_tab_glow_decisions_enter')]"
						}

						state = {
							name = _mouse_hierarchy_leave
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_decisions_enter','hud_tab_glow_decisions_leave')]"
						}
					}

					widget_hud_main_tab = {
						name = "tab_activities"

						blockoverride "maintab_button"
						{
							texture = "gfx/interface/skinned/hud_maintab/maintab_activities.dds"

							onclick = "[ToggleGameView('activity_list_window')]"
							shortcut = "activity_list_window"
							tooltip = "ACTIVITY_LIST_BUTTON"
							down = "[IsGameViewOpen('activity_list_window')]"
						}

						state = {
							name = _mouse_hierarchy_enter
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_activities_leave','hud_tab_glow_activities_enter')]"
						}

						state = {
							name = _mouse_hierarchy_leave
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_activities_enter','hud_tab_glow_activities_leave')]"
						}
					}

					widget_hud_main_tab = {
						datacontext = "[GetPlayer]"
						datacontext = "[AccessLocalPlayerCachedData]"
						datacontext = "[LocalPlayerCachedData.AccessNewArtifacts]"
						datacontext = "[LocalPlayerCachedData.AccessCourtEvents]"
						datacontext = "[Character.GetCourtGrandeurData]"
						visible = "[And( And( Not( IsPauseMenuShown ), And(Or(Not(IsObserver), GetPlayer.IsValid), IsDefaultGUIMode)), HasDlcFeature( 'royal_court' ))]"
						enabled = "[Character.HasRoyalCourt]"

						allow_outside = yes
						name = "royal_court_button_tutorial_uses_this"

						tooltipwidget = {
							container_royal_court_tooltip = {}
						}

						state = {
							name = _mouse_hierarchy_enter
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_courtview_leave','hud_tab_glow_courtview_enter')]"
							alpha = 1
						}

						state = {
							name = _mouse_hierarchy_leave
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_courtview_enter','hud_tab_glow_courtview_leave')]"
							alpha = 1
						}

						blockoverride "maintab_button"
						{
							texture = "gfx/interface/skinned/hud_maintab/maintab_courtview.dds"
							onclick = "[Character.OpenRoyalCourtView( 'throne' )]"

							# Looping glow when you have unhandled court events or first get your royal court
							using = Animation_Glow_Pulse

							glow = {
								glow_radius = 8
								using = Glow_Standard
								using = Color_Bright_Yellow
								visible = "[Or( And( Character.HasRoyalCourt, Not( LocalPlayerCachedData.HasEverOpenedRoyalCourt ) ), GreaterThan_int32( LocalPlayerCourtEvents.GetNumberCourtEvents, '(int32)0' ) )]"
							}

							# Pulse when you get a new pending court event
							state = {
								name = "pending_court_event_start"
								next = "pending_court_event_a"
								position_x = 0
								duration = 0.2
								size = { 45 45 }
								using = Animation_Curve_Default
								trigger_when = "[GreaterThan_int32( Character.GetNumPendingCourtEvents, '(int32)0' )]"

								start_sound = {
									soundeffect = "event:/DLC/EP1/SFX/UI/Notifications/royal_court_event_available"
								}
							}

							state = {
								name = "pending_court_event_a"
								next = "pending_court_event_b"
								position_x = -30
								duration = 0.45
								size = { 85 85 }
								using = Animation_Curve_Default
							}

							state = {
								name = "pending_court_event_b"
								position_x = 0
								duration = 0.25
								size = { 45 45 }
								bezier = { 0.43 0 0.2 2.2 }
							}

							flowcontainer = {
								position = { 0 6 }
								parentanchor = bottom|hcenter
								widgetanchor = center
								direction = vertical
								ignoreinvisible = yes
								visible = "[Character.HasRoyalCourt]"
								datacontext = "[GetPlayer]"

								widget_royal_court_notification = {
									visible = "[And( GreaterThanOrEqualTo_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetMinimumExpectedLevel ), Or( GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' ), '(int32)0' ), Or( GreaterThan_int32( LocalPlayerCourtEvents.GetNumberCourtEvents, '(int32)0' ), GreaterThan_int32( Character.GetNumPendingCourtEvents, '(int32)0' ) ) ) )]"
								}

								widget_below_cgv_expectations = {
									visible = "[LessThan_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetMinimumExpectedLevel )]"
								}
							}
						}
					}
				}
			}
		}

		# Invisible button to ensure that these shortcuts don't get hidden
		button = {
			# visible = "[Not(IsGameViewOpen('character'))]"
			onclick = "[ToggleGameViewData( 'character', GetPlayer.GetID )]"
			# onclick = "[GetVariableSystem.Set('hide_right_windows', 'yes')]"
			# onclick = "[PdxGuiTriggerAllAnimations('clear_right')]"
			onclick = "[CloseGameView('my_realm')]"
			onclick = "[Clear('extra_window')]"
			visible = "[Not(IsPauseMenuShown)]"
			shortcut = "character_window"
		}
	}

	widget_stress_sounds = { }

	# resources
	window = {
		# layer = debug
		movable = no
		# parentanchor = right
		position = { 0 0 }
		using = TooltipFocus
		alwaystransparent = no
		size = { 0 0 }
		visible = "[GetVariableSystem.Exists('resources')]"

		# state = {
		# 	name = _show
		# 	on_finish = "[ExecuteConsoleCommand(Select_CString(Character.IsAdult, Character.GetKnightEffectivenessBreakdown, 'x'))]"
		# 	# on_finish = "[ExecuteConsoleCommand(AddTextIf(GetPlayer.IsAdult, 'gold 100'))]"
		# 	# on_start = "[GetVariableSystem.Set('opened', 'yes')]"
		# }

		# state = {
		# 	name = _hide
		# 	on_finish = "[GetVariableSystem.Clear('opened')]"
		# }
		#
		#
		# widget = {
		# 	visible = "[And(GetVariableSystem.Exists('opened'), GetPlayer.IsAdult)]"
		# 	state = {
		# 		name = _show
		# 		on_finish = "[ExecuteConsoleCommand('gold 100')]"
		# 	}
		# }

		vbox = {
			margin = { 15 10 }
			name = "spendables"
			resizeparent = yes
			background = { using = Background_Area_Border_Solid }
			# layoutpolicy_horizontal = expanding
			# layoutpolicy_vertical = expanding

			vbox = {
				name = "tutorial_highlight_resources_bar"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				hbox = {
					name = "gold"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					# minimumsize = { 90 0 }
					# margin_left = 7

					using = tooltip_ne

					tooltipwidget = {
						widget_gold_breakdown_tooltip = {
							blockoverride "my_gold" {
								flowcontainer = {
									# direction = vertical
									text_single = {
										raw_text = "Gold: [GetPlayer.GetGold|0]. Income"
									}
									widget = {
										size = { 5 0 }
									}
									text_single = {
										raw_text = "CURRENT_BALANCE"
									}
									text_single = {
										raw_text = "."
									}
								}
							}
							blockoverride "income"
							{
								datacontext = "[InGameTopbar.GetIncomeBalanceBreakdown]"
							}

							blockoverride "expenses"
							{
								datacontext = "[InGameTopbar.GetExpensesBalanceBreakdown]"
							}
						}
					}

					hbox = {
						name = "gold"
						layoutpolicy_vertical = expanding

						hbox = {
							spacing = 3

							text_single = {
								raw_text = "Gold:"
							}

							flowcontainer = {
								spacing = 6
								ignoreinvisible = yes

								text_single = {
									name = "gold_value_positive"
									raw_text = "[GetPlayer.GetGold|0],"
									max_width = 50
								}

								flowcontainer = {
									text_single = {
										name = "balance_positive"
										text = "CURRENT_BALANCE"
										max_width = 50
									}
									text_single = {
										raw_text = " per month."
									}
								}
							}
						}
					}
					expand = { }
				}

				button = {
					datacontext = "[GetPlayer]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[GreaterThan_int32( Character.GetDomainSize, Character.GetDomainLimit )]"

					minimumsize = { 60 0 }

					margin_left = 3

					tooltip = "[Character.GetDomainLimitTooltip]"
					using = tooltip_ne

					onclick = "[ToggleGameView('my_realm')]"


					flowcontainer = {
						resizeparent = yes
						spacing = 5
						text_single = {
							raw_text = "Warning, Domain"
						}

						text_single = {
							name = "value"
							raw_text = "[Character.GetDomainSize] out of [Character.GetDomainLimit]."
						}
					}
				}

				hbox = {
					name = "prestige"
					datacontext = "[InGameTopbar.GetPrestigeItem]"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					using = tooltip_ne

					datacontext = "[PlayerValueItem.GetBalanceGained]"
					tooltipwidget = {
						widget_value_breakdown_tooltip = {
							blockoverride "header" {
								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "Prestige gain:"
								}
							}
						}
					}

					#TODO remove progress form localization instead of this weird scissoring

					flowcontainer = {
						spacing = 3
						text_single = {
							raw_text = "Prestige:"
						}

						text_single = {
							name = "prestige_value"
							raw_text = "[GetPlayer.GetPrestige|0],"
						}

						container_resource_balance = { }

						text_single = {
							raw_text = "[GetPrestigeLevelName(GetPlayer.GetPrestigeLevel)],"
							tooltipwidget = {
								widget_resource_value_tooltip = { }
							}
						}
					}

					text_single = {
						visible = "[PlayerValueItem.HasNextLevel]"
						tooltipwidget = {
							widget_resource_value_tooltip = { }
						}
						datacontext = "[InGameTopbar.GetPrestigeItem]"
						raw_text = " [PlayerValueItem.GetProgressTooltip]."
					}

					expand = { }
				}

				button = {
					layoutpolicy_horizontal = expanding
					name = "piety"
					datacontext = "[InGameTopbar.GetPietyItem]"
					onclick = "[OpenGameViewData( 'faith', GetPlayer.GetFaith.GetID )]"

					using = tooltip_ne

					datacontext = "[PlayerValueItem.GetBalanceGained]"
					tooltipwidget = {
						widget_value_breakdown_tooltip = {
							blockoverride "header" {
								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "Piety gain:"
								}
							}
						}
					}

					flowcontainer = {
						ignoreinvisible = yes
						resizeparent = yes
						spacing = 3
						text_single = {
							raw_text = "Piety:"
						}

						text_single = {
							name = "piety_value"
							raw_text = "[GetPlayer.GetPiety|0],"
						}

						container_resource_balance = { }


						text_single = {
							raw_text = "[GetPietyLevelName(GetPlayer.GetPietyLevel)],"
						}

						text_single = {
							visible = "[PlayerValueItem.HasNextLevel]"
							datacontext = "[InGameTopbar.GetPietyItem]"
							raw_text = "[PlayerValueItem.GetProgressTooltip]."
						}
					}
				}

				button = {
					layoutpolicy_horizontal = expanding
					name = "renown"
					datacontext = "[InGameTopbar.GetDynastyPrestigeItem]"
					datacontext = "[PlayerValueItem.GetBalanceGained]"

					onclick = "[DefaultOnHouseCoatOfArmsClick(GetPlayer.GetHouse.GetID)]"

					using = tooltip_ne

					tooltipwidget = {
						widget_value_breakdown_tooltip = {
							blockoverride "header" {
								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "Renown gain:"
								}
							}
						}
					}

					flowcontainer = {
						resizeparent = yes
						ignoreinvisible = yes
						spacing = 3

						text_single = {
							raw_text = "Renown:"
						}

						flowcontainer = {
							visible = "[GetPlayer.IsDynast]"
							spacing = 3

							text_single = {
								name = "prestige_value"
								raw_text = "[GetPlayer.GetDynasty.GetPrestige|0],"
							}

							# container_resource_balance = { }
						}

						flowcontainer = {
							visible = "[Not(GetPlayer.IsDynast)]"
							spacing = 3

							text_single = {
								name = "prestige_value_nodynast"
								raw_text = "[GetPlayer.GetDynasty.GetPrestige|0],"
							}

							# container_resource_balance = { }
						}

						widget = {
							scissor = yes
							visible = "[ValueBreakdown.ShouldShowValue]"

							text_single = {
								resizeparent = yes
								margin_left = -56
								name = "gained_value"
								raw_text = "[ValueBreakdown.GetValue]."
							}
						}


						widget = {
							scissor = yes
							visible = "[Or(EqualTo_int32(GetPlayer.GetDynasty.GetPrestigeLevel, '(int32)2'), EqualTo_int32(GetPlayer.GetDynasty.GetPrestigeLevel, '(int32)3'))]"

							text_single = {
								raw_text = " [GetDynastyPrestigeLevelName(GetPlayer.GetDynasty.GetPrestigeLevel)],"
							}
						}

						text_single = {
							visible = "[Not(Or(EqualTo_int32(GetPlayer.GetDynasty.GetPrestigeLevel, '(int32)2'), EqualTo_int32(GetPlayer.GetDynasty.GetPrestigeLevel, '(int32)3')))]"
							raw_text = "[GetDynastyPrestigeLevelName(GetPlayer.GetDynasty.GetPrestigeLevel)],"
						}

						text_single = {
							tooltipwidget = {
								widget_resource_value_tooltip = { }
							}
							visible = "[PlayerValueItem.HasNextLevel]"
							datacontext = "[InGameTopbar.GetDynastyPrestigeItem]"
							raw_text = "[PlayerValueItem.GetProgressTooltip]."
						}

						# expand = { }
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				name = "military"
				datacontext = "[GetPlayer]"
				datacontext = "[GetPlayerArmyComposition]"

				button_group = {
					layoutpolicy_horizontal = expanding
					onclick = "[ToggleGameViewData('military', GetPlayer.GetID)]"
					tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
					using = tooltip_ne

					flowcontainer = {
						spacing = 3
						ignoreinvisible = yes

						text_single = {
							raw_text = "Soldiers:"
						}

						flowcontainer = {
							spacing = 3

							flowcontainer = {

								text_single = {
									name = "strength"
									raw_text = "[ArmyComposition.GetSoldierCountString]"
								}

								text_single = {
									raw_text = " out of [ArmyComposition.GetMaxNumberOfSoldiers]."
								}

								text_single = {
									margin_left = 5
									raw_text = "[ArmyComposition.GetArmyQualityName]."
								}
							}
						}
					}
				}

				button = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[Not(GreaterThan_int32( Character.GetDomainSize, Character.GetDomainLimit ))]"

					minimumsize = { 60 0 }

					margin_left = 3

					tooltip = "[Character.GetDomainLimitTooltip]"
					using = tooltip_ne

					onclick = "[ToggleGameView('my_realm')]"

					flowcontainer = {
						resizeparent = yes
						spacing = 5
						text_single = {
							raw_text = "Domain:"
						}

						text_single = {
							name = "value"
							raw_text = "[Character.GetDomainSize] out of [Character.GetDomainLimit]."
						}
					}
				}
			}

			hbox = {
		    layoutpolicy_horizontal = expanding
				spacing = 3

				datacontext = "[GetPlayer]"

				text_single = {
					raw_text = "Stress level: [Character.GetStressLevel],"
					visible = "[GreaterThan_int32(Character.GetStress, '(int32)0')]"
					tooltip = "[Character.GetHealthInfo]"
				}

				text_single = {
					visible = "[GreaterThan_int32(Character.GetStress, '(int32)0')]"
					raw_text = "[GetPlayer.GetStressProgress]% to next level."
				}

				text_single = {
					raw_text = "Stress: [Character.GetStress]."
					tooltip = "[Character.GetHealthInfo]"
				}

			    expand = { }
			}

			expand = { }
		}
	}

	# used for testing ocr
	flowcontainer = {
		parentanchor = center
		visible = no
		direction = vertical
		background = { using = Background_Area_Border_Solid margin = { 5 5 } }

		text_single = {
			raw_text = "Lorem Ipsum dolor est."
		}

		text_single = {
			raw_text = "Multiple members."
		}

		text_single = {
			raw_text = "Great Berber."
		}

		text_single = {
			raw_text = "Stress: 0."
		}

		text_single = {
			raw_text = "0 50 15 5"
		}

		text_single = {
			raw_text = "bold Members"
		}

		text_single = {
			raw_text = "Seljuk"
		}
	}
}

### Time Controls
icon = {
	name = "timeline_widget"
	visible = "[And( And( Not( IsPauseMenuShown ), TimelineWidget.ShouldBeVisible ), Not(GetVariableSystem.Exists('royal_court_screenshot_window')))]"
	size = { 700 25 }
	parentanchor = bottom|right
	filter_mouse = all
	alwaystransparent = yes
	layer = bottom
	allow_outside = yes
	background = {
		using = ocr
		using = Background_Area_Border_Solid margin_left = -50
	}

	# button_decision_entry_text = {
	# 	background = { using = Background_Area_Border_Solid }
	# 	parentanchor = vcenter
	# 	datacontext = "[GetDecisionWithKey('commission_artifact_decision')]"
	# 	onclick = "[OpenGameViewData( 'decision_detail', Decision.Self)]"
	# 	shortcut = confirm
	# }
	button = {
		onclick = "[OnPause]"
		onclick = "[GetVariableSystem.Clear('hide_event')]"
		shortcut = pause
	}

	flowcontainer = {
		visible = "[Not(GetVariableSystem.Exists('ocr'))]"
		position = { 35 0 }
		margin_bottom = 5
		ignoreinvisible = yes
		spacing = 3

		button = {
			datacontext = "[GetPlayer]"
			shortcut = zoom_out
			visible = "[Not(IsDiarchyVisible)]"
			clicksound = ""
		}

		button = {
			onclick = "[OpenGameViewData('holding_view', GetPlayer.GetCapitalLocation.Self)]"
			onclick = "[DefaultOnCoatOfArmsRightClick(GetPlayer.GetCapitalLocation.GetTitle.GetID)]"
			shortcut = "mapmode_culture_secondary"
		}


		hotkeys_HUD = { }

		# Just the hotkeys for increase/decrease speed
		container = {
			name = "speed_hotkeys"


			button = {
				# visible = "[Not(Or(Or(IsLeftWindowOpen, IsRightWindowOpen), IsBottomLeftWindowOpen))]"
				name = "increase_speed"
				size = { 0 0 }

				shortcut = "increase_speed"
				shortcut = "increase_speed_2"
				shortcut = "increase_speed_3"
				onclick = "[OnIncreaseGameSpeed]"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_increment"
			}

			button = {
				# visible = "[Not(Or(Or(IsLeftWindowOpen, IsRightWindowOpen), IsBottomLeftWindowOpen))]"
				name = "decrease_speed"
				size = { 0 0 }

				shortcut = "decrease_speed"
				shortcut = "decrease_speed_2"
				shortcut = "decrease_speed_3"
				onclick = "[OnDecreaseGameSpeed]"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
			}

			container = {
				visible = "[Not(Or(Or(IsLeftWindowOpen, IsRightWindowOpen), IsBottomLeftWindowOpen))]"
				button = {
					shortcut = speed_1
					onclick = "[SetGameSpeed('(int32)0')]"
				}

				button = {
					shortcut = speed_2
					onclick = "[SetGameSpeed('(int32)1')]"
				}

				button = {
					shortcut = speed_3
					onclick = "[SetGameSpeed('(int32)2')]"
				}

				button = {
					shortcut = speed_4
					onclick = "[SetGameSpeed('(int32)3')]"
				}

				button = {
					shortcut = speed_5
					onclick = "[SetGameSpeed('(int32)4')]"
				}
			}
		}

		widget_gamespeed_sounds = { }

		button_text = {
		    blockoverride "text" {
				raw_text = "[Localize('CURRENT_DATE')]."
		    }
			tooltip = "CURRENT_DATE_TOOLTIP"
			onclick = "[OnPause]"
		}

		text_single = {
			margin_top = 1
			raw_text = "Speed [GetCurrentGameSpeed],"
		}

		text_single = {
			margin_top = 1
			raw_text = "Paused."
			visible = "[IsGamePaused]"
		}
	}

	date_vanilla = {
		visible = "[GetVariableSystem.Exists('ocr')]"
	}
}

### Bottom Left
widget = {
	name = "bottom_bar"
	visible = "[And( Not( IsPauseMenuShown ), IsDefaultGUIMode )]"
	size = { 100% 100% }
	layer = bottom
	datacontext = "[GetPlayer]"

	# button = {
	# 	shortcut = mapmode_house_secondary
	# 	onclick = "[PdxGuiTriggerAllAnimations('dismiss_feed')]"
	# }
	#
	# state = {
	# 	name = dismiss_feed
	# }

	using = Animation_ShowHide_Quick

	empty_screen = {
		using = vanilla

		state = {
			name = a
			trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)5' )]"
			on_finish = "[SetMapMode('realms')]"
		}
		state = {
			name = b
			trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)4' )]"
			on_finish = "[SetMapMode('realms_0')]"
		}

		state = {
			name = _show
			on_finish = "[PdxGuiTriggerAllAnimations('show_bottom_hud')]"
		}

		container = {
			visible = "[And( Not( IsGameViewOpen( 'barbershop' ) ), And( GetPlayer.IsValid, Not( GetVariableSystem.Exists( 'hide_bottom_left_HUD' ) ) ) )]"
			parentanchor = bottom|left
			ignoreinvisible = yes

			icon_hud_background = {
				size = { 558 64 }
				visible = "[IsDiarchyVisible]"
			}

			icon_hud_background = {
				size = { 507 64 }
				visible = "[Not( IsDiarchyVisible )]"
			}
		}

		### BOTTOM LEFT CHARACTER PORTRAIT
		container = {
			datacontext = "[GetPlayer]"
			visible = "[And( Not(IsGameViewOpen('barbershop')) , And(GetPlayer.IsValid, Not(GetVariableSystem.Exists( 'hide_bottom_left_HUD'))))]"
			visible_at_creation = no
			parentanchor = bottom|left

			state = {
				name = show_bottom_hud
				alpha = 1
				next = _show
			}

			state = {
				name = _show
				using = Animation_Curve_Default
				duration = 0.15

				position = { 0 0 }
				alpha = 1
			}

			state = {
				name = _hide
				using = Animation_Curve_Default
				duration = 0.15

				position = { 0 50 }
				alpha = 0
			}

			portrait_hud = {
				parentanchor = center
				position = { -40 0 }
			}

			icon = {
				texture = "gfx/interface/hud/bottom_left_portrait_fade.dds"
				parentanchor = bottom|left
				color = { 0.12 0.12 0.12 1 }
			}

			icon = {
				texture = "gfx/interface/hud/bottom_left_portrait_fade.dds"
				parentanchor = bottom|left
				color = { 0.15 0.15 0.15 0.3 }
			}
		}

		## Bottom left CoA
		coa_realm_medium_crown = {
			visible = "[And(Not(IsGameViewOpen('barbershop')), And(And(IsDefaultGUIMode, GetPlayer.IsRuler), Not(GetVariableSystem.Exists( 'hide_bottom_left_HUD'))))]"
			visible_at_creation = no
			parentanchor = bottom|left
			state = {
				name = show_bottom_hud
				alpha = 1
				next = _show
			}

			state = {
				name = _show
				using = Animation_Curve_Default
				duration = 0.25

				position = { 0 4 }
				alpha = 1
			}

			state = {
				name = _hide
				using = Animation_Curve_Default
				duration = 0.25

				position = { 0 50 }
				alpha = 0
			}

			blockoverride "coa_button"
			{
				tooltip = "[GetPlayer.GetDefaultRealmFlagTooltipPrimaryTitleClickInfo]"
				onclick = "[DefaultOnCoatOfArmsClick(GetPlayer.GetPrimaryTitle.GetID)]"
			}
		}

		### Lifestyle
		flowcontainer = {
			name = "bottom_left_bar"
			visible = "[And( Not(IsGameViewOpen('barbershop')), And( Not( IsPauseMenuShown ), And(And(IsDefaultGUIMode, GetPlayer.IsValid), Not(GetVariableSystem.Exists( 'hide_bottom_left_HUD')))))]"
			parentanchor = bottom|left
			position = { 66 0 }
			ignoreinvisible = yes
			alwaystransparent = no
			state = {
				name = show_bottom_hud
				alpha = 1
				next = _show
			}

			state = {
				name = _show
				using = Animation_Curve_Default
				duration = 0.21

				position = { 66 0 }
				alpha = 1
			}

			state = {
				name = _hide
				using = Animation_Curve_Default
				duration = 0.21

				position = { 30 50 }
				alpha = 0
			}

			spacer = {
				size = { 4 0 }
			}


			flowcontainer = {
				ignoreinvisible = yes
				margin_bottom = 5

				button_normal = {
					name = "lifestyle_button"
					visible = "[GetPlayer.IsAdult]"

					tooltip = "PLAYER_LIFESTYLE_TOOLTIP"
					using = tooltip_ne

					onclick = "[OpenGameViewData( 'lifestyle', GetPlayer.GetID )]"
					size = { 55 55 }

					icon = {
						texture = "gfx/interface/buttons/button_lifestyles_base.dds"
						size = { 100% 100% }
					}

					icon = {
						name = "progress_frame"
						texture = "gfx/interface/progressbars/action_progress_frame.dds"
						size = { 100% 100% }
						alpha = 0.5
					}

					highlight_icon_lifestyle_focus = {
						name = "tutorial_highlight_lifestyle_HUD_button"
						texture = "[GetPlayer.GetFocus.GetIcon]"
						alwaystransparent = yes
						size = { 100% 100% }

						modify_texture = {
							texture = "gfx/interface/icons/focuses/hud_icon_mask.dds"
							blend_mode = alphamultiply
						}
					}

					icon = {
						visible = "[Or(GetPlayer.CanPlayerChangeMyFocus, Not( GetPlayer.GetLifestyle.IsValid ))]"
						size = { 100% 100% }
						alwaystransparent = yes
						texture = "[GetPlayer.GetFocus.GetIcon]"

						modify_texture = {
							texture = "gfx/interface/icons/focuses/hud_icon_mask.dds"
							blend_mode = alphamultiply
						}

						modify_texture = {
							texture = "gfx/interface/colors/gold.dds"
							blend_mode = add
						}

						modify_texture = {
							texture = "gfx/interface/colors/red.dds"
							blend_mode = colordodge
						}

						state = {
							name = a
							next = b
							alpha = 0
							trigger_on_create = yes
							duration = 1.2
							using = Animation_Curve_Default
						}

						state = {
							name = b
							next = a
							alpha = 0.5
							duration = 0.6
							using = Animation_Curve_Default
						}
					}

					icon = {
						visible = "[And(GreaterThan_int32( Character.GetTotalPerkPoints, '(int32)0' ), Character.IsLocalPlayer)]"
						size = { 100% 100% }
						alwaystransparent = yes
						texture = "[GetPlayer.GetFocus.GetIcon]"

						modify_texture = {
							texture = "gfx/interface/icons/focuses/hud_icon_mask.dds"
							blend_mode = alphamultiply
						}

						modify_texture = {
							texture = "gfx/interface/colors/gold.dds"
							blend_mode = add

						}

						modify_texture = {
							texture = "gfx/interface/colors/red.dds"
							blend_mode = colordodge
						}

						state = {
							name = a
							next = b
							alpha = 0
							trigger_on_create = yes
							duration = 1.2
							using = Animation_Curve_Default
						}

						state = {
							name = b
							next = a
							alpha = 0.5
							duration = 0.6
							using = Animation_Curve_Default
						}

						glow = {
							glow_radius = 2
							glow_generation_rules= {
								glow_alpha_mask = 0
								glow_blur_passes = 2
								glow_texture_downscale = 2.5f
								glow_ignore_inside_pixels = yes
							}
							using = Color_Orange
						}
					}

					progresspie = {
						name = "progress"
						size = { 55 55 }
						texture = "gfx/interface/progressbars/action_progress_thin.dds"
						framesize = { 124 124 }
						frame = 2
						value = "[GetPlayer.GetLifestyleExperienceProgress( GetPlayer.GetLifestyle.Self )]"
						min = 0
						max = 1
					}

					button_round = {
						datacontext = "[GetPlayer]"
						visible = "[And(GreaterThan_int32( Character.GetTotalPerkPoints, '(int32)0' ), Character.IsLocalPlayer)]"
						parentanchor = bottom|right
						position = { 7 3 }
						size = { 28 28 }
						framesize = { 82 82 }
						upframe = 1
						uphoverframe = 1
						uppressedframe = 1
						alwaystransparent = yes

						text_single = {
							parentanchor = center
							datacontext = "[GetPlayer]"
							text = "[Character.GetTotalPerkPoints]"
							default_format = "#high"
							max_width = 180
							align = nobaseline

							# animation_attention = {
							# 	visible = "[GreaterThan_int32( GetPlayer.GetTotalPerkPoints, '(int32)0' )]"
							# }
						}
					}

					animation_sonar = {
						texture = "gfx/interface/component_effects/effect_sonar_ring.dds"
						visible = "[GreaterThan_int32( GetPlayer.GetTotalPerkPoints, '(int32)0' )]"
					}
				}

				button_normal = {
					name = "education_button"
					visible = "[Not(GetPlayer.IsAdult)]"

					tooltip = "PLAYER_EDUCATION_FOCUS_TOOLTIP"
					using = tooltip_ne

					onclick = "[ToggleGameViewData( 'character_focus', GetPlayer.GetID )]"
					size = { 55 55 }

					icon = {
						texture = "gfx/interface/buttons/button_lifestyles_base.dds"
						size = { 100% 100% }
					}

					highlight_icon_lifestyle_focus = {
						texture = "[GetPlayer.GetFocus.GetIcon]"
						onclick = "[ToggleGameViewData( 'character_focus', GetPlayer.GetID )]"
						size = { 100% 100% }
						gfxtype = togglepushbuttongfx
						effectname = "NoHighlight"
						framesize = { 140 140 }

						modify_texture = {
							texture = "gfx/interface/icons/focuses/hud_icon_mask.dds"
							blend_mode = alphamultiply
						}
					}
				}

				button_open_inventory = {
					name = "open_inventory_tutorial_uses_this"
					size = { 55 55 }

					datacontext = "[GetPlayer]"

					blockoverride "highlight_icon_size"
					{
						size = { 40 40 }
					}

					widget_new_artifacts = {
						size = { 15 15 }
						parentanchor = bottom|right

						visible = "[Or( GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'inventory' ), '(int32)0' ), And( Not( GetPlayer.HasRoyalCourt ), GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' ), '(int32)0' ) ) )]"
					}
				}
			}

			spacer = {
				size = { 6 0 }
			}

			widget = {
				name = "stress_widget"
				size = { 110 55 }

				widget = {
					parentanchor = center
					size = { 180 108 }

					tooltip = "PLAYER_STRESS_TOOLTIP"
					using = tooltip_ne

					widget = {
						name = "progressbar"
						parentanchor = center
						widgetanchor = left|vcenter
						position = { -13 0 }
						size = { 60 20 }

						background = {
							texture = "gfx/interface/colors/white.dds"
							color = { 0.1 0.1 0.1 0.8 }
						}

						icon = {
							visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)2')]"
							size = { 100% 100% }
							texture = "gfx/interface/colors/white.dds"
							color = { 1 0.1 0.1 0.2 }

							using = Animation_ShowHide_Standard

							state = {
								name = a
								next = b
								trigger_on_create = yes

								using = Animation_Curve_Default
								duration = 0.8
								alpha = 0
							}

							state = {
								name = b
								next = a

								using = Animation_Curve_Default
								duration = 1.5
								alpha = 1
							}
						}

						hbox = {
							widget = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								layoutstretchfactor_horizontal = "[GetProgressBarValueMaxScaled( GetPlayer.GetStressProgress, '(float)100', '(int32)60' )]"

								progressbar_hud_stress = {
									visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetStressLevel, '(int32)3')]"
									visible_at_creation = no
									size = { 100% 100% }

									using = Animation_ShowHide_Standard

									blockoverride "bar_color"
									{
										texture = "gfx/interface/colors/red.dds"
									}

									blockoverride "bar_color_flow"
									{
										texture = "gfx/interface/colors/gold.dds"
										alpha = 0.7
									}
								}

								progressbar_hud_stress = {
									visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)2')]"
									visible_at_creation = no
									size = { 100% 100% }

									using = Animation_ShowHide_Standard

									blockoverride "bar_color"
									{
										texture = "gfx/interface/colors/orange.dds"
									}

									blockoverride "bar_color_flow"
									{
										texture = "gfx/interface/colors/white.dds"
										alpha = 0.3
									}
								}

								progressbar_hud_stress = {
									visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)1')]"
									visible_at_creation = no
									size = { 100% 100% }

									using = Animation_ShowHide_Standard

									blockoverride "bar_color"
									{
										texture = "gfx/interface/colors/gold_darker.dds"
									}

									blockoverride "bar_color_flow"
									{
										texture = "gfx/interface/colors/white.dds"
										alpha = 0.3
									}
								}

								progressbar_hud_stress = {
									visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)0')]"
									size = { 100% 100% }

									using = Animation_ShowHide_Standard

									blockoverride "bar_color"
									{
										texture = "gfx/interface/colors/blue.dds"
									}

									blockoverride "bar_color_flow"
									{
										texture = "gfx/interface/colors/white.dds"
										alpha = 0.3
									}
								}
							}

							widget = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								layoutstretchfactor_horizontal = "[GetProgressBarValueMaxOtherScaled( GetPlayer.GetStressProgress, '(float)100', '(int32)60' )]"
							}
						}
					}

					widget = {
						size = { 100% 100% }

						progressbar_hud_stress_glow = {
							texture = "gfx/interface/hud/hud_stress_glow_red.dds"

							blockoverride "animation_trigger_1"
							{
								name = "stress_level_increase"
							}

							blockoverride "animation_trigger_2"
							{
								name = "stress_increase"
							}
						}

						progressbar_hud_stress_glow = {
							texture = "gfx/interface/hud/hud_stress_glow_blue.dds"

							blockoverride "animation_trigger_1" {
								name = "stress_level_decrease"
							}

							blockoverride "animation_trigger_2"
							{
								name = "stress_decrease"
							}
						}

						progressbar_hud_stress_glow = {
							visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)3')]"
							texture = "gfx/interface/hud/hud_stress_glow_red.dds"

							blockoverride "animation_trigger_1" {
								name = "lvl3_fire"
								trigger_on_create = yes
							}

							blockoverride "animation_trigger_2" {}
							blockoverride "lvl_3" {}
						}

						icon = {
							parentanchor = center
							position = { -30 0 }
							size = { 30 30 }
							texture = "gfx/interface/colors/white.dds"
							using = Color_Red


							modify_texture = {
								name = "mask_1"
								texture = "gfx/interface/component_masks/mask_glow.dds"
								blend_mode = alphamultiply
								rotate_uv = 1
							}

							modify_texture = {
								name = "mask_2"
								texture = "gfx/interface/component_masks/mask_glow.dds"
								blend_mode = alphamultiply
								rotate_uv = -1
							}

							modify_texture = {
								name = "mask_3"
								texture = "gfx/interface/component_masks/mask_clouds.dds"
								blend_mode = alphamultiply
								alpha = 0.1
							}

							modify_texture = {
								name = "mask_4"
								texture = "gfx/interface/component_masks/mask_circle.dds"
								blend_mode = mask
							}

							modify_texture = {
								name = "mask_3"
								texture = "gfx/interface/colors/gold.dds"
								blend_mode = add
							}

							state = {
								name = "stress_level_increase"
								next = b

								using = Animation_Curve_Default
								scale = 1
								alpha = 0
							}

							state = {
								name = b
								next = c

								duration = 0.6
								bezier = { 0.5 0 1 0.5 }

								scale = 5
								alpha = 0.7
							}

							state = {
								name = c
								duration = 0.3
								alpha = 0
								scale = 6
							}

							state = {
								name = rotate_a
								next = rotate_b
								trigger_on_create = yes

								modify_texture = {
									name = "mask_1"
									rotate_uv = 1
								}
							}

							state = {
								name = rotate_a
								next = rotate_b

								duration = 1

								modify_texture = {
									name = "mask_1"
									rotate_uv = 180
								}
							}

							state = {
								name = rotate_a_2
								next = rotate_b_2
								trigger_on_create = yes

								modify_texture = {
									name = "mask_2"
									rotate_uv = -1
								}
							}

							state = {
								name = rotate_a_2
								next = rotate_b_2

								duration = 1

								modify_texture = {
									name = "mask_2"
									rotate_uv = -180
								}
							}

							state = {
								name = rotate_a_3
								next = rotate_b_3
								trigger_on_create = yes

								modify_texture = {
									name = "mask_3"
									rotate_uv = 0
									alpha = 0.1
								}
							}

							state = {
								name = rotate_a_3
								next = rotate_b_3

								duration = 1

								modify_texture = {
									name = "mask_3"
									rotate_uv = 40
									alpha = 0.8
								}
							}
						}

						icon = {
							size = { 100% 100% }
							texture = "gfx/interface/skinned/hud_stress_bg.dds"

							icon = {
								parentanchor = vcenter
								position = { 41 0 }
								size = { 35 35 }

								texture = "gfx/interface/icons/stress/icon_stress_level.dds"
								framesize = { 70 70 }
								frame = "[IntToFrameIndex( GetPlayer.GetStressLevel )]"

								modify_texture = {
									visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetStressLevel, '(int32)2')]"
									name = "lvl3_glow"
									texture = "gfx/interface/colors/gold.dds"
									blend_mode = colordodge
									alpha = 0
								}

								modify_texture = {
									name = "lvl_increase"
									texture = "gfx/interface/colors/gold.dds"
									blend_mode = colordodge
									alpha = 0
								}

								state = {
									name = a
									next = b
									duration = 0.6
									trigger_on_create = yes
									using = Animation_Curve_Default

									modify_texture = {
										name = "lvl3_glow"
										alpha = 0.3
									}
								}

								state = {
									name = b
									next = a
									duration = 1.5
									using = Animation_Curve_Default

									modify_texture = {
										name = "lvl3_glow"
										alpha = 0
									}
								}

								state = {
									name = "stress_level_increase"
									next = "stress_level_increase_2"

									modify_texture = {
										name = "lvl_increase"
										alpha = 0
									}
								}

								state = {
									name = "stress_level_increase_2"
									next = "stress_level_increase_3"
									duration = 0.4
									bezier = { 0.5 0 1 0.5 }

									modify_texture = {
										name = "lvl_increase"
										alpha = 0.7
									}
								}

								state = {
									name = "stress_level_increase_3"
									duration = 0.5
									bezier = { 0 0.5 0.5 1 }

									modify_texture = {
										name = "lvl_increase"
										alpha = 0
									}
								}
							}
						}
					}
				}
			}

			spacer = {
				size = { 9 0 }
			}

			flowcontainer = {
				parentanchor = bottom
				ignoreinvisible = yes

				button_hud_character_bar = {
					name = "house_button"
					datacontext = "[GetPlayer.GetHouse]"
					onclick = "[DefaultOnHouseCoatOfArmsClick(DynastyHouse.GetID)]"
					parentanchor = bottom

					using = tooltip_ne

					tooltipwidget = {
						using = dynasty_house_tooltip
					}

					coa_house_tiny = {
						parentanchor = center
						position = { 0 7 }
						using = tooltip_ne
						scale = 0.92

						blockoverride "coa_button"
						{
							alwaystransparent = yes
						}

						blockoverride "coa_tooltip"
						{}
					}
				}

				button_hud_character_bar = {
					name = "faith_button"
					datacontext = "[GetPlayer.GetFaith]"
					parentanchor = bottom

					onclick = "[OpenGameViewData( 'faith', GetPlayer.GetFaith.GetID )]"

					tooltipwidget = {
						faith_tooltip_click = {}
					}

					highlight_icon = {
						texture = "[Faith.GetIcon]"
						size = { 40 40 }
						position = { 0 4 }
						parentanchor = center

						glow = {
							color = { 0 0 0 0.8 }
							glow_radius = 3
							using = Glow_Standard
						}
					}
				}

				button_hud_character_bar = {
					name = "player_culture_button_tutorial_uses_this"
					datacontext = "[GetPlayer.GetCulture]"
					parentanchor = bottom
					onclick = "[OpenGameViewData( 'culture_window', Culture.GetID )]"

					tooltipwidget = {
						culture_tooltip_click = {}
					}

					highlight_icon = {
						parentanchor = center
						position = { 0 5 }
						size = { 40 40 }
						texture = "gfx/interface/icons/icon_culture.dds"

						glow = {
							color = { 0 0 0 0.8 }
							glow_radius = 3
							using = Glow_Standard
						}
					}
				}

				button_hud_character_bar = {
					#datacontext = "[GetPlayer]"
					name = "open_diarchy_tutorial_uses_this"
					parentanchor = bottom
					onclick = "[ToggleGameViewData( 'diarchy', Character.GetID )]"
					visible = "[IsDiarchyVisible]"
					tooltip = "DIARCHY_WINDOW_OPEN_TOOLTIP"

					highlight_icon = {
						parentanchor = center
						position = { 0 5 }
						size = { 40 40 }
						texture = "gfx/interface/icons/scale_of_power.dds"

						glow = {
							color = { 0 0 0 0.7 }
							glow_radius = 2
							using = Glow_Standard
						}
					}

				}
			}

			widget_stress_sounds = {}
		}

		flowcontainer = {
			name = "bottom_left_bar_temporary_statuses"

			datacontext = "[GetPlayer]"
			datacontext = "[Character.GetInvolvedActivity]"

			visible = "[And( Not( IsPauseMenuShown ), And(And(IsDefaultGUIMode, Character.IsValid), Not(GetVariableSystem.Exists( 'hide_bottom_left_HUD')))))]"
			visible_at_creation = no
			parentanchor = bottom|left
			position = { 250 -70 }
			ignoreinvisible = yes
			alwaystransparent = no

			flowcontainer = {
				name = "involved_activity"

				visible = "[And( Activity.IsValid, Not( Activity.IsComplete ) )]"
				visible_at_creation = no

				spacing = 8

				activity_hud_button = {
					name = "activity_button"
				}

				button_hud_travel = {
					name = "activity_travel_button"
					datacontext = "[Character.GetTravelPlan]"
					visible = "[Character.IsTraveling]"
					parentanchor = "vcenter"

					text = "ACTIVITY_VIEW_TRAVEL"
					tooltip = "TT_AWAY_FROM_CAPITAL_WIDGET"

					max_width = 160

					onclick = "[ToggleGameViewData('travel_planner', TravelPlan.GetID)]"
					onclick = "[Character.ZoomCameraTo]"
				}
			}

			button_normal = {
				name = "away_from_capital"
				datacontext = "[Character.GetTravelPlan]"

				visible_at_creation = no
				visible = "[And( Character.IsTraveling, Or( Not( Activity.IsValid ), Activity.IsComplete ) ) )]"

				size = { 60 60 }

				onclick = "[ToggleGameViewData('travel_planner', TravelPlan.GetID)]"
				onclick = "[Character.ZoomCameraTo]"

				tooltip = "TT_AWAY_FROM_CAPITAL_WIDGET"
				using = tooltip_above

				icon = {
					texture = "gfx/interface/buttons/button_lifestyles_base.dds"
					size = { 100% 100% }
				}

				icon = {
					name = "progress_frame"
					texture = "gfx/interface/progressbars/action_progress_frame.dds"
					size = { 100% 100% }
					parentanchor = center
					alpha = 0.5
				}

				progresspie = {
					name = "progress"
					size = { 60 60 }
					texture = "gfx/interface/progressbars/action_progress_thin.dds"
					framesize = { 124 124 }
					frame = 2
					widgetanchor = top|hcenter
					parentanchor = top|hcenter
					value = "[TravelPlan.GetData.GetNextDestinationProgress]"
					min = 0
					max = 1
				}

				highlight_icon = {
					texture = "gfx/interface/icons/travel/icon_travel_hud_placeholder.dds"
					alwaystransparent = yes
					size = { 45 45 }
					parentanchor = center
				}
			}
		}

		######################################################
		######### MAPMODES AND WARS AND INSPIRATIONS #########
		######################################################

		map_modes_debug = {
			visible = "[And( InDebugMode, And(IsDefaultGUIMode, Not(IsRightWindowOpen)))]"
			visible_at_creation = no
			parentanchor = bottom|right
			position = { 0 -220 }

			filter_mouse = all
			alwaystransparent = no
			scale = 0.9
		}

		widget = { # Inspiration Details
			visible = "[And( InGameBottomBar.HasSelectedInspiration, And( IsDefaultGUIMode, Not( IsRightWindowOpen ) ) )]"
			visible_at_creation = no
			datacontext = "[InGameBottomBar.GetSelectedInspiration]"
			datacontext = "[Inspiration.GetOwner]"

			parentanchor = bottom|right
			position = { -200 -150 }
			using = Window_Background_Subwindow

			alwaystransparent = no
			filter_mouse = all

			state = {
				name = _show
				using = Animation_FadeIn_Quick
				using = Sound_WindowShow_Standard
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
				using = Sound_WindowHide_Standard
			}

			vbox = {
				name = "selected_inspiration"
				set_parent_size_to_minimum = yes
				margin = { 4 4 }
				margin_bottom = 20
				spacing = 5

				vbox = {
					layoutpolicy_horizontal = expanding

					header_pattern = {
						layoutpolicy_horizontal = expanding

						blockoverride "header_text"
						{
							text = "SELECTED_INSPIRATION_HEADER"
						}

						blockoverride "button_close"
						{
							onclick = "[InGameBottomBar.ClearSelectedInspiration]"
						}

						blockoverride "button_back"
						{
							visible = no
						}
					}
				}

				hbox = {
					name = "selected_inspiration_data"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_left = 20


					background = {
						using = Background_Area
						layoutpolicy_horizontal = expanding
						margin_top = 14
					}

					portrait_shoulders = {
						name = "inspiration_owner_portrait"

						blockoverride "inspiration_status_icons"
						{
						}
					}

					vbox = {
						name = "text"
						layoutpolicy_horizontal = expanding
						margin_left = 10
						margin_bottom = 10
						margin_top = -14

						text_multi = {
							name = "inspiration_text"
							min_width = 300
							max_width = 300
							autoresize = yes
							text = "SELECTED_INSPIRATION_TEXT"
							margin_right = 10
							margin_top = 4
						}

						spacer = {
							size = { 0 6 }
						}

						hbox = {
							name = "recuirt_owner"
							layoutpolicy_horizontal = expanding
							spacing = 5

							text_single = {
								text = "[Character.GetRelationToString( GetPlayer )]"
								tooltip = "EXTENDED_RELATIONS_TOOLTIP"
							}

							button_recruit_character = {}

							warning_icon = {
								name = "wants_to_leave"
								visible = "[And( Character.CourtierWantsToLeaveCourt, Not( Character.IsImprisoned))]"
								size = { 20 20 }
								tooltip = "[Character.GetCourtierLeaveDescription]"
							}

							expand = {}
						}

						text_single = {
							name = "gold_invested"
							text = INSPIRATION_INVESTED_GOLD
							layoutpolicy_horizontal = expanding
							visible = "[Inspiration.GetSponsor.IsLocalPlayer]"
						}
					}
				}


				hbox = {
					layoutpolicy_horizontal = expanding
					margin_top = 4

					button_primary = {
						name = "sponsor_inspiration"
						text = START_SPONSOR_INSPIRATION
						visible = "[Not( Inspiration.GetSponsor.IsValid )]"

						enabled = "[Character.IsPlayerInteractionValid( 'fund_inspiration_interaction' )]"
						onclick = "[Character.OpenPlayerInteraction( 'fund_inspiration_interaction' )]"
						tooltip = "[Character.GetPlayerInteractionTooltip( 'fund_inspiration_interaction' )]"
					}
				}

				vbox = {
					name = "inspiration_progress"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_bottom = -8
					margin_top = -10
					spacing = 5

					visible = "[Inspiration.GetSponsor.IsValid]"

					text_single = {
						text = INSPIRATION_IN_PROGRESS
					}

					progressbar_segmented_chance = {
						name = "progress_bar"
						tooltip = "INSPIRATION_ITEM_PROGRESS_TOOLTIP"
						datamodel = "[GetSegmentedProgressChanceBar( GetDefine( 'NInspiration', 'MAX_PROGRESS' ), GetDefine( 'NScheme', 'PROGRESS_FRAMES' ), Inspiration.GetProgress, Inspiration.GetProgressChance )]"
					}

					text_single = {
						text = INSPIRATION_ESTIMATED_REMAINING
						tooltip = INSPIRATION_ESTIMATED_TIME_TOOLTIP
					}

					expand = {
						layoutpolicy_vertical = expanding
					}
				}
			}
		}

		### WARS SCHEMES AND MAPMODES AND INSPIRATIONS
		flowcontainer = {
			visible = "[And(IsDefaultGUIMode, Not(IsRightWindowOpen))]"
			parentanchor = bottom|right
			widgetanchor = top|right
			position = { 0 -155 }
			alwaystransparent = yes
			ignoreinvisible = yes
			filter_mouse = all
			allow_outside = yes
			spacing = 30

			state = {
				name = _show
				using = Animation_FadeIn_Quick
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
			}

			# In progress systems
			flowcontainer = {
				name = "in_progress_systems"
				ignoreinvisible = yes
				margin_top = 15
				visible = "[Not(IsGameViewOpen('barbershop'))]"

				flowcontainer = {
					name = "player_inspirations"
					datamodel = "[GetPlayer.GetSponsoredInspirations]"
					parentanchor = vcenter
					spacing = 5
					margin = { 5 0 }
					allow_outside = yes

					item = {
						button_normal = {
							datacontext = "[Inspiration.GetOwner]"
							size = { 60 60 }
							tooltip = "TT_INSPIRATION_WIDGET"
							using = tooltip_above
							onclick = "[InGameBottomBar.ToggleSelectedInspiration( Inspiration.Self )]"

							icon = {
								texture = "gfx/interface/buttons/button_lifestyles_base.dds"
								size = { 100% 100% }
							}

							icon = {
								visible = "[ObjectsEqual( InGameBottomBar.GetSelectedInspiration, Inspiration.Self )]"
								texture = "gfx/interface/buttons/button_lifestyles_active_frame.dds"
								size = { 100% 100% }
							}

							icon = {
								name = "progress_frame"
								texture = "gfx/interface/progressbars/action_progress_frame.dds"
								size = { 100% 100% }
								parentanchor = center
								alpha = 0.5
							}

							progresspie = {
								name = "progress"
								visible = "[And( Inspiration.GetSponsor.IsValid, Not( Inspiration.IsComplete ) )]"

								size = { 60 60 }
								texture = "gfx/interface/progressbars/action_progress_thin.dds"
								framesize = { 124 124 }
								frame = 2

								widgetanchor = top|hcenter
								parentanchor = top|hcenter

								min = 0
								max = 100

								value = "[Select_float( GreaterThan_int32( Inspiration.GetProgress, '(int32)0' ), CurrentAndMaxToProgressbarValueInt32( Inspiration.GetProgress, GetDefine( 'NInspiration', 'MAX_PROGRESS' ) ), '(float)2' )]"
							}

							highlight_icon = {
								texture = "[Inspiration.GetType.GetIcon]"
								alwaystransparent = yes
								size = { 45 45 }
								position = { 1 1 }
								parentanchor = center
							}
						}
					}
				}

				flowcontainer = {
					name = "player_schemes"
					datamodel = "[InGameBottomBar.GetSchemes]"
					parentanchor = vcenter
					spacing = 5
					margin = { 5 0 }

					item = {
						button_normal = {
							name = "tutorial_highlight_lifestyle_HUD_button"
							onclick = "[BottomBarSchemeItem.OnClick]"
							datacontext = "[BottomBarSchemeItem.GetScheme]"
							tooltip = "BOTTOMBAR_SCHEME_TOOLTIP"
							size = { 60 60 }

							icon = {
								texture = "gfx/interface/buttons/button_lifestyles_base.dds"
								size = { 100% 100% }
							}

							icon = {
								name = "progress_frame"
								texture = "gfx/interface/progressbars/action_progress_frame.dds"
								size = { 100% 100% }
								parentanchor = center
								alpha = 0.5
							}

							progresspie = {
								name = "progress"
								size = { 60 60 }
								texture = "gfx/interface/progressbars/action_progress_thin.dds"
								framesize = { 124 124 }
								frame = 2
								widgetanchor = top|hcenter
								parentanchor = top|hcenter
								value = "[Scheme.GetProgressBar]"
								min = 0
								max = 1
							}

							highlight_icon = {
								texture = "[Scheme.GetSchemeType.GetIcon]"
								alwaystransparent = yes
								size = { 45 45 }
								parentanchor = center
							}
						}
					}
				}

				button_raise_disband_armies = {
					name = "tutorial_highlight_raise_troops"
					visible = "[And( And( Character.IsAtWar, Not(Character.HasRaisedRegiments)), Not(IsGameViewOpen('barbershop')))]"
					visible_at_creation = no

					enabled = "[PlayerCanRaiseAnyRallyPoint]"
					onclick = "[PlayerRaiseAllRegiments]"
					clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"

					onclick = "[PdxGuiTriggerAllAnimations('button_army')]"

					tooltip = "[GetPlayerRaiseAllTooltip]"

					animation_aggressive = {}
				}

				button_raise_disband_armies = {
					visible = "[And( PlayerShouldDisbandAll, Not(IsGameViewOpen('barbershop')))]"
					visible_at_creation = no

					onclick = "[PlayerDisbandAll]"
					enabled = "[PlayerCanDisbandAll]"
					clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_unit_army_disband"

					blockoverride "text" {
						text = "DISBAND_ALL"
					}

					tooltip = "[GetDisbandAllTooltip]"
				}

				spacer = {
					datacontext = "[GetPlayer]"
					visible = "[Or(And(Character.IsAtWar, Not(Character.HasRaisedRegiments)), PlayerShouldDisbandAll)]"

					size = { 5 20 }
				}

				flowcontainer = {
					name = "wars"
					parentanchor = vcenter
					ignoreinvisible = yes

					flowcontainer = {
						name = "great_holy_wars"
						parentanchor = vcenter
						ignoreinvisible = yes

						flowcontainer = {
							datamodel = "[GetPlayer.GetFaith.GetDefensiveGreatHolyWars]"
							ignoreinvisible = yes
							parentanchor = vcenter

							item = {
								button_ghw_banner = {
									name = "defensive_ghw"
									parentanchor = vcenter

									blockoverride "ghw_tooltip"
									{
										tooltip = "GHW_OPEN_TOOLTIP_DEFENDER"
										using = tooltip_ne
									}
								}
							}
						}

						button_ghw_banner = {
							name = "player_faith_ghw"
							datacontext = "[GetPlayer.GetFaith.GetGreatHolyWar]"
							visible = "[GetPlayer.GetFaith.HasOffensiveGreatHolyWar]"
							visible_at_creation = no
							parentanchor = vcenter

							blockoverride "ghw_tooltip"
							{
								tooltip = "GHW_OPEN_TOOLTIP_ATTACKER"
								using = tooltip_ne
							}
						}
					}

					flowcontainer = {
						name = "raids_on_me"
						datamodel = "[GetPlayer.GetHostileRaiders]"
						parentanchor = vcenter

						item = {
							button_raid_banner = {
								parentanchor = vcenter
								tooltip = "RAID_ON_ME_TOOLTIP"
							}
						}
					}

					flowcontainer = {
						name = "raids_by_me"
						datamodel = "[GetPlayer.GetRaidTargets]"
						parentanchor = vcenter

						item = {
							button_raid_banner = {
								parentanchor = vcenter
								tooltip = "RAID_BY_ME_TOOLTIP"
							}
						}
					}

					flowcontainer = {
						name = "regular_wars"
						datamodel = "[InGameBottomBar.GetWarItems]"
						ignoreinvisible = yes

						item = {
							button_war_banner = {}
						}
					}
				}

				flowcontainer = {
					name = "involved_struggles"
					datamodel = "[GetPlayer.GetInvolvedStruggles]"
					parentanchor = vcenter
					ignoreinvisible = yes
					margin_top = -15

					item = {
						button_struggle_banner = {}
					}
				}

				flowcontainer = {
					name = "interloper_struggles"
					datamodel = "[GetPlayer.GetInterloperStruggles]"
					parentanchor = vcenter
					ignoreinvisible = yes
					margin_top = -15

					item = {
						button_struggle_banner = {}
					}
				}
			}

			## Map Modes
			map_modes = {
				visible = "[Not(IsGameViewOpen('barbershop'))]"
				filter_mouse = all
				alwaystransparent = no
			}
		}
	}

	empty_screen = {
		using = ocr

		# there's a bunch of old checks for not('ocr') here, can be removed later

		# activty
		flowcontainer = {
			datacontext = "[GetPlayer]"
			datacontext = "[Character.GetInvolvedActivity]"

			visible = "[And(And( Not( IsPauseMenuShown ), And(And(IsDefaultGUIMode, Character.IsValid), Not(GetVariableSystem.Exists( 'hide_bottom_left_HUD')))), Isnt('ocr'))]"
			visible_at_creation = no
			direction = vertical
			position = { 10 50 }
			ignoreinvisible = yes
			alwaystransparent = no
			margin_left = 5
			background = { using = Background_Area_Border_Solid }

			error_button = { }

			flowcontainer = {
				direction = vertical
				ignoreinvisible = yes
						alpha = 0
						# widget = {
						#     size = { 0 50 }
						# }
						text_single = {
								raw_text = "[Get('toast_1')]"
						}
						text_multi = {
								using = wide
								autoresize = yes
								raw_text = "[Get('toast_desc_1')]"
						}
						# not sure where this comes from
						# widget = {
						#     size = { 0 10 }
						# }
						widget = {
								size = { 0 25 }
								visible = "[Is('toast_extras')]"
						}
						text_single = {
								raw_text = "Dismiss"
						}

						# widget = {
						#     size = { 0 25 }
						# }
						# visible = "[Is('toasted')]"
				visible = no
				}

			# widget = {
			# 	size = { 0 120 }
			# 	visible = "[Is('toasted')]"
			# }

			flowcontainer = {
				# margin_top = 50
				direction = vertical
				name = "involved_activity"

				visible = "[Activity.IsValid]"
				visible_at_creation = no
				ignoreinvisible = yes
				datacontext = "[Character.GetTravelPlan]"

				state = {
					name = open_activity
					onclick = "[Activity.OpenActivityView]"
					# on_finish = "[OpenGameViewData('activity_window', Activity.Self)]"
				}

				button_text = {
					shortcut = map_mode_6
					layoutpolicy_horizontal = expanding
					onclick = "[Activity.OpenActivityView]"
					# onclick = "[ToggleGameViewData('activity_window', Activity.Self)]"
					blockoverride "text" {
						raw_text = "Activity: [Activity.GetType.GetName], [AddTextIf( Is('act_event'), 'Event pending, ')]Control A."
					}
				}
			}

			flowcontainer = {
				ignoreinvisible = yes
				direction = vertical
				datacontext = "[Character.GetTravelPlan]"
				datacontext = "[Character.GetTravelPlan.GetData]"
				visible = "[And(Character.IsTraveling, TravelPlanData.HasNextDestination)]"

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical

					button_text = {
						# visible = "[Character.HasActivityState( 'travel' )]"
						onclick = "[ToggleGameViewData('travel_planner', TravelPlan.GetID)]"
						onclick = "[Character.ZoomCameraTo]"
						blockoverride "extra" {
							text_single = {
								raw_text = "Travelling to [TravelPlanData.GetFinalDestination.GetProvince.GetNameNoTooltip],"
							}
							text_single = {
								raw_text = "[TravelPlanData.GetFinalDestination.GetEstimatedArrivalDate.GetTimeDiffFromNow] left, [TravelPlanData.GetFinalDestinationProgress|%0]."
							}
						}
					}

					button_text = {
						using = prov_pan
						datacontext = "[TravelPlanData.GetCurrentLocation]"
						visible = "[Not(ObjectsEqual(MyCapital, Province.Self))]"
						blockoverride "text" {
							raw_text = "Currently in [TravelPlanData.GetCurrentLocation.GetName], [DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)]."
						}
						button = {
							shortcut = map_mode_9
							datacontext = "[GetPlayer.GetCurrentLocation]"
							using = prov_pan
						}
					}

					button_text = {
						using = prov_click
						datacontext = "[TravelPlanData.GetNextDestination.GetProvince]"
						visible = "[Not(ObjectsEqual(TravelPlanData.GetNextDestination, TravelPlanData.GetFinalDestination))]"
							blockoverride "text" {
							raw_text = "moving to [TravelPlanData.GetNextDestination.GetProvince.GetName], [TravelPlanData.GetNextDestination.GetEstimatedArrivalDate.GetTimeDiffFromNow] left."
							}
					}

					button_text = {
						visible = "[Not(ShowRoot('is_land', Province))]"
						using = prov_pan
						shortcut = map_mode_9
						datacontext = "[TravelPlanData.GetCurrentLocation]"
						layoutpolicy_horizontal = expanding
							blockoverride "text" {
									raw_text = "Pan camera to your character, Shift Q."
							}
					}
					button_text = {
						visible = "[ShowRoot('is_land', Province)]"
						onclick = "[DefaultOnCoatOfArmsRightClick(Province.GetCoATitle.GetID)]"
						shortcut = map_mode_9
						datacontext = "[TravelPlanData.GetCurrentLocation]"
						layoutpolicy_horizontal = expanding
							blockoverride "text" {
									raw_text = "Pan camera to your character, Shift Q."
							}
					}
				}

				button_text = {
					name = "activity_travel_button"
					datacontext = "[Character.GetTravelPlan]"
					# visible = "[Character.IsTraveling]"
					visible = no
					blockoverride "dot" {
					}

					blockoverride "text" {
						text = "ACTIVITY_VIEW_TRAVEL"
					}
					tooltip = "TT_AWAY_FROM_CAPITAL_WIDGET"

					onclick = "[ToggleGameViewData('travel_planner', TravelPlan.GetID)]"
					onclick = "[Character.ZoomCameraTo]"
				}
			}

			container = {
				using = ocr_off
				button_normal = {
					name = "away_from_capital"
					datacontext = "[Character.GetTravelPlan]"

					visible_at_creation = no
					visible = "[And( Character.IsTraveling, Or( Not( Activity.IsValid ), Activity.IsComplete ) ) )]"

					size = { 60 60 }

					onclick = "[ToggleGameViewData('travel_planner', TravelPlan.GetID)]"
					onclick = "[Character.ZoomCameraTo]"

					tooltip = "TT_AWAY_FROM_CAPITAL_WIDGET"
					using = tooltip_above

					progresspie = {
						name = "progress"
						size = { 60 60 }
						texture = "gfx/interface/progressbars/action_progress_thin.dds"
						framesize = { 124 124 }
						frame = 2
						widgetanchor = top|hcenter
						parentanchor = top|hcenter
						value = "[TravelPlan.GetData.GetNextDestinationProgress]"
						min = 0
						max = 1
					}

					highlight_icon = {
						texture = "gfx/interface/icons/travel/icon_travel_hud_placeholder.dds"
						alwaystransparent = yes
						size = { 45 45 }
						parentanchor = center
					}
				}
			}
		}

		widget = { # Inspiration Details
			visible = "[And( InGameBottomBar.HasSelectedInspiration, And( IsDefaultGUIMode, Not( IsRightWindowOpen ) ) )]"
			visible_at_creation = no
			datacontext = "[InGameBottomBar.GetSelectedInspiration]"
			datacontext = "[Inspiration.GetOwner]"
			position = { 5 150 }
			using = Window_Background_Subwindow

			alwaystransparent = no
			filter_mouse = all

			state = {
				name = _show
				using = Animation_FadeIn_Quick
				using = Sound_WindowShow_Standard
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
				using = Sound_WindowHide_Standard
			}

			widget_inspiration_details_ocr = {
				margin_left = 5
				button = {
					shortcut = close_window
					onclick = "[InGameBottomBar.ClearSelectedInspiration]"
				}
				blockoverride "hud" {
				}
			}
		}

		### WARS SCHEMES AND MAPMODES AND INSPIRATIONS
		flowcontainer = {
			# visible = "[IsDefaultGUIMode]"
			parentanchor = right|bottom
			widgetanchor = left|bottom
			position = { -650 -25 }
			alwaystransparent = yes
			ignoreinvisible = yes
			filter_mouse = all
			allow_outside = yes
			# spacing = 30
			direction = vertical

			state = {
				name = _show
				using = Animation_FadeIn_Quick
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
			}

			button_text = {
				background = { using = Background_Area_Border_Solid }
				visible = "[And(GetVariableSystem.Exists('hide_tutorial'), GetTutorial.ShouldBeVisible)]"
				onclick = "[GetVariableSystem.Clear('hide_tutorial')]"
				shortcut = go_to_capital
				blockoverride "text" {
					raw_text = "Open tutorial, hotkey Home."
				}
			}

			flowcontainer = {
				ignoreinvisible = yes
				visible = "[And(IsDefaultGUIMode, Not(IsRightWindowOpen))]"
				direction = vertical

				## Wars
				flowcontainer = {
					visible = "[Not(GetVariableSystem.Exists('ocr'))]"
					ignoreinvisible = yes
					direction = vertical
					allow_outside = yes
					background = { using = Background_Area_Border_Solid }

					button = {
						shortcut = go_to_capital
						clicksound = ""
						visible = "[Not(GetVariableSystem.Exists('hide_tutorial'))]"
					}
					button_text = {
						visible = "[GetVariableSystem.Exists('event_active')]"
						onclick = "[GetVariableSystem.Toggle('hide_event')]"
						shortcut = map_mode_1
						blockoverride "text" {
							raw_text = "[Select_CString(Is('hide_event'), 'Show', 'Hide')] event window, hotkey E."
						}
					}

					button_text = {
						datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"
							blockoverride "text" {
									raw_text = "You have [LocalPlayerNewArtifacts.GetNumNewArtifacts] new artifacts. Hotkey i."
							}
						shortcut = mapmode_kingdoms_secondary
						onclick = "[ToggleGameViewData( 'inventory', GetPlayer.GetID )]"
						visible = "[Or( GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'inventory' ), '(int32)0' ), And( Not( GetPlayer.HasRoyalCourt ), GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' ), '(int32)0' ) ) )]"
					}

					flowcontainer = {
						name = "player_inspirations"
						datamodel = "[GetPlayer.GetSponsoredInspirations]"
						allow_outside = yes
						visible = "[Not(IsLeftWindowOpen)]"

						item = {
							button_text = {
								blockoverride "text" {
									alwaystransparent = yes
									raw_text = "[Inspiration.GetName], [Multiply_int32(Inspiration.GetProgress, '(int32)10')]%. [Inspiration.GetEstimatedTimeRemaining]."
								}
								datacontext = "[Inspiration.GetOwner]"
								tooltip = "TT_INSPIRATION_WIDGET"
								onclick = "[InGameBottomBar.ToggleSelectedInspiration( Inspiration.Self )]"
							}
						}
					}

					#TODO
					button_text = {
						datacontext = "[GetPlayer]"
							blockoverride "text" {
									raw_text = "View [Character.GetDiarchyTypeName], Page Up."
							}
						shortcut = zoom_out
						onclick = "[ToggleGameViewData( 'diarchy', Character.GetID )]"
						visible = "[IsDiarchyVisible]"
						# tooltip = "DIARCHY_WINDOW_OPEN_TOOLTIP"
					}

					flowcontainer = {
						spacing = 2
							direction = vertical
						ignoreinvisible = yes

						button_text = {
							background = { using = Background_Area_Solid margin = { 5 3 } }
							datacontext = "[GetPlayer]"
							blockoverride "text" {
								text = "RAISE_ALL"
							}
							blockoverride "disabled" {
								visible = "[Not(PlayerCanRaiseAnyRallyPoint)]"
							}
							blockoverride "dot" { }
							visible = "[And( Character.IsAtWar, Not(Character.HasRaisedRegiments))]"
							visible_at_creation = no

							enabled = "[PlayerCanRaiseAnyRallyPoint]"
							onclick = "[PlayerRaiseAllRegiments]"
							# onclick = "[OpenGameView('outliner')]"
							clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"

							onclick = "[PdxGuiTriggerAllAnimations('button_army')]"

							tooltip = "[GetPlayerRaiseAllTooltip]"
							shortcut = confirm
						}

						button_text = {
							background = { using = Background_Area_Solid margin = { 5 3 } }
							datacontext = "[GetPlayer]"
							blockoverride "text" {
								raw_text = "Click here with Control slash to not split armies"
							}
							blockoverride "dot" { }
							visible = "[And( Character.IsAtWar, Not(Character.HasRaisedRegiments)))]"
							visible_at_creation = no
							# onclick = "[OpenGameView('outliner')]"

							enabled = "[PlayerCanRaiseAnyRallyPoint]"
							onclick = "[PlayerRaiseAllRegiments]"
							clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"

							onclick = "[PdxGuiTriggerAllAnimations('button_army')]"

							tooltip = "[GetPlayerRaiseAllTooltip]"
						}
					}

					button_text = {
						background = { using = Background_Area_Solid margin = { 5 3 } }
						visible = "[And(PlayerShouldDisbandAll, PlayerCanDisbandAll)]"
						visible_at_creation = no

						onclick = "[PlayerDisbandAll]"
						enabled = "[PlayerCanDisbandAll]"
						clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_unit_army_disband"
						datacontext = "[GetPlayer]"
						onclick = "[CloseGameView('outliner')]"

						blockoverride "text" {
							text = "DISBAND_ALL"
						}
						blockoverride "extra" {
							text_single = {
								margin_left = -3
								raw_text = ", j."
							}
						}
						shortcut = army_disband

						tooltip = "[GetDisbandAllTooltip]"
					}

					flowcontainer = {
						name = "wars"
						ignoreinvisible = yes
						allow_outside = yes
						direction = vertical

						flowcontainer = {
							name = "great_holy_wars"
							ignoreinvisible = yes

							flowcontainer = {
								datamodel = "[GetPlayer.GetFaith.GetDefensiveGreatHolyWars]"
								ignoreinvisible = yes

								item = {
									button_text = {
											blockoverride "text" {
													raw_text = "Holy War."
											}
										blockoverride "extra" {
											text_single = {
												raw_text = " [GreatHolyWar.GetTimeUntilLaunch]."
												visible = "[Not(GreatHolyWar.HasWarStarted)]"
												align = left
											}
										}
										onclick = "[OpenGameViewData( 'great_holy_war', GreatHolyWar.GetID )]"

									}
								}
							}

							button_text = {
								blockoverride "text" {
									raw_text = "Holy War."
								}
								blockoverride "extra" {
									text_single = {
										raw_text = " [GreatHolyWar.GetTimeUntilLaunch]."
										visible = "[Not(GreatHolyWar.HasWarStarted)]"
										align = left
									}
									# text_single = {
									# 	raw_text = " Your rank"
									# 	visible = "[GreatHolyWar.HasWarStarted]"
									# }
								}
								onclick = "[OpenGameViewData( 'great_holy_war', GreatHolyWar.GetID )]"

								name = "player_faith_ghw"
								datacontext = "[GetPlayer.GetFaith.GetGreatHolyWar]"
								visible = "[GetPlayer.GetFaith.HasOffensiveGreatHolyWar]"
							}
						}

						flowcontainer = {
							name = "raids_on_me"
							datamodel = "[GetPlayer.GetHostileRaiders]"
							allow_outside = yes
							direction = vertical

							item = {
								button_text = {
									onclick = "[DefaultOnCharacterClick(Character.GetID)]"
										blockoverride "text" {
										max_width = 580
												raw_text = " Raided by [Character.GetPrimaryTitle.GetNameNoTierNoTooltip], [GetPlayer.GetRaidHostilityEnd( Character.Self ).GetTimeDiffFromNow] until hostilities end."
										}
								}
							}
						}

						flowcontainer = {
							name = "raids_by_me"
							datamodel = "[GetPlayer.GetRaidTargets]"
							direction = vertical

							item = {
								button_text = {
									onclick = "[DefaultOnCharacterClick(Character.GetID)]"
										blockoverride "text" {
										max_width = 580
												raw_text = " Raiding [Character.GetPrimaryTitle.GetNameNoTierNoTooltip], [GetPlayer.GetRaidHostilityEnd( Character.Self ).GetTimeDiffFromNow] until hostilities end."
										}
								}
							}
						}

						flowcontainer = {
							name = "regular_wars"
							datamodel = "[InGameBottomBar.GetWarItems]"
							ignoreinvisible = yes
							direction = vertical

							item = {
								button_text = {
									widget = {
										visible = "[WarItem.CanEnforceVictory]"

										state = {
											name = _show

											start_sound = {
												soundeffect = "event:/SFX/UI/War/sfx_ui_war_enforce_demand"
												soundparam = {
													name = StateChange
													value = 1.5
												}
											}
										}
									}
									blockoverride "pre" {
										text_single = {
											raw_text = "Hidden"
											margin_right = 4
											visible = "[GetScriptedGui('hide_units_in_war').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', WarItem.GetWar.MakeScope).End )]"
										}
										text_single = {
											margin_right = 4
											raw_text = "Liege"
											visible = "[Not(WarItem.IsPlayerParticipant)]"
										}
										text_single = {
											margin_right = 4
											visible = "[GetScriptedGui('is_civil_war').IsShown( GuiScope.SetRoot( WarItem.GetWar.MakeScope ).End )]"
											raw_text = "Civil"
										}
									}
										blockoverride "text" {
												raw_text = "War against [WarItem.GetWar.GetPrimaryPlayerEnemy.GetPrimaryTitle.GetNameNoTierNoTooltip]"
										max_width = 560
										}
									blockoverride "extra" {
										text_single = {
											visible = "[Not(EqualTo_CFixedPoint(WarItem.GetWarScoreFraction, '(CFixedPoint)0'))]"
											raw_text = ", [WarItem.GetWarScoreFraction|0%+]."
										}
										text_single = {
											visible = "[EqualTo_CFixedPoint(WarItem.GetWarScoreFraction, '(CFixedPoint)0')]"
											raw_text = ", zero percent."
										}
										text_single = {
											visible = "[WarItem.CanEnforceVictory]"
											raw_text = " You can enforce demands!"
										}
										text_single = {
											visible = "[IsIndexFirst]"
											raw_text = "Shift W."
										}
									}
									onclick = "[WarItem.OnClick]"
									onrightclick = "[GetScriptedGui('hide_units_in_war').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', WarItem.GetWar.MakeScope).End )]"

									button = {
										visible = "[IsIndexFirst]"
										onclick = "[WarItem.OnClick]"
										shortcut = map_mode_10

									}
								}
							}
						}

						text_single = {
							margin_left = 5
							visible = "[GreaterThan_int32(GetDataModelSize(InGameBottomBar.GetWarItems), '(int32)1')]"
							raw_text = "You can right click a war to hide it from lists."
						}

						text_single = {
							margin_left = 5
							visible = "[And(Character.HasRaisedRegiments, Not(IsGameViewOpen('holding_view')))]"
							raw_text = "Press U to select your first unit."
						}
					}

					flowcontainer = {
						datamodel = "[InGameBottomBar.GetSchemes]"
						direction = vertical

						item = {
							button_text = {
									blockoverride "text" {
										raw_text = "[BottomBarSchemeItem.GetScheme.GetSchemeType.GetTypeNameNoTooltip] [BottomBarSchemeItem.GetScheme.GetTarget.GetFirstNameNoTooltip] [Scheme.GetProgressBar|%0],"
									}
								blockoverride "extra" {
									text_single = {
										raw_text = "[BottomBarSchemeItem.GetScheme.GetTarget.GetOpinionOf(GetPlayer)|=] opinion,"
										tooltip = "[BottomBarSchemeItem.GetScheme.GetTarget.GetOpinionBreakdownText(GetPlayer)]"
										visible = "[Not(BottomBarSchemeItem.GetScheme.GetSchemeType.IsHostile)]"
									}
									text_single = {
										raw_text = "Chance [Scheme.GetSuccessChance]%,"
									}
									text_single = {
										raw_text = "[Scheme.GetEstimatedTimeRemaining]."
									}
								}
								onclick = "[BottomBarSchemeItem.OnClick]"
								datacontext = "[BottomBarSchemeItem.GetScheme]"
								# tooltip = "BOTTOMBAR_SCHEME_TOOLTIP"
							}
						}
					}

					flowcontainer = {
						name = "involved_struggles"
						datamodel = "[GetPlayer.GetInvolvedStruggles]"
						ignoreinvisible = yes

						item = {
							button_text = {
								shortcut = map_mode_8
								blockoverride "text" {
										raw_text = "Struggle, Control E"
								}
								onclick = "[ToggleGameViewData('struggle', Struggle.GetID)]"
								clicksound = "event:/DLC/FP2/SFX/UI/fp2_struggle_view_open"
								blockoverride "extra" {
									text_single = {
										raw_text = ", [Struggle.GetCurrentPhase.GetNameNoTooltip]."
										visible = "[Not(Struggle.IsInTransitionPhase)]"
									}
									text_single = {
										raw_text = ", In transition, [Struggle.GetTransitionCompeleteDate.GetTimeDiffFromNow]."
										visible = "[Struggle.IsInTransitionPhase]"

									}
									#TODO!
									text_single = {
										raw_text = " Moving to [Struggle.GetCurrentLeadingPhase.GetNameNoTooltip], [Struggle.GetPhaseValue(Struggle.GetCurrentLeadingPhase)] out of [Struggle.GetPhaseDurationValue]."
									}
								}
								datacontext = "[GetPlayer]"
								# tooltipwidget = struggle_tooltip
							}
						}
					}

					flowcontainer = {
						name = "interloper_struggles"
						datamodel = "[GetPlayer.GetInterloperStruggles]"
						ignoreinvisible = yes

						item = {
							button_text = {
								shortcut = map_mode_8
								blockoverride "text" {
									raw_text = "Struggle, Control E"
								}
								onclick = "[ToggleGameViewData('struggle', Struggle.GetID)]"
								clicksound = "event:/DLC/FP2/SFX/UI/fp2_struggle_view_open"
								blockoverride "extra" {
									text_single = {
										raw_text = ", [Struggle.GetCurrentPhase.GetNameNoTooltip]."
										visible = "[Not(Struggle.IsInTransitionPhase)]"
									}
									text_single = {
										raw_text = ", In transition, [Struggle.GetTransitionCompeleteDate.GetTimeDiffFromNow]."
										visible = "[Struggle.IsInTransitionPhase]"
									}
									text_single = {
										raw_text = " Moving to [Struggle.GetCurrentLeadingPhase.GetNameNoTooltip], [Struggle.GetPhaseProgressValue(Struggle.GetCurrentLeadingPhase)] out of [GetDefine('NStruggle', 'PHASE_TRANSITION_THRESHOLD')]."
										align = left
									}
								}
								datacontext = "[GetPlayer]"
								tooltipwidget = struggle_tooltip
							}
						}
					}

					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical
						visible = "[HasViewHistory]"
						# visible = no

						button_text = {
							shortcut = "go_back"
							onclick = "[OpenFromViewHistory]"
							onclick = "[Clear('extra_window')]"
							blockoverride "text" {
								raw_text = "[GetViewHistoryTooltip]"
							}
						}
					}


					flowcontainer = {
						name = "observer_status"
						visible = "[IsObserver]"
						visible_at_creation = no
						ignoreinvisible = yes

						background = { using = Background_Area_Border_Solid margin = { 0 2 } }
						margin_left = 5

						text_single = {
							name = "global_observer_indication"
							visible = "[Not(GetPlayer.IsValid)]"
							text = "GLOBAL_OBSERVER"
						}

						text_single = {
							name = "player_observer_indication"
							visible = "[GetPlayer.IsValid]"
							raw_text = "Observing as [GetPlayer.GetShortUINameNotMeNoTooltip]."
						}

						button_cancel = {
							visible = "[And(GetVariableSystem.Exists('ocr'), GetPlayer.IsValid)]"
							name = "cancel_button"
							# visible = "[GetPlayer.IsValid]"

							size = { 30 30 }
							onclick = "[ClearObserver]"
							tooltip = "OBSERVER_MODE_ON"
						}

						icon_observer = {
							size = { 30 30 }
							visible = "[Not(GetPlayer.IsValid)]"
						}
					}

					# to avoid overlap of the back button with suggestions
					container = {
						visible = "[Not(IsObserver)]"
						widget = {
							visible = "[Not(GetScriptedGui('show_suggestions').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )), Not(IsObserver)]"
							size = { 0 23 }
						}
					}
				}

				flowcontainer = {
					ignoreinvisible = yes
					background = { using = Background_Area_Border_Solid }
					visible = "[And(Not(IsLeftWindowOpen), Not(GetVariableSystem.Exists('ocr')))]"
					margin = { 5 0 }
					direction = vertical

					flowcontainer = {
						visible = "[Or( And(GetTutorial.ShouldBeVisible, Show('toggle_hud_hotkeys')), And(Not(GetTutorial.ShouldBeVisible), Not(Show('toggle_hud_hotkeys'))) )]"
						# visible = "[Isnt('hide_shortcuts')]"
						# visible = "[Show('toggle_hud_hotkeys')]"
							ignoreinvisible = yes
						direction = vertical

						text_single = {
							layoutpolicy_horizontal = expanding
							margin_left = 3
							raw_text = "Shortcuts:"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Your character, F one."
							}
							onclick = "[PauseMenu.Resume]"
							onclick = "[ToggleGameViewData( 'character', GetPlayer.GetID )]"
							shortcut = "character_window"
							onclick = "[Clear('extra_window')]"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "[Localize('MY_REALM_BUTTON')], F2."
							}
							onclick = "[PauseMenu.Resume]"
							onclick = "[ToggleGameView('my_realm')]"
							shortcut = "my_realm_window"
							onclick = "[Clear('extra_window')]"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "[Localize('MILITARY_BUTTON')], F3."
							}
							onclick = "[PauseMenu.Resume]"
							onclick = "[ToggleGameViewData('military', GetPlayer.GetID)]"
							shortcut = "military_window"
							onclick = "[Clear('extra_window')]"
						}
						button_text = {
							blockoverride "text" {
								raw_text = "[Localize('COUNCIL_BUTTON')], F4."
							}
							onclick = "[ToggleGameViewData('council_window', GetPlayer.GetID)]"
							shortcut = "council_window"
							onclick = "[Clear('extra_window')]"
						}
						button_text = {
							blockoverride "text" {
								raw_text = "[Localize('COURT_BUTTON')], F five."
							}
							onclick = "[ToggleGameViewData( 'court_window', GetPlayer.GetID )]"
							shortcut = "court_window"
							onclick = "[Clear('extra_window')]"
						}
						button_text = {
							blockoverride "text" {
								raw_text = "[Localize('INTRIGUE_BUTTON')], F6."
							}
							onclick = "[ToggleGameViewData('intrigue_window', GetPlayer.GetID)]"
							shortcut = "intrigue_window"
							onclick = "[Clear('extra_window')]"
						}
						button_text = {
							blockoverride "text" {
								raw_text = "[Localize('FACTION_BUTTON')], F7."
							}
							onclick = "[ToggleGameView('factions_window')]"
							shortcut = "factions_window"
							onclick = "[Clear('extra_window')]"
						}
						button_text = {
							blockoverride "text" {
								raw_text = "[Localize('DECISIONS_BUTTON')], F8."
							}
							onclick = "[ToggleGameView('decisions')]"
							shortcut = "decision_window"
							onclick = "[Clear('extra_window')]"
						}
						button_text = {
							blockoverride "text" {
								raw_text = "[Localize('ACTIVITY_LIST_BUTTON')], F9."
							}
							onclick = "[ToggleGameView('activity_list_window')]"
							shortcut = "activity_list_window"
							onclick = "[Clear('extra_window')]"
						}

						button_text = {
							blockoverride "text" {
								raw_text = "Encyclopedia, F ten."
							}
							onclick = "[ToggleEncyclopedia]"
							shortcut = "encyclopedia"
						}

						flowcontainer = {
							ignoreinvisible = yes
							direction = vertical
							visible = "[GetPlayer.GetGovernment.IsType( 'clan_government' )]"
							datacontext = "[GetPlayer]"

							button_text = {
								shortcut = map_mode_11
								visible = "[Character.HasTaxSlots]"
								blockoverride "extra" {
									text_single = {
										raw_text = "[Localize('TAX_JURISDICTIONS_BUTTON')], Shift E."
									}
								}
								onclick = "[ToggleGameViewData('manage_tax_slots', GetPlayer.GetID)]"
								# shortcut = "activity_list_window"
								onclick = "[Clear('extra_window')]"
							}

							flowcontainer = {
								ignoreinvisible = yes
								direction = vertical

								visible = "[GreaterThan_int32( Character.GetUnassignedVassalsCount, '(int32)0' )]"

								button_text = {
									blockoverride "extra" {
										text_single = {
											raw_text = "TAX_SLOT_OVERVIEW_WINDOW_UNASSIGNED_VASSALS_WARNING"
										}
									}
									onclick = "[ToggleGameViewData('manage_tax_slots', GetPlayer.GetID)]"
									onclick = "[Clear('extra_window')]"
								}
								button_text = {
									visible = "[GreaterThan_int32( Character.GetTaxSlotsWithoutTaxCollectorCount, '(int32)0' )]"
									blockoverride "extra" {
										text_single = {
											raw_text = "TAX_SLOT_OVERVIEW_WINDOW_TAX_SLOTS_WARNING"
										}
									}
									onclick = "[ToggleGameViewData('manage_tax_slots', GetPlayer.GetID)]"
									onclick = "[Clear('extra_window')]"
								}
								button_text = {
									visible = "[Not(Character.HasTaxSlots)]"
									blockoverride "extra" {
										text_single = {
											raw_text = "NO_TAX_SLOT_AVAILABLE"
										}
									}
									onclick = "[ToggleGameViewData('manage_tax_slots', GetPlayer.GetID)]"
									onclick = "[Clear('extra_window')]"
								}

							}
						}


						button_text = {
							datacontext = "[GetPlayer]"
							visible = "[Character.HasRoyalCourt]"
							onclick = "[Character.OpenRoyalCourtView( 'characters' )]"
								blockoverride "text" {
										raw_text = "Royal court, Control Q."
								}
						}

						button_text = {
							datacontext = "[GetPlayer]"
							visible = "[Character.HasRoyalCourt]"
							onclick = "[Character.OpenRoyalCourtView( 'characters' )]"
							datacontext = "[AccessLocalPlayerCachedData]"
							datacontext = "[LocalPlayerCachedData.AccessNewArtifacts]"
							datacontext = "[LocalPlayerCachedData.AccessCourtEvents]"
							datacontext = "[Character.GetCourtGrandeurData]"

							blockoverride "extra" {
								text_single = {
									visible = "[GreaterThan_int32( GetPlayer.GetNumPendingCourtEvents, '(int32)0')]"
									raw_text = "[GetPlayer.GetNumPendingCourtEvents] events."
								}

								text_single = {
									visible = "[GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' ), '(int32)0')]"
									raw_text = "[LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' )] new artifacts."
								}

								text_single = {
									tooltip = "ROYAL_COURT_STATUS_CGV_EXPECTATIONS"
									raw_text = "Low grandeur."
									visible = "[LessThan_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetMinimumExpectedLevel )]"
								}
							}
						}

						button_text = {
							onclick = "[GetVariableSystem.Toggle('resources')]"
							shortcut = map_mode_3
							visible = "[Isnt('mp_lobby_tabs')]"
							blockoverride "text" {
								raw_text = "Resources, R."
							}
						}

						button_text = {
							onclick = "[ToggleGameViewData( 'inventory', GetPlayer.GetID )]"
							shortcut = mapmode_kingdoms_secondary
							visible = "[Isnt('mp_lobby_tabs')]"
							blockoverride "text" {
								raw_text = "Inventory, i. [Val('num_artifacts')] artifacts."
							}
						}

						button_text = {
							onclick = "[ToggleGameView( 'character_finder' )]"
							blockoverride "text" {
								raw_text = "Character search, C."
							}
							shortcut = "character_finder"
							onclick = "[Clear('extra_window')]"
						}

						button_text = {
							onclick = "[ToggleGameView( 'find_title' )]"
							shortcut = find_title_shortcut
							onclick = "[Clear('extra_window')]"
							blockoverride "text" {
								raw_text = "Title search, V."
							}
						}
					}


					button_text = {
						blockoverride "text" {
							raw_text = "[Select_CString( Or( And(GetTutorial.ShouldBeVisible, Show('toggle_hud_hotkeys')), And(Not(GetTutorial.ShouldBeVisible), Not(Show('toggle_hud_hotkeys'))) ), 'Hide', 'Show')] shortcuts, Page Down."
						}
						shortcut = zoom_in
						onclick = "[Click('toggle_hud_hotkeys')]"
						# onclick = "[Sgui('toggle_hud_hotkeys', Execute, GetPlayer)]"
						# onclick = "[Toggle('hide_shortcuts')]"
					}

					widget = {
						size = { 0 5 }
					}
				}
			}
		}
	}
}

######################################################
############# MESSAGES AND NOTIFICATIONS #############
######################################################

#TODO make a sighted version

### Toasts
notifications_toasts = {
	layer = top
}

### Message Feed
notifications_message_feed_combined = {
	layer = top
}

### Suggestions / Current Situation
notifications_suggestions = {
	layer = windows_layer

	attachto = {
		widgetid = "suggestions_placer"
		inherit_visibility = hidden
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################


template close_character {
	onclick = "[CloseGameView('character')]"
}


types HUD
{
	type Animation_HUD_daily_tick = widget {
		using = Animation_ShowHide_Quick

		icon = {
			size = { 100% 100% }
			texture = "gfx/interface/colors/white.dds"
			shaderfile = "gfx/FX/pdxgui_repeat_texture.shader"
			color = { 0.63 0.59 0.68 1 }

			block "alpha"
			{
				alpha = 0.5
			}

			modify_texture = {
				name = "pattern"
				texture = "gfx/interface/component_masks/mask_clouds.dds"
				spriteType = corneredtiled
				blend_mode = alphamultiply
			}

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
				blend_mode = alphamultiply
			}

			state = {
				name = a
				next = b
				duration = 0
				trigger_on_create = yes

				modify_texture = {
					name = "pattern"
					translate_uv = { 0 0 }
				}
			}

			state = {
				name = b
				next = a
				block "duration"
				{
					duration = 2
				}

				modify_texture = {
					name = "pattern"
					translate_uv = { -1 0 }
				}
			}
		}
	}

	type progressbar_hud_stress_glow = icon {
		size = { 100% 100% }

		block "lvl_3"
		{
			alpha = 0
		}

		shaderfile = "gfx/FX/pdxgui_repeat_texture.shader"

		modify_texture = {
			name = "clouds"
			texture = "gfx/interface/component_masks/mask_clouds.dds"
			blend_mode = alphamultiply
			spriteType = corneredtiled
			texture_density = 3
		}

		state = {
			name = mask_a
			next = mask_b
			trigger_on_create = yes

			modify_texture = {
				name = "clouds"
				translate_uv = { 0 -1 }
			}
		}

		state = {
			name = mask_b
			next = mask_a
			duration = 8

			modify_texture = {
				name = "clouds"
				translate_uv = { 0 1 }
			}
		}

		state = {
			block "animation_trigger_1"
			{
				name = "stress_level_increase"
			}
			next = "fade_out"

			duration = 0.2
			delay = 0.3
			bezier = { 0.5 0 1 0.5 }
			alpha = 1
		}

		block "lvl_3" {
			state = {
				block "animation_trigger_2"
				{
					name = "stress_increase"
				}
				next = "fade_out"

				duration = 0.2
				delay = 0.3
				bezier = { 0.5 0 1 0.5 }
				alpha = 1
			}

			state = {
				name = "fade_out"

				duration = 1.5
				bezier = { 0 0.5 0.5 1 }
				alpha = 0
			}
		}
	}

	type progressbar_hud_stress = icon {
		shaderfile = "gfx/FX/pdxgui_repeat_texture.shader"
		alpha = 0.8

		block "bar_color"
		{
			# texture = "gfx/interface/colors/red.dds"
		}

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_rough_edges.dds"
			spriteType = Corneredtiled
			spriteborder = { 20 20 }
			blend_mode = alphamultiply
			texture_density = 5
		}

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
			blend_mode = alphamultiply
			alpha = 0.3
		}

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_scratches.dds"
			blend_mode = alphamultiply
			spriteType = corneredtiled
			alpha = 0.3
			texture_density = 3
		}

		modify_texture = {
			name = "flash"
			texture = "gfx/interface/colors/white.dds"
			blend_mode = colordodge
			alpha = 0
		}

		modify_texture = {
			visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetStressLevel, '(int32)2')]"
			name = "lvl3_glow"
			texture = "gfx/interface/colors/gold.dds"
			blend_mode = colordodge
			alpha = 0
		}

		modify_texture = {
			name = "clouds"
			texture = "gfx/interface/component_masks/mask_clouds_solid.dds"
			blend_mode = mask
			spriteType = corneredtiled
			texture_density = 1
		}

		modify_texture = {
			block "bar_color_flow"
			{
				# texture = "gfx/interface/colors/yellow.dds"
				alpha = 0.3
			}
			blend_mode = colordodge
		}

		state = {
			name = "lvl3_glow_a"
			next = "lvl3_glow_b"
			duration = 0.6
			trigger_on_create = yes
			using = Animation_Curve_Default

			modify_texture = {
				name = "lvl3_glow"
				alpha = 0.5
			}
		}

		state = {
			name = "lvl3_glow_b"
			next = "lvl3_glow_a"
			duration = 1.5
			using = Animation_Curve_Default

			modify_texture = {
				name = "lvl3_glow"
				alpha = 0
			}
		}

		state = {
			name = "stress_level_increase"
			next = "fade_out"

			duration = 0.1
			bezier = { 0.5 0 1 0.5 }

			modify_texture = {
				name = "flash"
				alpha = 0.6
			}
		}

		state = {
			name = "stress_increase"
			next = "fade_out"

			duration = 0.1
			bezier = { 0.5 0 1 0.5 }

			modify_texture = {
				name = "flash"
				alpha = 0.6
			}
		}

		state = {
			name = "fade_out"

			duration = 0.8
			bezier = { 0 0.5 0.5 1 }


			modify_texture = {
				name = "flash"
				alpha = 0
			}
		}

		state = {
			name = a
			next = b
			trigger_on_create = yes

			modify_texture = {
				name = "clouds"
				translate_uv = { 1 0 }
			}
		}

		state = {
			name = b
			next = a
			duration = 15

			modify_texture = {
				name = "clouds"
				translate_uv = { -1 0 }
			}
		}
	}

	type button_raise_disband_armies = button_standard {
		size = { 200 64 }
		datacontext = "[GetPlayer]"
		parentanchor = vcenter

		background = {
			using = Background_Area_Dark_Border
		}

		background = {
			using = Background_Area_Dark
		}

		margin_left = 45


		block "text" {
			text = "RAISE_ALL"
		}

		using = tooltip_ne

		icon = {
			texture = "gfx/interface/icons/icon_banner.dds"
			size = { 40 40 }
			alwaystransparent = yes
			parentanchor = left|vcenter
			position = { 10 0 }
		}

		state = {
			name = _show
			using = Animation_FadeIn_Quick
			position_y = 0
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
			position_y = 20
		}
	}

	type button_hud_travel = button_standard {
		size = { 170 36 }
		datacontext = "[GetPlayer]"
		parentanchor = vcenter

		background = {
			using = Background_Area_Dark_Border
		}

		margin_left = 34

		using = tooltip_ne

		icon = {
			texture = "gfx/interface/icons/travel/icon_travel_hud_placeholder.dds"
			size = { 30 30 }
			alwaystransparent = yes
			parentanchor = left|vcenter
			position = { 8 0 }
		}

		state = {
			name = _show
			using = Animation_FadeIn_Quick
			position_y = 0
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
			position_y = 20
		}
	}

	type button_war_banner = button_normal {
		visible = "[Not(IsGameViewOpen('barbershop'))]"
		size = { 78 82 }
		onclick = "[WarItem.OnClick]"
		tooltip = "[WarItem.GetTooltip]"
		using = tooltip_ne

		animation_sonar = {
			visible = "[WarItem.CanEnforceVictory]"
			texture = "gfx/interface/component_masks/mask_glow.dds"
			using = Color_Orange
		}

		##Show animation
		state = {
			name = _show
			next = banner_default
			using = Animation_FadeIn_Quick
			bezier = { 1 0 0.5 0.5 }
			size = { 86 88 }
			alpha = 1
			trigger_on_create = yes
		}

		state = {
			name = banner_default
			using = Animation_FadeIn_Standard
			size = { 78 82 }
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Standard
			bezier = { 1 0 0.5 0.5 }
			size = { 66 70 }
			alpha = 0
		}

		icon = {
			name = "enforce_victory_glow"
			visible = "[WarItem.CanEnforceVictory]"
			parentanchor = center
			size = { 100% 100% }
			scale = 1.2
			texture = "gfx/interface/icons/war_status/war_won_glow.dds"

			state = {
				trigger_on_create = yes
				name = a
				next = b

				using = Animation_Curve_Default
				duration = 1
				alpha = 1
			}

			state = {
				name = b
				next = a

				using = Animation_Curve_Default
				duration = 1.6
				alpha = 0.2
			}
		}

		button = {
			name = "enforce_victory_icon"
			visible = "[WarItem.CanEnforceVictory]"
			parentanchor = hcenter
			position = { 0 -27 }
			texture = "gfx/interface/icons/war_status/war_won_icon.dds"

			modify_texture = {
				name = "shimmer_war_banner"
				texture = "gfx/interface/component_effects/effect_shimmer.dds"
				blend_mode = colordodge
				translate_uv = { 1 1 }
				alpha = 0.8
			}

			state = {
				name = shimmer
				next = pause
				trigger_when = "[WarItem.CanEnforceVictory]"
				delay = 0.5
				bezier = { 0 0.9 1 0.4 }

				modify_texture = {
					name = "shimmer_war_banner"
					translate_uv = { 1 0.8 }
					alpha = 0.5
				}
			}

			state = {
				name = pause
				duration = 0.8

				modify_texture = {
					name = "shimmer_war_banner"
					translate_uv = { -1 -1 }
					alpha = 0.5
				}
			}
		}

		highlight_icon = {
			name = "war_icon"
			visible = "[WarItem.IsPlayerParticipant]"
			parentanchor = center
			size = { 100% 100% }
			texture = "gfx/interface/icons/war_status/war_icon.dds"

			modify_texture = {
				name = "shimmer_war_banner"
				texture = "gfx/interface/component_effects/effect_shimmer.dds"
				blend_mode = colordodge
				translate_uv = { 1 1 }
			}

			state = {
				name = shimmer
				next = pause
				trigger_when = "[WarItem.CanEnforceVictory]"
				delay = 0.5
				bezier = { 0 0.9 1 0.4 }

				modify_texture = {
					name = "shimmer_war_banner"
					translate_uv = { 1 0.5 }
					alpha = 0.5
				}
			}

			state = {
				name = pause
				duration = 0.8

				modify_texture = {
					name = "shimmer_war_banner"
					translate_uv = { -1 -1 }
					alpha = 0.5
				}
			}
		}

		highlight_icon = {
			name = "war_icon_liege"
			visible = "[Not(WarItem.IsPlayerParticipant)]"
			parentanchor = center
			size = { 100% 100% }
			texture = "gfx/interface/icons/war_status/war_icon_liege.dds"
		}

		coa_realm_small = {
			name = "enemy_realm"
			datacontext = "[WarItem.GetWar.GetPrimaryPlayerEnemy]"
			parentanchor = hcenter
			scale = 0.9
			position = { 0 12 }
			tooltip_enabled = no
			alwaystransparent = yes
		}

		text_single = {
			name = "warscore"
			parentanchor = bottom|hcenter
			position = { 0 -7 }
			size = { 50 10 }
			align = center
			text = "[WarItem.GetWarScoreFraction|0%=+]"
		}

		widget = {
			visible = "[WarItem.CanEnforceVictory]"

			state = {
				name = _show

				start_sound = {
					soundeffect = "event:/SFX/UI/War/sfx_ui_war_enforce_demand"
					soundparam = {
						name = StateChange
						value = 1.5
					}
				}
			}
		}
	}

	type button_struggle_banner = button_normal {
		name = "struggle_banner_tutorial_uses_this"

		size = { 110 110 }

		onclick = "[ToggleGameViewData('struggle', Struggle.GetID)]"

		onmousehierarchyenter = "[HighlightStruggle( Struggle.Self )]"
		onmousehierarchyleave = "[ClearHighlightedStruggleBorder]"

		state = {
			name = _show
			next = banner_default
			using = Animation_FadeIn_Quick
			bezier = { 1 0 0.5 0.5 }
			size = { 80 80 }
			alpha = 1
			trigger_on_create = yes
		}

		state = {
			name = banner_default
			using = Animation_FadeIn_Standard
			size = { 110 110 }
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Standard
			bezier = { 1 0 0.5 0.5 }
			size = { 80 80 }
			alpha = 0
		}

		# Animations
		struggle_phase_based_widget = {
			datacontext = "[Struggle.GetCurrentPhase]"
			visible = "[Struggle.HasPossibleEndingDecision]"
			parentanchor = center

			animation_sonar = {
				texture = "gfx/interface/component_masks/mask_glow.dds"
				using = Color_Orange
			}

			blockoverride "point_based_widget_content" {
				icon = {
					size = { 100% 100% }
					position = { 0 -12 }
					texture = "gfx/interface/icons/struggle_banners/upper_point_glow.dds"

					state = {
						trigger_on_create = yes
						name = a
						next = b

						using = Animation_Curve_Default
						duration = 1
						alpha = 1
					}

					state = {
						name = b
						next = a

						using = Animation_Curve_Default
						duration = 1.6
						alpha = 0.2
					}
				}
			}

			blockoverride "time_based_widget_content" {
				icon = {
					position = { 0 -12 }
					size = { 100% 100% }
					texture = "gfx/interface/icons/struggle_banners/upper_time_glow.dds"

					state = {
						trigger_on_create = yes
						name = a
						next = b

						using = Animation_Curve_Default
						duration = 1
						alpha = 1
					}

					state = {
						name = b
						next = a

						using = Animation_Curve_Default
						duration = 1.6
						alpha = 0.2
					}
				}
			}
		}

		# Leading phase
		struggle_phase_based_widget = {
			datacontext = "[Struggle.GetCurrentLeadingPhase]"

			blockoverride "point_based_widget_content" {
				icon = {
					size = { 100% 100% }
					texture = "gfx/interface/icons/struggle_banners/lower_point_banner.dds"
				}
			}

			blockoverride "time_based_widget_content" {
				icon = {
					size = { 100% 100% }
					texture = "gfx/interface/icons/struggle_banners/lower_time_banner.dds"
				}
			}

			blockoverride "ending_widget_content" {
				icon = {
					size = { 100% 100% }
					texture = "gfx/interface/icons/struggle_banners/lower_ending_banner.dds"
				}

				icon = {
					size = { 100% 100% }
					texture = "gfx/interface/component_effects/ending_banner_fire_01.dds"
					alpha = 0.25

					state = {
						trigger_on_create = yes
						name = a
						next = b

						using = Animation_Curve_Default
						duration = 1
						alpha = 0.25
					}

					state = {
						name = b
						next = a

						using = Animation_Curve_Default
						duration = 1
						alpha = 0
					}
				}

				icon = {
					size = { 100% 100% }
					texture = "gfx/interface/component_effects/ending_banner_fire_02.dds"
					alpha = 0

					state = {
						trigger_on_create = yes
						name = a
						next = b

						using = Animation_Curve_Default
						duration = 1
						alpha = 0
					}

					state = {
						name = b
						next = a

						using = Animation_Curve_Default
						duration = 1
						alpha = 0.25
					}
				}

				icon = {
					name = "ending_phase_glow"
					visible = "[Struggle.HasPossibleEndingDecision]"
					parentanchor = center
					size = { 100% 100% }
					texture = "gfx/interface/icons/struggle_banners/lower_ending_glow.dds"

					state = {
						trigger_on_create = yes
						name = a
						next = b

						using = Animation_Curve_Default
						duration = 1
						alpha = 0.5
					}

					state = {
						name = b
						next = a

						using = Animation_Curve_Default
						duration = 1.6
						alpha = 0.2
					}
				}
			}

			widget = {
				visible = "[Struggle.GetCurrentLeadingPhase.IsValid]"
				parentanchor = bottom|left
				size = { 25 25  }
				position = { 20 -14 }
			}
		}

		# Tie
		icon = {
			visible = "[Not(Struggle.GetCurrentLeadingPhase.IsValid)]"
			size = { 100% 100% }
			texture = "gfx/interface/icons/struggle_banners/lower_tied_banner.dds"
		}

		# Current phase
		struggle_phase_based_widget = {
			datacontext = "[Struggle.GetCurrentPhase]"
			blockoverride "point_based_widget_content" {
				struggle_highlight_icon = {
					visible = "[Struggle.IsInvolvedCharacter(Character.Self)]"
					blockoverride "texture" {
						texture = "gfx/interface/icons/struggle_banners/upper_point_involved_banner.dds"
					}
				}

				struggle_highlight_icon = {
					visible = "[Struggle.IsInterloperCharacter(Character.Self)]"
					blockoverride "texture" {
						texture = "gfx/interface/icons/struggle_banners/upper_point_interloper_banner.dds"
					}
				}

				widget = {
					size = { 52 52 }
					position = { 0 15 }
					parentanchor = top|hcenter

					icon = {
						size = { 52 52 }
						parentanchor = center
						texture = "gfx/interface/icons/struggle_banners/icon_background_02.dds"
					}

					icon = {
						parentanchor = center
						size = { 40 40 }
						texture = "[Struggle.GetCurrentPhase.GetIcon]"
					}
				}

				progressbar_standard = {
					size = { 60 12 }
					parentanchor = bottom|hcenter
					position = { 0 -20 }
					value = "[Struggle.GetProgress]"
					progresstexture = "gfx/interface/progressbars/progress_orange.dds"
				}

				widget_struggle_hourglass = { }
			}

			blockoverride "time_based_widget_content" {
				struggle_highlight_icon = {
					visible = "[Struggle.IsInvolvedCharacter(Character.Self)]"
					blockoverride "texture" {
						texture = "gfx/interface/icons/struggle_banners/upper_time_involved_banner.dds"
					}
				}

				struggle_highlight_icon = {
					size = { 100% 100% }
					visible = "[Struggle.IsInterloperCharacter(Character.Self)]"
					blockoverride "texture" {
						texture = "gfx/interface/icons/struggle_banners/upper_time_interloper_banner.dds"
					}
				}

				widget = {
					size = { 52 52 }
					parentanchor = top|hcenter
					position = { 1 18 }

					icon = {
						parentanchor = center
						texture = "gfx/interface/icons/struggle_banners/icon_background_02.dds"
						size = { 60 60 }
					}

					progresspie = {
						name = "progress"
						parentanchor = center
						size = { 52 52 }
						position = { 0 -1}
						texture = "gfx/interface/progressbars/action_progress_thin.dds"
						framesize = { 124 124 }
						frame = 2
						value = "[Struggle.GetProgress]"
					}

					icon = {
						parentanchor = center
						size = { 40 40 }
						texture = "[Struggle.GetCurrentPhase.GetIcon]"
					}
				}

				widget_struggle_hourglass = { }

				text_single = {
					text = "[Struggle.GetPhaseValue(Struggle.GetCurrentLeadingPhase)]"
					default_format = "#high"
					parentanchor = bottom|hcenter
					position = { 0 -14 }
				}
			}
		}

		widget = {
			size = { 80 110 }
			tooltipwidget = struggle_tooltip
			parentanchor = center
		}
	}

	type struggle_highlight_icon = highlight_icon {
		size = { 100% 100% }
		block "texture" {}

		##Pulse glow
		glow = {
			name = "glow_defined"
			glow_radius = 3
			using = Glow_Standard
			using = Color_Orange
			glow_alpha = 0
		}

		state = {
			name = struggle_pulse_glow
			next = struggle_pulse_glow_stop
			using = Animation_FadeIn_Quick
			bezier = { 1 0 0.5 0.5 }
			glow_alpha = 1
		}

		state = {
			name = struggle_pulse_glow_stop
			bezier = { 1 0 0.5 0.5 }
			duration = 0.3
			glow_alpha = 0
		}

		#white fill
		state = {
			name = struggle_pulse_icon
			next = struggle_pulse_icon_stop
			using = Animation_FadeIn_Quick
			bezier = { 1 0 0.5 0.5 }

			modify_texture = {
				name = "white_icon"
				alpha = 1
			}
		}

		state = {
			name = struggle_pulse_icon_stop
			bezier = { 1 0 0.5 0.5 }
			duration = 0.3

			modify_texture = {
				name = "white_icon"
				alpha = 0
			}
		}

		modify_texture = {
			name = "white_icon"
			texture = "gfx/interface/component_masks/mask_rough_edges.dds"
			blend_mode = colordodge
			alpha = 0
		}
	}

	type widget_struggle_hourglass = widget {
		visible = "[Struggle.IsInTransitionPhase]"
		position = { 0 0 }
		size = { 32 32 }

		icon = {
			parentanchor = center
			size = { 32 32 }
			texture = "gfx/interface/icons/struggle_banners/icon_background_dark.dds"

			#white fill
			state = {
				name = struggle_pulse_icon
				next = struggle_pulse_icon_stop
				using = Animation_FadeIn_Quick
				bezier = { 1 0 0.5 0.5 }

				modify_texture = {
					name = "white_icon"
					alpha = 1
				}
			}

			state = {
				name = struggle_pulse_icon_stop
				bezier = { 1 0 0.5 0.5 }
				duration = 0.3

				modify_texture = {
					name = "white_icon"
					alpha = 0
				}
			}

			modify_texture = {
				name = "white_icon"
				texture = "gfx/interface/component_masks/mask_rough_edges.dds"
				blend_mode = colordodge
				alpha = 0
			}
		}

		icon = {
			parentanchor = center
			size = { 30 30 }
			texture = "gfx/interface/icons/icon_time.dds"

			#white fill
			state = {
				name = struggle_pulse_icon
				next = struggle_pulse_icon_stop
				using = Animation_FadeIn_Quick
				bezier = { 1 0 0.5 0.5 }

				modify_texture = {
					name = "white_icon"
					alpha = 1
				}
			}

			state = {
				name = struggle_pulse_icon_stop
				bezier = { 1 0 0.5 0.5 }
				duration = 0.3

				modify_texture = {
					name = "white_icon"
					alpha = 0
				}
			}

			modify_texture = {
				name = "white_icon"
				texture = "gfx/interface/component_masks/mask_rough_edges.dds"
				blend_mode = colordodge
				alpha = 0
			}
		}
	}

	type button_ghw_banner = button_normal {
		size = { 78 82 }
		onclick = "[OpenGameViewData( 'great_holy_war', GreatHolyWar.GetID )]"

		block "ghw_tooltip"
		{
			raw_tooltip = "#D no tooltip :(#!"
		}

		##Show animation
		state = {
			name = _show
			next = banner_default
			using = Animation_FadeIn_Quick
			bezier = { 1 0 0.5 0.5 }
			size = { 86 88 }
			alpha = 1
			trigger_on_create = yes
		}

		state = {
			name = banner_default
			using = Animation_FadeIn_Standard
			size = { 78 82 }
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Standard
			bezier = { 1 0 0.5 0.5 }
			size = { 66 70 }
			alpha = 0
		}

		button = {
			name = "holy_war_icon_started"
			visible = "[GreatHolyWar.HasWarStarted]"
			onclick = "[OpenGameViewData( 'great_holy_war', GreatHolyWar.GetID )]"
			parentanchor = center
			size = { 100% 100% }
			texture = "gfx/interface/icons/war_status/holy_war_icon_started.dds"
		}

		button = {
			name = "holy_war_icon_prep"
			visible = "[Not(GreatHolyWar.HasWarStarted)]"
			onclick = "[OpenGameViewData( 'great_holy_war', GreatHolyWar.GetID )]"
			parentanchor = center
			size = { 100% 100% }
			texture = "gfx/interface/icons/war_status/holy_war_icon_prep.dds"
		}

		button = {
			name = "faith_icon"
			datacontext = "[GreatHolyWar.GetFaith]"
			onclick = "[OpenGameViewData( 'great_holy_war', GreatHolyWar.GetID )]"
			parentanchor = center
			position = { 1 -3 }
			size = { 35 35 }
			texture = "[Faith.GetIcon]"
		}
	}

	type button_raid_banner = button_normal {
		size = { 78 82 }
		onclick = "[DefaultOnCharacterClick(Character.GetID)]"
		using = tooltip_ne

		##Show animation
		state = {
			name = _show
			next = banner_default
			using = Animation_FadeIn_Quick
			bezier = { 1 0 0.5 0.5 }
			size = { 86 88 }
			alpha = 1
			trigger_on_create = yes
		}

		state = {
			name = banner_default
			using = Animation_FadeIn_Standard
			size = { 78 82 }
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Standard
			bezier = { 1 0 0.5 0.5 }
			size = { 66 70 }
			alpha = 0
		}

		highlight_icon = {
			texture = "gfx/interface/icons/war_status/raid_icon.dds"
			size = { 100% 100% }
			parentanchor = center
		}

		coa_realm_small = {
			name = "enemy_realm"
			parentanchor = hcenter
			scale = 0.9
			position = { 0 12 }
			tooltip_enabled = no
			alwaystransparent = yes
		}

		text_single = {
			name = "time_left"
			parentanchor = bottom|hcenter
			position = { 0 -7 }
			size = { 50 10 }
			align = center
			text = "[GetPlayer.GetRaidHostilityEnd( Character.Self ).GetTimeDiffFromNow]"

		}
	}

	type button_hud_character_bar = button_normal {
		effectname = "NoHighlight"

		framesize = { 102 104}
		size = { 51 52 }
		texture = "gfx/interface/skinned/button_hud_character_bar.dds"
		using = tooltip_ne


		state = {
			name = _show
			frame = 1
			position_y = 0

			using = Animation_Curve_Default
			duration = 0.25
		}

		state = {
			name = _mouse_hierarchy_enter
			frame = 2

			using = Animation_Curve_Default
			duration = 0.1
		}

		state = {
			name = _mouse_leave
			frame = 1

			using = Animation_Curve_Default
			duration = 0.25
		}

		state = {
			name = _mouse_press
			frame = 3
			position_y = 3
		}

		state = {
			name = _mouse_release
			frame = 2
			position_y = 0

			using = Animation_Curve_Default
			duration = 0.25
		}
	}

	type widget_hud_main_tab = widget {
		size = { 45 45 }
		using = tooltip_ws
		tooltip_offset = { 35 0 }

		button_normal = {
			parentanchor = center
			size = { 45 45 }

			scale = 1

			block "maintab_button" {}

			modify_texture = {
				name = "glow"
				texture = "gfx/interface/component_effects/effect_shimmer.dds"
				blend_mode = colordodge
				translate_uv = { 1 0 }
				alpha = 0
			}

			state = {
				name = _mouse_enter
				duration = 0.03
				scale = 1.2
				position_x = -3

				using = Animation_Curve_Default

				modify_texture = {
					name = "glow"
					translate_uv = { 0 0 }
					alpha = 0.4
				}
			}

			state = {
				name = _mouse_leave
				duration = 0.1
				scale = 1
				position_x = 0

				using = Animation_Curve_Default

				modify_texture = {
					name = "glow"
					translate_uv = { 1 0 }
					alpha = 0
				}
			}
		}
	}

	# type hotkeys_HUD = widget {
	# 	# Mapmodes
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode('players')]"
	# 	# 	shortcut = "map_mode_8"
	# 	# 	enabled = "[Or(GameHasMultiplePlayers, InDebugMode)]"
	# 	# }
	# 	#
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode('dejure_duchies')]"
	# 	# 	shortcut = "map_mode_9"
	# 	# 	shortcut = "mapmode_duchies_secondary"
	# 	# }
	# 	#
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode('dejure_kingdoms')]"
	# 	# 	shortcut = "map_mode_10"
	# 	# 	shortcut = "mapmode_kingdoms_secondary"
	# 	#
	# 	# }
	# 	#
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode('dejure_empires')]"
	# 	# 	shortcut = "map_mode_11"
	# 	# 	shortcut = "mapmode_empires_secondary"
	# 	# }
	# 	#
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode('religions')]"
	# 	# 	shortcut = "map_mode_3"
	# 	# 	shortcut = "mapmode_faith_secondary"
	# 	# }
	# 	#
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode('cultures')]"
	# 	# 	shortcut = "map_mode_2"
	# 	# 	shortcut = "mapmode_culture_secondary"
	# 	# }
	# 	#
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode('houses')]"
	# 	# 	shortcut = "map_mode_4"
	# 	# 	shortcut = "mapmode_house_secondary"
	# 	# }
	# 	#
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode('realms')]"
	# 	# 	onclick = "[ClearExploringRealms]"
	# 	# 	shortcut = "map_mode_1"
	# 	# }
	# 	#
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode('government')]"
	# 	# 	shortcut = "map_mode_5"
	# 	# }
	# 	#
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode('dejure_counties')]"
	# 	# 	shortcut = "map_mode_6"
	# 	# }
	# 	#
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode('court_languages')]"
	# 	# 	shortcut = "map_mode_7"
	# 	# }
	# 	#
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode('simple_terrain')]"
	# 	# 	shortcut = "map_mode_12"
	# 	# }
	# 	#
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode('county_development')]"
	# 	# 	shortcut = "map_mode_13"
	# 	# }
	# 	#
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode( 'economy_buildings' )]"
	# 	# 	shortcut = "map_mode_14"
	# 	# }
	# 	#
	# 	# button_normal = {
	# 	# 	onclick = "[SetMapMode( 'county_control' )]"
	# 	# 	shortcut = "map_mode_15"
	# 	# }
	#
	# 	button_normal = {
	# 		name = "find_title_shortcut"
	# 		onclick = "[ToggleGameView( 'find_title' )]"
	# 		onclick = "[GetVariableSystem.Clear( 'extra_buttons_expand' )]"
	# 		shortcut = "find_title_shortcut"
	# 	}
	#
	# 	# 0 size button for shortcut to work
	# 	button_normal = {
	# 		name = "find_character_shortcut"
	# 		onclick = "[ToggleGameView( 'character_finder' )]"
	# 		onclick = "[GetVariableSystem.Clear( 'extra_buttons_expand' )]"
	# 		shortcut = "character_finder"
	# 	}
	#
	# 	# 0 size button for shortcut to work
	# 	button_normal = {
	# 		name = "encyclopedia_shortcut"
	# 		onclick = "[ToggleEncyclopedia]"
	# 		onclick = "[GetVariableSystem.Clear( 'extra_buttons_expand' )]"
	# 		shortcut = "encyclopedia"
	# 	}
	# }

	type button_pause_hud = button_round {
		size = { 33 33 }

		enabled = "[Not(IsGameOver)]"
		onclick = "[OnPause]"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"

		button_play = {
			visible = "[IsGamePaused]"
			size = { 35 35 }

			tooltip = "[SelectLocalization( IsGameOver, 'UNPAUSE_GAME_OVER', 'UNPAUSE_GAME')]"
			using = tooltip_ne
			alwaystransparent = yes
			parentanchor = center
		}

		button_pause = {
			visible = "[Not(IsGamePaused)]"
			size = { 35 35 }

			tooltip = "PAUSE_GAME"
			using = tooltip_ne
			alwaystransparent = yes
			parentanchor = center
		}
	}

	type container_resource_balance = container {
		text_single = {
			name = "balance_pos"
			text = "[PlayerValueItem.GetBalance|1=]."
			max_width = 110
		}
	}

	type container_saving_indicator = container {
		visible = yes

		background = {
			name = "bg"
			texture = "gfx/interface/tooltips/tooltip_bg.dds"
			spriteType = Corneredtiled
			gfxtype = icongfx
			spriteborder = { 2 2 }
			shaderfile = "gfx/FX/pdxgui_default.shader"

		}

		background = {
			name = "frame"
			texture = "gfx/interface/tooltips/tooltip_frame.dds"
			gfxtype = icongfx
			spriteType = Corneredtiled
			spriteborder = { 20 20 }
			shaderfile = "gfx/FX/pdxgui_default.shader"


			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_window.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}
		}

		flowcontainer = {
			spacing = 15
			margin = { 20 15 }

			progressbar = {
				size = { 44 44 }
				gfxtype = framedprogressbargfx
				texture = "gfx/interface/frontend/loading_progress.dds"
				framesize = { 88 88 }
				loopinterval = 2.0
				max = 0
			}

			text_single = {
				parentanchor = vcenter
				align = nobaseline
				using = Font_Size_Medium

				block "csi_text"
				{
					text = "AUTOSAVE_IN_PROGRESS"
				}
			}
		}
	}

	type widget_top_right_bar = widget
	{
		size = { 640 38 }
		filter_mouse = all
		alwaystransparent = no
		layer = top

		using = Animation_ShowHide_Quick

		background = {
			visible = "[Not( IsGameViewOpen('barbershop') )]"
			texture = "gfx/interface/skinned/hud_top_right_bg.dds"
			margin_left = 20
			margin_bottom = 28
		}

		icon = {
			parentanchor = bottom|right
			position = { 7 23 }
			texture = "gfx/interface/component_decoration/decoration_arch.dds"
			size = { 30 30 }
			mirror = vertical
		}

		## Resources
		hbox = {
			name = "resources"
			margin_left = 20
			visible = "[Not( IsGameViewOpen('barbershop') )]"

			hbox = {
				name = "spendables"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				hbox = {
					name = "tutorial_highlight_resources_bar"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_right = 5
					margin_left = 15

					hbox = {
						name = "gold"
						layoutpolicy_vertical = expanding
						minimumsize = { 80 0 }
						margin_left = 7
						margin_right = 5

						using = tooltip_ne

						tooltipwidget = {
							widget_gold_breakdown_tooltip = {
								blockoverride "income"
								{
									datacontext = "[InGameTopbar.GetIncomeBalanceBreakdown]"
								}

								blockoverride "expenses"
								{
									datacontext = "[InGameTopbar.GetExpensesBalanceBreakdown]"
								}
							}
						}

						hbox = {
							name = "gold"
							layoutpolicy_vertical = expanding

							hbox = {
								margin_top = -5
								spacing = 7

								icon = {
									name = "gold_icon"
									size = { 30 30 }
									texture = "gfx/interface/icons/icon_gold.dds"
								}

								flowcontainer = {
									margin_bottom = 7
									spacing = -6
									direction = vertical
									ignoreinvisible = yes

									text_single = {
										name = "gold_value_positive"
										visible = "[GreaterThanOrEqualTo_CFixedPoint(GetPlayer.GetGold, '(CFixedPoint)0')]"
										text = "[GetPlayer.GetGold|0]"
										max_width = 50
										default_format = "#high"
										using = Font_Size_Medium
									}

									text_single = {
										name = "gold_value_negative"
										visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, '(CFixedPoint)0')]"
										text = "[GetPlayer.GetGold|0]"
										max_width = 50
										default_format = "#N"
										using = Font_Size_Medium
									}

									container = {
										text_single = {
											name = "balance_positive"
											visible = "[GreaterThanOrEqualTo_CFixedPoint(GetPlayerBalance, '(CFixedPoint)0')]"
											text = "CURRENT_BALANCE"
											max_width = 50
											default_format = "#low"
										}

										text_single = {
											name = "balance_negative"
											visible = "[LessThan_CFixedPoint(GetPlayerBalance, '(CFixedPoint)0')]"
											text = "CURRENT_BALANCE"
											max_width = 50
											default_format = "#N"
										}
									}
								}
							}
						}
					}

					divider_light = {
						layoutpolicy_vertical = expanding
						alpha = 0.8
					}

					hbox = {
						name = "prestige"
						datacontext = "[InGameTopbar.GetPrestigeItem]"
						layoutpolicy_vertical = expanding
						minimumsize = { 80 0 }

						using = tooltip_ne

						hbox = {
							margin_top = -5
							spacing = 7

							icon = {
								name = "prestige_icon"
								size = { 30 30 }
								texture = "[GetPlayer.GetPrestigeLevelTexture]"
							}

							flowcontainer = {
								margin_bottom = 7
								spacing = -6
								direction = vertical

								text_single = {
									name = "prestige_value"
									text = "[GetPlayer.GetPrestige|0]"
									max_width = 50
									default_format = "#high"
									using = Font_Size_Medium
								}

								container_resource_balance = {}
							}
						}

						tooltipwidget = {
							widget_resource_value_tooltip = {}
						}
					}

					divider_light = {
						layoutpolicy_vertical = expanding
						alpha = 0.8
					}

					button = {
						name = "piety"
						datacontext = "[InGameTopbar.GetPietyItem]"
						layoutpolicy_vertical = expanding
						onclick = "[OpenGameViewData( 'faith', GetPlayer.GetFaith.GetID )]"

						minimumsize = { 80 0 }
						margin_left = 7
						margin_right = 5

						using = tooltip_ne
						tooltipwidget = {
							widget_resource_value_tooltip = {}
						}

						hbox = {
							hbox = {
								margin_top = -5
								spacing = 6

								icon = {
									name = "piety_icon"
									size = { 30 30 }
									texture = "[GetPlayer.GetPietyLevelTexture]"
								}

								flowcontainer = {
									margin_bottom = 7
									spacing = -6
									direction = vertical

									text_single = {
										name = "piety_value"
										text = "[GetPlayer.GetPiety|0]"

										max_width = 50
										default_format = "#high"
										using = Font_Size_Medium
									}

									container_resource_balance = {}
								}
							}
						}
					}

					divider_light = {
						layoutpolicy_vertical = expanding
						alpha = 0.8
					}

					button = {
						name = "renown"
						datacontext = "[InGameTopbar.GetDynastyPrestigeItem]"
						layoutpolicy_vertical = expanding

						onclick = "[DefaultOnHouseCoatOfArmsClick(GetPlayer.GetHouse.GetID)]"

						minimumsize = { 80 0 }
						margin_left = 6
						margin_right = 5

						using = tooltip_ne
						tooltipwidget = {
							widget_resource_value_tooltip = {}
						}

						hbox = {
							hbox = {
								margin_top = -5
								spacing = 6

								icon = {
									visible = "[GetPlayer.IsDynast]"
									texture = "[GetPlayer.GetDynasty.GetDynastyPrestigeLevelTexture]"
									size = { 30 30 }
								}

								icon = {
									visible = "[Not(GetPlayer.IsDynast)]"
									texture = "[GetPlayer.GetDynasty.GetDynastyPrestigeLevelTexture]"
									size = { 30 30 }
									alpha = 0.3
								}

								flowcontainer = {
									visible = "[GetPlayer.IsDynast]"
									margin_bottom = 7
									spacing = -6
									direction = vertical

									text_single = {
										name = "prestige_value"
										text = "[GetPlayer.GetDynasty.GetPrestige|0]"

										max_width = 50
										default_format = "#high"
										using = Font_Size_Medium
									}

									container_resource_balance = {}
								}

								flowcontainer = {
									visible = "[Not(GetPlayer.IsDynast)]"
									margin_bottom = 7
									spacing = -6
									direction = vertical

									text_single = {
										name = "prestige_value_nodynast"
										text = "[GetPlayer.GetDynasty.GetPrestige|0]"

										max_width = 50
										default_format = "#low"
										using = Font_Size_Medium
									}

									container_resource_balance = {}
								}
							}
						}
					}
				}

				hbox = {
					name = "military"
					datacontext = "[GetPlayer]"
					datacontext = "[GetPlayerArmyComposition]"
					spacing = 5
					margin_left = 10
					margin_bottom = 3

					background = {
						texture = "gfx/interface/skinned/overlay_stone.dds"
						margin_right = 20
						margin_top = 20
						margin_bottom = 3
						texture_density = 2
						spritetype = corneredtiled
						color = { 0.4 0.4 0.44 1 }
						alpha = 0.9

						using = Mask_Rough_Edges
					}

					background = {
						texture = "gfx/interface/skinned/hud_top_right_bg_stone.dds"
						margin_right = 10
						margin_left = -2
						margin_top = 4
						texture_density = 2
						spritetype = corneredtiled
					}

					button_group = {
						onclick = "[ToggleGameViewData('military', GetPlayer.GetID)]"
						tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
						using = tooltip_ne

						flowcontainer = {
							margin = { 0 0 }
							spacing = 5

							icon = {
								name = "icon_soldier"
								texture = "gfx/interface/icons/icon_soldier.dds"
								size = { 25 25 }
							}

							flowcontainer = {
								direction = vertical
								min_width = 65

								flowcontainer = {
									spacing = 2

									text_single = {
										name = "strength"
										text = "[ArmyComposition.GetSoldierCountString]"
										default_format = "#high"
										align = nobaseline
									}

									army_quality_icon = {
										tooltip_enabled = no
									}
								}

								progressbar_standard = {
									name = "soldiers_max"
									size = { 40 8 }

									min = 0
									max = "[IntToFloat(ArmyComposition.GetMaxNumberOfSoldiers)]"
									value = "[IntToFloat(ArmyComposition.GetCurrentNumberOfSoldiers)]"
								}
							}
						}
					}

					button = {
						name = "domain_limit"
						layoutpolicy_vertical = expanding

						minimumsize = { 60 0 }

						margin_left = 3
						margin_bottom = 3

						tooltip = "[Character.GetDomainLimitTooltip]"
						using = tooltip_ne

						onclick = "[ToggleGameViewData('my_realm', 'domain')]"

						background = {
							visible = "[GreaterThan_int32( Character.GetDomainSize, Character.GetDomainLimit )]"
							using = Status_Bad
							margin_bottom = -3
						}

						hbox = {
							icon = {
								texture = "gfx/interface/icons/icon_domain.dds"
								size = { 25 25 }
							}

							text_single = {
								name = "value"
								text = "[Character.GetDomainSize]/[Character.GetDomainLimit]"
								align = nobaseline
								margin_bottom = 1

								max_width = 110
							}
						}
					}
				}

				spacer = {
					size = { 10 0 }
				}
			}
		}

		widget = {
			size = { 100% 100% }
			visible = "[Not( IsGameViewOpen('barbershop') )]"

			background = {
				texture = "gfx/interface/skinned/hud_top_right_frame.dds"
				margin_left = 20
				margin_bottom = 28
			}
		}
	}

	type container_royal_court_tooltip = container
	{
		using = GeneralTooltipSetup
		alwaystransparent = no

		object_tooltip_pop_out = {
			blockoverride "title_text"
			{
				margin = { 0 8 }
				text = "ROYAL_COURT"
				default_format = "#T"
			}

			blockoverride "concept_link"
			{
				visible = no
			}

			blockoverride "main_description"
			{
				vbox = {
					layoutpolicy_horizontal = expanding

					cooltip_paragraph = {
						visible = "[Not( Character.HasRoyalCourt )]"
						text = "[Character.GetRoyalCourtBlockers]"
					}

					cooltip_paragraph = {
						visible = "[GreaterThan_int32( Character.GetNumPendingCourtEvents, '(int32)0' )]"
						text = "ROYAL_COURT_STATUS_PENDING_EVENTS_BULLET"
					}
					cooltip_paragraph = {
						visible = "[GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' ), '(int32)0' )]"
						text = "ROYAL_COURT_STATUS_NEW_COURT_ARTIFACTS_BULLET"
					}
					cooltip_paragraph = {
						visible = "[LessThan_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetMinimumExpectedLevel )]"
						text = "ROYAL_COURT_STATUS_CGV_EXPECTATIONS_BULLET"
					}
					cooltip_paragraph = {
						visible = "[GreaterThan_int32( LocalPlayerCourtEvents.GetNumberCourtEvents, '(int32)0' )]"
						text = "ROYAL_COURT_STATUS_CURRENT_EVENTS_BULLET"
					}

					spacer = {
						# Truly horrible Or statements
						visible = "[Or( GreaterThan_int32( Character.GetNumPendingCourtEvents, '(int32)0' ), Or( GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' ), '(int32)0' ), Or( LessThan_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetMinimumExpectedLevel ), Or( GreaterThan_int32( LocalPlayerCourtEvents.GetNumberCourtEvents, '(int32)0' ), Not( Character.HasRoyalCourt ) ) ) ) )]"
						size = { 0 10 }
					}
				}
			}
		}
	}

	type activity_hud_button = button_normal
	{
		size = { 60 60 }

		tooltip = "TT_ACTIVITY_WIDGET"
		using = tooltip_above
		onclick = "[Activity.OpenActivityView]"

		icon = {
			texture = "gfx/interface/buttons/button_lifestyles_base.dds"
			size = { 100% 100% }
		}

		# icon = {
		# 	texture = "gfx/interface/buttons/button_lifestyles_active_frame.dds"
		# 	size = { 100% 100% }
		# }

		icon = {
			name = "progress_frame"
			texture = "gfx/interface/progressbars/action_progress_frame.dds"
			size = { 100% 100% }
			parentanchor = center
			alpha = 0.5
		}

		progresspie = {
			name = "progress"
			visible = "[Character.HasActivityState( 'travel' )]"
			size = { 60 60 }

			texture = "gfx/interface/progressbars/action_progress_thin.dds"

			framesize = { 124 124 }
			frame = 2

			widgetanchor = top|hcenter
			parentanchor = top|hcenter

			min = 0
			max = 1
			value = "[Character.GetTravelPlan.GetData.GetNextDestinationProgress]"
		}

		highlight_icon = {
			texture = "[Activity.GetType.GetIcon]"
			alwaystransparent = yes
			size = { 45 45 }
			parentanchor = center
		}
	}

	type icon_hud_background = icon {
		size = { 200 64 }
		texture = "gfx/interface/skinned/hud_bg_character_bar.dds"
		spritetype = corneredtiled
		spriteborder_left = 70
		spriteborder_right = 240
		texture_density = 2

		state = {
			name = _show
			using = Animation_Curve_Default
			duration = 0.21

			position = { 0 0 }
			alpha = 1
		}

		state = {
			name = _hide
			using = Animation_Curve_Default
			duration = 0.21

			position = { -36 50 }
			alpha = 0
		}
	}

	type tax_jurisdictions_button_tooltip = widget {
		alwaystransparent = no
		datacontext = "[GetPlayer]"

		vbox = {
			using = Background_Tooltip
			spacing = 10
			margin = { 20 10 }
			parentanchor = right|vcenter
			text_single = {
				text = "TAX_JURISDICTIONS_BUTTON"
				layoutpolicy_horizontal = expanding
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				visible = "[GreaterThan_int32( Character.GetUnassignedVassalsCount, '(int32)0' )]"

				icon = {
					size = { 25 25 }
					texture = "gfx/interface/icons/symbols/icon_warning.dds"
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					margin_left = 10

					text_single = {
						visible = "[GreaterThan_int32( Character.GetTaxSlotsWithoutTaxCollectorCount, '(int32)0' )]"
						layoutpolicy_horizontal = expanding
						text = "TAX_SLOT_OVERVIEW_WINDOW_TAX_SLOTS_WARNING"
						default_format = "#N"
						max_width = 320
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "TAX_SLOT_OVERVIEW_WINDOW_UNASSIGNED_VASSALS_WARNING"
						default_format = "#N"
						max_width = 320
					}

					text_single = {
						visible = "[Not( Character.HasTaxSlots )]"
						layoutpolicy_horizontal = expanding
						text = "NO_TAX_SLOT_AVAILABLE"
						default_format = "#N"
						max_width = 320
					}
				}
			}
			expand = {}
		}
	}
}
