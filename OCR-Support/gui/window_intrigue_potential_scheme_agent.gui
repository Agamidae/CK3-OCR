window = {
	name = "potential_agent_window"
	# position = { -630 0 }
	movable = no
	allow_outside = yes
	layer = middle

	using = Window_Size_CharacterList_Small
	size = { 900 100% }


	window_ocr = {
		blockoverride "ocr_header" {
			hbox = {
				layoutpolicy_horizontal = expanding

				button_text = {
					shortcut = mapmode_house_secondary
					layoutpolicy_horizontal = expanding
					onclick = "[Toggle('agent_desc')]"
					blockoverride "text" {
						raw_text = "POTENTIAL_AGENT_HEADER"
					}
					blockoverride "extra" {
						comma = {}
						text_single = {
							raw_text = "Description [Collapse('agent_desc')] Shift D."
						}
					}
				}

				button_close = {
					using = close_window_ocr
					onclick = "[PotentialAgentWindow.Close]"
				}
			}

			hbox = {
				visible = "[Isnt('agent_desc')]"
				layoutpolicy_horizontal = expanding

				text_multi_wide = {
					layoutpolicy_horizontal = expanding

					text = "[PotentialAgentWindow.GetAgentSlotType.GetDesc]"
				}

				expand = {}
			}
		}

		blockoverride "ocr_content" {
			vbox_character_list = {
				datacontext = "[PotentialAgentWindow.GetListItems]"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				blockoverride "skill_sort_buttons" { }
				blockoverride "item_size" {
					size = { 860 21 }
					layoutpolicy_horizontal = expanding
				}

				blockoverride "click" {
					onclick = "[CharacterListItem.OnClick('character')]"
					onrightclick = "[DefaultOnCharacterClick(CharacterListItem.GetCharacter.GetID)]"
				}

				blockoverride "button_content"
				{
					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						text_single = {
							raw_text = "[Add_int32(CharacterListItem.GetOrderIndex, '(int32)1')]"
							visible = "[GetVariableSystem.Exists('index')]"
						}

						hbox = {
							spacing = 3
							tooltip = "[CharacterListItem.GetText( 'contribution_desc' )]"

							text_single = {
								raw_text = "[Abs_int32( CharacterListItem.GetInt( 'contribution' ) )]"
							}
							text_single = {
								visible = "[IsIndexFirst]"
								raw_text = "contribution"
							}
							comma = {}
						}

						#TODO
						# CharacterListItem.GetFixedPoint( Arg0 )
						text_single = {
							name = "acceptance"
							raw_text = "[CharacterListItem.GetText( 'acceptance' )],"
							tooltip = "[CharacterListItem.GetText( 'acceptance_desc' )]"
						}



						# text_single = {
						# 	name = "name"
						# 	raw_text = "[Character.GetUINameNoTooltip]."
						# }

						text_single = {
							raw_text = "[Character.GetTitledFirstNameNoTooltip],"
						}


						text_single = {
							# visible = no
							tooltip = "EXTENDED_RELATIONS_TOOLTIP"
							raw_text = "[Character.GetRelationToString( Character.GetLiege )]"
						}

						#TODO delete?
						hbox_skills_grid = {
							visible = no
						}

						expand = { }
					}
				}
				blockoverride "container_implementation" {
					fixedgridbox = {
						name = "characters_grid"
						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"
						addcolumn = 860
						addrow = 21
						setitemsizefromcell = yes

						item = {
							widget_character_list_item_finder_ocr = {
							datacontext = "[CharacterListItem.GetCharacter]"
						}
					}

				}

			}
		}
	}

	window_character_filter = {
		datacontext = "[PotentialAgentWindow.GetListItems]"
		blockoverride "addition_filter" {
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('hook_filter')]"
			}
		}
	}
}
