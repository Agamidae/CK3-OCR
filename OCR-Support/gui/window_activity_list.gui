@txt_width = 700

window = {
	name = "activity_list"
	movable = no
	using = base_ocr_window

	datacontext = "[GetPlayer]"
	datacontext = "[GetVariableSystem]"

	state = {
		name = _show
		using = Sound_WindowShow_Standard
		on_finish = "[Clear('grand_activity')]"

		# start_sound = {
		# 	soundeffect = "event:/SFX/UI/Character/Lifestyle/sfx_ui_character_lifestyle_diplomacy_lifestyle"
		# 	# soundeffect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_start_poetry"
		# }
	}

	state = {
		name = _hide
		using = Sound_WindowHide_Standard
		on_finish = "[Set('activity_tip', 'yes')]"
	}

	window_ocr = {
		blockoverride "ocr_header" {
			text_single = {
				layoutpolicy_horizontal = expanding
				raw_text = "ACTIVITY_LIST"
			}
			button = {
				shortcut = close_window
				onclick = "[ActivityListWindow.Close]"
			}

		}
		blockoverride "ocr_content" {
			# could probably remove it
			vbox = {
				visible = no
				name = "activity_status"
				layoutpolicy_horizontal = expanding
				datacontext = "[Character.GetInvolvedActivity]"

				text_single = {
					layoutpolicy_horizontal = expanding
					name = "status_no_activity"
					raw_text = "ACTIVITY_LIST_NO_ONGOING_ACTIVITY"
					visible = "[Not( Activity.IsValid )]"
				}

				vbox = {
					name = "status_involved_activity"
					layoutpolicy_horizontal = expanding
					visible = "[Activity.IsValid]"

					text_multi_wide = {
						name = "status_involved_activity"
						text = "ACTIVITY_LIST_INVOLVED_ACTIVITY"
						visible = "[Not( ObjectsEqual( Activity.GetHost.Self, Character.Self ) )]"
					}

					text_multi_wide = {
						name = "status_hosting_activity"
						text = "ACTIVITY_LIST_HOSTING_ACTIVITY"
						visible = "[ObjectsEqual( Activity.GetHost.Self, Character.Self )]"
					}
				}

				expand = { }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Isnt('activity_focus')]"

				text_single = {
					visible = "[Isnt('activity_tip')]"
					layoutpolicy_horizontal = expanding
					raw_text = "Costs are average and can be lowered. You may preview activities that you can't host."
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					shortcut = map_mode_11
					blockoverride "text" {
						raw_text = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.AccessParent.FindChild('activities').CountVisibleChildren] groups, collapse all with Shift E, expand with E, focus with numbers."
					}
					onclick = "[PdxGuiTriggerAllAnimations('collapse_activities')]"
				}
			}

			button = {
				shortcut = map_mode_1
				onclick = "[PdxGuiTriggerAllAnimations('expand_activities')]"
				onclick = "[Clear('activity_focus')]"
			}

			button = {
				shortcut = close_window
				onclick = "[Clear('activity_focus')]"
				visible = "[Is('activity_focus')]"
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				datamodel = "[ActivityListWindow.GetActivityGroupItems]"
				name = "activities"

				item = {
					vbox = {
						layoutpolicy_horizontal = expanding
						datacontext = "[ActivityGroupItem.GetGroupType]"
						visible = "[DataModelHasItems( ActivityGroupItem.GetActivities )]"

						vbox = {
							visible = "[Or(Isnt('activity_focus'), Has('activity_focus', ActivityGroupItem.GetGroupTitle))]"
							oncreate = "[BindFoldOutContext]"
							oncreate = "[PdxGuiFoldOut.Unfold]"
							layoutpolicy_horizontal = expanding

							state = {
								name = collapse_activities
								on_finish = "[PdxGuiFoldOut.Fold]"
							}

							state = {
								name = expand_activities
								on_finish = "[PdxGuiFoldOut.Unfold]"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								onclick = "[PdxGuiFoldOut.Unfold]"
								onclick = "[Set('activity_focus', ActivityGroupItem.GetGroupTitle)]"
								shortcuts_list = {
									blockoverride "click" {
										onclick = "[Set('activity_focus', ActivityGroupItem.GetGroupTitle)]"
										onclick = "[PdxGuiFoldOut.Unfold]"
										# onclick = "[PdxGuiFoldOut.Toggle]"
									}
								}
								blockoverride "pre" {
									# text_single = {
									# 	visible = "[PdxGuiFoldOut.IsUnfolded]"
									# 	raw_text = "Group"
									# }
									# text_single = {
									# 	raw_text = "[IndexNumber],"
									# 	visible = "[Isnt('activity_focus')]"
									# }

									text_single = {
										visible = "[Isnt('activity_focus')]"
										raw_text = "[IndexNumber|O] group,"
									}
								}
								blockoverride "text" {
									raw_text = "[ActivityGroupItem.GetGroupTitle], [CollapseIf(PdxGuiFoldOut.IsFolded)]"
								}
							}

							# button = {
							# 	shortcut = close_window
							# 	onclick = "[Clear('activity_focus')]"
							# 	visible = "[Has('activity_focus', ActivityGroupItem.GetGroupTitle)]"
							# }

							vbox = {
								visible = "[PdxGuiFoldOut.IsUnfolded]"
								layoutpolicy_horizontal = expanding

								fixedgridbox = {
									name = "activities_in_group"
									datamodel = "[ActivityGroupItem.GetActivities]"

									layoutpolicy_horizontal = expanding

									addcolumn = 650
									addrow = 25
									setitemsizefromcell = yes

									item = {
										widget = {
											button_activity_entry_ocr = {
												visible = "[ActivityItem.IsOngoing]"
												onclick = "[ToggleGameViewData( 'activity_list_detail_invite_window', Activity.Self )]"
												shortcuts_list = {
													visible = "[Is('activity_focus')]"
													blockoverride "click" {
														onclick = "[ToggleGameViewData( 'activity_list_detail_invite_window', Activity.Self )]"
													}
												}
											}
											button_activity_entry_ocr = {
												# visible = "[Not(ActivityItem.IsOngoing)]"
												onclick = "[ToggleGameViewData( 'activity_list_detail_host_window', ActivityType.Self )]"
												shortcuts_list = {
													visible = "[Is('activity_focus')]"
													blockoverride "click" {
														onclick = "[ToggleGameViewData( 'activity_list_detail_host_window', ActivityType.Self )]"
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	old_activities = { }
}

# This is basically a duplication of the decision detail view
window = {
	name = "activity_list_detail_host"
	using = base_ocr_window
	layer = windows_layer_top

	datacontext = "[ActivityListDetailHostView.GetType]"

	state = {
		name = _show
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Sound_WindowHide_Standard
	}

	window = {
		using = ocr_window

		vbox = {
			using = ocr_margins

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "ACTIVITY_LIST_DETAIL_HOST_TITLE"
				}

				blockoverride "button_close"
				{
					onclick = "[ActivityListDetailHostView.Close]"
				}
			}

			vbox = {
				name = "footer"
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "cost"
						visible = "[ActivityListDetailHostView.HasCost]"
						raw_text = "[ActivityListDetailHostView.GetCostDescription]."
						layoutpolicy_horizontal = expanding
						tooltip = "ACTIVITY_BASE_COST_TT"
					}

					button_primary_text = {
						name = "confirm"
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "ACTIVITY_LIST_DETAIL_HOST_CONFIRM"
						}

						blockoverride "disabled" {
							visible = "[Not(ActivityListDetailHostView.CanConfirm)]"
						}

						blockoverride "hotkey" {
							visible = "[ActivityListDetailHostView.CanConfirm]"
						}

						tooltip_visible = "[Not(ActivityListDetailHostView.CanConfirm)]"
						tooltip = "[ActivityListDetailHostView.GetConfirmTooltip]"

						onclick = "[ActivityListDetailHostView.Confirm]"

						default_clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
						clicksound = "[ActivityListDetailHostView.GetConfirmClickSound]"
					}


					button_checked_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[ActivityType.ToggleShouldNotifyCanHost]"
						shortcut = army_split_half
						blockoverride "visible" {
							visible = "[Not(ActivityType.ShouldNotifyCanHost)]"
						}

						blockoverride "text"
						{
							text = "ACTIVITY_LIST_DETAIL_TOGGLE_SHOULD_NOTIFY_CAN_HOST"
						}
						blockoverride "extra_text"
						{
							raw_text = ", F."
						}
					}

					expand = { }
				}
			}

			scrollbox = {
				name = "description_scrollarea"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						# spacing = 10

						vbox = {
							name = "effect"
							layoutpolicy_horizontal = expanding

							text_single = {
								text = "DECISION_DETAIL_EFFECTS"
								layoutpolicy_horizontal = expanding
							}

							text_multi = {
								layoutpolicy_horizontal = expanding
								max_width = @txt_width
								autoresize = yes
								raw_text = "ACTIVITY_LIST_DETAIL_HOST_EFFECTS"
							}
						}

						vbox = {
							name = "requirements"
							visible = "[ActivityListDetailHostView.HasRequirements]"
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "DECISION_DETAIL_REQUIREMENTS"
							}

							text_multi = {
								alwaystransparent = no
								minimumsize = { @txt_width -1 }
								maximumsize = { @txt_width -1 }
								autoresize = yes
								raw_text = "[ActivityListDetailHostView.GetRequirementsDescription]."
							}
						}

						text_single = {
							raw_text = "Description:"
							layoutpolicy_horizontal = expanding
						}

						text_multi = {
							name = "description"
							minimumsize = { @txt_width -1 }
							maximumsize = { @txt_width -1 }
							autoresize = yes
							raw_text = "[ActivityType.GetDescription]."
						}

						expand = { }

					}
				}

				blockoverride "scrollbox_background_fade" {}
			}
		}
	}

	old_activity_details = { }
}

window = {
	name = "activity_list_detail_invite"

	using = base_ocr_window
	layer = middle

	datacontext = "[ActivityListDetailJoinView.GetActivity]"
	datacontext = "[Activity.GetType]"

	window = {
		using = ocr_window

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			using = ocr_margins

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				header_pattern = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text"
					{
						text = "ACTIVITY_LIST_DETAIL_JOIN_TITLE"
					}

					blockoverride "button_close"
					{
						onclick = "[ActivityListDetailJoinView.Close]"
					}
				}

				vbox = {
					name = "contents"

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					error_button = {
						layoutpolicy_horizontal = expanding
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						name = "may_not_arrive_in_time"
						raw_text = "[Localize('ACTIVITY_LIST_DETAIL_JOIN_MAY_NOT_ARRIVE_IN_TIME')]."
						visible = "[IsDateAfter( GetCurrentDate, ActivityListDetailJoinView.GetLatestDepartureDate )]"
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						name = "latest_departure_date"
						visible = "[Not( IsDateAfter( GetCurrentDate, ActivityListDetailJoinView.GetLatestDepartureDate ) )]"

						hbox = {
						    layoutpolicy_horizontal = expanding

							text_single = {
								name = "latest_departure_date_normal_guest"
								text = "ACTIVITY_LIST_DETAIL_JOIN_DEPARTURE_TIME"
								visible = "[Not( Activity.IsSpecialGuest( GetPlayer ))]"
							}
						    dot = {}

						    expand = { }
						}


						vbox = {
							layoutpolicy_horizontal = expanding
							name = "latest_departure_date_special_guest"

							datacontext = "[Activity.GetSpecialGuestTypeForCharacter( GetPlayer )]"
							visible = "[Activity.IsSpecialGuest( GetPlayer )]"

							hbox = {
							    layoutpolicy_horizontal = expanding

								text_single = {
									text = "ACTIVITY_LIST_DETAIL_JOIN_REQUIRED_SPECIAL_GUEST"
									visible = "[ActivitySpecialGuestType.IsRequired]"
								}

								text_single = {
									text = "ACTIVITY_LIST_DETAIL_JOIN_DEPARTURE_TIME"
									visible = "[Not( ActivitySpecialGuestType.IsRequired )]"
								}

								dot = {}

							    expand = { }
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						text_single = {
							text = "ACTIVITY_LIST_DETAIL_JOIN_LOCATION"
						}

						text_single = {
							raw_text = ","
						}
						space = { }
						text_single = {
							text = "ACTIVITY_LIST_DETAIL_JOIN_TRAVEL_TIME"
						}
						dot = { }
						expand = { }
					}

					vbox = {
						name = "invitation"
						datacontext = "[Activity.GetHost]"
						layoutpolicy_horizontal = expanding

						text_multi = {
							layoutpolicy_horizontal = expanding
							name = "description"
							using = wide
							autoresize = yes

							text = "[ActivityListDetailJoinView.GetInvitationText]"
						}

						char_name = {
							layoutpolicy_horizontal = expanding
							blockoverride "pre" {
								text_single = {
									raw_text = "Signed,"
								}
							}
						}

						hbox = {
						    layoutpolicy_horizontal = expanding
							spacing = 3

							text_single = {
								raw_text = "[Character.GetOpinionOf( GetPlayer) ] opinion of you. Yours of [Character.GetHerHim] is [GetPlayer.GetOpinionOf( Character.Self)]."
								tooltip = "[Character.GetOpinionBreakdownText( GetPlayer )]"
							}

							text_single = {
								raw_text = "[Character.GetRelationToString( GetPlayer )]."
							}

						    expand = { }
						}
					}

					vbox = {
						name = "footer"
						layoutpolicy_horizontal = expanding

						vbox = {
							layoutpolicy_horizontal = expanding

							vbox = {
								layoutpolicy_horizontal = expanding
								button_primary_text = {
									layoutpolicy_horizontal = expanding
									name = "confirm"
									blockoverride "text" {
										text = "ACTIVITY_LIST_DETAIL_JOIN_CONFIRM"
									}

									onclick = "[ActivityListDetailJoinView.Confirm]"

								}

								button_text = {
									layoutpolicy_horizontal = expanding
									name = "change_left_character"

									onclick = "[Activity.DeclineInvite]"
									visible = "[Not( Activity.GetType.IsOpenInvite )]"
									shortcut = mapmode_house_secondary

									blockoverride "text" {
										raw_text = "Decline invitation, shift D."
									}
								}
							}

							expand = { }
						}
					}

					widget = {
						size = { 0 5 }
					}

					scrollbox = {
						name = "description_scrollarea"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content"
						{
							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								vbox = {
									name = "phases"
									layoutpolicy_horizontal = expanding

									text_single = {
										layoutpolicy_horizontal = expanding
										text = "ACTIVITY_LIST_DETAIL_JOIN_PHASES_HEADER"
									}

									activity_phase_progress_timline_widget_ocr = {
										name = "phase_progres_timeline"
										layoutpolicy_horizontal = expanding

										blockoverride "current_phase_progress"
										{
											tooltip = "ACTIVITY_PHASE_TOOLTIP"
										}
									}
								}


								vbox = {
									name = "effect"
									layoutpolicy_horizontal = expanding

									text_single = {
										layoutpolicy_horizontal = expanding
										text = "DECISION_DETAIL_EFFECTS"
									}

									text_multi = {
										layoutpolicy_horizontal = expanding
										using = wide
										autoresize = yes
										text = "ACTIVITY_LIST_DETAIL_JOIN_EFFECTS"
									}
								}

								expand = { }
							}
						}

						blockoverride "scrollbox_background_fade" { }
					}
				}
			}

			expand = { }
		}
	}

	old_invite = { }

	state = {
		name = _show
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Sound_WindowHide_Standard
	}
}

types OCR {
	type old_invite = window {
		using = old_window
		parentanchor = top|right
		position = { -650 110 }
		size = { 630 935 }
		layer = middle

		using = Window_Movable
		using = Window_Background
		using = Window_Decoration_Spike

		state = {
			name = _show
			using = Animation_FadeIn_Standard
			position = { -650 110 }
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		vbox = {
			using = Window_Margins

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "ACTIVITY_LIST_DETAIL_JOIN_TITLE"
				}

				blockoverride "button_close"
				{
					onclick = "[ActivityListDetailJoinView.Close]"
				}
			}

			vbox = {
				name = "contents"

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 550 220 }

					background = {
						name = "illustrations"
						texture = "[ActivityType.GetHeaderBackground]"
						margin_top = 10
						alpha = 0.7
						using = Mask_Rough_Edges
					}

					hbox = {
						name = "activity_host"
						layoutpolicy_horizontal = expanding
						datacontext = "[Activity.GetHost]"
						margin = { 20 0 }
						spacing = 10

						portrait_torso = {}

						expand = {}
					}
				}

				vbox = {
					name = "invitation"
					datacontext = "[Activity.GetHost]"

					layoutpolicy_horizontal = expanding
					using = Background_Letter
					minimumsize = { 515 -1 }
					maximumsize = { 515 -1 }

					margin = { 20 15 }

					text_multi = {
						name = "description"
						minimumsize = { 500 -1 }
						maximumsize = { 500 -1 }
						autoresize = yes

						text = "[ActivityListDetailJoinView.GetInvitationText]"

						using = Font_Size_Small

						default_format = "#light_background"
						using = Text_Light_Background_Overrides
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						coa_character_sigil = {}

						text_single = {
							name = "liege_signature"
							max_width = 430
							align = left
							layoutpolicy_horizontal = expanding

							text = "ACTIVITY_LIST_INVITATION_SIGNATURE"

							using = Font_Size_Medium

							default_format = "#light_background"
							using = Text_Light_Background_Overrides
						}
					}
				}

				scrollbox = {
					name = "description_scrollarea"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content"
					{
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							spacing = 10

							vbox = {
								name = "phases"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin = { 0 5 }

								background = {
									using = Background_Area_Solid
								}

								text_label_center = {
									text = "ACTIVITY_LIST_DETAIL_JOIN_PHASES_HEADER"
								}

								activity_phase_progress_timline_widget = {
									name = "phase_progres_timeline"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									maximumsize = { 500 -1 }

									blockoverride "current_phase_progress"
									{
										tooltip = "ACTIVITY_PHASE_TOOLTIP"
									}
								}
							}

							hbox = {
								name = "destination"
								layoutpolicy_horizontal = expanding

								text_single = {
									text = "ACTIVITY_LIST_DETAIL_JOIN_LOCATION"
								}

								text_single = {
									text = "ACTIVITY_LIST_DETAIL_JOIN_TRAVEL_TIME"
								}
							}

							vbox = {
								name = "effect"
								layoutpolicy_horizontal = expanding

								background = {
									name = "illustrations"
									texture = "gfx/interface/icons/lifestyle_tree_backgrounds/skulduggery.dds"
									tintcolor = { 0.6 0.8 0.8 0.8 }

									margin = { 0 5 }
									using = Mask_Rough_Edges
									alpha = 0.8
									fittype = centercrop
									mirror = horizontal

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_corners_bottom.dds"
										blend_mode = alphamultiply
										alpha = 0.6
									}

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_rough_edges.dds"
										blend_mode = overlay
										alpha = 0.4
									}
								}

								text_label_center = {
									text = "DECISION_DETAIL_EFFECTS"
								}

								text_multi = {
									layoutpolicy_horizontal = expanding
									margin = { 15 15 }
									max_width = 515
									autoresize = yes
									text = "ACTIVITY_LIST_DETAIL_JOIN_EFFECTS"
								}
							}

							expand = {}

						}
					}

					blockoverride "scrollbox_background_fade" {}
				}

				vbox = {
					name = "footer"
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding
						margin_top = 4
						margin_bottom = 10
						spacing = 7

						container = {
							name = "latest_departure_date"
							visible = "[Not( IsDateAfter( GetCurrentDate, ActivityListDetailJoinView.GetLatestDepartureDate ) )]"

							text_single = {
								name = "latest_departure_date_normal_guest"
								text = "ACTIVITY_LIST_DETAIL_JOIN_DEPARTURE_TIME"
								visible = "[Not( Activity.IsSpecialGuest( GetPlayer ) )]"
							}

							container = {
								name = "latest_departure_date_special_guest"

								datacontext = "[Activity.GetSpecialGuestTypeForCharacter( GetPlayer )]"
								visible = "[Activity.IsSpecialGuest( GetPlayer )]"

								text_single = {
									text = "ACTIVITY_LIST_DETAIL_JOIN_REQUIRED_SPECIAL_GUEST"
									visible = "[ActivitySpecialGuestType.IsRequired]"
								}

								text_single = {
									text = "ACTIVITY_LIST_DETAIL_JOIN_DEPARTURE_TIME"
									visible = "[Not( ActivitySpecialGuestType.IsRequired )]"
								}
							}
						}

						text_single = {
							name = "may_not_arrive_in_time"
							text = "ACTIVITY_LIST_DETAIL_JOIN_MAY_NOT_ARRIVE_IN_TIME"
							visible = "[IsDateAfter( GetCurrentDate, ActivityListDetailJoinView.GetLatestDepartureDate )]"
						}

						hbox = {
							spacing = 10

							button_primary = {
								name = "confirm"
								size = { 380 50 }

								onclick = "[ActivityListDetailJoinView.Confirm]"

								text = "ACTIVITY_LIST_DETAIL_JOIN_CONFIRM"
							}

							button_round = {
								name = "change_left_character"

								onclick = "[Activity.DeclineInvite]"
								visible = "[Not( Activity.GetType.IsOpenInvite )]"
								size = { 40 40 }
								tooltip = "ACTIVITY_LIST_DECLINE_INVITE"

								button_dismiss = {
									size = { 35 35 }
									parentanchor = center
									alwaystransparent = yes
								}
							}
						}

						expand = {}
					}
				}
			}
		}
	}

	type button_activity_entry_ocr = button_text {
		datacontext = "[ActivityItem.GetType]"
		datacontext = "[ActivityItem.GetActivity]"
		# tooltip = JOIN_ACTIVITY_TOOLTIP
		blockoverride "num" {}
		blockoverride "pre" {

			text_single = {
				visible = "[ActivityItem.IsOngoing]"
				raw_text = "Join"
			}

			text_single = {
				raw_text = "[ActivityType.GetNameNoTooltip],"
			}

			flowcontainer = {
				ignoreinvisible = yes
				spacing = 3
				visible = "[Not(ActivityItem.IsOngoing)]"

				text_single = {
					raw_text = "[ActivityType.GetUiPredictedCost( GetPlayer )|U]"
				}

				, = {}


				text_single = {
					visible = "[And( Not( ActivityItem.IsOngoing ), Not( Or(ActivityType.CanPlanActivity( GetPlayer ), ActivityType.CanAlwaysPlan() ) ) )]"
					raw_text = "can't host."
				}
			}

			char_name = {
				visible = "[ActivityItem.IsOngoing]"
				datacontext = "[Activity.GetHost]"
				blockoverride "pre" {
					text_single = {
						margin_left = -3
						raw_text = "of"
					}
				}
				blockoverride "relation" {
				}
			}
		}
	}
}

types ActivityListTypes
{
	type vbox_activity_group_foldout = vbox {
		datacontext = "[ActivityGroupItem.GetGroupType]"
		visible = "[Not( IsDataModelEmpty( ActivityGroupItem.GetActivities ) )]"
		spacing = 4

		layoutpolicy_horizontal = expanding

		oncreate = "[BindFoldOutContext]"
		oncreate = "[PdxGuiFoldOut.Unfold]"

		button_expandable_toggle_field = {
			blockoverride "text"
			{
				text = "[ActivityGroupItem.GetGroupTitle]"
			}
		}

		vbox = {
			visible = "[PdxGuiFoldOut.IsUnfolded]"

			layoutpolicy_horizontal = expanding

			fixedgridbox = {
				name = "activities_in_group"
				datamodel = "[ActivityGroupItem.GetActivities]"

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				addcolumn = 527
				addrow = "[Select_float( ActivityGroupType.HasTag('big_button'), '(float)65.0', '(float)55.0' )]"

				item = {
					vbox = {
						layoutpolicy_horizontal = expanding

						# Ongoing activity invites or joinables
						button_activity_entry = {
							datacontext = "[ActivityItem.GetType]"
							datacontext = "[ActivityItem.GetActivity]"
							visible = "[ActivityItem.IsOngoing]"

							down = "[IsGameViewDataShown( 'activity_list_detail_invite_window', Activity.Self )]"
							onclick = "[ToggleGameViewData( 'activity_list_detail_invite_window', Activity.Self )]"
							tooltip = JOIN_ACTIVITY_TOOLTIP
						}

						# Hostable Activities
						button_activity_entry = {
							datacontext = "[ActivityItem.GetType]" # CActitiyType
							datacontext = "[ActivityItem.GetActivity]" # CActivity
							visible = "[Not( ActivityItem.IsOngoing )]"

							down = "[IsGameViewDataShown( 'activity_list_detail_host_window', ActivityType.Self )]"
							onclick = "[ToggleGameViewData( 'activity_list_detail_host_window', ActivityType.Self )]"
							tooltip = SHOW_ACTIVITY_TOOLTIP
						}
						expand = {}
					}
				}
			}
		}
	}

	type button_activity_entry = button_standard {
		minimumsize = "[Select_CVector2f( ActivityGroupType.HasTag('big_button'), '(CVector2f)527,60', '(CVector2f)527,50' )]"

		layoutpolicy_horizontal = expanding

		widget = {
			minimumsize = "[Select_CVector2f( ActivityGroupType.HasTag('big_button'), '(CVector2f)527,56', '(CVector2f)527,46' )]"
			position = { -2 2 }

			parentanchor = right|top
			scissor = yes

			icon = {
				name = "illustration"
				visible = "[Or( ActivityItem.IsOngoing, And( Not( ActivityItem.IsOngoing ), ActivityType.CanPlanActivity( GetPlayer ) ) )]"
				parentanchor = right|top
				size = { 250 100 }

				texture = "[ActivityType.GetHeaderBackground]"
				alpha = 0.7
				mirror = horizontal

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
					blend_mode = alphamultiply
				}
			}

			highlight_icon = {
				visible = "[And( Not( ActivityItem.IsOngoing ), Not( ActivityType.CanPlanActivity( GetPlayer ) ) )]"
				parentanchor = right|top
				size = { 250 100 }

				mirror = horizontal
				texture = "[ActivityType.GetHeaderBackground]"
				alpha = 0.7

				effectname = "GreyedOut"

				tintcolor = { 0.6 0.6 0.6 0.7 }

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
					blend_mode = alphamultiply
				}
			}
		}

		hbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			margin = { 4 0 }
			margin_right = 16
			spacing = 5

			highlight_icon = {
				name = "icon"
				size = { 40 40 }
				texture = "[ActivityType.GetIcon]"
			}

			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				spacing = -3
				minimumsize = { 150 -1 }

				expand = {}

				text_single = {
					name = "ongoing_title"
					visible = "[ActivityItem.IsOngoing]"
					layoutpolicy_horizontal = expanding

					text = "[Activity.GetNameNoTooltip]"
					default_format = "#clickable"
					align = nobaseline
				}

				text_single = {
					name = "title"
					visible = "[And( Not( ActivityItem.IsOngoing ), ActivityType.CanPlanActivity( GetPlayer ) )]"

					layoutpolicy_horizontal = growing

					text = "[ActivityType.GetNameNoTooltip]"
					default_format = "#clickable"
					align = nobaseline
				}

				text_single = {
					name = "title_disabled"
					visible = "[And( Not( ActivityItem.IsOngoing ), Not( ActivityType.CanPlanActivity( GetPlayer ) ) )]"

					layoutpolicy_horizontal = growing

					text = "[ActivityType.GetNameNoTooltip]"
					default_format = "#low"
					align = nobaseline
				}

				text_single = {
					name = "base_cost"
					visible = "[Not( ActivityItem.IsOngoing )]"

					layoutpolicy_horizontal = growing

					alwaystransparent = yes
					text = "ACTIVITY_BASE_COST"
					align = nobaseline
				}

				expand = {}
			}

			expand = {}

			highlight_icon = {
				name = "not_possible"
				visible = "[And( Not( ActivityItem.IsOngoing ), Not( Or(ActivityType.CanPlanActivity( GetPlayer ), ActivityType.CanAlwaysPlan() ) ) )]"
				size = { 30 30 }
				texture = "gfx/interface/icons/symbols/icon_cross.dds"
			}
		}
	}

	type travel_trait_small_vbox = vbox
	{
		text_single = {
			block "name"
			{
				raw_text = "#D NAME#!"
			}
		}

		hbox = {
			debug_square = {
				size = { 50 50 }
			}

			progressbar_standard = {
				size = { 100 20 }
				min = 0
				max = 1
				value = 0.5
			}
		}
	}
}
