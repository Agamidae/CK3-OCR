######################################################
################## CULTURE ADD TRADITION #############
######################################################

window = {
	name = "add_tradition_window"
	parentanchor = center
	size = { 100% 100% }
	layer = windows_layer

	datacontext = "[GetPlayer.GetCulture]"

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		on_start = "[AddTraditionWindow.SetTraditionCategory( AddTraditionWindow.GetTraditionGrouping( 'realm' ).GetCategory )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
	}

	window = {
		size = { 100% 100% }
		using = Window_Background_No_Edge
		using = ocr

		vbox = {
			margin = { 10 0 }
			margin_top = 25
			minimumsize = { 600 0 }

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					raw_text = "[SelectLocalization(AddTraditionWindow.IsReplacing, 'REPLACE_TRADITION_WINDOW_TITLE', 'ADD_TRADITION_WINDOW_TITLE')] window."
				}

				blockoverride "button_close"
				{
					onclick = "[AddTraditionWindow.Close]"
				}
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				raw_text = "Selected [AddTraditionWindow.GetSelectedTradition.GetNameNoTooltip] tradition."
				visible = "[AddTraditionWindow.GetSelectedTradition.IsValid]"
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				name = "cost"
				datacontext = "[AddTraditionWindow.GetSelectedTradition]"
				visible = "[CultureTradition.IsValid]"
				tooltip = "[SelectLocalization(AddTraditionWindow.IsReplacing, 'REPLACE_TRADITION_COST_TOOLTIP', 'ADD_TRADITION_COST_TOOLTIP')]"

				text_single = {
					raw_text = "[SelectLocalization(AddTraditionWindow.IsReplacing, 'REPLACE_TRADITION_TOTAL_COST', 'ADD_TRADITION_TOTAL_COST')]."
				}
				expand = { }
			}


			button_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					text = "CANCEL_BUTTON"
					align = left
				}
				name = "decline_button"
				onclick = [AddTraditionWindow.Close]
				using = close_window_ocr
				blockoverride "dot" {
				}
			}

			button_primary_text = {
				name = "done"
				layoutpolicy_horizontal = expanding
				onclick = "[AddTraditionWindow.AddTradition]"
				onclick = "[AddTraditionWindow.Close]"
				enabled = "[AddTraditionWindow.CanAddTradition]"
				default_format = "#high"
				blockoverride "disabled" {
					visible = "[Not(AddTraditionWindow.CanAddTradition)]"
				}

				blockoverride "text" {
					text = "[SelectLocalization(AddTraditionWindow.IsReplacing, 'REPLACE_TRADITION_EXECUTE_LABEL', 'ADD_TRADITION_EXECUTE_LABEL')]"
					align = left
				}

				blockoverride "dot" {

				}

				tooltip = "[SelectLocalization(AddTraditionWindow.IsReplacing, 'REPLACE_TRADITION_EXECUTE_TOOLTIP', 'ADD_TRADITION_EXECUTE_TOOLTIP')]"
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				add_tradition_category_ocr = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'realm' )]"
				}
				add_tradition_category_ocr = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'combat' )]"
				}
				add_tradition_category_ocr = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'societal' )]"
				}

				add_tradition_category_ocr = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'ritual' )]"
				}
				add_tradition_category_ocr = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'regional' )]"
				}
				expand = { }
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					raw_text = "[Select_CString(Not(GetVariableSystem.Exists('cheap_traditions')), 'Showing available first, click to reset', 'Showing all alphabetically, click to show available first')]."
				}
				onclick = "[GetVariableSystem.Toggle('cheap_traditions')]"
			}

			vbox = {
				name = "tradition_selection"
				margin = { 0 8 }
				spacing = 6

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding


				vbox_traditions_list_ocr = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'realm' )]"
				}

				vbox_traditions_list_ocr = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'combat' )]"
				}

				vbox_traditions_list_ocr = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'societal' )]"
				}

				vbox_traditions_list_ocr = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'ritual' )]"
				}

				vbox_traditions_list_ocr = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'regional' )]"
				}

			}
		}
	}

	add_tradition_window_old = {}

}

types OCR
{
	type widget_tradition_item_ocr = button_text {
		layoutpolicy_horizontal = expanding
		tooltipwidget = {
			using = culture_tradition_tooltip_clickable

			blockoverride "above_description_text" {
				text = "[AddTraditionWindow.GetPickTraditionBlockers( CultureTradition.Self )]"
			}
		}

		blockoverride "pre" {
			text_single = {
				raw_text = "Selected"
				visible = "[ObjectsEqual( AddTraditionWindow.GetSelectedTradition, CultureTradition.Self )]"
			}

			text_single = {
				raw_text = "Can't select"
				visible = "[Not(AddTraditionWindow.CanPickTradition( CultureTradition.Self ))]"
			}
		}

		blockoverride "text" {
			raw_text = "[CultureTradition.GetNameNoTooltip],"
		}

		blockoverride "extra" {

			text_single = {
				name = "cost"
				raw_text = "[AddTraditionWindow.GetTraditionCost( CultureTradition.Self )],"
				tooltip = "[AddTraditionWindow.GetTraditionCostBreakdown( CultureTradition.Self )]"
				using = tooltip_se
			}

			text_single = {
				raw_text = "not enough,"
				visible = "[Not( AddTraditionWindow.CanBuyTradition( CultureTradition.Self ) )]"
				tooltip = "[AddTraditionWindow.GetPickTraditionBlockers( CultureTradition.Self )]"
			}

			text_single = {
				name = "time"
				margin_left = -3
				raw_text = "[SelectLocalization(AddTraditionWindow.IsReplacing, Culture.GetTotalReformTimeForReplacingTradition, Culture.GetTotalReformTimeForNewTradition)]"
				tooltip = "[SelectLocalization(AddTraditionWindow.IsReplacing, 'ESTABLISHMENT_TIME_TOOLTIP_REPLACING_TRADITION', 'ESTABLISHMENT_TIME_TOOLTIP_NEW_TRADITION')]"
				using = tooltip_se
			}
		}
		blockoverride "dot" {

		}
		enabled = "[AddTraditionWindow.CanPickTradition( CultureTradition.Self )]"
		onclick = "[AddTraditionWindow.SetSelectedTradition( CultureTradition.Self )]"
	}

	type add_tradition_category_ocr = button_text {
		# layoutpolicy_horizontal = expanding
		onclick = "[AddTraditionWindow.SetTraditionCategory( TraditionGrouping.GetCategory )]"
		down = "[AddTraditionWindow.HasTraditionCategory( TraditionGrouping.GetCategory )]"

		blockoverride "text" {
			text = "[TraditionGrouping.GetGroupingName]"
			align = left
		}

		blockoverride "extra" {
			text_single = {
				raw_text = "Selected"
				visible = "[AddTraditionWindow.HasTraditionCategory( TraditionGrouping.GetCategory )]"
			}

			text_single = {
				text = "TRADITION_CATEGORY_COUNT"
			}

			text_single = {
				raw_text = ","
			}

		}
	}

	# Needs a wrapping vbox as otherwise the blockoverride for the scrollbox_content doesn't work
	type vbox_traditions_list_ocr = vbox {
		visible = "[AddTraditionWindow.HasTraditionCategory( TraditionGrouping.GetCategory )]"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		using = Animation_Tab_Switch

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_content"
			{
				vbox = {
					visible = "[Not(GetVariableSystem.Exists('cheap_traditions'))]"
					layoutpolicy_horizontal = expanding
					datamodel = "[TraditionGrouping.GetPossibleTraditions]"

					item = {
						widget_tradition_item_ocr = {
							visible = "[AddTraditionWindow.CanBuyTradition( CultureTradition.Self )]"
						}
					}
				}

				vbox = {
					visible = "[Not(GetVariableSystem.Exists('cheap_traditions'))]"
					layoutpolicy_horizontal = expanding
					datamodel = "[TraditionGrouping.GetPossibleTraditions]"

					item = {
						widget_tradition_item_ocr = {
							visible = "[Not(AddTraditionWindow.CanBuyTradition( CultureTradition.Self ))]"
						}
					}
				}

				vbox = {
					visible = "[GetVariableSystem.Exists('cheap_traditions')]"
					layoutpolicy_horizontal = expanding
					datamodel = "[TraditionGrouping.GetPossibleTraditions]"

					item = {
						widget_tradition_item_ocr = {
						}
					}
				}
			}
		}
	}
}

types CultureAddTraditionTypes
{
	type widget_tradition_item = widget {
		size = {  240 180  }

		tooltipwidget = {
			using = culture_tradition_tooltip_clickable

			blockoverride "above_description_text" {
				text = "[AddTraditionWindow.GetPickTraditionBlockers( CultureTradition.Self )]"
			}
		}

		vbox = {
			button_standard = {
				size = {  220 120  }
				onclick = "[AddTraditionWindow.SetSelectedTradition( CultureTradition.Self )]"
				enabled = "[AddTraditionWindow.CanPickTradition( CultureTradition.Self )]"

				widget_tradition_icon = {
					block "icon_size" {
						size = { 220 120 }
					}
				}

				icon = {
					name = "selection_glow"
					visible = "[ObjectsEqual( AddTraditionWindow.GetSelectedTradition, CultureTradition.Self )]"
					parentanchor = center
					size = { 100% 100% }

					state = {
						trigger_on_create = yes

						name = max_glow
						next = min_glow
						duration = 1
						using = Animation_Curve_Default
						alpha = 0.5
					}

					state = {
						name = min_glow
						next = max_glow
						duration = 1.6
						using = Animation_Curve_Default
						alpha = 0.3
					}

					background = {
						texture = "gfx/interface/component_effects/innovation_glow.dds"
						margin = { 14 12 }
						spriteType = Corneredstretched
						spriteborder = { 30 30 }
						tintcolor = { 1 0.8 0.6 1 }
					}
				}
			}

			hbox = {
				margin_top = 4

				text_label_center = {
					name = "name"
					text = "[CultureTradition.GetNameNoTooltip]"
					maximumsize = { 180 44 }
					multiline = yes
					align = center|nobaseline

					using = Font_Size_Medium
				}

				widget = {
					size = { 0 30 }
					allow_outside = yes

					warning_icon = {
						visible = "[Not( AddTraditionWindow.CanPickTradition( CultureTradition.Self ) )]"
						position = { 6 -2 }
						widgetanchor = left
						size = { 30 30 }
						tooltip = "[AddTraditionWindow.GetPickTraditionBlockers( CultureTradition.Self )]"
					}
				}
			}

			hbox = {
				expand = {}
				spacing = 20
				text_label_center = {
					name = "cost"
					text = "[AddTraditionWindow.GetTraditionCost( CultureTradition.Self )]"
					maximumsize = { 130 44 }
					margin_left = 20
					multiline = yes
					align = center

					using = Font_Size_Small
					tooltip = "[AddTraditionWindow.GetTraditionCostBreakdown( CultureTradition.Self )]"
					using = tooltip_se

					background = {
						visible = "[Not( AddTraditionWindow.CanBuyTradition(CultureTradition.Self) )]"
						margin_right = 15
						margin_left = -13
						margin_bottom = -1
						using = Status_Bad
					}
				}

				text_label_left = {
					name = "time"
					text = "[SelectLocalization(AddTraditionWindow.IsReplacing, Culture.GetTotalReformTimeForReplacingTradition, Culture.GetTotalReformTimeForNewTradition)]"
					maximumsize = { 130 44 }
					multiline = yes
					align = center

					using = Font_Size_Small
					tooltip = "[SelectLocalization(AddTraditionWindow.IsReplacing, 'ESTABLISHMENT_TIME_TOOLTIP_REPLACING_TRADITION', 'ESTABLISHMENT_TIME_TOOLTIP_NEW_TRADITION')]"
					using = tooltip_se
				}
			}
		}
	}

	type add_tradition_category = button_tab {
		layoutpolicy_horizontal = expanding
		onclick = "[AddTraditionWindow.SetTraditionCategory( TraditionGrouping.GetCategory )]"
		down = "[AddTraditionWindow.HasTraditionCategory( TraditionGrouping.GetCategory )]"

		hbox = {
			text_single = {
				layoutpolicy_horizontal = expanding
				align = center
				text = "[TraditionGrouping.GetGroupingName]"
				default_format = "#low"
			}

			text_single = {
				align = center
				text = "TRADITION_CATEGORY_COUNT"
				default_format = "#low"
				margin_right = 15
				min_width = 30
			}
		}
	}

	# Needs a wrapping vbox as otherwise the blockoverride for the scrollbox_content doesn't work
	type vbox_traditions_list = vbox {
		visible = "[AddTraditionWindow.HasTraditionCategory( TraditionGrouping.GetCategory )]"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		using = Animation_Tab_Switch

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_content"
			{
				fixedgridbox = {
					datamodel = "[TraditionGrouping.GetPossibleTraditions]"
					flipdirection = yes
					addcolumn = 240
					addrow = 200
					datamodel_wrap = 2

					item = {
						widget_tradition_item = {
						}
					}
				}
			}
		}
	}
}
