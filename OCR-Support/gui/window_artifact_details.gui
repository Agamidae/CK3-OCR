window = {
	name = "artifact_details_view"
	size = { 100% 100% }
	layer = middle

	# using = Window_Movable

	datacontext = "[GetVariableSystem]"
	datacontext = "[ArtifactDetailsView.GetArtifact]"

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		on_start = "[GetVariableSystem.Set( 'details_right_side_tab', 'claims' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		on_finish = "[Clear('hide_event')]"
	}

	state = {
		name = tabs
		trigger_when = "[Not(GetVariableSystem.Exists('artifact_tabs'))]"
		on_start = "[GetVariableSystem.Set('artifact_tabs', 'desc')]"
	}

	window_ocr = {
		blockoverride "show_window" {

		}
		blockoverride "ocr_header" {
			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "ARTIFACT_DETAILS_TITLE"
					using = Font_Size_Medium
				}

				blockoverride "button_close"
				{
					onclick = "[ArtifactDetailsView.Close]"
				}
			}
		}
		blockoverride "ocr_content" {
			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				# left vbox is the artifact details
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[GetVariableSystem.HasValue('artifact_tabs', 'desc')]"

					hbox = {
						layoutpolicy_horizontal = expanding

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							vbox = {
								name = "text"
								layoutpolicy_horizontal = expanding

								flowcontainer = {
									layoutpolicy_horizontal = expanding
									ignoreinvisible = yes

									text_single = {
										text = "[Artifact.GetNameNoTooltip]"
									}

									text_single = {
										raw_text = "[AddTextIf(StringIsEmpty(Artifact.GetNameNoTooltip), 'Unnamed')]"
									}
									text_single = {
										raw_text = ", [Artifact.GetRarityAndSlotType]."
									}
								}

								expand = { }
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								shortcut = map_mode_1
								blockoverride "text" {
									raw_text = "Rename artifact, E."
								}
								visible = "[Artifact.GetOwner.IsLocalPlayer]"
								onclick = "[Artifact.OpenRenameWindow]"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "View [GetDataModelSize(Artifact.GetKills)] kills."
								}
								visible = "[DataModelHasItems( Artifact.GetKills )]"
								onclick = "[ToggleGameViewData( 'artifact_kill_list', Artifact.GetID  )]"
							}

							expand = {}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						text_multi = {
							layoutpolicy_horizontal = expanding
							text = "[Artifact.GetModifierEffects]"
							max_width = 1900
							autoresize = yes
						}

						text_multi = {
							visible = "[Not( Artifact.CanBenefitPlayer )]"
							text = "ARTIFACT_FALLBACK_EFFECT"
							max_width = 1900
							autoresize = yes
							layoutpolicy_horizontal = expanding
						}

					}

					vbox = {
						visible = "[And( Not( Artifact.GetOwner.IsLocalPlayer ), Artifact.HasClaim( GetPlayer ) )]"
						layoutpolicy_horizontal = expanding
						spacing = 2

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "You have a claim."
							align = left
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "disabled" {
								visible = "[Not(Artifact.GetOwner.IsPlayerInteractionValid('start_stealing_back_artifact'))]"
							}
							blockoverride "text" {
								raw_text = "Steal artifact."
							}
							enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('start_stealing_back_artifact')]"
							onclick = "[Artifact.GetOwner.OpenPlayerInteraction('start_stealing_back_artifact')]"
							tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip( 'start_stealing_back_artifact' )]"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "disabled" {
								visible = "[Not(Artifact.GetOwner.IsPlayerInteractionValid('declare_war_interaction'))]"
							}
							blockoverride "text" {
								raw_text = "Declare war."
							}
							enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('declare_war_interaction')]"
							onclick = "[Artifact.GetOwner.OpenDeclareWarViewWithArtifactCB]"
							tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('declare_war_interaction')]"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "disabled" {
								visible = "[Not(Artifact.GetOwner.IsPlayerInteractionValid('challenge_for_artifact_interaction'))]"
							}
							blockoverride "text" {
								raw_text = "Challenge in duel."
							}

							enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('challenge_for_artifact_interaction')]"
							onclick = "[Artifact.GetOwner.OpenPlayerInteraction('challenge_for_artifact_interaction')]"
							tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('challenge_for_artifact_interaction')]"
						}


						expand = { }
					}
				}

				vbox = {
					visible = "[GetVariableSystem.HasValue('artifact_tabs', 'desc')]"
					layoutpolicy_horizontal = expanding
					hbox = {
						layoutpolicy_horizontal = expanding
						text_multi = {
							layoutpolicy_horizontal = expanding
							name = "artifact_description"
							text = "[Artifact.GetDesc]"
							max_width = 610
							autoresize = yes
						}
						expand = { }
					}

					flowcontainer = {
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes
						visible = "[Artifact.IsValid]"
						tooltip = "[Artifact.GetDurabilityTooltip]"

						button_text = {
							blockoverride "disabled" {
								visible = "[Not(Artifact.CanReforgeOrRepair( Artifact.GetOwner.Self ))]"
								align = left
							}
							blockoverride "text" {
								raw_text = "Repair"
								align = left
							}
							blockoverride "extra" {
								text_single = {
									raw_text = ", hotkey Tab"
									visible = "[Artifact.CanReforgeOrRepair( Artifact.GetOwner.Self )]"
								}
								dot = { }
								margin_right = 3
							}
							visible = "[And(Artifact.GetOwner.IsLocalPlayer, GreaterThan_CFixedPoint(Artifact.GetMaxDurability, Artifact.GetDurability))]"

							onclick = "[ToggleGameViewData( 'reforge_artifact', Artifact.GetID )]"
							onclick = "[LocalPlayerNewArtifacts.RemoveNewArtifact( Artifact.Self )]"
							enabled = "[Artifact.CanReforgeOrRepair( Artifact.GetOwner.Self )]"
							tooltip = "[Artifact.GetReforgeOrRepairTooltip( Artifact.GetOwner.Self )]"
							shortcut = action_list
						}

						text_single = {
							raw_text = "Does not decay."
							visible = "[Not(Artifact.ShouldDecay)]"
						}


						text_single = {
							visible = "[And( Artifact.ShouldDecay, GreaterThanOrEqualTo_int32( Artifact.GetYearsUntilDecay, '(int32)0' ) )]"
							text = "ARTIFACT_YEARS_UNTIL_DECAY"
						}

						space = { }

						text_single = {
							visible = "[And( Artifact.ShouldDecay, GreaterThanOrEqualTo_int32( Artifact.GetYearsUntilDecay, '(int32)0' ) )]"
							raw_text = "of durability left."
						}

						text_single = {
							raw_text = ""
						}

						# in case a unique gets damaged
						text_single = {
							raw_text = ", durability [Artifact.GetDurability]"
							visible = "[And(GreaterThan_CFixedPoint(Artifact.GetMaxDurability, Artifact.GetDurability), Not(Artifact.ShouldDecay))]"
						}

						text_single = {
							raw_text = " Maximum is [Artifact.GetMaxDurability]."
							visible = "[GreaterThan_CFixedPoint(Artifact.GetMaxDurability, Artifact.GetDurability)]"
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "INVENTORY_DESTROY_ARTIFACT"
						}
						blockoverride "extra" {
							text_single = {
								margin_left = -3
								raw_text = ", hotkey X"
								visible = "[Artifact.GetOwner.IsPlayerInteractionWithTargetArtifactValid( 'destroy_artifact_interaction', Artifact.Self )]"
							}
						}
						blockoverride "disabled" {
							visible = "[Not(Artifact.GetOwner.IsPlayerInteractionWithTargetArtifactValid( 'destroy_artifact_interaction', Artifact.Self ))]"
						}
						blockoverride "dot" {
						}
						visible = "[Artifact.GetOwner.IsPlayerInteractionShown( 'destroy_artifact_interaction' )]"
						enabled = "[Artifact.GetOwner.IsPlayerInteractionWithTargetArtifactValid( 'destroy_artifact_interaction', Artifact.Self )]"
						onclick = "[Artifact.GetOwner.OpenPlayerInteractionWithTargetArtifact( 'destroy_artifact_interaction', Artifact.Self )]"
						tooltip = "[Artifact.GetOwner.GetPlayerInteractionWithTargetArtifactTooltip( 'destroy_artifact_interaction', Artifact.Self )]"

						shortcut = increase_speed_2
					}

					char_name = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(Artifact.GetOwner.IsLocalPlayer)]"
						datacontext = "[Artifact.GetOwner]"
						blockoverride "pre" {
							text_single = {
								raw_text = "Owner:"
							}
						}
					}
					margin_bottom = 5
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set('artifact_tabs', 'desc')]"
						shortcut = speed_1
						blockoverride "text" {
							raw_text = "Details, tab 1"
						}
						blockoverride "extra" {
							text_single = {
								raw_text = ", selected"
								align = left
								visible = "[GetVariableSystem.HasValue('artifact_tabs', 'desc')]"
							}
							dot = { }
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set('artifact_tabs', 'claims')]"
						shortcut = speed_2
						blockoverride "text" {
							raw_text = "[GetDataModelSize(ArtifactDetailsView.GetClaimants)] Claims, tab 2"
						}
						blockoverride "extra" {
							text_single = {
								raw_text = ", selected"
								align = left
								visible = "[GetVariableSystem.HasValue('artifact_tabs', 'claims')]"
							}
							dot = { }
						}
					}
					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set('artifact_tabs', 'history')]"
						shortcut = speed_3
						blockoverride "text" {
							raw_text = "[GetDataModelSize(Artifact.GetHistory.GetEntries)] history events, tab 3"
						}
						blockoverride "extra" {
							text_single = {
								raw_text = ", selected"
								align = left
								visible = "[GetVariableSystem.HasValue('artifact_tabs', 'history')]"
							}
							dot = { }
						}
					}
					expand = { }
				}

				vbox = {
					visible = "[GetVariableSystem.HasValue('artifact_tabs', 'history')]"
					layoutpolicy_horizontal = expanding
					name = "history_list"
					datamodel = "[Artifact.GetHistory.GetEntries]"

					item = {
						button_text = {
							layoutpolicy_horizontal = expanding
							datacontext = "[HistoryEntry.GetRecipient]"
							using = char_click
							blockoverride "text" {
								raw_text = "[HistoryEntry.GetDescription], [AddTextIf(Not(EqualTo_string(HistoryEntry.GetTitle, 'Unknown Creation')), HistoryEntry.GetTitle)]"
								max_width = 700
								multiline = yes
							}
						}

						# hbox = {
						# 	layoutpolicy_horizontal = expanding
						#
						# 	text_single = {
						# 		raw_text = "[HistoryEntry.GetTitle],"
						# 		align = left
						# 	}
						#
						# 	space = { }
						#
						# 	text_multi = {
						# 		raw_text = "[HistoryEntry.GetDescription]."
						# 		max_width = 1900
						# 		autoresize = yes
						# 	}
						#
						# 	expand = { }
						# }
					}
				}

				vbox = {
					visible = "[GetVariableSystem.HasValue('artifact_tabs', 'claims')]"
					name = "claims_list"
					datamodel = "[ArtifactDetailsView.GetClaimants]"
					layoutpolicy_horizontal = expanding

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[IsDataModelEmpty(ArtifactDetailsView.GetClaimants)]"
						text = "DETAILS_TAB_NO_CLAIMANTS"
					}

					item = {
						vbox = {
							layoutpolicy_horizontal = expanding

							hbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									raw_text = "[IndexNumber],"
								}

								char_name = {
									visible = "[ClaimantEntry.IsCharacter]"
									datacontext = "[ClaimantEntry.GetCharacter]"
								}

								button_text = {
									visible = "[ClaimantEntry.IsHouse]"
									onclick = "[OpenGameViewData('dynasty_house_view', Character.GetHouse.GetID)]"
									blockoverride "text" {
										alwaystransparent = yes
										raw_text = "[Localize('house')] [ClaimantEntry.GetHouse.GetNameNoTooltip],"
									}
									blockoverride "extra" {
										text_single = {
											raw_text = "CLAIMANT_ENTRY_HOUSE_HEAD"
										}
									}
								}

								expand = {}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[And( ClaimantEntry.IsCharacter, Not( ClaimantEntry.CanDeclareWarForClaim ) )]"

								text_multi_wide = {
									raw_text = "CLAIMANT_NOT_A_THREAT"
								}

								expand = {}
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								datacontext = "[ClaimantEntry.GetArmyComposition]"
								visible = "[And(GreaterThan_int32(ArmyComposition.GetCurrentNumberOfSoldiers, '(int32)0' ), ClaimantEntry.CanDeclareWarForClaim)]"
								raw_text = "Has [ArmyComposition.GetSoldierCountString] soldiers."
								tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
							}
						}
					}
				}

				expand = {}
			}
		}
	}
}
