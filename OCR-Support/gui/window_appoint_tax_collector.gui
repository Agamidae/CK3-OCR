window = {
	name = "window_appoint_tax_collector"
	using = base_ocr_window
	layer = middle
	allow_outside = yes

	window_ocr = {
		blockoverride "ocr_header" {
			header_text = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "[SelectLocalization( AppointTaxCollectorWindow.HasTaxCollector, 'TAX_COLLECTOR_REPLACE_HEADER', 'TAX_COLLECTOR_APPOINT_WINDOW_HEADER' )]"
				}

				blockoverride "button_close"
				{
					onclick = "[AppointTaxCollectorWindow.Close]"
				}
			}

			vbox = {
				name = "selected_potential_tax_collector"
				layoutpolicy_horizontal = expanding

				visible = "[AppointTaxCollectorWindow.HasSelectedCharacter]"
				datacontext = "[AppointTaxCollectorWindow.GetSelectedCharacter]"
				datacontext = "[AppointTaxCollectorWindow.GetTaxSlot]"
				datacontext = "[TaxSlot.GetTaxSlotType]"

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 3
					char_name = {
						blockoverride "pre" {
							text_single = {
								raw_text = "Hiring"
							}
						}
					}

					tax_collector_aptitude_text = {
					}

					dot_l = {}

					expand = {}
				}
				hbox = {
					layoutpolicy_horizontal = expanding

					spacing = 3

					text_single = {
						raw_text = "Will result in:"
					}

					text_single = {
						raw_text = "Taxes:"
					}

					text_single = {
						datacontext = "[AppointTaxCollectorWindow.GetTaxChange]"
						datacontext = "[TaxCollectorValueChange.GetBreakdown]"

						text = "TAX_COLLECTOR_VALUE_CHANGE"

						tooltipwidget = {
							tax_contribution_tooltip = {
								blockoverride "descriptive_text"
								{
									text = "TAX_COLLECTOR_NEW_HIRE_TAX_DESC"
								}
							}
						}
						using = tooltip_ws
					}

					comma = {}

					text_single = {
						raw_text = "Levies:"
					}

					text_single = {
						datacontext = "[AppointTaxCollectorWindow.GetLevyChange]"
						datacontext = "[TaxCollectorValueChange.GetBreakdown]"

						text = "TAX_COLLECTOR_VALUE_CHANGE_INT"

						tooltipwidget = {
							tax_contribution_tooltip = {
								blockoverride "descriptive_text"
								{
									text = "TAX_COLLECTOR_NEW_HIRE_LEVIES_DESC"
								}

								blockoverride "contribution_icon"
								{
									texture = "gfx/interface/icons/icon_soldier.dds"
								}
							}
						}
						using = tooltip_ws
					}

					comma = {}

					text_single = {
						raw_text = "taxpayer limit:"
					}

					text_single = {
						datacontext = "[AppointTaxCollectorWindow.GetTaxpayerLimitChange]"
						datacontext = "[TaxCollectorValueChange.GetBreakdown]"

						text = "TAX_COLLECTOR_VALUE_CHANGE_INT"

						tooltipwidget = {
							widget_value_breakdown_tooltip = {}
						}
						using = tooltip_ws
					}

					dot_l = {}

					expand = {}
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[And( AppointTaxCollectorWindow.HasTaxCollector,  AppointTaxCollectorWindow.HasSelectedCharacter)]"
						raw_text = "APPOINT_TAX_COLLECTOR_REPLACE_CURRENT_TT"
					}
				}

				button_primary_text = {
					layoutpolicy_horizontal = expanding
					visible = "[AppointTaxCollectorWindow.HasSelectedCharacter]"
					onclick = "[AppointTaxCollectorWindow.AppointCharacter]"
					blockoverride "text" {
						text = "TAX_COLLECTOR_APPOINT_WINDOW_BUTTON"
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					datacontext = "[AppointTaxCollectorWindow.GetPotentialTaxCollectors]"
					datamodel = "[CharacterSelectionList.GetList]"

					item = {
						button_text = {
							layoutpolicy_horizontal = expanding
							shortcut = go_back
							visible = "[AppointTaxCollectorWindow.IsCharacterSelected(CharacterListItem.Self)]"
							onclick = "[CharacterListItem.OnClick('character')]"

							blockoverride "text" {
								raw_text = "Cancel, B."
							}
						}
					}
				}
			}
		}

		blockoverride "ocr_content" {
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				datacontext = "[AppointTaxCollectorWindow.GetTaxSlot]"

				vbox = {
					layoutpolicy_horizontal = expanding
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						vbox = {
							name = "appoint_tax_collector"
							layoutpolicy_horizontal = expanding

							visible = "[Not( AppointTaxCollectorWindow.HasTaxCollector )]"

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								text_single = {
									raw_text = "[TaxSlot.GetName],"
								}

								text_single = {
									text = "APPOINT_TAX_COLLECTOR_UNTAXED_TAX_SLOT"
								}

								text_single = {
									text = "TAX_COLLECTOR_TAXED_VASSALS_COUNT"
								}
								dot_l = {}
								expand = {}
							}


							hbox = {
								layoutpolicy_horizontal = expanding
								text_multi_wide = {
									layoutpolicy_horizontal = expanding

									text = "APPOINT_TAX_COLLECTOR_WINDOW_DESC"
								}
							}
						}

						vbox = {
							name = "replace_tax_collector"
							layoutpolicy_horizontal = expanding

							visible = "[AppointTaxCollectorWindow.HasTaxCollector]"

							vbox = {
								layoutpolicy_horizontal = expanding

								datacontext = "[AppointTaxCollectorWindow.GetTaxCollector]"

								vbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									vbox = {
										layoutpolicy_horizontal = expanding

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 3
											text_single = {
												raw_text = "Replacing"
											}

											text_single = {
												raw_text = "[Character.GetUINameNoTooltip],"
											}

											tax_collector_aptitude_text = {
												datacontext = "[TaxSlot.GetTaxSlotType]"
											}
											comma = {}

											text_single = {
												name = "character_relation"

												visible = "[Character.HasRelationTo( GetPlayer )]"

												text = "[Character.GetRelationToString( GetPlayer )]"
												tooltip = "EXTENDED_RELATIONS_TOOLTIP"
											}

											dot_l = {}

											expand = {}
										}
									}
								}
							}
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					vbox_character_list = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						datacontext = "[AppointTaxCollectorWindow.GetPotentialTaxCollectors]"

						blockoverride "sort_buttons"
						{
							hbox_list_sort_buttons = {
								layoutpolicy_horizontal = expanding
								blockoverride "sort_dropdown" {
									dropdown_sort_characterlist = {
										name = "eligible_tax_collectors_sort_options"
									}
								}
							}
						}

						blockoverride "container_implementation" {
							vbox = {
								name = "characters_grid"
								datamodel = "[CharacterSelectionList.GetList]"
								visible = "[Not(CharacterSelectionList.IsBuildingList)]"
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes

								item = {
									widget_character_list_item_finder_ocr = {
										enabled = "[CharacterListItem.IsSelectable]"
										blockoverride "show_opinion" {
											visible = no
										}
										blockoverride "pre_name" {
											text_single = {
												visible = "[Not(CharacterListItem.IsSelectable)]"
												raw_text = "Can't pick,"
											}
											text_single = {
												visible = "[AppointTaxCollectorWindow.IsCharacterSelected(CharacterListItem.Self)]"
												raw_text = "Selected"
											}
											tax_collector_aptitude_text = {
												alwaystransparent = yes
												using = Font_Size_Medium
											}
											comma = {}
											text_single = {
												raw_text = "[Character.GetOpinionOf(GetPlayer)|=] opinion,"
												tooltip =  "[Character.GetOpinionBreakdownText(GetPlayer)|=]"
											}
										}
										layoutpolicy_horizontal = expanding
										datacontext = "[CharacterListItem.GetCharacter]"

										visible = "[Not( AppointTaxCollectorWindow.IsCurrentTaxCollector( Character.Self ) )]"
									}
								}
							}
						}
					}
				}
			}
		}
	}

	window_appoint_tax_collector_old = {}

	window_character_filter = {
		name = "appoint_tax_collector_filter_window"
		datacontext = "[AppointTaxCollectorWindow.GetPotentialTaxCollectors]"

		blockoverride "editbox_properties"
		{
			name = "eligible_tax_collectors_text_filter"
			ontextedited = "[CharacterSelectionList.SetPattern]"
			oneditingfinished = "[CharacterSelectionList.FinishEdit]"
		}

		blockoverride "addition_filter" {
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('dynasty_house_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
			}

		}
	}
}

types OCR
{
	type tax_collector_candidate_list_widget_ocr = widget {

		block "divider" {
			divider = {
			}
		}

		block "widget" {}

		hbox = {

			portrait_head_small = {}

			button_standard = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				onclick = "[CharacterListItem.OnClick('character')]"
				enabled = "[CharacterListItem.IsSelectable]"

				spriteType = Corneredtiled
				spriteborder = { 20 20 }

				down = "[AppointTaxCollectorWindow.IsCharacterSelected(CharacterListItem.Self)]"

				block "button" {}

				character_list_arrow = {
					name = "character_list_arrow"
				}

				# Selected icon
				icon = {
					visible = "[AppointTaxCollectorWindow.IsCharacterSelected(CharacterListItem.Self)]"

					texture = "gfx/interface/buttons/button_entry_characterlist_arrow.dds"
				}

				block "overlay" {
					using = default_character_list_overlay
				}

				block "button_content"
				{
					hbox = {
						# Name, Relation, Age and Aptitude
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							# Name, Relation, Age
							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								# Name
								text_single = {
									layoutpolicy_horizontal = expanding
									using = Font_Size_Medium

									alwaystransparent = yes

									text = "[Character.GetUINameNoTooltip]"
								}

								# Relation and Age
								hbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									using = character_age_or_death_text
									blockoverride "list_layout" {}

									block "character_relation"
									{
										text_single = {
											name = "character_relation"
											layoutpolicy_horizontal = expanding
											raw_text = "|  [Character.GetRelationToString( GetPlayer )]"

											visible = "[Character.HasRelationTo( GetPlayer )]"
											alwaystransparent = yes
										}

										expand = {
											visible = "[Not(Character.HasRelationTo( GetPlayer ))]"
										}
									}
								}
							}

							# Aptitude
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								tax_collector_aptitude_text = {}

								expand = {}
							}

							expand = {}
						}

						expand = {}

						# Skills and Traits
						vbox = {

							datacontext = "[CharacterListItem.GetCharacter]"
							layoutpolicy_vertical = expanding
							# Skills
							hbox = {
								name = "skills_grid"
								layoutpolicy_horizontal = expanding

								expand = {}

								datamodel = "[CharacterListItem.GetSkillItems]"
								item = {
									widget = {
										text_single = {
											name = "value"

											text = "[SkillItem.GetValue]"
											tooltip = "[SkillItem.GetName]"
										}
									}
								}
							}

							expand = {}

							# Traits
							fixedgridbox = {
								name = "traits_grid"
								datamodel = "[CharacterListItem.GetTraits]"
								flipdirection = yes
								addcolumn = 30
								addrow = 30
								datamodel_wrap = 7
								maxverticalslots = 2

								item = {
									container = {
										visible = "[Trait.IsValid]"

										icon_trait = {
											blockoverride "icon_size"
											{

											}

											blockoverride "tooltip_placement"
											{
												using = tooltip_se
											}

											blockoverride "glow_radius"
											{
												glow_radius = 3
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


types AppointTaxCollectorTypes
{
	type tax_collector_aptitude_text = text_single
	{
		datacontext = "[TaxSlot.GetTaxSlotType]"
		datacontext = "[TaxSlotType.GetTaxCollectorAptitudeTooltipFor( Character.Self )]"

		text = APPOINT_TAX_COLLECTOR_VIEW_APTITUDE

		tooltipwidget = {
			widget_value_breakdown_tooltip = {}
		}
	}

	type tax_collector_candidate_list_widget = widget {

		size = { 10 110 }

		block "divider" {
			divider = {
				parentanchor = bottom|hcenter
				size = { 100% 3 }
			}
		}

		block "widget" {}

		hbox = {
			margin = { 0 5 }
			spacing = 15

			portrait_head_small = {}

			button_standard = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				onclick = "[CharacterListItem.OnClick('character')]"
				enabled = "[CharacterListItem.IsSelectable]"

				spriteType = Corneredtiled
				spriteborder = { 20 20 }

				down = "[AppointTaxCollectorWindow.IsCharacterSelected(CharacterListItem.Self)]"

				background = {
					texture = "gfx/interface/buttons/button_entry_characterlist.dds"
					spriteType = Corneredtiled
					margin = { 10 0 }
					using = Color_Orange
					alpha = 0
					using = Mask_Rough_Edges
				}

				block "button" {}

				character_list_arrow = {
					name = "character_list_arrow"
				}

				# Selected icon
				icon = {
					visible = "[AppointTaxCollectorWindow.IsCharacterSelected(CharacterListItem.Self)]"
					parentanchor = left|vcenter
					position = { -20 0 }
					size = { 20 20 }
					texture = "gfx/interface/buttons/button_entry_characterlist_arrow.dds"
				}

				block "overlay" {
					using = default_character_list_overlay
				}

				block "button_content"
				{
					hbox = {
						# Name, Relation, Age and Aptitude
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							# Name, Relation, Age
							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_left = 10

								# Name
								text_single = {
									layoutpolicy_horizontal = expanding
									using = Font_Size_Medium
									autoresize = no
									alwaystransparent = yes

									text = "[Character.GetUINameNoTooltip]"
								}

								# Relation and Age
								hbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									using = character_age_or_death_text
									blockoverride "list_layout" {}

									block "character_relation"
									{
										text_single = {
											name = "character_relation"
											layoutpolicy_horizontal = expanding
											raw_text = "|  [Character.GetRelationToString( GetPlayer )]"
											default_format = "#low"
											autoresize = no
											align = nobaseline
											visible = "[Character.HasRelationTo( GetPlayer )]"
											alwaystransparent = yes
										}

										expand = {
											visible = "[Not(Character.HasRelationTo( GetPlayer ))]"
										}
									}
								}
							}

							# Aptitude
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_left = 10

								tax_collector_aptitude_text = {}

								expand = {}
							}

							expand = {}
						}

						expand = {}

						# Skills and Traits
						vbox = {
							minimumsize = { 200 0 }
							datacontext = "[CharacterListItem.GetCharacter]"
							layoutpolicy_vertical = expanding
							margin_top = 5
							margin_bottom = 5
							margin_right = 5

							# Skills
							hbox = {
								name = "skills_grid"
								layoutpolicy_horizontal = expanding

								expand = {}

								datamodel = "[CharacterListItem.GetSkillItems]"
								margin_right = 5

								item = {
									widget = {
										size = { 32 25 }

										text_single = {
											name = "value"
											parentanchor = center
											margin_bottom = 4
											align = center
											text = "[SkillItem.GetValue]"
											tooltip = "[SkillItem.GetName]"
										}

										background = {
											name = "skill_icon_bg"
											texture = "gfx/interface/window_character/character_view_skills_bg.dds"
											framesize = { 70 26 }
											margin = { 5 0 }

											block "bg"
											{
												frame = "[SkillItem.GetFrame]"
											}
										}
									}
								}
							}

							expand = {}

							# Traits
							fixedgridbox = {
								name = "traits_grid"
								datamodel = "[CharacterListItem.GetTraits]"
								flipdirection = yes
								addcolumn = 30
								addrow = 30
								datamodel_wrap = 7
								maxverticalslots = 2

								item = {
									container = {
										visible = "[Trait.IsValid]"

										icon_trait = {
											blockoverride "icon_size"
											{
												size = { 30 30 }
											}

											blockoverride "tooltip_placement"
											{
												using = tooltip_se
											}

											blockoverride "glow_radius"
											{
												glow_radius = 3
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
