window = {
	name = "potential_faction_member_window"
	movable = no
	resizable = no
	layer = middle
	allow_outside = yes

	using = Window_Background_Subwindow
	using = Window_Size_CharacterList

	state = {
		name = _show
		using = Animation_FadeIn_Quick

	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
	}

	vbox = {
		using = ocr_margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				raw_text = "[Localize('POTENTIAL_FACTION_MEMBERS_HEADER')]."
			}

			blockoverride "button_close"
			{
				onclick = "[PotentialFactionMemberWindow.Close]"
			}
		}

		vbox_character_list = {
			datacontext = "[PotentialFactionMemberWindow.GetListItems]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			blockoverride "skill_sort_buttons" {}
			blockoverride "item_size" {
				size = { 480 70 }
				layoutpolicy_horizontal = expanding
			}

			blockoverride "button_content"
			{
				vbox = {
					margin = { 10 1 }

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						raw_text = "[Character.GetUINameNoTooltip]."
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						opinion_of_liege_ocr = {
							blockoverride "opinion_text"
							{
								text = "[Character.GetOpinionOf( Character.GetLiege  )|=]"

							}

							blockoverride "ott_heading_text"
							{
								text = "[Character.GetOpinionHeadingText( Character.GetLiege  )]"
							}

							blockoverride "ott_opinion_value_text"
							{
								text = "[Character.GetOpinionOf( Character.GetLiege  )|=]"
							}

							blockoverride "ott_opinion_breakdown_text"
							{
								text = "[Character.GetOpinionBreakdownText( Character.GetLiege  )]"
							}
						}

						text_single = {
							visible = "[Not(Character.GetLiege.IsLocalPlayer)]"
							raw_text = "opinion of liege."
						}

						text_single = {
							raw_text = "[Character.GetOpinionOf( GetPlayer )] of you."
							tooltip = "[Character.GetOpinionBreakdownText( GetPlayer )]"
						}

						expand = {}

					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						text_single = {
							tooltip = "[CharacterListItem.GetText('military_strength_tooltip')]"
							name = "military_total_strength"
							raw_text = "[CharacterListItem.GetInt('military_strength')] soldiers."
						}

						text_single = {
							name = "status"
							raw_text = "[CharacterListItem.GetText('status')]."
						}
						expand = { }
					}
				}
			}
		}
	}

	window_character_filter = {
		datacontext = "[PotentialFactionMemberWindow.GetListItems]"
		blockoverride "addition_filter" {
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('hook_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('imprisoned_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('adult_filter')]"
			}
		}
	}
}

types OCROpnionTypes {
	type opinion_of_liege_ocr = flowcontainer {
        visible = "[And(Character.IsValid, And(Character.IsAlive, Not(Character.IsLocalPlayer)))]"
        ignoreinvisible = yes

		block "dread" {
			text_single = {
				visible = "[EqualTo_int32(Character.GetDreadEffectIconFrameFor( Character.GetLiege ), '(int32)2')]"
				raw_text = "Intimidated by liege."
				tooltip = "[Character.GetDreadEffectTooltipFor( Character.GetLiege )]"
			}
			text_single = {
				visible = "[EqualTo_int32(Character.GetDreadEffectIconFrameFor( Character.GetLiege ), '(int32)3')]"
				raw_text = "Terrified of liege."
				tooltip = "[Character.GetDreadEffectTooltipFor( Character.GetLiege )]"
			}
		}

        text_single = {
            visible = "[Character.IsValid]"
            tooltipwidget = character_opinion_tooltip
            using = tooltip_es

            block "opinion_text" {
                text = "[Character.GetOpinionOf( Character.GetLiege )|=]"
            }
        }
    }
}