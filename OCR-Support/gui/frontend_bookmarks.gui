widget = {
	name = "frontend_bookmarks"
	size = { 100% 100% }

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		on_start = "[PdxGuiTriggerAllAnimations('bookmarks_bars_appear')]"
		on_start = "[GetVariableSystem.Clear( 'show_character_info')]"
		on_finish = "[PdxGuiTriggerAllAnimations('bookmarks_buttons_shimmer')]"
		on_finish = "[SetIronmanEnabledStatus( '(bool)no' )]"
		on_finish = "[GetVariableSystem.Set('set_last_applied_ironman_mode', 'true' )]"
		start_sound = {
			soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_topbar_slide"
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
	}

	widget = {
		parentanchor = center
		size = { 100% 100% }
		scale = 1
		using = ocr
		allow_outside = yes

		state = {
			name = "bookmarks_game_start_selected_character"
			# delay = 1.45
			on_finish = "[GameSetup.OnStart]"
		}

		state = {
			name = "bookmarks_game_start_any_character"
			# delay = 1.45
			on_finish = "[GameSetup.OnCustomStart]"
		}

		widget = {
			parentanchor = center
			size = { 100% 100% }
			# scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"

			state = {
				name = "bookmark_change"
				alpha = 0.7
				next = "fadein"
			}

			state = {
				name = "fadein"
				using = Animation_FadeIn_Standard
			}

			widget = {
				name = "background_map"
				parentanchor = center
				size = { 1920 1080 }
				alpha = 0

				state = {
					name = "bookmarks_game_start"
					# delay = 0.35
					# duration = 1.1

					# bezier = { 0.8 0 1 1 }
					scale = 10
					start_sound = {
						soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
					}
				}

				state = {
					name = "bookmarks_reset"
					# duration = 0.3

					# bezier = { 0.8 0 1 1 }
					scale = 1
				}

				icon = {
					name = "bookmark_background"
					size = { 100% 100% }
					texture = "[GameSetup.GetSelectedBookmark.GetBackground]"

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_seamless_torn_edge_horizontal.dds"
						spriteType = corneredtiled
						spriteborder_top = 1080
						blend_mode = alphamultiply
					}

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_seamless_torn_edge_horizontal.dds"
						spriteType = corneredtiled
						spriteborder_top = 1080
						mirror = vertical
						blend_mode = alphamultiply
					}
				}

				icon = {
					name = "character_selection"
					visible = "[GameSetup.HasSelectedCharacter]"
					texture = "[GameSetup.GetSelectedCharacter.GetLocationImage]"
					size = { 100% 100% }

					state = {
						name = "_show"
						using = Animation_FadeIn_Quick
						next = pulse_a
					}

					state = {
						name = "pulse_a"
						alpha = 1
						duration = 1
						next = pulse_b
						using = Animation_Curve_Default
					}

					state = {
						name = "pulse_b"
						alpha = 0.7
						duration = 1
						next = pulse_a
						using = Animation_Curve_Default
					}
				}

				icon = {
					name = "character_over"
					visible = "[GameSetup.HasHoveredCharacter]"
					texture = "[GameSetup.GetHoveredCharacter.GetLocationImage]"
					size = { 100% 100% }
					alpha = 0.3

					state = {
						name = "_show"
						using = Animation_FadeIn_Quick
					}

					state = {
						name = "_hide"
						using = Animation_FadeOut_Standard
					}
				}
			}

			icon = {
				size = { 200 200 }
				parentanchor = center
				texture = "gfx/interface/colors/white.dds"
				color = { 0.85 0.8 0.75 1 }
				alpha = 0
				scale = 1

				modify_texture = {
					name = "mask"
					texture = "gfx/interface/icons/map_coa/ally_icon.dds"
					blend_mode = alphamultiply
					rotate_uv = 0
				}

				state = {
					name = "bookmarks_game_start"
					# delay = 0.35
					# duration = 1
					scale = 25

					animation = {
						bezier = { 0 1 1 1 }
						alpha = 1
					}

					animation = {
						bezier = { 0 0 1 1 }

						modify_texture = {
							name = "mask"
							rotate_uv = 180
						}
					}
				}

				state = {
					name = "bookmarks_reset"
					# duration = 0.4
					scale = 1
					on_start = "[GameSetup.ResetView]"

					animation = {
						bezier = { 0 1 1 1 }
						alpha = 0
					}

					animation = {
						bezier = { 0 0 1 1 }

						modify_texture = {
							name = "mask"
							rotate_uv = 0
						}
					}
				}
			}
		}

		widget = {
			# size = "[GetResolutionWithAspectRatio]"
			size = { 550 100% }
			# scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"
			allow_outside = yes

			### Top Bar
			####################################################################
			vbox = {
				margin = { 5 5 }
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				flowcontainer = {
					direction = vertical
					layoutpolicy_horizontal = expanding
					ignoreinvisible = yes

					### Custom Ruler
					button_text = {
						layoutpolicy_horizontal = expanding
						name = "pick_any_character_button"
						shortcut = action_list
						blockoverride "text" {
							text = "PICK_ANY_CHARACTER"
						}
						blockoverride "extra" {
							text_single = {
								visible = "[GameSetup.IsCurrentBookmarkPlayable]"
								margin_left = -3
								raw_text = ", Tab"
							}
						}
						blockoverride "disabled" {
							visible = "[Not(GameSetup.IsCurrentBookmarkPlayable)]"
						}

						enabled = "[GameSetup.IsCurrentBookmarkPlayable]"
						onclick = "[PdxGuiTriggerAllAnimations('bookmarks_game_start')]"
						onclick = "[PdxGuiTriggerAllAnimations('bookmarks_hide_selected_character')]"
						onclick = "[PdxGuiTriggerAllAnimations('bookmarks_game_start_any_character')]"

						state = {
							name = _mouse_hierarchy_enter
							on_start = "[PdxGuiTriggerAllAnimations('unknown_character_hover_enter')]"
							on_start = "[PdxGuiWidget.FindChild('banner_hover_glow').TriggerAnimation('unknown_character_hover_enter')]"
							on_start = "[PdxGuiWidget.FindChild('unknown_portrait_glow').TriggerAnimation('unknown_character_hover_enter')]"
							on_start = "[PdxGuiWidget.FindChild('button_widget').TriggerAnimation('unknown_character_hover_enter')]"
						}

						state = {
							name = _mouse_hierarchy_leave
							on_start = "[PdxGuiTriggerAllAnimations('unknown_character_hover_leave')]"
							on_start = "[PdxGuiWidget.FindChild('banner_hover_glow').TriggerAnimation('unknown_character_hover_leave')]"
							on_start = "[PdxGuiWidget.FindChild('unknown_portrait_glow').TriggerAnimation('unknown_character_hover_leave')]"
							on_start = "[PdxGuiWidget.FindChild('button_widget').TriggerAnimation('unknown_character_hover_leave')]"
						}

						state = {
							name = _mouse_release
							duration = 0.05
							using = Animation_Curve_Default
							start_sound = {
								soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
							}
						}
					}

					button_text = {
						blockoverride "text" {
							raw_text = "GAMESETUP_PLAY_TUTORIAL"
						}
						blockoverride "extra" {
							text_single = {
								margin_left = -3
								raw_text = ", T"
							}
						}
						shortcut = map_mode_2
						onclick = "[GameSetup.OnShowTutorialPrompt]"
						name = "play_tutorial"
						blockoverride "dot" {

						}
					}

					flowcontainer = {
				    ignoreinvisible = yes

						text_single = {
							raw_text = "Start date is "
						}

						flowcontainer = {
							datamodel = "[GameSetup.AccessBookmarkGroups]"
							ignoreinvisible = yes

							item = {
								widget_bookmark_group_button_ocr = {
									visible = "[GameSetup.IsBookmarkGroupSelected( BookmarkGroup.Self )]"
									name = "bookmark_group_tab"
								}
							}
						}

						spacer = { size = { 3 0 }}

						spacer = { size = { 3 0 }}

						flowcontainer = {
							datamodel = "[GameSetup.GetBookmarksInGroup(GameSetup.GetSelectedBookmarkGroup)]"

							item = {
								flowcontainer = {
									visible = "[And(GameSetup.IsBookmarkSelected( Bookmark.Self ), Bookmark.HasRequiredDLC)]"
									ignoreinvisible = yes
									spacing = 3

									text_single = {
										raw_text = "[Bookmark.GetName]"
									}

									spacer = { size = { 0 0 }}

									text_single = {
										raw_text = "bookmark,"
									}

									text_single = {
										raw_text = "Recommended."
										visible = "[Bookmark.IsRecommended]"
									}

								}
							}
						}
					}
				}

				vbox = {
					name = "bookmark_groups"
					datamodel = "[GameSetup.AccessBookmarkGroups]"
					layoutpolicy_horizontal = expanding

					item = {
						widget_bookmark_group_button_ocr = {
							visible = "[Not(GameSetup.IsBookmarkGroupSelected( BookmarkGroup.Self ))]"
							name = "bookmark_group_tab"
						}
					}
				}

				vbox = {
					visible = "[GameSetup.HasUngroupedBookmarks]"
					name = "ungrouped_bookmarks"
					datamodel = "[GameSetup.GetUngroupedBookmarks]"
					layoutpolicy_horizontal = expanding

					item = {
						widget_ungrouped_bookmark_button_ocr = {
							name = "bookmark_tab"
						}
					}
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "[Subtract_int32(GetDataModelSize(GameSetup.GetBookmarksInGroup(GameSetup.GetSelectedBookmarkGroup)), '(int32)1')] other bookmarks:"
				}

				vbox = {
					datamodel = "[GameSetup.GetBookmarksInGroup(GameSetup.GetSelectedBookmarkGroup)]"
					layoutpolicy_horizontal = expanding

					item = {
						bookmark_button_ocr = {
							visible = "[And(Not(GameSetup.IsBookmarkSelected( Bookmark.Self )), Bookmark.HasRequiredDLC)]"
						}
					}
				}

				text_single = {
					margin_top = 5
					raw_text = "Select one of [GetDataModelSize(GameSetup.GetSelectedBookmarkCharacters)] characters, you can use number keys from 1 to 5."
					layoutpolicy_horizontal = expanding
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					datamodel = "[GameSetup.GetSelectedBookmarkCharacters]"

					item = {
						button_text = {
							visible = "[BookmarkCharacter.ShouldDisplay]"
							layoutpolicy_horizontal = expanding
							onclick = "[PdxGuiTriggerAllAnimations('bookmark_character_change')]"
							onclick = "[GameSetup.SetSelectedCharacter( BookmarkCharacter.Self )]"
							onclick = "[GetVariableSystem.Set( 'show_character_info', 'true' )]"
							alwaystransparent = "[GameSetup.IsCharacterSelected( BookmarkCharacter.Self )]"
							datacontext = "[BookmarkCharacter]"
							# enabled = "[Not(BookmarkCharacter.GetGovernmentType.IsType( 'administrative_government' ))]"

							shortcut_bookmark = {
								visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)0')]"
								shortcut = speed_1
							}

							shortcut_bookmark = {
								visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)1')]"
								shortcut = speed_2
							}

							shortcut_bookmark = {
								visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)2')]"
								shortcut = speed_3
							}

							shortcut_bookmark = {
								visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)3')]"
								shortcut = speed_4
							}

							shortcut_bookmark = {
								visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)4')]"
								shortcut = speed_5
							}


							blockoverride "pre" {
								text_single = {
									visible = "[LessThan_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)5')]"
									raw_text = "[Add_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)1')],"
								}
								# text_single = {
								# 	raw_text = "Disabled for now."
								# 	visible = "[BookmarkCharacter.GetGovernmentType.IsType( 'administrative_government' )]"
								# }
							}

					    blockoverride "text" {
								raw_text = "[BookmarkCharacter.GetName],"
					    }


							# #TODO
							# state = {
							# 	trigger_on_create = yes
							# 	on_finish = "[BookmarkCharacter.Select]"
							# 	on_finish = "[GetVariableSystem.Set( 'show_character_info', 'true' )]"
							# }

							blockoverride "extra" {

								text_single = {
									visible = "[Not( BookmarkCharacter.HasDynastyHouse )]"
									raw_text = "[BookmarkCharacter.GetDynastyTemplate.GetName],"
								}

								text_single = {
									visible = "[BookmarkCharacter.HasDynastyHouse]"
									raw_text = "[BookmarkCharacter.GetDynastyHouseTemplate.GetName]."
								}

								text_single = {
									text = "ADVENTURER_BOOKMARK_CHARACTER_TITLE"
									visible = "[BookmarkCharacter.GetGovernmentType.IsType('landless_adventurer_government')]"
								}

								text_single = {
									text = "BOOKMARK_CHARACTER_TITLE"
									visible = "[Not( Or( Or( BookmarkCharacter.GetGovernmentType.IsType( 'landless_adventurer_government' ), BookmarkCharacter.GetGovernmentType.IsType( 'administrative_government' ) ), BookmarkCharacter.GetGovernmentType.IsType( 'nomad_government' ) ) )]"
								}

								text_single = {
									text = "NOMAD_BOOKMARK_CHARACTER_TITLE_HIGH_CHIEFTAIN"
									visible = "[And( BookmarkCharacter.GetGovernmentType.IsType( 'nomad_government' ), EqualTo_int32( BookmarkCharacter.GetTier, '(int32)4' ) )]"
								}

								text_single = {
									text = "NOMAD_BOOKMARK_CHARACTER_TITLE_CHIEFTAIN_OR_KHAN"
									visible = "[And( BookmarkCharacter.GetGovernmentType.IsType( 'nomad_government' ), Not( EqualTo_int32( BookmarkCharacter.GetTier, '(int32)4' ) ) )]"
								}

								text_single = {
									text = "ADMIN_BOOKMARK_CHARACTER_TITLE"
									visible = "[BookmarkCharacter.GetGovernmentType.IsType( 'administrative_government' )]"
								}

								dot = {
									margin_left = -3
								}

								text_single = {
									raw_text = "[BookmarkCharacter.GetDifficulty] difficulty."
								}

							}

						}
					}
				}

				spacer = { size = { 0 5 }}

				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[Toggle('bookmark_desc')]"
					blockoverride "text" {
						raw_text = "Bookmark description:"
					}
					blockoverride "extra" {
						text_single = {
							raw_text = "[Collapse('bookmark_desc')] Shift D."
						}
					}
					shortcut = mapmode_house_secondary
				}

				scrollbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					blockoverride "scrollbox_margins" {

					}
					blockoverride "scrollbox_content" {
						flowcontainer = {
							direction = vertical
							margin_bottom = 5
							layoutpolicy_horizontal = expanding
							ignoreinvisible = yes

							text_single = {
								raw_text = "[GameSetup.GetBookmarkName]."
							}

							text_single = {
								raw_text = "[GameSetup.GetSelectedDate.GetStringLong]."
							}

							text_multi = {
								visible = "[Isnt('bookmark_desc')]"
								raw_text = "[GameSetup.GetBookmarkDescription]"
								autoresize = yes
								max_width = 500
							}
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					button = {
						name = "back_button"
						shortcut = "close_window"

						enabled = "[Not(GameSetup.HasGameStarted)]"
						onclick = "[GameSetup.OnBack]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
					}
					button_text = {
						layoutpolicy_horizontal = expanding
						name = "game_rules_button"

						blockoverride "text" {
							text = "GAME_RULES"
						}
						blockoverride "extra" {
							text_single = {
								margin_left = -3
								raw_text = ", hotkey R."
							}
						}
						shortcut = map_mode_3
						onclick = "[OpenGameRules]"
					}

					hbox = {
					    layoutpolicy_horizontal = expanding


						flowcontainer_game_rules_mini = {
							name = "game_rules_mini"
						}

					    expand = { }
					}

					hbox = {
						name = "buttons"
						visible = "[Not( HasGameStartedForTheFirstTime )]"
						layoutpolicy_horizontal = expanding

						button_text = {
							visible = "[IsIronmanEnabled]"
							onclick = "[SetIronmanEnabledStatus( '(bool)no' )]"
							blockoverride "text" {
								raw_text = "BOOKMARK_IRONMAN_ENABLED"
								align = left
							}
							blockoverride "extra" {
								text_single = {
									raw_text = ": Enabled."
								}
							}
						}

						button_text = {
							visible = "[Not( IsIronmanEnabled )]"
							onclick = "[SetIronmanEnabledStatus( '(bool)yes' )]"
							blockoverride "text" {
								raw_text = "BOOKMARK_IRONMAN_ENABLED"
								align = left
							}
							blockoverride "extra" {
								text_single = {
									raw_text = ": Disabled."
								}
							}
						}

						space = { }

						text_single = {
							raw_text = "It only allows one save file."
						}

						expand = { }
					}

					hbox_achievements_info = {
						layoutpolicy_horizontal = expanding
					}
				}

				expand = { }
			}

			### Character sidebar
			widget = {
				# parentanchor = right
				size = { 550 100% }
				#scissor = yes

				visible = "[GetVariableSystem.Exists( 'show_character_info' )]"

				button = {
					onclick = "[GetVariableSystem.Clear('show_character_info')]"
					shortcut = close_window
				}

				state = {
					name = _show
					using = Animation_FadeIn_Standard
					start_sound = {
						soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_sidebar"
					}
				}

				state = {
					name = _hide
					using = Animation_FadeOut_Standard
					start_sound = {
						soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_sidebar"
					}
				}

				margin_widget = {
					size = { 650 100% }
					name = "selected_character_info"
					visible = "[GameSetup.HasSelectedCharacter]"

					vbox = {
						layoutpolicy_vertical = expanding
						margin = { 5 5 }
						# margin_top = 25
						# margin_bottom = 40
						background = { using = Background_Area_Border_Solid }
						datacontext = "[GameSetup.GetSelectedCharacter]"

						button_primary_text = {
							visible = "[GameSetup.HasSelectedCharacter]"
							layoutpolicy_horizontal = expanding

							name = "start_button"
							onclick = "[GameSetup.StartGame]"
							onclick = "[PdxGuiTriggerAllAnimations('bookmarks_game_start')]"
							onclick = "[PdxGuiTriggerAllAnimations('bookmarks_game_start_selected_character')]"
							onclick = "[PdxGuiTriggerAllAnimations('bookmarks_hide_any_character')]"
							onclick = "[PdxGuiTriggerAllAnimations('start_game_audio')]"
							enabled = "[GameSetup.CanStart]"
							# tooltip = "[GameSetup.PlayTooltip]"

							blockoverride "text" {
								raw_text = "START"
							}

							blockoverride "extra" {
								text_single = {
									raw_text = " as [BookmarkCharacter.GetName]"
								}
							}

							state = {
								name = start_game_audio
								duration = 0.1

								start_sound = {
									soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
								}
							}
						}


						hbox = {
							layoutpolicy_horizontal = expanding
							button_text = {
								name = "game_rules_button"

								blockoverride "text" {
									text = "GAME_RULES"
								}
								blockoverride "extra" {
									text_single = {
										margin_left = -3
										raw_text = ", R."
									}
								}
								shortcut = map_mode_3
								onclick = "[OpenGameRules]"
							}

							hbox_achievements_info = {
								margin_left = 3
								# layoutpolicy_horizontal = expanding
							}

							# flowcontainer_game_rules_mini = {
							# 	name = "game_rules_mini"
							# }

							flowcontainer = {
								ignoreinvisible = yes
								spacing = 3

								text_single = {
									raw_text = "Ironman:"
								}
								text_single = {
									visible = "[Not(IsIronmanEnabled)]"
									raw_text = "Off"
								}
								text_single = {
									visible = "[IsIronmanEnabled]"
									raw_text = "On"
								}
								dot_l = {}

							}


							expand = { }
						}

						spacer = { size = { 0 10 }}

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							vbox = { # Selected Character info
								visible = "[GameSetup.HasSelectedCharacter]"
								visible_at_creation = no

								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding


								vbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									margin = { 10 0 }


									vbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										margin_bottom = 5

										vbox = {
											layoutpolicy_horizontal = expanding

											flowcontainer = {
												layoutpolicy_horizontal = expanding
												text_single = {
													name = "character_title"
													text = "BOOKMARK_CHARACTER_TITLE_TYPE"
													visible = "[Not( Or(BookmarkCharacter.GetGovernmentType.IsType( 'landless_adventurer_government' ), BookmarkCharacter.GetGovernmentType.IsType( 'nomad_government' ) ) )]"
												}
												text_single = {
													name = "character_title_adventurer"
													visible = "[BookmarkCharacter.GetGovernmentType.IsType( 'landless_adventurer_government' )]"
													text = "BOOKMARK_CHARACTER_TITLE_TYPE_ADVENTURER"
												}
												text_single = {
													name = "character_title_nomad_high_chieftain"
													visible = "[And( BookmarkCharacter.GetGovernmentType.IsType( 'nomad_government' ), EqualTo_int32( BookmarkCharacter.GetTier, '(int32)4' ) )]"
													text = "BOOKMARK_CHARACTER_TITLE_TYPE_NOMAD_HIGH_CHIEFTAIN"
												}
												text_single = {
													name = "character_title_nomad_chieftain_or_khan"
													visible = "[And( BookmarkCharacter.GetGovernmentType.IsType( 'nomad_government' ), Not( EqualTo_int32( BookmarkCharacter.GetTier, '(int32)4' ) ) )]"
													text = "BOOKMARK_CHARACTER_TITLE_TYPE_NOMAD_CHIEFTAIN_OR_KHAN"
												}
												text_single = {
													raw_text = ", [BookmarkCharacter.GetAge] years old."
												}
											}

											vbox = {
												layoutpolicy_horizontal = expanding

												text_single = {
													layoutpolicy_horizontal = expanding
													raw_text = "House [BookmarkCharacter.GetDynastyTemplate.GetName]."
													align = left
												}

												flowcontainer = {
													layoutpolicy_horizontal = expanding

													text_single = {
														text = "BOOKMARK_CHARACTER_CULTURE"
													}

													text_single = {
														raw_text = ","
													}

													space = { }

													text_single = {
														text = "BOOKMARK_CHARACTER_RELIGION"
													}

													dot = { }
												}

												flowcontainer = {
													layoutpolicy_horizontal = expanding
													text_single = {
														text = "BOOKMARK_CHARACTER_DIFFICULTY"
													}

													text_single = {
														raw_text = "."
													}
												}
											}

											#related
											flowcontainer = {
												margin_top = 5
												visible = "[DataModelHasItems(BookmarkCharacter.GetRelatedCharacters)]"
												direction = vertical
												layoutpolicy_horizontal = expanding

												text_single = {
													layoutpolicy_horizontal = expanding
													raw_text = "[GetDataModelSize(BookmarkCharacter.GetRelatedCharacters)] Related characters:"
												}

												flowcontainer = {
													datamodel = "[BookmarkCharacter.GetRelatedCharacters]"
													direction = vertical

													item = {
														text_single = {
															layoutpolicy_horizontal = expanding
															raw_text = "BOOKMARK_RELATED_CHARACTER"
														}
													}
												}
											}

											spacer = { size = { 0 10 }}

											text_single = {
												raw_text = "Description:"
												visible = "[GetVariableSystem.Exists( 'show_character_info' )]"
												layoutpolicy_horizontal = expanding
											}

											hbox = {
												layoutpolicy_horizontal = expanding

												text_multi = {
													visible = "[GetVariableSystem.Exists( 'show_character_info' )]"
													name = "character_text"
													layoutpolicy_horizontal = expanding
													text = "[BookmarkCharacter.GetDescription]"
													autoresize = yes
													maximumsize = { 550 -1 }
													margin_top = 10
												}

												expand = {}
											}

											text_single = {
												layoutpolicy_horizontal = expanding
												raw_text = "Escape to go back or use numbers to switch to another character."
											}

										}

										expand = { }
									}
								}
							}
							expand = {}
						}

						vbox = {
							layoutpolicy_horizontal = expanding


							hbox = {
								name = "buttons"
								visible = "[Not( HasGameStartedForTheFirstTime )]"
								layoutpolicy_horizontal = expanding

								button_text = {
									visible = "[IsIronmanEnabled]"
									onclick = "[SetIronmanEnabledStatus( '(bool)no' )]"
									blockoverride "text" {
										raw_text = "BOOKMARK_IRONMAN_ENABLED"
										align = left
									}
									blockoverride "extra" {
										text_single = {
											raw_text = ": Enabled."
										}
									}
								}

								button_text = {
									visible = "[Not( IsIronmanEnabled )]"
									onclick = "[SetIronmanEnabledStatus( '(bool)yes' )]"
									blockoverride "text" {
										raw_text = "BOOKMARK_IRONMAN_ENABLED"
										align = left
									}
									blockoverride "extra" {
										text_single = {
											raw_text = ": Disabled."
										}
									}
								}

								space = { }

								text_single = {
									raw_text = "It only allows one save file."
								}

								expand = { }
							}
						}
						expand = {}
					}
				}

				widget = {
					name = "not_selected_character_info"
					visible = "[Not(GameSetup.HasSelectedCharacter)]"
					size = { 440 100% }
					#scissor = yes

					vbox = {
						layoutpolicy_vertical = expanding
						margin_right = 10
						margin_top = 10

						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 10

							background = {
								using = Background_Area_ExtraDark
							}

							vbox = { # bookmark info
								name = "bookmark_info"
								layoutpolicy_horizontal = expanding

								vbox = { # boomark info header
									layoutpolicy_horizontal = expanding
									margin = { 10 10}

									background = {
										using = Background_Area_ExtraDark
										margin_left = 5
										margin_right= 5
									}

									vbox = {
										spacing = 3
										margin_bottom = 5

										text_single = {
											text = "[GameSetup.GetBookmarkName]"
											default_format = "#high;glow_color:{0,0,0,1}"
											using = Font_Size_Big
											align = left
											margin_bottom = -5
										}

										text_single = {
											text = "[GameSetup.GetSelectedDate.GetStringLong]"
											default_format = "#medium;glow_color:{0,0,0,1}"
											using = Font_Size_Medium
											using = Font_Type_Flavor
										}

										hbox = {
											visible = "[GameSetup.GetSelectedBookmark.IsRecommended]"
											spacing = 5

											icon = {
												texture = "gfx/interface/icons/portraits/me_small.dds"
												size = { 18 18 }
											}

											text_single = {
												text = "RECOMMEND_START_BOOKMARK"
												default_format = "#positive_value"
												align = left
											}
										}
									}
								}

								vbox = { # bookmark info description
									layoutpolicy_horizontal = expanding
									spacing = 10
									margin = { 20 5 }
									margin_bottom = 20

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 10

										button_list_expand = {
											visible = "[GameSetup.HasSelectedCharacter]"
											size = { 25 25 }
											onclick = "[GetVariableSystem.Toggle( 'show_character_info' )]"
											checked = "[Not( GetVariableSystem.Exists( 'show_character_info' ) )]"
											clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"
										}
										expand = {}
									}

									vbox = {
										visible = "[Not( GetVariableSystem.Exists( 'show_character_info' ) )]"
										maximumsize = {390 300}

										text_multi = {
											name = "bookmark_text"
											text = "[GameSetup.GetBookmarkDescription]"
											autoresize = yes
											maximumsize = { 390 300 }
										}
									}
								}
							}
						}
						expand = {}
					}
				}
			}
		}
	}

	# vanilla
	widget = {
		using = vanilla
		parentanchor = center
		size = { 1920 1080 }
		scale = 1
		allow_outside = yes

		state = {
			name = "bookmarks_game_start_selected_character"
			delay = 1.45
			on_finish = "[GameSetup.OnStart]"
		}

		state = {
			name = "bookmarks_game_start_any_character"
			delay = 1.45
			on_finish = "[GameSetup.OnCustomStart]"
		}

		widget = {
			parentanchor = center
			size = { 1920 1200 }
			scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"

			state = {
				name = "bookmark_change"
				alpha = 0.7
				next = "fadein"
			}

			state = {
				name = "fadein"
				using = Animation_FadeIn_Standard
			}

			widget = {
				name = "background_map"
				parentanchor = center
				size = { 1920 1080 }

				state = {
					name = "bookmarks_game_start"
					delay = 0.35
					duration = 1.1

					bezier = { 0.8 0 1 1 }
					scale = 10
				}

				state = {
					name = "bookmarks_reset"
					duration = 0.3

					bezier = { 0.8 0 1 1 }
					scale = 1
				}

				icon = {
					name = "bookmark_background"
					size = { 100% 100% }
					texture = "[GameSetup.GetSelectedBookmark.GetBackground]"

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_seamless_torn_edge_horizontal.dds"
						spriteType = corneredtiled
						spriteborder_top = 1080
						blend_mode = alphamultiply
					}

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_seamless_torn_edge_horizontal.dds"
						spriteType = corneredtiled
						spriteborder_top = 1080
						mirror = vertical
						blend_mode = alphamultiply
					}
				}

				icon = {
					name = "character_selection"
					visible = "[GameSetup.HasSelectedCharacter]"
					texture = "[GameSetup.GetSelectedCharacter.GetLocationImage]"
					size = { 100% 100% }

					state = {
						name = "_show"
						using = Animation_FadeIn_Quick
						next = pulse_a
					}

					state = {
						name = "pulse_a"
						alpha = 1
						duration = 1
						next = pulse_b
						using = Animation_Curve_Default
					}

					state = {
						name = "pulse_b"
						alpha = 0.7
						duration = 1
						next = pulse_a
						using = Animation_Curve_Default
					}
				}

				icon = {
					name = "character_over"
					visible = "[GameSetup.HasHoveredCharacter]"
					texture = "[GameSetup.GetHoveredCharacter.GetLocationImage]"
					size = { 100% 100% }
					alpha = 0.3

					state = {
						name = "_show"
						using = Animation_FadeIn_Quick
					}

					state = {
						name = "_hide"
						using = Animation_FadeOut_Standard
					}
				}
			}

			widget = {
				name = "map_characters"
				size = { 100% 100% }
				datamodel = "[GameSetup.GetSelectedBookmarkCharacters]"

				state = {
					name = "map_characters_appear"
					trigger_on_create = yes
					next = "b"

					alpha = 0
					position = { 0 15 }
				}

				state = {
					name = "b"
					delay = 0.4
					duration = 0.3
					using = Animation_Curve_Default

					position = { 0 0 }
					alpha = 1
				}

				item = {
					container = {
						position = "[BookmarkCharacter.GetGuiPosition]"
						datacontext = "[BookmarkCharacter]"

						button_group_map_character_selection = {
							visible = "[Not(GameSetup.IsCharacterSelected( BookmarkCharacter.Self ))]"
							onclick = "[PdxGuiTriggerAllAnimations('bookmark_character_change')]"
							onclick = "[GameSetup.SetSelectedCharacter( BookmarkCharacter.Self )]"
							onclick = "[GetVariableSystem.Set( 'show_character_info', 'true' )]"
							alwaystransparent = "[GameSetup.IsCharacterSelected( BookmarkCharacter.Self )]"

							state = {
								name = _mouse_hierarchy_enter
								on_start = "[GameSetup.SetHoveredBookmarkCharacter( BookmarkCharacter.Self )]"
								on_start = "[PdxGuiWidget.FindChild('banner_hover_glow').TriggerAnimation('bookmark_character_hover_enter')]"
								on_start = "[PdxGuiWidget.FindChild('size_widget').TriggerAnimation('bookmark_character_hover_enter')]"
								position = { 0 -6 }
								duration = 0.05
								using = Animation_Curve_Default
							}

							state = {
								name = _mouse_hierarchy_leave
								on_start = "[GameSetup.DeselectHoveredBookmarkCharacter]"
								on_start = "[PdxGuiWidget.FindChild('banner_hover_glow').TriggerAnimation('bookmark_character_hover_leave')]"
								on_start = "[PdxGuiWidget.FindChild('size_widget').TriggerAnimation('bookmark_character_hover_leave')]"
								position = { 0 0 }
								duration = 0.2
								using = Animation_Curve_Default
							}

							state = {
								name = "bookmarks_game_start"
								duration = 0.2
								using = Animation_Curve_Default
								alpha = 0
							}

							state = {
								name = "bookmarks_reset"
								duration = 0.2
								using = Animation_Curve_Default
								alpha = 1
							}

							widget = {
								name = "size_widget"
								size = { 100% 195 }

								state = {
									name = "bookmark_character_hover_enter"
									position = { 0 60 }
								}

								state = {
									name = "bookmark_character_hover_leave"
									position = { 0 0 }
								}
							}
						}

						button_group_map_character_selection = {
							visible = "[GameSetup.IsCharacterSelected( BookmarkCharacter.Self )]"
							visible_at_creation = no
							position = { 0 -6 }
							alwaystransparent = yes

							state = {
								name = "bookmarks_hide_selected_character"
								duration = 0.2
								using = Animation_Curve_Default
								alpha = 0
							}

							state = {
								name = "bookmarks_game_start"
								delay = 0.2
								duration = 0.8
								using = Animation_Curve_Default
								alpha = 0
							}

							state = {
								name = "bookmarks_reset"
								duration = 0.2
								using = Animation_Curve_Default
								alpha = 1
							}
						}
					}
				}
			}

			icon = {
				size = { 200 200 }
				parentanchor = center
				texture = "gfx/interface/colors/white.dds"
				color = { 0.85 0.8 0.75 1 }
				alpha = 0
				scale = 1

				modify_texture = {
					name = "mask"
					texture = "gfx/interface/icons/map_coa/ally_icon.dds"
					blend_mode = alphamultiply
					rotate_uv = 0
				}

				state = {
					name = "bookmarks_game_start"
					delay = 0.35
					duration = 1
					scale = 25

					animation = {
						bezier = { 0 1 1 1 }
						alpha = 1
					}

					animation = {
						bezier = { 0 0 1 1 }

						modify_texture = {
							name = "mask"
							rotate_uv = 180
						}
					}
				}

				state = {
					name = "bookmarks_reset"
					duration = 0.4
					scale = 1
					on_start = "[GameSetup.ResetView]"

					animation = {
						bezier = { 0 1 1 1 }
						alpha = 0
					}

					animation = {
						bezier = { 0 0 1 1 }

						modify_texture = {
							name = "mask"
							rotate_uv = 0
						}
					}
				}
			}
		}

		widget = {
			parentanchor = center
			size = "[GetResolutionWithAspectRatio]"
			scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"
			allow_outside = yes

			### Top Bar
			widget = {
				size = { 100% 50 }
				allow_outside = yes

				state = {
					name = "bookmarks_game_start"
					using = Animation_Curve_Default
					duration = 0.2

					alpha = 0
					position_y = -60
				}

				state = {
					name = "bookmarks_reset"
					using = Animation_Curve_Default
					duration = 0.2

					alpha = 1
					position_y = 0
				}

				state = {
					name = "bookmarks_bars_appear"
					next = b

					alpha = 0
					position_y = -60
				}

				state = {
					name = b
					using = Animation_Curve_Default

					alpha = 1
					delay = 0.5
					position_y = 0
					duration = 0.15
				}

				widget = {
					size = { 100% 35 }

					background = {
						using = Background_Area_Solid
						margin = { 20 0 }
						margin_top = 10
					}

					background = {
						texture = "gfx/interface/component_masks/patterns/mask_pattern_01.dds"
						spriteType = corneredtiled
						color = { 0.1 0.1 0.12 1 }
						texture_density = 1
						margin_bottom = -5

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_clouds.dds"
							blend_mode = alphamultiply
							spriteType = corneredTiled
							alpha = 0.5
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_scratches.dds"
							blend_mode = alphamultiply
							spriteType = corneredTiled
						}
					}

					icon = {
						name = "tile_frame_top"
						parentanchor = bottom|hcenter
						size = { 1970 22 }
						position = { 0 5 }

						texture = "gfx/interface/component_decoration/decoration_frame_top_clean.dds"
						spriteType = Corneredtiled
						spriteborder = { 100 0 }
						mirror = vertical
						texture_density = 2
					}
				}


				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 10

					widget ={
						size = { 590 90}

						background = {
							texture = "gfx/interface/bookmarks/top_bar_panel.dds"
							margin_top = 10
							margin_left = 10
						}

						vbox = {
							hbox = {
								allow_outside = yes
								spacing = 60
								margin_left = -100
								margin_top = 10
								button_tertiary = {
									name = "play_tutorial"
									onclick = "[GameSetup.OnShowTutorialPrompt]"
									text = "GAMESETUP_PLAY_TUTORIAL"
								}

								text_single = {
									text = "BOOKMARK_SELECT_BOOKMARK"
									default_format = "#weak"
									align = nobaseline

								}
							}

							expand = {}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						hbox = {

							scrollarea = {
								layoutpolicy_horizontal = expanding
								minimumsize = { 0 90 }

								scrollbarpolicy_vertical = always_off
								scrollbarpolicy_horizontal = as_needed

								scrollbar_horizontal = {
									scrollbar = {
										wheelstep = 60
										direction = horizontal

										track = {
											button = {}
										}

										slider = {
											button = {}
										}

										dec_button = {

											button = {}
										}

										inc_button = {
											button = {}
										}
									}
								}

								scrollwidget = {

									hbox = {
										position = { 5 -15 }
										spacing = 5

										hbox = {
											name = "bookmark_groups"
											datamodel = "[GameSetup.AccessBookmarkGroups]"
											layoutpolicy_vertical = expanding
											spacing = 5
											allow_outside = yes

											item = {
												widget_bookmark_group_button = {
													name = "bookmark_group_tab"
												}
											}
										}

										hbox = {
											visible = "[GameSetup.HasUngroupedBookmarks]"
											name = "ungrouped_bookmarks"
											datamodel = "[GameSetup.GetUngroupedBookmarks]"
											layoutpolicy_vertical = expanding
											allow_outside = yes

											item = {
												widget_ungrouped_bookmark_button = {
													name = "bookmark_tab"
												}
											}
										}

										expand = {}
									}
								}
							}
						}
					}
				}
			}

			### Left sidebar
			widget = {
				size = { 300 100% }
				position = {0 83 }

				state = {
					name = "bookmark_group_change"
					next = "fadein"

					alpha = 0
				}

				state = {
					name = "fadein"
					delay = 0.2
					duration = 0.5
					using = Animation_Curve_Default

					alpha = 1
				}

				state = {
					name = "bookmarks_game_start"
					using = Animation_Curve_Default
					duration = 0.2
					alpha = 0
					position_x = -100
				}

				state = {
					name = "bookmarks_reset"
					using = Animation_Curve_Default
					duration = 0.2

					alpha = 1
					position_x = 0
				}

				state = {
					name = "bookmarks_bars_appear"
					next = b

					alpha = 0
					position_x = -100
				}

				state = {
					name = b
					using = Animation_Curve_Default

					alpha = 1
					delay = 0.5
					position_x = 0
					duration = 0.15
				}

				widget = {
					size = { 40 100%}
					position = { -10 -15 }

					background = {
						using = Background_Area_Solid
					}

					icon = {
						name = "tile_left_sidebar"
						parentanchor = top|right
						size = { 22 100% }
						position = { 10 -40 }

						texture = "gfx/interface/component_decoration/decoration_frame_side_clean.dds"
						spriteType = Corneredtiled
						spriteborder = { 100 0 }
						texture_density = 2
					}
				}

				scrollbox = {
					name = "bookmarks"
					size = { 330 80% }

					blockoverride "scrollbox_background" {}
					blockoverride "scrollbox_margins" {}
					blockoverride "scrollbox_background_fade" {}

					scrollbaralign_vertical = left

					blockoverride "scrollbox_content" {
						vbox = {

							vbox = {
								datamodel = "[GameSetup.GetBookmarksInGroup( GameSetup.GetSelectedBookmarkGroup )]"

								item = {
									widget={
										size = { 290 80 }

										#Bookmark Button
										bookmark_button = {}

									}
								}
							}

							widget = {
								size = { 290 150}
							}
						}
					}
				}
			}




			### Bottom Panel

			widget = {
				name = "bottom_panel"
				size = { 100% 70 }
				parentanchor = bottom|hcenter

				widget = {
					size={ 350 200 }
					parentanchor = bottom|left
					position = { 0 -60 }

					background = {
						texture = "gfx/interface/bookmarks/custom_ruler_backdrop.dds"
					}
				}

				state = {
					name = "bookmarks_game_start"
					using = Animation_Curve_Default
					duration = 0.2

					alpha = 0
					position_y = 50
				}

				state = {
					name = "bookmarks_reset"
					using = Animation_Curve_Default
					duration = 0.2

					alpha = 1
					position_y = 0
				}

				state = {
					name = "bookmarks_bars_appear"
					next = b

					alpha = 0
					position_y = 50
				}

				state = {
					name = b
					using = Animation_Curve_Default

					alpha = 1
					delay = 0.5
					position_y = 0
					duration = 0.15
				}

				background = {
					using = Background_Area_Solid
					margin = { 20 0 }
					margin_bottom = 10
				}

				background = {
					texture = "gfx/interface/component_masks/patterns/mask_pattern_01.dds"
					spriteType = corneredtiled
					color = { 0.1 0.1 0.12 1 }
					margin_top = -22
					texture_density = 0.7

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_scratches.dds"
						blend_mode = alphamultiply
						spriteType = corneredTiled
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_clouds.dds"
						blend_mode = alphamultiply
						spriteType = corneredTiled
						alpha = 0.5
					}
				}

				icon = {
					name = "tile_frame_top"
					parentanchor = hcenter
					size = { 1970 22 }
					position = { 0 -5 }

					texture = "gfx/interface/component_decoration/decoration_frame_top_clean.dds"
					spriteType = Corneredtiled
					spriteborder = { 100 0 }
					texture_density = 2
				}

				icon = {
					parentanchor = top|hcenter
					position = { 0 -16 }
					texture = "gfx/interface/component_decoration/decoration_frame_top_center.dds"
					texture_density = 2
				}

				icon = {
					parentanchor = top|right
					position = { 0 -24 }
					size = { 40 40 }
					texture = "gfx/interface/component_decoration/decoration_arch.dds"
				}

				icon = {
					parentanchor = top|left
					position = { -3 -24 }
					size = { 40 40 }
					texture = "gfx/interface/component_decoration/decoration_arch.dds"
					mirror = horizontal
				}

				hbox = {
					margin = { 10 0 }
					margin_top = 10
					spacing = 20

					hbox = {
						layoutpolicy_horizontal = growing

						hbox = {

							background = {
								using = Background_Area_Solid
								margin = { 60 10 }
								alpha = 0.7

								modify_texture = {
									name = "mask"
									texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
									spriteType = Corneredstretched
									spriteborder = { 40 0 }
									blend_mode = alphamultiply
								}
							}

							button_standard_back = {
								name = "back_button"
								shortcut = "close_window"
								enabled = "[Not(GameSetup.HasGameStarted)]"
								onclick = "[GameSetup.OnBack]"
								oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
								clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
							}
						}
					}

					hbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = growing
						margin = { 5 5 }

						divider_light = {
							layoutpolicy_vertical = expanding
						}
					}

					hbox = {
						spacing = 10

						button_standard = {
							name = "game_rules_button"
							text = "GAME_RULES"
							onclick = "[OpenGameRules]"

							button_rules = {
								size = { 25 25 }
								parentanchor = left|vcenter
								position = { 5 0 }
								alwaystransparent = yes
							}
						}

						hbox = {
							flowcontainer_game_rules_mini = {
								name = "game_rules_mini"
								margin = { 10 0 }
							}

							hbox = {
								name = "buttons"
								visible = "[Not( HasGameStartedForTheFirstTime )]"

								margin_right = 15

								button_checkbox_label = {
									visible = "[Not( IsIronmanEnabled )]"
									onclick = "[SetIronmanEnabledStatus( '(bool)yes' )]"

									blockoverride "checkbox"
									{
										checked = "[IsIronmanEnabled]"
									}

									blockoverride "text"
									{
										text = "BOOKMARK_IRONMAN_DISABLED"
									}
								}

								button_checkbox_label = {
									visible = "[IsIronmanEnabled]"
									onclick = "[SetIronmanEnabledStatus( '(bool)no' )]"

									blockoverride "checkbox"
									{
										checked = "[IsIronmanEnabled]"
									}

									blockoverride "text"
									{
										text = "BOOKMARK_IRONMAN_ENABLED"
									}
								}
							}

							hbox = {
								layoutpolicy_vertical = expanding
								margin = { 5 5 }

								divider_light = {
									layoutpolicy_vertical = expanding
								}
							}

							hbox_achievements_info = {
								using = tooltip_ne
								blockoverride "ai_background"
								{
									#no background
								}

								blockoverride "ai_icon_size"
								{
									size = {36 36}
								}
							}
						}
					}

					spacer = { size = { 30 0 } }

					hbox = { # DLCs
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						spacing = 10

						text_single = {
							max_width = 150
							minimumsize = { 0 25 }

							text = "DLC"
							align = nobaseline
							using = Font_Size_Medium
						}

						scrollarea = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							scrollbarpolicy_vertical = always_off
							scrollbarpolicy_horizontal = as_needed

							scrollbar_horizontal = {
								scrollbar = {
									wheelstep = 60
									direction = horizontal

									track = {
										button = {}
									}

									slider = {
										button = {}
									}

									dec_button = {
										button = {
										}
									}

									inc_button = {
										button = {
										}
									}
								}
							}

							scrollwidget = {
								hbox = {

									hbox = {
										datamodel = "[GameSetup.GetDlcCollection.GetDlcs]"
										spacing = 5

										item = {
											dlc_button = {}
										}
									}

									expand = {}
								}
							}
						}
					}
				}
			}
			### Custom Ruler
			button_normal = {
				name = "pick_any_character_button"
				parentanchor = bottom|left
				position = { -45 -70 }
				size = { 400 195 }
				scale = 0.8

				enabled = "[GameSetup.IsCurrentBookmarkPlayable]"
				onclick = "[PdxGuiTriggerAllAnimations('bookmarks_game_start')]"
				onclick = "[PdxGuiTriggerAllAnimations('bookmarks_hide_selected_character')]"
				onclick = "[PdxGuiTriggerAllAnimations('bookmarks_game_start_any_character')]"

				tooltip = "[GameSetup.CustomPlayTooltip]"

				state = {
					name = _mouse_hierarchy_enter
					on_start = "[PdxGuiTriggerAllAnimations('unknown_character_hover_enter')]"
					on_start = "[PdxGuiWidget.FindChild('banner_hover_glow').TriggerAnimation('unknown_character_hover_enter')]"
					on_start = "[PdxGuiWidget.FindChild('unknown_portrait_glow').TriggerAnimation('unknown_character_hover_enter')]"
					on_start = "[PdxGuiWidget.FindChild('button_widget').TriggerAnimation('unknown_character_hover_enter')]"
				}

				state = {
					name = _mouse_hierarchy_leave
					on_start = "[PdxGuiTriggerAllAnimations('unknown_character_hover_leave')]"
					on_start = "[PdxGuiWidget.FindChild('banner_hover_glow').TriggerAnimation('unknown_character_hover_leave')]"
					on_start = "[PdxGuiWidget.FindChild('unknown_portrait_glow').TriggerAnimation('unknown_character_hover_leave')]"
					on_start = "[PdxGuiWidget.FindChild('button_widget').TriggerAnimation('unknown_character_hover_leave')]"
				}

				state = {
					name = _mouse_press
					position = { -45 -65 }
				}

				state = {
					name = _mouse_release
					position = { -45 -70 }
					duration = 0.05
					using = Animation_Curve_Default
					start_sound = {
						soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
					}
				}

				state = {
					name = "bookmarks_hide_any_character"
					duration = 0.2
					using = Animation_Curve_Default
					alpha = 0
				}

				state = {
					name = "bookmarks_reset"
					duration = 0.2
					using = Animation_Curve_Default
					alpha = 1
				}

				state = {
					name = "bookmarks_game_start"
					using = Animation_Curve_Default
					duration = 0.2

					alpha = 0
					position_y = 0
				}

				state = {
					name = "bookmarks_reset"
					using = Animation_Curve_Default
					duration = 0.2

					alpha = 1
					position_y = -70
				}

				state = {
					name = "bookmarks_bars_appear"
					next = b

					alpha = 0
					position_y = 0
				}

				state = {
					name = b
					using = Animation_Curve_Default

					alpha = 1
					delay = 0.5
					position_y = -70
					duration = 0.15
				}

				button_normal = {
					name = "button_widget"
					size = { 100% 100% }
					alwaystransparent = yes

					state = {
						name = "unknown_character_hover_enter"
						position = { 0 -15 }
						duration = 0.05
						using = Animation_Curve_Default
					}

					state = {
						name = "unknown_character_hover_leave"
						position = { 0 0 }
						duration = 0.2
						using = Animation_Curve_Default
					}

					icon = {
						parentanchor = bottom|hcenter
						position = { 0 -75 }
						size = { 300 225 }
						texture = "gfx/interface/bookmarks/custom_ruler.dds"

						icon = {
							name = "unknown_portrait_glow"
							size = { 100% 100% }
							texture = "gfx/interface/bookmarks/custom_ruler_glow.dds"
							framesize = { 471 589 }
							frame = 2
							alpha = 0

							state = {
								name = "unknown_character_hover_enter"
								alpha = 1
								duration = 0.05
								using = Animation_Curve_Default
							}

							state = {
								name = "unknown_character_hover_leave"
								alpha = 0
								duration = 0.2
								using = Animation_Curve_Default
							}
						}
					}

					icon = {
						parentanchor = bottom|hcenter
						position = { 0 10 }
						size = { 390 130 }
						texture = "gfx/interface/icons/banners/banner_brown_left.dds"

						modify_texture = {
							name = overlay
							texture = "gfx/interface/component_effects/effect_blue_shine.dds"
							blend_mode = colordodge
							translate_uv = { 1 0 }
						}

						state = {
							trigger_on_create = yes
							name = "start"
							next = "right"

							duration = 0
							delay = 1.5

							modify_texture = {
								name = overlay
								translate_uv = { 0.6 0 }
								alpha = 0
							}
						}

						state = {
							name = "right"
							next = "left"

							duration = 2
							using = Animation_Curve_Default

							modify_texture = {
								name = overlay
								translate_uv = { -0.6 0 }
								alpha = 1
							}
						}

						state = {
							name = "left"

							duration = 0
							delay = 5

							modify_texture = {
								name = overlay
								translate_uv = { 1 0 }
								alpha = 0
							}
						}

						glow = {
							color = { 0.1 0.1 0.1 0.2 }
							glow_radius = 20

							glow_generation_rules= {
								glow_alpha_mask = 0
								glow_blur_passes = 10
								glow_texture_downscale = 5.5f
								glow_ignore_inside_pixels = yes
							}
						}

						icon = {
							name = "banner_hover_glow"
							size = { 100% 100% }
							texture = "gfx/interface/icons/banners/banner_brown_left_glow.dds"
							alpha = 0

							state = {
								name = "unknown_character_hover_enter"
								alpha = 1
								duration = 0.05
								using = Animation_Curve_Default
							}

							state = {
								name = "unknown_character_hover_leave"
								alpha = 0
								duration = 0.2
								using = Animation_Curve_Default
							}
						}

						icon = {
							name = "ruler_designer_promt_glow"
							visible = "[ShouldPromptForRulerDesigner]"
							size = { 100% 100% }
							texture = "gfx/interface/icons/banners/banner_brown_left_glow.dds"
							alpha = 0

							state = {
								name = a
								next = b
								trigger_on_create = yes
								using = Animation_Curve_Default

								alpha = 1
								duration = 1.5
							}

							state = {
								name = b
								using = Animation_Curve_Default

								duration = 0.8
								delay = 2
								alpha = 0
							}
						}

						icon = {
							size = { 40 40 }
							parentanchor = vcenter
							position = { 65 -7 }
							texture = "gfx/interface/icons/flat_icons/edit_text.dds"
							alpha = 0.65
						}

						text_multi = {
							parentanchor = left|vcenter
							widgetanchor = left
							position = { 110 -32 }
							text = "PICK_ANY_CHARACTER"
							using = Font_Size_Medium
							default_format = "#light_background"
							size = { 214 50 }
						}
					}
				}
			}


			### Right sidebar
			widget = {
				parentanchor = right
				size = { 440 965 }
				position = { 0 35 }
				#scissor = yes

				state = {
					name = "bookmarks_bars_appear"
					next = b

					alpha = 0
					position_x = 50
				}

				state = {
					name = b
					using = Animation_Curve_Default

					alpha = 1
					delay = 0.5
					position_x = 0
					duration = 0.15
				}

				state = {
					name = "bookmarks_reset"
					using = Animation_Curve_Default
					duration = 0.2

					alpha = 1
					position_x = 0
				}

				state = {
					name = "bookmarks_game_start"
					using = Animation_Curve_Default
					duration = 0.2

					alpha = 0
					position_x = 50
				}

				state = {
					name = _show
					using = Animation_FadeIn_Standard
					position_x = 0
					start_sound = {
						soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_sidebar"
					}
				}

				state = {
					name = _hide
					using = Animation_FadeOut_Standard
					position_x = 50
					start_sound = {
						soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_sidebar"
					}
				}

				state = {
					name = "bookmarks_reset"
					using = Animation_Curve_Default
					duration = 0.2

					alpha = 1
					position_x = 0
				}

				widget = {
					size = { 440 965 }
					name = "selected_character_info"
					visible = "[GameSetup.HasSelectedCharacter]"

					vbox = {
						layoutpolicy_vertical = expanding
						margin_right = 10
						margin_top = 10

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							background = {
								using = Background_Area_ExtraDark
							}

							vbox = { # bookmark info
								name = "bookmark_info"
								layoutpolicy_horizontal = expanding

								background = {
									visible = "[Not(GameSetup.HasSelectedCharacter)]"
									texture = "[GameSetup.GetSelectedBookmark.GetButtonIconBig]"
									alpha = 0.8
									fittype = end

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
										blend_mode = alphamultiply
										mirror = vertical
									}
									using = Mask_Rough_Edges
								}

								vbox = { # boomark info header
									layoutpolicy_horizontal = expanding
									margin = { 10 10}
									background = {
										using = Background_Area_ExtraDark
										margin_left = 5
										margin_right = 5
									}

									background = {
										texture = "gfx/interface/component_masks/patterns/mask_pattern_01.dds"
										spriteType = corneredtiled
										color = { 0.1 0.1 0.12 1 }
										margin_top = -10
										texture_density = 0.8
										spriteborder_top = 60

										modify_texture = {
											texture = "gfx/interface/component_masks/mask_clouds.dds"
											blend_mode = alphamultiply
											spriteType = corneredTiled
											alpha = 0.6
										}

										modify_texture = {
											texture = "gfx/interface/component_masks/mask_scratches.dds"
											blend_mode = alphamultiply
											spriteType = corneredTiled
										}
									}

									vbox = {
										spacing = 3
										margin_bottom = 5

										text_single = {
											text = "[GameSetup.GetBookmarkName]"
											default_format = "#high;glow_color:{0,0,0,1}"
											using = Font_Size_Big
											align = nobaseline
											margin_bottom = -5
										}

										text_single = {
											text = "[GameSetup.GetSelectedDate.GetStringLong]"
											default_format = "#medium;glow_color:{0,0,0,1}"
											using = Font_Size_Medium
											using = Font_Type_Flavor
										}

										hbox = {
											visible = "[GameSetup.GetSelectedBookmark.IsRecommended]"
											spacing = 5

											icon = {
												texture = "gfx/interface/icons/portraits/me_small.dds"
												size = { 18 18 }
											}

											text_single = {
												text = "RECOMMEND_START_BOOKMARK"
												default_format = "#positive_value"
												align = nobaseline
											}
										}
									}

									vbox = {
										visible = "[Not( GetVariableSystem.Exists( 'show_character_info' ) )]"
										maximumsize = {390 300}
										text_multi = {
											name = "bookmark_text"
											text = "[GameSetup.GetBookmarkDescription]"
											autoresize = yes
											maximumsize = { 390 300 }
											margin = { 0 5}
										}
									}
								}
								#hbox = { # TODO [CF] When implementing dlc recommendation goes here
								#	name = "recommended_dlcs"
								#}
							}

							vbox = { # Selected Character info
								visible = "[GameSetup.HasSelectedCharacter]"
								visible_at_creation = no

								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								background = {
									texture = "[GameSetup.GetSelectedBookmark.GetButtonIconBig]"
									alpha = 0.8
									fittype = end

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
										blend_mode = alphamultiply
										mirror = vertical
									}

									using = Mask_Rough_Edges
								}

								vbox = {
									datacontext = "[GameSetup.GetSelectedCharacter]"
									datacontext = "[GameSetup.GetSelectedCharacter]"

									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									widget = {
										datacontext = "[GameSetup.GetSelectedCharacter]"
										visible = "[GameSetup.HasSelectedCharacter]"
										layoutpolicy_horizontal = expanding
										size = { 0 280 }

										state = {
											name = "bookmark_character_change"
											alpha = 0.5
											next = "fadein"
										}

										state = {
											name = "fadein"
											using = Animation_FadeIn_Standard
										}

										icon = {
											parentanchor = bottom|hcenter
											size = { 280 280 }
											texture = "gfx/interface/colors/white.dds"
											color = { 0.22 0.2 0.22 1 }

											modify_texture = {
												texture = "gfx/interface/frontend/mask_coa_flag.dds"
												blend_mode = alphamultiply
											}
										}

										coat_of_arms_icon = { #Dynasty
											datacontext = "[BookmarkCharacter]"
											visible = "[Not( BookmarkCharacter.HasDynastyHouse )]"
											parentanchor = bottom|hcenter
											size = { 280 280 }
											coat_of_arms = "[BookmarkCharacter.GetDynastyTemplate.GetCoA.GetTexture('(int32)256','(int32)256')]"
											coat_of_arms_slot = "[BookmarkCharacter.GetDynastyTemplate.GetCoA.GetSlot('(int32)256','(int32)256')]"
											coat_of_arms_mask = "gfx/interface/frontend/mask_coa_flag.dds"

											modify_texture = {
												texture = "gfx/interface/coat_of_arms/coa_overlay.dds"
												blend_mode = overlay
												spritetype = corneredTiled
											}
										}

										coat_of_arms_icon = { #Dynasty House
											datacontext = "[BookmarkCharacter]"
											visible = "[BookmarkCharacter.HasDynastyHouse]"
											parentanchor = bottom|hcenter
											size = { 280 280 }
											coat_of_arms = "[BookmarkCharacter.GetDynastyHouseTemplate.GetCoA.GetTexture('(int32)256','(int32)256')]"
											coat_of_arms_slot = "[BookmarkCharacter.GetDynastyHouseTemplate.GetCoA.GetSlot('(int32)256','(int32)256')]"
											coat_of_arms_mask = "gfx/interface/frontend/mask_coa_flag.dds"

											modify_texture = {
												texture = "gfx/interface/coat_of_arms/coa_overlay.dds"
												blend_mode = overlay
												spritetype = corneredTiled
											}
										}

										bm_portrait = {
											parentanchor = bottom|hcenter
											position = { 0 60 }
											size = { 300 390 }

											blockoverride "portrait_button"
											{
												portrait_texture = "[BookmarkCharacter.GetAnimatedPortrait( 'environment_bookmarks_selected', 'camera_body', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
												mask = "gfx/portraits/portrait_mask_blank.dds"
											}
										}

										widget = {
											visible = "[EqualTo_int32(GetDataModelSize(BookmarkCharacter.GetRelatedCharacters), '(int32)2')]"
											size = { 100% 100% }

											icon = {
												parentanchor = bottom|hcenter
												size = { 370 180 }
												mirror = vertical
												texture = "gfx/interface/component_masks/mask_fade_halfcircle.dds"
												color = { 0.18 0.18 0.18 0.3 }
											}

											flowcontainer = {
												datamodel = "[BookmarkCharacter.GetRelatedCharacters]"
												parentanchor = bottom|hcenter
												margin_bottom = 5
												spacing = 25

												item = {
													widget = {
														size = { 145 175 }

														icon = {
															parentanchor = center
															size = { 250 250 }
															mirror = vertical
															texture = "gfx/interface/component_masks/mask_fade_circle.dds"
															color = { 0.18 0.18 0.18 0.8 }
														}

														bm_portrait = {
															parentanchor = bottom|hcenter
															size = { 175 175 }

															blockoverride "portrait_tooltip"
															{
																tooltip_visible = yes
															}

															blockoverride "portrait_button"
															{
																portrait_texture = "[BookmarkCharacter.GetPortrait( 'environment_bookmarks_selected', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
															}
														}

														text_label_center = {
															name = "character_name"
															parentanchor = bottom|hcenter
															text = "BOOKMARK_RELATED_CHARACTER"
															default_format = "#medium"
															align = center
															autoresize = yes
															max_width = 160
															fontsize_min = 9
														}
													}
												}
											}
										}

										widget = {
											visible = "[EqualTo_int32(GetDataModelSize(BookmarkCharacter.GetRelatedCharacters), '(int32)1')]"
											size = { 100% 100% }

											icon = {
												size = { 100% 100% }
												position = { -5 5 }

												texture = "gfx/interface/component_masks/mask_fade_corner.dds"
												color = { 0.18 0.18 0.18 1 }

												using = Mask_Rough_Edges
											}

											icon = {
												size = { 100% 100% }
												position = { -5 5 }

												texture = "gfx/interface/component_masks/mask_fade_corner.dds"
												color = { 0.18 0.18 0.18 1 }

												using = Mask_Rough_Edges
											}

											flowcontainer = {
												datamodel = "[BookmarkCharacter.GetRelatedCharacters]"
												parentanchor = bottom|right
												margin_bottom = 5
												spacing = 30
												margin_right = 15

												item = {
													widget = {
														size = { 145 175 }

														bm_portrait = {
															parentanchor = bottom|hcenter
															size = { 250 175 }

															blockoverride "portrait_tooltip"
															{
																tooltip_visible = yes
															}

															blockoverride "portrait_button"
															{
																portrait_texture = "[BookmarkCharacter.GetPortrait( 'environment_bookmarks_selected', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
															}
														}

														text_label_center = {
															name = "character_name"
															parentanchor = bottom|hcenter
															text = "BOOKMARK_RELATED_CHARACTER"
															default_format = "#medium"
															align = center
															autoresize = yes
															max_width = 160
															fontsize_min = 9
														}
													}
												}
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										margin_bottom = 5

										widget = {
											size = { 0 10 }
											layoutpolicy_horizontal = expanding

											icon = {
												name = "tile_frame_bottom"
												parentanchor = center
												texture = "gfx/interface/component_decoration/decoration_frame_top_clean.dds"
												spriteType = Corneredtiled
												spriteborder = { 100 0 }
												size = { 450 20 }
												texture_density = 2
											}
										}

										vbox = {
											layoutpolicy_horizontal = expanding


											vbox = {
												layoutpolicy_horizontal = expanding
												margin = { 25 10 }

												background = {
													using = Background_Area_Light
													margin = { -17 0 }
													using = Mask_Rough_Edges
												}

												vbox = {
													layoutpolicy_horizontal = expanding

													state = {
														name = "bookmark_character_change"
														alpha = 0.5
														next = "fadein"
													}

													state = {
														name = "fadein"
														using = Animation_FadeIn_Standard
													}

													text_single = {
														name = "character_name"
														layoutpolicy_horizontal = expanding
														autoresize = no
														align = nobaseline|center
														text = "BOOKMARK_CHARACTER_INFO"
														using = Font_Size_Big
														default_format = "#high;glow_color:{0,0,0,1}"
													}

													text_single = {
														name = "character_title"
														layoutpolicy_horizontal = expanding
														autoresize = no
														align = nobaseline|center
														text = "BOOKMARK_CHARACTER_TITLE_TYPE"
														using = Font_Size_Medium
													}
												}
											}

											hbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												spacing = 10
												margin = { 25 0 }
												margin_top = 5

												vbox = {
													layoutpolicy_vertical = expanding
													margin = { 8 8 }
													min_width = 90

													coa_dynasty_bookmark = {}

													text_multi = {
														visible = "[Not( BookmarkCharacter.HasDynastyHouse )]"
														text = "[BookmarkCharacter.GetDynastyTemplate.GetName]"
														default_format = "#high"
														tooltip = "BOOKMARK_DYNASTY_TOOLTIP"
														autoresize = yes
														max_width = 120
														align = nobaseline
														margin = { 2 0 }
													}

													text_multi = {
														visible = "[BookmarkCharacter.HasDynastyHouse]"
														text = "[BookmarkCharacter.GetDynastyHouseTemplate.GetName]"
														default_format = "#high"
														tooltip = "BOOKMARK_DYNASTY_TOOLTIP"
														autoresize = yes
														max_width = 120
														align = nobaseline
														margin = { 2 0 }
													}

													expand = {}
												}


												vbox = {
													layoutpolicy_horizontal = expanding

													text_single = {
														layoutpolicy_horizontal = expanding
														text = "BOOKMARK_CHARACTER_CULTURE"
														autoresize = no
														align = nobaseline
													}

													text_single = {
														layoutpolicy_horizontal = expanding
														text = "BOOKMARK_CHARACTER_RELIGION"
														autoresize = no
														align = nobaseline
													}

													text_single = {
														layoutpolicy_horizontal = expanding
														text = "BOOKMARK_CHARACTER_DIFFICULTY"
														autoresize = no
														align = nobaseline
													}
												}
											}

											hbox = {
												visible = "[GetVariableSystem.Exists( 'show_character_info' )]"
												layoutpolicy_vertical = expanding
												maximumsize = { 390 300 }

												text_multi = {
													name = "character_text"
													layoutpolicy_horizontal = expanding
													text = "[BookmarkCharacter.GetDescription]"
													autoresize = yes
													maximumsize = { 390 300 }
													margin_top = 10
													margin_bottom = 10
												}
											}
										}

										expand = {}

										button_normal = {
											name = "start_button"
											onclick = "[GameSetup.StartGame]"
											onclick = "[PdxGuiTriggerAllAnimations('bookmarks_game_start')]"
											onclick = "[PdxGuiTriggerAllAnimations('bookmarks_game_start_selected_character')]"
											onclick = "[PdxGuiTriggerAllAnimations('bookmarks_hide_any_character')]"
											onclick = "[PdxGuiTriggerAllAnimations('start_game_audio')]"
											enabled = "[GameSetup.CanStart]"
											tooltip = "[GameSetup.PlayTooltip]"

											#text = "START"
											#using = Font_Size_Big
											#default_format = "#high;bold;glow_color:{0,0,0,1}"

											gfxtype = framedbuttongfx
											effectname = "NoHighlight"
											upframe = 1
											downframe = 2
											overframe = 1
											disableframe = 1

											size = { 330 91 }
											texture = "[GameSetup.GetSelectedBookmark.GetStartButton]"


											modify_texture = {
												texture = "gfx/interface/buttons/button_fancy_overlay.dds"
												blend_mode = overlay
											}

											modify_texture = {
												name = "glow"
												texture = "gfx/interface/buttons/button_fancy_glow.dds"
												blend_mode = colordodge
												alpha = 0

												spriteborder = { 20 0 }
												spritetype = corneredStretched
											}

											modify_texture = {
												texture = "gfx/interface/component_masks/mask_center_shimmer.dds"
												blend_mode = mask
											}

											modify_texture = {
												name = "shimmer"
												texture = "gfx/interface/component_masks/mask_clouds_solid.dds"
												blend_mode = colordodge
												spriteType = corneredTiled
												rotate_uv = 0
											}

											modify_texture = {
												name = "shimmer_2"
												texture = "gfx/interface/component_masks/mask_clouds_solid.dds"
												blend_mode = colordodge
												spriteType = corneredTiled
												rotate_uv = 0
											}

											modify_texture = {
												name = "shimmer_3"
												texture = "gfx/interface/component_masks/mask_clouds_solid.dds"
												blend_mode = colordodge
												spriteType = corneredTiled
											}

											modify_texture = {
												name = "shimmer_4"
												texture = "gfx/interface/component_masks/mask_clouds_solid.dds"
												blend_mode = colordodge
												spriteType = corneredTiled
											}

											state = {
												trigger_on_create = yes
												name = a
												next = b
												duration = 0

												modify_texture = {
													name = "shimmer"
													translate_uv = { -0.1 0 }
													alpha = 0.1
													rotate_uv = 0
												}

												modify_texture = {
													name = "shimmer_2"
													translate_uv = { 0.1 0 }
													alpha = 0.3
													rotate_uv = 0
												}

												modify_texture = {
													name = "shimmer_3"
													translate_uv = { 1 0 }
													alpha = 0.1
												}

												modify_texture = {
													name = "shimmer_4"
													translate_uv = { -1 0 }
													alpha = 0.5
												}
											}

											state = {
												name = b
												next = c
												duration = 10

												modify_texture = {
													name = "shimmer"
													translate_uv = { 0.1 0 }
													alpha = 0.3
													rotate_uv = 180
												}

												modify_texture = {
													name = "shimmer_2"
													translate_uv = { -0.1 0 }
													alpha = 0.1
													rotate_uv = -180
												}

												modify_texture = {
													name = "shimmer_3"
													translate_uv = { 0 0 }
													alpha = 0.5
												}

												modify_texture = {
													name = "shimmer_4"
													translate_uv = { 0 0 }
													alpha = 0.1
												}
											}

											state = {
												name = c
												next = a
												duration = 10

												modify_texture = {
													name = "shimmer"
													translate_uv = { -0.1 0 }
													alpha = 0.1
													rotate_uv = 360
												}

												modify_texture = {
													name = "shimmer_2"
													translate_uv = { 0.1 0 }
													alpha = 0.3
													rotate_uv = -360
												}

												modify_texture = {
													name = "shimmer_3"
													translate_uv = { -1 0 }
													alpha = 0.1
												}

												modify_texture = {
													name = "shimmer_4"
													translate_uv = { 1 0 }
													alpha = 0.5
												}
											}

											state = {
												name = _mouse_hierarchy_enter

												modify_texture = {
													name = "glow"
													alpha = 1
												}
											}

											state = {
												name = _mouse_hierarchy_leave
												duration = 0.2
												using = Animation_Curve_Default

												modify_texture = {
													name = "glow"
													alpha = 0
												}
											}

											state = {
												name = _mouse_press
												duration = 0
												using = Animation_Curve_Default

												modify_texture = {
													name = "glow"
													alpha = 0
												}
											}

											state = {
												name = start_game_audio
												duration = 0.1

												start_sound = {
													soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
												}
											}

											text_single = {
												parentanchor = center
												text = "START"
												align = nobaseline
												using = Font_Size_Big
												default_format = "#high;bold;glow_color:{0,0,0,1}"
												background = {
													texture ="gfx/interface/colors/black.dds"
													alpha = 1
													margin = { 50% 0}
													modify_texture = {
														texture = "gfx/interface/component_masks/mask_fade_circle.dds"
														blend_mode = alphamultiply

													}
												}
											}

											icon = {
												size = { 330 92}
												texture = "gfx/interface/bookmarks/start_buttons/start_frame.dds"
											}
										}
									}
								}
							}
							expand = {}
						}
						expand = {}
					}

					icon = {
						position =  {-2 18}
						size = { 60 37 }
						background ={
							using = Background_Area_Light
							using = Mask_Rough_Edges

							modify_texture ={
								texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
								blend_mode = alphamultiply
							}
						}
					}

					button_list_expand = {
						position =  {15 25}
						visible = "[GameSetup.HasSelectedCharacter]"
						size = { 25 25 }
						onclick = "[GetVariableSystem.Toggle( 'show_character_info' )]"
						checked = "[Not( GetVariableSystem.Exists( 'show_character_info' ) )]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"
					}
				}


				widget = {
					name = "not_selected_character_info"
					visible = "[Not(GameSetup.HasSelectedCharacter)]"
					size = { 440 965 }
					#scissor = yes

					vbox = {
						layoutpolicy_vertical = expanding
						margin_right = 10
						margin_top = 10

						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 10

							background = {
								using = Background_Area_ExtraDark
							}

							vbox = { # bookmark info
								name = "bookmark_info"
								layoutpolicy_horizontal = expanding

								background = {
									visible = "[Not(GameSetup.HasSelectedCharacter)]"
									texture = "[GameSetup.GetSelectedBookmark.GetButtonIconBig]"
									alpha = 0.8
									fittype = end

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
										blend_mode = alphamultiply
										mirror = vertical
									}

									using = Mask_Rough_Edges
								}

								vbox = { # boomark info header
									layoutpolicy_horizontal = expanding
									margin = { 10 10}

									background = {
										using = Background_Area_ExtraDark
										margin_left = 5
										margin_right= 5
									}

									background = {
										texture = "gfx/interface/component_masks/patterns/mask_pattern_01.dds"
										spriteType = corneredtiled
										color = { 0.1 0.1 0.12 1 }
										margin_top = -10
										texture_density = 0.8
										spriteborder_top = 60

										modify_texture = {
											texture = "gfx/interface/component_masks/mask_clouds.dds"
											blend_mode = alphamultiply
											spriteType = corneredTiled
											alpha = 0.6
										}

										modify_texture = {
											texture = "gfx/interface/component_masks/mask_scratches.dds"
											blend_mode = alphamultiply
											spriteType = corneredTiled
										}
									}

									vbox = {
										spacing = 3
										margin_bottom = 5

										text_single = {
											text = "[GameSetup.GetBookmarkName]"
											default_format = "#high;glow_color:{0,0,0,1}"
											using = Font_Size_Big
											align = nobaseline
											margin_bottom = -5
										}

										text_single = {
											text = "[GameSetup.GetSelectedDate.GetStringLong]"
											default_format = "#medium;glow_color:{0,0,0,1}"
											using = Font_Size_Medium
											using = Font_Type_Flavor
										}

										hbox = {
											visible = "[GameSetup.GetSelectedBookmark.IsRecommended]"
											spacing = 5

											icon = {
												texture = "gfx/interface/icons/portraits/me_small.dds"
												size = { 18 18 }
											}

											text_single = {
												text = "RECOMMEND_START_BOOKMARK"
												default_format = "#positive_value"
												align = nobaseline
											}
										}
									}
								}

								vbox = { # bookmark info description
									layoutpolicy_horizontal = expanding
									spacing = 10
									margin = { 20 5 }
									margin_bottom = 20

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 10

										button_list_expand = {
											visible = "[GameSetup.HasSelectedCharacter]"
											size = { 25 25 }
											onclick = "[GetVariableSystem.Toggle( 'show_character_info' )]"
											checked = "[Not( GetVariableSystem.Exists( 'show_character_info' ) )]"
											clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"
										}
										expand = {}
									}

									vbox = {
										visible = "[Not( GetVariableSystem.Exists( 'show_character_info' ) )]"
										maximumsize = {390 300}

										text_multi = {
											name = "bookmark_text"
											text = "[GameSetup.GetBookmarkDescription]"
											autoresize = yes
											maximumsize = { 390 850 }
										}
									}
								}
							}
						}
						expand = {}
					}
				}
			}
		}
	}

	### TUTORIAL PROMPT
	widget = {
		visible = "[GameSetup.ShouldShowTutorialPrompt]"
		visible_at_creation = no
		name = "tutorial_prompt_overlay"
		size = { 100% 100% }
		alwaystransparent = no
		using = TooltipFocus

		state = {
			name = _show
			using = Animation_FadeIn_Standard
			using = Sound_WindowShow_Standard
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
			using = Sound_WindowHide_Standard
		}

		button_normal = {
			size = { 100% 100% }
			onclick = "[GameSetup.OnSkipTutorial]"
		}

		using = Background_Full_Dim

		gamesetup_tutorial_prompt = {
		}
	}
}

types OCR {
	type widget_ungrouped_bookmark_button_ocr = button_text {
		onclick = "[GameSetup.SetSelectedBookmark( Bookmark.Self )]"
		onclick = "[GameSetup.ClearSelectedBookmarkGroup]"
		onclick = "[PdxGuiTriggerAllAnimations('bookmark_group_reset')]"
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_change','bookmark_change')]"
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('map_characters_appear','map_characters_appear')]"

		down = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"
		alwaystransparent = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"

		blockoverride "text" {
			raw_text = "[Bookmark.GetName]."
		}

		blockoverride "extra" {
			text_single = {
				raw_text = ", Selected"
				visible = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"
				align = left
			}
		}
		blockoverride "dot" {
		}

		state = {
			name = "button_selection"
			trigger_when = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"
			on_start = "[PdxGuiWidget.InterruptAnimation('bookmark_group_reset')]"
			delay = 0.05
			duration = 0.1
			using = Animation_Curve_Default
			position_y = 15
		}

		state = {
			name = "bookmark_group_reset"
			duration = 0.3
			using = Animation_Curve_Default
			position_y = 5
		}

		icon = {
			state = {
				trigger_on_create = yes
				name = _show
				next = shimmer
				duration = 0.2
				delay = 5

				modify_texture = {
					name = "shimmer"
					translate_uv = { 1 -1 }
					alpha = 0.6
				}
			}

			state = {
				name = shimmer
				next = pause
				duration = 2

				bezier = { 0 0.9 1 0.4 }

				modify_texture = {
					name = "shimmer"
					translate_uv = { -1 1 }
					alpha = 0.6
				}
				start_sound = {
					soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_topbar_tab_shimmer_on_loop"
				}
			}

			state = {
				name = "pause"
				next = shimmer
				duration = 0
				delay = 5

				modify_texture = {
					name = "shimmer"
					translate_uv = { 1 -1 }
					alpha = 0.6
				}
			}

			state = {
				name = _show
				using = Animation_Curve_Default
				duration = 0.3

				alpha = 1
				start_sound = {
					soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_topbar_tab_slide_out"
				}
			}
		}
	}


	### Year Tab
	type widget_bookmark_group_button_ocr = button_text {
		layoutpolicy_horizontal = expanding

		onclick = "[GameSetup.SelectBookmarkGroup( BookmarkGroup.Self )]"
		onclick = "[PdxGuiTriggerAllAnimations('bookmark_group_reset')]"
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_group_change','bookmark_group_change')]"
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_change','bookmark_change')]"
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('map_characters_appear','map_characters_appear')]"
		onclick = "[GetVariableSystem.Clear( 'show_character_info' )]"
		down = "[GameSetup.IsBookmarkGroupSelected( BookmarkGroup.Self )]"
		alwaystransparent = "[GameSetup.IsBookmarkGroupSelected( BookmarkGroup.Self )]"

		blockoverride "text" {
			raw_text = "[BookmarkGroup.GetName],"
		}
		blockoverride "pre" {
			text_single = {
				raw_text = "Change to"
				visible = "[Not(GameSetup.IsBookmarkGroupSelected( BookmarkGroup.Self ))]"
			}
		}
		blockoverride "extra" {
			container = {
				ignoreinvisible = yes
				visible = "[Not(GameSetup.IsBookmarkGroupSelected( BookmarkGroup.Self ))]"
				text_single = {
					raw_text = "F one."
					visible = "[IsIndex( '(int32)0' )]"
					button = {
						shortcut = character_window
						using = date_click
					}
				}
				text_single = {
					raw_text = "F[IndexNumber]."
					visible = "[IsIndex( '(int32)1' )]"
					button = {
						shortcut = my_realm_window
						using = date_click
					}
				}
				text_single = {
					raw_text = "F[IndexNumber]."
					visible = "[IsIndex( '(int32)2' )]"
					button = {
						shortcut = military_window
						using = date_click
					}
				}
			}
		}

		state = {
			name = _show
			using = Animation_Curve_Default
			duration = 0.3

			alpha = 1
			start_sound = {
				soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_topbar_tab_slide_out"
			}
		}
	}

	type bookmark_button_ocr = button_text {
		layoutpolicy_horizontal = expanding
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_change','bookmark_change')]"
		onclick = "[PdxGuiTriggerAllAnimations('bookmark_tab_reset')]"
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('map_characters_appear','map_characters_appear')]"
		onclick = "[GameSetup.SetSelectedBookmark( Bookmark.Self )]"
		onclick = "[GetVariableSystem.Clear( 'show_character_info' )]"
		down = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"
		alwaystransparent = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"


		blockoverride "text" {
			raw_text = "[Bookmark.GetName],"
		}

		blockoverride "extra" {
			flowcontainer = {
				ignoreinvisible = yes
				visible = "[Not(GameSetup.IsBookmarkSelected( Bookmark.Self ))]"

				text_single = {
					raw_text = "F4"
					visible = "[IsIndex( '(int32)0' )]"
					button = {
						shortcut = council_window
						using = bookmark_click
					}
				}
				text_single = {
					raw_text = "F five"
					visible = "[IsIndex( '(int32)1' )]"
					button = {
						shortcut = court_window
						using = bookmark_click
					}
				}
				text_single = {
					raw_text = "F6"
					visible = "[IsIndex( '(int32)2' )]"
					button = {
						shortcut = intrigue_window
						using = bookmark_click
					}
				}
				text_single = {
					raw_text = "F7"
					visible = "[IsIndex( '(int32)3' )]"
					button = {
						shortcut = factions_window
						using = bookmark_click
					}
				}
				text_single = {
					raw_text = "F8"
					visible = "[IsIndex( '(int32)4' )]"
					button = {
						shortcut = decision_window
						using = bookmark_click
					}
				}
				text_single = {
					raw_text = "F9"
					visible = "[IsIndex( '(int32)5' )]"
					button = {
						shortcut = activity_list_window
						using = bookmark_click
					}
				}
				dot = { }
			}

			text_single = {
				raw_text = "Recommended."
				visible = "[Bookmark.IsRecommended]"
			}
		}
	}
}

types BookmarkPortraits
{
	type widget_ungrouped_bookmark_button = widget {
		size = { 205 55 }
		allow_outside = yes

		button_normal = {
			parentanchor = top|hcenter
			position = { 0 5 }
			size = { 100% 100% }

			onclick = "[GameSetup.SetSelectedBookmark( Bookmark.Self )]"
			onclick = "[GameSetup.ClearSelectedBookmarkGroup]"
			onclick = "[PdxGuiTriggerAllAnimations('bookmark_group_reset')]"
			onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_change','bookmark_change')]"
			onclick = "[PdxGuiInterruptThenTriggerAllAnimations('map_characters_appear','map_characters_appear')]"

			down = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"
			alwaystransparent = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"

			state = {
				name = "_mouse_enter"
				on_start = "[PdxGuiWidget.FindChild('bookmarks_button').TriggerAnimation('mouse_enter')]"
			}

			state = {
				on_start = "[PdxGuiWidget.FindChild('bookmarks_button').TriggerAnimation('mouse_leave')]"
				name = "_mouse_leave"
			}

			state = {
				name = "button_selection"
				trigger_when = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"
				on_start = "[PdxGuiWidget.InterruptAnimation('bookmark_group_reset')]"
				delay = 0.05
				duration = 0.1
				using = Animation_Curve_Default
				position_y = 15
			}

			state = {
				name = "bookmark_group_reset"
				duration = 0.3
				using = Animation_Curve_Default
				position_y = 5
			}

			icon = {
				name = "bookmarks_button"
				parentanchor = bottom|hcenter
				size = { 100% 75 }
				alwaystransparent = yes
				texture = "[Bookmark.GetButtonIcon]"

				using = tooltip_ne

				modify_texture = {
					texture = "gfx/interface/buttons/button_stone_glass_mask.dds"
					blend_mode = alphamultiply
					spritetype = corneredTiled
					spriteborder = { 40 40 }
					texture_density = 2
				}

				modify_texture = {
					texture = "gfx/interface/buttons/button_stone_glass_overlay.dds"
					blend_mode = overlay
					texture_density = 2
				}

				modify_texture = {
					name = "glow"
					texture = "gfx/interface/buttons/button_stone_glass_glow.dds"
					blend_mode = colordodge
					alpha = 0
				}

				modify_texture = {
					name = "glow_selected"
					texture = "gfx/interface/buttons/button_stone_glass_glow.dds"
					blend_mode = colordodge
					alpha = 0
				}

				modify_texture = {
					name = "shimmer"
					visible = "[Bookmark.IsRecommended]"
					texture = "gfx/interface/component_effects/effect_shimmer.dds"
					blend_mode = colordodge
					translate_uv = { 0.2 0.2 }
				}

				modify_texture = {
					name = "shimmer_2"
					texture = "gfx/interface/component_effects/effect_shimmer.dds"
					blend_mode = colordodge
					translate_uv = { 1 -1 }
				}

				state = {
					name = "selected_glow"
					trigger_when = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"
					on_start = "[PdxGuiWidget.InterruptAnimation('bookmark_group_reset')]"
					duration = 0.25

					modify_texture = {
						name = "glow_selected"
						alpha = 1
					}
				}

				state = {
					name = "bookmark_group_reset"
					duration = 0.5
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_selected"
						alpha = 0
					}
				}

				state = {
					name = "mouse_enter"

					modify_texture = {
						name = "glow"
						alpha = 1
					}
				}

				state = {
					name = "mouse_leave"
					duration = 0.25
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow"
						alpha = 0
					}
				}

				#	Recommended shimmer
				state = {
					trigger_on_create = yes
					name = _show
					next = shimmer
					duration = 0.2
					delay = 5

					modify_texture = {
						name = "shimmer"
						translate_uv = { 1 -1 }
						alpha = 0.6
					}
				}

				state = {
					name = shimmer
					next = pause
					duration = 2

					bezier = { 0 0.9 1 0.4 }

					modify_texture = {
						name = "shimmer"
						translate_uv = { -1 1 }
						alpha = 0.6
					}
					start_sound = {
						soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_topbar_tab_shimmer_on_loop"
					}
				}

				state = {
					name = "pause"
					next = shimmer
					duration = 0
					delay = 5

					modify_texture = {
						name = "shimmer"
						translate_uv = { 1 -1 }
						alpha = 0.6
					}
				}

				# Shimmer on appear
				state = {
					name = "bookmarks_buttons_shimmer"
					next = "bookmarks_buttons_shimmer_2"
					duration = 2
					delay = 0.5

					modify_texture = {
						name = "shimmer_2"
						translate_uv = { -1 1 }
						alpha = 1
					}
				}

				state = {
					name = "bookmarks_buttons_shimmer_2"

					modify_texture = {
						name = "shimmer_2"
						translate_uv = { 1 -1 }
						alpha = 1
					}
				}

				icon = {
					parentanchor = bottom|hcenter
					size = { 100% 100% }
					texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
					color = { 0.1 0.1 0.1 0.5 }
				}

				icon = {
					size = { 100% 100% }
					spriteborder = { 30 30 }
					spriteType = corneredStretched
					texture = "gfx/interface/buttons/button_stone_glass_frame.dds"
					texture_density = 2

					modify_texture = {
						name = "shimmer"
						visible = "[Bookmark.IsRecommended]"
						texture = "gfx/interface/component_effects/effect_shimmer.dds"
						blend_mode = colordodge
						translate_uv = { 0.2 0.2 }
					}

					modify_texture = {
						name = "shimmer_2"
						texture = "gfx/interface/component_effects/effect_shimmer.dds"
						blend_mode = colordodge
						translate_uv = { 1 -1 }
					}

					# Recommended Shimmer
					state = {
						trigger_on_create = yes
						name = _show
						next = shimmer
						duration = 0.2
						delay = 5.15

						modify_texture = {
							name = "shimmer"
							translate_uv = { 1 -1 }
							alpha = 0.6
						}
					}

					state = {
						name = "shimmer"
						next = pause
						duration = 2

						bezier = { 0 0.9 1 0.4 }

						modify_texture = {
							name = "shimmer"
							translate_uv = { -1 1 }
							alpha = 0.6
						}
					}

					state = {
						name = "pause"
						next = shimmer
						duration = 0
						delay = 5

						modify_texture = {
							name = "shimmer"
							translate_uv = { 1 -1 }
							alpha = 0.6
						}
					}

					# Shimmer on appear
					state = {
						name = "bookmarks_buttons_shimmer"
						next = "bookmarks_buttons_shimmer_2"
						duration = 2
						delay = 0.65

						modify_texture = {
							name = "shimmer_2"
							translate_uv = { -1 1 }
							alpha = 1
						}
					}

					state = {
						name = "bookmarks_buttons_shimmer_2"

						modify_texture = {
							name = "shimmer_2"
							translate_uv = { 1 -1 }
							alpha = 1
						}
					}
				}

				vbox = {
					vbox = {
						layoutpolicy_horizontal = expanding
						margin_bottom = 5

						state = {
							name = _show
							using = Animation_Curve_Default
							duration = 0.3

							alpha = 1
							start_sound = {
								soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_topbar_tab_slide_out"
							}
						}

						state = {
							name = _hide
							duration = 0.2

							alpha = 0
						}

						text_single = {
							name = "year"
							text = "[Bookmark.GetDate.GetYear]"
							default_format = "#clickable;bold;glow_color:{0,0,0,1}"
							using = Font_Size_Medium
							using = Font_Type_Flavor
							max_width = 155

							background = {
								texture = "gfx/interface/component_masks/mask_fade_circle.dds"
								color = { 0.2 0.2 0.2 0.8 }
								margin = { 25 0 }
								margin_bottom = 7
							}
						}

						hbox = {
							spacing = 3

							icon = {
								visible = "[Bookmark.IsRecommended]"
								texture = "gfx/interface/icons/portraits/me_small.dds"
								size = { 18 18 }
							}

							text_single = {
								name = "bookmark_name"
								align = nobaseline
								max_width = 140

								text = "[Bookmark.GetName]"
								default_format = "#high;glow_color:{0,0,0,1}"
							}
						}
					}
				}
			}
		}
	}


	### Year Tab
	type widget_bookmark_group_button = widget {
		size = { 205 55 }
		allow_outside = yes

		button_normal = {
			parentanchor = top|hcenter
			position = { 0 5 }
			size = { 100% 100% }
			onclick = "[GameSetup.SelectBookmarkGroup( BookmarkGroup.Self )]"
			onclick = "[PdxGuiTriggerAllAnimations('bookmark_group_reset')]"
			onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_group_change','bookmark_group_change')]"
			onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_change','bookmark_change')]"
			onclick = "[PdxGuiInterruptThenTriggerAllAnimations('map_characters_appear','map_characters_appear')]"
			onclick = "[GetVariableSystem.Clear( 'show_character_info' )]"
			down = "[GameSetup.IsBookmarkGroupSelected( BookmarkGroup.Self )]"
			alwaystransparent = "[GameSetup.IsBookmarkGroupSelected( BookmarkGroup.Self )]"

			state = {
				name = "_mouse_enter"
				on_start = "[PdxGuiWidget.FindChild('bookmarks_button').TriggerAnimation('mouse_enter')]"
			}

			state = {
				on_start = "[PdxGuiWidget.FindChild('bookmarks_button').TriggerAnimation('mouse_leave')]"
				name = "_mouse_leave"
			}

			state = {
				name = "button_selection"
				trigger_when = "[GameSetup.IsBookmarkGroupSelected( BookmarkGroup.Self )]"
				on_start = "[PdxGuiWidget.InterruptAnimation('bookmark_group_reset')]"
				delay = 0.05
				duration = 0.1
				using = Animation_Curve_Default
				position_y = 15
			}

			state = {
				name = "bookmark_group_reset"
				duration = 0.3
				using = Animation_Curve_Default
				position_y = 5
			}

			icon = {
				name = "bookmarks_button"
				parentanchor = bottom|hcenter
				size = { 100% 75 }
				alwaystransparent = yes
				#texture = "[BookmarkGroup.GetButtonIcon]"
				texture = "gfx/interface/icons/bookmark_buttons/year_tab.dds"

				using = tooltip_ne

				modify_texture = {
					texture = "gfx/interface/buttons/button_stone_glass_mask.dds"
					blend_mode = alphamultiply
					spritetype = corneredTiled
					spriteborder = { 40 40 }
					texture_density = 2
				}

				modify_texture = {
					texture = "gfx/interface/buttons/button_stone_glass_overlay.dds"
					blend_mode = overlay
					texture_density = 2
				}

				modify_texture = {
					name = "glow"
					texture = "gfx/interface/buttons/button_stone_glass_glow.dds"
					blend_mode = colordodge
					alpha = 0
				}

				modify_texture = {
					name = "glow_selected"
					texture = "gfx/interface/buttons/button_stone_glass_glow.dds"
					blend_mode = colordodge
					alpha = 0
				}

				modify_texture = {
					name = "shimmer"
					visible = "[GameSetup.IsBookmarkGroupSelected( BookmarkGroup.Self )]"
					texture = "gfx/interface/component_effects/effect_shimmer.dds"
					blend_mode = colordodge
					translate_uv = { 0.2 0.2 }
				}

				modify_texture = {
					name = "shimmer_2"
					texture = "gfx/interface/component_effects/effect_shimmer.dds"
					blend_mode = colordodge
					translate_uv = { 1 -1 }
				}

				state = {
					name = "selected_glow"
					trigger_when = "[GameSetup.IsBookmarkGroupSelected( BookmarkGroup.Self )]"
					on_start = "[PdxGuiWidget.InterruptAnimation('bookmark_group_reset')]"
					duration = 0.25

					modify_texture = {
						name = "glow_selected"
						alpha = 1
					}
				}

				state = {
					name = "bookmark_group_reset"
					duration = 0.5
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_selected"
						alpha = 0
					}
				}

				state = {
					name = "mouse_enter"

					modify_texture = {
						name = "glow"
						alpha = 1
					}
				}

				state = {
					name = "mouse_leave"
					duration = 0.25
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow"
						alpha = 0
					}
				}

				#	Recommended shimmer
				state = {
					trigger_on_create = yes
					name = _show
					next = shimmer
					duration = 0.2
					delay = 5

					modify_texture = {
						name = "shimmer"
						translate_uv = { 1 -1 }
						alpha = 0.6
					}
				}

				state = {
					name = shimmer
					next = pause
					duration = 2

					bezier = { 0 0.9 1 0.4 }

					modify_texture = {
						name = "shimmer"
						translate_uv = { -1 1 }
						alpha = 0.6
					}

					start_sound = {
						soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_topbar_tab_shimmer_on_loop"
					}
				}

				state = {
					name = "pause"
					next = shimmer
					duration = 0
					delay = 5

					modify_texture = {
						name = "shimmer"
						translate_uv = { 1 -1 }
						alpha = 0.6
					}
				}

				# Shimmer on appear
				state = {
					name = "bookmarks_buttons_shimmer"
					next = "bookmarks_buttons_shimmer_2"
					duration = 2
					delay = 0.5

					modify_texture = {
						name = "shimmer_2"
						translate_uv = { -1 1 }
						alpha = 1
					}
				}

				state = {
					name = "bookmarks_buttons_shimmer_2"

					modify_texture = {
						name = "shimmer_2"
						translate_uv = { 1 -1 }
						alpha = 1
					}
				}

				icon = {
					parentanchor = bottom|hcenter
					size = { 100% 100% }
					texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
					color = { 0.1 0.1 0.1 0.5 }
				}

				icon = {
					size = { 100% 100% }
					spriteborder = { 30 30 }
					spriteType = corneredStretched
					texture = "gfx/interface/buttons/button_stone_glass_frame.dds"
					texture_density = 2

					modify_texture = {
						name = "shimmer"
						visible = "[GameSetup.IsBookmarkGroupSelected( BookmarkGroup.Self )]"
						texture = "gfx/interface/component_effects/effect_shimmer.dds"
						blend_mode = colordodge
						translate_uv = { 0.2 0.2 }
					}

					modify_texture = {
						name = "shimmer_2"
						texture = "gfx/interface/component_effects/effect_shimmer.dds"
						blend_mode = colordodge
						translate_uv = { 1 -1 }
					}

					# Recommended Shimmer
					state = {
						trigger_on_create = yes
						name = _show
						next = shimmer
						duration = 0.2
						delay = 5.15

						modify_texture = {
							name = "shimmer"
							translate_uv = { 1 -1 }
							alpha = 0.6
						}
					}

					state = {
						name = "shimmer"
						next = pause
						duration = 2

						bezier = { 0 0.9 1 0.4 }

						modify_texture = {
							name = "shimmer"
							translate_uv = { -1 1 }
							alpha = 0.6
						}
					}

					state = {
						name = "pause"
						next = shimmer
						duration = 0
						delay = 5

						modify_texture = {
							name = "shimmer"
							translate_uv = { 1 -1 }
							alpha = 0.6
						}
					}

					# Shimmer on appear
					state = {
						name = "bookmarks_buttons_shimmer"
						next = "bookmarks_buttons_shimmer_2"
						duration = 2
						delay = 0.65

						modify_texture = {
							name = "shimmer_2"
							translate_uv = { -1 1 }
							alpha = 1
						}
					}

					state = {
						name = "bookmarks_buttons_shimmer_2"

						modify_texture = {
							name = "shimmer_2"
							translate_uv = { 1 -1 }
							alpha = 1
						}
					}
				}

				vbox = {

					vbox = {
						layoutpolicy_horizontal = expanding
						margin_bottom = 15

						state = {
							name = _show
							using = Animation_Curve_Default
							duration = 0.3

							alpha = 1
							start_sound = {
								soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_topbar_tab_slide_out"
							}
						}

						state = {
							name = _hide
							duration = 0.2

							alpha = 0
						}

						text_single = {
							name = "year"
							text = "[BookmarkGroup.GetName]"
							default_format = "#high;bold;glow_color:{0,0,0,1}"
							using = Font_Size_Big
							using = Font_Type_Flavor
							max_width = 155

							background = {
								texture = "gfx/interface/component_masks/mask_fade_circle.dds"
								color = { 0.1 0.1 0.1 1 }
								margin = {30 0 }
								margin_bottom = 10
							}
						}
					}
				}
			}
		}
	}

	type bookmark_button = button_normal {
		size = { 100% 100% }
		position = { -60 0}
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_change','bookmark_change')]"
		onclick = "[PdxGuiTriggerAllAnimations('bookmark_tab_reset')]"
		onclick = "[PdxGuiInterruptThenTriggerAllAnimations('map_characters_appear','map_characters_appear')]"
		onclick = "[GameSetup.SetSelectedBookmark( Bookmark.Self )]"
		onclick = "[GetVariableSystem.Clear( 'show_character_info' )]"
		down = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"
		alwaystransparent = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"

		state = {
			name = "_mouse_enter"
			on_start = "[PdxGuiWidget.FindChild('bookmarks_button').TriggerAnimation('mouse_enter')]"
		}

		state = {
			on_start = "[PdxGuiWidget.FindChild('bookmarks_button').TriggerAnimation('mouse_leave')]"
			name = "_mouse_leave"
		}

		state = {
			name = "button_selection"
			trigger_when = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"
			on_start = "[PdxGuiWidget.InterruptAnimation('bookmark_tab_reset')]"
			delay = 0.05
			duration = 0.1
			using = Animation_Curve_Default

			position_x = -20
		}

		state = {
			name = "bookmark_group_reset"
			duration = 0.3
			using = Animation_Curve_Default

			position_x = -60
		}

		state = {
			name = "bookmark_tab_reset"
			trigger_when = "[Not( GameSetup.IsBookmarkSelected( Bookmark.Self ) )]"
			duration = 0.3
			using = Animation_Curve_Default

			position_x = -60
		}

		icon = {
			name = "bookmarks_button"
			parentanchor = bottom|hcenter
			size = { 100% 100% }
			alwaystransparent = yes
			using = tooltip_ne

			background = {
				texture = "[Bookmark.GetButtonIcon]"
			}

			modify_texture = {
				texture = "gfx/interface/bookmarks/bm_mask.dds"
				blend_mode = alphamultiply
				spritetype = corneredTiled
				spriteborder = { 40 40 }
				texture_density = 2
			}

			modify_texture = {
				texture = "gfx/interface/bookmarks/bm_overlay.dds"
				blend_mode = overlay
				texture_density = 2
			}

			modify_texture = {
				name = "tab_glow"
				texture = "gfx/interface/bookmarks/bm_glow.dds"
				blend_mode = colordodge
				alpha = 0
			}

			modify_texture = {
				name = "tab_glow_selected"
				texture = "gfx/interface/bookmarks/bm_glow.dds"
				blend_mode = colordodge
				alpha = 0
			}

			modify_texture = {
				name = "tab_shimmer"
				visible = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"
				texture = "gfx/interface/component_effects/effect_shimmer.dds"
				blend_mode = colordodge
				translate_uv = { 0.2 0.2 }
			}

			modify_texture = {
				name = "tab_shimmer_2"
				texture = "gfx/interface/component_effects/effect_shimmer.dds"
				blend_mode = colordodge
				translate_uv = { 1 -1 }
			}

			state = {
				name = "tab_selected_glow"
				trigger_when = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"
				on_start = "[PdxGuiWidget.InterruptAnimation('bookmark_tab_reset')]"
				duration = 0.25

				modify_texture = {
					name = "tab_glow_selected"
					alpha = 1
				}
			}

			state = {
				name = "bookmark_tab_reset"
				duration = 0.3
				using = Animation_Curve_Default

				modify_texture = {
					name = "tab_glow_selected"
					alpha = 0
				}
			}

			state = {
				name = "mouse_enter"

				modify_texture = {
					name = "tab_glow"
					alpha = 1
				}
			}

			state = {
				name = "mouse_leave"
				duration = 0.25
				using = Animation_Curve_Default

				modify_texture = {
					name = "tab_glow"
					alpha = 0
				}
			}

			#	Recommended shimmer
			state = {
				trigger_on_create = yes
				name = _show
				next = shimmer
				duration = 0.2
				delay = 5

				modify_texture = {
					name = "tab_shimmer"
					translate_uv = { 1 -1 }
					alpha = 0.6
				}
			}

			state = {
				name = shimmer
				next = pause
				duration = 2

				bezier = { 0 0.9 1 0.4 }

				modify_texture = {
					name = "tab_shimmer"
					translate_uv = { -1 1 }
					alpha = 0.6
				}
				start_sound = {
					soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_topbar_tab_shimmer_on_loop"
				}
			}

			state = {
				name = "pause"
				next = shimmer
				duration = 0
				delay = 5

				modify_texture = {
					name = "tab_shimmer"
					translate_uv = { 1 -1 }
					alpha = 0.6
				}
			}

			# Shimmer on appear
			state = {
				name = "bookmark_tab_shimmer"
				next = "bookmark_tab_shimmer_2"
				duration = 2
				delay = 0.5

				modify_texture = {
					name = "tab_shimmer_2"
					translate_uv = { -1 1 }
					alpha = 1
				}
			}

			state = {
				name = "bookmark_tab_shimmer_2"

				modify_texture = {
					name = "tab_shimmer_2"
					translate_uv = { 1 -1 }
					alpha = 1
				}
			}

			widget= {
				size = {100% 100%}

				background = {
					texture = "gfx/interface/bookmarks/bm_shadow.dds"
					alpha = 0.5
				}

				hbox = {
					margin = { 5 0 }
					spacing = 7
					expand = {}

					widget ={
						size = {20 20}
					}

					text_single = {
						text = "[Bookmark.GetName]"
						default_format = "#high;glow_color:{0,0,0,1}"
						align = nobaseline
						using = Font_Size_Medium
					}

					icon = {
						visible = "[Bookmark.IsRecommended]"
						texture = "gfx/interface/icons/portraits/me_small.dds"
						size = { 22 22 }
					}

					expand = {}
				}
				state = {
					name = "button_selection"
					trigger_when = "[GameSetup.IsBookmarkSelected( Bookmark.Self )]"
					on_start = "[PdxGuiWidget.InterruptAnimation('bookmark_tab_reset')]"
					delay = 0.05
					duration = 0.1
					using = Animation_Curve_Default

					alpha = 0
				}

				state = {
					name = "bookmark_tab_reset"
					duration = 0.3
					using = Animation_Curve_Default

					alpha = 1
				}
			}
		}

		icon = {
			size = { 100% 100% }
			parentanchor = bottom|hcenter
			background = {
				texture = "gfx/interface/icons/bookmark_buttons/bookmark_tab_frame.dds"
			}
		}
	}

	type button_group_map_character_selection = button_group {
		flowcontainer = {
			margin = { -15 0 }
			margin_top = 120
			margin_bottom = -95

			container = {
				alwaystransparent = yes

				icon = {
					parentanchor = top|hcenter
					widgetanchor = bottom|hcenter
					position = { 0 50 }
					size = { 80% 100% }
					texture = "gfx/interface/component_masks/mask_fade_halfcircle.dds"
					color = { 0.58 0.55 0.5 0.8 }
					mirror = vertical
				}

				bm_portrait = {
					parentanchor = top|hcenter
					widgetanchor = bottom|hcenter
					position = { 0 30 }
					size = { 250 190 }
					alwaystransparent = yes

					blockoverride "portrait_button"
					{
						portrait_texture = "[BookmarkCharacter.GetPortrait( 'environment_bookmarks_map', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
					}
				}

				margin_widget = {
					parentanchor = center|hcenter
					size = { 100% 100 }
					margin = { 10 0 }
					margin_left = 15

					icon = {
						size = { 100% 100% }
						parentanchor = center
						texture = "gfx/interface/component_masks/mask_fade_halfcircle.dds"
						color = { 0.58 0.55 0.5 1 }
					}
				}

				flowcontainer = {
					margin_left = 15
					allow_outside = yes

					icon = {
						texture = "gfx/interface/icons/banners/banner_blue_left.dds"
						spriteType = Corneredtiled
						spriteborder = { 72 0 }
						spriteborder_right = 114
						texture_density = 2
						allow_outside = yes

						modify_texture = {
							name = overlay
							visible = "[Not( GameSetup.IsCharacterSelected( BookmarkCharacter.Self ) )]"
							texture = "gfx/interface/component_effects/effect_blue_shine.dds"
							blend_mode = colordodge
							translate_uv = { 0.6 0 }
						}

						state = {
							trigger_on_create = yes
							name = "start"
							next = "right"

							duration = 0

							modify_texture = {
								name = overlay
								translate_uv = { 0.6 0 }
								alpha = 0.9
							}
						}

						state = {
							name = "right"
							next = "left"

							duration = 2
							using = Animation_Curve_Default

							modify_texture = {
								name = overlay
								translate_uv = { -0.6 0 }
								alpha = 0.6
							}
						}

						state = {
							name = "left"
							next = "right"

							duration = 0
							delay = 5

							modify_texture = {
								name = overlay
								translate_uv = { 0.9 0 }
								alpha = 0.9
							}
						}

						glow = {
							color = { 0.1 0.1 0.1 0.2 }
							glow_radius = 10

							glow_generation_rules = {
								glow_alpha_mask = 0
								glow_blur_passes = 10
								glow_texture_downscale = 5.5f
								glow_ignore_inside_pixels = yes
							}
						}

						icon = {
							name = "banner_hover_glow"
							size = { 100% 100% }
							texture = "gfx/interface/icons/banners/banner_blue_left_glow.dds"
							spriteType = Corneredtiled
							spriteborder = { 72 0 }
							spriteborder_right = 114
							texture_density = 2
							alpha = 0

							state = {
								name = "bookmark_character_hover_enter"
								alpha = 1
								duration = 0.05
								using = Animation_Curve_Default
							}

							state = {
								name = "bookmark_character_hover_leave"
								alpha = 0
								duration = 0.2
								using = Animation_Curve_Default
							}
						}

						icon = {
							visible = "[GameSetup.IsCharacterSelected( BookmarkCharacter.Self )]"
							visible_at_creation = no
							size = { 100% 100% }
							texture = "gfx/interface/icons/banners/banner_blue_left_glow.dds"
							spriteType = Corneredtiled
							spriteborder = { 72 0 }
							spriteborder_right = 114
							texture_density = 2

							state = {
								name = _show
								using = Animation_FadeIn_Quick
								next = pulse_a
								alpha = 1
							}

							state = {
								name = "pulse_a"
								alpha = 1
								duration = 1
								next = pulse_b
								using = Animation_Curve_Default
							}

							state = {
								name = "pulse_b"
								alpha = 0.7
								duration = 1
								next = pulse_a
								using = Animation_Curve_Default
							}
						}

						vbox = {
							parentanchor = bottom|hcenter
							widgetanchor = top|hcenter
							position = { 0 -47 }
							allow_outside = yes

							vbox = {
								# This vbox is necessary to not get flowcontainer inherited padding
								spacing = 1

								text_single = {
									text = "ADVENTURER_BOOKMARK_CHARACTER_TITLE"
									default_format = "#light_background"
									visible = "[BookmarkCharacter.GetGovernmentType.IsType('landless_adventurer_government')]"
								}

								text_single = {
									text = "BOOKMARK_CHARACTER_TITLE"
									default_format = "#light_background"
									visible = "[Not( Or( BookmarkCharacter.GetGovernmentType.IsType( 'landless_adventurer_government' ), BookmarkCharacter.GetGovernmentType.IsType( 'administrative_government' ) ) )]"
								}

								text_single = {
									text = "ADMIN_BOOKMARK_CHARACTER_TITLE"
									default_format = "#light_background"
									visible = "[BookmarkCharacter.GetGovernmentType.IsType( 'administrative_government' ) )]"
								}

								text_single = {
									text = "[BookmarkCharacter.GetDifficulty]"
								}
							}
						}

						coa_realm_bookmark = {
							visible = "[And(And(Not(BookmarkCharacter.GetGovernmentType.IsType('clan_government')),Not(BookmarkCharacter.GetGovernmentType.IsType('adventurer_government'))), Not(BookmarkCharacter.GetGovernmentType.IsType( 'administrative_government' )))]"
							position = { 0 -25 }
						}

						coa_realm_bookmark = {
							visible = "[And(HasDlcFeature( 'admin_gov' ), BookmarkCharacter.GetGovernmentType.IsType( 'administrative_government' ))]"
							position = { 0 -25 }
						}

						coa_admin_nodlc_bookmark = {
							visible = "[And(Not(HasDlcFeature( 'admin_gov' )), BookmarkCharacter.GetGovernmentType.IsType( 'administrative_government' ))]"
							position = { 0 -25 }
						}

						coa_clan_bookmark = {
							visible = "[BookmarkCharacter.GetGovernmentType.IsType('clan_government')]"
							position = { 0 -25 }
						}

						coa_adventurer_bookmark = {
							visible = "[BookmarkCharacter.GetGovernmentType.IsType('landless_adventurer_government')]"
							position = { 0 -25 }
						}

						flowcontainer = {
							direction = vertical
							margin_left = 70
							margin_right = 75
							margin_top = 9
							margin_bottom = 35
							spacing = -6
							resizeparent = yes
							ignoreinvisible = yes

							text_single = {
								text = "[BookmarkCharacter.GetName]"
								fontsize = 21
								default_format = "#high;bold;glow_color:{0,0,0,1}"
							}

							text_single = {
								visible = "[Not( BookmarkCharacter.HasDynastyHouse )]"
								text = "[BookmarkCharacter.GetDynastyTemplate.GetName]"
								fontsize = 16
								default_format = "#high;glow_color:{0,0,0,1}"
							}

							text_single = {
								visible = "[BookmarkCharacter.HasDynastyHouse]"
								text = "[BookmarkCharacter.GetDynastyHouseTemplate.GetName]"
								fontsize = 16
								default_format = "#high;glow_color:{0,0,0,1}"
							}
						}
					}
				}
			}
		}
	}

	type bm_portrait = widget {

		portrait_button = {
			parentanchor = center
			size = { 100% 100% }
			using = portrait_base
			name = "culture_head_portrait"
			portrait_texture = "[BookmarkCharacter.GetPortrait( 'environment_bookmarks_map', 'camera_head', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
			background_texture = "gfx/portraits/portrait_transparent.dds"
			texture = "gfx/portraits/portrait_transparent.dds"
			framesize = { 86 129 }
			mask = "gfx/portraits/portrait_mask_council.dds"

			effectname = "NoHighlight"
			alwaystransparent = yes

			block "portrait_tooltip" {
				tooltip_visible = no
			}

			block "portrait_button" {}

			blockoverride "portrait_button_template_tooltip"
			{
				tooltip = "[BookmarkCharacter.GetTooltip]"
			}

			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}

			blockoverride "coa" {}
			blockoverride "status_icons" {}
			blockoverride "opinion_box" {}
			blockoverride "imprisonment" {}
			blockoverride "player_overlay" {}
			blockoverride "grayscale"{}
			blockoverride "TODO_debug_info" {}
		}
	}
}

types GameSetupTypes
{
	type gamesetup_tutorial_prompt = window {
		movable = no
		resizable = no
		using = Window_Background_Subwindow

		vbox = {
			using = Window_Margins
			set_parent_size_to_minimum = yes

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					raw_text = "[Localize('GAMESETUP_TUTORIAL_PROMPT_HEADER')]."
				}
				blockoverride "button_back"
				{
					visible = no
				}
				blockoverride "button_close"
				{
					onclick = "[GameSetup.OnSkipTutorial]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				hbox = {

					vbox = {
						layoutpolicy_vertical = expanding
						margin = { 5 15 }

						text_multi_wide = {
							text = "GAMESETUP_TUTORIAL_PROMPT_INTRO"
						}

						text_multi_wide = {
							text = "GAMESETUP_TUTORIAL_PROMPT_RECOMMEND"
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_multi_wide = {
								text = "GAMESETUP_TUTORIAL_PROMPT_ABOUT_RULER"
							}

							expand = {}
						}

						expand = {}
					}

				}

				vbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 10 }
					spacing = 15

					background = {
						using = Background_Area
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "GAMESETUP_TUTORIAL_PROMPT_ASK"
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						button_primary_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								text = "GAMESETUP_TUTORIAL_PROMPT_PLAY_TUTORIAL"
							}
							onclick = "[GameSetup.OnPlayTutorial]"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							shortcut = close_window
							onclick = "[GameSetup.OnSkipTutorial]"
						    blockoverride "text" {
								raw_text = "[Localize('GAMESETUP_TUTORIAL_PROMPT_DISABLE')], Escape."
						    }
						}
					}
				}
			}
		}
	}

	type dlc_button = button {
		datacontext = "[DlcItem.GetDlc]"
		size = "[Dlc.GetIconSize]"
		texture = "[Dlc.GetIcon]"
		onclick = "[DlcItem.ShowInStore]"
		tooltip = "DLC_BUTTON_TOOLTIP"
		using = tooltip_nw

		modify_texture = {
			visible = "[Not( Dlc.IsEnabled )]"
			texture = "gfx/interface/colors/black.dds"
			blend_mode = normal
			alpha = 0.4
		}
	}

	type shortcut_bookmark = button {
		onclick = "[PdxGuiTriggerAllAnimations('bookmark_character_change')]"
		onclick = "[GameSetup.SetSelectedCharacter( BookmarkCharacter.Self )]"
		onclick = "[GetVariableSystem.Set( 'show_character_info', 'true' )]"
	}
}


template date_click {
	onclick = "[GameSetup.SelectBookmarkGroup( BookmarkGroup.Self )]"
	onclick = "[PdxGuiTriggerAllAnimations('bookmark_group_reset')]"
	onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_group_change','bookmark_group_change')]"
	onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_change','bookmark_change')]"
	onclick = "[PdxGuiInterruptThenTriggerAllAnimations('map_characters_appear','map_characters_appear')]"
	onclick = "[GetVariableSystem.Clear( 'show_character_info' )]"
}

template bookmark_click {
	onclick = "[PdxGuiInterruptThenTriggerAllAnimations('bookmark_change','bookmark_change')]"
	onclick = "[PdxGuiTriggerAllAnimations('bookmark_tab_reset')]"
	onclick = "[PdxGuiInterruptThenTriggerAllAnimations('map_characters_appear','map_characters_appear')]"
	onclick = "[GameSetup.SetSelectedBookmark( Bookmark.Self )]"
	onclick = "[GetVariableSystem.Clear( 'show_character_info' )]"
}
