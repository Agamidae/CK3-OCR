types JominiServerBrowser {

	type JominiMultiplayerPushButton = button {
		block "jomini_multiplayer_push_button"
		{
			texture = "gfx/editor_gui/editor_button.dds"
			gfxtype = framedbuttongfx
			spriteType = CorneredStretched
			spriteborder = { 4 4 }
			effectname = "NoHighlight"
			framesize = { 16 16 }
			upframe = 1
			downframe = 2
			overframe = 3
			disableframe = 4
			intersectionmask = yes
		}
	}

	type JominiServerBrowserWindow = window {
		name = "JominiServerBrowser"
		size = { 955 92% }

		movable = no

		state = {
			name = _show

			using = Animation_FadeIn_Standard
			using = Sound_WindowShow_Standard

			on_start = "[GetVariableSystem.Clear('major_region')]"
			on_start = "[GetVariableSystem.Clear('second_region')]"
			on_start = "[GetVariableSystem.Clear('region')]"
			on_start = "[GetVariableSystem.Clear('regions')]"
			on_start = "[GetVariableSystem.Clear('server_ID')]"
			on_start = "[GetVariableSystem.Clear('kingdom_list')]"
		}

		state = {
			name = _hide
			on_finish = "[GetVariableSystem.Clear('kingdom_list')]"
			on_finish = "[GetVariableSystem.Clear('major_region')]"
			on_finish = "[GetVariableSystem.Clear('second_region')]"
			on_finish = "[GetVariableSystem.Clear('region')]"
			on_finish = "[GetVariableSystem.Clear('regions')]"
			using = Animation_FadeOut_Standard
			using = Sound_WindowHide_Standard
		}

		block "serverbrowser_background" { }

		vbox = {
			spacing = 5
			using = Window_Margins_Sidebar
			margin_right = 20

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					raw_text = "[Localize('JOMINI_MULTIPLAYER_SERVER_BROWSER_HEADER')]."
				}

				blockoverride "button_close" {
					visible = no
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_top = 15
				margin_left = 10

				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[GetVariableSystem.Exists('server_ID')]"

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						JominiMultiplayerTextbox = {
							raw_text = "Review server id:"
							autoresize = yes
						}

						editbox_standard = {
							layoutpolicy_horizontal = expanding
							blockoverride "editbox_properties"
							{
								name = "server_id_editbox"
							}
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "Join the game using the id."
						}
						minimumsize = { 220 0 }
						onclick = "[JominiServerBrowserGui.JoinServerWithId]"
						block "serverbrowser_join_server" { }
					}

					button_text = {
						layoutpolicy_horizontal = expanding
					    blockoverride "text" {
					        raw_text = "Hide server id."
					    }
						onclick = "[GetVariableSystem.Clear('server_ID')]"
					}
				}


				button_text = {
					layoutpolicy_horizontal = expanding
				    blockoverride "text" {
				        raw_text = "Paste server id from clipboard if you were sent one."
				    }
					onclick = "[JominiServerBrowserGui.SetServerId]"
					onclick = "[GetVariableSystem.Set('server_ID', 'yes')]"
				}

				### PUBLIC GAME ###
				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5
					margin = { 5 0 }
					margin_right = 10

					text_single = {
						raw_text = "[GetDataModelSize(JominiServerBrowserGui.AccessServers)] [Localize('JOMINI_MULTIPLAYER_PUBLIC_GAMES')]."
						layoutpolicy_horizontal = expanding
						align = left
						default_format = "#low"
					}

					vbox = {
						#TODO
						visible = "[GetVariableSystem.Exists('mp_sorting')]"
						layoutpolicy_horizontal = expanding
						spacing = 5
						margin_top = 20
						margin_left = 10

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "Sort by:"
						}

						### SERVER/GAME NAME ###
						button_standard_list = {
							size = { 260 33 }
							layoutpolicy_horizontal = expanding
							onclick = "[JominiServerBrowserGui.Sort( 'name' )]"
							tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_SERVER_NAME"
							using = tooltip_ne

							hbox = {
								spacing = 5
								margin_left = 10

								text_single = {
									layoutpolicy_vertical = expanding
									align = left
									text = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_LABEL_SERVER_NAME"
									max_width = 250
								}

								expand = { }

								vbox = {
									layoutpolicy_vertical = expanding

									JominiMultiplayerSortButtonAsc = {
										visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'name' ) )]"
									}

									JominiMultiplayerSortButtonDesc = {
										visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'name' ) )]"
									}
								}
							}
						}

							### PLAYERS ###
						button_standard_list = {
							layoutpolicy_horizontal = expanding
							size = { 140 33 }
							onclick = "[JominiServerBrowserGui.Sort( 'players_count' )]"
							tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_PLAYERS"
							using = tooltip_ne

							hbox = {
								spacing = 5
								margin_left = 10

								text_single = {
									layoutpolicy_vertical = expanding
									align = left
									text = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_LABEL_PLAYERS"
								}

								expand = { }

								vbox = {
									layoutpolicy_vertical = expanding

									JominiMultiplayerSortButtonAsc = {
										visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'players_count' ) )]"
									}

									JominiMultiplayerSortButtonDesc = {
										visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'players_count' ) )]"
									}
								}
							}
						}

						### STATUS ###
						button_standard_list = {
							layoutpolicy_horizontal = expanding
							size = { 150 33 }
							onclick = "[JominiServerBrowserGui.Sort( 'status' )]"
							tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_STATUS"
							using = tooltip_ne

							hbox = {
								spacing = 5
								margin = { 5 0 }

								text_single = {
									layoutpolicy_vertical = expanding
									align = left
									text = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_LABEL_STATUS"
								}

								expand = { }

								vbox = {
									layoutpolicy_vertical = expanding

									JominiMultiplayerSortButtonAsc = {
										visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'status' ) )]"
									}

									JominiMultiplayerSortButtonDesc = {
										visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'status' ) )]"
									}
								}
							}
						}

						### CHECKSUM ###
						button_standard_list = {
							layoutpolicy_horizontal = expanding
							size = { 145 33 }
							onclick = "[JominiServerBrowserGui.Sort( 'version' )]"
							tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_VERSION"
							using = tooltip_ne

							hbox = {
								spacing = 5
								margin_left = 10

								text_single = {
									layoutpolicy_vertical = expanding
									minimumsize = { 70 0 }
									align = left
									text = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_LABEL_VERSION"
								}

								expand = { }

								vbox = {
									layoutpolicy_vertical = expanding

									JominiMultiplayerSortButtonAsc = {
										visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'version' ) )]"
									}

									JominiMultiplayerSortButtonDesc = {
										visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'version' ) )]"
									}
								}
							}
						}

						### PASSWORD ###
						button_standard_list = {
							layoutpolicy_horizontal = expanding
							size = { 80 33 }
							onclick = "[JominiServerBrowserGui.Sort( 'has_password' )]"
							tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_PASSWORD"
							using = tooltip_ne

							hbox = {
								margin_left = 10

								text_single = {
									raw_text = "Has password"
								}

								expand = { }

								vbox = {
									layoutpolicy_vertical = expanding

									JominiMultiplayerSortButtonAsc = {
										visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'has_password' ) )]"
									}

									JominiMultiplayerSortButtonDesc = {
										visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'has_password' ) )]"
									}
								}
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "Filters:"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "pre" {
								text_single = {
									raw_text = "[Select_CString(JominiServerBrowserGui.IsHasPasswordFilterSet, 'Disabled', 'Enabled')],"
								}
								space = { }
							}
						    blockoverride "text" {
								raw_text = "[Localize('JOMINI_MULTIPLAYER_GUI_SERVER_FILTER_LABEL_HAS_PASSWORD')]."
								align = left
						    }
							onclick = "[JominiServerBrowserGui.ToggleHasPasswordFilter]"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
						    blockoverride "pre" {
								text_single = {
									raw_text = "[Select_CString(JominiServerBrowserGui.IsSameVersionFilterSet, 'Enabled', 'Disabled')],"
								}
								space = { }
						    }
							blockoverride "text" {
								raw_text = "[Localize('TITUS_FILTER_SAME_VERSION')]"
								align = left
							}
							onclick = "[JominiServerBrowserGui.ToggleSameVersionFilter]"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							visible = "[JominiMultiplayerIsCrossplayFilterAvailable]"
						    blockoverride "pre" {
								text_single = {
									raw_text = "[Select_CString(JominiServerBrowserGui.IsCrossPlatformFilterSet, 'Disabled', 'Enabled')],"
								}
								space = { }
						    }
							blockoverride "text" {
								raw_text = "[Localize('MULTIPLAYER_GUI_PUBLIC_MICROSOFT_ONLY')]."
								align = left
							}
							onclick = "[JominiServerBrowserGui.ToggleCrossPlatformFilter]"
							enabled = "[JominiMultiplayerIsCrossplayEnabled]"
						}

						editbox_search_field = {
							layoutpolicy_horizontal = expanding
							blockoverride "editbox_properties"
							{
								name = "game_name_filter_editbox" #not used in code
								ontextedited = "[JominiServerBrowserGui.OnFilterTextEdit]"
								ontextedited = "[PdxGuiWidget.FindChild('text').Hide]"

								text_single = {
									margin_left = 5
									name = "text"
									raw_text = "Enter text here to filter by name."
								}
							}
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							onclick = "[JominiServerBrowserGui.RefreshServers]"
						    blockoverride "text" {
								raw_text = "[Localize('REFRESH')]."
						    }
						}
					}
				}

				button_text = {
					layoutpolicy_horizontal = expanding
				    blockoverride "text" {
				        raw_text = "[Select_CString(GetVariableSystem.Exists('mp_sorting'), 'Hide', 'Show')] sorting options, Shift S."
				    }
					onclick = "[GetVariableSystem.Toggle('mp_sorting')]"
					shortcut = mapmode_culture_secondary
				}

				scrollbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content"
					{
						vbox = {
							datamodel = "[JominiServerBrowserGui.AccessServers]"
							layoutpolicy_horizontal = expanding
							spacing = 5

							item = {
								hbox = {
									layoutpolicy_horizontal = expanding

									button = {
										size = { 0 30 }
										layoutpolicy_horizontal = expanding
										onclick = "[JominiServer.Join]"
										tooltip_enabled = "[Not(JominiServer.IsSameVersion)]"
										tooltip = "JOMINI_MULTIPLAYER_GUI_VERSION_MISMATCH_SERVER_BROWSER"
										enabled = "[JominiServer.IsSameVersion]"

										hbox = {
											spacing = 5

											widget = {
												size = { 255 33 }

												hbox = {
													margin_left = 10
													spacing = 3

													text_single = {
														raw_text = "Can't"
														visible = "[Not(JominiServer.IsSameVersion)]"

													}

													text_single = {
														raw_text = "Join"
													}

													text_single = {
														raw_text = "[JominiServer.GetName]."
													}

													text_single = {
														raw_text = "[JominiServer.GetNumPlayers] players out of [JominiServer.GetMaxPlayers],"
													}
													text_single = {
														raw_text = "[JominiServer.GetStatus],"
													}

													text_single = {
														raw_text = "checksum: [JominiServer.GetVersion]"
													}

													text_single = {
														raw_text = "has password,"
														visible = "[JominiServer.GetHasPassword]"
													}
												}
											}

											expand = {
												layoutpolicy_horizontal = expanding
											}
										}
									}
								}
							}
						}
					}

					blockoverride "scrollbox_empty"
					{
						text = "JOMINI_MULTIPLAYER_SERVER_BROWSER_EMPTY"
						layoutpolicy_vertical = expanding
						visible = "[Or( IsDataModelEmpty( JominiServerBrowserGui.AccessServers ), JominiServerBrowserGui.IsRefreshing )]"
					}
				}
			}
		}
	}

	type JominiJoinServerDialogWindow = window {
		name = "JominiJoinServerDialog"
		modal = yes
		modality = all

		position = { 0 0 }
		parentanchor = center
		widgetanchor = center

		size = { 300 75 }
		using = Window_Background_Popup

		vbox = {
			spacing = 10
			restrictparent_min = yes
			using = Window_Margins


			hbox = {
				spacing = 10
				layoutpolicy_horizontal = expanding

				JominiMultiplayerTextbox = {
					text = "JOMINI_MULTIPLAYER_GUI_POPUP_PASSWORD"
					autoresize = yes
				}

				editbox_standard = {
					layoutpolicy_horizontal = expanding

					blockoverride "editbox_properties"
					{
						onreturnpressed = "[JominiPasswordPopup.OnSubmit]"
						name = "password"
						password = yes
					}
				}
			}

			expand = { }

			hbox = {
				spacing = 10
				layoutpolicy_horizontal = expanding

				button_standard = {
					text = "JOMINI_MULTIPLAYER_GUI_POPUP_DECLINE"
					layoutpolicy_horizontal = expanding

					onclick = "[JominiPasswordPopup.OnDecline]"
					shortcut = close_window
				}

				button_primary = {
					text = "JOMINI_MULTIPLAYER_GUI_POPUP_SUBMIT"
					layoutpolicy_horizontal = expanding

					onclick = "[JominiPasswordPopup.OnSubmit]"
				}
			}
		}
	}
}

types JominiMultiplayerIngame {
	type JominiMultiplayerJoinRequest = window {
		name = "multiplayer_join_request_dialog"
		visible = "[JominiHasPlayerJoinRequests]"
		layer = confirmation

		size = { 800 300 }
		widgetanchor = center
		parentanchor = center

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		using = Window_Background_Popup

		vbox = {
			using = Window_Margins
			spacing = 10

			header_standard = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "JOMINI_MULTIPLAYER_GUI_PLAYER_JOIN_REQUEST"
				}

				blockoverride "button_close"
				{
					visible = no
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						datamodel = "[JominiAccessPlayerJoinRequests]"

						item = {
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = fixed
								spacing = 5
								margin = { 0 2 }

								text_single = {
									text = "[PlayerJoinRequest.GetPlayerName]"
									autoresize = yes
									layoutpolicy_horizontal = expanding
								}

								expand = { }

								button_standard = {
									name = "reject_button"
									text = "JOMINI_MULTIPLAYER_GUI_PLAYER_JOIN_REQUEST_REJECT"
									onclick = "[PlayerJoinRequest.Reject]"
									layoutpolicy_horizontal = fixed
								}

								button_primary = {
									name = "accept_button"
									text = "JOMINI_MULTIPLAYER_GUI_PLAYER_JOIN_REQUEST_ACCEPT"
									onclick = "[PlayerJoinRequest.Accept]"
								}
							}
						}
					}
				}
			}
		}
	}

	type JominiMultiplayerOosMessage = window {
		name = "multiplayer_oos_message"
		using = Window_Background_Popup
		layer = confirmation

		size = { 600 700 }
		parentanchor = center

		visible = "[DataModelHasItems( OosWindow.GetOosData )]"

		vbox = {
			margin = { 10 10 }
			spacing = 5

			text_single = {
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_HEADER"
				autoresize = yes
			}

			text_multi = {
				margin { 50 0 }
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_MY"
				minimumsize = { 0 50 }
				visible = "[OosWindow.IsLocalOos]"
				layoutpolicy_horizontal = expanding
			}

			text_multi = {
				margin { 50 0 }
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_DESC"
				visible = "[Not( OosWindow.IsLocalOos )]"
				minimumsize = { 0 50 }
				layoutpolicy_horizontal = expanding
			}

			text_single = {
				margin { 50 0 }
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_DESC_LOCAL"
				visible = "[OosWindow.IsLocalOos]"
				layoutpolicy_horizontal = expanding
			}

			scrollarea = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				scrollbarpolicy_horizontal = always_off

				scrollbar_vertical = {
					using = editor_vertical_scrollbar
				}

				scrollwidget = {
					vbox = {
						vbox = {
							margin = { 5 5 }
							layoutpolicy_horizontal = expanding
							datamodel = "[OosWindow.GetOosData]"

							item = {
								vbox = {
									block "oos_item" {
										layoutpolicy_horizontal = expanding

										text_single = {
											text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_PLAYER_NAME"
											max_width = 490
											autoresize = yes
											layoutpolicy_horizontal = expanding
										}

										text_single = {
											text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_TYPE"
											max_width = 490
											autoresize = yes
											layoutpolicy_horizontal = expanding
										}

										text_single = {
											text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_FOLDER"
											max_width = 490
											autoresize = yes
											layoutpolicy_horizontal = expanding
										}
									}
								}
							}
						}

						expand = { }
					}
				}
			}

			button_standard = {
				size = { 300 30 }
				datacontext = "[OosWindow]"
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_CONTINUE"
				onclick = "[OosWindow.Continue]"
			}

			button_standard = {
				size = { 300 30 }
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_EXIT_BUTTON"
				onclick = "[OosWindow.GoToMenu]"
			}
		}
	}
}

types JominiMultiplayerFrontend
{
	type JominiMultiplayerFrontendView = widget {
		# visible = no
		### moved to serverbrowserwindow
		name = "JominiMultiplayerView"
		size = { 100% 100% }

		block "background" { }

		block "states" { }

		block "menu"
		{
			flowcontainer = {
				block "menu_properties"
				{
					direction = vertical
				}

				block "menu_items"
				{
					JominiMultiplayerFrontEndButton = {
						onclick = "[FrontEndMultiplayerView.OnBack]"
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_BACK_BUTTON"
					}

					JominiMultiplayerFrontEndButton = {
						onclick = "[FrontEndMultiplayerView.OnLoad]"
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_LOAD_AND_HOST_BUTTON"
					}

					JominiMultiplayerFrontEndButton = {
						onclick = "[FrontEndMultiplayerView.OnHost]"
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_HOST_BUTTON"
					}

					JominiMultiplayerFrontEndButton = {
						onclick = "[JominiServerBrowserGui.RefreshServers]"
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_SCAN_BUTTON"
					}

				}
			}
		}
	}
}

types JominiMultiplayerSetup {
	type JominiMultiplayerSetupEditBox = editbox {
		align = left
		alwaystransparent = no
		focuspolicy = all
		block "setup_editbox" {
			cursorcolor = { 1 1 1 0.6 }
			maxcharacters = 255
			default_format = "#medium"
			fontsize = 14

			background = {
				using = Background_Area_Border_Solid
			}
		}
	}

	type JominiMultiplayerSetupTextBox = text_single { }

	type JominiMultiplayerSetupCheckButton = hbox {
		layoutpolicy_horizontal = expanding
		spacing = 10
		margin_left = 10

		button_checkbox = {
			size = { 20 20 }
			block "checkbutton" { }
		}

		JominiMultiplayerSetupTextBox = {
			layoutpolicy_horizontal = expanding
			align = left
			block "label"
			{
				visible = no
			}
		}
	}

	type JominiMultiplayerSetup = window {
		name = "JominiMultiplayerSetupWindow"

		size = { 420 450 }
		parentanchor = center
		widgetanchor = center

		alwaystransparent = no

		using = Window_Background
		using = Window_Decoration

		vbox = {
			using = Window_Margins

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 10 }
				spacing = 20

				text_label_center = {
					layoutpolicy_horizontal = expanding
					text = "JOMINI_MULTIPLAYER_GUI_SHOW_SETTINGS"
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					JominiMultiplayerSetupCheckButton = {
						blockoverride "checkbutton"
						{
							name = "mpconfig_offline"
							checked = "[MultiplayerSetupWindow.GetMPConfig.IsOffline]"
							onclick = "[MultiplayerSetupWindow.AccessMPConfig.SetOffline]"
							tooltip = "[MultiplayerSetupWindow.GetMPConfig.GetPrivateToolTip]"
							enabled = "[JominiIsMultiplayerAccessible]"
						}

						blockoverride "label"
						{
							text = "JOMINI_MULTIPLAYER_GUI_GAME_MODE_OFFLINE"
						}
					}

					JominiMultiplayerSetupCheckButton = {
						blockoverride "checkbutton"
						{
							name = "mpconfig_private"
							checked = "[MultiplayerSetupWindow.GetMPConfig.IsPrivate]"
							onclick = "[MultiplayerSetupWindow.AccessMPConfig.SetPrivate]"
							tooltip = "[MultiplayerSetupWindow.GetMPConfig.GetPrivateToolTip]"
							enabled = "[JominiIsMultiplayerAccessible]"
						}

						blockoverride "label"
						{
							text = "JOMINI_MULTIPLAYER_GUI_PRIVATE"
						}

						tooltip = JOMINI_MULTIPLAYER_GUI_PRIVATE_TT
					}

					JominiMultiplayerSetupCheckButton = {
						blockoverride "checkbutton"
						{
							name = "mpconfig_public"
							checked = "[MultiplayerSetupWindow.GetMPConfig.IsPublic]"
							onclick = "[MultiplayerSetupWindow.AccessMPConfig.SetPublic]"
							tooltip = "[MultiplayerSetupWindow.GetMPConfig.GetPublicToolTip]"
							enabled = "[JominiIsMultiplayerAccessible]"
						}

						blockoverride "label"
						{
							text = "JOMINI_MULTIPLAYER_GUI_PUBLIC"
						}

						tooltip = JOMINI_MULTIPLAYER_GUI_PUBLIC_TT
					}
				}

				vbox = {
					spacing = 10
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						JominiMultiplayerSetupTextBox = {
							text = "JOMINI_MULTIPLAYER_GUI_SERVER_NAME_LABEL"
							layoutpolicy_horizontal = expanding
							visible = "[Not(MultiplayerSetupWindow.GetMPConfig.IsOffline)]"
						}

						#should be editbox_standard if we ever use this window

						JominiMultiplayerSetupEditBox = {
							name = "game_name"
							minimumsize = { 160 30 }
							max_width = 160
							text = "[MultiplayerSetupWindow.GetDefaultServerName]"
							visible = "[Not(MultiplayerSetupWindow.GetMPConfig.IsOffline)]"
							layoutpolicy_horizontal = expanding
							onreturnpressed = "[MultiplayerSetupWindow.Host]"
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						JominiMultiplayerSetupTextBox = {
							text = "JOMINI_MULTIPLAYER_GUI_SERVER_PASSWORD_LABEL"
							layoutpolicy_horizontal = expanding
							visible = "[Not(MultiplayerSetupWindow.GetMPConfig.IsOffline)]"
						}

						#should be editbox_standard if we ever use this window
						JominiMultiplayerSetupEditBox = {
							name = "game_password"
							minimumsize = { 160 30 }
							max_width = 160
							text = "[MultiplayerSetupWindow.GetDefaultServerPassword]"
							layoutpolicy_horizontal = expanding
							visible = "[Not(MultiplayerSetupWindow.GetMPConfig.IsOffline)]"
							onreturnpressed = "[MultiplayerSetupWindow.Host]"
						}

					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					JominiMultiplayerSetupCheckButton = {
						visible = "[MultiplayerSetupWindow.GetMPConfig.IsPrivate]"

						blockoverride "checkbutton"
						{
							name = "hotjoin_autoaccept"
							checked = "[MultiplayerSetupWindow.GetMPConfig.IsHotjoinAutoAccept]"
							onclick = "[MultiplayerSetupWindow.AccessMPConfig.ToggleHotjoinAutoAccept]"
							enabled = "[JominiIsMultiplayerAccessible]"
						}

						blockoverride "label"
						{
							autoresize = yes
							text = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT"
						}

						tooltip = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT_TT"
					}

					JominiMultiplayerSetupCheckButton = {
						visible = "[JominiMultiplayerIsCrossplayFilterAvailable]"

						blockoverride "checkbutton"
						{
							name = "crossplay_status"
							enabled = "[JominiMultiplayerIsCrossplayEnabled]"
						}

						blockoverride "label"
						{
							autoresize = yes
							text = "JOMINI_MULTIPLAYER_GUI_SERVER_FILTER_LABEL_CROSSPLAY_ENABLED"
						}
					}
				}


				expand = { }

				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5

					button_primary = {
						name = "host_button"
						layoutpolicy_horizontal = expanding
						text = "JOMINI_MULTIPLAYER_GUI_SESSION_HOST"
						onclick = "[MultiplayerSetupWindow.Host]"
						enabled = "[MultiplayerSetupWindow.CanHost]"
						tooltip = "[MultiplayerSetupWindow.HostToolTip]"
					}

					button_standard = {
						name = "cancel_button"
						layoutpolicy_horizontal = expanding
						text = "JOMINI_MULTIPLAYER_GUI_SESSION_CANCEL"
						onclick = "[MultiplayerSetupWindow.Cancel]"
						shortcut = "close_window"
					}
				}
			}
		}
	}
}

template JominiLobbyViewModuleBackground {
	block "lobby_module_background"
	{
		# shaderfile = "gfx/FX/pdxgui_default.shader"
		# texture = "gfx/editor_gui/editor_field.dds"
		# spriteType = CorneredStretched
		# spriteborder = { 6 6 }
	}
}

types JominiMultiplayerLobby
{
	# Button Style
	type JominiLobbyViewButton = button_standard {
	}

	type JominiLobbyRemovePlayer = button {
		enabled = "[LobbyPlayer.CanRemovePlayer]"
		visible = "[LobbyPlayer.CanRemovePlayer]"

		onclick = "[LobbyPlayer.RemovePlayer]"

		block "remove_player_button_style"
		{
			layoutpolicy_horizontal = fixed
			size = { 20 20 }

			texture = "gfx/editor_gui/editor_button.dds"
			gfxtype = framedbuttongfx
			spriteType = CorneredStretched
			spriteborder = { 4 4 }
			effectname = "NoHighlight"
			framesize = { 16 16 }
			upframe = 1
			downframe = 2
			overframe = 3
			disableframe = 4
			intersectionmask = yes
			raw_text = "K"
		}
	}

	type JominiLobbyViewServerInfoEntry = button {
		block "server_info_entry_size"
		{
			size = { 0 20 }
			layoutpolicy_horizontal = expanding
		}

		block "server_info_entry_styling"
		{
			align = left
			using = Font_Type_Standard
			using = Font_Size_Small
			default_format = "#high"
			margin = { 5 5 }

			background = {
				using = Background_Area
			}
		}
	}

	# Hosting status
	type JominiLobbyViewHostingStatus = vbox {
		margin = { 10 5 }
		layoutpolicy_horizontal = expanding
		visible = "[LobbyView.ShowHosting]"

		background = {
			using = Background_Area
		}

		JominiMultiplayerSetupTextBox = {
			text = "JOMINI_MULTIPLAYER_GUI_HOSTING"
			layoutpolicy_horizontal = expanding
		}
	}

	# Error information
	type JominiLobbyViewHostError = vbox {
		visible = "[HasHostError]"
		layoutpolicy_horizontal = expanding
		margin = { 10 10 }
		spacing = 25

		background = {
			using = Background_Area
		}

		text_multi = {
			layoutpolicy_horizontal = expanding
			autoresize = yes
			text = "[GetHostError]"
			default_format = "#X"
		}

		button_standard = {
			text = "JOMINI_MULTIPLAYER_GUI_CLOSE"
			onclick = "[ClearHostError]"
		}
	}

	type JominiLobbyExpandButton = button_expand {
	}

	type JominiLobbyCollapseButton = button_expand {
		frame = 2
	}

	# The MP info widget displays the multiplayer information
	type JominiLobbyViewMPInfo = vbox {
		name = "mp_info"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		alwaystransparent = no
		filter_mouse = left|right

		block "mp_info_properties" {
			margin_top = 10
			margin_left = 5

			background = {
				using = JominiLobbyViewModuleBackground
			}
		}

		button_text = {
			visible = "[JominiIsHostOrLocal]"
			layoutpolicy_horizontal = expanding
			blockoverride "pre" {
				text_single = {
					raw_text = "Disabled"
					margin_right = 3
					visible = "[Not(LobbyView.IsAutoAccept)]"
				}
			}
			blockoverride "text" {
				raw_text = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT"
				align = left
			}
			blockoverride "extra" {
				text_single = {
					raw_text = ", Enabled"
					visible = "[LobbyView.IsAutoAccept]"
				}
				dot = { }
			}
			onclick = "[LobbyView.ToggleAutoAccept]"
			tooltip = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT_TT"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			text = "JOMINI_MULTIPLAYER_GUI_VISIBILITY"
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			tooltip = JOMINI_MULTIPLAYER_GUI_PRIVATE_TT
			blockoverride "text" {
				raw_text = "JOMINI_MULTIPLAYER_GUI_PRIVATE"
				align = left
			}
			blockoverride "extra" {
				text_single = {
					visible = "[LobbyView.IsInvite]"
					raw_text = ", Selected"
				}
				dot = { }
			}
			onclick = "[LobbyView.SetInvite]"
		}


		button_text = {
			visible = "[JominiMultiplayerIsCrossplayFilterAvailable]"
			tooltip = "MULTIPLAYER_GUI_PUBLIC_MICROSOFT_ONLY_TT"
			layoutpolicy_horizontal = expanding
			blockoverride "text" {
				raw_text = "MULTIPLAYER_GUI_PUBLIC_MICROSOFT_ONLY"
				align = left
			}
			blockoverride "extra" {
				text_single = {
					raw_text = ", Selected"
					visible = "[LobbyView.IsPublicNoCrossplay]"
				}
				dot = { }
			}
			onclick = "[LobbyView.SetPublicNoCrossplay]"
		}

		button_text = {
			tooltip = "JOMINI_MULTIPLAYER_GUI_PUBLIC_TT"
			layoutpolicy_horizontal = expanding
			blockoverride "text" {
				raw_text = "JOMINI_MULTIPLAYER_GUI_PUBLIC"
				align = left
			}
			blockoverride "extra" {
				text_single = {
					raw_text = ", Selected"
					visible = "[LobbyView.IsPublicCrossplay]"
				}
				dot = { }
			}
			onclick = "[LobbyView.SetPublicCrossplay]"
			enabled = "[Or(Not(JominiMultiplayerIsCrossplayFilterAvailable), JominiMultiplayerIsCrossplayEnabled)]"
		}

		vbox = {
			spacing = 10
			layoutpolicy_horizontal = expanding
			restrictparent_min = yes
			block "setup_hbox_height" { }


			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10
				margin_left = 10

				visible = "[Not(LobbyView.GetServerInfo.IsInvite)]"

				editbox_standard_with_label = {
					layoutpolicy_horizontal = expanding
					blockoverride "editbox_label"
					{
						raw_text = "[Localize('JOMINI_MULTIPLAYER_GUI_SERVER_NAME')]."
						layoutpolicy_horizontal = expanding
					}

					blockoverride "editbox_properties"
					{
						name = "game_name"
						text = "[LobbyView.GetServerInfo.GetServerName]"
						# onreturnpressed = "[LobbyView.SetName]"
						ontextedited = "[LobbyView.OnNameEdit]"
						ontextedited = "[LobbyView.SetName]"
						enabled = "[CanEditSettingsAfterHost]"
					}
				}
			}

			# button_text = {
			# 	layoutpolicy_horizontal = expanding
			#     blockoverride "text" {
			#         raw_text = "Confirm name change."
			#     }
			# 	visible = "[CanEditSettingsAfterHost]"
			# 	onclick = "[LobbyView.SetName]"
			# }

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10
				margin_left = 10
				visible = "[JominiIsHostOrLocal]"

				editbox_standard_with_label = {
					layoutpolicy_horizontal = expanding
					blockoverride "editbox_label"
					{
						raw_text = "[Localize('JOMINI_MULTIPLAYER_GUI_SERVER_PASSWORD')]."
						layoutpolicy_horizontal = expanding
					}
					blockoverride "editbox_properties"
					{
						name = "game_password"
						onreturnpressed = "[LobbyView.SetPassword]"
						ontextedited = "[LobbyView.OnPasswordEdit]"
						ontextedited = "[LobbyView.SetPassword]"
						enabled = "[CanEditSettingsAfterHost]"
						ontextedited = "[PdxGuiWidget.FindChild('pass').Hide]"

						text_single = {
							margin_left = 5
							raw_text = "Enter password here."
							name = pass
						}
					}
				}
			}

			hbox = {
				block "game_options_left" { }
				block "game_options_right" { }
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5

			block "mp_info_header" { }

			block "mp_info_left_info" { }


			JominiLobbyViewServerInfoEntry = {
				minimumsize = { 390 0 }

				text_single = {
					raw_text = "[Localize('JOMINI_MULTIPLAYER_GUI_CHECKSUM')]."
					margin_left = 5
				}
				tooltip = "JOMINI_MULTIPLAYER_GUI_GAME_VERSION_TOOLTIP"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred

				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						raw_text = "[GetDataModelSize(LobbyView.GetEnabledDLCs)]"
					}
					space = { }
					text_single = {
						text = "JOMINI_MULTIPLAYER_GUI_ENABLED_DLCS"
						block "jomini_standard_textbox" { }
					}
					dot = { }
					expand = { }
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					margin_top = 20

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5

						datamodel = "[LobbyView.GetEnabledDLCs]"

						item = {
							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[CString.GetString]"
							}
						}
					}
				}

				blockoverride "scrollbox_empty"
				{
					layoutpolicy_vertical = expanding
					visible = "[IsDataModelEmpty(LobbyView.GetEnabledDLCs)]"
					text = "JOMINI_MULTIPLAYER_GUI_NO_DLCS"
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred

			hbox = {
				layoutpolicy_horizontal = expanding

				text_single = {
					raw_text = "[GetDataModelSize(LobbyView.GetEnabledMods)]"
				}
				space = { }
				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_ENABLED_MODS"
				}
				dot = { }
				expand = { }
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5
						datamodel = "[LobbyView.GetEnabledMods]"

						item = {
							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[CString.GetString]"
							}
						}
					}
				}

				blockoverride "scrollbox_empty"
				{
					layoutpolicy_vertical = expanding
					visible = "[IsDataModelEmpty(LobbyView.GetEnabledMods)]"
					text = "JOMINI_MULTIPLAYER_GUI_NO_MODS"
				}
			}
		}
	}

	# The Host widget shows the host button
	type JominiLobbyViewHost = vbox {
		layoutpolicy_horizontal = expanding
		visible = "[And(Not(HasHostError),Not(GameIsMultiplayer))]"
		alwaystransparent = no
		filter_mouse = left|right

		block "host_background" {
			background = {
				using = JominiLobbyViewModuleBackground
			}
		}

		JominiLobbyViewButton = {
			block "host_button"
			{
				text = "JOMINI_MULTIPLAYER_GUI_HOST_BUTTON"
			}

			onclick = "[LobbyView.OpenMultiplayer]"
			tooltip = "[LobbyView.GetOpenMultiplayerToolTip]"

			block "host_button_enabled"
			{
				enabled = "[And(JominiIsMultiplayerAccessible, JominiIsHostOrLocal)]"
			}

			layoutpolicy_horizontal = expanding
		}
	}

	# Playerlist item
	type JominiLobbyViewPlayerItem = hbox {
		layoutpolicy_horizontal = expanding
		alwaystransparent = no
		filter_mouse = left|right

		background = {
			using = Background_Area_Dark
			margin = { 5 0}
		}

		block "playerlist_item_content" {
			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				maximumsize = { 390 -1 }

				block "playable_icon" {
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						text_single = {
							max_width = 380
							autoresize = yes
							raw_text = "[LobbyPlayer.GetName],"
						}

						text_single = {
							visible = "[LobbyPlayer.IsHost]"
							raw_text = "[Localize('HOST')]."
						}

						expand = { }
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						allow_outside = yes

						# Readyness
						block "readyness" {
							hbox = {
								text_multi = {
									layoutpolicy_horizontal = expanding
									raw_text = "[Localize('JOMINI_MULTIPLAYER_GUI_READY')]."
									visible = "[And( LobbyPlayer.IsReady, Not( LobbyPlayer.IsObserver ) )]"
									align = left
									autoresize = yes
								}
							}
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							visible = "[LobbyPlayer.CanRemovePlayer]"
							onclick = "[LobbyPlayer.RemovePlayer]"
						    blockoverride "text" {
						        raw_text = "JOMINI_MULTIPLAYER_GUI_PLAYER_KICK_BUTTON_LABEL_TT"
						    }
						}

						button_text = {
							layoutpolicy_horizontal = expanding
						    blockoverride "text" {
						        raw_text = "JOMINI_MULTIPLAYER_GUI_CLEAR_SELECTION"
						    }
							visible = "[And( LobbyPlayer.IsLocalPlayer, Or( LobbyPlayer.HasPlayable, LobbyPlayer.IsObserver ) )]"
							onclick = "[LobbyView.ClearSelection]"
						}
					}
				}
			}
		}
	}

	# Playerlist widget
	type JominiLobbyViewPlayerList = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		margin = { 0 5 }
		minimumsize = { 390 0 }

		background = {
			using = JominiLobbyViewModuleBackground
		}

		JominiLobbyViewPlayerItem = {
			margin = { 5 5 }
			datacontext = "[LobbyView.AccessLocalPlayer]"
		}

		JominiMultiplayerTextbox = {
			minimumsize = { 370 25 }
			margin_left = 5
			raw_text = "[Localize('JOMINI_MULTIPLAYER_GUI_OTHER_PLAYERS_COUNT')]."
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 5 0 }

			scrollbox = {
				visible = "[GameIsMultiplayer]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_margins" {
					margin_top = 20
				}

				blockoverride "scrollbox_empty"
				{
					visible = "[LessThan_int32(GetDataModelSize(LobbyView.Players), '(int32)2')]"
					text = "JOMINI_MULTIPLAYER_GUI_OTHER_PLAYERS_NONE"
					layoutpolicy_vertical = expanding
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						alwaystransparent = no
						filter_mouse = left|right
						datamodel = "[LobbyView.Players]"
						ignoreinvisible = yes

						block "player_list_properties" { }

						item = {
							JominiLobbyViewPlayerItem = {
								visible = "[Not( LobbyPlayer.IsLocalPlayer)]"
							}
						}
					}
				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding
			    blockoverride "text" {
			        raw_text = "Copy server ID. You can send it to invite players."
			    }
				onclick = "[LobbyView.CopyServerID]"
			}
		}
	}

	type JominiLobbyViewBack = button_text {
		layoutpolicy_horizontal = expanding
		blockoverride "text" {
			margin_left = 5
			raw_text = "[Localize('JOMINI_MULTIPLAYER_GUI_SESSION_BACK')]."
		}
		block "lobby_view_back_onclick" {
			onclick = "[LobbyView.GoBack]"
		}
		shortcut = "close_window"
		filter_mouse = left|right
		visible = "[LobbyView.CanGoBack]"
	}

	# Selection widget
	type JominiLobbyViewSelectionWidget = vbox {
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		margin_left = 20

		alwaystransparent = no
		filter_mouse = left|right

		background = {
			using = JominiLobbyViewModuleBackground
		}


		# text_multi = {
		# 	layoutpolicy_horizontal = expanding
		# 	layoutpolicy_vertical = expanding
		# 	default_format = "#I"
		# 	align = center
		# 	margin = { 5 0 }
		# 	text = "MULTIPLAYER_GUI_CLICK_TO_SELECT"
		# 	visible = "[And( Not( LobbyView.HasSelectedPlayable ), Not( LobbyView.IsObserver ) )]"
		# }


		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			visible = "[And( Not( LobbyView.HasSelectedPlayable ), LobbyView.IsObserver )]"

			spacer = {size = {0 20}}

			text_label_center = {
				name = "header"
				text = "JOMINI_MULTIPLAYER_GUI_OBSERVER"
			}

			text_multi = {
				name = "desc"
				text = "FRONTEND_OBSERVER_DESC"
				autoresize = yes
				max_width = 300
				align = left
			}

			expand = { }
		}

		# Playable Selected
		widget = {
			visible = "[LobbyView.HasSelectedPlayable]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			vbox = {

				block "selected_playable" {
				}
			}
		}

		block "game_rules" { }
	}

	# Game Info Panel
	type JominiLobbyViewGameInfoPanel = vbox {
		size = { 0 0 }
		layoutpolicy_horizontal = expanding
		alwaystransparent = no
		filter_mouse = left|right

		background = {
			using = JominiLobbyViewModuleBackground
		}

		block "game_info" {
		}
	}

	# Module for preparation specific stuff
	type JominiLobbyViewPreparation = vbox {
		#visible = "[IsPreparationLobby]"
		visible = "[Not(GetVariableSystem.Exists('playable_vassals'))]"
		alwaystransparent = no
		filter_mouse = left|right
		layoutpolicy_horizontal = expanding
		margin_left = 10
		margin_bottom = 10


		background = {
			using = JominiLobbyViewModuleBackground
		}

		JominiMultiplayerTextbox = {
			layoutpolicy_horizontal = expanding
			visible = "[And(LobbyView.IsReady,Not(PlayerIsHost))]"
			name = "ready_info"
			minimumsize = { 0 45 }
			multiline = yes
			align = center|center
			text = "JOMINI_MULTIPLAYER_GUI_WAIT_HOST_START"
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			visible = "[And(And( IsPreparationLobby, PlayerIsHost ), LobbyView.CanStart)]"
			onclick = "[LobbyView.Start]"
			enabled = "[LobbyView.CanStart]"
			tooltip = "[LobbyView.StartToolTip]"
			# datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"
			# datacontext = "[LobbyPlayer.GetPlayable.GetCharacter]"

			blockoverride "text" {
				text = "JOMINI_MULTIPLAYER_GUI_START"
				align = left
			}
			blockoverride "extra" {
				text_single = {
					raw_text = " game"
				}
				text_single = {
					raw_text = " as [GetPlayer.GetFirstNameNoTooltip]"
					visible = "[GetPlayer.IsValid]"
				}
				dot = { }
			}
			blockoverride "disabled" {
				visible = "[Not(LobbyView.CanStart)]"
				align = left
			}

			oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"

			state = {
				name = _mouse_press
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_press"
				}
			}

			state = {
				name = _mouse_release
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
				}
			}
		}

		# button_primary_text = {
		# 	layoutpolicy_horizontal = expanding
		# 	visible = "[And(Not( IsPreparationLobby ), LobbyView.CanControlSelected)]"
		# 	blockoverride "text" {
		# 		raw_text = "Start game"
		# 	}
		#
		# 	blockoverride "disabled" {
		# 		visible = "[Not(LobbyView.CanControlSelected)]"
		# 	}
		#
		# 	blockoverride "hotkey" {
		# 		visible = "[LobbyView.CanControlSelected]"
		# 	}
		#
		# 	onclick = "[LobbyView.ControlSelected]"
		# 	onclick = "[LobbyView.Ready]"
		# 	enabled = "[LobbyView.CanControlSelected]"
		#
		# 	tooltip = "[LobbyView.GetControlToolTip]"
		# }

		# button_text = {
		# 	layoutpolicy_horizontal = expanding
		#     blockoverride "text" {
		#         raw_text = "Select another, hotkey B or Escape."
		#     }
		# 	onclick = "[GetVariableSystem.Set('selected_character', 'yes')]"
		# 	shortcut = go_back
		# 	shortcut = close_window
		# }
	}

	type JominiLobbyViewEndPreparationConfirmation = widget {
		name = "JominiMultiplayerEndPreparationConfirmation"

		block "properties"
		{
			size = { 300 200 }
			parentanchor = center
			widgetanchor = center
			modal = yes
			modality = all
		}

		block "background"
		{
			background = {
				using = JominiLobbyViewModuleBackground
			}
		}

		block "content"
		{
			textbox = {
				name = "info"
				size = { 100% 50% }
				multiline = yes
				align = center|center
				text = "JOMINI_MULTIPLAYER_GUI_CONFIRMATION"
			}

			JominiLobbyViewButton = {
				onclick = "[EndPrepConfirm.Cancel]"
				size = { 50% 20% }
				text = "JOMINI_MULTIPLAYER_GUI_CANCEL"
				parentanchor = bottom|left
				widgetanchor = bottom|left
			}

			JominiLobbyViewButton = {
				onclick = "[EndPrepConfirm.Confirm]"
				size = { 50% 20% }
				text = "JOMINI_MULTIPLAYER_GUI_CONFIRM"
				parentanchor = bottom|right
				widgetanchor = bottom|right
			}
		}
	}

	#### main view ####
	type JominiMultiplayerLobby = widget {
		background = {
			using = Background_Area_Border_Solid
			alpha = 0.3
			visible = "[Not(GetVariableSystem.Exists('ocr'))]"
		}
		alwaystransparent = no
		name = "lobbyview"
		size = { 100% 100% }

		button_text = {
			parentanchor = hcenter
			blockoverride "text" {
				raw_text = "Errors: [NumberOrErrors]"
			}
			onclick = "[ClearErrorLog]"
			visible = "[And(Not(ReleaseMode), HasErrors)]"
			# shortcut = confirm
		}

		block "left_panel"
		{
			widget = {
				parentanchor = right
				block "left_panel_properties"
				{
					size = { 410 100% }
				}

				vbox = {
					margin_right = 20

					block "left_panel_content" {
						using = Window_Background_Sidebar_Multiplayer_Left

						background = {
							using = Background_Area_Dark
							margin = { 0 10 }

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
								blend_mode = alphamultiply
								alpha = 0.8
								mirror = vertical
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							background = {
								using = JominiLobbyViewModuleBackground
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								name = "tabs"

								button_text = {
									layoutpolicy_horizontal = expanding
								    blockoverride "text" {
										text = "JOMINI_MULTIPLAYER_GUI_SHOW_PLAYERS"
										align = left
								    }
									blockoverride "extra" {
										text_single = {
											raw_text = ", tab 1"
										}
										text_single = {
											raw_text = ", selected"
											visible = "[GetVariableSystem.HasValue( 'mp_lobby_tabs', 'show_players' )]"
										}
										dot = { }
									}
									visible = "[JominiIsMultiplayerAccessible]"
									onclick = "[GetVariableSystem.Set( 'mp_lobby_tabs', 'show_players' )]"
									shortcut = speed_1
								}

								button_text = {
									layoutpolicy_horizontal = expanding
								    blockoverride "text" {
										text = "JOMINI_MULTIPLAYER_GUI_SHOW_SETTINGS"
										align = left
								    }
									blockoverride "extra" {
										text_single = {
											raw_text = ", tab 2"
										}
										text_single = {
											raw_text = ", selected"
											visible = "[GetVariableSystem.HasValue( 'mp_lobby_tabs', 'show_settings' )]"
										}
										dot = { }
									}
									visible = "[JominiIsMultiplayerAccessible]"
									onclick = "[GetVariableSystem.Set( 'mp_lobby_tabs', 'show_settings' )]"
									shortcut = speed_2
								}
							}
						}

						JominiLobbyViewPlayerList = {
							visible = "[And( And(GetVariableSystem.HasValue( 'mp_lobby_tabs', 'show_players' ), LobbyView.ShowPlayerList), LobbyView.HasServerInfo )]"
						}

						JominiLobbyViewMPInfo = {
							visible = "[And( Or(GetVariableSystem.HasValue( 'mp_lobby_tabs', 'show_settings' ), Not( LobbyView.ShowPlayerList )), LobbyView.HasServerInfo )]"
						}

						expand = { }

						JominiLobbyViewHostingStatus = { }
						JominiLobbyViewHostError = { }

						JominiLobbyViewBack = { }
					}
				}
			}
		}

		# search prompt

		flowcontainer = {
			background = { using = Background_Area_Border_Solid }
			margin = { 5 0 }
			ignoreinvisible = yes
			visible = "[And(Not(IsGameViewOpen('character_finder')), Not(IsGameViewOpen('find_title')))]"

			direction = vertical


			button_text = {
				visible = "[Character.IsValid]"
				datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"
				blockoverride "text" {
					raw_text = "Go back to [Character.GetFirstNameNoTooltip]"
				}
				blockoverride "extra" {
					text_single = {
						align = left
						visible = "[Character.HasLandedTitles]"
						raw_text = " of [Character.GetPrimaryTitle.GetNameNoTierNoTooltip]"
					}
					text_single = {
						align = left
						raw_text = ", hotkey B."
					}
				}
				onclick = "[GetVariableSystem.Clear('selected_character')]"
				shortcut = go_back
			}

			button_regions = { }

			button_text = {
				blockoverride "text" {
					raw_text = "Find character, hotkey C."
				}
				onclick = "[ToggleGameView( 'character_finder' )]"
				shortcut = "character_finder"
			}

			text_single = {
				margin_left = 5
				background = { using = Background_Area_Border_Solid }
				raw_text = "Make sure to change Relation filter to Show All and Ruler to Ruler. Then apply sorting."
				align = left
			}

			button_text = {
				blockoverride "text" {
					text = "FIND_TITLE"
				}
				blockoverride "extra" {
					text_single = {
						raw_text = ", hotkey V"
						align = left
					}
				}
				blockoverride "dot" {
				}
				shortcut = "find_title_shortcut"
				onclick = "[ToggleGameView( 'find_title' )]"
			}

			button_text = {
				onclick = "[SetRandomPlayableObserverCharacter]"
				onclick = "[GetVariableSystem.Clear('selected_character')]"
				blockoverride "text" {
					text = "MULTIPLAYER_LOBBY_CHOOSE_RANDOM_CHARACTER"
				}
				blockoverride "dot" {
				}
			}

			button_text = {
				visible = "[GetVariableSystem.Exists('ocr')]"
				onclick = "[SetRandomPlayableObserverCharacter]"
				blockoverride "text" {
					text = "[SelectLocalization(LobbyView.IsObserver, 'JOMINI_MULTIPLAYER_GUI_DISABLE_OBSERVE', 'JOMINI_MULTIPLAYER_GUI_OBSERVE')]"
				}
				blockoverride "dot" {
				}
				onclick = "[LobbyView.ToggleObserve]"
			}

			flowcontainer = {
				visible = "[Not(GameIsMultiplayer)]"
				layoutpolicy_horizontal = expanding
				direction = vertical
				ignoreinvisible = yes

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						text = "JOMINI_MULTIPLAYER_GUI_HOST_BUTTON"
						raw_text = ""
					}
					blockoverride "disabled" {
						visible = "[Not(JominiIsHostOrLocal)]"
					}
					blockoverride "dot" { }
					onclick = "[LobbyView.OpenMultiplayer]"
					# tooltip = "[LobbyView.GetOpenMultiplayerToolTip]"
					enabled = "[JominiIsHostOrLocal]"
					visible = "[And(And(Not(HasHostError),Not(GameIsMultiplayer)), JominiIsMultiplayerAccessible)]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = ""
						text = "JOMINI_MULTIPLAYER_GUI_HOST_BUTTON"
					}

					blockoverride "extra" {
						text_single = {
							raw_text = "FRONTEND_LOGIN_PROMPT"
							align = left
						}
					}
					blockoverride "disabled" {
						visible = "[Not(JominiIsHostOrLocal)]"
					}
					blockoverride "dot" { }
					visible = "[And(And(Not(HasHostError),Not(GameIsMultiplayer)), Not(JominiIsMultiplayerAccessible))]"
					onclick = "[OnToggleLoginWindow]"
					# tooltip = "[LobbyView.GetOpenMultiplayerToolTip]"
					enabled = "[JominiIsHostOrLocal]"
				}

				JominiLobbyViewBack = {
					layoutpolicy_horizontal = expanding
				}
			}
		}

		widget = {
			size = { 700 100% }
			using = Window_Background_No_Edge
			alwaystransparent = no

			#TODO

			visible = "[GetVariableSystem.Exists('regions')]"

			scrollbox = {
				size = { 100% 100% }
				blockoverride "scrollbox_margins" {
					margin_top = 20
				}
				blockoverride "scrollbox_content" {

					vbox_ruler_browser = { }

				}
			}

		}

		block "right_panel"
		{
			widget = {
				# parentanchor = top|right
				# widgetanchor = top|right
				visible = "[LobbyView.HasSelectedPlayable]"



				block "right_panel_properties"
				{
					size = { 700 100% }
					position = { -10 0 }
				}

				vbox = {
					using = Window_Background_Sidebar_Multiplayer_Right
					background = { using = Background_Area_Border_Solid }
					visible = "[Not(GetVariableSystem.Exists('selected_character'))]"
					block "right_panel_content"
					{
						# JominiLobbyViewGameInfoPanel = { }
						JominiLobbyViewPreparation = { }
						JominiLobbyViewSelectionWidget = { }

					}
				}
			}
		}
	}
}

template JominiDefaultButtonProperties {
	block "button_style"
	{
		texture = "gfx/editor_gui/editor_button.dds"
		gfxtype = framedbuttongfx
		spriteType = CorneredStretched
		spriteborder = { 4 4 }
		framesize = { 16 16 }
		upframe = 1
		downframe = 2
		overframe = 3
		disableframe = 4
	}
}

types JominiMultiplayerGameTypes
{
	type region_list = fixedgridbox {
		layoutpolicy_horizontal = expanding

		addrow = 24
		addcolumn = 670

		item = {
			button_text = {
				block "extra_click" { }
				datacontext = "[Scope.GetCharacter]"
				layoutpolicy_horizontal = expanding
				using = char_click
				onclick = "[GetVariableSystem.Clear('selected_character')]"
				onclick = "[CloseGameView('my_realm')]"
				# onclick = "[GetVariableSystem.Clear('regions')]"
				blockoverride "text" {
					raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip],"
					align = left
				}

				blockoverride "extra" {
					spacing = 3

					text_single = {
						raw_text = "[Character.RealmSize] counties."
					}
					block "direction" { }
					text_single = {
						raw_text = "[Character.GetTitledFirstNameNoTooltip],"
					}
					text_single = {
						raw_text = "[Character.GetGovernment.GetAdjectiveNoTooltip],"
					}
					text_single = {
						raw_text = "[Character.GetCulture.GetNameNoTooltip],"
					}
					text_single = {
						raw_text = "[Character.GetFaith.GetAdjectiveNoTooltip]."
					}
					# text_single = {
					# 	raw_text = "[Character.GetMilitaryStrengthText] soldiers."
					# }
				}
			}
		}
	}
	type JominiMultiplayerFrontEndButton = button_standard {
		size = { 200 50 }
	}

	type JominiMultiplayerSortButtonAsc = button {

		block "asc_button_properties" {
			alwaystransparent = yes
			size = { 35 33 }

			button_icon = {
				texture = "gfx/interface/icons/flat_icons/sort_icon.dds"
				framesize = { 66 66 }
				frame = 1
			}
		}
	}

	type JominiMultiplayerSortButtonDesc = button {

		block "desc_button_properties" {
			alwaystransparent = yes
			size = { 35 33 }

			button_icon = {
				texture = "gfx/interface/icons/flat_icons/sort_icon.dds"
				framesize = { 66 66 }
				frame = 2
			}
		}
	}

	type JominiMultiplayerCheckbutton = hbox {

		block "serverbrowser_checkbutton" {

			button_checkbox = {
				size = { 20 20 }
				block "checkbutton" { }
			}

			text_single = {
				margin_left = 5

				block "label"
				{
					raw_text = "#D Label#!"
				}
			}
		}
	}

	type JominiMultiplayerTextbox = textbox {
		align = left
		block "jominimultiplayertextbox" {
			using = Font_Type_Standard
			using = Font_Size_Small
			default_format = "#high"
		}
	}

	type button_regions = button_text {
		blockoverride "text" {
			raw_text = "Select region, hotkey G."
		}
		onclick = "[GetVariableSystem.Toggle('regions')]"
		onclick = "[GetScriptedGui('regions').Execute( GuiScope.End )]"

		shortcut = army_merge
	}

	type vbox_ruler_browser = vbox {
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		margin = { 10 5 }

		block "exit" {
			button = {
				onclick = "[GetVariableSystem.Clear('regions')]"
				shortcut = army_merge
				shortcut = close_window
			}
		}

		vbox = {
			visible = "[Not(GetVariableSystem.Exists('region'))]"
			layoutpolicy_horizontal = expanding

			vbox = {
				visible = "[Not(Or(GetVariableSystem.Exists('major_region'), GetVariableSystem.Exists('second_region') ) )]"
				layoutpolicy_horizontal = expanding

				text_single = {
					layoutpolicy_horizontal = expanding
					block "count" {
						raw_text = "There are [GetGlobalVariable('all_playable_rulers').GetValue] independent rulers who are not theocratic or republican."
					}
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					margin_left = 5
					raw_text = "You can use number keys to select."
				}
				# major regions
				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "1. [Localize('world_europe')], [GetDataModelSize(GetGlobalList('world_europe'))] rulers."
					}
					onclick = "[GetVariableSystem.Set('major_region', 'world_europe')]"
					shortcut = speed_1
				}

				# region
				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "2. [Localize('world_asia_minor')], [GetDataModelSize(GetGlobalList('world_asia_minor'))]."
					}
					onclick = "[GetVariableSystem.Set('region', 'world_asia_minor')]"
					shortcut = speed_2
				}

				# major regions
				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "3. [Localize('world_middle_east')], [GetDataModelSize(GetGlobalList('world_middle_east'))]."
					}
					onclick = "[GetVariableSystem.Set('major_region', 'world_middle_east')]"
					shortcut = speed_3
				}
				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "4. [Localize('world_india')], [GetDataModelSize(GetGlobalList('world_india'))]."
					}
					onclick = "[GetVariableSystem.Set('major_region', 'world_india')]"
					shortcut = speed_4
				}
				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "5. [Localize('world_africa')], [GetDataModelSize(GetGlobalList('world_africa'))]."
					}
					onclick = "[GetVariableSystem.Set('major_region', 'world_africa')]"
					shortcut = speed_5
				}
				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[Localize('world_steppe')], [GetDataModelSize(GetGlobalList('world_steppe'))]."
					}
					onclick = "[GetVariableSystem.Set('major_region', 'world_steppe')]"
					shortcut = map_mode_2
				}

				# regions

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[Localize('world_tibet')], [GetDataModelSize(GetGlobalList('world_tibet'))]."
					}
					onclick = "[GetVariableSystem.Set('region', 'world_tibet')]"
					shortcut = map_mode_4
				}
				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[Localize('world_burma')], [GetDataModelSize(GetGlobalList('world_burma'))]."
					}
					onclick = "[GetVariableSystem.Set('region', 'world_burma')]"
					shortcut = mapmode_duchies_secondary
				}

				# close
				block "exit" {
					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "Close regions, Escape or G."
						}
						onclick = "[GetVariableSystem.Clear('regions')]"
						shortcut = army_merge
						shortcut = close_window
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				visible = "[And(GetVariableSystem.Exists('major_region'), Not(GetVariableSystem.Exists('second_region')))]"

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[Localize(GetVariableSystem.Get('major_region'))], [GetDataModelSize(GetGlobalList(GetVariableSystem.Get('major_region')))] rulers. Go back, hotkey B."
					}
					onclick = "[GetVariableSystem.Clear('major_region')]"
					onclick = "[GetVariableSystem.Clear('second_region')]"
					onclick = "[GetVariableSystem.Clear('region')]"
					shortcut = go_back
				}

				# europe
				vbox = {
					visible = "[GetVariableSystem.HasValue('major_region', 'world_europe')]"
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "1. [Localize('world_europe_west')], [GetDataModelSize(GetGlobalList('world_europe_west'))]."
							}
							onclick = "[GetVariableSystem.Set('second_region', 'world_europe_west')]"
							shortcut = speed_1
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "2. [Localize('world_europe_north')], [GetDataModelSize(GetGlobalList('world_europe_north'))]."
							}
							onclick = "[GetVariableSystem.Set('region', 'world_europe_north')]"
							shortcut = speed_2
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "3. [Localize('world_europe_east')], [GetDataModelSize(GetGlobalList('world_europe_east'))]."
							}
							onclick = "[GetVariableSystem.Set('region', 'world_europe_east')]"
							shortcut = speed_3
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "4. [Localize('world_europe_south_east')], [GetDataModelSize(GetGlobalList('world_europe_south_east'))]."
							}
							onclick = "[GetVariableSystem.Set('region', 'world_europe_south_east')]"
							shortcut = speed_4
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "5. [Localize('world_europe_south_italy')], [GetDataModelSize(GetGlobalList('world_europe_south_italy'))]."
							}
							onclick = "[GetVariableSystem.Set('region', 'world_europe_south_italy')]"
							shortcut = speed_5
						}
					}
				}

				# ME
				vbox = {
					visible = "[GetVariableSystem.HasValue('major_region', 'world_middle_east')]"
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "1. [Localize('world_middle_east_arabia')], [GetDataModelSize(GetGlobalList('world_middle_east_arabia'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_middle_east_arabia')]"
						shortcut = speed_1
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "2. [Localize('world_middle_east_persia')], [GetDataModelSize(GetGlobalList('world_middle_east_persia'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_middle_east_persia')]"
						shortcut = speed_2
					}
					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "3. [Localize('world_middle_east_jerusalem')], [GetDataModelSize(GetGlobalList('world_middle_east_jerusalem'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_middle_east_jerusalem')]"
						shortcut = speed_3
					}
				}

				# India
				vbox = {
					visible = "[GetVariableSystem.HasValue('major_region', 'world_india')]"
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "1. [Localize('world_india_bengal')], [GetDataModelSize(GetGlobalList('world_india_bengal'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_india_bengal')]"
						shortcut = speed_1
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "2. [Localize('world_india_rajastan')], [GetDataModelSize(GetGlobalList('world_india_rajastan'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_india_rajastan')]"
						shortcut = speed_2
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "3. [Localize('world_india_deccan')], [GetDataModelSize(GetGlobalList('world_india_deccan'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_india_deccan')]"
						shortcut = speed_3
					}

				}

				# Africa
				vbox = {
					visible = "[GetVariableSystem.HasValue('major_region', 'world_africa')]"
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "1. [Localize('world_africa_north_west')], [GetDataModelSize(GetGlobalList('world_africa_north_west'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_africa_north_west')]"
						shortcut = speed_1
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "2. [Localize('world_africa_west')], [GetDataModelSize(GetGlobalList('world_africa_west'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_africa_west')]"
						shortcut = speed_2
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "3. [Localize('world_africa_north_east')], [GetDataModelSize(GetGlobalList('world_africa_north_east'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_india_deccan')]"
						shortcut = speed_3
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "4. [Localize('world_africa_east')], [GetDataModelSize(GetGlobalList('world_africa_east'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_africa_east')]"
						shortcut = speed_4
					}

				}

				# steppe
				vbox = {
					visible = "[GetVariableSystem.HasValue('major_region', 'world_steppe')]"
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "1. [Localize('world_steppe_west')], [GetDataModelSize(GetGlobalList('world_steppe_west'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_steppe_west')]"
						shortcut = speed_1
					}
					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "2. [Localize('world_steppe_east')], [GetDataModelSize(GetGlobalList('world_steppe_east'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_steppe_east')]"
						shortcut = speed_2
					}
					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "3. [Localize('world_steppe_tarim')], [GetDataModelSize(GetGlobalList('world_steppe_tarim'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_steppe_tarim')]"
						shortcut = speed_3
					}

				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				visible = "[GetVariableSystem.Exists('second_region')]"

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[Localize(GetVariableSystem.Get('second_region'))], [GetDataModelSize(GetGlobalList(GetVariableSystem.Get('second_region')))] rulers. Go back, hotkey B."
					}
					onclick = "[GetVariableSystem.Clear('second_region')]"
					onclick = "[GetVariableSystem.Clear('region')]"
					shortcut = go_back
				}

				# western europe
				vbox = {
					visible = "[GetVariableSystem.HasValue('second_region', 'world_europe_west')]"
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "1. [Localize('world_europe_west_britannia')], [GetDataModelSize(GetGlobalList('world_europe_west_britannia'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_europe_west_britannia')]"
						shortcut = speed_1
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "2. [Localize('world_europe_west_germania')], [GetDataModelSize(GetGlobalList('world_europe_west_germania'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_europe_west_germania')]"
						shortcut = speed_2
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "3. [Localize('world_europe_west_francia')], [GetDataModelSize(GetGlobalList('world_europe_west_francia'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_europe_west_francia')]"
						shortcut = speed_3
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "4. [Localize('world_europe_west_iberia')], [GetDataModelSize(GetGlobalList('world_europe_west_iberia'))]."
						}
						onclick = "[GetVariableSystem.Set('region', 'world_europe_west_iberia')]"
						shortcut = speed_4
					}
				}
			}
		}

		# list of regions
		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[GetVariableSystem.Exists('region')]"

			button_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					raw_text = "[Localize(GetVariableSystem.Get('region'))], [GetDataModelSize(GetGlobalList(GetVariableSystem.Get('region')))] rulers. Go back, hotkey B."
				}
				onclick = "[GetVariableSystem.Clear('region')]"
				shortcut = go_back
			}

			### Europe ###

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_europe_west_britannia')]"
				datamodel = "[GetGlobalList('world_europe_west_britannia')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_europe_west_germania')]"
				datamodel = "[GetGlobalList('world_europe_west_germania')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_europe_west_francia')]"
				datamodel = "[GetGlobalList('world_europe_west_francia')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_europe_west_iberia')]"
				datamodel = "[GetGlobalList('world_europe_west_iberia')]"
			}

			#

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_europe_south_east')]"
				datamodel = "[GetGlobalList('world_europe_south_east')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_europe_south_italy')]"
				datamodel = "[GetGlobalList('world_europe_south_italy')]"
			}


			###


			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_africa_north_west')]"
				datamodel = "[GetGlobalList('world_africa_north_west')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_africa_north_east')]"
				datamodel = "[GetGlobalList('world_africa_north_east')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_africa_west')]"
				datamodel = "[GetGlobalList('world_africa_west')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_africa_east')]"
				datamodel = "[GetGlobalList('world_africa_east')]"
			}

			###

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_middle_east_jerusalem')]"
				datamodel = "[GetGlobalList('world_middle_east_jerusalem')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_middle_east_arabia')]"
				datamodel = "[GetGlobalList('world_middle_east_arabia')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_middle_east_persia')]"
				datamodel = "[GetGlobalList('world_middle_east_persia')]"
			}


			###

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_steppe_tarim')]"
				datamodel = "[GetGlobalList('world_steppe_tarim')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_steppe_west')]"
				datamodel = "[GetGlobalList('world_steppe_west')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_steppe_east')]"
				datamodel = "[GetGlobalList('world_steppe_east')]"
			}

			###


			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_india_deccan')]"
				datamodel = "[GetGlobalList('world_india_deccan')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_india_bengal')]"
				datamodel = "[GetGlobalList('world_india_bengal')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_india_rajastan')]"
				datamodel = "[GetGlobalList('world_india_rajastan')]"
			}

			###

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_europe_north')]"
				datamodel = "[GetGlobalList('world_europe_north')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_europe_east')]"
				datamodel = "[GetGlobalList('world_europe_east')]"
			}


			###

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_asia_minor')]"
				datamodel = "[GetGlobalList('world_asia_minor')]"
			}

			####

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_tibet')]"
				datamodel = "[GetGlobalList('world_tibet')]"
			}

			region_list = {
				visible = "[GetVariableSystem.HasValue('region', 'world_burma')]"
				datamodel = "[GetGlobalList('world_burma')]"
			}

		}

		expand = { }
	}
}
