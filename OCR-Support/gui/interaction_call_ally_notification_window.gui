######################################################
############## INTERACTION NOTIFICATION ##############
######################################################

window = {
	name = "call_ally_interaction_notification_window"
	parentanchor = top|hcenter
	position = { 0 0 }
	layer = top
	using = TooltipFocus

	using = Window_Background
	# using = Window_Decoration_Warfare

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		start_sound = {
			soundeffect = "event:/SFX/UI/War/sfx_ui_window_war_show"
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	vbox = {
		using = Window_Margins
		margin_top = 20
		set_parent_size_to_minimum = yes

		background = { using = Background_Area_Border_Solid }

		text_single = {
			layoutpolicy_horizontal = expanding
			raw_text = "[CharacterInteractionNotificationWindow.GetContextName]."
		}

		vbox_sender_portrait_message = {
			layoutpolicy_horizontal = expanding
		}

		vbox = {
			name = "allies"
			datacontext = [CallAllyInteractionNotificationWindow.GetPrimaryAlly]
			visible = [Character.IsValid]
			layoutpolicy_horizontal = expanding
			margin = { 0 5 }
			margin_left = 15

			text_single = {
				layoutpolicy_horizontal = expanding
				raw_text = "[Localize('WAR_ALLIES')],"
			}

			realm_name = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CallAllyInteractionNotificationWindow.GetPrimaryAlly]"
				blockoverride "extra" {
					text_single = {
						raw_text = " [Character.GetMilitaryStrengthText] men,"
					}
					text_single = {
						raw_text = " Opinion [Character.GetOpinionOf( GetPlayer )]."
					}
				}
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				raw_text = "And [GetDataModelSize(CallAllyInteractionNotificationWindow.GetSecondaryAllies)] more. See tooltip."
				visible = "[DataModelHasItems(CallAllyInteractionNotificationWindow.GetSecondaryAllies)]"

				tooltipwidget = {
					flowcontainer = {
						using = DefaultTooltipBackground
						margin = { 15 10 }
						direction = vertical
						datamodel = "[CallAllyInteractionNotificationWindow.GetSecondaryAllies]"

						item = {
							flowcontainer = {
								spacing = 3
								# soldiers_and_quality_small_text = {
								# 	datacontext = "[WarParticipantItem.GetComposition]"
								# }
								realm_name = {
									datacontext = "[WarParticipantItem.GetCharacter]"
									blockoverride "pre" {
										spacing = 3
										text_single = {
											raw_text = "[Character.GetMilitaryStrengthText] men,"
										}
									}
								}
							}
						}
					}
				}
			}
		}

		vbox = {
			datacontext = [CallAllyInteractionNotificationWindow.GetPrimaryAlly]
			visible = [Character.IsValid]
			layoutpolicy_horizontal = expanding
			margin = { 0 5 }
			margin_left = 15

			text_single = {
				layoutpolicy_horizontal = expanding
				raw_text = "[Localize('WAR_ENEMIES')],"
			}

			realm_name = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CallAllyInteractionNotificationWindow.GetPrimaryEnemy]"
				blockoverride "extra" {
					text_single = {
						raw_text = " [Character.GetMilitaryStrengthText] men."
					}
				}
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				raw_text = "And [GetDataModelSize(CallAllyInteractionNotificationWindow.GetSecondaryEnemies)] more. See tooltip."
				visible = "[DataModelHasItems(CallAllyInteractionNotificationWindow.GetSecondaryEnemies)]"

				tooltipwidget = {
					flowcontainer = {
						using = DefaultTooltipBackground
						margin = { 15 10 }
						direction = vertical
						datamodel = "[CallAllyInteractionNotificationWindow.GetSecondaryEnemies]"

						item = {
							flowcontainer = {
								spacing = 3
								# soldiers_and_quality_small_text = {
								# 	datacontext = "[WarParticipantItem.GetComposition]"
								# }
								realm_name = {
									datacontext = "[WarParticipantItem.GetCharacter]"
									blockoverride "pre" {
										spacing = 3
										text_single = {
											raw_text = "[Character.GetMilitaryStrengthText] men,"
										}
									}
								}
							}
						}
					}
				}
			}
		}


		vbox_character_interaction_effects = {
			visible = "[CharacterInteractionNotificationWindow.GetCharacterInteraction.ShowEffectsInNotification]"
			datacontext = "[CharacterInteractionNotificationWindow.GetEffectsDescription]"
		}

		vbox = {
			margin = { 0 10 }
			layoutpolicy_horizontal = expanding

			button_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					raw_text = "[CharacterInteractionNotificationWindow.GetAnswerRejectText]."
				}
				blockoverride "disabled" {
					visible = "[Not(CharacterInteractionNotificationWindow.CanReject)]"
				}
				name = "reject_button"
				onclick = "[CharacterInteractionNotificationWindow.Reject]"
				enabled = "[CharacterInteractionNotificationWindow.CanReject]"
			}

			button_primary_text = {
				layoutpolicy_horizontal = expanding
				name = "accept_button"
				blockoverride "text" {
					raw_text = "[CharacterInteractionNotificationWindow.GetAnswerAcceptText]"
				}
				blockoverride "disabled" {
					visible = "[Not(CharacterInteractionNotificationWindow.CanAccept)]"
				}
				blockoverride "hotkey" {
					visible = "[CharacterInteractionNotificationWindow.CanAccept]"
				}
				onclick = "[CharacterInteractionNotificationWindow.Accept]"
				enabled = "[CharacterInteractionNotificationWindow.CanAccept]"
			}
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			blockoverride "text" {
				raw_text = "Miniminze window, Escape"
			}
			using = close_window_ocr
			onclick = "[CallAllyInteractionNotificationWindow.Close]"
		}
	}

}
