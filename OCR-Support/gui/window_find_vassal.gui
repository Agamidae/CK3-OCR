window = {
	name = "find_vassal_list_window"
	layer = top
	allow_outside = yes

	# using = title_view_window_side_pop_out
	# using = Window_Position_CharacterList
	# using = Window_Size_CharacterList
	using = base_ocr_window

	datacontext = "[FindVassalListWindow.GetFindVassalList]"

	window_ocr = {
		blockoverride "show_window" {}
		blockoverride "ocr_header" {
			button = {
				using = close_window_ocr
				onclick = "[FindVassalListWindow.Close]"
			}
			button_text = {
				layoutpolicy_horizontal = expanding
				shortcut = map_mode_1
				onclick = "[Toggle('grant_vassal_buttons')]"
				blockoverride "text" {
					raw_text = "Grant [FindVassalListWindow.GetTitle.GetNameNoTooltip]"
				}
				blockoverride "extra" {
					# , = {}
					# text_single = {
					# 	raw_text = "buttons"
					# }
					# text_single = {
					# 	raw_text = "[Collapse('grant_vassal_buttons')] E."
					# }
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Isnt('grant_vassal_buttons')]"
				vbox = {
					visible = "[Or(FindVassalListWindow.GetTitle.IsBarony,FindVassalListWindow.GetTitle.IsCounty)]"
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding
						name = "grant_to_same_culture_noble"
						using = agot_show_same_culture_noble
						using = locr_hide
						onclick = "[FindVassalListWindow.GetTitle.CreateHolderForTitle]"
						onclick = "[FindVassalListWindow.Close]"
						tooltip = "[FindVassalListWindow.GetGrantVassalToSameCultureTooltip]"
						shortcut = map_mode_1
						blockoverride "pre" {
							text_single = {
								raw_text = "E,"
							}
						}
						blockoverride "text" {
							raw_text = "GRANT_TO_SAME_CULTURE_NOBLE_INFO"
						}
						blockoverride "dot" {}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						visible = "[Not( ObjectsEqual( FindVassalListWindow.GetTitle.GetProvince.GetCulture, GetPlayer.GetCulture ) )]"
						onclick = "[FindVassalListWindow.GetTitle.CreateLocalHolderForTitle]"
						onclick = "[FindVassalListWindow.Close]"
						tooltip = "[FindVassalListWindow.GetTitle.GetAutoGrantTitleToLocalRulerDesc]"
						shortcut = explore_legends
						blockoverride "pre" {
							text_single = {
								raw_text = "L,"
							}
						}
						blockoverride "text" {
							raw_text = "GRANT_TO_LOCAL_CULTURE_NOBLE_INFO"
						}
						blockoverride "dot" {}
					}
				}

				text_single = {
					visible = "[Or(FindVassalListWindow.GetTitle.IsBarony,FindVassalListWindow.GetTitle.IsCounty)]"
					text = grant_title_info_text
					layoutpolicy_horizontal = expanding
					margin_left = 5
				}
			}
		}
		blockoverride "ocr_content" {

			vbox_paged_list = {
				datacontext = "[GetScriptedGui('find_vassal_page')]"
				blockoverride "page_index" {
					datacontext = "[GetPlayer.MakeScope.Var('find_vassal_page')]"
				}

				blockoverride "full_datamodel" {
				  datamodel = "[CharacterSelectionList.GetList]"
				}
				blockoverride "list_datamodel" {
				  datamodel = "[PageModelGlobal(CharacterSelectionList.GetList)]"
				}
				blockoverride "vbox_contents" {
					fixed_character_list = {
						layoutpolicy_horizontal = expanding
						blockoverride "sort" {
							using = sgui_click_reset
						}
						blockoverride "reset_page" {
							using = sgui_finish_reset
						}
						blockoverride "reverse_order" {
							shortcut = mapmode_house_secondary
						}
						blockoverride "toggle_text" {
							text_single = {
								raw_text = "Toggle: Shift D."
							}
						}

						blockoverride "widget_index" {
							page_index = {}
						}
						name = find_vassal_list
						blockoverride "click" {
							# onclick = "[DefaultOnCharacterClick(CharacterListItem.GetCharacter.GetID)]"
							onclick = "[CharacterListItem.OnClick('character')]"
							onclick = "[CloseGameView('holding_view')]"
							onrightclick = "[DefaultOnCharacterClick(CharacterListItem.GetCharacter.GetID)]"
							onrightclick = "[CloseGameView('holding_view')]"
						}
					}
				}
			}
		}
	}

	vbox = {
		margin = { 20 20 }
		visible = no
		# spacing = 10



		vbox_character_list = {
			name = "find_vassal_list"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			blockoverride "container_implementation"
			{
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Not(CharacterSelectionList.IsBuildingList)]"

					fixedgridbox = {
						addcolumn = 650
						addrow = 65
						using = ocr

						name = "characters_grid"
						datamodel = "[CharacterSelectionList.GetList]"

						item = {
							widget_character_list_item_finder_ocr = {
								size = { 650 65 }
								blockoverride "click" {
									# onclick = "[DefaultOnCharacterClick(CharacterListItem.GetCharacter.GetID)]"
									onclick = "[CharacterListItem.OnClick('character')]"
									onclick = "[CloseGameView('holding_view')]"
									onrightclick = "[DefaultOnCharacterClick(CharacterListItem.GetCharacter.GetID)]"
								}
								text_single = {
									parentanchor = right
									position = { -10 0 }
									name = "debug_relevance_score"
									raw_text = "Relevance: [FindVassalListWindow.GetRelevance( CharacterListItem.Self )]"
									default_format = "D"
									visible = "[InDebugMode]"

									tooltipwidget = {
										widget_value_breakdown_tooltip = {
											datacontext = "[FindVassalListWindow.GetRelevanceBreakdown( CharacterListItem.GetCharacter )]"
										}
									}
								}
							}
						}
					}

				}
				blockoverride "scrollbox_empty_visibility"
                {
					visible = "[Not(CharacterSelectionList.HasItems)]"
					layoutpolicy_vertical = expanding
					text = "CHARACTER_FINDER_NO_MATCH"
                }
			}
		}
	}

	window_character_filter = {
		parentanchor = top
		size = { 700 100% }
		position = { 20 0 }
		blockoverride "addition_filter" {
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('relation_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('gender_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('adult_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('age_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('hook_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('claim_filter')]"
			}
		}
	}
}

template agot_show_same_culture_noble {
	visible = yes
}
