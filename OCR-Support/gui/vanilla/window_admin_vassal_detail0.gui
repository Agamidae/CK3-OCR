types VANILLA {
  type admin_vassal_detail_view_old = window {
		parentanchor = top|right
		position = { -610 0 }
		size = { 605 100% }
		using = vanilla

		movable = yes
		layer = middle

		using = Window_Background
		using = Window_Decoration

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			using = Window_Margins

			datacontext = "[AdminVassalDetailView.GetTitle]"
			datacontext = "[AdminVassalDetailView.GetGovernor]"

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "[Title.GetNameNoTooltip]"
				}

				blockoverride "button_close"
				{
					onclick = "[AdminVassalDetailView.Close]"
				}

				button = {
					onclick = "[ClearErrorLog]"
					shortcut = action_list
				}

				# text_single = {
				# 	position = { 0 10 }
				# 	raw_text = "Errors: [NumberOrErrors]"
				# }
			}


			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				blockoverride "scrollbox_background" {
				}
				blockoverride "scrollbox_margins" {
					margin_right = 20
				}
				blockoverride "scrollbox_content" {

					vbox = {
						layoutpolicy_horizontal = expanding

						widget = {
							name = "background"

							coat_of_arms_icon = {
								size = { 128 128 }
								coat_of_arms = "[Title.GetTitleCoA.GetTexture('(int32)230','(int32)230')]"
								coat_of_arms_slot = "[Title.GetTitleCoA.GetSlot('(int32)230','(int32)230')]"
								coat_of_arms_mask = "gfx/interface/coat_of_arms/designer_mask.dds"

								color = { 1 1 1 0.5 }

								modify_texture = {
									texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
									rotate_uv = 1.08
									translate_uv = { 0.3 0 }
									blend_mode = alphamultiply
								}

								using = Mask_Rough_Edges
							}
						}

						hbox = {
							name = "header_details"
							layoutpolicy_horizontal = expanding
							margin = { 10 10 }
							spacing = 10

							coa_title_medium_crown = { }

							expand = {}

							vbox = {

								hbox = {
									visible = "[Not( Character.IsIndependentRuler )]"
									margin = { 12 8 }
									spacing = 8

									background = {
										using = Background_Area_Dark
										alpha = 0.75
									}

									text_single = {
										name = "administration_type"
										layoutpolicy_horizontal = expanding
										align = top
										text = ADMIN_WINDOW_THEME_ADMINISTRATION_TYPE
									}

									button_modify_theme = { }

									button_round = {
										datacontext = "[Title.GetHolder.GetLiege]"
										visible = "[And(Title.GetHolder.IsPlayer,Title.GetHolder.GetLiege.IsValid)]"
										enabled = "[Character.IsPlayerInteractionValid('admin_vassal_modify_vassal_contract_interaction')]"
										tooltip = "[Character.GetPlayerInteractionTooltip('admin_vassal_modify_vassal_contract_interaction')]"
										onclick = "[Character.OpenPlayerInteraction('admin_vassal_modify_vassal_contract_interaction')]"

										button_add_laws = {
											parentanchor = center
											alwaystransparent = yes
										}
									}
									button_round = {
										visible = "[Character.IsPlayerInteractionShown('give_vassal_directive_interaction')]"
										enabled = "[Character.IsPlayerInteractionValid('give_vassal_directive_interaction')]"
										onclick = "[Character.OpenPlayerInteraction('give_vassal_directive_interaction')]"
										tooltip = "[Character.GetPlayerInteractionTooltip('give_vassal_directive_interaction')]"

										block "give_directive_button_round" {}

										button_give_directive = {
											alwaystransparent = yes
											parentanchor = center
										}
										using = tooltip_se
									}
									vbox = {
										margin_top = -11
										text_single = {
											visible = "[Character.IsPlayerInteractionShown('give_vassal_directive_interaction')]"
											text = "[Character.Custom('vassal_directive_icon')]"
											tooltip = "[Character.Custom('vassal_directive_text')]"
											using = tooltip_se
										}
									}
								}

								text_label_left = {
									visible = "[Character.IsIndependentRuler]"
									text = ADMIN_WINDOW_THEME_IMPERIAL_LANDS_HEADER
								}

								text_single = {
									name = "tier_info"
									layoutpolicy_horizontal = expanding
									text = ADMIN_VASSAL_DETAILS_TITLE_TIER
								}

								text_single = {
									name = "theme_size"
									layoutpolicy_horizontal = expanding
									raw_text = ADMIN_WINDOW_THEME_COUNTIES
								}
							}
							expand = {}
							expand = {}


						}

						vbox = {
							name = "contribution_info"
							layoutpolicy_horizontal = expanding
							margin = { 0 12 }
							spacing = 4

							background ={
								using = Background_Area
							}

							text_label_center = {
								text = ADMIN_VASSAL_DETAILS_INCOME_HEADER

								background = {
									using = Background_Area
								}
							}

							text_single = {
								visible = "[Not( Character.IsIndependentRuler )]"
								text = ADMIN_VASSAL_DETAILS_INCOME_DESCRIPTION
								default_format = "#low"
							}

							text_multi = {
								visible = "[Character.IsIndependentRuler]"
								layoutpolicy_horizontal = expanding
								max_width = 360

								align = center
								text = ADMIN_VASSAL_THEME_IMPERIAL_LANDS_INCOME_TOP_LIEGE
								default_format = "#low"
							}

							hbox = {
								spacing = 10
								datacontext = "[Title.GetHolder.GetVassalContract]"

								# text_single = {
								# 	raw_text = "Paid to liege:"
								# 	autoresize = no
								# 	size = { 120 22 }
								# 	align = nobaseline
								# }

								icon_gold = {
									size = { 32 32 }
								}

								progressbar_standard = {
									size = { 90 25 }
									value = "[FixedPointToProgressbarValue(VassalContract.GetTaxRatioForLiege)]"

									text_single = {
										parentanchor = center
										text = "ADMIN_VASSAL_DETAILS_TAX_CONTRIBUTION"
										default_format = "#high"
										align = nobaseline
									}

									using = tooltip_ws
								}

								flowcontainer = {
									ignoreinvisible = yes
									spacing = 5

									text_single = {
										visible = "[GreaterThan_CFixedPoint(VassalContract.GetTaxRatioForLiege, '(CFixedPoint)0')]"
										raw_text = "[Divide_CFixedPoint(AdminVassalDetailView.GetTaxContribution, VassalContract.GetTaxRatioForLiege)|1]"
										align = nobaseline
									}
								}


								spacer = {
									size = { 32 -1 }
								}

								icon_soldiers = {
									size = { 32 32 }
								}

								progressbar_standard = {
									size = { 90 25 }
									value = "[FixedPointToProgressbarValue(VassalContract.GetLevyRatioForLiege)]"

									text_single = {
										parentanchor = center
										text = "ADMIN_VASSAL_DETAILS_LEVY_CONTRIBUTION"
										default_format = "#high"
										align = nobaseline
									}

									using = tooltip_ws
								}

								flowcontainer = {
									ignoreinvisible = yes
									spacing = 5

									text_single = {
										visible = "[GreaterThan_CFixedPoint(VassalContract.GetLevyRatioForLiege, '(CFixedPoint)0')]"
										raw_text = "[Divide_CFixedPoint(AdminVassalDetailView.GetLevyContribution, VassalContract.GetLevyRatioForLiege)|0]"
										align = nobaseline
									}
								}
							}

							hbox = {
								visible = no
								spacing = 16

								text_single = {
									raw_text = "income:"
									autoresize = no
									size = { 120 22 }
									align = nobaseline
								}

								icon_gold = {
									size = { 32 32 }
								}

								text_label_center = {
									min_width = 80
									raw_text = " "
									flowcontainer = {
										ignoreinvisible = yes
										spacing = 15
										datacontext = "[Title.GetHolder.GetVassalContract]"

										text_single = {
											visible = "[GreaterThan_CFixedPoint(VassalContract.GetTaxRatioForLiege, '(CFixedPoint)0')]"
											raw_text = "[Divide_CFixedPoint(AdminVassalDetailView.GetTaxContribution, VassalContract.GetTaxRatioForLiege)|1v]"
										}
										text_single = {
											visible = "[EqualTo_CFixedPoint(VassalContract.GetTaxRatioForLiege, '(CFixedPoint)0')]"
											raw_text = "N/A"
										}
									}
								}

								spacer = {
									size = { 32 -1 }
								}

								icon_soldiers = {
									size = { 32 32 }
								}

								text_label_center = {
									min_width = 80
									raw_text = " "
									flowcontainer = {
										ignoreinvisible = yes
										spacing = 15
										datacontext = "[Title.GetHolder.GetVassalContract]"

										text_single = {
											visible = "[GreaterThan_CFixedPoint(VassalContract.GetTaxRatioForLiege, '(CFixedPoint)0')]"
											raw_text = "[Divide_CFixedPoint(AdminVassalDetailView.GetLevyContribution, VassalContract.GetLevyRatioForLiege)|0v]"
										}
										text_single = {
											visible = "[EqualTo_CFixedPoint(VassalContract.GetLevyRatioForLiege, '(CFixedPoint)0')]"
											raw_text = "N/A"
										}
									}
								}
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 15
							margin = { 10 10 }

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5
								margin_left = 25

								text_single = {
									raw_text = "BANNER_MEN_AT_ARMS_LABEL"
								}

								# [GetDataModelSize(Title.GetControlledMAA)]

								text_single = {
									raw_text = "[Title.GetTotalTitleMAATroopsDesc]"
								}
								expand = {}

								text_single = {
									visible = "[DataModelHasItems(Title.GetControlledMAA)]"
									raw_text = "[GetDataModelSize(Title.GetControlledMAA)]/[Add_CFixedPoint(Character.MakeScope.ScriptValue('bav_maa_title_cap'), Select_CFixedPoint(EqualTo_string(Character.GetHouse.GetHousePowerBonus.GetName, GetHousePowerBonus('army_quartermasters').GetName), '(CFixedPoint)1', '(CFixedPoint)0'))]"
									align = right
									margin_right = 25
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								background = { using = Background_Area margin = { 10 5 } }

								fixedgridbox = {
									addcolumn = 250
									addrow = 96
									# datamodel_wrap = 5
									setitemsizefromcell = yes
									flipdirection = yes
									maxhorizontalslots = 2

									datamodel = "[Title.GetControlledMAA]"

									item = {
										widget = {
											container_maa_item = {
												parentanchor = hcenter
											}
										}
									}
								}

								# expand = {}
							}

							# hbox = {
							# 	layoutpolicy_horizontal = expanding
							# 	spacing = 10
							# 	expand = {}
							#
							# 	button_standard = {
							# 		raw_text = "Transfer"
							# 		enabled = "[Title.CanTransferTitleMaaControlToLocalPlayer]"
							# 		onclick = "[Title.TransferMaaControlToLocalPlayer]"
							# 	}
							#
							# 	button_standard = {
							# 		raw_text = "Return"
							# 		enabled = "[Title.CanReturnTitleMaaToOwner]"
							# 		onclick = "[Title.ReturnTitleMaaToOwner]"
							# 	}
							#
							# 	expand = {}
							# }

						}

						hbox = {
							name = "governor_info"
							layoutpolicy_horizontal = expanding
							margin = { 12 12 }
							margin_bottom = 18

							background = {
								using = Background_Area_Light
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									max_width = 300

									text = ADMIN_VASSAL_DETAILS_GOVERNOR_TITLE
									default_format = "#low"
									using = Font_Size_Medium
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									max_width = 300

									text = "[Character.GetNameNoTooltip]"
									using = Font_Size_Medium
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									max_width = 300

									text = "[Character.GetRelationToString( GetPlayer )]"
									default_format = "#low"
								}

								spacer = { size = { -1 8 } }

								vbox = {
									layoutpolicy_horizontal = expanding
									margin_left = 17
									spacing = 5

									hbox = {
										layoutpolicy_horizontal = expanding

										spacing = 15

										text_single = {
											raw_text = "@gold_icon! [Character.GetGold|v0]   [Character.GetBalance|1=v]"
											# using = Font_Size_Medium
										}

										text_single = {
											raw_text = "@soldier_icon! [Character.GetMilitaryStrengthText|v]"
											# using = Font_Size_Medium
										}

										# text_single = {
										# 	visible = "[Not( Character.IsIndependentRuler )]"
										#
										# 	text = ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_VALID
										# 	tooltip = ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_TT
										# }

										expand = {}
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 10

										text_single = {
											raw_text = "[Character.Custom( 'AIEconomicPersonality' )]"
										}

										text_single = {
											raw_text = "[Character.GetAIPersonality]"
										}

										expand = {}
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										margin_top = 10

										hbox = {
											name = "skills_grid"
											margin = { 2 0 }
											background = { using = Background_Area_Border }

											vbox_skill_entry = {}
											vbox_skill_entry = {
												blockoverride "frame" {
													frame = 2
												}
												blockoverride "value" {
													text = "[Character.GetSkill('martial')]"
												}
											}
											vbox_skill_entry = {
												blockoverride "frame" {	frame = 3	}
												blockoverride "value" {
													text = "[Character.GetSkill('stewardship')]"
												}
											}
											vbox_skill_entry = {
												blockoverride "frame" {	frame = 4	}
												blockoverride "value" {
													text = "[Character.GetSkill('intrigue')]"
												}
											}
											vbox_skill_entry = {
												blockoverride "frame" {	frame = 5	}
												blockoverride "value" {
													text = "[Character.GetSkill('learning')]"
												}
											}
											vbox = {
												tooltip = "[CharacterWindow.GetCharacter.GetProwessBreakdown]"
												using = tooltip_ne
												spacing = -3

												using = Animation_Character_Window_Refresh

												icon = {
													name = "prowess_icon"
													size = { 32 32 }
													texture = "gfx/interface/icons/icon_prowess.dds"
												}

												text_single = {
													name = "prowess_value"
													text = "[Character.GetProwess|0v]"
													align = nobaseline
												}
											}

											spacer = {
												size = { 10 0 }
											}

											vbox = {
												tooltip = "ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_TT"
												using = tooltip_ne
												spacing = -3
												margin_right = 3

												icon = {
													name = "char_governor_efficiency_icon"
													size = { 32 32 }
													texture = "gfx/interface/icons/icon_skill_governor_efficiency.dds"
												}

												text_single = {
													name = "char_governor_efficiency_value"
													text = "ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_VALUE"
													align = nobaseline
												}
											}
										}

										expand = {}
									}
								}

							}

							portrait_torso = { }
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							margin = { 10 0 }

							hbox = {
								margin_top = 12
								spacing = 4

								button_round = {
									visible = "[Character.IsPlayerInteractionShown('force_step_down_interaction')]"
									enabled = "[Character.IsPlayerInteractionValid('force_step_down_interaction')]"
									tooltip = "[Character.GetPlayerInteractionTooltip('force_step_down_interaction')]"
									onclick = "[Character.OpenPlayerInteraction('force_step_down_interaction')]"

									button_force_to_step_down = {
										parentanchor = center
										alwaystransparent = yes
									}
								}

								button_round = {
									visible = "[Character.IsPlayerInteractionShown('start_subsume_province_interaction')]"
									enabled = "[Character.IsPlayerInteractionValid('start_subsume_province_interaction')]"
									tooltip = "[Character.GetPlayerInteractionTooltip('start_subsume_province_interaction')]"
									onclick = "[Character.OpenPlayerInteraction('start_subsume_province_interaction')]"

									button_subsume_province = {
										parentanchor = center
										alwaystransparent = yes
									}
								}

								button_round = {
									visible = "[Character.IsPlayerInteractionShown('start_dispute_border_interaction')]"
									enabled = "[Character.IsPlayerInteractionValid('start_dispute_border_interaction')]"
									tooltip = "[Character.GetPlayerInteractionTooltip('start_dispute_border_interaction')]"
									onclick = "[Character.OpenPlayerInteraction('start_dispute_border_interaction')]"

									button_dispute_border = {
										parentanchor = center
										alwaystransparent = yes
									}
								}

								button_round = {
									visible = "[Character.IsPlayerInteractionShown('frontier_influence_war_interaction')]"
									enabled = "[Character.IsPlayerInteractionValid('frontier_influence_war_interaction')]"
									tooltip = "[Character.GetPlayerInteractionTooltip('frontier_influence_war_interaction')]"
									onclick = "[Character.OpenPlayerInteraction('frontier_influence_war_interaction')]"

									button_declare_war = {
										parentanchor = center
										alwaystransparent = yes
									}
								}
								expand = {}
							}

							expand = {}

							hbox = {
								visible = "[GetPlayer.IsIndependentRuler]"

								button_standard = {
									visible = "[Not( Character.IsIndependentRuler )]"
									enabled = "[Character.IsPlayerInteractionValid('revoke_title_interaction')]"

									text = ADMIN_VASSAL_DETAILS_REVOKE_BUTTON

									onclick = "[Character.OpenPlayerInteractionWithTargetTitle('revoke_title_interaction', Title.Self)]"
									onclick = "[Character.PanCameraTo]"
									onclick = "[AdminVassalDetailView.Close]"

									tooltip = "[Character.GetPlayerInteractionTooltip('revoke_title_interaction')]"
								}

								button_standard = {
									visible = "[Character.IsIndependentRuler]"
									enabled = "[And( And( ObjectsEqual( GetPlayer.Self, Character.Self ), Title.CanUseFindVassal( Character.Self ) ), Not( Title.IsLeasedOut ) )]"

									text = ADMIN_VASSAL_DETAILS_APPOINT_BUTTON

									onclick = "[OpenTitleWindowAndGrantTitle( Title.Self )]"
									onclick = "[Character.PanCameraTo]"
									onclick = "[AdminVassalDetailView.Close]"

									tooltip = FIND_VASSAL_BUTTON_TOOLTIP
								}

								expand = { }
							}
						}

						text_multi = {
							visible = "[And( Character.IsIndependentRuler, GetPlayer.IsIndependentRuler )]"
							layoutpolicy_horizontal = expanding
							max_width = 300

							text = ADMIN_WINDOW_THEME_IMPERIAL_LAND_DETAILS
						}

						vbox = {
							name = "succession_info"
							margin = { 0 8 }
							margin_bottom = 12
							spacing = 12
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							background = {
								using = Background_Area
							}


							text_label_center = {
								text = ADMIN_VASSAL_DETAILS_SUCCESSION_LABEL
							}

							hbox_admin_title_successor_candidates_list = {
								datacontext = "[AdminVassalDetailView.GetSuccessorCandidateList]"
							}

							# INVEST IN BEST LOCAL PLAYER CANDIDATE IF THEY EXIST
							hbox = {
								datacontext = "[AdminVassalDetailView.GetTitle]"
								datacontext = "[AdminVassalDetailView.GetSuccessorCandidateList]"
								datacontext = "[AdminVassalSuccessorCandidateList.GetBestLocalPlayerCandidate( '(int32)0' )]"
								datacontext = "[AdminVassalSuccessorCandidate.GetCandidate]"

								visible = "[AdminVassalSuccessorCandidateList.ShowBestPlayerCandidateIndependently( '(int32)0' )]"
								layoutpolicy_horizontal = expanding

								button_standard = {
									enabled = "[Character.IsPlayerInteractionValid('influence_candidacy_interaction')]"
									tooltip = "[Character.GetPlayerInteractionTooltip('influence_candidacy_interaction')]"
									onclick = "[Character.OpenPlayerInteractionWithTargetTitle('influence_candidacy_interaction', Title.Self)]"
									size = { 180 40 }

									hbox = {
										layoutpolicy_horizontal = expanding
										margin = { 8 4 }

										button_promote_candidate = {
											alwaystransparent = yes
										}

										text_single = {
											text = ADMIN_VASSAL_DETAILS_VOTE_FOR_SUCCESSOR_BUTTON
											align = nobaseline
										}
									}
								}
							}

							# INVEST IN ANYONE (FALLBACK)
							hbox = {
								datacontext = "[AdminVassalDetailView.GetTitle]"
								datacontext = "[AdminVassalDetailView.GetSuccessorCandidateList]"

								visible = "[Not( AdminVassalSuccessorCandidateList.ShowBestPlayerCandidateIndependently( '(int32)0' ) )]"
								layoutpolicy_horizontal = expanding

								button_standard = {
									enabled = "[Character.IsPlayerInteractionValid('influence_candidacy_interaction')]"
									tooltip = "[Character.GetPlayerInteractionTooltip('influence_candidacy_interaction')]"
									onclick = "[Character.GetTopLiege.OpenPlayerInteractionWithTargetTitle('influence_candidacy_interaction', Title.Self)]"
									size = { 180 40 }

									hbox = {
										layoutpolicy_horizontal = expanding
										margin = { 8 4 }

										button_promote_candidate = {
											alwaystransparent = yes
										}

										text_single = {
											text = ADMIN_VASSAL_DETAILS_VOTE_FOR_SUCCESSOR_BUTTON
											align = nobaseline
										}
									}
								}
							}
							expand = {}
						}
					}
				}
			}
		}
	}
}
