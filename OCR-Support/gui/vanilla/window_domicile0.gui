types OCR {
  type window_domicile_old = window {
    parentanchor = center
    size = { 1390 694 }

    allow_outside = yes
    using = Window_Movable

    ### TABS
    widget = {
      visible = "[Not(GetVariableSystem.Exists( 'hide_ui' ))]"
      parentanchor = top|left
      position = { -30 25 }
      size = { 60 140 }

      allow_outside = yes

      ### DOMCILE BOOKMARK TABS
      flowcontainer = {
        direction = vertical
        spacing = 2
        ignoreinvisible = yes

        ### DOMCILE BOOKMARK OVERVIEW
        button_tab_vertical_bookmark = {

          blockoverride "tab_button"
          {
            onclick = "[GetVariableSystem.Toggle( 'bookmark_overview' )]"
            onclick = "[GetVariableSystem.Clear( 'show_building_panel' )]"
            onclick = "[GetVariableSystem.Clear( 'bookmark_patrons' )]"
            onclick = "[GetVariableSystem.Clear( 'bookmark_followers' )]"

            tooltip = "DOMICILE_WINDOW_BOOKMARK_OVERVIEW_TT"
          }

          blockoverride "tab_active"
          {
            trigger_when = "[GetVariableSystem.Exists( 'bookmark_overview' )]"
          }

          blockoverride "tab_inactive"
          {
            trigger_when = "[Not( GetVariableSystem.Exists( 'bookmark_overview' ) )]"
          }

          blockoverride "tab_texture"
          {
            datacontext = "[DomicileWindow.GetDomicile]"
            texture = "[Domicile.GetType.GetIcon]"

            down = "[GetVariableSystem.Exists( 'bookmark_overview' )]"
          }
        }

        ### DOMICILE BOOKMARK PATRONS
        button_tab_vertical_bookmark = {
          visible = "[IsLandlessAdventurer( DomicileWindow.GetCharacter )]"

          blockoverride "tab_button"
          {
            onclick = "[GetVariableSystem.Toggle( 'bookmark_patrons' )]"
            onclick = "[GetVariableSystem.Clear( 'show_building_panel' )]"
            onclick = "[GetVariableSystem.Clear( 'bookmark_overview' )]"
            onclick = "[GetVariableSystem.Clear( 'bookmark_followers' )]"

            tooltip = "DOMICILE_WINDOW_BOOKMARK_PATRONS_TT"
          }

          blockoverride "tab_active"
          {
            trigger_when = "[GetVariableSystem.Exists( 'bookmark_patrons' )]"
          }

          blockoverride "tab_inactive"
          {
            trigger_when = "[Not( GetVariableSystem.Exists( 'bookmark_patrons' ) )]"
          }

          blockoverride "tab_texture"
          {
            texture = "gfx/interface/icons/flat_icons/outliner.dds"

            down = "[GetVariableSystem.Exists( 'bookmark_patrons' )]"
          }
        }

        ### DOMICILE BOOKMARK FOLLOWERS
        button_tab_vertical_bookmark = {
          visible = "[IsLandlessAdventurer( DomicileWindow.GetCharacter )]"

          blockoverride "tab_button"
          {
            onclick = "[GetVariableSystem.Toggle( 'bookmark_followers' )]"
            onclick = "[GetVariableSystem.Clear( 'show_building_panel' )]"
            onclick = "[GetVariableSystem.Clear( 'bookmark_overview' )]"
            onclick = "[GetVariableSystem.Clear( 'bookmark_patrons' )]"
            onclick = "[DomicileWindow.RebuildTemperamentWindow]"

            tooltip = "DOMICILE_WINDOW_BOOKMARK_FOLLOWERS_TT"
          }

          blockoverride "tab_active"
          {
            trigger_when = "[GetVariableSystem.Exists( 'bookmark_followers' )]"
          }

          blockoverride "tab_inactive"
          {
            trigger_when = "[Not( GetVariableSystem.Exists( 'bookmark_followers' ) )]"
          }

          blockoverride "tab_texture"
          {
            texture = "gfx/interface/icons/flat_icons/three_people.dds"

            down = "[GetVariableSystem.Exists( 'bookmark_followers' )]"
          }
        }
      }
    }

    widget = {
      allow_outside = yes
      parentanchor = center
      size = { 100% 100% }

      using = Window_Background
      using = Window_Decoration
    }

    state = {
      name = _show
      using = Animation_FadeIn_Quick
      using = Sound_WindowShow_Standard

      on_start = "[GetVariableSystem.Clear( 'bookmark_overview' )]"
      on_start = "[GetVariableSystem.Clear( 'bookmark_patrons' )]"
      on_start = "[GetVariableSystem.Clear( 'bookmark_followers' )]"
      on_start = "[GetVariableSystem.Clear( 'show_building_panel' )]"
      on_start = "[DomicileWindow.ClearConstructionStartedNotification]"
    }

    state = {
      name = _hide
      using = Animation_FadeOut_Quick
      using = Sound_WindowHide_Standard
    }

    vbox = {
      layoutpolicy_horizontal = expanding
      layoutpolicy_vertical = expanding

      using = Window_Margins

      vbox = {
        datamodel = "[DomicileWindow.GetBuildingSlots]"
        layoutpolicy_horizontal = expanding
        layoutpolicy_vertical = expanding

        using = Background_Letter
      }
    }

    ### FRAME
    widget = {
      name = "domicile_frame"
      parentanchor = center
      position = { 0 -2 }
      size = { 1274 624 }

      background = {
        texture = "gfx/interface/window_domiciles/domicile_frame.dds"
      }
    }

    ### BACKGROUND
    widget = {
      parentanchor = center
      position = { 0 -2 }
      size = { 1206 556 }

      background = {
        texture = "[DomicileSettings.GetBackgroundTexture]"
      }
    }

    ### BUILDINGS
    widget = {
      name = "domicile_buildings"
      visible = "[Domicile.IsValid]"
      parentanchor = center
      position = { 0 -2 }
      size = { 1206 556 }

      allow_outside = yes

      datamodel = "[DomicileWindow.GetBuildingSlots]"

      item = {
        domicile_building_button = {
          datacontext = "[DomicileBuildingSlot.GetAsset]"
          visible = "[Not( And( And(DomicileBuildingSlot.IsFree, Not(DomicileBuildingSlot.IsUnderConstruction) ), Not(DomicileWindow.IsEditMode) ) )]"

          allow_outside = yes

          blockoverride "locale_texture"
          {
            position = "[DomicileBuildingSlot.GetPositionInPercent( PdxGuiWidget.AccessParent.Self )]"
            size = "[DomicileBuildingSlot.GetSizeInPercent( PdxGuiWidget.AccessParent.Self )]"
            intersectionmask_texture = "[DomicileBuildingAsset.GetTextureMask]"
          }
        }
      }
    }

    ### FOREGROUND
    widget = {
      parentanchor = center
      position = { 0 -2 }
      size = { 1206 556 }

      background = {
        texture = "[DomicileSettings.GetForegroundTexture]"
      }
    }

    ### PAPER RIPPLE NOISE VFX
    # The size and position should be same as domicile_frame
    widget = {
      name = "ripple_noise_vfx"
      parentanchor = center
      size = { 1274 624 }

      icon_ripple_noise = {
        size = { 100% 100% }
      }
    }

    ## HEADER
    widget = {
      parentanchor = top|hcenter
      position = { 0 18 }
      size = { 1274 66 }

      widget = {
        size = { 444 66 }
        parentanchor = center

        icon = {
          parentanchor = center
          size = { 444 66 }
          texture = "gfx/interface/window_domiciles/domicile_header_background.dds"
        }

        text_single = {
          margin = { 80 10 }
          parentanchor = center

          text = "[Domicile.GetName|U]"
          align = nobaseline
          default_format = "#light_background"
          max_width = 400
          using = Font_Size_Big
          using = Font_Type_Flavor
        }

        ### Parent button to make area that trigger show/hide animation bigger
        button = {
          visible = "[DomicileWindow.IsEditMode]"
          parentanchor = center
          size = { 100% 100% }

          state = {
            name = _mouse_hierarchy_enter
            on_start = "[GetVariableSystem.Toggle( 'open_edit_domicile_name_contextual_button' )]"
            on_finish = "[GetVariableSystem.Toggle( 'open_edit_domicile_name_contextual_button' )]"
          }

          state = {
            name = _mouse_hierarchy_leave
            on_start = "[GetVariableSystem.Toggle( 'open_edit_domicile_name_contextual_button' )]"
            on_finish = "[GetVariableSystem.Toggle( 'open_edit_domicile_name_contextual_button' )]"
          }

          button_edit_text = {
            visible = "[And( DomicileWindow.HasRenameWindow, GetVariableSystem.Exists( 'open_edit_domicile_name_contextual_button' ) )]"
            parentanchor = right|vcenter
            position = { -40 -2 }

            onclick = "[DomicileWindow.OpenRenameWindow]"

            tooltip = "DOMICILE_WINDOW_CUSTOMIZE_NAME"

            # ### Hover animation - used when hovering banner texture
            state = {
              name = _show
              using = Animation_FadeIn_Standard
            }

            state = {
              name = _hide
              using = Animation_FadeOut_Standard
            }

            background = {
              using = Background_Area_Dark
              margin = { 2 2 }
            }
          }
        }
      }

      ## WINDOW CONTROL BUTTONS
      widget = {
        parentanchor = right|vcenter
        position = { 8 0 }
        size = { 124 54 }

        icon = {
          size = { 124 54 }
          texture = "gfx/interface/window_domiciles/domicile_window_control_background.dds"
          spriteType = Corneredtiled
          spriteborder = { 72 10 }
          texture_density = 2
        }

        hbox = {
          spacing = 5

          margin = { 10 0 }

          button_hide_ui = {
            visible = "[Not( GetVariableSystem.Exists( 'hide_ui' ) )]"
            size = { 30 30 }

            onclick = "[GetVariableSystem.Toggle( 'hide_ui' )]"

            tooltip = "HIDE_UI_BUTON_TEXT_HIDE"
            using = tooltip_ne

            background = {
              using = Background_Area_Dark
              margin = { 2 2 }
            }
          }

          button_show_ui = {
            visible = "[GetVariableSystem.Exists( 'hide_ui' )]"
            size = { 30 30 }

            onclick = "[GetVariableSystem.Toggle( 'hide_ui' )]"

            tooltip = "HIDE_UI_BUTTON_TEXT_SHOW"
            using = tooltip_ne

            background = {
              using = Background_Area_Dark
              margin = { 2 2 }
            }
          }

          button_go_to_my_location = {
            size = { 30 30 }

            onclick = "[Domicile.GetLocation.PanCameraTo]"

            using = Animation_ShowHide_Quick

            tooltip = "[DomicileWindow.GetGoToLocationTooltip]"
            using = tooltip_ne

            background = {
              using = Background_Area_Dark
              margin = { 2 2 }
            }
          }

          button_close = {
            size = { 30 30 }

            onclick = "[DomicileWindow.Close]"
            shortcut = "close_window"

            using = Animation_ShowHide_Quick

            tooltip = "CLOSE_TOOLTIP"
            using = tooltip_ne

            background = {
              using = Background_Area_Dark
              margin = { 2 2 }
            }
          }
        }
      }
    }

    ### MOVE DOMICILE BUTTON
    widget = {
      name = "move_domicile"
      visible = "[And( DomicileWindow.IsEditMode, Not( GetVariableSystem.Exists( 'hide_ui' ) ) )]"
      parentanchor = bottom|hcenter
      position = { 0 -28 }
      size = { 200 54 }

      background = {
        texture = "gfx/interface/window_domiciles/domicile_window_control_background.dds"
        spriteType = Corneredtiled
        spriteborder = { 72 10 }
        texture_density = 2
      }

      button_standard = {
        name = "move_domcicle_button"
        datacontext = "[DomicileWindow.GetDomicile]"
        parentanchor = center

        text = "DOMICILE_OVERVIEW_MOVE_BUTTON_TEXT"

        onclick = "[OpenGameView( 'move_domicile_planner' )]"
        onclick = "[DomicileWindow.Close]"
        enabled = "[Domicile.CanMove]"

        tooltip = "[Domicile.GetType.GetMoveTooltip( Character.Self )]"
        tooltip_when_disabled = "[Domicile.GetMoveTooltip]"
        using = tooltip_ne

        background = {
          using = Background_Area_Light
          alpha = 0.8
        }
      }
    }

    ### DEBUG INTERACTIONS
    widget = {
      name = "debug_interactions"
      visible = "[InDebugMode]"
      parentanchor = bottom|right
      position = { -70 -28 }
      size = { 480 54 }

      flowcontainer = {
        parentanchor = center
        spacing = 5

        using = Background_Letter
        margin = { 10 10 }

        button_standard = {
          size = { 140 33 }
          raw_text = "Refresh Data"

          raw_tooltip = "DEBUG: Click to reload domicile database changes"
          using = tooltip_ne

          onclick = "[DomicileWindow.RefreshBuildingSlots]"
        }

        button_standard = {
          size = { 110 33 }
          text = "[DomicileSettings.GetType.GetName]"
          default_format = "#D"

          raw_tooltip = "DEBUG: Click to toggle between Camp and Estate"
          using = tooltip_ne

          onclick = "[DomicileSettings.ToggleType]"
        }

        dropdown_menu_standard = {
          blockoverride "dropdown_properties"
          {
            datamodel = "[DomicileWindow.GetCultureSets]"
            onselectionchanged = "[DomicileWindow.OnSelectCultureSet]"
            selectedindex = "[DomicileWindow.GetHoveredCultureSetIndex]"
          }

          blockoverride "dropdown_size"
          {
            size = { 135 32 }
          }

          blockoverride "dropdown_list_maxsize"
          {
            maximumsize = { 127 550 }
          }

          blockoverride "dropdown_active_item_properties"
          {
            text = "[DomicileCultureSet.GetName]"
          }

          blockoverride "dropdown_item_properties"
          {
            text = "[DomicileCultureSet.GetName]"
          }

          raw_tooltip = "DEBUG: Click to toggle between culture sets"
          using = tooltip_ne
        }
      }
    }

    ### CONSTRUCT BUILDING PANELS
    widget = {
      name = "construction_panel"
      visible = "[GetVariableSystem.Exists( 'show_building_panel' )]"
      parentanchor = top|right
      allow_outside = yes

      state = {
        name = _show
        using = Animation_FadeIn_Quick
        using = Sound_WindowShow_Standard
      }

      state = {
        name = _hide
        using = Animation_FadeOut_Quick
        using = Sound_WindowHide_Standard
      }

      ### RIGHT SIDE PANELS
      widget = {
        datacontext = "[DomicileWindow.GetSelectedBuildingSlot]"
        visible = "[And( Not(DomicileWindow.IsInspectLineTreeBuilding), And( DomicileBuildingSlot.IsFree, Not(DomicileBuildingSlot.IsUnderConstruction) ) )]"
        widgetanchor = right

        position = { 0 2 }
        size = { 600 690 }

        using = Window_Background

        ### EMPTY SLOT PANEL
        vbox_domicile_empty_slot_panel = {}
      }

      widget = {
        datacontext = "[DomicileWindow.GetSelectedBuildingSlot]"
        visible = "[Or( Or( DomicileBuildingSlot.HasBaseBuilding, DomicileWindow.IsInspectLineTreeBuilding ), DomicileBuildingSlot.IsUnderConstruction )]"
        parentanchor = vcenter
        widgetanchor = right

        position = { 0 2 }
        size = { 600 688 }

        using = Window_Background

        ### UPGRADE PANEL
        vbox_domicile_upgrade_panel = {}
      }
    }

    ### BOOKMARK PANEL - OVERVIEW
    widget = {
      name = "bookmark_overview"
      visible = "[GetVariableSystem.Exists( 'bookmark_overview' )]"
      parentanchor = left
      allow_outside = yes
      size = { 600 688 }
      position = { 0 3 }

      using = Window_Background

      state = {
        name = _show
        using = Animation_FadeIn_Quick
        using = Sound_WindowShow_Standard
      }

      state = {
        name = _hide
        using = Animation_FadeOut_Quick
        using = Sound_WindowHide_Standard
      }

      vbox = {
        layoutpolicy_horizontal = expanding
        layoutpolicy_vertical = expanding
        datacontext = "[DomicileWindow.GetDomicile]"

        using = Window_Margins

        ### Header ###
        header_pattern = {
          layoutpolicy_horizontal = expanding

          blockoverride "header_text" {
            text = "DOMICILE_WINDOW_BOOKMARK_OVERVIEW_TITLE"
          }

          blockoverride "button_close" {
            onclick = "[GetVariableSystem.Toggle( 'bookmark_overview' )]"
          }
        }

        vbox = {
          datacontext = "[DomicileWindow.GetDomicile]"
          layoutpolicy_horizontal = expanding
          layoutpolicy_vertical = expanding

          ### Domicile background illustration
          background = {
            texture = "[Domicile.GetType.GetIllustration]"
            fittype = end
            alpha = 0.3

            using = Mask_Rough_Edges

            modify_texture = {
              texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
              blend_mode = alphamultiply
              mirror = vertical
            }
          }

          ### Overview Resources
          vbox = {
            datacontext = "[DomicileWindow.GetDomicile]"
            layoutpolicy_horizontal = expanding

            text_label_center = {
              text = "DOMICILE_WINDOW_BOOKMARK_OVERVIEW_RESOURCES"
            }

            hbox = {
              layoutpolicy_horizontal = expanding
              margin_left = 10
              margin_top = 5
              margin_bottom = 5
              spacing = 10

              expand = {}

              ### Overview Resources Gold
              hbox = {
                spacing = 5

                tooltip = "[Domicile.GetGoldResourceTooltip]"
                using = tooltip_ne

                icon = {
                  name = "gold_icon"
                  size = { 30 30 }
                  texture = "gfx/interface/icons/icon_gold.dds"
                }

                text_single = {
                  name = "balance_positive"
                  visible = "[GreaterThanOrEqualTo_CFixedPoint(Domicile.GetGoldResource, '(CFixedPoint)0')]"
                  text = "DOMICILE_RESOURCE_GOLD_BALANCE"
                  align = nobaseline
                  max_width = 50
                  default_format = "#high"
                  using = Font_Size_Small
                }

                text_single = {
                  name = "balance_negative"
                  visible = "[LessThan_CFixedPoint(Domicile.GetGoldResource, '(CFixedPoint)0')]"
                  text = "DOMICILE_RESOURCE_GOLD_BALANCE"
                  max_width = 50
                  default_format = "#N"
                  using = Font_Size_Small
                }
              }

              vbox = {
                layoutpolicy_vertical = expanding

                divider_light = {
                  layoutpolicy_vertical = expanding
                }
              }

              ### Overview Resources Provisions
              hbox = {
                visible = "[IsLandlessAdventurer( DomicileWindow.GetCharacter )]"
                spacing = 5

                tooltip = "[Domicile.GetProvisionsBreakdown]"
                using = tooltip_ne

                icon = {
                  name = "icon_provisions"
                  size = { 30 30 }
                  framesize = { 60 60 }
                  frame = 0
                  texture = "gfx/interface/icons/icon_camp_supply.dds"
                }

                text_single = {
                  name = "provisions_value_positive"
                  visible = "[Not( Or( Domicile.IsProvisionsLow, Domicile.IsProvisionsCritical ) )]"

                  text = "[Domicile.GetProvisions|0]"
                  align = nobaseline
                  max_width = 50
                  default_format = "#high"
                  using = Font_Size_Small
                }

                text_single = {
                  name = "provisions_value_low"
                  visible = "[Domicile.IsProvisionsLow]"

                  text = "[Domicile.GetProvisions|0]"
                  align = nobaseline
                  max_width = 50
                  default_format = "#color_yellow"
                  using = Font_Size_Small
                }

                text_single = {
                  name = "provisions_value_critical"
                  visible = "[Domicile.IsProvisionsCritical]"

                  text = "[Domicile.GetProvisions|0]"
                  align = nobaseline
                  max_width = 50
                  default_format = "#N"
                  using = Font_Size_Small
                }
              }

              vbox = {
                visible = "[IsLandlessAdventurer( DomicileWindow.GetCharacter )]"
                layoutpolicy_vertical = expanding

                divider_light = {
                  layoutpolicy_vertical = expanding
                }
              }

              ### Overview Resources Prestige
              hbox = {
                spacing = 5

                tooltip = "[Domicile.GetPrestigeResourceTooltip]"
                using = tooltip_ne

                icon = {
                  name = "prestige_icon"
                  size = { 30 30 }
                  texture = "[GetPlayer.GetPrestigeLevelTexture]"
                }

                text_single = {
                  name = "balance_positive"
                  visible = "[GreaterThanOrEqualTo_CFixedPoint(Domicile.GetPrestigeResource, '(CFixedPoint)0')]"
                  text = "DOMICILE_RESOURCE_PRESTIGE_BALANCE"
                  align = nobaseline
                  max_width = 50
                  default_format = "#high"
                  using = Font_Size_Small
                }

                text_single = {
                  name = "balance_negative"
                  visible = "[LessThan_CFixedPoint(Domicile.GetPrestigeResource, '(CFixedPoint)0')]"
                  text = "DOMICILE_RESOURCE_PRESTIGE_BALANCE"
                  max_width = 50
                  default_format = "#N"
                  using = Font_Size_Small
                }
              }

              vbox = {
                layoutpolicy_vertical = expanding

                divider_light = {
                  layoutpolicy_vertical = expanding
                }
              }

              ### Overview Resources Piety
              hbox = {
                spacing = 5

                tooltip = "[Domicile.GetPietyResourceTooltip]"
                using = tooltip_ne

                icon = {
                  name = "piety_icon"
                  size = { 30 30 }
                  texture = "[GetPlayer.GetPietyLevelTexture]"
                }

                text_single = {
                  name = "balance_positive"
                  visible = "[GreaterThanOrEqualTo_CFixedPoint(Domicile.GetPietyResource, '(CFixedPoint)0')]"
                  text = "DOMICILE_RESOURCE_PIETY_BALANCE"
                  align = nobaseline
                  max_width = 50
                  default_format = "#high"
                  using = Font_Size_Small
                }

                text_single = {
                  name = "balance_negative"
                  visible = "[LessThan_CFixedPoint(Domicile.GetPietyResource, '(CFixedPoint)0')]"
                  text = "DOMICILE_RESOURCE_PIETY_BALANCE"
                  max_width = 50
                  default_format = "#N"
                  using = Font_Size_Small
                }
              }

              vbox = {
                visible = "[IsAdministrativeRuler( DomicileWindow.GetCharacter )]"
                layoutpolicy_vertical = expanding

                divider_light = {
                  layoutpolicy_vertical = expanding
                }
              }

              ### Overview Resources Influence
              hbox = {
                visible = "[IsAdministrativeRuler( DomicileWindow.GetCharacter )]"
                spacing = 5

                tooltip = "[Domicile.GetInfluenceResourceTooltip]"
                using = tooltip_ne

                icon = {
                  name = "influence_icon"
                  size = { 30 30 }
                  texture = "[GetPlayer.GetInfluenceLevelTexture]"
                }

                text_single = {
                  name = "balance_positive"
                  visible = "[GreaterThanOrEqualTo_CFixedPoint(Domicile.GetInfluenceResource, '(CFixedPoint)0')]"
                  text = "DOMICILE_RESOURCE_INFLUENCE_BALANCE"
                  align = nobaseline
                  max_width = 50
                  default_format = "#high"
                  using = Font_Size_Small
                }

                text_single = {
                  name = "balance_negative"
                  visible = "[LessThan_CFixedPoint(Domicile.GetInfluenceResource, '(CFixedPoint)0')]"
                  text = "DOMICILE_RESOURCE_INFLUENCE_BALANCE"
                  max_width = 50
                  default_format = "#N"
                  using = Font_Size_Small
                }
              }

              expand = {}
            }
          }

          vbox = {
            layoutpolicy_horizontal = expanding
            layoutpolicy_vertical = expanding

            spacing = 5

            scrollbox = {
              layoutpolicy_horizontal = expanding
              layoutpolicy_vertical = expanding

              blockoverride "scrollbox_margins"
              {
                margin = { 10 10 }
                margin_right = 20
              }

              blockoverride "scrollbox_content"
              {
                vbox = {
                  margin_bottom = 20
                  layoutpolicy_horizontal = expanding

                  datamodel = "[DomicileWindow.GetOverviewBuildings]"

                  ### Overview Buildings
                  text_label_center = {
                    text = "DOMICILE_WINDOW_BOOKMARK_OVERVIEW_BUILDINGS_LIST"
                  }

                  item = {
                    vbox_domicile_building_overview_group_foldout = {}
                  }
                }
              }
            }
          }
        }
      }
    }

    ### BOOKMARK PANEL - PATRONS
    widget = {
      name = "bookmark_patrons"
      visible = "[GetVariableSystem.Exists( 'bookmark_patrons' )]"
      parentanchor = left
      allow_outside = yes
      position = { 0 3 }
      size = { 600 688 }

      using = Window_Background

      state = {
        name = _show
        using = Animation_FadeIn_Quick
        using = Sound_WindowShow_Standard
      }

      state = {
        name = _hide
        using = Animation_FadeOut_Quick
        using = Sound_WindowHide_Standard
      }

      vbox = {
        layoutpolicy_horizontal = expanding
        layoutpolicy_vertical = expanding

        using = Window_Margins

        ### Domicile background illustration
        background = {
          texture = "[Domicile.GetType.GetIllustration]"
          fittype = end
          alpha = 0.3
          margin = { -40 0 }
          margin_bottom = -20

          using = Mask_Rough_Edges

          modify_texture = {
            texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
            blend_mode = alphamultiply
            mirror = vertical
          }
        }

        ### Header ###
        header_pattern = {
          layoutpolicy_horizontal = expanding

          blockoverride "header_text" {
            text = "DOMICILE_WINDOW_BOOKMARK_PATRONS_TITLE"
          }

          blockoverride "button_close" {
            onclick = "[GetVariableSystem.Toggle( 'bookmark_patrons' )]"
          }
        }

        scrollbox = {
          name = "patrons_list"
          layoutpolicy_horizontal = expanding
          layoutpolicy_vertical = expanding

          blockoverride "scrollbox_content"
          {
            vbox = {
              layoutpolicy_horizontal = expanding
              spacing = 15

              vbox = {
                layoutpolicy_horizontal = expanding
                ignoreinvisible = yes
                spacing = 5

                datamodel = "[GetPlayer.GetTaskContractEmployers]"

                text_label_center = {
                  text = "DOMICILE_WINDOW_BOOKMARK_PATRONS_INFO"
                }

                item = {
                  hbox_patron_item = {
                    visible = "[Not( DomicileWindow.IsPatronTooFarAway( Character.Self ) )]"
                  }
                }
              }

              vbox = {
                layoutpolicy_horizontal = expanding
                ignoreinvisible = yes
                spacing = 5

                datamodel = "[GetPlayer.GetTaskContractEmployers]"

                text_label_center = {
                  text = "DOMICILE_WINDOW_BOOKMARK_PATRONS_FAR_AWAY"
                }

                item = {
                  hbox_patron_item = {
                    visible = "[DomicileWindow.IsPatronTooFarAway( Character.Self )]"
                  }
                }
              }
            }
          }
        }
      }
    }

    ### BOOKMARK PANEL - FOLLOWERS
    widget = {
      name = "bookmark_followers"
      visible = "[GetVariableSystem.Exists( 'bookmark_followers' )]"
      parentanchor = center
      layoutpolicy_horizontal = expanding
      layoutpolicy_vertical = expanding
      allow_outside = yes
      alwaystransparent = no

      size = { 1350 688 }

      state = {
        name = _show
        using = Animation_FadeIn_Quick
        using = Sound_WindowShow_Standard
      }

      state = {
        name = _hide
        using = Animation_FadeOut_Quick
        using = Sound_WindowHide_Standard
      }

      background = {
        texture = "gfx/interface/component_tiles/tile_window_background.dds"
        spriteType = Corneredtiled
        spriteborder = { 18 0 }
        texture_density = 2
        margin = { -10 -17 }

        modify_texture = {
          texture = "gfx/interface/component_overlay/overlay_effect.dds"
          blend_mode = overlay
        }
      }

      vbox = {
        layoutpolicy_horizontal = expanding
        layoutpolicy_vertical = expanding

        margin = { 20 18}

        ### Header ###
        header_pattern = {
          datacontext = "[DomicileWindow.GetCharacter]"

          layoutpolicy_horizontal = expanding

          blockoverride "header_text" {
            text = "[DomicileSettings.GetType.GetTitleText( Character.Self )]"
          }

          blockoverride "button_close" {
            onclick = "[GetVariableSystem.Toggle( 'bookmark_followers' )]"
          }
        }

        background = {
          texture = "[Domicile.GetType.GetIllustration]"
          fittype = centercrop
          using = Mask_Rough_Edges

          margin = { 0 -16 }

          modify_texture = {
            texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
            blend_mode = alphamultiply
          }
        }

        portrait_button = {
          name = "solo_leader"
          datacontext = "[DomicileWindow.GetCharacter]"
          visible = "[IsDataModelEmpty( Character.GetCourt )]"
          size = { 360 560 }

          using = portrait_base
          alwaystransparent = yes

          portrait_texture = "[Character.GetAnimatedPortrait( 'environment_body', 'shop_camera_main_near_angle_30', 'personality_honorable', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"
          mask = "gfx/portraits/portrait_mask_solid.dds"

          blockoverride "grayscale" {}
          blockoverride "portrait_button_template_onmouseenter" {}
          blockoverride "portrait_button_template_onmouseleave" {}
          blockoverride "portrait_button_template_onclick" {}
          blockoverride "portrait_button_template_onrightclick" {}
          blockoverride "portrait_button_template_tooltip" {}
        }

        hbox = {
          name = "follower_cards_container"
          spacing = 20

          datamodel = "[DomicileWindow.GetFollowerCardItems]"

          item = {
            widget_domicile_follower_card = {}
          }
        }

        expand = {}
      }

      widget = {
        datacontext = "[DomicileWindow.GetCharacter]"
        visible = "[Not( IsDataModelEmpty( Character.GetCourt ) )]"
        allow_outside = yes
        parentanchor = hcenter
        position = { 0 100 }

        tooltip = "[DomicileWindow.GetTemperamentModifierDesc]"
        tooltip_offset = { 0 20 }
        using = tooltip_ne

        hbox = {
          parentanchor = center
          layoutpolicy_horizontal = expanding
          spacing = 5

          text_label_center = {
            text = "[DomicileWindow.GetTemperamentText]"
            using = Font_Size_Medium
          }

          icon = {
            size = { 30 30 }
            framesize = { 60 60 }
            frame = "[DomicileWindow.GetTemperamentFrame]"
            texture = "gfx/interface/icons/loyalty.dds"
          }
        }
      }

      widget = {
        datacontext = "[DomicileWindow.GetCharacter]"
        visible = "[IsDataModelEmpty( Character.GetCourt )]"
        allow_outside = yes
        parentanchor = hcenter
        position = { 0 100 }

        hbox = {
          parentanchor = center
          layoutpolicy_horizontal = expanding
          spacing = 5

          text_label_center = {
            text = "DOMICILE_WINDOW_BOOKMARK_FOLLOWERS_MISSING"
            using = Font_Size_Medium
          }
        }
      }
    }
  }
}
