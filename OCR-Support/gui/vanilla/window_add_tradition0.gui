######################################################
################## CULTURE ADD TRADITION #############
######################################################
types OCR {
	type add_tradition_window_old = window {
		parentanchor = center
		size = { 600 950 }
		using = vanilla
		layer = windows_layer

		datacontext = "[GetPlayer.GetCulture]"

		using = Window_Background
		using = Window_Decoration

		state = {
			name = _show
			using = Animation_FadeIn_Quick
			on_start = "[AddTraditionWindow.SetTraditionCategory( AddTraditionWindow.GetTraditionGrouping( 'realm' ).GetCategory )]"
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		vbox = {
			using = Window_Margins
			minimumsize = { 600 0 }

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "[SelectLocalization(AddTraditionWindow.IsReplacing, 'REPLACE_TRADITION_WINDOW_TITLE', 'ADD_TRADITION_WINDOW_TITLE')]"
				}

				blockoverride "button_close"
				{
					onclick = "[AddTraditionWindow.Close]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 4 0 }

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_bottom = -4

					# The parameter for GetTraditionGrouping should match the categories in the traditions script
					add_tradition_category = {
						datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'realm' )]"
					}
					add_tradition_category = {
						datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'combat' )]"
					}
					add_tradition_category = {
						datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'societal' )]"
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_bottom = 5

					add_tradition_category = {
						datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'ritual' )]"
					}
					add_tradition_category = {
						datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'regional' )]"
					}
				}
			}

			vbox = {
				name = "tradition_selection"
				margin = { 0 8 }
				spacing = 6

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox_traditions_list = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'realm' )]"
				}

				vbox_traditions_list = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'combat' )]"
				}

				vbox_traditions_list = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'societal' )]"
				}

				vbox_traditions_list = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'ritual' )]"
				}

				vbox_traditions_list = {
					datacontext = "[AddTraditionWindow.GetTraditionGrouping( 'regional' )]"
				}

				vbox = {
					name = "cost"
					datacontext = "[AddTraditionWindow.GetSelectedTradition]"
					visible = "[CultureTradition.IsValid]"
					minimumsize = { 0 28 }
					spacing = 10
					tooltip = "[SelectLocalization(AddTraditionWindow.IsReplacing, 'REPLACE_TRADITION_COST_TOOLTIP', 'ADD_TRADITION_COST_TOOLTIP')]"

					text_single = {
						layoutpolicy_horizontal = expanding
						align = center|nobaseline
						text = "[SelectLocalization(AddTraditionWindow.IsReplacing, 'REPLACE_TRADITION_TOTAL_COST', 'ADD_TRADITION_TOTAL_COST')]"
						default_format = "#high"
						using = Font_Size_Medium

						background = {
							visible = "[Not( AddTraditionWindow.CanPayCost )]"
							margin = { 5 0 }
							using = Status_Bad
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 44 8 }
					spacing = 20

					button_standard= {
						name = "decline_button"
						text = "CANCEL_BUTTON"
						onclick = [AddTraditionWindow.Close]
						shortcut = "close_window"
					}

					button_primary = {
						name = "done"
						layoutpolicy_horizontal = expanding
						onclick = "[AddTraditionWindow.AddTradition]"
						onclick = "[AddTraditionWindow.Close]"
						enabled = "[AddTraditionWindow.CanAddTradition]"
						text = "[SelectLocalization(AddTraditionWindow.IsReplacing, 'REPLACE_TRADITION_EXECUTE_LABEL', 'ADD_TRADITION_EXECUTE_LABEL')]"
						default_format = "#high"

						tooltip = "[SelectLocalization(AddTraditionWindow.IsReplacing, 'REPLACE_TRADITION_EXECUTE_TOOLTIP', 'ADD_TRADITION_EXECUTE_TOOLTIP')]"

						warning_icon = {
							visible = "[Culture.IsReforming]"
							parentanchor = vcenter|right
							size = { 25 25 }
							position = { -3 0 }
							alwaystransparent = yes
						}
					}
				}
			}
		}
	}
}
