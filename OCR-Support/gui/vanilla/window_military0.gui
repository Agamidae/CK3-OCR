types OCR {
	type military_old = margin_widget {
		size = { 100% 100% }
		using = old_margins

		widget = {
			size = { 100% 100% }

			### WINDOW CONTENT
			vbox = {
				using = Window_Margins

				widget_header_with_picture = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text" {
						text = "MILITARY_VIEW"
					}

					blockoverride "illustration_texture" {
						texture = "gfx/interface/illustrations/window_headers/header_military.dds"
					}

					blockoverride "button_close" {
						onclick = "[MilitaryView.Close]"
					}

					vbox = {
						layoutpolicy_vertical = expanding

						expand = {}

						hbox = {
							name = "army_automation_controls_tutorial_uses_this"
							layoutpolicy_horizontal = expanding
							margin = { 10 0 }
							spacing = 5

							expand = {}
							button_toggle_companion_ai = {}

							button_standard = {
								size = { 38 38 }
								onclick = "[MilitaryView.ShowArmyAutomationOptions]"

								tooltip = "MV_AUTOMATION_SETTINGS_TT"
								using = tooltip_sw

								button_edit_automation = {
									parentanchor = center
									alwaystransparent = yes
									size = { 28 28 }
								}
							}
						}
						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5
							margin = { 10 4 }

							ignoreinvisible = yes

							expand = {}

							button_primary = {
								name = "tutorial_highlight_raise_troops_button"

								datacontext = "[GetPlayer]"
								onclick = "[PlayerRaiseAllRegiments]"
								enabled = "[PlayerCanRaiseAnyRallyPoint]"
								onrightclick = "[PlayerRaiseAllRegimentsAtLocation]"
								button_ignore = none

								text = "RAISE_ALL"
								size = {180 32}

								tooltip = "[GetPlayerRaiseAllTooltip]"
								using = tooltip_se
								clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"

								# animation_attention_text = {
								# 	visible = "[And( And( GetPlayer.IsAtWar, PlayerCanRaiseAnyRallyPoint ),Not(GetPlayer.HasRaisedRegiments) )]"
								# }
							}

							button_standard = {
								datacontext = "[GetPlayer]"
								onclick = "[PlayerRaiseAllRaidRegiments]"
								visible = "[Character.CanRaid]"
								enabled = "[PlayerCanRaiseAnyRaiderRallyPoint]"
								onrightclick = "[PlayerRaiseAllRaidRegimentsAtLocation]"
								button_ignore = none

								text = "RAISE_ALL_RAIDERS"
								size = { 200 32 }

								tooltip = "[GetPlayerRaiseAllRaidersTooltip]"
								using = tooltip_se
								clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
							}

							button_standard = {
								datacontext = "[GetPlayer]"

								onclick = "[PlayerDisbandAll]"
								enabled = "[PlayerCanDisbandAll]"

								text = "DISBAND_ALL"
								size = { 135 32 }

								tooltip = "[GetDisbandAllTooltip]"
								using = tooltip_se
								clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_unit_army_disband"
							}
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_bottom = 5

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[MilitaryView.SetActiveTab( 'owned_armies' )]"
						down = "[MilitaryView.IsTabActive( 'owned_armies' )]"

						text_single = {
							text = "BANNER_TROOPS_TAB"
							parentanchor = center

							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}

					button_tab = {
						name = ra_highlight_imperial_armies
						widgetid = ra_highlight_imperial_armies

						visible = "[MilitaryView.GetCharacter.GetGovernment.HasRule( 'administrative' )]"
						layoutpolicy_horizontal = expanding

						onclick = "[MilitaryView.SetActiveTab( 'title_troops' )]"
						down = "[MilitaryView.IsTabActive( 'title_troops' )]"

						text_single = {
							parentanchor = center
							text = "MV_ARMIES_SELECTION_IMPERIAL"

							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[MilitaryView.SetActiveTab( 'mercenary' )]"
						down = "[MilitaryView.IsTabActive( 'mercenary' )]"

						text_single = {
							text = "MV_MERCENARIES"
							parentanchor = center

							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}


				}

				# Your Armies
				vbox = {
					name = "tab_your_armies"
					visible = "[MilitaryView.IsTabActive( 'owned_armies' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					scrollbox = {
						name = "scrollbox_troops"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						background = {
							texture = "gfx/interface/skinned/illustrations/moving.dds"
							fittype = end
							alpha = 0.3

							using = Mask_Rough_Edges

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
								blend_mode = alphamultiply
								mirror = vertical
							}
						}

						blockoverride "scrollbox_content" {
							vbox_your_armies = {
								visible = "[Or(GetVariableSystem.HasValue( 'military_view_armies', 'personal' ), Or(Not(GetVariableSystem.Exists('military_view_armies')), Not(MilitaryView.GetCharacter.GetGovernment.HasRule( 'administrative' ))))]"

								layoutpolicy_horizontal = expanding
								margin = { 10 0 }
								spacing = 10
							}

							vbox_imperial_armies = {
								visible = "[GetVariableSystem.HasValue( 'military_view_armies', 'imperial' )]"
								layoutpolicy_horizontal = expanding
							}
						}
					}

					hbox = {
						visible = "[GetVariableSystem.HasValue( 'military_view_armies', 'imperial' )]"
						margin_top = 5
						margin_bottom = -10
						spacing = 5

						button_standard = {
							datacontext = "[GetPlayer]"
							visible = "[Character.GetGovernment.HasRule( 'administrative' )]"
							enabled = "[MilitaryView.CanReturnControlledMaA]"
							onclick = "[MilitaryView.ReturnControlledMaA]"

							text = "MV_RETURN_CONTROLLED"
						}

						button_standard = {
							datacontext = "[GetPlayer]"
							visible = "[And(Character.GetGovernment.HasRule( 'administrative' ), Character.IsIndependentRuler)]"
							enabled = "[MilitaryView.CanReturnReassignedMaA]"
							onclick = "[MilitaryView.ReturnReassignedMaA]"

							text = "MV_RETURN_REASSIGNED"
						}
					}

					vbox = {
						name = "rally_points"
						layoutpolicy_horizontal = expanding
						margin = { 25 10 }
						spacing = 5
						visible = "[Not(GetPlayer.HasActiveCompanionAISetting('raise_armies'))]"

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "MV_RALLY_POINTS"
						}

						divider_light = {
							layoutpolicy_horizontal = expanding
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							hbox = {
								name = "rally_point_list"
								datamodel = "[MilitaryView.GetRallyPoints]"

								item = {
									button = {
										name = "rally_point_button"
										datacontext = "[RallyPointItem.GetRallyPoint]"
										size = { 50 50 }
										onclick = "[RallyPointItem.OnClick]"
										tooltip = "MV_RALLY_POINT_TT"
										using = tooltip_ne
										texture = "gfx/interface/window_military/banner_icon.dds"
										tintcolor = "[RallyPoint.GetColor]"
									}
								}
							}

							button_plus_small = {
								name = "add_rally_point"
								enabled = "[MilitaryView.CanAddRallyPoint]"
								onclick = "[MilitaryView.OnAddRallyPoint]"
								tooltip = "[MilitaryView.GetAddRallyPointTooltip]"
							}

							expand = {}
						}
					}

					vbox = {
						name = "footer"
						layoutpolicy_horizontal = expanding
						margin = { 90 0 }
						margin_bottom = 10

						background = {
							using = Background_Bottom_Fade
							margin_bottom = 20
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							margin = { 10 10 }
							spacing = 2

							background = {
								using = Background_Area
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not( GetPlayer.GetGovernment.HasRule( 'conditional_maa_refill' ))]"

								button_checkbox_label = {
									onclick = "[MilitaryView.OnMilitaryReinforcementClick]"
									tooltip = "[MilitaryView.GetMilitaryReinforcementCostTooltip]"

									blockoverride "checkbox"
									{
										checked = "[MilitaryView.IsMilitaryReinforcementsEnabled]"
									}

									blockoverride "text"
									{
										text = "MONTHLY_REINFORCEMENT_COST_LABEL"
									}
								}

								expand = {}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[GetPlayer.GetGovernment.HasRule( 'conditional_maa_refill' )]"

								text_multi = {
									text = "ADVENTURER_MAINTENANCE_INFO"
									align = nobaseline
									autoresize = yes
									max_width = 350
									default_format = "#weak"
								}

								expand = {}
							}

							divider_light = {
								layoutpolicy_horizontal = expanding
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5

									text_single = {
										text = "MONTHLY_MAINTENANCE_LABEL"
										maximumsize = { 400 -1 }
									}

									expand = {
										size = { 28 28 }
									}

									icon = {
										size = { 28 28 }
										visible = "[MilitaryView.HasEmbarkedArmies]"
										texture = "gfx/interface/icons/map_icons/naval_transportation.dds"
										tooltip = "MV_EMBARKED_TT"
									}

									text_single = {
										datacontext = "[MilitaryView.GetGoldMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPrestigeMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPietyMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										text = "COST_RESULT_NOTHING"
										visible = "[And(EqualTo_CFixedPoint(MilitaryView.GetGoldMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ,And( EqualTo_CFixedPoint( MilitaryView.GetPrestigeMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0'), EqualTo_CFixedPoint(MilitaryView.GetPietyMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ) ) ]"
										maximumsize = { 400 -1 }
										default_format = "#high"
									}
								}

								hbox = {
									visible = "[MilitaryView.HasAnyRaisedMilitaryExpenses]"
									layoutpolicy_horizontal = expanding
									spacing = 10

									expand = {}

									text_single = {
										text = "MONTHLY_MAX_MAINTENANCE_LABEL"
										maximumsize = { 400 -1 }
										tooltip = "MONTHLY_MAX_MAINTENANCE_TT"
										align = nobaseline
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedGoldMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "MONTHLY_MAX_MAINTENANCE_VIEW"
										maximumsize = { 400 -1 }
										default_format = "#weak"
										align = nobaseline
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPrestigeMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPrestigeMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPietyMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPietyMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}
								}
							}
						}
					}

					expand = {}
				}

				# You Imperial Armies
				vbox = {
					name = imperial_armies_ra_uses_this
					widgetid = imperial_armies_ra_uses_this
					visible = "[MilitaryView.IsTabActive( 'title_troops' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					scrollbox = {
						name = "scrollbox_troops"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						background = {
							texture = "gfx/interface/skinned/illustrations/moving.dds"
							fittype = end
							alpha = 0.3

							using = Mask_Rough_Edges

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
								blend_mode = alphamultiply
								mirror = vertical
							}
						}

						blockoverride "scrollbox_content" {
							vbox_imperial_armies = {
								layoutpolicy_horizontal = expanding
								margin = { 10 0 }
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 20 10 }
						spacing = 5

						expand = {}

						button_standard = {
							datacontext = "[GetPlayer]"
							visible = "[Character.GetGovernment.HasRule( 'administrative' )]"
							layoutpolicy_horizontal = expanding
							enabled = "[MilitaryView.CanReturnControlledMaA]"
							onclick = "[MilitaryView.ReturnControlledMaA]"

							text = "MV_RETURN_CONTROLLED"
							tooltip = "MV_RETURN_CONTROLLED_TT"
							using = tooltip_sw
						}

						button_standard = {
							datacontext = "[GetPlayer]"
							visible = "[And(Character.GetGovernment.HasRule( 'administrative' ), Character.IsIndependentRuler)]"
							layoutpolicy_horizontal = expanding
							enabled = "[MilitaryView.CanReturnReassignedMaA]"
							onclick = "[MilitaryView.ReturnReassignedMaA]"

							text = "MV_RETURN_REASSIGNED"
							tooltip = "MV_RETURN_REASSIGNED_TT"
							using = tooltip_sw
						}

						expand = {}
					}

					vbox = {
						name = "rally_points"
						layoutpolicy_horizontal = expanding
						margin = { 25 0 }
						margin_bottom = 10
						spacing = 5

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "MV_RALLY_POINTS"
						}

						divider_light = {
							layoutpolicy_horizontal = expanding
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							hbox = {
								name = "rally_point_list"
								datamodel = "[MilitaryView.GetRallyPoints]"

								item = {
									button = {
										name = "rally_point_button"
										datacontext = "[RallyPointItem.GetRallyPoint]"
										size = { 50 50 }
										onclick = "[RallyPointItem.OnClick]"
										tooltip = "MV_RALLY_POINT_TT"
										using = tooltip_ne
										texture = "gfx/interface/window_military/banner_icon.dds"
										tintcolor = "[RallyPoint.GetColor]"
									}
								}
							}

							button_plus_small = {
								name = "add_rally_point"
								enabled = "[MilitaryView.CanAddRallyPoint]"
								onclick = "[MilitaryView.OnAddRallyPoint]"
								tooltip = "[MilitaryView.GetAddRallyPointTooltip]"
							}

							expand = {}
						}
					}

					vbox = {
						name = "footer"
						layoutpolicy_horizontal = expanding
						margin = { 90 0 }
						margin_bottom = 10

						background = {
							using = Background_Bottom_Fade
							margin_bottom = 20
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							margin = { 10 10 }
							spacing = 2

							background = {
								using = Background_Area
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not(GetPlayer.GetGovernment.IsType( 'landless_adventurer_government' ))]"

								button_checkbox_label = {
									onclick = "[MilitaryView.OnMilitaryReinforcementClick]"
									tooltip = "[MilitaryView.GetMilitaryReinforcementCostTooltip]"

									blockoverride "checkbox"
									{
										checked = "[MilitaryView.IsMilitaryReinforcementsEnabled]"
									}

									blockoverride "text"
									{
										text = "MONTHLY_REINFORCEMENT_COST_LABEL"
									}
								}

								expand = {}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[GetPlayer.GetGovernment.IsType( 'landless_adventurer_government' )]"

								text_multi = {
									text = "ADVENTURER_MAINTENANCE_INFO"
									align = nobaseline
									autoresize = yes
									max_width = 350
									default_format = "#weak"
								}

								expand = {}
							}

							divider_light = {
								layoutpolicy_horizontal = expanding
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5

									text_single = {
										text = "MONTHLY_MAINTENANCE_LABEL"
										maximumsize = { 400 -1 }
									}

									expand = {
										size = { 28 28 }
									}

									icon = {
										size = { 28 28 }
										visible = "[MilitaryView.HasEmbarkedArmies]"
										texture = "gfx/interface/icons/map_icons/naval_transportation.dds"
										tooltip = "MV_EMBARKED_TT"
									}

									text_single = {
										datacontext = "[MilitaryView.GetGoldMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPrestigeMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPietyMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										text = "COST_RESULT_NOTHING"
										visible = "[And(EqualTo_CFixedPoint(MilitaryView.GetGoldMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ,And( EqualTo_CFixedPoint( MilitaryView.GetPrestigeMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0'), EqualTo_CFixedPoint(MilitaryView.GetPietyMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ) ) ]"
										maximumsize = { 400 -1 }
										default_format = "#high"
									}
								}

								hbox = {
									visible = "[MilitaryView.HasAnyRaisedMilitaryExpenses]"
									layoutpolicy_horizontal = expanding
									spacing = 10

									expand = {}

									text_single = {
										text = "MONTHLY_MAX_MAINTENANCE_LABEL"
										maximumsize = { 400 -1 }
										tooltip = "MONTHLY_MAX_MAINTENANCE_TT"
										align = nobaseline
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedGoldMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "MONTHLY_MAX_MAINTENANCE_VIEW"
										maximumsize = { 400 -1 }
										default_format = "#weak"
										align = nobaseline
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPrestigeMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPrestigeMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPietyMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPietyMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}
								}
							}
						}
					}

					expand = {}
				}

				# Mercenaries
				vbox = {
					visible = "[MilitaryView.IsTabActive( 'mercenary' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					hbox = {
						layoutpolicy_horizontal = expanding

						button_tab = {
							layoutpolicy_horizontal = expanding

							text = "MV_MERCENARIES_SELECTION_MERCENARIES"

							onclick = "[GetVariableSystem.Set( 'military_view_mercenaries', 'mercenaries' )]"
							down = "[GetVariableSystem.HasValue( 'military_view_mercenaries', 'mercenaries' )]"
						}

						button_tab = {
							layoutpolicy_horizontal = expanding

							text = "MV_MERCENARIES_SELECTION_HIREABLE_RULERS"

							onclick = "[GetVariableSystem.Set( 'military_view_mercenaries', 'hireable_rulers' )]"
							down = "[GetVariableSystem.HasValue( 'military_view_mercenaries', 'hireable_rulers' )]"
						}

						button_tab = {
							layoutpolicy_horizontal = expanding

							onclick = "[GetVariableSystem.Set( 'military_view_mercenaries', 'holy_orders' )]"
							down = "[GetVariableSystem.HasValue( 'military_view_mercenaries', 'holy_orders' )]"

							text_single = {
								text = "MV_HOLY_ORDERS"
								parentanchor = center

								maximumsize = { 400 -1 }
								default_format = "#low"

								alpha = "[Select_float( DataModelHasItems( MilitaryView.GetAllHolyOrders ), '(float)1.0', '(float)0.5' )]"
							}

							text_single = {
								parentanchor = vcenter|right
								position = {-20 0}
								text = "[GetDataModelSize(MilitaryView.GetAllHolyOrders)]"

								default_format = "#low"

								alpha = "[Select_float( DataModelHasItems( MilitaryView.GetAllHolyOrders ), '(float)1.0', '(float)0.5' )]"
							}
						}
					}

					scrollbox = {
						name = "tab_mercenaries"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						background = {
							visible = "[Not( GetVariableSystem.HasValue( 'military_view_mercenaries', 'holy_orders' ) )]"

							texture = "gfx/interface/illustrations/event_scenes/genericcamp.dds"
							alpha = 0.3
							fittype = end
							framesize = { 1200 848 }
							using = Mask_Rough_Edges

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
								blend_mode = alphamultiply
								mirror = vertical
							}
						}

						background = {
							visible = "[GetVariableSystem.HasValue( 'military_view_mercenaries', 'holy_orders' )]"

							texture = "gfx/interface/skinned/illustrations/holy_order_bg.dds"
							alpha = 0.3
							fittype = centercrop
							using = Mask_Rough_Edges

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
								blend_mode = alphamultiply
								mirror = vertical
							}
						}

						blockoverride "scrollbox_content" {
							vbox = {
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								vbox = {
									name = "tutorial_highlight_mercenary_list_item"
									datamodel = "[MilitaryView.GetAllMercenaries]"
									visible = "[GetVariableSystem.HasValue( 'military_view_mercenaries', 'mercenaries' )]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									spacing = 5

									using = Animation_Tab_Switch

									item = {
										vbox = {
											layoutpolicy_horizontal = expanding

											button_mercenary_list_item = {
												datacontext = "[HiredTroopItem.GetMercenaryCompany]"
												size = { 504 92 }

												blockoverride "HiredTroopMenAtArmsTypesDataModel"
												{
													datamodel = "[HiredTroopItem.GetRegiments]"
												}
											}
										}
									}
								}

								vbox = {
									name = "hireable_rulers"
									visible = "[GetVariableSystem.HasValue( 'military_view_mercenaries', 'hireable_rulers' )]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									using = Animation_Tab_Switch

									vbox = {
										name = "populated_list"
										visible = "[Not( IsDataModelEmpty( MilitaryView.GetAllHireableRulers ) )]"

										layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding

										fixedgridbox = {
											datamodel = "[MilitaryView.GetAllHireableRulers]"
											allow_outside = yes

											addcolumn = 504
											addrow = 110 # bit larger to account for spacing

											item = {
												button_hireable_ruler_item = {
													visible = "[Not( ObjectsEqual( HiredTroopItem.GetHireableRuler, GetPlayer ) )]"
													size = { 504 92 }
												}
											}
										}

										expand = { }
									}

									vbox = {
										name = "unpopulated_list"
										visible = "[IsDataModelEmpty( MilitaryView.GetAllHireableRulers )]"
										layoutpolicy_vertical = expanding

										text_single = {

											text = "MV_MERCENARIES_NO_HIREABLE_RULERS_IN_RANGE"
											default_format = "#weak"
										}
									}
								}

								vbox = {
									name = "tab_holy_orders"
									visible = "[GetVariableSystem.HasValue( 'military_view_mercenaries', 'holy_orders' )]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									using = Animation_Tab_Switch

									text_label_center = {
										name = "hired_troops_view_holy_orders_header_item"
										text = "HIRED_TROOPS_VIEW_LIST_HO_HEADER"
									}

									text_single = {
										visible = "[And( Not(MilitaryView.CanUseAnyHolyOrder), DataModelHasItems(MilitaryView.GetAllHolyOrders))]"
										text = "HOLY_ORDER_MUST_BE_AT_WAR_WITH_BAD_FAITH"
									}

									hbox = {
										visible = "[Not(DataModelHasItems(MilitaryView.GetAllHolyOrders ))]"

										text_single = {
											text = "HIRED_TROOPS_VIEW_LIST_HO_NO_HOS"
											default_format = "#weak"
										}
									}

									spacer = {
										size = { 5 10 }
									}

									button_standard = {
										name = "hired_troops_view_create_holy_order_item"
										datacontext = "[GetDecisionWithKey('create_holy_order_decision')]"
										visible = "[Decision.IsShownForPlayer]"
										layoutpolicy_horizontal = expanding

										size = { 504 55 }

										onclick = "[OpenGameViewData( 'decision_detail', Decision.Self)]"

										widget = {
											parentanchor = center
											size = { 523 51 }
											scissor = yes

											icon = {
												name = "illustration"
												visible = "[Decision.IsPossibleForPlayer]"
												parentanchor = right|vcenter

												alpha = 0.7
												position = { -2 0 }
												size = { 250 100 }
												mirror = horizontal

												block "decision_texture_icon" {
													texture = "[Decision.GetPicture( GetPlayer.Self )]"
												}

												modify_texture = {
													texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
													blend_mode = alphamultiply
												}
											}

											highlight_icon = {
												visible = "[Not(Decision.IsPossibleForPlayer)]"
												parentanchor = right|vcenter

												alpha = 0.7
												position = { -2 0 }
												size = { 250 100 }
												mirror = horizontal
												effectname = "GreyedOut"
												tintcolor = { 0.6 0.6 0.6 0.7 }

												block "decision_texture_highlight" {
													texture = "[Decision.GetPicture( GetPlayer.Self )]"
												}

												modify_texture = {
													texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
													blend_mode = alphamultiply
												}
											}

											icon = {
												parentanchor = center
												size = { 523 51 }

												texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
												spriteType = Corneredtiled
												spriteborder = { 5 5 }
											}
										}

										hbox = {
											margin = { 20 0 }
											margin_right = 10

											text_single = {
												name = "title"
												visible = "[Decision.IsPossibleForPlayer]"
												text = "[Decision.GetTitleForPlayer]"
												layoutpolicy_horizontal = growing

												align = nobaseline
												default_format = "#clickable"
											}

											text_single = {
												name = "title2"
												visible = "[Not(Decision.IsPossibleForPlayer)]"
												layoutpolicy_horizontal = growing
												text = "[Decision.GetTitleForPlayer]"

												align = nobaseline
												block "default_format" {
													default_format = "#low"
												}
											}

											highlight_icon = {
												name = "not_possible"
												visible = "[Not(Decision.IsPossibleForPlayer)]"
												size = { 30 30 }
												texture = "gfx/interface/icons/symbols/icon_cross.dds"

											}
										}
									}

									spacer = {
										size = { 5 20 }
									}

									vbox = {
										layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding

										fixedgridbox = {
											datamodel = "[MilitaryView.GetAllHolyOrders]"
											allow_outside = yes

											addcolumn = 504
											addrow = 110 # bit larger to account for spacing

											item = {
												button_holyorder_list_item = {
													datacontext = "[HiredTroopItem.GetHolyOrder]"
													size = { 504 92 }

													blockoverride "HiredTroopMenAtArmsTypesDataModel"
													{
														datamodel = "[HiredTroopItem.GetRegiments]"
													}

												}
											}
										}

										expand = {}
									}
									expand = {}

								}
								expand = {}
							}
						}
					}
				}
			}
		}
	}
}
