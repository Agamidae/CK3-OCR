types OCR {
  type window_culture_old = window {
    movable = no

    using = Window_Size_Sidebar
    using = Window_Background_Sidebar
    using = vanilla

    vbox = {
      using = Window_Margins_Sidebar

      header_pattern = {
        layoutpolicy_horizontal = expanding

        blockoverride "header_text"
        {
          text = "CULTURE_WINDOW_CULTURE"
        }

        blockoverride "button_close"
        {
          onclick = "[CultureWindow.Close]"
          # shortcut = "innovations_window"
        }

        blockoverride "button_back"
        {
          visible = "[HasViewHistory]"
          onclick = "[OpenFromViewHistory]"
          tooltip = "[GetViewHistoryTooltip]"
        }

        blockoverride "button_me"
        {
          onclick = "[DefaultOnCharacterClick(GetPlayer.GetID)]"
        }
      }

      widget = {
        layoutpolicy_horizontal = expanding
        size = { 0 48 }

        vbox = {
          name = "acceptance"
          visible = "[Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) )]"
          spacing = 2
          margin_left = 450
          margin_right = 10

          text_single = {
            name = "acceptance_text"
            layoutpolicy_horizontal = expanding
            text = "CULTURE_VIEW_ACCEPTANCE"
            align = right
            autoresize = no
            tooltip = "CULTURE_ACCEPTANCE_TOOLTIP"
          }

          text_single = {
            visible = "[NotEqualTo_CFixedPoint( Culture.GetAcceptanceDiff( GetPlayer.GetCulture ), '(CFixedPoint)0')]"
            layoutpolicy_horizontal = expanding
            text = "CULTURE_VIEW_ACCEPTANCE_DIFF"
            align = right
            autoresize = no
            tooltip = "CULTURE_ACCEPTANCE_TOOLTIP"
          }

          expand = { }
        }

        hbox = {
          name = "whos_culture"
          margin_top = 5

          vbox = {
            layoutpolicy_vertical = expanding

            text_label_center = {
              text = "[Culture.GetPlayerRelationString]"
              default_format = "#low"
            }

            text_single = {
              text = "[Culture.GetCreationString]"
              max_width = 490
            }
          }
        }
      }


      hbox = {
        name = "tabs"
        layoutpolicy_horizontal = expanding
        margin_top = 10

        button_tab = {
          layoutpolicy_horizontal = expanding
          onclick = "[GetVariableSystem.Set( 'culture_view_tabs', 'overview' )]"
          onclick = "[CultureWindow.HideReformationMode]"
          down = "[GetVariableSystem.HasValue( 'culture_view_tabs', 'overview' )]"

          text_single = {
            parentanchor = center
            text = "CULTURE_VIEW_OVERVIEW"
            maximumsize = { 400 -1 }
            default_format = "#low"
          }
        }

        button_tab = {
          name = "innovations_tab_tutorial_uses_this"
          layoutpolicy_horizontal = expanding
          onclick = "[GetVariableSystem.Set( 'culture_view_tabs', 'innovations' )]"
          onclick = "[CultureWindow.HideReformationMode]"
          down = "[GetVariableSystem.HasValue( 'culture_view_tabs', 'innovations' )]"

          text_single = {
            parentanchor = center
            text = "CULTURE_VIEW_INNOVATIONS"
            maximumsize = { 400 -1 }
            default_format = "#low"
          }
        }
      }

      vbox = {
        name = "traditions_and_pillars_tab_tutorial_uses_this"
        visible = "[GetVariableSystem.HasValue( 'culture_view_tabs', 'overview' )]"
        layoutpolicy_horizontal = expanding
        layoutpolicy_vertical = expanding

        using = Animation_Tab_Switch

        container_pillar_item = {
          datacontext = "[Culture.GetEthos]"

          blockoverride "icon_size" {
            size = { 400 100 }
          }

          button_round = {
            visible = "[CultureWindow.IsInReformationMode]"
            parentanchor = bottom|right
            onclick = "[Culture.OpenReplaceEthosWindow]"
            position = { -8 -8 }

            tooltip = "CULTURE_CLICK_TO_REPLACE"

            button_change = {
              alwaystransparent = yes
              parentanchor = center
            }
          }
        }

        vbox = {
          layoutpolicy_horizontal = expanding

          text_label_left = {
            layoutpolicy_horizontal = expanding
            margin = { 10 6 }
            text = "[culture_pillars|E]"
            default_format = "#low"
            align = left
          }
        }

        hbox = {
          name = "cultural_pillars_block"
          layoutpolicy_horizontal = expanding
          layoutpolicy_vertical = expanding
          maximumsize = { 594 104 }

          widget = {
            name = "cultural_pillars_collumn_one"
            layoutpolicy_horizontal = expanding

            vbox = {
              margin_left = 10

              hbox = {
                name = "heritage"
                datacontext = "[Culture.GetHeritage]"
                layoutpolicy_horizontal = expanding

                hbox = {
                  spacing = 10

                  tooltipwidget = {
                    using = culture_pillar_tooltip
                  }

                  icon_doctrine = {
                    visible = "[ObjectsEqual( Culture.GetHeritage, GetPlayer.GetCulture.GetHeritage )]"
                    size = { 44 44 }
                    texture = "gfx/interface/icons/culture_pillars/heritage.dds"
                  }

                  icon_doctrine = {
                    visible = "[Not( ObjectsEqual( Culture.GetHeritage, GetPlayer.GetCulture.GetHeritage ))]"
                    size = { 44 44 }
                    texture = "gfx/interface/icons/culture_pillars/heritage_diverge.dds"
                  }

                  text_multi = {
                    datacontext = "[Culture.GetHeritage]"
                    text = "CULTURE_VIEW_HERITAGE_TEXT"
                    autoresize = yes
                    max_width = 220
                  }
                }

                expand = { }
              }

              hbox = {
                name = "martial"
                datacontext = "[Culture.GetMartial]"
                layoutpolicy_horizontal = expanding

                # Only show Martial if culture affects martial customs,
                # which is only the case if we are able to modify
                # the culture pillars.
                visible = "[HasDlcFeature( 'diverge_culture' )]"

                spacing = 10

                icon_doctrine = {
                  size = { 44 44 }
                  texture = "[CulturePillar.GetIcon]"
                }

                vbox = {
                  layoutpolicy_horizontal = expanding

                  hbox = {
                    layoutpolicy_horizontal = expanding

                    spacing = 5

                    tooltipwidget = {
                      using = culture_pillar_tooltip
                    }

                    text_multi = {
                      text = "CULTURE_VIEW_MARTIAL_CUSTOM_TEXT"
                      autoresize = yes
                      max_width = 220
                    }

                    button_change = {
                      visible = "[CultureWindow.IsInReformationMode]"
                      onclick = "[Culture.OpenReplaceMartialWindow]"

                      tooltip = "CULTURE_CLICK_TO_REPLACE"
                    }

                    expand = { }
                  }

                  hbox = {
                    layoutpolicy_horizontal = expanding
                    visible = "[And(CultureReformation.IsReformingSamePillarTypeAs(Culture.GetMartial), Not(CultureWindow.IsInReformationMode))]"

                    margin_top = 3

                    progressbar_reform = {

                      blockoverride "progressbar_reform_size"
                      {
                        size = { 150 14 }
                      }

                      tooltipwidget = {
                        using = culture_pillar_tooltip_establishing
                      }
                    }

                    expand = { }
                  }
                }
              }
            }
          }

          widget = {
            name = "cultural_pillars_collumn_two"
            layoutpolicy_horizontal = expanding
            layoutpolicy_vertical = expanding

            vbox = {
              margin_left = 10

              hbox = {
                name = "language"
                datacontext = "[Culture.GetLanguage]"
                layoutpolicy_horizontal = expanding

                hbox = {
                  spacing = 10

                  tooltipwidget = {
                    using = culture_pillar_tooltip
                  }

                  icon_culture_pillar = {
                    visible = "[ObjectsEqual( Culture.GetLanguage, GetPlayer.GetCulture.GetLanguage )]"
                    texture = "gfx/interface/icons/culture_pillars/language.dds"
                  }

                  icon_culture_pillar = {
                    visible = "[Not( ObjectsEqual( Culture.GetLanguage, GetPlayer.GetCulture.GetLanguage ))]"
                    texture = "gfx/interface/icons/culture_pillars/language_diverge.dds"
                  }

                  text_multi = {
                    datacontext = "[Culture.GetLanguage]"
                    text = "CULTURE_VIEW_LANGUAGE_TEXT"
                    autoresize = yes
                    max_width = 220
                  }

                  button_adopt_court_language = {
                    datacontext = "[GetPlayer]"
                    layoutpolicy_horizontal = expanding

                    onclick = "[ToggleGameViewData( 'language',  CulturePillar.Self )]"
                    enabled = "[Character.CanAdoptCourtLanguage( CulturePillar.Self )]"
                    tooltip = "ADOPT_COURT_LANGUAGE_CULTURE_WINDOW"
                    visible = "[And( HasDlcFeature( 'royal_court' ), And( Character.HasRoyalCourt, Not( ObjectsEqual( CulturePillar.Self, Character.GetCourtLanguage ) ) ) )]"
                  }
                }

                expand = { }
              }

              hbox = {
                layoutpolicy_horizontal = expanding

                hbox = {
                  spacing = 10

                  tooltip = "CULTURE_AESTHETICS_TOOLTIP"

                  icon_culture_pillar = {
                    texture = "gfx/interface/icons/culture_pillars/aesthetics.dds"
                  }

                  text_multi = {
                    text = "CULTURE_AESTHETICS"
                    autoresize = yes
                    max_width = 220
                  }
                }

                expand = { }
              }
            }
          }
        }

        text_label_left = {
          layoutpolicy_horizontal = expanding
          margin = { 10 6 }
          text = "[traditions|E]"
          align = left

          text_single = {
            parentanchor = vcenter|right
            position = {-14 0}
            text = "[GetDataModelSize(Culture.GetTraditions)]/[Culture.GetMaxNumberOfTraditions]"
            tooltip = "[Culture.GetMaxNumberOfTraditionsBreakdown]"
            default_format = "#low"
            align = left
          }
        }

        scrollbox = {
          name = "traditions_holder"
          layoutpolicy_horizontal = expanding
          layoutpolicy_vertical = expanding
          scrollbarpolicy_horizontal = always_off

          blockoverride "scrollbox_content" {
            vbox = {
              fixedgridbox = {
                datamodel = "[CultureWindow.GetCultureTraditions]"
                visible = "[Not(CultureWindow.IsInReformationMode)]"
                flipdirection = yes
                addcolumn = 284
                addrow = 180
                datamodel_wrap = 2

                item = {
                  container = {
                    widget = {
                      name = "exisiting_tradition"
                      datacontext = "[GuiCultureTradition.GetTradition]"
                      visible = "[Not(GuiCultureTradition.IsEmpty)]"
                      size = { 276 168 }

                      tooltipwidget = {
                        using = culture_tradition_tooltip
                      }

                      widget_tradition_icon = {
                        visible = "[Not(GuiCultureTradition.IsEmpty)]"

                        block "icon_size" {
                          size = { 276 138 }
                        }
                      }

                      text_label_center = {
                        name = "name_replacing"
                        visible = "[Not(GuiCultureTradition.IsEmpty)]"
                        parentanchor = bottom|hcenter
                        text = "[CultureTradition.GetNameNoTooltip]"
                        using = Font_Size_Medium
                        multiline = yes
                        align = center
                      }
                    }

                    widget = {
                      name = "new_tradition"
                      datacontext = "[CultureReformation.GetNewTradition]"
                      visible = "[And(GuiCultureTradition.IsNextAvailable, CultureReformation.IsAddingNewTradition)]"
                      size = { 276 168}

                      tooltipwidget = {
                        using = culture_tradition_tooltip_establishing
                      }

                      widget_tradition_icon = {
                        enabled = "[Not(And(CultureReformation.IsAddingNewTradition, GuiCultureTradition.IsNextAvailable))]"

                        block "icon_size" {
                          size = { 276 138 }
                        }
                      }

                      widget = {
                        size = { 276 38}
                        parentanchor = center|hcenter
                        position = { 0 30 }

                        background = {
                          using = Background_Area_Dark
                          margin_top = 1
                          margin_bottom = 5

                          modify_texture = {
                            texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
                            blend_mode = alphamultiply
                          }
                        }

                        text_single = {
                          name = "name_adding"
                          visible = "[GuiCultureTradition.IsEmpty]"
                          parentanchor = top|hcenter
                          text = "REFORMATION_NEW_TRADITION_INFO"
                          using = Font_Size_Small
                          multiline = yes
                          max_width = 240
                          align = center
                        }

                        widget = {
                          name = "progressbar_new_tradition"
                          size = { 100% 100% }
                          visible = "[And(CultureReformation.IsAddingNewTradition, GuiCultureTradition.IsNextAvailable)]"

                          progressbar_reform = {
                            parentanchor = bottom|hcenter

                            blockoverride "progressbar_reform_size"
                            {
                              size = { 250 14 }
                            }
                          }
                        }
                      }

                      text_label_center = {
                        name = "name_replacing"
                        parentanchor = bottom|hcenter
                        text = "[CultureTradition.GetNameNoTooltip]"
                        using = Font_Size_Medium
                        default_format = "#low"
                        multiline = yes
                        align = center
                      }
                    }
                  }
                }
              }

              fixedgridbox = {
                datamodel = "[CultureWindow.GetCultureTraditions]"
                visible = "[CultureWindow.IsInReformationMode]"
                flipdirection = yes
                addcolumn = 284
                addrow = 180
                datamodel_wrap = 2

                item = {
                  widget = {
                    name = "traditions"
                    datacontext = "[GuiCultureTradition.GetTradition]"
                    size = { 276 168 }

                    tooltip_visible = "[Not(GuiCultureTradition.IsEmpty)]"

                    tooltipwidget = {
                      using = culture_tradition_tooltip
                    }

                    widget_tradition_icon = {
                      visible = "[Not(GuiCultureTradition.IsEmpty)]"
                      block "icon_size" {
                        size = { 276 138 }
                      }
                    }

                    widget_tradition_selectable_glow = {
                      visible = "[Or(Not(GuiCultureTradition.IsEmpty), GuiCultureTradition.IsNextAvailable)]"
                      block "icon_size" {
                        size = { 276 138 }
                      }
                    }

                    widget_tradition_empty = {
                      visible = "[GuiCultureTradition.IsEmpty]"
                      block "icon_size" {
                        size = { 276 138 }
                      }
                    }

                    text_label_center = {
                      name = "name"
                      visible = "[Not(GuiCultureTradition.IsEmpty)]"
                      parentanchor = bottom|hcenter
                      maximumsize = { 220 44 }
                      text = "[CultureTradition.GetNameNoTooltip]"
                      using = Font_Size_Medium
                      multiline = yes
                      align = center
                      elide = right
                    }

                    button_standard = {
                      visible = "[GuiCultureTradition.IsNextAvailable)]"
                      onclick = "[Culture.OpenAddTraditionWindow]"
                      size = { 276 138 }

                      tooltip = "CULTURE_CLICK_TO_ADD_TRADITION"

                      highlight_icon = {
                        name = "build_new_icon"
                        parentanchor = center
                        size = { 45 45 }
                        alpha = 0.7
                        texture = "gfx/interface/icons/flat_icons/plus.dds"

                        modify_texture = {
                          texture = "gfx/interface/icons/focuses/hud_icon_mask.dds"
                          blend_mode = alphamultiply
                        }

                        modify_texture = {
                          texture = "gfx/interface/colors/gold.dds"
                          blend_mode = add

                        }

                        modify_texture = {
                          texture = "gfx/interface/colors/red.dds"
                          blend_mode = colordodge
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        expand = { }

        hbox = {
          visible = "[Not(CultureWindow.IsInReformationMode)]"
          layoutpolicy_horizontal = expanding
          margin = { 10 8 }
          spacing = 10
          margin_top = 8

          hbox = {
            visible = "[And( And( HasDlcFeature( 'hybridize_culture' ), Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) ) ), GetPlayer.IsValid )]"

            text_multi = {
              name = "no_hybridize_parent"
              visible = "[GetPlayer.GetCulture.IsChildOf( Culture.Self )]"
              max_width = 580
              autoresize = yes
              text = "NO_HYBRIDIZE_INFO_PARENT"
              align = left
              default_format = "#weak"
              margin_top = 6
              margin_bottom = 6
            }

            text_multi = {
              name = "no_hybridize_child"
              visible = "[Culture.IsChildOf( GetPlayer.GetCulture )]"
              max_width = 580
              autoresize = yes
              text = "NO_HYBRIDIZE_INFO_CHILD"
              align = left
              default_format = "#weak"
              margin_top = 6
              margin_bottom = 6
            }

            text_multi = {
              name = "no_hybridize_heritage"
              visible = "[And( ObjectsEqual(Culture.GetHeritage, GetPlayer.GetCulture.GetHeritage ), And( Not( GetPlayer.GetCulture.IsChildOf( Culture.Self ) ), Not( Culture.IsChildOf( GetPlayer.GetCulture ) ) ) )]"
              max_width = 580
              autoresize = yes
              text = "NO_HYBRIDIZE_INFO_HERITAGE"
              align = left
              default_format = "#weak"
              margin_top = 6
              margin_bottom = 6
            }

            button_standard = {
              name = "hybridize_tutorial_uses_this"
              visible = "[And( Not( ObjectsEqual(Culture.GetHeritage, GetPlayer.GetCulture.GetHeritage ) ), And( Not( GetPlayer.GetCulture.IsChildOf( Culture.Self ) ), Not( Culture.IsChildOf( GetPlayer.GetCulture ) ) ) )]"
              minimumsize = { 240 0 }
              onclick = "[Culture.OpenHybridizationWindow]"
              onclick = "[CultureWindow.Close]"
              text = "HYBRIDIZE_CULTURE_LABEL"
              tooltip = "HYBRIDIZE_CULTURE_TOOLTIP"
              using = tooltip_nw

              icon = {
                visible = "[Not( GetPlayer.GetCulture.CanHybridize( Culture.Self ) )]"
                parentanchor = vcenter|right
                position = { -3 0 }
                size = { 25 25 }
                texture = "gfx/interface/icons/symbols/icon_cross.dds"
                alwaystransparent = yes
              }
            }
          }

          button_text = {
            name = "add_tradition"
            visible = "[And(ObjectsEqual(Culture.GetCultureHead.Self, GetPlayer ), Not(HasDlcFeature( 'reform_culture' )))]"
            blockoverride "text" {

              text = "ADD_TRADITION_LABEL"
            }
            blockoverride "disabled" {
              visible = "[Not( Culture.CanAddTradition )]"
            }
            onclick = "[Culture.OpenAddTraditionWindow]"
            down = "[IsGameViewOpen('add_culture_tradition')]"
            tooltip = "ADD_TRADITION_TOOLTIP"
            using = tooltip_nw
          }


          button_standard = {
            name = "reform_culture"
            visible = "[And(And(ObjectsEqual(Culture.GetCultureHead.Self, GetPlayer ), HasDlcFeature( 'reform_culture' )), GetPlayer.IsValid)]"
            enabled = "[Not(Culture.IsReforming)]"
            text = "REFORM_CULTURE_LABEL"
            minimumsize = { 240 0 }
            onclick = "[CultureWindow.ShowReformationMode]"
            down = "[IsGameViewOpen('add_culture_tradition')]"
            tooltip = "REFORM_CULTURE_TOOLTIP"
            using = tooltip_nw

          }

          button_standard = {
            name = "diverge"
            visible = "[And( ObjectsEqual(Culture.Self, GetPlayer.GetCulture ), HasDlcFeature( 'diverge_culture' ) )]"
            minimumsize = { 240 0 }
            onclick = "[Culture.OpenDivergenceWindow]"
            onclick = "[CultureWindow.Close]"
            text = "DIVERGE_CULTURE_LABEL"
            tooltip = "DIVERGE_CULTURE_TOOLTIP"
            using = tooltip_nw

            #icon debug
            icon = {
              visible = "[Not( GetPlayer.GetCulture.CanDiverge )]"
              parentanchor = vcenter|right
              size = { 25 25 }
              position = { -3 0 }
              texture = "gfx/interface/icons/symbols/icon_cross.dds"
              alwaystransparent = yes
            }
          }

          expand = { }
        }

        hbox = {
          visible = "[CultureWindow.IsInReformationMode]"
          layoutpolicy_horizontal = expanding
          margin = { 10 8 }
          spacing = 10
          margin_top = 8

          button_standard = {
            name = "cancel_reform_culture"
            text = "REFORM_CULTURE_CLOSE_LABEL"
            minimumsize = { 240 0 }
            onclick = "[CultureWindow.HideReformationMode]"
            down = "[IsGameViewOpen('add_culture_tradition')]"
            tooltip = "REFORM_CULTURE_CLOSE_TOOLTIP"
            using = tooltip_nw
          }
        }
      }

      vbox = {
        name = "innovations_area_tutorial_uses_this"
        visible = "[GetVariableSystem.HasValue( 'culture_view_tabs', 'innovations' )]"
        layoutpolicy_horizontal = expanding
        layoutpolicy_vertical = expanding

        using = Animation_Tab_Switch

        vbox = {
          layoutpolicy_horizontal = expanding
          margin = { 0 10 }

          text_label_center = {
            text = "CULTURE_WINDOW_INNOVATIONS"
            using = Font_Size_Medium
          }
        }

        hbox = {
          layoutpolicy_horizontal = expanding
          margin = { 5 5 }

          background = {
            using = Background_Area_Dark
          }

          datamodel = "[CultureWindow.GetCultureEras]"

          item = {
            vbox_era_tab = {
            }
          }
        }

        scrollbox = {
          name = "selected_culture_era"
          datacontext = "[CultureWindow.GetSelectedCultureEra]"
          layoutpolicy_horizontal = expanding
          layoutpolicy_vertical = expanding

          blockoverride "scrollbox_content"
          {
            vbox = {
              datacontext = "[GuiCultureEra.GetCultureEra]"
              layoutpolicy_horizontal = expanding
              spacing = 10

              state = {
                name = "culture_refresh"
                using = Animation_Refresh_FadeOut
              }

              state = {
                using = Animation_Refresh_FadeIn
              }

              text_single = {
                visible = "[GuiCultureEra.GetCultureEra.GetType.IsInvalidForPlayerGovernment]"
                layoutpolicy_horizontal = expanding
                text = "CULTURE_WINDOW_ERA_INNOVATION_BLOCKED_FOR_PLAYER_GOVERNMENT"
                margin_bottom = 5
              }

              hbox = {
                visible = "[Not(CultureEra.IsActive)]"
                layoutpolicy_horizontal = expanding

                vbox = {
                  layoutpolicy_horizontal = expanding
                  margin_bottom = 10

                  background = {
                    using = Background_Area
                    margin = { 10 5 }
                  }

                  hbox = {
                    layoutpolicy_horizontal = expanding

                    text_multi = {
                      layoutpolicy_horizontal = expanding
                      max_width = 550
                      text = "CULTURE_ERA_BLOCKED_BLOCKED_TILE"
                      autoresize = yes
                      margin_left = 3

                      background = {
                        using = Background_Area_Dark
                        alpha = 0.6
                        margin = { 10 5 }
                      }
                    }

                    expand = { }
                  }

                  hbox = {
                    layoutpolicy_horizontal = expanding
                    margin_top = 10

                    text_multi = {
                      visible = "[Not(CultureEra.CanGainProgress)]"
                      layoutpolicy_horizontal = expanding
                      text = "[CultureEra.GetCantGainProgressReason]"
                      autoresize = no
                      margin_left = 3
                    }

                    expand = { }
                  }

                  vbox = {
                    visible = "[CultureEra.CanGainProgress]"
                    layoutpolicy_horizontal = expanding
                    margin = { 0 10 }
                    spacing = 3
                    tooltip = "[CultureEra.GetProgressAndGainBreakdown]"

                    progressbar_standard = {
                      layoutpolicy_horizontal = expanding
                      value = "[FixedPointToFloat(CultureEra.GetProgress)]"
                      minimumsize = { 0 25 }
                      min = 0
                      max = 100
                    }

                    hbox = {
                      layoutpolicy_horizontal = expanding

                      text_label_left = {
                        text = "[CultureEra.GetCultureEraProgressEstimation]"
                      }

                      expand = { }
                    }
                  }
                }

                spacer = {
                  size = { 70 10 }
                }
              }

              vbox = {
                name = "era_groups"
                datamodel = "[GuiCultureEra.GetCultureEraGroups]"
                layoutpolicy_horizontal = expanding
                spacing = 30

                item = {
                  vbox = {
                    visible = "[GuiCultureEraGroup.HasInnovations]"
                    layoutpolicy_horizontal = expanding
                    spacing = 10

                    text_label_left = {
                      layoutpolicy_horizontal = expanding
                      align = left
                      margin = { 0 3 }
                      text = "[GuiCultureEraGroup.GetName]"
                    }

                    dynamicgridbox = {
                      datamodel = "[GuiCultureEraGroup.GetInnovations]"
                      datamodel_wrap = 2
                      flipdirection = yes

                      item = {
                        flowcontainer = {
                          margin_top = 10
                          margin_right = 45

                          flowcontainer = {
                            datacontext = "[GuiCultureInnovation.GetCultureInnovation]"
                            direction = horizontal

                            allow_outside = yes
                            using = tooltip_es
                            ignoreinvisible = yes

                            tooltipwidget = {
                              using = culture_innovation_tooltip

                              blockoverride "AfterDescription"
                              {
                                container = {
                                  name = "can_select_as_fascination"
                                  visible = "[And(CultureInnovation.CanPlayerSetAsFascination, Not(CultureInnovation.IsFascination) )]"
                                  minimumsize = { 100% 0 }
                                  textbox = {
                                    text = "INNOVATION_CLICK_TO_SELECT_FASCINATION"
                                    autoresize = yes
                                    fonttintcolor = "[TooltipInfo.GetTintColor]"
                                    using = DefaultTooltipText
                                    multiline = yes
                                  }
                                }
                              }
                            }

                            ######### NOT CLICKABLE ######
                            widget = {
                              visible = "[Not(And(CultureInnovation.GetCulture.IsPlayerCultureHead, Not(CultureInnovation.IsActive)))]"
                              size = { 256 66 }

                              hbox = {
                                margin = { 3 3 }
                                margin_right = 8
                                spacing = 5

                                background = {
                                  using = Background_Area
                                }

                                icon_innovation = {
                                  visible = "[And(CultureInnovation.GetCulture.IsPlayerCultureHead, CultureInnovation.IsActive)]"
                                }

                                icon_innovation = {
                                  visible = "[Not(CultureInnovation.GetCulture.IsPlayerCultureHead)]"
                                }

                                widget = {
                                  size = { 150 60 }

                                  vbox = {
                                    position = {0 -1}

                                    ignoreinvisible = yes

                                    text_multi = {
                                      name = "name_clickable"
                                      visible = "[CultureInnovation.CanBeFascination]"
                                      layoutpolicy_horizontal = expanding
                                      text = "[CultureInnovation.GetNameNoTooltip]"
                                      align = left
                                      margin = { 3 0 }
                                      default_format = "#clickable"
                                    }

                                    text_multi = {
                                      name = "name_discovered"
                                      visible = "[CultureInnovation.IsActive]"
                                      layoutpolicy_horizontal = expanding
                                      text = "[CultureInnovation.GetNameNoTooltip]"
                                      max_width = 150
                                      align = left
                                      margin = { 3 0 }
                                      default_format = "#P"
                                      alpha = 0.7
                                    }

                                    text_multi = {
                                      name = "name_blocked"
                                      visible = "[And(Not(CultureInnovation.CanBeFascination),Not(CultureInnovation.IsActive))]"
                                      layoutpolicy_horizontal = expanding
                                      text = "[CultureInnovation.GetNameNoTooltip]"
                                      max_width = 150
                                      align = left
                                      margin = { 3 0 }
                                      default_format = "#low"
                                    }

                                    hbox = {
                                      visible = "[And(CultureInnovation.CanGainProgress, Not(CultureInnovation.IsActive))]"
                                      layoutpolicy_horizontal = expanding
                                      margin = { 3 0 }

                                      progressbar_standard = {
                                        visible = "[And(CultureInnovation.CanGainProgress, Not(CultureInnovation.IsActive))]"
                                        value = "[FixedPointToFloat(CultureInnovation.GetProgress)]"
                                        layoutpolicy_horizontal = expanding
                                        size = { 90 15 }
                                        min = 0
                                        max = 100
                                      }
                                    }

                                    spacer = {
                                      visible = "[Not(And(CultureInnovation.CanGainProgress, Not(CultureInnovation.IsActive)))]"
                                      size = { 0 15 }
                                    }
                                  }
                                }
                              }
                            }

                            ######### CLICKABLE ######
                            button_standard_hover = {
                              visible = "[And(CultureInnovation.GetCulture.IsPlayerCultureHead, Not(CultureInnovation.IsActive))]"
                              enabled = "[CultureInnovation.CanBeFascination]"
                              size = { 256 66 }
                              onclick = "[CultureInnovation.SelectAsFascination]"

                              hbox = {
                                margin = { 3 3 }
                                margin_right = 8
                                spacing = 5
                                allow_outside = yes
                                ignoreinvisible = yes

                                background = {
                                  using = Background_Area
                                }

                                widget = {
                                  size = { 90 60 }

                                  icon_innovation = {
                                    parentanchor = center
                                  }
                                }

                                widget = {
                                  size = { 150 60 }
                                  alwaystransparent = yes

                                  vbox = {
                                    position = {0 -1}

                                    ignoreinvisible = yes

                                    text_multi = {
                                      name = "name_clickable"
                                      visible = "[CultureInnovation.CanBeFascination]"
                                      layoutpolicy_horizontal = expanding
                                      text = "[CultureInnovation.GetNameNoTooltip]"
                                      align = left
                                      margin = { 3 0 }
                                      default_format = "#clickable"
                                    }

                                    text_multi = {
                                      name = "name_discovered"
                                      visible = "[CultureInnovation.IsActive]"
                                      layoutpolicy_horizontal = expanding
                                      text = "[CultureInnovation.GetNameNoTooltip]"
                                      max_width = 150
                                      align = left
                                      margin = { 3 0 }
                                      default_format = "#P"
                                      alpha = 0.7
                                    }

                                    text_multi = {
                                      name = "name_blocked"
                                      visible = "[And(Not(CultureInnovation.CanBeFascination),Not(CultureInnovation.IsActive))]"
                                      layoutpolicy_horizontal = expanding
                                      text = "[CultureInnovation.GetNameNoTooltip]"
                                      max_width = 150
                                      align = left
                                      margin = { 3 0 }
                                      default_format = "#low"
                                    }

                                    hbox = {
                                      visible = "[And(CultureInnovation.CanGainProgress, Not(CultureInnovation.IsActive))]"
                                      layoutpolicy_horizontal = expanding
                                      margin = { 3 0 }

                                      progressbar_standard = {
                                        visible = "[And(CultureInnovation.CanGainProgress, Not(CultureInnovation.IsActive))]"
                                        value = "[FixedPointToFloat(CultureInnovation.GetProgress)]"
                                        layoutpolicy_horizontal = expanding
                                        size = { 90 15 }
                                        min = 0
                                        max = 100
                                      }
                                    }

                                    spacer = {
                                      visible = "[Not(And(CultureInnovation.CanGainProgress, Not(CultureInnovation.IsActive)))]"
                                      size = { 0 15 }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }

              background = {
                name = "gray_overlay"
                visible = "[GuiCultureEra.GetCultureEra.GetType.IsInvalidForPlayerGovernment]"
                using = Background_Area_Border_Solid
                tintcolor = { 0.5 0.5 0.5 0.3 }
                alwaystransparent = no
                margin = { 10 10 }
              }
            }
          }
        }
      }

      hbox = {
        name = "no_culture_head"
        visible = "[And(Not(CultureWindow.IsInReformationMode), Not( Culture.HasCultureHead ))]"
        layoutpolicy_horizontal = expanding
        margin = { 0 10 }

        background = {
          using = Background_Area
        }

        text_single = {
          text = "CULTURE_WINDOW_NO_HEAD"
        }

        text_single = {
          text = "[Culture.GetNoHeadReason]"
        }
      }

      hbox = {
        name = "culture_head_tutorial_uses_this"
        datacontext = "[Culture.GetCultureHead]"
        visible = "[And(Not(CultureWindow.IsInReformationMode), Culture.HasCultureHead)]"
        layoutpolicy_horizontal = expanding

        hbox = {
          layoutpolicy_horizontal = expanding
          margin = { 10 5 }
          margin_top = 10
          spacing = 10

          background = {
            using = Background_Area
          }

          vbox = {
            layoutpolicy_vertical = expanding
            expand = { }

            portrait_shoulders = {
              name = "culture_head_portrait"
            }
          }

          vbox = {
            layoutpolicy_horizontal = expanding
            margin = { 10 0 }

            text_multi = {
              layoutpolicy_horizontal = expanding
              autoresize = yes
              max_width = 420
              text = "CULTURE_WINDOW_CULTURE_HEAD_TITLE"
            }

            spacer = {
              visible = "[Not(EqualTo_uint32( CultureWindow.GetCulture.GetID, GetPlayer.GetCulture.GetID ))]"
              size = { -1 42 }
            }

            vbox = {
              name = "culture_head_influence_info"
              visible = "[EqualTo_uint32( CultureWindow.GetCulture.GetID, GetPlayer.GetCulture.GetID )]"
              layoutpolicy_horizontal = expanding

              text_multi = {
                visible = "[Not(CultureWindow.ShouldShowMyCultureInfo)]"
                layoutpolicy_horizontal = expanding
                text = "[CultureWindow.GetCultureHeadInfo]"
                autoresize = yes
                max_width = 415
                align = left
              }

              text_multi = {
                visible = "[CultureWindow.ShouldShowMyCultureInfo]"
                layoutpolicy_horizontal = expanding
                text = "CULTURE_WINDOW_CULTURE_HEAD_NOTPLAYER"
                default_format = "#low"
                autoresize = yes
                max_width = 415
                align = left
              }
            }


            spacer = {
              size = { -1 10 }
            }

            hbox = {
              name = "fascination_info_tutorial_uses_this"
              datacontext = "[CultureWindow.GetCulture]"
              visible = "[Culture.HasFascination]"
              layoutpolicy_horizontal = expanding
              spacing = 14
              margin = { 5 10 }

              icon_innovation = {
                datacontext = "[CultureWindow.GetCulture.GetFascination]"
                size = { 90 60 }

                tooltipwidget = {
                  using = culture_innovation_tooltip
                }
              }

              vbox = {
                spacing = 5

                text_single = {
                  name = "current_fascination"
                  text = "CULTURE_WINDOW_HEAD_FASCINATION"
                  max_width = 300
                }

                hbox = {
                  layoutpolicy_horizontal = expanding

                  skill_icon_label = {
                    datacontext = "[CultureWindow.GetLearningLevel]"
                  }

                  expand = { }
                }
              }

              expand = { }
            }
          }
        }
      }
    }
  }
}
