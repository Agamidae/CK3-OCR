types OCR {
	type legends_window_old = window {

		using = Window_Size_Sidebar
		using = Window_Background_Sidebar

		vbox = {
			using = Window_Margins_Sidebar

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "LEGENDS_TITLE"
				}

				blockoverride "button_close"
				{
					onclick = "[LegendsWindow.Close]"
				}

				blockoverride "button_back"
				{
					visible = "[HasViewHistory]"
					onclick = "[OpenFromViewHistory]"
					tooltip = "[GetViewHistoryTooltip]"
				}

				blockoverride "button_me"
				{
					onclick = "[DefaultOnCharacterClick( GetPlayer.GetID )]"
				}
			}

			vbox = {
				name = "contents"
				widgetid = "legends_window_legend_tabs" # Used in code

				oncreate = "[BindTabsContext]"
				oncreate = "[PdxGuiTabs.AddTab( 'realm' )]" # Name used in code
				oncreate = "[PdxGuiTabs.AddTab( 'distant' )]" # Name used in code
				oncreate = "[PdxGuiTabs.AddTab( 'library' )]" # Name used in code

				oncreate = "[PdxGuiTabs.ListenFor( 'legend_window_change_tab' )]" # Code can send an event which we can listen for to switch tabs

				datacontext = "[GetPlayer]"

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				using = Animation_Tab_Switch

				vbox = {
					name = "special_cards"

					layoutpolicy_horizontal = expanding
					spacing = 12
					margin = { 10 0 }
					margin_bottom = 15

					vbox_labelled_legend = {
						name = "focused_legend"

						datacontext = "[LegendsWindow.GetFocusedLegend]"
						datacontext = "[LegendsWindow.GetFocusedLegend.GetLegend]"
						visible = "[Legend.IsValid]"

						blockoverride "label"
						{
							hbox = {
								layoutpolicy_horizontal = expanding

								spacing = 20

								widget = {
									size = { 120 26 }
								}

								text_label_center = {
									layoutpolicy_horizontal = expanding

									text = "[SelectLocalization( ObjectsEqual( Legend.Self, LegendsWindow.GetPromotedLegend.GetLegend.Self ), SelectLocalization( ObjectsEqual( Legend.GetOwner.Self, GetPlayer.Self ), 'PROMOTED_OWNED_LEGEND', 'PROMOTED_LEGEND'), 'FOCUSED_LEGEND' )]"
									margin_left = 30
									margin_right = 30
								}

								widget = {
		                            size = { 120 26 }
	                                button_standard_back = {
		                                size = { 120 26 }
		                                onclick = "[LegendsWindow.ClearFocusedLegend()]"

		                                visible = "[And(LegendsWindow.GetPromotedLegend.GetLegend.IsValid, Not( ObjectsEqual( Legend.Self, LegendsWindow.GetPromotedLegend.GetLegend.Self ) ) )]"

		                                tooltip = "RETURN_TO_PROMOTED_LEGEND_TT"
	                                }
	                            }
							}

						}
					}
					vbox = {
						visible = "[And( Not( LegendsWindow.GetFocusedLegend.GetLegend.IsValid ), Not( LegendsWindow.GetPromotedLegend.GetLegend.IsValid ) )]"

						text_label_center = {
	                        text = "PROMOTED_LEGEND"
	                        margin_left = 30
	                        margin_right = 30
	                    }

						text_single = {
	                        text = "PROMOTED_LEGEND_EMPTY"
	                        default_format = "#low;italic"
	                    }

	                    text_single = {
	                        margin_top = 5
	                        text = "PROMOTED_LEGEND_EMPTY_INSTRUCTION"
	                        max_width = 550
	                        default_format = "#P"
	                        align = center
	                    }
	                }
				}

				hbox_tab_buttons = {
					name = "tab_buttons"

					blockoverride "tab_name"
					{
						text = "[PdxGuiTabItem.LocalizeTab( 'legend_tab' )]"
					}
				}

				scrollbox = {
					name = "realm_legends_scrollbox"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					visible = "[PdxGuiTabs.IsTabSet( 'realm' )]"

					blockoverride "scrollbox_content"
					{
						margin = { 4 4 }
						spacing = 8

						legend_seeds_vbox = {
	                        name = "legend_seeds"
	                    }

						active_legends_vbox = {
	                        name = "realm_legends"

	                        blockoverride "text"
	                        {
	                            text = "LEGENDS_REALM_ACTIVE_LEGENDS_SECTION"
	                            using = tooltip_sw
	                        }
	                        blockoverride "empty_text"
	                        {
	                            visible = "[IsDataModelEmpty( LegendsWindow.GetRealmActiveLegends )]"
	                            text = "NO_REALM_ACTIVE_LEGENDS"
	                            margin_top = 5
	                            margin_bottom = 5
	                        }
	                        blockoverride "datamodel"
	                        {
	                            datamodel = "[LegendsWindow.GetRealmActiveLegends]"
	                        }
	                    }

						completed_legends_vbox = {
							name = "realm_completed_legends"

							visible = "[Not( IsDataModelEmpty( LegendsWindow.GetRealmCompletedLegends ) )]"

							blockoverride "text"
							{
								text = "REALM_COMPLETED_LEGENDS"
							}
							blockoverride "empty_text"
							{
								visible = "[IsDataModelEmpty( LegendsWindow.GetRealmCompletedLegends )]"
								text = "NO_REALM_COMPLETED_LEGENDS"
	                            margin_top = 5
	                            margin_bottom = 5
							}
							blockoverride "datamodel"
							{
								datamodel = "[LegendsWindow.GetRealmCompletedLegends]"
							}
						}
					}
				}

				scrollbox = {
					name = "distant_legends_scrollbox"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					visible = "[PdxGuiTabs.IsTabSet( 'distant' )]"

					blockoverride "scrollbox_content"
					{
						margin = { 4 4 }
						spacing = 8

						active_legends_vbox = {
	                        name = "distant_legends"

	                        blockoverride "text"
	                        {
	                            text = "LEGENDS_DISTANT_ACTIVE_LEGENDS_SECTION"
	                        }
	                        blockoverride "empty_text"
	                        {
	                            visible = "[IsDataModelEmpty( LegendsWindow.GetDistantActiveLegends )]"
	                            text = "NO_DISTANT_ACTIVE_LEGENDS"
	                            margin_top = 5
	                            margin_bottom = 5
	                        }
	                        blockoverride "datamodel"
	                        {
	                            datamodel = "[LegendsWindow.GetDistantActiveLegends]"
	                        }
	                    }

						completed_legends_vbox = {
							name = "distant_completed_legends"

							blockoverride "text"
							{
								text = "DISTANT_COMPLETED_LEGENDS"
							}
							blockoverride "empty_text"
							{
								visible = "[IsDataModelEmpty( LegendsWindow.GetDistantCompletedLegends )]"
								text = "NO_DISTANT_COMPLETED_LEGENDS"
	                            margin_top = 5
	                            margin_bottom = 5
	                        }
							blockoverride "datamodel"
							{
								datamodel = "[LegendsWindow.GetDistantCompletedLegends]"
							}
						}
					}
				}

				scrollbox = {
					name = "library_legends_scrollbox"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					visible = "[PdxGuiTabs.IsTabSet( 'library' )]"

					blockoverride "scrollbox_content"
					{
						margin = { 8 8 }
						spacing = 8

						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 4

							margin = { 4 4 }


							text_multi = {
								layoutpolicy_horizontal = expanding

								visible = "[IsDataModelEmpty( LegendsWindow.GetLibraryLegends )]"

								margin_top = 5
								text = "LEGEND_LIBRARY_INSTRUCTION"
								max_width = 450
								autoresize = yes
								default_format = "#low;italic"
								align = center
							}

							fixedgridbox = {
								name = "legend_entries"
								layoutpolicy_horizontal = expanding

								addcolumn = 570
								addrow = 70

								datamodel = "[LegendsWindow.GetLibraryLegends]"

								item = {
									button = {
										size = { 570 70 }
										onclick = "[ToggleGameViewData( 'legend_chronicle', LegendItem.GetLegend )]"
										onclick = "[LegendsWindow.SetFocusedLegend( LegendItem.GetLegend.Self )]"

										onrightclick = "[LegendsWindow.SetFocusedLegend( LegendItem.GetLegend.Self )]"
										onrightclick = "[LegendItem.GetLegend.PanCameraTo]"

										button_ignore = none

										legend_library_entry_vbox = {}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
