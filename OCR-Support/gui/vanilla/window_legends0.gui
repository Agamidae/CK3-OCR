types OCR {
	type legends_window_old = window {

		using = Window_Size_Sidebar
		using = Window_Background_Sidebar

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "LEGENDS_TITLE"
				}

				blockoverride "button_close"
				{
					onclick = "[LegendsWindow.Close]"
				}

				blockoverride "button_back"
				{
					visible = "[HasViewHistory]"
					onclick = "[OpenFromViewHistory]"
					tooltip = "[GetViewHistoryTooltip]"
				}

				blockoverride "button_me"
				{
					onclick = "[DefaultOnCharacterClick( GetPlayer.GetID )]"
				}
			}

			vbox = {
				name = "contents"

				oncreate = "[BindTabsContext]"
				oncreate = "[PdxGuiTabs.AddTab( 'player' )]"
				oncreate = "[PdxGuiTabs.AddTab( 'world' )]"

				# Code can send an event which we can listen for to switch tabs
				oncreate = "[PdxGuiTabs.ListenFor( 'focused_changed' )]"

				datacontext = "[GetPlayer]"

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				using = Animation_Tab_Switch

				vbox = {
					name = "special_cards"

					layoutpolicy_horizontal = expanding
					spacing = 12
					margin = { 10 0 }
					margin_bottom = 15

					vbox_labelled_legend = {
						max_width = 570
						name = "promoted_legend"

						datacontext = "[LegendsWindow.GetPromotedLegend]"
						datacontext = "[LegendsWindow.GetPromotedLegend.GetLegend]"

						blockoverride "label_text"
						{
							text = "PROMOTED_LEGEND"
						}
						blockoverride "no_legend"
						{
							text_single = {
								text = "PROMOTED_LEGEND_EMPTY"
								default_format = "#low;italic"
							}

							text_single = {
								margin_top = 5
								text = "PROMOTED_LEGEND_EMPTY_INSTRUCTION"
								default_format = "#P"
								align = center
							}
						}
					}

					vbox_labelled_legend = {
						name = "focused_legend"

						datacontext = "[LegendsWindow.GetFocusedLegend]"
						visible = "[And( LegendItem.GetLegend.IsValid, Not( ObjectsEqual( LegendItem.GetLegend, LegendsWindow.GetPromotedLegend.GetLegend ) ) )]"

						blockoverride "label_text"
						{
							text = "FOCUSED_LEGEND"
						}
					}
				}

				hbox_tab_buttons = {
					name = "tab_buttons"

					blockoverride "tab_name"
					{
						text = "[PdxGuiTabItem.LocalizeTab( 'legend_tab' )]"
					}
				}

				scrollbox = {
					name = "your_legends_scrollbox"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					visible = "[PdxGuiTabs.IsTabSet( 'player' )]"

					blockoverride "scrollbox_content"
					{
						margin = { 4 4 }
						spacing = 8

						legend_seeds_vbox = {
							name = "legend_seeds"
						}

						completed_legends_vbox = {
							name = "dynasty_completed_legends"

							blockoverride "text"
							{
								text = "DYNASTY_COMPLETED_LEGENDS"
							}
							blockoverride "empty_text"
							{
								visible = "[IsDataModelEmpty( LegendsWindow.GetDynastyCompletedLegends )]"
								text = "NO_DYNASTY_COMPLETED_LEGENDS"
							}
							blockoverride "datamodel"
							{
								datamodel = "[LegendsWindow.GetDynastyCompletedLegends]"
							}
						}
					}
				}

				scrollbox = {
					name = "world_legends_scrollbox"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					visible = "[PdxGuiTabs.IsTabSet( 'world' )]"

					blockoverride "scrollbox_content"
					{
						margin = { 4 4 }
						spacing = 8

						legends_vbox = {
							name = "world_legends"
						}

						completed_legends_vbox = {
							name = "world_completed_legends"

							blockoverride "text"
							{
								text = "WORLD_COMPLETED_LEGENDS"
							}
							blockoverride "empty_text"
							{
								visible = "[IsDataModelEmpty( LegendsWindow.GetOtherCompletedLegends )]"
								text = "NO_WORLD_COMPLETED_LEGENDS"
							}
							blockoverride "datamodel"
							{
								datamodel = "[LegendsWindow.GetOtherCompletedLegends]"
							}
						}
					}
				}

				hbox_single_court_position_card = {
					datacontext = "[GetCourtPositionType( 'chronicler_court_position' )]"
					visible = [GetPlayer.IsValid]

					oncreate = "[BindFoldOutContext]"
					oncreate = "[PdxGuiFoldOut.Unfold]"

					layoutpolicy_horizontal = expanding
					margin = { 4 8 }
					margin_top = 12

					blockoverride "header_pre_contents"
					{
						hbox = {
							margin = { 5 2 }

							background = {
								using = Background_Area_Dark_Border
								margin = { 2 5 }
								margin_right = 250
								alpha = 0.4
								using = Mask_Rough_Edges

								modify_texture = {
									texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
									blend_mode = alphaMultiply
								}
							}

							button_expand_fold_out = {}
						}
					}
					blockoverride "card_visible"
					{
						visible = "[PdxGuiFoldOut.IsUnfolded]"
					}
				}
			}
		}
	}
}
