types VANILLA {
  type old_activity = window {
    # visible = "[And(Is('ocr'), Not( ActivityWindow.HasActiveEvent ))]"
    using = vanilla

    size = { 1390 750 }
    parentanchor = center

    using = Window_Background
    using = Window_Movable
    using = Window_Decoration
    
    # Background illustration
    margin_widget = {
  		name = "background"
  		size = { 100% 100% }

  		background = {
  			visible = "[Not( ActivityWindow.HasActiveEvent )]"
  			texture = "[ActivityWindow.GetBackground.GetTexture]"
  			fittype = centercrop
  			using = Mask_Rough_Edges

  			margin = { -40 -20 }
  		}
  	}

    vbox = {
  		name = "idle_character"

  		visible = "[Not( ActivityWindow.HasActiveEvent )]"
  		datacontext = "[ActivityWindow.GetBackground]"

  		expand = {}

  		widget = {
  			size = { 1310 750 }
  			scissor = yes

  			hbox = {
  				name = "idle_characters_ongoing"
  				datamodel = "[ActivityWindow.GetCharacters]"
  				visible = "[Not( Activity.IsComplete )]"
  				layoutpolicy_vertical = expanding
  				layoutpolicy_horizontal = expanding

  				margin_top = 170

  				item = {
  					widget = {
  						size = { 250 550 }

  						allow_outside = no

  						portrait_body = {
  							datacontext = "[ActivityWindowCharacter.GetCharacter]"
  							parentanchor = center

  							allow_outside = yes

  							blockoverride "portrait_texture"
  							{
  								size = { 700 530 }
  								portrait_texture = "[Character.GetAnimatedPortrait( ActivityWindowBackgroundData.GetEnvironment, ActivityWindowCharacter.GetCamera, ActivityWindowCharacter.GetAnimation, PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"

  								using = tooltip_below
  								tooltip_widgetanchor = center
  							}

  							blockoverride "mask"
  							{
  								mask = "gfx/portraits/portrait_mask_event.dds"
  							}

  							blockoverride "status_icons" {}
  							blockoverride "coa" {}
  							blockoverride "opinion_box" {}

  							widget = {
  								parentanchor = bottom|hcenter
  								position = { 0 -40 }
  								size = { 200 85 }

  								vbox = {
  									layoutpolicy_vertical = expanding
  									parentanchor = bottom|hcenter

  									expand = {}

  									hbox = {
  										background = {
  											using = Background_Area_ExtraDark

  											alpha = 0.8
  											margin = { 50 8 }

  											modify_texture = {
  												name = "mask"
  												texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
  												spriteType = Corneredstretched
  												blend_mode = alphamultiply
  											}
  										}

  										vbox = {
  											layoutpolicy_vertical = expanding

  											portrait_status_icons = {
  												margin_top = 2
  												scale = 0.85
  											}

  											expand = {}
  										}

  										text_single = {
  											name = "label"

  											text = "[ActivityWindowCharacter.GetLabel]"
  											align = center|nobaseline
  											max_width = 200

  										}
  									}
  								}
  							}
  						}
  					}
  				}
  			}

  			hbox = {
  				name = "idle_characters_complete"
  				datamodel = "[DataModelFirst( ActivityWindow.GetCharacters, '(int32)3' )]"
  				visible = "[Activity.IsComplete]"
  				layoutpolicy_vertical = expanding

  				margin_top = 170
  				margin_left = 400

  				item = {
  					widget = {
  						size = { 280 580 }

  						allow_outside = no

  						portrait_body = {
  							datacontext = "[ActivityWindowCharacter.GetCharacter]"
  							parentanchor = center

  							allow_outside = yes

  							blockoverride "portrait_texture"
  							{
  								size = { 700 530 }
  								portrait_texture = "[Character.GetAnimatedPortrait( ActivityWindowBackgroundData.GetEnvironment, ActivityWindowCharacter.GetCamera, ActivityWindowCharacter.GetAnimation, PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"

  								tooltip_offset = { -450 0 }
  							}

  							blockoverride "status_icons" {}
  							blockoverride "coa" {}
  							blockoverride "opinion_box" {}

  							vbox = {

  								expand = {}

  								hbox = {
  									background = {
  										using = Background_Area_Dark
  										margin = { 50 4 }

  										modify_texture = {
  											name = "mask"
  											texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
  											spriteType = Corneredstretched
  											blend_mode = alphamultiply
  										}
  									}

  									vbox = {
  										layoutpolicy_vertical = expanding

  										portrait_status_icons = {
  											margin_top = 5
  											scale = 0.85
  										}

  										expand = {}
  									}

  									text_single = {
  										name = "label"
  										text = "[ActivityWindowCharacter.GetLabel]"
  										align = center
  										margin_bottom = 5
  									}
  								}
  							}
  						}
  					}
  				}
  			}
  		}
  	}

    # Conclusion
    widget = {
      name = "conclusion"
      visible = "[Not( ActivityWindow.HasActiveEvent )]"
      parentanchor = vcenter
      position = { 22 -10 }
      size = { 300 600 }

      vbox_activity_conclusion = {
        name = "activity_conclusion"
        visible = "[Activity.IsComplete]"
        layoutpolicy_vertical = expanding

        margin_bottom = 5

        background = {
          using = Background_Area_ExtraDark
          margin_top = 5
          margin_bottom = 20
          margin_left = -15

          modify_texture = {
            texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
            blend_mode = alphamultiply
            alpha = 0.3
          }
        }

        blockoverride "close_activity_onclick"
        {
          onclick = "[ActivityWindow.Close]"
        }
      }
    }

    # Main Content
    vbox = {
      name = "main_content"
      layoutpolicy_vertical = expanding
      layoutpolicy_horizontal = expanding

      margin_bottom = 20

      expand = {
        visible = "[Not(ActivityWindow.HasActiveEvent)]"
      }

      expand = {}

      # Bottom Bar
      widget = {
        size = { 1328 140 }

        vbox = {
          name = "activity_content"
          layoutpolicy_horizontal = expanding
          layoutpolicy_vertical = expanding

          expand = {}

          vbox = {
            name = "bottom_bar"
            datacontext = "[GetPlayer]"
            layoutpolicy_horizontal = expanding
            spacing = 5

            hbox = {
              name = "ongoing_info"
              visible = "[And(Not( Activity.IsComplete ),Not(ActivityWindow.HasActiveEvent))]"
              layoutpolicy_horizontal = expanding

              background = {
                texture = "gfx/interface/window_activities/activity_window_bg.dds"
                margin = { 5 0 }
                margin_top = 62
                margin_bottom = 38

                using = Mask_Rough_Edges
              }

              hbox_activity_progress = {
                name = "activity_progress"
                margin_left = 25
                margin_bottom = 5
              }

              expand = {}

              hbox = {
                name = "few_phases"
                visible = "[LessThan_int32(Activity.GetPlannedPhasesCount, '(int32)9')]"
                layoutpolicy_horizontal = expanding
                layoutpolicy_vertical = expanding
                margin_right = 20
                spacing = 5

                expand = {}

                activity_phase_progress_timline_widget = {
                  name = "phase_progres_timeline_short"
                  size = { 750 55 }
                }
              }

              hbox = {
                name = "many_phases"
                visible = "[GreaterThan_int32(Activity.GetPlannedPhasesCount, '(int32)8')]"
                layoutpolicy_horizontal = expanding
                layoutpolicy_vertical = expanding
                margin_right = 20
                spacing = 5

                expand = {}

                activity_phase_progress_timline_widget = {
                  name = "phase_progres_timeline_long"
                  size = { 770 55 }
                }
              }
            }

            hbox = {
              layoutpolicy_horizontal = expanding
              margin = { 10 10 }

              background = {
                using = Background_Area_Light
                margin_top = 5

                modify_texture = {
                  name = "mask"
                  texture = "gfx/interface/component_masks/mask_seamless_torn_edge_horizontal.dds"
                  spriteType = corneredtiled
                  spriteborder_top = 20
                  blend_mode = alphamultiply
                  texture_density = 4
                }
              }

              vbox = {
                visible = "[Activity.IsParticipant( Character.Self )]"

                hbox = {
                  name = "current_intent"
                  datacontext = "[Character.GetInvolvedActivityIntent]"
                  visible = "[Not( Activity.IsComplete )]"
                  margin_left = 15

                  text_single = {
                    text = "ACTIVITY_WINDOW_YOUR_INTENT"
                    default_format = "#medium"
                    align = nobaseline
                    max_width = 110
                    margin_right = 10
                  }

                  button_standard = {
                    size = { 300 44 }
                    onclick = "[ToggleGameViewData( 'activity_intent_selection', GetPlayer )]"
                    enabled = "[Not( ActivityWindow.HasActiveEvent )]"
                    tooltip = "[ActivityWindow.GetIntentTooltip]"

                    animation_attention_text_single = {
                      blockoverride "start_state"
                      {
                        name = "activity_intent_completed"
                      }
                    }

                    flowcontainer = {
                      parentanchor = vcenter
                      spacing = 10
                      margin = { 10 0 }

                      icon = {
                        size = { 30 30 }
                        texture = "[ActivityIntent.GetIcon]"

                        modify_texture = {
                          texture = "gfx/interface/colors/colors_textured.dds"
                          blend_mode = add
                          framesize = { 96 96 }

                          block "master_color_frame" {
                            frame = 1
                          }
                        }
                      }

                      text_single = {
                        text = "[ActivityIntent.GetName]"
                        align = left|nobaseline
                        parentanchor = vcenter
                        max_width = 230
                      }
                    }

                    button_replace = {
                      parentanchor = right|vcenter
                      position = { -10 0 }
                    }
                  }

                  expand = {}
                }

                hbox = {
                  name = "succeeded_multiple_intents"
                  visible = "[And( Activity.IsComplete, GreaterThan_int32( GetDataModelSize( Character.GetCompletedIntents ), '(int32)1' ) )]"
                  layoutpolicy_horizontal = expanding

                  margin_left = 15
                  spacing = 10

                  text_single = {
                    text = "ACTIVITY_CONCLUSION_COMPLETED_INTENT_MULTI"
                  }

                  hbox = {
                    datamodel = "[Character.GetCompletedIntents]"

                    item = {
                      icon_flat_standard = {
                        name = "current_intent_icon"
                        size = { 30 30 }

                        datacontext = "[ActivityIntentData.GetType]"
                        texture = "[ActivityIntent.GetIcon]"
                        raw_tooltip = "#T [ActivityIntent.GetName]#!"
                      }
                    }
                  }

                  expand = {}
                }

                hbox = {
                  name = "succeeded_single_intent"
                  visible = "[And( Activity.IsComplete, EqualTo_int32( GetDataModelSize( Character.GetCompletedIntents ), '(int32)1' ) )]"
                  layoutpolicy_horizontal = expanding

                  margin_left = 15
                  spacing = 5

                  text_single = {
                    text = "ACTIVITY_CONCLUSION_COMPLETED_INTENT"
                  }

                  hbox = {
                    datacontext_from_model = {
                      datamodel = "[Character.GetCompletedIntents]"
                      index = 0
                    }
                    datacontext = "[ActivityIntentData.GetType]"

                    spacing = 4

                    icon_flat_standard = {
                      name = "intent_icon"
                      size = { 30 30 }
                      texture = "[ActivityIntent.GetIcon]"
                    }

                    text_single = {
                      name = "intent_name_completed"
                      text = "[ActivityIntent.GetName]"
                    }
                  }

                  #expand = {}
                }

                hbox = {
                  name = "failed_intent"
                  visible = "[And( Activity.IsComplete, IsDataModelEmpty( Character.GetCompletedIntents ) )]"
                  datacontext = "[Character.GetInvolvedActivityIntent]"
                  layoutpolicy_horizontal = expanding
                  margin_left = 15

                  text_single = {
                    text = "ACTIVITY_CONCLUSION_FAILED_INTENT"
                  }

                  icon_flat_standard = {
                    name = "intent_icon"
                    size = { 30 30 }
                    texture = "[ActivityIntent.GetIcon]"
                  }

                  text_single = {
                    name = "intent_name_failed"
                    text = "[ActivityIntent.GetName]"
                  }

                  expand = {}
                }
              }

              vbox = {
                name = "activity_plugin_widgets_summary"
                layoutpolicy_horizontal = expanding

                state = {
                  trigger_on_create = yes
                  name = appear_test
                  delay = 0.8
                  using = Animation_Curve_Default
                  alpha = 1
                  duration = 0.6
                }
              }

              hbox = {
                visible = "[EqualTo_string( ActivityType.GetKey(), 'activity_journey')]"
                name = "activity_plugin_widgets_skill_text"
                layoutpolicy_horizontal = expanding
                margin_right = 50
                background = {
                  margin_right = -40
                  margin_left = 10
                  margin_bottom = 8
                  margin_top = 5
                  using = Background_Bottom_Fade
                  using = Background_Area
                  using = Mask_Rough_Edges
                }
                highlight_icon_building = {
                  alwaystransparent = yes
                  texture = "[Activity.GetCurrentPhase.GetLocation.GetHolding.GetSpecialBuildingType.GetTypeIcon]"
                  size = { 44 38 }
                  datacontext = "[Activity.GetCurrentPhase.GetLocation.GetHolding.GetSpecialBuildingType]"
                  tooltip = "journey_building_tt"
                  using = tooltip_ne
                }
                spacer = { size = { 15 15 } }
                vbox = {
                  layoutpolicy_horizontal = expanding
                  text_single = {
                    text = "journey_skill_type_desc"
                  }
                  text_single = {
                    text = "journey_skill_desc"
                    max_width = 320
                  }
                }
              }

              expand = {}

              hbox = {
                margin_right = 15
                spacing = 10

                button_standard = {
                  name = "guest_list"
                  text = "ACTIVITY_WINDOW_GUEST_LIST"
                  down = "[IsGameViewDataShown( 'activity_guest_list', Activity.Self )]"
                  onclick = "[ToggleGameViewData( 'activity_guest_list', Activity.Self )]"
                }

                button_standard = {
                  name = "activity_log"
                  text = "ACTIVITY_WINDOW_LOG"
                  down = "[IsGameViewDataShown( 'activity_log', Activity.Self )]"
                  onclick = "[ToggleGameViewData( 'activity_log', Activity.Self )]"
                }

                button_standard = {
                  name = "charioteers"
                  text = "CHARIOTEERS_WINDOW_LABEL"
                  visible = "[DataModelHasItems( ActivityWindow.GetCurrentPhaseGuestSubset( 'charioteers' ) )]"
                  down = "[Not( GetVariableSystem.Exists( 'activity_charioteers_view' ) )]"
                  onclick = "[GetVariableSystem.Toggle( 'activity_charioteers_view' )]"
                }
              }
            }
          }
        }
      }
    }

    widget = {
      name = "activity_top_layer_idle_widgets"
      visible = "[Not( ActivityWindow.HasActiveEvent )]"

      size = { 100% 100% }
    }

    widget = {
  		name = "header"
  		parentanchor = top|hcenter
  		layoutpolicy_horizontal = expanding
  		size = { 1346 116 }

  		icon = {
  			name = "activity_header_glass"
  			position = { 0 -46 }
  			size = { 100% 100% }
  			texture = "gfx/interface/window_activities/header_activity_glass.dds"

  			modify_texture = {
  				name = overlay
  				texture = "gfx/interface/component_effects/effect_header_blue_shine.dds"
  				blend_mode = colordodge
  				translate_uv = { 0.6 0 }
  			}

  			state = {
  				name = right
  				next = left

  				duration = 8
  				bezier = { 0.8 0.18 0.96 .05 }

  				modify_texture = {
  					name = overlay
  					translate_uv = { -0.6 0 }
  				}
  			}

  			state = {
  				name = left
  				next = right

  				duration = 0.0
  				delay = 5

  				modify_texture = {
  					name = overlay
  					translate_uv = { 0.6 0 }
  				}
  			}

  			state = {
  				trigger_on_create = yes
  				name = start
  				next = right

  				duration = 0.0

  				modify_texture = {
  					name = overlay
  					translate_uv = { 0.6 0 }
  				}
  			}
  		}

  		icon = {
  			name = "activity_header_frame"
  			position = { 0 -46 }
  			size = { 100% 100% }
  			texture = "gfx/interface/window_activities/header_activity_frame.dds"
  		}

  		icon = {
  			texture = "[ActivityType.GetHeaderIcon]"
  			size = { 60 60 }
  			position = { 0 -27 }
  			parentanchor = top|hcenter
  		}

  		container = {
  			name = "non_event_titles"
  			visible = "[Not( ActivityWindow.HasActiveEvent )]"

  			parentanchor = hcenter
  			position = { 0 17 }

  			activity_header = {
  				name = "ongoing_title"
  				visible = "[Not( Activity.IsComplete )]"
  				text = "ACTIVITY_WINDOW_HEADER"
  			}

  			activity_header = {
  				name = "conclusion_title"
  				visible = "[Activity.IsComplete]"
  				text = "ACTIVITY_CONCLUSION_HEADER"
  			}

  			background = {
  				using = Background_Area_ExtraDark
  				alpha = 0.4

  				margin = { 80 0 }
  				margin_bottom = 10


  				modify_texture = {
  					texture = "gfx/interface/component_masks/mask_glow.dds"
  					blend_mode = alphamultiply
  				}

  				modify_texture = {
  					texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
  					blend_mode = alphamultiply
  					alpha = 0.4
  					mirror = vertical
  				}
  			}
  		}

  		container = {
  			name = "activity_event_titles"
  			visible = "[ActivityWindow.HasActiveEvent]"

  			parentanchor = hcenter
  			position = { 0 17 }

  			activity_event_header = {
  				name = "activity_event"
  			}

  			activity_event_header = {
  				name = "tour_arrival_event"
  			}

  			activity_event_header = {
  				name = "chariot_race_pivotal_moment_widget"
  			}

  			background = {
  				using = Background_Area_ExtraDark
  				alpha = 0.4

  				margin = { 80 0 }
  				margin_bottom = 10


  				modify_texture = {
  					texture = "gfx/interface/component_masks/mask_glow.dds"
  					blend_mode = alphamultiply
  				}

  				modify_texture = {
  					texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
  					blend_mode = alphamultiply
  					alpha = 0.4
  					mirror = vertical
  				}
  			}
  		}

  		watch_window_button = {
  			size = { 60 40 }
  			parentanchor = right
  			position = { -110 18 }
  			onclick = "[AddWatchWindow( Activity.MakeScope )]"
  		}

  		buttons_window_control = {
  			parentanchor = right
  			position = { -10 18 }
  			allow_outside = yes

  			blockoverride "button_close"
  			{
  				onclick = "[ActivityWindow.Close]"
  			}
  			blockoverride "button_go_to"
  			{
  				tooltip = "ACTIVITY_WINDOW_CURRENT_LOCATION"
  				onclick = "[Activity.GetCurrentPhase.GetLocation.PanCameraTo]"
  			}
  		}
  	}

    activity_pulse_action_popup_right = {
      datacontext = "[ActivityWindow.GetLastWeeklyPulseEffectData]"
      visible = "[And( ActivityPulseEffect.IsValid, Not( ActivityWindow.HasActiveEvent ) )]"
    }

    widget = {
      parentanchor = right
      allow_outside = yes

      vbox = {
        layoutpolicy_vertical = expanding

        window_activity_contestants_right_bar = {}
      }
    }
  }
}
