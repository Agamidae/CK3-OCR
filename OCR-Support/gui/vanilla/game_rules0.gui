types OCR {
		type game_rules_old = window {
		name = "game_rules"
		size = { 100% 100% }
		movable = no
		layer = confirmation
		using = vanilla

		# using = Background_Full_Dim

		state = {
			name = _show
			using = Animation_FadeIn_Quick
			on_start = "[PdxGuiWidget.FindChild('game_rules_window').TriggerAnimation('appear')]"
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
			on_start = "[PdxGuiWidget.FindChild('game_rules_window').TriggerAnimation('disappear')]"
		}

		button_normal = {
			size = { 100% 100% }
			onclick = "[JominiGameRules.Hide]"
		}

		widget = {
			name = "game_rules_window"
			parentanchor = center
			size = { 1200 100% }
			alwaystransparent = no
			allow_outside = yes

			using = Window_Decoration_Frontend_Spike
			using = Window_Background

			state = {
				name = appear
				duration = 0.15
				using = Animation_Curve_Default

				position_y = 0
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_standard_show"
				}
			}

			state = {
				name = disappear
				duration = 0.15
				using = Animation_Curve_Default

				position_y = 50
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_standard_hide"
				}
			}

			vbox = {
				using = Window_Margins
				spacing = 5

				header_pattern = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text"
					{
						text = "GAME_RULES_HEADER"
					}

					blockoverride "button_close"
					{
						onclick = "[JominiGameRules.Hide]"
						shortcut = "close_window"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
					}
				}

				hbox = {
					margin = { 30 6 }
					spacing = 20

					hbox_ironman_achievements_info = {
						name = "ironman_and_achievements"
						visible = "[Not( GameHasMultiplePlayers )]"
					}

					vbox_game_rule_preset_options = {
						visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
					}

					vbox = {
						spacing = 5
						text_single = {
							text = "GAME_RULE_CATEGORIES"
							max_width = 350
						}

						dropdown_menu_standard = {
							visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"

							blockoverride "dropdown_properties"
							{
								datamodel = "[JominiGameRules.GetCategories]"
								onselectionchanged = "[JominiGameRules.SelectCategory]"
								selectedindex = "[JominiGameRules.GetSelectedCategoryIndex]"
							}

							blockoverride "dropdown_active_item_properties"
							{
								text = "[Select_CString( JominiGameRules.HasSelectedCategoryIndex, GameRuleCategory.GetName, Localize( 'GAME_RULES_CATEGORY_DROPDOWN_NONE_SELECTED' ) )]"
							}

							blockoverride "dropdown_item_properties"
							{
								text = "[GameRuleCategory.GetName]"
							}

						}
					}

				}

				scrollbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content"
					{
						margin_top = 30
						margin_left = 25

						fixedgridbox = {
							datamodel = "[JominiGameRules.GetVisibleSettings]"
							addcolumn = 450
							addrow = 170
							datamodel_wrap = 2
							maxhorizontalslots = 2
							flipdirection = yes

							item = {
								widget = {
									size = { 420 150 }
									datacontext = "[GuiGameRule.GetRule]"
									datacontext = "[GuiGameRule.GetSetting]"

									background = {
										using = Background_Area_With_Header
										alpha = 0.8
										margin = { 10 5 }
										margin_bottom = 0
									}

									vbox = {
										text_single = {
											text = "[GameRule.GetName]"
											max_width = 350
											#	parentanchor = hcenter
										}

										spacer = {
											size = { 20 20 }
										}

										widget_game_rule_option = {}

										text_multi = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											text = "[GameRuleSetting.GetDescription]"
											default_format = "#low"
											margin = { 10 15 }
										}
									}

								}
							}
						}
					}
				}

				expand = {}

				hbox = {
					margin = { 0 10 }
					margin_top = 5

					spacing = 20

					button_standard = {
						visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
						text = "GAME_RULES_RESET_TO_DEFAULTS_TEXT"
						onclick = "[JominiGameRules.ResetAllToDefaults]"
					}

					button_primary = {
						text = "CLOSE_LABEL"
						visible = "[Not( And( IsHost, Not( HasGameStartedForTheFirstTime ) ) )]"
						onclick = "[JominiGameRules.Hide]"
						shortcut = "close_window"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
					}

					button_primary = {
						text = "APPLY"
						visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
						onclick = "[JominiGameRules.ApplySettings]"
						onclick = "[JominiGameRules.Hide]"
						shortcut = "close_window"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
					}
				}
			}

			game_rules_preset_window = {}
		}

	}
}
