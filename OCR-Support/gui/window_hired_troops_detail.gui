window = {
	name = "hired_troop_detail_view"
	datacontext = "[HiredTroopDetailView.GetHiredTroop]"
	using = TooltipFocus

	movable = no
	layer = middle

	using = Window_Background

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		on_start = "[GetVariableSystem.Set( 'hired_troop_detail_view_open', 'true'  )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		on_start = "[GetVariableSystem.Clear( 'hired_troop_detail_view_open' )]"
	}

	vbox = {
		using = ocr_margins
		set_parent_size_to_minimum = yes

		state = {
			name = "mercenary_details_refresh"
			alpha = 0
			duration = 0.2
			next = "b"
			using = Animation_Curve_Default
		}

		state = {
			name = "b"
			alpha = 1
			duration = 0.2
			using = Animation_Curve_Default
		}

		header_pattern = {
			layoutpolicy_horizontal = expanding
			blockoverride "header_text"
			{
				text = "[HiredTroop.GetName]"
			}

			blockoverride "button_close"
			{
				onclick = "[HiredTroopDetailView.Close]"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 5 0 }
			hbox = {
				layoutpolicy_horizontal = expanding

				vbox = {
					visible = "[HiredTroop.IsHolyOrder]"
					layoutpolicy_horizontal = expanding

					text_single = {
						text = "HIRED_TROOPS_VIEW_HO_NUM_HOLDINGS"
						layoutpolicy_horizontal = expanding
					}

					text_single = {
						text = "HIRED_TROOPS_VIEW_HO_CAPITAL"
						layoutpolicy_horizontal = expanding
					}

					text_multi = {
						text = "HIRED_TROOPS_VIEW_HO_PATRON"
						layoutpolicy_horizontal = expanding
						autoresize = yes
						max_width = 320
						min_width = 320
					}
				}

				vbox = {
					visible = "[HiredTroop.IsMercenaryCompany]"
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "culture_text"
						layoutpolicy_horizontal = expanding
						text = "HIRED_TROOPS_VIEW_MC_CULTURE"
						default_format = "#high"
						using = Font_Size_Medium
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "HIRED_TROOPS_VIEW_MC_CAPITAL"
						default_format = "#low"
					}
				}
			}

			widget = {
				size = { 0 5 }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				using = Background_Inset_Bottom

				vbox = {
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding

						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							text_single = {
								name = "soldiers_count"
								text = "HIRED_TROOPS_VIEW_LIST_NUMBER_OF_SOLDIERS"
							}

							text_single = {
								raw_text = ", [HiredTroop.GetSoldiersProgressBarRatio]% reinforced."
							}
							expand = { }
						}

						hbox = {
						    layoutpolicy_horizontal = expanding

							text_single = {
								name = "knights_count"
								text = "HIRED_TROOPS_VIEW_LIST_NUMBER_OF_KNIGHTS"
								tooltip = "[HiredTroop.GetKnightsTooltip]"
							}

							dot = { }

						    expand = { }
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding


						vbox = {
							# visible = "[LessThanOrEqualTo_int32(GetDataModelSize(HiredTroop.GetRegiments), '(int32)4')]"
							name = "regiments"
							datamodel = "[HiredTroop.GetRegiments]"
							layoutpolicy_horizontal = expanding


							item = {
								hbox = {
									datacontext = "[HiredTroopRegiment.GetRegiment]"
									ignoreinvisible = yes
									layoutpolicy_horizontal = expanding

									text_single = {
										name = "soldiers_label"
										text = HIRED_TROOPS_VIEW_SOLDIER_COUNT
									}

									space = { }

									text_single = {
										visible = "[Not(HiredTroopRegiment.IsLevies)]"
										text = "[HiredTroopRegiment.GetMenAtArmsType.GetNameNoTooltip]"
									}

									text_single = {
										visible = "[HiredTroopRegiment.IsLevies]"
										text = "HIRED_TROOPS_VIEW_LEVY_REGIMENT"
									}

									dot = { }

									expand = { }
								}
							}
						}
					}
				}

				widget = {
					size = { 0 5 }
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					vbox = {
						name = "leader_area"
						layoutpolicy_horizontal = expanding

						char_name = {
							datacontext = "[HiredTroop.GetTitle.GetHolder]"
							blockoverride "pre" {
								text_single = {
									raw_text = "Leader:"
								}
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3

							text_single = {
								datacontext = "[HiredTroop.GetMartialSkillItem]"
								raw_text = "[SkillItem.GetValue] Martial."
							}

							text_single = {
								raw_text = "[GetDataModelSize(HiredTroop.GetCommanderTraits)] Traits:"
							}


							expand =  { }
						}

						vbox = {
							name = "commander_traits"
							datacontext = "[HiredTroop.GetTitle.GetHolder]"
							datamodel = "[HiredTroop.GetCommanderTraits]"
							layoutpolicy_horizontal = expanding

							item = {
								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "[Trait.GetName(GetPlayer)],"
								}
							}
						}
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					name = "hire_area"
					visible = "[Not(HiredTroop.IsHiredByPlayer)]"

					text_single = {
						layoutpolicy_horizontal = expanding
						name = "mercenary_hire_info"
						visible = "[HiredTroop.IsMercenaryCompany]"
						text = "HIRED_TROOPS_VIEW_MC_HIRE_INFO"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[HiredTroop.IsHolyOrder]"
						name = "holy_order_hire_info"
						text = "HIRED_TROOPS_VIEW_HO_HIRE_INFO"
					}

					text_multi = {
						visible = "[And( HiredTroop.IsHired, HiredTroop.GetHolyOrder.IsPlayerPatron )]"
						text = "HIRED_TROOPS_HIRED_BY"
						autoresize = yes
						max_width = 320
						min_width = 320
					}

					widget = {
						size = { 0 5 }
					}

					button_primary_text = {
						layoutpolicy_horizontal = expanding
						name = "hire_button"
						onclick = "[HiredTroop.Hire]"
						enabled = "[HiredTroop.CanBeHired]"
						blockoverride "text" {
							text = "HIRED_TROOPS_VIEW_HIRE"
						}
						blockoverride "disabled" {
							visible = "[Not(HiredTroop.CanBeHired)]"
						}
						blockoverride "hotkey" {
							visible = "[HiredTroop.CanBeHired]"
						}

						using = tooltip_ne
						tooltip = "[HiredTroop.GetHireTooltip]"
					}
				}

				vbox = {
					name = "extend_area"
					visible = "[And(HiredTroop.IsMercenaryCompany, HiredTroop.IsHiredByPlayer)]"
					spacing = 10

					text_single = {
						name = "time_left"
						datacontext = "[HiredTroop.GetMercenaryCompany]"
						text = "HIRED_TROOPS_VIEW_HIRED_BY_ME"
					}

					text_single = {
						name = "hire_info"
						text = "HIRED_TROOPS_VIEW_MC_HIRE_INFO"
					}

					button_standard = {
						datacontext = "[HiredTroop.GetMercenaryCompany]"
						visible = "[And(MercenaryCompany.IsHiredByLocalPlayer, MercenaryCompany.CanBeRaised)]"
						tooltip = "RAISE_HIRED_TROOP"
						onclick = "[RaiseMercenaryCompany(MercenaryCompany.Self)]"
						text = "RAISE_HIRED_TROOP"
						enabled = "[And(MercenaryCompany.IsHiredByLocalPlayer, MercenaryCompany.CanBeRaised)]"
					}

					button_standard = {
						name = "extend_button"
						onclick = "[HiredTroop.Extend]"
						enabled = "[HiredTroop.CanBeExtended]"
						text = "HIRED_TROOPS_VIEW_MC_EXTEND"

						using = tooltip_ne
						tooltip = "[HiredTroop.GetExtendTooltip]"
					}
				}
			}
		}
	}
}
