### WAR OVERVIEW WINDOW
window = {
	gfxtype = windowgfx
	name = "war_overview_window"
	layer = middle
	movable = no

	using = base_ocr_window

	state = {
		name = _show
		on_start = "[PdxGuiTriggerAllAnimations('war_overview_show')]"
		using = Animation_FadeIn_Quick
		# using = Window_Position_MainTab
		start_sound = {
			soundeffect = "event:/SFX/UI/War/sfx_ui_window_war_show"
		}
	}

	state = {
		name = _hide
		on_start = "[PdxGuiTriggerAllAnimations('war_overview_hide')]"
		duration = 0.1
		start_sound = {
			soundeffect = "event:/SFX/UI/War/sfx_ui_window_war_hide"
		}
		on_start = "[SetMapMode('realms')]"
	}

	buttons_window_control = {
		blockoverride "button_close"
		{
			onclick = "[WarOverviewWindow.Close]"
			onclick = "[PdxGuiTriggerAllAnimations('ally_list_hide')]"
			onclick = "[GetVariableSystem.Clear( 'characterlist_left' )]"
			onclick = "[GetVariableSystem.Clear( 'characterlist_right' )]"
		}
	}

	widget = {
		using = ocr_window

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 5
			using = ocr_margins

			error_button = {
				layoutpolicy_horizontal = expanding
			}

			flowcontainer = {
				layoutpolicy_horizontal = expanding
				direction = vertical

				text_single = {
					raw_text = "[WarOverviewWindow.GetWar.GetName]."
				}

				text_single = {
					raw_text = "[WarOverviewWindow.GetWar.GetActiveCasusBelli.GetType.GetName] casus belli."
				}

				flowcontainer = {
					direction = vertical
					tooltip = "[WarOverviewWindow.GetWarScoreTooltip]"

					flowcontainer = {
						spacing = 3
						text_single = {
							name = "warscore"
							raw_text = "[WarOverviewWindow.GetWarScore] war score."
						}
					}
				}

				flowcontainer = {
					spacing = 3
					text_single = {
						raw_text = "[ArmyComposition.GetSoldierCountString] men"
						datacontext = "[WarOverviewWindow.GetLeftSideComposition]"
					}
					text_single = {
						raw_text = "versus"
					}

					text_single = {
						raw_text = "[ArmyComposition.GetSoldierCountString]."
						datacontext = "[WarOverviewWindow.GetRightSideComposition]"
					}
				}

				flow_agot_join_megawar = { }

				#participants
				flowcontainer = {
					ignoreinvisible = yes
					spacing = 3

					flowcontainer = {
						datacontext = "[WarOverviewWindow.GetLeftSideLeaderItem]"
						datacontext = "[WarParticipantItem.GetCharacter]"
					    ignoreinvisible = yes
					    spacing = 3

						button_text = {
							using = char_click
							blockoverride "text" {
								raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip]"
							}
						}

						text_single = {
							visible = "[DataModelHasItems(WarOverviewWindow.GetLeftSideParticipantItems)]"
							raw_text = "and [GetDataModelSize(WarOverviewWindow.GetLeftSideParticipantItems)] all[Select_CString(GreaterThan_int32(WarOverviewWindow.GetLeftSideParticipantItems, '(int32)1'), 'ies', 'y')]"

							tooltipwidget = {
								flowcontainer = {
									using = DefaultTooltipBackground
									margin = { 15 10 }
									direction = vertical
									datamodel = "[WarOverviewWindow.GetLeftSideParticipantItems]"

									item = {
										flowcontainer = {
											spacing = 3
											soldiers_and_quality_small_text = {
												datacontext = "[WarParticipantItem.GetComposition]"
											}
											realm_name = {
												datacontext = "[WarParticipantItem.GetCharacter]"
											}
										}
									}
								}
							}
						}
					}

					text_single = {
						raw_text = "versus"
					}

					flowcontainer = {
					    ignoreinvisible = yes
					    spacing = 3
						datacontext = "[WarOverviewWindow.GetRightSideLeaderItem]"
						datacontext = "[WarParticipantItem.GetCharacter]"

						button_text = {
							using = char_click
							blockoverride "text" {
								raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip]"
							}
						}

						text_single = {
							visible = "[DataModelHasItems(WarOverviewWindow.GetRightSideParticipantItems)]"
							raw_text = "and [GetDataModelSize(WarOverviewWindow.GetRightSideParticipantItems)] all[Select_CString(GreaterThan_int32(GetDataModelSize(WarOverviewWindow.GetRightSideParticipantItems), '(int32)1'), 'ies', 'y')]"

							tooltipwidget = {
								flowcontainer = {
									using = DefaultTooltipBackground
									margin = { 15 10 }
									direction = vertical
									datamodel = "[WarOverviewWindow.GetRightSideParticipantItems]"

									item = {
										flowcontainer = {
											spacing = 3
											soldiers_and_quality_small_text = {
												datacontext = "[WarParticipantItem.GetComposition]"
											}
											realm_name = {
												datacontext = "[WarParticipantItem.GetCharacter]"
											}
										}
									}
								}
							}
						}
					}

					dot = {
						margin_left = -3
					}
				}

			}

			### BUTTONS ###
			flowcontainer = {
				layoutpolicy_horizontal = expanding
				direction = vertical
				name = "tab_buttons"

				button_text = {
					blockoverride "text" {
						raw_text = "TAB_VICTORY"
					}
					blockoverride "pre" {
						spacing = 3
						text_single = {
							raw_text = "You can"
							visible = "[WarOverviewWindow.CanSendVictoryDemand]"
						}
						text_single = {
							raw_text = "Can't"
							visible = "[Not(WarOverviewWindow.CanSendVictoryDemand)]"
						}
					}
					blockoverride "extra" {
						text_single = {
							visible = "[Not(WarOverviewWindow.CanSendVictoryDemand)]"
							raw_text = ", View details, 1"
							margin_left = -3
						}
					}
					blockoverride "dot" {
					}
					onclick = "[PdxGuiTriggerAllAnimations('war_end_terms_refresh')]"
					onclick = "[WarOverviewWindow.SetEffectsTabVictory]"
					enabled = "[Not(WarOverviewWindow.IsPeaceTermsOpen)]"
					shortcut = speed_1
				}

				button_text = {
					blockoverride "text" {
						raw_text = "TAB_WHITE_PEACE"
					}
					onclick = "[PdxGuiTriggerAllAnimations('war_end_terms_refresh')]"
					onclick = "[WarOverviewWindow.SetEffectsTabWhitePeace]"
					down = "[WarOverviewWindow.IsEffectsTabWhitePeace]"
					visible = "[WarOverviewWindow.GetWar.GetActiveCB.GetType.IsWhitePeacePossible]"
					blockoverride "extra" {
						text_single = {
							margin_left = -3
							raw_text = ", 2."
						}
					}
					shortcut = speed_2
				}

				button_text = {
					blockoverride "text" {
						raw_text = "TAB_DEFEAT"
					}
					onclick = "[PdxGuiTriggerAllAnimations('war_end_terms_refresh')]"
					onclick = "[WarOverviewWindow.SetEffectsTabDefeat]"
					down = "[WarOverviewWindow.IsEffectsTabDefeat]"
					blockoverride "extra" {
						text_single = {
							margin_left = -3
							raw_text = ", 3."
						}
					}
					shortcut = speed_3
				}
			}

			#TODO scrollbox

			# scores
			flowcontainer = {
				layoutpolicy_horizontal = expanding
				direction = vertical

				flowcontainer = {
					text_single = {
						text = "WAR_OVERVIEW_STARTED"
					}

					dot = { }

					text_single = {
						raw_text = " [WarOverviewWindow.GetWar.GetActiveCB.GetType.GetName] Casus Belli."
					}
				}


				text_single = {
					raw_text = "War score breakdown:"
				}

				text_single = {
					raw_text = "[WarOverviewWindow.GetTickingWarScore] from objectives."
					tooltip = "[WarOverviewWindow.GetTickingWarScoreTooltip]"
				}

				text_single = {
					raw_text = "[WarOverviewWindow.GetBattlesWarScore] from battles.[AddTextIf(WarOverviewWindow.IsBattlesWarScoreCapped, ' Maximum reached.')]"
					tooltip = "[WarOverviewWindow.GetBattlesWarScoreTooltip]"
				}

				text_single = {
					raw_text = "[WarOverviewWindow.GetOccupationWarScore] from occupations."
					tooltip = "[WarOverviewWindow.GetOccupationWarScoreTooltip]"
				}

				text_single = {
					raw_text = "[WarOverviewWindow.GetImprisonmentWarScore] from prisoners."
					tooltip = "[WarOverviewWindow.GetImprisonmentWarScoreTooltip]"
				}
			}

			#participants
			flowcontainer = {
				layoutpolicy_horizontal = expanding
				direction = vertical
				ignoreinvisible = yes

				flowcontainer = {
					datacontext = "[WarOverviewWindow.GetLeftSideLeaderItem]"
					direction = vertical
					datacontext = "[WarParticipantItem.GetCharacter]"

					text_single = {
						raw_text = "[WarOverviewWindow.GetLeftSideHeader]:"
					}

					flowcontainer = {
						soldiers_and_quality_small_text = {
							datacontext = "[WarOverviewWindow.GetLeftSideComposition]"
							blockoverride "tooltip" {
							}
						}
					}
					realm_name = {
						blockoverride "pre" {
							text_single = {
								margin_right = 3
								raw_text = "Leader,"
							}
						}
						blockoverride "width" {
							max_width = 600
						}
					}
				}
				text_single = {
					raw_text = "No allies."
					visible = "[IsDataModelEmpty(WarOverviewWindow.GetLeftSideParticipantItems)]"
				}
				button_text = {
					visible = "[DataModelHasItems(WarOverviewWindow.GetLeftSideParticipantItems)]"
					blockoverride "text" {
						raw_text = "[GetDataModelSize(WarOverviewWindow.GetLeftSideParticipantItems)] allies, Click to [Select_CString(GetVariableSystem.Exists('left_allies'), 'hide', 'show')]."
					}
					onclick = "[GetVariableSystem.Toggle( 'left_allies' )]"
				}
				flowcontainer = {
					direction = vertical
					visible = "[GetVariableSystem.Exists('left_allies')]"
					datamodel = "[WarOverviewWindow.GetLeftSideParticipantItems]"

					item = {
						flowcontainer = {
							realm_name = {
								blockoverride "pre" {
									soldiers_and_quality_small_text = {
										datacontext = "[WarParticipantItem.GetComposition]"
									}
								}
								datacontext = "[WarParticipantItem.GetCharacter]"
							}
						}
					}
				}

				flowcontainer = {
					direction = vertical
					datacontext = "[WarOverviewWindow.GetRightSideLeaderItem]"

					text_single = {
						raw_text = "[WarOverviewWindow.GetRightSideHeader]:"
					}

					flowcontainer = {
						soldiers_and_quality_small_text = {
							datacontext = "[WarOverviewWindow.GetRightSideComposition]"
						}
					}
					realm_name = {
						datacontext = "[WarParticipantItem.GetCharacter]"
						blockoverride "pre" {
							text_single = {
								margin_right = 3
								raw_text = "Leader,"
							}
						}
						blockoverride "width" {
							max_width = 600
						}
					}
				}
				text_single = {
					raw_text = "No allies."
					visible = "[IsDataModelEmpty(WarOverviewWindow.GetRightSideParticipantItems)]"
				}
				button_text = {
					visible = "[DataModelHasItems(WarOverviewWindow.GetRightSideParticipantItems)]"
					blockoverride "text" {
						raw_text = "[GetDataModelSize(WarOverviewWindow.GetRightSideParticipantItems)] allies, Click to [Select_CString(GetVariableSystem.Exists('right_allies'), 'hide', 'show')]."
					}
					onclick = "[GetVariableSystem.Toggle( 'right_allies' )]"
				}
				flowcontainer = {
					direction = vertical
					visible = "[GetVariableSystem.Exists('right_allies')]"
					datamodel = "[WarOverviewWindow.GetRightSideParticipantItems]"

					item = {
						flowcontainer = {
							realm_name = {
								blockoverride "pre" {
									soldiers_and_quality_small_text = {
										datacontext = "[WarParticipantItem.GetComposition]"
									}
								}
								datacontext = "[WarParticipantItem.GetCharacter]"
							}
						}
					}
				}
			}

			#crusade
			flowcontainer = {
				layoutpolicy_horizontal = expanding
				direction = vertical

				flowcontainer = {
					direction = vertical
					datacontext = "[WarOverviewWindow.GetPlayerParticipantItem]"
					visible = "[WarParticipantItem.ShowContribution]"
					visible_at_creation = no

					text_multi = {
						autoresize = yes
						min_width = 590
						max_width = 590

						raw_text = "[WarParticipantItem.GetContributionTooltip]."
					}

					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical
						name = "rank_and_total_score"

						flowcontainer = {
							visible = "[And( WarOverviewWindow.ShowContributionRank, GreaterThan_int32( WarOverviewWindow.GetContributionRank(GetPlayer), '(int32)0' ) )]"
							text_single = {
								text = "WAR_OVERVIEW_CONTRIBUTION_RANK"
							}

							text_single = {
								raw_text = " rank."
							}

						}

						text_single = {
							raw_text = "[WarParticipantItem.GetContributionPercentage|%] share."
						}

						text_single = {
							name = "score"
							raw_text = "[WarParticipantItem.GetContribution] contribution."
						}
					}
				}

				flowcontainer = {
					name = "ghw_info"
					visible = "[WarOverviewWindow.ShowBeneficiary]"
					visible_at_creation = no
					direction = vertical

					text_single = {
						name = "beneficiary"
						text = "WAR_OVERVIEW_BENEFICIARY"
					}

					text_single = {
						name = "beneficiary_name"
						raw_text = "[WarOverviewWindow.GetBeneficiaryName]."
					}

					# widget = {
					# 	size = { 0 3 }
					# }

					# button_text = {
					# 	name = "change_beneficiary"
					# 	onclick = "[OpenCharacterInteraction( 'select_ghw_beneficiary_interaction', GetPlayer )]"
					#
					# 	blockoverride "text" {
					# 		raw_text = "Select beneficiary."
					# 	}
					# }
				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "extra" {
					text_single = {
						visible = "[GetScriptedGui('hide_units_in_war').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', WarOverviewWindow.GetWar.MakeScope).End )]"
						raw_text = "Units and forts in this war are hidden. Click to show."
					}
					text_single = {
						visible = "[Not(GetScriptedGui('hide_units_in_war').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', WarOverviewWindow.GetWar.MakeScope).End ))]"
						raw_text = "Click to hide units and forts in this war from lists."
					}
				}
				onclick = "[GetScriptedGui('hide_units_in_war').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', WarOverviewWindow.GetWar.MakeScope).End )]"
			}

			expand = { }
		}

		#### WAR END TERMS ###
		margin_widget = {
			visible = "[WarOverviewWindow.IsPeaceTermsOpen]"
			visible_at_creation = no
			layoutpolicy_horizontal = expanding
			size = { 100% 100% }
			scissor = yes
			background = { using = Background_Area_Border_Solid }

			state = {
				name = _show
				using = Animation_Curve_Default

				alpha = 1
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_standard_show"
				}
			}

			state = {
				name = _hide
				using = Animation_Curve_Default

				alpha = 0
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_standard_hide"
				}
			}

			vbox = {
				using = ocr_margins
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				error_button = {
					layoutpolicy_horizontal = expanding
				}


				### SEND BUTTON
				button_primary_text = {
					layoutpolicy_horizontal = expanding
					name = "send_button"
					visible = "[WarOverviewWindow.IsPlayerParticipant]"
					blockoverride "text" {
						raw_text = "[WarOverviewWindow.GetSendButtonLabel]"

					}
					blockoverride "disabled" {
						visible = "[Not(WarOverviewWindow.CanSend)]"
					}
					blockoverride "hotkey" {
						visible = "[WarOverviewWindow.CanSend]"
					}
					# blockoverride "extra" {
					# 	text_single = {
					# 		raw_text = "[WarOverviewWindow.GetAnswerScore]."
					# 	}
					# }
					enabled = "[WarOverviewWindow.CanSend]"
					onclick = "[WarOverviewWindow.Send]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_advance"
					tooltip = "[WarOverviewWindow.GetSendButtonTooltip]"
				}

				flowcontainer = {
					direction = vertical
					layoutpolicy_horizontal = expanding
					ignoreinvisible = yes

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							# raw_text = "Close this view, Escape."
						}
						onclick = "[WarOverviewWindow.SetEffectsTabVictory]"
						visible = "[WarOverviewWindow.IsEffectsTabVictory]"
						shortcut = close_window

						# #TODO
						# state = {
						# 	trigger_on_create = yes
						# 	on_finish = "[WarOverviewWindow.SetEffectsTabVictory]"
						# }
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							# raw_text = "Close this view, Escape."
						}
						onclick = "[WarOverviewWindow.SetEffectsTabDefeat]"
						visible = "[WarOverviewWindow.IsEffectsTabDefeat]"
						shortcut = close_window
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							# raw_text = "Close this view, Escape."
						}
						onclick = "[WarOverviewWindow.SetEffectsTabWhitePeace]"
						visible = "[WarOverviewWindow.IsEffectsTabWhitePeace]"
						shortcut = close_window
					}

				}

				text_single = {
					layoutpolicy_horizontal = expanding
					# visible = "[And(WarOverviewWindow.IsPlayerParticipant, WarOverviewWindow.NeedsAnswer)]"
					raw_text = "[WarOverviewWindow.GetAnswerScore|0] reasons, [WarOverviewWindow.GetAnswer]. See tooltip."
					tooltip = "[WarOverviewWindow.GetAnswerReason]"
					visible = no
				}


				war_overview_center_panel_hostage_exchange_ocr = {}


				text_multi_wide = {
					visible = "[And(WarOverviewWindow.IsPlayerParticipant, WarOverviewWindow.NeedsAnswer)]"
					layoutpolicy_horizontal = expanding
					raw_text = "[WarOverviewWindow.GetAnswerReason]."
				}

				# progressbar_standard = {
				# 	visible = "[And(WarOverviewWindow.IsPlayerParticipant, WarOverviewWindow.NeedsAnswer)]"
				# 	name = "answer_chance"
				# 	size = { 300 35 }
				# 	position = { 0 6 }
				# 	value = "[WarOverviewWindow.GetAnswerScore]"
				# 	parentanchor = hcenter
				# }

				scrollbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content"
					{
						vbox = {
							name = "effects_text"

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "If you win:"
								visible = "[WarOverviewWindow.IsEffectsTabVictory]"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "If you lose:"
								visible = "[WarOverviewWindow.IsEffectsTabDefeat]"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "if you white peace:"
								visible = "[WarOverviewWindow.IsEffectsTabWhitePeace]"
							}

							text_multi_wide = {
								name = "main_end_war_effect"
								text = "[WarOverviewWindow.GetCurrentTabMainOutputDescription]"

							}

							text_multi_wide = {
								name = "other_end_war_effects"

								text = "[WarOverviewWindow.GetCurrentTabEffectsDescription]"
							}
						}
					}
				}

				expand = { }
			}
		}

		### HOSTAGE EXCHANGE CHILD WINDOW ###
		war_overview_exchange_hostage_window_ocr = {}
	}

	window_old_war = {

			state = {
				name = _mouse_hierarchy_enter
				start_sound = {
					soundeffect = "event:/SFX/Snapshots/sfx_snapshots_WaroutcomeWindow"
					soundparam = {
						name = StateChange
						value = 2.0
					}
				}
			}

			state = {
				name = _mouse_hierarchy_leave
				start_sound = {
					soundeffect = "event:/SFX/Snapshots/sfx_snapshots_WaroutcomeWindow"
					soundparam = {
						name = StateChange
						value = 1.0
					}
				}
			}
	}
}

types OCR {

	type war_overview_center_panel_hostage_exchange_ocr = vbox {
		name = "center_panel_hostage_exchange"
		visible = "[Not( WarOverviewWindow.IsEffectsTabDefeat )]"
		layoutpolicy_horizontal = expanding


		text_single = {
			visible = "[Not( WarOverviewWindow.DoesAllowHostages )]"
			layoutpolicy_horizontal = expanding
			text = "WAR_OVERVIEW_HOSTAGES_DISALLOWED"
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			margin_top = 5
			margin_bottom = 5
			visible = "[WarOverviewWindow.DoesAllowHostages]"

			vbox = {
				name = "hostage_exchange"
				layoutpolicy_horizontal = expanding

				### HOSTAGE PORTRAIT LEFT ###
				vbox = {
					layoutpolicy_horizontal = expanding

					button_text = {
						layoutpolicy_horizontal = expanding
						datacontext = "[WarOverviewWindow.GetHostageExchangeWindow]"
						enabled = "[HostageExchangeWindow.CanExchangeHostage]"
						visible = "[Not( HostageExchangeWindow.HasSelectedOfferCharacter )]"
						onclick = "[HostageExchangeWindow.OpenOfferHostage]"
						onclick = "[Set('first_hostage', 'yes')]"
						tooltip = "WAR_OVERVIEW_HOSTAGE_PICK_OFFER"
						tooltip_enabled = "[Not(HostageExchangeWindow.CanExchangeHostage)]"
						blockoverride "disabled" {
							visible = "[Not(HostageExchangeWindow.CanExchangeHostage)]"
						}

					    blockoverride "text" {
					        raw_text = "1, Offer a hostage."
					    }
						shortcut = speed_1
					}

					char_name = {
						layoutpolicy_horizontal = expanding
						datacontext = "[WarOverviewWindow.GetHostageExchangeWindow]"
						datacontext = "[HostageExchangeWindow.GetOfferCharacter]"
						visible = "[HostageExchangeWindow.HasSelectedOfferCharacter]"
						blockoverride "onclick" {
							onclick = "[HostageExchangeWindow.OpenOfferHostage]"
							onrightclick = "[GetVariableSystem.Clear('expand_view')]"
							onrightclick = "[DefaultOnCharacterClick(Character.GetID)]"
							onrightclick = "[WarOverviewWindow.Close]"
							onrightclick = "[PdxGuiTriggerAllAnimations('ally_list_hide')]"
							onrightclick = "[GetVariableSystem.Clear( 'characterlist_left' )]"
							onrightclick = "[GetVariableSystem.Clear( 'characterlist_right' )]"
						}
						blockoverride "pre" {
							text_single = {
								raw_text = "1. Your offer,"
							}
						}
						blockoverride "extra" {
							text_single = {
								raw_text = "Click to change."
							}
						}
						shortcut = speed_1
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						datacontext = "[WarOverviewWindow.GetHostageExchangeWindow]"
						enabled = "[HostageExchangeWindow.CanExchangeHostage]"
						visible = "[Not( HostageExchangeWindow.HasSelectedDemandCharacter )]"
						onclick = "[Set('first_hostage', 'yes')]"
						onclick = "[HostageExchangeWindow.OpenDemandHostage]"
						tooltip = "WAR_OVERVIEW_HOSTAGE_PICK_DEMAND"
						tooltip_enabled = "[Not(HostageExchangeWindow.CanExchangeHostage)]"
						blockoverride "disabled" {
							visible = "[Not(HostageExchangeWindow.CanExchangeHostage)]"
						}

						blockoverride "text" {
							raw_text = "2, Demand a hostage."
						}
						shortcut = speed_2
					}

					char_name = {
						layoutpolicy_horizontal = expanding
						datacontext = "[WarOverviewWindow.GetHostageExchangeWindow]"
						datacontext = "[HostageExchangeWindow.GetDemandCharacter]"
						visible = "[HostageExchangeWindow.HasSelectedDemandCharacter]"
						blockoverride "onclick" {
							onclick = "[HostageExchangeWindow.OpenDemandHostage]"
							onrightclick = "[GetVariableSystem.Clear('expand_view')]"
							onrightclick = "[DefaultOnCharacterClick(Character.GetID)]"
							onrightclick = "[WarOverviewWindow.Close]"
							onrightclick = "[PdxGuiTriggerAllAnimations('ally_list_hide')]"
							onrightclick = "[GetVariableSystem.Clear( 'characterlist_left' )]"
							onrightclick = "[GetVariableSystem.Clear( 'characterlist_right' )]"
						}
						blockoverride "pre" {
							text_single = {
								raw_text = "2. Your demand,"
							}
						}
						blockoverride "extra" {
							text_single = {
								raw_text = "Click to change."
							}
						}
						shortcut = speed_2
					}
				}

				text_multi_wide = {
					visible = "[Isnt('first_hostage')]"
					margin_top = 5
					layoutpolicy_horizontal = expanding
					text = "WAR_OVERVIEW_HOSTAGE_INFO"
				}
			}
		}
	}

	type war_overview_exchange_hostage_window_ocr = window {
		name = "window_exchange_hostages"
		datacontext = "[WarOverviewWindow.GetHostageExchangeWindow]"
		visible = "[HostageExchangeWindow.IsOpen]"
		using = ocr_window_bg
		focuspolicy = click
		allow_outside = yes

		vbox = {
			using = ocr_margins
			error_button = {
				layoutpolicy_horizontal = expanding
			}

			header_pattern = {
				layoutpolicy_horizontal = expanding


				blockoverride "header_text"
				{
					raw_text = "[HostageExchangeWindow.GetHeader]."
				}

				blockoverride "button_close"
				{
					onclick = "[HostageExchangeWindow.Close]"
				}
			}

			button_primary_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					text = "CONFIRM"
				}
				onclick = "[HostageExchangeWindow.Send]"
				visible = "[HostageExchangeWindow.CanSend]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
			}

			war_overview_hostage_exchange_portraits_ocr = {}


			war_overview_character_list_ocr = {
				datacontext = "[HostageExchangeWindow.GetCharacterList]"
			}

			expand = {}
		}
	}

	type war_overview_character_list_ocr = vbox {
		name = "character_list"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding


		### List
		vbox_character_list = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "item_size" {
				size = { 650 70 }
				layoutpolicy_horizontal = expanding
			}

			blockoverride "extra_click" {
				enabled = "[CharacterListItem.IsSelectable]"
				tooltip = "[CharacterListItem.GetUnselectableReason]"
				onclick = "[HostageExchangeWindow.Send]"
			}

			blockoverride "interaction_accept" {

				text_single = {
					visible = "[Not(CharacterListItem.IsSelectable)]"
					raw_text = "Can't pick,"
				}
				hbox = {
					# visible = "[Not(CharacterInteractionConfirmationWindow.IsForcedToAccept)]"

					### Will Not Accept ###
					text_single = {
						alwaystransparent = yes
						raw_text = "[HostageExchangeWindow.GetHostageAcceptanceValue( CharacterListItem.Self )] total,"
						tooltip = "[HostageExchangeWindow.GetAcceptanceTooltipBreakdown( CharacterListItem.Self )]"
					}
				}
			}

		}
	}

	type war_overview_hostage_exchange_portraits_ocr = vbox {
		name = "hostage_exchange_character_portraits"
		datacontext = "[WarOverviewWindow.GetHostageExchangeWindow]"

		margin = { 10 10 }
		layoutpolicy_horizontal = expanding

		vbox = {
			layoutpolicy_horizontal = expanding

			char_name = {
				layoutpolicy_horizontal = expanding
				datacontext = "[HostageExchangeWindow.GetSecondaryActor]"
				visible = "[Character.IsValid]"
				blockoverride "pre" {
					text_single = {
						raw_text = "Hostage,"
					}
				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				shortcut = go_back
				visible = "[HostageExchangeWindow.CanClear]"
				onclick = "[HostageExchangeWindow.OnClear]"
				blockoverride "text" {
					raw_text = "CLEAR_MARRIED_CHARACTER"
				}
				blockoverride "dot" {

				}
			}

			hbox = {
			    layoutpolicy_horizontal = expanding

				char_name = {
					datacontext = "[HostageExchangeWindow.GetActor]"
					visible = "[Character.IsValid]"
					blockoverride "pre" {
						text_single = {
							raw_text = "[HostageExchangeWindow.GetLabelLeft],"
						}
					}
				}

				char_name = {
					layoutpolicy_horizontal = expanding
					datacontext = "[HostageExchangeWindow.GetRecipient]"
					visible = "[And( Character.IsValid, Not( ObjectsEqual( HostageExchangeWindow.GetActor, HostageExchangeWindow.GetRecipient ) ) )]"
					blockoverride "pre" {
						text_single = {
							raw_text = "[HostageExchangeWindow.GetLabelRight],"
						}
					}
				}

			    expand = { }
			}

		}
	}

}

types WarOverView
{
	type icon_blood_splatter = highlight_icon {
		size = { 474 270 }
		parentanchor = bottom|hcenter

		texture = "gfx/interface/window_war/blood.dds"
		spriteType = Corneredtiled
		spriteborder_right = 410

		modify_texture = {
			name = "mask"
			texture = "gfx/interface/window_war/window_frame_broken.dds"
			blend_mode = mask
		}

		using = Animation_WarOverview_Blood
	}

	type icon_blood_splatter_2 = highlight_icon {
		size = { 350 270 }
		parentanchor = bottom|hcenter

		texture = "gfx/interface/window_war/blood_2.dds"
		spriteType = Corneredtiled
		spriteborder = { 238 0 }
		spriteborder_bottom = -10

		modify_texture = {
			name = "mask"
			texture = "gfx/interface/component_masks/mask_fade_circle.dds"
			blend_mode = mask
		}

		using = Animation_WarOverview_Blood
	}

	type icon_cloth_tears = highlight_icon {
		size = { 474 280 }
		parentanchor = bottom|hcenter

		texture = "gfx/interface/window_war/window_frame_broken.dds"
		spriteType = Corneredtiled
		spriteborder_right = 410
		spriteborder_bottom = -10

		using = Animation_ShowHide_Standard
	}

	type icon_cloth_tears_2 = highlight_icon {
		size = { 350 280 }
		parentanchor = bottom|hcenter

		texture = "gfx/interface/window_war/window_frame_broken_2.dds"
		spriteType = Corneredtiled
		spriteborder_bottom = -10

		using = Animation_ShowHide_Standard
	}

	type war_overview_center_panel_header = vbox {
		name = "header_bar"
		layoutpolicy_horizontal = expanding
		margin_bottom = 5

		background = {
			texture = "gfx/interface/component_tiles/tile_background_window_header.dds"
			spriteType = Corneredtiled
			spriteborder = { 20 20 }
			margin = { 5 0 }
			margin_top = 3
			margin_bottom = 13
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			maximumsize = { 600 0 }

			expand = {
				layoutpolicy_horizontal = expanding
				layoutstretchfactor_horizontal = 1
			}

			text_single = {
				text = "[WarOverviewWindow.GetWar.GetName]"
				using = Font_Type_Flavor
				using = Font_Size_Big
				default_format = "#high"
				align = center|nobaseline
				max_width = 500
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutstretchfactor_horizontal = 1

				expand = {}

				buttons_window_control = {
					blockoverride "button_close"
					{
						onclick = "[WarOverviewWindow.Close]"
						onclick = "[PdxGuiTriggerAllAnimations('ally_list_hide')]"
						onclick = "[GetVariableSystem.Clear( 'characterlist_left' )]"
						onclick = "[GetVariableSystem.Clear( 'characterlist_right' )]"
					}
				}
			}

			watch_window_button = {
				size = { 60 40 }
				onclick = "[AddWatchWindow( WarOverviewWindow.GetWar.MakeScope )]"
			}
		}

		hbox = {
			margin = { 15 0 }
			spacing = 5

			text_single = {
				name = "start_date"
				text = "WAR_OVERVIEW_STARTED"
				using = Font_Size_Small
				align = nobaseline
				default_format = "#weak"
			}

			icon = {
				name = "cb_icon"
				texture = "[WarOverviewWindow.GetWar.GetActiveCB.GetType.GetIcon]"
				size = { 25 25 }
				tooltip = "[WarOverviewWindow.GetWar.GetActiveCB.GetType.GetName]"
			}
		}
	}

	type war_overview_center_panel_war_score_details = vbox {
		name = "tutorial_highlight_war_score_details"
		layoutpolicy_horizontal = expanding
		margin = { 0 5 }

		background = {
			using = Background_Area_Dark
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			tooltip = "[WarOverviewWindow.GetWarScoreTooltip]"
			margin = { 0 5 }
			spacing = 3

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 25 0 }
				spacing = 10

				text_single = {
					name = "warscore_header"
					text = "[war_score|E]"
					using = Font_Size_Big
					align = nobaseline
				}

				text_single = {
					name = "warscore"
					text = "[WarOverviewWindow.GetWarScore]"
					using = Font_Size_Big
					align = nobaseline
				}

				expand = {}

				hbox = {
					name = "war_score_categories"
					margin = { 15 0 }
					spacing = 10

					hbox = {
						name = "warscore_objectives"
						spacing = 3
						tooltip = "[WarOverviewWindow.GetTickingWarScoreTooltip]"
						tooltip_offset = { 0 50 }

						icon = {
							name = "icon_a"
							size = { 30 30 }
							texture = "gfx/interface/icons/war_score/icon_war_score_objectives.dds"
						}

						text_single = {
							name = "ticking_warscore"
							min_width = 30
							align = nobaseline
							text = "[WarOverviewWindow.GetTickingWarScore]"
						}
					}

					hbox = {
						name = "warscore_battles"
						spacing = 3
						tooltip = "[WarOverviewWindow.GetBattlesWarScoreTooltip]"
						tooltip_offset = { 0 50 }

						icon = {
							name = "icon_b"

							size = { 30 30 }
							texture = "gfx/interface/icons/war_score/icon_war_score_battles.dds"
						}

						text_single = {
							name = "battles_warscore"
							min_width = 30
							align = nobaseline
							text = "[WarOverviewWindow.GetBattlesWarScore]"
						}

						text_single = {
							name = "battles_warscore_capped"
							visible = "[WarOverviewWindow.IsBattlesWarScoreCapped]"
							align = nobaseline
							text = "BATTLES_WAR_SCORE_CAPPED"
							default_format = "#N"
						}
					}

					hbox = {
						name = "warscore_occupation"
						spacing = 3
						tooltip = "[WarOverviewWindow.GetOccupationWarScoreTooltip]"
						tooltip_offset = { 0 50 }

						icon = {
							name = "icon_c"
							size = { 30 30 }
							texture = "gfx/interface/icons/icon_holding_castle.dds"
						}
						text_single = {
							name = "occupation_warscore"
							min_width = 30
							align = nobaseline
							text = "[WarOverviewWindow.GetOccupationWarScore]"
						}
					}

					hbox = {
						name = "warscore_prisoners"
						spacing = 3
						tooltip = "[WarOverviewWindow.GetImprisonmentWarScoreTooltip]"
						tooltip_offset = { 0 50 }

						icon = {
							name = "icon_d"
							size = { 30 30 }
							texture = "gfx/interface/icons/war_score/icon_war_score_prisoners.dds"
						}

						text_single = {
							name = "prisoners_warscore"
							min_width = 30
							align = nobaseline
							text = "[WarOverviewWindow.GetImprisonmentWarScore]"
						}
					}
				}
			}

			hbox = {
				name = "score_progress"
				margin = { 0 4 }
				spacing = 15

				text_single = {
					name = "max_warscore"
					align = right|nobaseline
					raw_text = "-100"
					using = Font_Size_Medium
					default_format = "#low"
				}

				#### WAR SCORE PROGRESSBAR ###
				widget = {
					size = { 450 20 }

					widget = {
						size = { 100% 100% }
						scissor = yes

						hbox = {

							#### BAR FILL LEFT ####
							widget = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								layoutstretchfactor_horizontal = "[GetProgressBarValueMax( WarOverviewWindow.GetProgressbarWarScore, '(float)100' )]"

								icon = {
									size = { 100% 100% }
									texture = "gfx/interface/progressbars/war_progress_blue.dds"
									spriteType = Corneredtiled

									modify_texture = {
										name = overlay
										texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_solid.dds"
										blend_mode = mask
									}

									modify_texture = {
										name = "flash"
										texture = "gfx/interface/colors/gold.dds"
										alpha = 0
									}

									state = {
										trigger_on_create = yes
										name = war_overview_show
										next = a
										delay = 0.5
										duration = 0.0
										using = Animation_Curve_Default

										modify_texture = {
											name = overlay
											translate_uv = { 1 0 }
										}

										modify_texture = {
											name = "flash"
											alpha = 0.1
										}
									}

									state = {
										name = a
										duration = 0.75
										bezier = { 0.5 0.1 1 1}
										using = Animation_Curve_Default

										modify_texture = {
											name = overlay
											translate_uv = { -1 0 }
										}

										modify_texture = {
											name = "flash"
											alpha = 0.4
										}
									}
								}

								### GHW BAR ###
								icon = {
									visible = "[WarOverviewWindow.IsGreatHolyWar]"
									size = { 100% 100% }
									texture = "gfx/interface/progressbars/war_progress_ghw.dds"
									spriteType = Corneredtiled

									modify_texture = {
										name = overlay
										texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_solid.dds"
										blend_mode = mask
									}

									modify_texture = {
										name = "flash"
										texture = "gfx/interface/colors/gold.dds"
										alpha = 0
									}

									state = {
										trigger_on_create = yes
										name = war_overview_show
										next = a
										delay = 0.5
										duration = 0.0
										using = Animation_Curve_Default

										modify_texture = {
											name = overlay
											translate_uv = { 1 0 }
										}

										modify_texture = {
											name = "flash"
											alpha = 0.1
										}
									}

									state = {
										name = a
										duration = 0.75
										bezier = { 0.5 0.1 1 1}
										using = Animation_Curve_Default

										modify_texture = {
											name = overlay
											translate_uv = { -1 0 }
										}

										modify_texture = {
											name = "flash"
											alpha = 0.4
										}
									}
								}

								icon = {
									visible = "[LessThan_float( WarOverviewWindow.GetProgressbarWarScore, '(float)50' )]"
									using = Animation_ShowHide_Standard
									parentanchor = right|vcenter
									position = { 5 0 }

									size = { 20 100% }
									texture = "gfx/interface/progressbars/progressbar_center_glow.dds"

									state = {
										name = a
										next = b
										trigger_on_create = yes
										duration = 0.1
										alpha = 1
									}

									state = {
										name = b
										next = a
										duration = 0.2
										alpha = 0.9
									}
								}

								icon = {
									visible = "[GreaterThanOrEqualTo_float( WarOverviewWindow.GetProgressbarWarScore, '(float)50' )]"
									using = Animation_ShowHide_Standard
									parentanchor = right|vcenter
									position = { 20 0 }

									size = { 80 100% }
									texture = "gfx/interface/progressbars/progressbar_center_glow.dds"

									state = {
										name = a
										next = b
										trigger_on_create = yes
										duration = 0.1
										alpha = 1
									}

									state = {
										name = b
										next = a
										duration = 0.2
										alpha = 0.9
									}
								}

								### PROGRESS BAR EFFECTS LEFT ###
								widget = {
									visible = "[GreaterThanOrEqualTo_float( WarOverviewWindow.GetProgressbarWarScore, '(float)50' )]"
									size = { 100% 100% }

									widget = {
										size = { 100% 100% }
										scissor = yes

										icon = {
											parentanchor = right
											size = { 160 100% }
											texture = "gfx/interface/colors/white.dds"
											shaderfile = "gfx/FX/pdxgui_repeat_texture.shader"
											alpha = 0.4

											using = Color_Bright_Yellow

											modify_texture = {
												texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
												blend_mode = alphamultiply
											}

											modify_texture = {
												name = "clouds"
												texture = "gfx/interface/component_masks/mask_clouds.dds"
												blend_mode = alphamultiply
												spriteType = corneredtiled
												texture_density = 2
											}

											state = {
												name = a
												next = b
												trigger_on_create = yes

												modify_texture = {
													name = "clouds"
													translate_uv = { -1 0 }
												}
											}

											state = {
												name = b
												next = a
												duration = 4

												modify_texture = {
													name = "clouds"
													translate_uv = { 1 0 }
												}
											}
										}
									}
								}
							}

							#### BAR FILL RIGHT ####
							widget = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								layoutstretchfactor_horizontal = "[GetProgressBarValueMaxOther( WarOverviewWindow.GetProgressbarWarScore, '(float)100' )]"

								icon = {
									size = { 100% 100% }
									texture = "gfx/interface/progressbars/war_progress_red.dds"
									spriteType = Corneredtiled

									modify_texture = {
										name = overlay
										texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_solid.dds"
										blend_mode = mask
									}

									modify_texture = {
										name = "flash"
										texture = "gfx/interface/colors/gold.dds"
										alpha = 0
									}

									state = {
										trigger_on_create = yes
										name = war_overview_show
										next = a
										delay = 0.5
										duration = 0.0
										using = Animation_Curve_Default

										modify_texture = {
											name = overlay
											translate_uv = { -1 0 }
										}

										modify_texture = {
											name = "flash"
											alpha = 0.1
										}
									}

									state = {
										name = a
										duration = 0.75
										bezier = { 0.5 0.1 1 1}

										modify_texture = {
											name = overlay
											translate_uv = { 1 0 }
										}

										modify_texture = {
											name = "flash"
											alpha = 0.4
										}
									}
								}

								### PROGRESS BAR EFFECTS RIGHT ###
								icon = {
									visible = "[GreaterThanOrEqualTo_float( WarOverviewWindow.GetProgressbarWarScore, '(float)50' )]"
									using = Animation_ShowHide_Standard
									parentanchor = left|vcenter
									position = { -5 0 }
									mirror = horizontal

									size = { 20 100% }
									texture = "gfx/interface/progressbars/progressbar_center_glow.dds"

									state = {
										name = a
										next = b
										trigger_on_create = yes
										duration = 0.1
										alpha = 1
									}

									state = {
										name = b
										next = a
										duration = 0.2
										alpha = 0.9
									}
								}

								icon = {
									visible = "[LessThan_float( WarOverviewWindow.GetProgressbarWarScore, '(float)50' )]"
									using = Animation_ShowHide_Standard
									parentanchor = left|vcenter
									position = { -20 0 }
									mirror = horizontal

									size = { 80 100% }
									texture = "gfx/interface/progressbars/progressbar_center_glow.dds"

									state = {
										name = a
										next = b
										trigger_on_create = yes
										duration = 0.1
										alpha = 1
									}

									state = {
										name = b
										next = a
										duration = 0.2
										alpha = 0.9
									}
								}

								widget = {
									visible = "[LessThan_float( WarOverviewWindow.GetProgressbarWarScore, '(float)50' )]"
									using = Animation_ShowHide_Standard
									size = { 100% 100% }

									widget = {
										size = { 100% 100% }
										scissor = yes

										icon = {
											parentanchor = left
											mirror = horizontal

											size = { 160 100% }
											texture = "gfx/interface/colors/white.dds"
											shaderfile = "gfx/FX/pdxgui_repeat_texture.shader"
											alpha = 0.4

											using = Color_Bright_Yellow

											modify_texture = {
												texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
												blend_mode = alphamultiply
											}

											modify_texture = {
												name = "clouds"
												texture = "gfx/interface/component_masks/mask_clouds.dds"
												blend_mode = alphamultiply
												spriteType = corneredtiled
												texture_density = 2
											}

											state = {
												name = a
												next = b
												trigger_on_create = yes

												modify_texture = {
													name = "clouds"
													translate_uv = { -1 0 }
												}
											}

											state = {
												name = b
												next = a
												duration = 4

												modify_texture = {
													name = "clouds"
													translate_uv = { 1 0 }
												}
											}
										}
									}
								}
							}
						}
					}

					widget = {
						name = "power_bar_frame"
						parentanchor = top
						size = { 100% 100% }
						alwaystransparent = yes

						background = {
							texture = "gfx/interface/progressbars/progress_frame_war.dds"
							spriteType = Corneredstretched
							spriteborder = { 10 10 }
							margin = { 5 4 }
						}
					}
				}

				text_single = {
					name = "min_warscore"
					align = nobaseline
					raw_text = "+100"
					using = Font_Size_Medium
					default_format = "#low"
				}
			}
		}
	}

	type war_overview_center_panel_contribution_as_allied = hbox {
		layoutpolicy_horizontal = expanding
		margin = { 10 0 }
		spacing = 12

		background = {
			using = Background_Area
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			datacontext = "[WarOverviewWindow.GetPlayerParticipantItem]"
			visible = "[WarParticipantItem.ShowContribution]"
			visible_at_creation = no
			margin = { 0 5 }

			text_single = {
				text = "WAR_OVERVIEW_MY_CONTRIBUTION"
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				text_single = {
					align = center
					text = "[WarParticipantItem.GetContribution]"
				}

				text_single = {
					align = center
					text = "[WarParticipantItem.GetContributionPercentage|%]"
				}

				text_single = {
					visible = "[And( WarOverviewWindow.ShowContributionRank, EqualTo_int32( WarOverviewWindow.GetContributionRank(GetPlayer), '(int32)0' ) )]"
					align = center
					text = "WAR_OVERVIEW_CONTRIBUTION_NO_RANK"
				}

				text_single = {
					visible = "[And( WarOverviewWindow.ShowContributionRank, GreaterThan_int32( WarOverviewWindow.GetContributionRank(GetPlayer), '(int32)0' ) )]"
					align = center
					text = "WAR_OVERVIEW_CONTRIBUTION_RANK"
				}
			}

			tooltip = "[WarParticipantItem.GetContributionTooltip]"
		}

		divider_light = {
			layoutpolicy_vertical = expanding
			visible = "[WarOverviewWindow.ShowBeneficiary]"
			visible_at_creation = no

		}

		hbox = {
			name = "ghw_info"
			layoutpolicy_horizontal = expanding
			visible = "[WarOverviewWindow.ShowBeneficiary]"
			visible_at_creation = no

			margin = { 0 5 }

			vbox = {
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "beneficiary"
					layoutpolicy_horizontal = expanding
					align = left
					text = "WAR_OVERVIEW_BENEFICIARY"
				}

				text_single = {
					name = "beneficiary_name"
					layoutpolicy_horizontal = expanding
					align = left
					text = "[WarOverviewWindow.GetBeneficiaryName]"
				}
			}

			button_round = {
				name = "change_beneficiary"
				alwaystransparent = no

				button_replace = {
					onclick = "[OpenCharacterInteraction( 'select_ghw_beneficiary_interaction', GetPlayer )]"
					parentanchor = center
				}

				tooltip = "SELECT_GHW_BENEFICIARY"
			}
		}
	}

	type war_overview_center_panel_war_end_terms = widget {
		visible = "[WarOverviewWindow.IsPeaceTermsOpen]"
		visible_at_creation = no
		layoutpolicy_horizontal = expanding
		size = { 0 680 }
		scissor = yes

		state = {
			name = _show
			duration = 0.1
			using = Animation_Curve_Default

			alpha = 1
			size = { 0 480 }
			start_sound = {
				soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_standard_show"
			}
		}

		state = {
			name = _hide
			duration = 0.3
			using = Animation_Curve_Default

			alpha = 0
			size = { 0 0 }
			start_sound = {
				soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_standard_hide"
			}
		}

		vbox = {
			### CENTER PANEL HOSTAGE EXCHANGE ###
			spacer = {
				size = { 0 4 }
			}
			war_overview_center_panel_hostage_exchange = {}

			### CENTER PANEL WAR END TERMS ###
			margin = { 5 0 }
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 5
				margin = { 15 15 }

				background = {
					using = Background_Tab_Area
					mirror = vertical
				}

				state = {
					name = "war_end_terms_refresh"
					next = "b"
					using = Animation_Refresh_FadeOut
				}

				state = {
					name = "b"
					using = Animation_Refresh_FadeIn
				}

				scrollbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content"
					{
						vbox = {
							name = "effects_text"

							text_single = {
								name = "main_end_war_effect"
								autoresize = yes
								maximumsize = { 520 -1 }
								minimumsize = { 520 -1 }
								text = "[WarOverviewWindow.GetCurrentTabMainOutputDescription]"
								default_format = "#high"
								multiline = yes
							}

							text_single = {
								name = "main_end_war_effect_spacing"
								autoresize = yes
								maximumsize = { 520 -1 }
								minimumsize = { 520 -1 }
								raw_text = " "
								multiline = yes
							}

							text_single = {
								name = "other_end_war_effects"
								autoresize = yes
								maximumsize = { 520 -1 }
								minimumsize = { 520 -1 }
								text = "[WarOverviewWindow.GetCurrentTabEffectsDescription]"
								multiline = yes
								margin_bottom = 5
							}
						}
					}
				}

				widget = {
					name = "acceptance"
					size = { 400 50 }
					visible = "[And(WarOverviewWindow.IsPlayerParticipant, WarOverviewWindow.NeedsAnswer)]"
					tooltip = "[WarOverviewWindow.GetAnswerReason]"

					progressbar_standard = {
						name = "answer_chance"
						size = { 300 35 }
						position = { 0 6 }
						value = "[WarOverviewWindow.GetAnswerScore]"
						parentanchor = hcenter
					}

					text_single = {
						name = "answer"
						size = { 100 40 }
						position = { 0 10 }
						align = center
						text = "[WarOverviewWindow.GetAnswer]"
						parentanchor = hcenter
					}
				}

				expand = {
					visible = "[Not(And(WarOverviewWindow.IsPlayerParticipant, WarOverviewWindow.NeedsAnswer))]"
					size = { 400 50 }
				}

				### SEND BUTTON
				button_primary = {
					name = "send_button"
					visible = "[WarOverviewWindow.IsPlayerParticipant]"
					size = { 400 42 }
					text = "[WarOverviewWindow.GetSendButtonLabel]"
					enabled = "[WarOverviewWindow.CanSend]"
					onclick = "[WarOverviewWindow.Send]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_advance"
					tooltip = "[WarOverviewWindow.GetSendButtonTooltip]"

					animation_aggressive = {
						name = "vicotry_glow"
						visible = "[WarOverviewWindow.CanSendVictoryDemand]"
					}
				}
			}
		}
	}

	type war_overview_empty_hostage_portrait = widget {
		size = { 85 90 }

		background = {
			using = Background_Area_Solid

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
				blend_mode = alphamultiply
				alpha = 0.2
				mirror = vertical
			}
		}

		widget = {
			size = { 100% 100% }

			background = {
				texture = "gfx/portraits/portrait_frame.dds"
				using = Color_Grey
				margin = { -4 -4 }
				alpha = 0.5
			}
		}

		button = {
			datacontext = "[WarOverviewWindow.GetHostageExchangeWindow]"
			size = { 100% 100% }
			enabled = "[HostageExchangeWindow.CanExchangeHostage]"

			block "onclick_event" {}

			name = "position_portrait_tutorial_uses_this"

			highlight_icon = {
				name = "portrait_unknown_head_small_glow"
				parentanchor = center
				position = { 3 -9 }
				gfxtype = framedbuttongfx
				effectname = "NoHighlight"
				texture = "gfx/portraits/unknown_portraits/button_unknown_head.dds"
				size = { 80 100 }
				framesize = { 384 480 }
				upframe = 1
				overframe = 2
			}

			button_plus = {
				visible = "[HostageExchangeWindow.CanExchangeHostage]"
				parentanchor = center
				position = { 0 0 }
				block "onclick_plus" {}
			}
		}
	}

	type war_overview_center_panel_hostage_exchange = hbox {
		name = "center_panel_hostage_exchange"
		visible = "[Not( WarOverviewWindow.IsEffectsTabDefeat )]"
		layoutpolicy_horizontal = expanding
		margin = { 0 5 }

		background = {
			using = Background_Area_Dark
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[Not( WarOverviewWindow.DoesAllowHostages )]"
			margin = { 24 5 }

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "WAR_OVERVIEW_HOSTAGES_DISALLOWED"
				default_format = "#weak"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			margin_top = 5
			visible = "[WarOverviewWindow.DoesAllowHostages]"

			hbox = {
				name = "hostage_exchange"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				### HOSTAGE PORTRAIT LEFT ###
				vbox = {
					margin_left = 24
					war_overview_empty_hostage_portrait = {
						datacontext = "[WarOverviewWindow.GetHostageExchangeWindow]"
						visible = "[Not( HostageExchangeWindow.HasSelectedOfferCharacter )]"
						blockoverride "onclick_event"
						{
							onclick = "[HostageExchangeWindow.OpenOfferHostage]"
						}
						blockoverride "onclick_plus"
						{
							onclick = "[HostageExchangeWindow.OpenOfferHostage]"
						}
						tooltip = "WAR_OVERVIEW_HOSTAGE_PICK_OFFER"
					}
					portrait_head_small = {
						datacontext = "[WarOverviewWindow.GetHostageExchangeWindow]"
						datacontext = "[HostageExchangeWindow.GetOfferCharacter]"
						visible = "[HostageExchangeWindow.HasSelectedOfferCharacter]"

						blockoverride "opinion_box" {}
						blockoverride "portrait_button_template_onclick" {
							onclick = "[HostageExchangeWindow.OpenOfferHostage]"
						}
						tooltip = "WAR_OVERVIEW_HOSTAGE_PICK_OFFER"
					}
					text_label_center = {
						text = "WAR_OVERVIEW_HOSTAGE_OFFER"
					}
				}

				### EXCHANGE HOSTAGE SUMMARY ###
				vbox = {
					margin_left = 15

					hbox = {
						layoutpolicy_horizontal = expanding
						text_single = {
							text = "exchange_hostage_interaction"
							using = Font_Size_Medium
							default_format = "#high"
							align = nobaseline
						}
						expand = {}
					}
					text_single = {
						autoresize = yes
						maximumsize = { 360 -1 }
						minimumsize = { 360 -1 }
						text = "WAR_OVERVIEW_HOSTAGE_INFO"
						multiline = yes
						margin_bottom = 5
					}
				}

				expand = {}

				### HOSTAGE PORTRAIT RIGHT ###
				vbox = {
					margin_right = 24
					war_overview_empty_hostage_portrait = {
						datacontext = "[WarOverviewWindow.GetHostageExchangeWindow]"
						visible = "[Not( HostageExchangeWindow.HasSelectedDemandCharacter )]"

						blockoverride "onclick_event"
						{
							onclick = "[HostageExchangeWindow.OpenDemandHostage]"
						}
						blockoverride "onclick_plus"
						{
							onclick = "[HostageExchangeWindow.OpenDemandHostage]"
						}
						tooltip = "WAR_OVERVIEW_HOSTAGE_PICK_DEMAND"
					}
					portrait_head_small = {
						datacontext = "[WarOverviewWindow.GetHostageExchangeWindow]"
						datacontext = "[HostageExchangeWindow.GetDemandCharacter]"
						visible = "[HostageExchangeWindow.HasSelectedDemandCharacter]"

						blockoverride "opinion_box" {}
						blockoverride "portrait_button_template_onclick" {
							onclick = "[HostageExchangeWindow.OpenDemandHostage]"
						}
						tooltip = "WAR_OVERVIEW_HOSTAGE_PICK_DEMAND"
					}

					text_label_center = {
						text = "WAR_OVERVIEW_HOSTAGE_DEMAND"
					}
				}
			}
		}
	}

	type war_overview_exchange_hostage_window = window {
		name = "window_exchange_hostages"
		datacontext = "[WarOverviewWindow.GetHostageExchangeWindow]"
		visible = "[HostageExchangeWindow.IsOpen]"

		using = Window_Background
		using = Window_Decoration_Spike

		minimumsize = { 800 980 }
		alwaystransparent = no

		position = { 0 -340 }
		parentanchor = center
		widgetanchor = center

		focuspolicy = click
		movable = yes
		allow_outside = yes

		vbox = {
			using = Window_Margins

			header_pattern = {
				layoutpolicy_horizontal = expanding

				icon = {
					size = { 50 50 }
					texture = "gfx/interface/icons/character_interactions/icon_hostage.dds"
				}

				blockoverride "header_text"
				{
					text = "[HostageExchangeWindow.GetHeader]"
				}

				blockoverride "button_close"
				{
					onclick = "[HostageExchangeWindow.Close]"
				}
			}

			war_overview_hostage_exchange_portraits = {}

			vbox = {
				name = "action_information_bar"
				layoutpolicy_horizontal = expanding
				margin_top = 5
				margin_bottom = 10

				background = {
					using = Background_Area
				}

				text_single = {
					name = "select_someone_label"
					text = "[HostageExchangeWindow.GetActionInfo]"
					default_format = "#I"
				}
			}

			war_overview_character_list = {
				datacontext = "[HostageExchangeWindow.GetCharacterList]"
			}

			vbox = {
				name = "send_offer_window"
				margin = { 0 10 }

				button_primary = {
					size = { 400 42 }
					block "button_content" {}
					text = "CONFIRM"
					onclick = "[HostageExchangeWindow.Send]"
					enabled = "[HostageExchangeWindow.CanSend]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
				}
			}

			expand = {}
		}
	}

	type war_overview_character_list = vbox {
		name = "character_list"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		vbox = {
			layoutpolicy_horizontal = expanding
			margin_top = 5
			margin_bottom = 10

			background = {
				using = Background_Area
			}

			text_single = {
				name = "select_someone_label"
				default_format = "#I"
			}
		}

		### List
		vbox_character_list = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "container_implementation"
			{
				vbox = {
					name = "characters_grid"
					datamodel = "[CharacterSelectionList.GetList]"
					visible = "[Not(CharacterSelectionList.IsBuildingList)]"
					layoutpolicy_horizontal = expanding

					item = {
						### Character List Items ###
						war_overview_hostage_list_item = {
							block "item_size" {
								size = { 650 110 }
								layoutpolicy_horizontal = expanding
							}
						}
					}
				}
			}
		}
	}

	type war_overview_hostage_list = vbox {
		name = "character_list"
		spacing = 3

		block "sort_buttons"
		{
			hbox_list_sort_buttons = {
				layoutpolicy_horizontal = expanding

				blockoverride "margins" {
					margin_left = 20
					margin_right = 23
					margin_top = 5
					spacing = 5
				}
			}
		}

		block "special_character" {}

		scrollbox = {

			name = "characters_scroll_area"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			block "scrollbox_properties"
			{
			}

			blockoverride "scrollbox_content" {

				block "container_implementation" {
					vbox = {
						name = "characters_grid"
						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"
						layoutpolicy_horizontal = expanding

						item = {
							widget_character_list_item = {
								block "item_size" {
									size = { 650 110 }
									layoutpolicy_horizontal = expanding
								}
							}
						}
					}
				}
			}

			blockoverride "scrollbox_empty"
			{
				block "scrollbox_empty_visibility"
				{
					layoutpolicy_vertical = expanding
					visible = "[IsDataModelEmpty( CharacterSelectionList.GetList )]"
					text = "NO_CHARACTERS_TO_SELECT"
				}
			}
		}

		block "character_count"
		{
			hbox = {
				layoutpolicy_horizontal = growing
				margin = { 25 5 }
				margin_bottom = 8
				spacing = 5

				block "bottom_bar" {}

				expand = {}

				widget = {
					size = { 20 15 }

					warning_icon = {
						size = { 25 25 }
						visible = "[Not( CharacterSelectionList.IsAllDefault )]"
						tooltip = "CHARACTER_FINDER_FILTER_SET"
						position = { -3 -5 }
					}
				}

				text_single = {
					name = "character_count"
					datacontext = "[CharacterSelectionList]"
					text = "CHARACTER_FINDER_COUNT"
					align = center|nobaseline
					default_format = "#low"
				}
			}
		}
	}

	type war_overview_hostage_exchange_portraits = vbox {
		name = "hostage_exchange_character_portraits"
		datacontext = "[WarOverviewWindow.GetHostageExchangeWindow]"

		margin = { 10 10 }
		layoutpolicy_horizontal = expanding

		background = {
			texture = "gfx/interface/illustrations/event_scenes/study.dds"
			alpha = 0.5
			fittype = centercrop
			using = Mask_Rough_Edges
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			### Left
			margin_left = 30
			portrait_shoulders = {
				name = "left_background_portrait"
				datacontext = "[HostageExchangeWindow.GetActor]"
				visible = "[Character.IsValid]"
			}

			expand = {}

			vbox = {
				layoutpolicy_vertical = expanding
				margin = { 10 10 }

				expand = {}

				portrait_head = {
					datacontext = "[HostageExchangeWindow.GetSecondaryActor]"
				}
			}

			expand = {}

			### Right
			margin_right = 30
			portrait_shoulders = {
				name = "right_background_portrait"
				datacontext = "[HostageExchangeWindow.GetRecipient]"
				visible = "[And( Character.IsValid, Not( ObjectsEqual( HostageExchangeWindow.GetActor, HostageExchangeWindow.GetRecipient ) ) )]"
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10
			allow_outside = yes

			hbox = {
				minimumsize = { 190 0 }
				text_label_center = {
					text = "[HostageExchangeWindow.GetLabelLeft]"
				}
			}

			expand = {}

			### CLEAR BUTTON
			container = {
				button_round = {
					name = "clear_hostage_character"
					alwaystransparent = no
					tooltip = "CLEAR_MARRIED_CHARACTER"
					using = tooltip_below

					block "button_clear"
					{
						enabled = "[HostageExchangeWindow.CanClear]"
						onclick = "[HostageExchangeWindow.OnClear]"
					}

					button_clear = {
						alwaystransparent = yes
						parentanchor = center
					}
				}
			}

			expand = {}

			hbox = {
				minimumsize = { 190 0 }
				text_label_center = {
					text = "[HostageExchangeWindow.GetLabelRight]"
				}
			}
		}
	}

	type war_overview_hostage_list_item = widget {
		datacontext = "[CharacterListItem.GetCharacter]"
		size = { 10 110 }

		block "divider" {
			divider = {
				parentanchor = bottom|hcenter
				size = { 100% 3 }
			}
		}

		block "widget" {}

		hbox = {
			margin = { 0 5 }
			spacing = 15

			portrait_head_small = {}

			button_standard = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				onclick = "[CharacterListItem.OnClick('character')]"
				enabled = "[CharacterListItem.IsSelectable]"
				tooltip = "[CharacterListItem.GetUnselectableReason]"

				framesize = { 252 80 }
				spriteType = Corneredtiled
				spriteborder = { 10 30 }
				texture = "gfx/interface/buttons/button_entry_characterlist.dds"

				block "button" {}

				character_list_arrow = {
					name = "character_list_arrow"
				}

				block "overlay" {
					using = default_character_list_overlay
				}

				block "button_content"
				{
					hbox = {
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							# Name and age
							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_left = 10

								text_single = {
									layoutpolicy_horizontal = expanding
									using = Font_Size_Medium
									autoresize = no
									alwaystransparent = yes

									text = "[Character.GetUINameNoTooltip]"
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									using = character_age_or_death_text
									blockoverride "list_layout" {}

									block "character_relation"
									{
										text_single = {
											name = "character_relation"
											layoutpolicy_horizontal = expanding
											raw_text = "|  [Character.GetRelationToString( GetPlayer )]"
											tooltip = "EXTENDED_RELATIONS_TOOLTIP"
											default_format = "#low"
											autoresize = no
											align = nobaseline
											visible = "[Character.HasRelationTo( GetPlayer )]"
											alwaystransparent = yes
										}

										expand = {
											visible = "[Not(Character.HasRelationTo( GetPlayer ))]"
										}
									}
								}
								block "character_description_extra" {}
							}

							# Dynasty
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_left = 5

								widget = {
									size = { 45 60 }

									coa_house_small = {
										datacontext = "[Character.GetHouse]"
										scale = 0.7
									}
								}

								# Traits

								fixedgridbox = {
									name = "traits_grid"
									datamodel = "[CharacterListItem.GetTraits]"
									flipdirection = yes
									size = { 150 60 }
									addcolumn = 30
									addrow = 45
									maxhorizontalslots = 8
									maxverticalslots = 1

									item = {
										container = {
											visible = "[Trait.IsValid]"

											icon_trait = {
												blockoverride "icon_size"
												{
													size = { 30 30 }
												}

												blockoverride "tooltip_placement"
												{
													using = tooltip_se
												}

												blockoverride "glow_radius"
												{
													glow_radius = 3
												}
											}
										}
									}
								}

								block "bottom_middle_box" {
									expand  = {}
								}

							}
						}

						vbox = {
							minimumsize = { 200 0 }
							datacontext = "[CharacterListItem.GetCharacter]"
							layoutpolicy_vertical = expanding
							margin_top = 5
							margin_right = 5

							# Skills
							hbox = {
								name = "skills_grid"
								layoutpolicy_horizontal = expanding

								expand = {}

								datamodel = "[CharacterListItem.GetSkillItems]"
								margin_right = 5

								item = {
									widget_skill_item_no_icon = {}
								}
							}

							block "extra_skills" {}

							expand = {}

							block "bottom_right_box"
							{
								hbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									# Realm
									widget = {
										size = { 55 58 }
										visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"

										block "claims_visibility" {}

										datacontext = "[CharacterListItem.GetFirstClaim]"

										coa_title_tiny_crown = {
											using = tooltip_ne
											datacontext = "[Claim.GetTitle]"

											highlight_icon = {
												name = "pressed_claim"
												visible = "[And(Claim.IsPressed, Not(Claim.IsImplicit))]"
												texture = "gfx/interface/icons/title_status/icon_claim_pressed.dds"
												size = { 24 24 }
												parentanchor = bottom|right
											}

											highlight_icon = {
												name = "unpressed_claim"
												visible = "[And(Not(Claim.IsPressed), Not(Claim.IsImplicit))]"
												texture = "gfx/interface/icons/title_status/icon_claim_unpressed.dds"
												size = { 24 24 }
												parentanchor = bottom|right
											}

											highlight_icon = {
												name = "implicit_claim"
												visible = "[Claim.IsImplicit]"
												texture = "gfx/interface/icons/title_status/icon_claim_implicit.dds"
												size = { 24 24 }
												parentanchor = bottom|right
											}

											blockoverride "coa_tooltip"
											{
												tooltip = "CHARACTER_LIST_CLAIM_TOOLTIP"
											}
										}

										text_single = {
											align = right
											minimumsize = { 15 0 }
											parentanchor = vcenter|right
											text = "[CharacterListItem.GetTitleItemCount]"
											tooltip = "CHARACTER_LIST_CLAIM_TOOLTIP"
										}
									}

									expand = {}

									# Religion
									vbox = {
										layoutpolicy_vertical = expanding

										margin_bottom = 20

										expand = {}

										hbox = {
											icon = {
												name = "faith_button"
												size = { 35 35 }
												datacontext = "[Character.GetFaith]"
												tooltipwidget = { faith_tooltip = {} }
												texture = "[Faith.GetIcon]"
											}

											widget = {
												datacontext = "[Character.GetCulture]"
												size = { 120 24 }

												tooltipwidget = {
													culture_tooltip = {}
												}
												using = tooltip_se

												hbox = {
													spacing = 3

													icon = {
														name = "culture"
														texture = "gfx/interface/icons/icon_culture.dds"
														size = { 24 24 }
													}

													text_multi = {
														layoutpolicy_horizontal = expanding
														min_width = 95
														max_width = 95
														autoresize = yes
														text = "CULTURE_LISTS_WINDOW"
													}
												}
											}
										}
									}

									hbox = {
										### Will Accept ###
										icon = {
											visible = "[GreaterThan_CFixedPoint( HostageExchangeWindow.GetHostageAcceptanceValue( CharacterListItem.Self ), '(CFixedPoint)0' )]"
											size = { 60 60 }

											texture = "gfx/interface/icons/symbols/icon_check.dds"

											value = "[WarOverviewWindow.GetAnswerScore]"
											tooltip = "[HostageExchangeWindow.GetAcceptanceTooltipBreakdown( CharacterListItem.Self )]"
										}

										### Will Not Accept ###
										icon = {
											visible = "[LessThanOrEqualTo_CFixedPoint( HostageExchangeWindow.GetHostageAcceptanceValue( CharacterListItem.Self ), '(CFixedPoint)0' )]"
											size = { 60 60 }

											texture = "gfx/interface/icons/symbols/icon_cross.dds"

											value = "[WarOverviewWindow.GetAnswerScore]"
											tooltip = "[HostageExchangeWindow.GetAcceptanceTooltipBreakdown( CharacterListItem.Self )]"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

template Background_WarOverview
{
	texture = "gfx/interface/window_war/window_background.dds"
	spriteType = Corneredtiled
	spriteborder_right = 410
	spriteborder_bottom = -10
}

template Background_WarOverview_2
{
	texture = "gfx/interface/window_war/window_background_2.dds"
	spriteType = Corneredtiled
	spriteborder_bottom = -10
}

template Background_WarOverview_Pattern
{
	texture = "gfx/interface/component_masks/patterns/mask_pattern_03.dds"
	spriteType = corneredtiled
	color = { 0.1 0.1 0.12 1 }
	texture_density = 0.6

	modify_texture = {
		texture = "gfx/interface/window_war/window_background.dds"
		blend_mode = alphamultiply
	}

	modify_texture = {
		texture = "gfx/interface/component_masks/mask_clouds.dds"
		blend_mode = alphamultiply
	}
}

template Background_WarOverview_Pattern_2
{
	texture = "gfx/interface/component_masks/patterns/mask_pattern_03.dds"
	spriteType = corneredtiled
	color = { 0.1 0.1 0.12 1 }
	texture_density = 0.6

	modify_texture = {
		texture = "gfx/interface/window_war/window_background_2.dds"
		blend_mode = alphamultiply
	}

	modify_texture = {
		texture = "gfx/interface/component_masks/mask_clouds.dds"
		blend_mode = alphamultiply
	}
}

template Background_WarOverview_Frame
{
	texture = "gfx/interface/window_war/window_frame.dds"
	spriteType = Corneredtiled
	spriteborder_right = 410
	spriteborder_bottom = -10
}

template Background_WarOverview_Frame_2
{
	texture = "gfx/interface/window_war/window_frame_2.dds"
	spriteType = Corneredtiled
	spriteborder_bottom = -10
}

template Background_WarOverview_Ally
{

	background = {
		using = Background_Area_Solid
		margin = { 10 0 }
		margin_top = -145
		margin_bottom = -85
	}

	background = {
		texture = "gfx/portraits/portrait_frame.dds"
		using = Color_Grey
		margin = { 5 -5 }
		margin_top = -150
		margin_bottom = -90

		alpha = 0.4

		spriteType = Corneredtiled
		spriteborder = { 3 3 }
	}
}

template Background_WarOverview_3
{
	background = {
		name = "background"
		texture = "gfx/interface/component_tiles/tile_window_background_no_edge.dds"

		spriteType = Corneredtiled
		spriteborder = { 5 5 }
		color = { 1.77 1.77 1.80 1 }
		texture_density = 2

		margin_top = -120
		alpha = 0.5

		modify_texture = {
			texture = "gfx/interface/component_overlay/overlay_window.dds"
			blend_mode = overlay
		}
	}

	background = {
		texture = "gfx/interface/component_tiles/tile_frame_subwindow_01.dds"

		spriteType = Corneredtiled
		spriteborder = { 10 10 }

		margin = { 5 0}
		margin_top = -114
	}
}

### ANIMATIONS
template Animation_WarOverview_Blood
{
	state = {
		name = "war_overview_show"
		next = b
		delay = 0.5
		alpha = 0
	}

	state = {
		name = b
		duration = 3.5
		alpha = 1
	}

	state = {
		name = "war_overview_hide"
		duration = 0.25
		using = Animation_Curve_Default
		alpha = 0
	}
}
