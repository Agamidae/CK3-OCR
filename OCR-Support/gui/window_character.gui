######################################################
################# CHARACTER WINDOW ###################
######################################################

window = {
	name = "character_window"
	datacontext = "[GetVariableSystem]"
	datacontext = "[CharacterWindow.GetCharacter]"
	movable = no
	allow_outside = yes

	# position = { 100 0 } #TODO

	# using = Window_Size_Sidebar
	using = base_ocr_window

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard

		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"
		# on_start = "[GetScriptedGui('adjacent_rulers').Execute( GuiScope.SetRoot( Character.MakeScope ).End )]"
		on_start = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
		# on_start = "[DefaultOnCoatOfArmsRightClick(CharacterWindow.GetCharacter.GetCurrentLocation.GetCoATitle.GetID)]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard

		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"
		on_finish = "[Click('clear_last_view')]"
	}


	state = {
		name = character_window_refresh
		# on_start = "[DefaultOnCoatOfArmsRightClick(CharacterWindow.GetCharacter.GetCurrentLocation.GetCoATitle.GetID)]"
		# on_start = "[GetScriptedGui('adjacent_rulers').Execute( GuiScope.SetRoot( Character.MakeScope ).End )]"
		on_start = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
		# on_start = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).End )]"
	}

	widget = {
		using = ocr_window
		movable = no

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			using = ocr_margins
			using = ocr

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					using = agot_character_is_not_ruin
					widget = {
						layoutpolicy_horizontal = expanding
						size = { 0 0 }
						alpha = 0

						button = {
							size = { 0 0 }
							shortcut = speed_4
							onclick = "[GetVariableSystem.Set('expand_view', 'family')]"
						}
						# button = {
						# 	size = { 0 0 }
						# 	shortcut = "map_mode_3"
						# 	onclick = "[GetVariableSystem.Clear('expand_view')]"
						# }

						buttons_window_control = {
							parentanchor = top|right

							blockoverride "button_close"
							{
								onclick = "[CharacterWindow.Close]"
								visible = "[Not(GetVariableSystem.Exists('expand_view'))]"
							}

							blockoverride "button_back"
							{
								visible = "[HasViewHistory]"
								onclick = "[OpenFromViewHistory]"
								tooltip = "[GetViewHistoryTooltip]"
								# onclick = "[PdxGuiTriggerAllAnimations('pan_to_previos_ruler')]"

								# state = {
								# 	name = "pan_to_previos_ruler"
								# 	delay = 0.1
								# 	on_start = "[DefaultOnCoatOfArmsRightClick(CharacterWindow.GetCharacter.GetCurrentLocation.GetCoATitle.GetID)]"
								# 	# on_start = "[DefaultOnCharacterClick(CharacterWindow.GetCharacter.GetID)]"
								# 	# on_start = "[DefaultOnCharacterClick(CharacterWindow.GetCharacter.GetID)]"
								# }
							}

							blockoverride "button_me"
							{
								visible = "[Not(Character.IsLocalPlayer)]"
								onclick = "[DefaultOnCharacterClick(GetPlayer.GetID)]"
							}

							blockoverride "button_pin" { }
						}

						button_normal = {
							name = "open_royal_court"
							size = { 70 70 }
							visible = no#"[Character.HasRoyalCourt]"

							position = { -30 -30 }

							onclick = "[CharacterWindow.Close]"
							onclick = "[Character.OpenRoyalCourtView( 'throne' )]"
							datacontext = "[Character.GetCourtGrandeurData]"
							tooltip = OPEN_ROYAL_COURT_TOOLTIP

							icon = {
								texture = "gfx/interface/buttons/button_lifestyles_base.dds"
								size = { 100% 100% }
							}

							button_royal_court = {
								onclick = "[CharacterWindow.Close]"
								onclick = "[Character.OpenRoyalCourtView( 'throne' )]"

								size = { 30 30 }
								parentanchor = center
								position = { 9 10 }

								modify_texture = {
									texture = "gfx/interface/icons/focuses/hud_icon_mask.dds"
									blend_mode = alphamultiply
								}
							}
						}
					}

					############################
					### Character internal info

					#main view
					vbox = {
						# size = { 0 560 }
						layoutpolicy_horizontal = preferred
						scissor = yes

						vbox = {
							# visible = "[Not(GetVariableSystem.Exists('char_details'))]"
							layoutpolicy_horizontal = expanding
							margin = { 10 10 }

							error_button = {
								layoutpolicy_horizontal = expanding
							}

							#name
							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								text_single = {
									visible = "[Character.IsDeadAndValid]"
									raw_text = "Dead."
									margin_right = -3
								}

								button_text = {
									blockoverride "extra" {
										text_single = {
											visible = "[Character.IsImprisoned]"
											raw_text = "In prison,"
										}

										character_name_text = { }
									}
									enabled = "[Character.IsAlive]"
									onclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
									onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
									# shortcut = increase_speed_2
								}

								hbox = {
									spacing = 3
									visible = "[Not(GetVariableSystem.Exists('expand_view'))]"
									text_single = {
										raw_text = "[Character.GetHouse.GetName]."
										visible = "[Character.GetHouse.IsValid]"
									}

									text_single = {
										raw_text = "[Character.GetAge] years,"
										tooltip = "[Character.GetDeathOrBirthDateInfo]"
									}

									text_single = {
										raw_text = "[Character.Custom('character_health')] health."
										visible = "[Not(Character.IsDeadAndValid)]"

										tooltipwidget = {
											health_tooltip = { }
										}
									}

									text_single = {
										raw_text = "Click to interact."
									}
								}


								expand = { }
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not(GetVariableSystem.Exists('expand_view'))]"
								spacing = 5

								# ruler
								vbox = {
									layoutpolicy_horizontal = expanding

									# ruler
									button_text = {
										layoutpolicy_horizontal = expanding
										visible = "[Character.HasLandedTitles]"
										blockoverride "extra" {
											text_single = {
												raw_text = "[Character.Custom('BaseRankName')] of"
											}

											text_single = {
												raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip],"
											}

											text_single = {
												raw_text = "[Character.RealmSize] counties."
											}
											text_single = {
												raw_text = "[AddTextIf(Character.IsIndependentRuler, ' Independent,')]"
											}
											text_single = {
												visible = "[Character.IsAlive]"
												raw_text = "[Character.GetGovernment.GetAdjective]"
											}
											dot = { }
										}
										datacontext = "[Character.GetPrimaryTitle]"
										using = title_click
									}

									# vassal
									realm_name_and_type_vbox_ocr = {
										layoutpolicy_horizontal = expanding
										visible = "[And(Character.HasLandedTitles, Character.IsAlive)]"
										datacontext = "[Character.GetPrimaryTitle]"
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 3
										margin_left = 5

										using = Portrait_Relation_Texts

										expand = { }
									}

									button_text = {
										layoutpolicy_horizontal = expanding
										visible = "[Character.IsAcclaimedKnight]"
										datacontext = "[Character.GetAcclaimedAccolade]"
										onclick = "[OpenGameViewData('accolade_view', Accolade.GetID)]"
									    blockoverride "text" {
											alwaystransparent = yes											raw_text = "[Accolade.GetName], rank [Accolade.GetCurrentRankNumber]. [Accolade.GetPrimaryType.GetName] and [Accolade.GetSecondaryType.GetName]."
									    }
									}

									button = {
										shortcut = map_mode_9
										datacontext = "[Character.GetCurrentLocation]"
										using = prov_pan
									}

									# location
									vbox = {
										layoutpolicy_horizontal = expanding
										visible = "[And(Character.IsAlive, Not(GetVariableSystem.Exists('expand_view')))]"

										hbox = {
											layoutpolicy_horizontal = expanding
											visible = "[And(Character.HasLandedTitles, GreaterThan_int32(Character.RealmSize, '(int32)0'))]"
											spacing = 3

											button_text = {
												# enabled = no
												datacontext = "[Character.GetCapitalLocation]"
												# onclick = "[DefaultOnCoatOfArmsRightClick(Character.GetCapitalLocation.GetCoATitle.GetID)]"
												using = prov_click
												shortcut = mapmode_culture_secondary
												blockoverride "text" {
													raw_text = "Capital, [Character.GetCapitalLocation.GetNameNoTooltip]."
												}
											}

											text_single = {
												datacontext = "[Character.GetCapitalLocation]"
												visible = "[Not(Character.IsLocalPlayer)]"
												raw_text = "AnyProvinceDistanceDirection"
											}

											text_single = {
												raw_text = "Shift S."
											}

											expand = { }
										}

										button_text = {
											layoutpolicy_horizontal = expanding
											# visible = "[Not(Character.HasLandedTitles)]"
											visible = "[Or(EqualTo_int32(Character.RealmSize, '(int32)0'), Character.IsTraveling)]"
											# visible = "[Or(EqualTo_int32(Character.RealmSize, '(int32)0'), Not(ObjectsEqual(Character.GetCurrentLocation, Character.GetCapitalLocation)))]"
											datacontext = "[Character.GetCurrentLocation]"
											using = prov_click
											using = prov_pan
											# onclick = "[OpenGameViewData('holding_view', IntToUnsigned(Character.GetCurrentLocation.GetID))]"
											enabled = "[GetScriptedGui('is_land_province').IsShown( GuiScope.SetRoot( Character.GetCurrentLocation.MakeScope ).End )]"
											# onclick = "[DefaultOnCoatOfArmsRightClick(Character.GetCurrentLocation.GetCoATitle.GetID)]"

											button = {
												visible = "[And(GetScriptedGui('is_land_province').IsShown( GuiScope.SetRoot( Character.GetCurrentLocation.MakeScope ).End ), Not(Character.IsTraveling))]"
												shortcut = mapmode_culture_secondary
												using = prov_click
												using = prov_pan
												datacontext = "[Character.GetCurrentLocation]"
											}

											blockoverride "text" {
												alwaystransparent = yes
												raw_text = "[Character.GetLocationDesc],"
											}
											blockoverride "extra" {

												text_single = {
													datacontext = "[Character.GetCurrentLocation]"
													visible = "[Not(ObjectsEqual(Character.GetCurrentLocation, GetPlayer.GetCapitalLocation))]"
													raw_text = "AnyProvinceDistanceDirection"
												}

												text_single = {
													visible = "[And(GetScriptedGui('is_land_province').IsShown( GuiScope.SetRoot( Character.GetCurrentLocation.MakeScope ).End ), Not(Character.IsTraveling))]"
													raw_text = ", Shift S."
												}
											}
										}
									}

									button_text = {
										layoutpolicy_horizontal = expanding
										visible = "[Character.HasRoyalCourt]"

										onclick = "[CharacterWindow.Close]"
										onclick = "[Character.OpenRoyalCourtView( 'throne' )]"
										shortcut = map_mode_5
										datacontext = "[Character.GetCourtGrandeurData]"
									    blockoverride "text" {
									        raw_text = "Open [Character.GetHerHis] royal court, Control Q."
									    }
									}
								}

								# status
								vbox = {
									layoutpolicy_horizontal = expanding

									# warnings

									button_text = {
										layoutpolicy_horizontal = expanding
										datacontext = "[CharacterWindow.GetCharacter.GetDiarchy]"
										datacontext = "[Diarchy.GetDiarch]"
										visible = "[Diarchy.IsValid]"
										onclick = "[ToggleGameViewData( 'diarchy', CharacterWindow.GetCharacter.GetID )]"
										blockoverride "text" {
											margin_left = 5
											alwaystransparent = yes
											raw_text = "In [Diarchy.GetName] with"
										}
										blockoverride "extra" {
											text_single = {
												visible = "[Character.IsRuler]"
												raw_text = "[Character.GetTitleAsNameNoTooltip]"
											}
											text_single = {
												raw_text = "[Character.GetFirstNameNoTooltip]."
											}
										}
									}

									hbox = {
										visible = "[Character.IsValid]"
										spacing = 3
										layoutpolicy_horizontal = expanding
										margin_left = 5


										button_text = {
											blockoverride "text" {
												raw_text = "Unmarried."
											}
											blockoverride "extra" {
												text_single = {
													raw_text = "find Spouse."
													visible = "[Character.IsPlayerInteractionValid('marry_off_interaction')]"
												}
											}
											visible = "[Not(Character.GetPrimarySpouseOrBetrothed.IsValid)]"
											onclick = "[Character.OpenPlayerInteraction('marry_off_interaction')]"
											onclick = "[CharacterWindow.Close]"
											enabled = "[Character.IsPlayerInteractionValid('marry_off_interaction')]"
										}

										hbox = {
											spacing = 3

											button_text = {
												datacontext = "[CharacterWindow.GetCharacter.GetPrimarySpouse]"
												visible = "[Character.GetPrimarySpouse.IsValid]"
												using = char_click

												blockoverride "text" {
													raw_text = "Married."
												}
											}

											flowcontainer = {
												ignoreinvisible = yes
												visible = "[GreaterThan_CFixedPoint( Character.MakeScope.ScriptValue('num_of_living_children'), '(CFixedPoint)0' )]"
												spacing = 3

												button_text = {
													onclick = "[GetVariableSystem.Set('expand_view', 'family')]"
													blockoverride "text" {
														raw_text = "[Character.MakeScope.ScriptValue('num_of_living_children')] child[AddTextIf(GreaterThan_CFixedPoint(Character.MakeScope.ScriptValue('num_of_living_children'), '(CFixedPoint)1'), 'ren')],"
													}
												}


												flowcontainer = {
													ignoreinvisible = yes
													spacing = 3

													visible = "[GreaterThan_CFixedPoint(Character.MakeScope.ScriptValue('unmarried_children'), '(CFixedPoint)0')]"
													text_single = {
														visible = "[LessThan_CFixedPoint(Character.MakeScope.ScriptValue('unmarried_children'), Character.MakeScope.ScriptValue('num_of_living_children'))]"
														raw_text = "[Character.MakeScope.ScriptValue('unmarried_children')] unmarried."
													}

													text_single = {
														visible = "[EqualTo_CFixedPoint(Character.MakeScope.ScriptValue('unmarried_children'), Character.MakeScope.ScriptValue('num_of_living_children'))]"
														raw_text = "unmarried."
													}
												}
											}


											text_single = {
												visible = "[IsDataModelEmpty(CharacterWindow.GetChildren)]"
												raw_text = "No children."
											}
										}


										text_single = {
											raw_text = "No heir of [Character.GetHerHis] dynasty!"
											visible = "[And(Not(CharacterWindow.GetCharacter.GetPlayerHeir.IsValid), Character.HasLandedTitles)]"
										}

										text_single = {
											raw_text = "You are [Character.GetHerHis] heir!"
											visible = "[ObjectsEqual(Character.GetPrimaryTitle.GetHeir.Self, GetPlayer )]"
										}

										expand = { }
									}


									# imprisoned
									hbox = {
										layoutpolicy_horizontal = expanding
										visible = "[And(Character.IsImprisoned, Not(GetVariableSystem.Exists('expand_view')))]"

										char_name = {
											blockoverride "pre" {
												raw_text = "Imprisoned by"
											}
											datacontext = "[CharacterWindow.GetCharacter.GetImprisonedBy]"
										}
										expand = { }
									}

									# hostage
									hbox = {
										layoutpolicy_horizontal = expanding
										datacontext = "[CharacterWindow.GetCharacter.GetHomeCourt]"
										visible = "[And(Character.IsValid, Isnt('expand_view'))]"

										char_name = {
											blockoverride "pre" {
												raw_text = "[home_court|E]" #TODO
											}
										}
										expand = { }
									}

									## dead
									hbox = {
										layoutpolicy_horizontal = expanding
										visible = "[Character.IsDeadAndValid]"

										text_single = {
											raw_text = "CHARACTER_DEAD_TOOLTIP"
											max_width = 600
											fontsize_min = 14
										}

										dot = { }
										expand = { }
									}

									#diplo
									hbox = {
										layoutpolicy_horizontal = expanding
										visible = "[And(Character.HasLandedTitles, Character.IsAlive)]"

										button = {
											onclick = "[GetVariableSystem.Set('expand_view', 'diplomacy')]"
											using = expanded_view
											shortcut = mapmode_house_secondary

											flowcontainer = {
												margin = { 3 1 }
												resizeparent = yes
												ignoreinvisible = yes
												spacing = 3

												text_single = {
													raw_text = "At war"
													visible = "[EqualTo_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_wars'), '(CFixedPoint)1')]"
												}

												text_single = {
													raw_text = "In [GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_wars')] wars,"
													visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_wars'), '(CFixedPoint)1')]"
												}

												text_single = {
													visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_raids'), '(CFixedPoint)0')]"
													raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_raids')] raids,"
												}

												text_single = {
													visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_allies'), '(CFixedPoint)0')]"
													raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_allies')] allies,"
												}

												text_single = {
													visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_truces'), '(CFixedPoint)0')]"
													raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_of_truces')] truces,"
												}

												text_single = {
													raw_text = "Involved,"
													visible = "[GetScriptedGui('is_involved').IsShown( GuiScope.SetRoot( Character.MakeScope ).End )]"
												}

												text_single = {
													raw_text = "Interloper,"
													visible = "[GetScriptedGui('is_interloper').IsShown( GuiScope.SetRoot( Character.MakeScope ).End )]"
												}

												text_single = {
													raw_text = "Shift D"
												}
												visible = "[DataModelHasItems(CharacterWindow.GetDiplomacyItems)]"
												dot_l = { }
											}
										}

										expand = { }
									}

									# opinion
									hbox = {
										margin_left = 5
										name = "AI_personality"
										layoutpolicy_horizontal = expanding
										visible = "[And(Character.IsAlive, Not(Character.IsLocalPlayer))]"
										spacing = 3

										text_single = {
											raw_text = "Opinion [Character.GetOpinionOf(GetPlayer)]."
											tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
										}

										text_single = {
											raw_text = "Yours of [Character.GetHerHim] [GetPlayer.GetOpinionOf(Character.Self)]."
											tooltip = "[GetPlayer.GetOpinionBreakdownText(Character.Self)]"
										}
										expand = { }
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										margin_left = 5
										spacing = 3
										visible = "[Character.IsAlive]"

										text_single = {
											raw_text = "Incapable,"
											visible = "[Character.IsIncapable]"
											tooltip = "trait_incapable"
										}

										text_single = {
											raw_text = "Hostage,"
											tooltip = "[Character.GetHostageTooltip]"
											visible = "[Character.IsHostage]"
										}

										text_single = {
											visible = "[Character.CanBePunished]"
											raw_text = "Can be punished,"
											tooltip = "[Character.PunishmentTooltip]"
										}

										text_single = {
											raw_text = "You have a hook on [Character.GetHerHim]"
											visible = "[Character.PlayerHasHooksOrHookableSecrets]"
										}

										text_single = {
											raw_text = "Has an inspiration"
											visible = "[Character.HasInspiration]"
											tooltip = "CHARACTER_HAS_INSPIRATION_TOOLTIP"
										}

										text_single = {
											raw_text = "Completed an inspiration"
											visible = "[And( Character.HasCompletedAnInspiration, Not( Character.HasInspiration ) )]"
											tooltip = "CHARACTER_HAS_COMPLETED_AN_INSPIRATION_TOOLTIP"
										}

										expand = { }
									}

									vassal_stance_text = {
										margin_left = 5
										layoutpolicy_horizontal = expanding
									}
								}


								vbox = {
									layoutpolicy_horizontal = expanding

									button_text = {
										layoutpolicy_horizontal = expanding
										using = expanded_view
										blockoverride "text" {
											raw_text = "Realm, hotkey 1."
										}
										visible = "[Or(DataModelHasItems(CharacterWindow.GetTitles), DataModelHasItems(CharacterWindow.GetClaims))]"
										shortcut = speed_1
										onclick = "[GetVariableSystem.Set('expand_view', 'counties')]"
										onclick = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
									}

									# titles
									counties_tabs = {
										blockoverride "hotkeys" { }
									}

									button_text = {
										layoutpolicy_horizontal = expanding
										onclick = "[GetVariableSystem.Set('expand_view', 'resources')]"
										visible = "[Not(Character.IsDeadAndValid)]"
										blockoverride "pre" {
											text_single = {
												raw_text = "Resources, hotkey 2."
											}
										}
									}

									# resources
									button_text = {
										layoutpolicy_horizontal = expanding
										onclick = "[GetVariableSystem.Set('expand_view', 'resources')]"
										shortcut = speed_2
										visible = "[Not(Character.IsDeadAndValid)]"
										blockoverride "extra" {
											text_single = {
												raw_text = "Soldiers, [Character.GetMilitaryStrengthText]."
												tooltip = "[CharacterWindow.GetMilitaryStrengthTooltip]"
												visible = "[Character.HasLandedTitles]"
											}

											text_single = {
												raw_text = "Gold, [Character.GetGold|0],"
												# visible = "[Not(EqualTo_CFixedPoint(Character.GetGold, '(CFixedPoint)0'))]"
											}

											text_single = {
												visible = "[Not(EqualTo_CFixedPoint(Character.GetBalance, '(CFixedPoint)0'))]"
												raw_text = "[Character.GetBalance|1=] a month."
											}
										}
									}

									button_text = {
										layoutpolicy_horizontal = expanding
										onclick = "[GetVariableSystem.Set('expand_view', 'resources')]"
										visible = "[Not(Character.IsDeadAndValid)]"
										blockoverride "pre" {
											spacing = 3
											text_single = {
												raw_text = "Prestige, [Character.GetPrestige|0],"
											}

											text_single = {
												raw_text = "Piety, [Character.GetPiety|0],"
											}

											text_single = {
												visible = "[GreaterThan_CFixedPoint(Character.GetDread, '(CFixedPoint)0')]"
												raw_text = "Dread [Character.GetDread|0]."
												tooltip = "[Character.GetDreadBreakdown]"
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										button_text = {
											layoutpolicy_horizontal = expanding
											visible = "[Or(Character.HasArtifacts, Character.HasAnyArtifactClaims)]"
											onclick = "[ToggleGameViewData( 'inventory', Character.GetID )]"
											onclick = "[CloseGameView('character')]"
											shortcut = mapmode_kingdoms_secondary

											blockoverride "extra" {
												spacing = 3
												margin_left = 0
												text_single = {
													raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_artifacts')] Artifacts,"
													visible = "[Character.HasArtifacts]"
												}

												text_single = {
													raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('num_artifacts_claims')] Artifact claims,"
													visible = "[Character.HasAnyArtifactClaims]"
												}

												text_single = {
													raw_text = "Open Inventory, Hotkey i."
												}
											}
										}

										button_text = {
											layoutpolicy_horizontal = expanding
											visible = "[Character.HasKillsKnownTo( GetPlayer )]"
											blockoverride "text" {
												raw_text = "View [GetDataModelSize(Character.GetKills)] known kill[AddTextIf(GreaterThan_int32(GetDataModelSize(Character.GetKills), '(int32)1'), 's')]."
											}
											onclick = "[ToggleGameViewData( 'kill_list', Character.GetID  )]"
											datacontext = "[Character]"
										}

										expand = { }
									}
								}

								# geography
								vbox = {
									layoutpolicy_horizontal = expanding

									# adjacent
									button_text = {
										layoutpolicy_horizontal = expanding
										blockoverride "text" {
											raw_text = "[Character.MakeScope.ScriptValue('neighbours_sval')] adjacent rulers, Control A."
										}
										visible = "[And( GreaterThan_int32(Character.RealmSize, '(int32)0'), Character.IsAlive )]"
										onclick = "[GetVariableSystem.Set('expand_view', 'neighbours')]"
										onclick = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
										using = expanded_view
										shortcut = map_mode_6
									}
								}

								personality_vbox = {
									blockoverride "slots" {
										maxverticalslots = 5
									}
									blockoverride "modifier slots" {
										maxverticalslots = 3
									}
									blockoverride "hide" {
										visible = no
									}
									blockoverride "hotkeys" { }
								}

								#TODO ages and opinions
								# family
								vbox = {
									layoutpolicy_horizontal = expanding
									# house
									button_text = {
										layoutpolicy_horizontal = expanding
										datacontext = "[Character.GetHouse]"
										onclick = "[OpenGameViewData('dynasty_house_view', Character.GetHouse.GetID))]"
										enabled = "[DynastyHouse.IsValid]"
										shortcut = "army_create_new"

										blockoverride "extra" {
											spacing = 3
											margin_left = 0
											text_single = {
												visible = "[DynastyHouse.IsValid]"
												raw_text = "House [DynastyHouse.GetBaseNameNoTooltip],"
											}

											text_single = {
												visible = "[Not(DynastyHouse.IsValid)]"
												raw_text = "[lowborn|E]."
											}

											text_single = {
												visible = "[Not(Character.IsLegitimateMemberOfHouse)]"
												raw_text = "Bastard."
												tooltip = "CV_TT_BASTARD"
											}

											text_single = {
												visible = "[LessThan_int32(Character.GetDynastyHeadRelationFrame('(bool)no'), '(int32)9')]"
												tooltip = "[Character.GetDynastyHeadTooltip]"
												raw_text = "Head of House."
											}

											text_single = {
												raw_text = "Hotkey H."
												visible = "[DynastyHouse.IsValid]"
											}

											text_single = {
												raw_text = "[GetDynastyPrestigeLevelName(Character.GetDynasty.GetPrestigeLevel)] dynasty."
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										close_relations_vbox = { }

										#liege
										vbox = {
											layoutpolicy_horizontal = expanding
											datacontext = "[CharacterWindow.GetCharacter.GetLiegeEvenWhenDead]"
											visible = "[CharacterWindow.HasLiegeEvenWhenDead]"

											hbox = {
												#TODO
												# vanilla uses this for the portrait
												# visible = "[And( Character.GetLiege.IsValid, And( Character.IsAlive, Not(Character.IsLocalPlayer ) ) )]"
												layoutpolicy_horizontal = expanding

												char_name = {
													shortcut = "zoom_out"
													blockoverride "pre" {
														text_single = {
															raw_text = "Non de-jure"
															datacontext = "[CharacterWindow.GetCharacter]"
															name = "non_dejure_liege"
															visible = "[And(Not( Character.GetVassalContract.IsRightfulLiege ), Not(Character.IsHostage))]"
														}
														text_single = {
															raw_text = "[liege|E],"
															datacontext = "[CharacterWindow.GetCharacter]"
															visible = "[Not( Character.IsHostage )]"
															alwaystransparent = yes
														}
														text_single = {
															datacontext = "[CharacterWindow.GetCharacter]"
															visible = "[Character.IsHostage]"
															raw_text = "WARDEN_OF" #TODO
															alwaystransparent = yes
														}
													}
													blockoverride "extra" {
														text_single = {
															raw_text = "[Character.GetAge]"
														}
														opinion_text = { }

														dot = { }
													}
												}

												expand = { }
											}

											#liege opinion
											hbox = {
												layoutpolicy_horizontal = expanding
												spacing = 3
												datacontext = "[CharacterWindow.GetCharacter]"
												visible = "[And( Character.HasLiege, And( Character.IsAlive, Not(Character.IsLocalPlayer ) ) )]"

												text_single = {
													visible = "[Character.ShouldShowDreadEffectIconFor( Character.GetLiege )]"
													raw_text = "[CharacterWindow.GetCharacter.GetSheHe|U] is intimidated."
													tooltip = "[Character.GetDreadEffectTooltipFor( Character.GetLiege )]"
												}

												expand = { }
											}
										}

										#host
										vbox = {
											layoutpolicy_horizontal = expanding
											datacontext = "[CharacterWindow.GetCourtOwner]"
											visible = "[And( Not( CharacterWindow.HasLiegeEvenWhenDead ), And( CharacterWindow.GetCourtOwner.IsValid, Not( CharacterWindow.GetCharacter.IsRuler ) ) )]"

											hbox = {
												layoutpolicy_horizontal = expanding
												spacing = 3

												char_name = {
													shortcut = "zoom_out"
													blockoverride "pre" {
														spacing = 3
														text_single = {
															raw_text = "Host,"
														}
													}
												}

												text_single = {
													raw_text = ", Page Up."
												}
												expand = { }
											}

											#liege opinion
											hbox = {
												layoutpolicy_horizontal = expanding
												spacing = 3
												datacontext = "[CharacterWindow.GetCharacter]"
												visible = "[And(Character.IsAlive, Not(Character.IsLocalPlayer))]"

												text_single = {
													raw_text = "[Character.GetHerHis|U] opinion of host: [Character.GetOpinionOf( CharacterWindow.GetCourtOwner )]."
													tooltip = "[Character.GetOpinionBreakdownText( CharacterWindow.GetCourtOwner )]"
												}

												text_single = {
													visible = "[Character.ShouldShowDreadEffectIconFor( CharacterWindow.GetCourtOwner )]"
													raw_text = "[CharacterWindow.GetCharacter.GetSheHe|U] is intimidated."
													tooltip = "[Character.GetDreadEffectTooltipFor( CharacterWindow.GetCourtOwner )]"
												}

												expand = { }
											}
										}

										button_text = {
											layoutpolicy_horizontal = expanding
											onclick = "[GetVariableSystem.Set('expand_view', 'family')]"

											blockoverride "pre" {
												spacing = 3

												text_single = {
													visible = "[DataModelHasItems(CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ))]"
													raw_text = "[GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ))] lover[AddTextIf(GreaterThan_int32(GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) )), '(int32)1'), 's')],"
												}

												text_single = {
													visible = "[DataModelHasItems(CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) ))]"
													raw_text = "[GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) ))] rival[AddTextIf(GreaterThan_int32(GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) )), '(int32)1'), 's')]."
												}
											}
										}

									}
								}
							}

							# artifacts and kill list
							expand = { }
						}

						button_text = {
							visible = no
							layoutpolicy_horizontal = expanding
							onclick = "[GetVariableSystem.Toggle('char_details')]"
							shortcut = map_mode_10
							blockoverride "text" {
								raw_text = "Use detailed view, Shift W."
							}
						}
					}

					######################################################

					# expanded counties, etc

					vbox = {
						margin_left = 15
						layoutpolicy_horizontal = expanding
						visible = "[GetVariableSystem.Exists('expand_view')]"

						button = {
							onclick = "[GetVariableSystem.Clear('expand_view')]"
							onclick = "[GetScriptedGui('close_expanded_view').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
							shortcut = "close_window"
							shortcut = "map_mode_1"
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								raw_text = "Showing"
							}

							space = { }

							text_single = {
								margin_right = 3
								raw_text = "[Character.MakeScope.ScriptValue('neighbours_sval')]"
								visible = "[GetVariableSystem.HasValue('expand_view', 'neighbours')]"
							}

							text_single = {
								raw_text = "counties"
								visible = "[And(GetVariableSystem.HasValue('expand_view', 'counties'), Not(GetVariableSystem.Exists('counties_tabs')))]"
							}

							text_single = {
								raw_text = "[GetVariableSystem.Get('counties_tabs')]."
								visible = "[GetVariableSystem.HasValue('expand_view', 'counties')]"
							}

							# text_single = {
							# 	layoutpolicy_horizontal = expanding
							# 	raw_text = "[GetDataModelSize(CharacterWindow.GetTitles)]."
							# 	visible = "[GetVariableSystem.HasValue('counties_tabs', 'titles')]"
							# }
							###

							text_single = {
								raw_text = "[GetVariableSystem.Get('expand_view')]."
								visible = "[And(Not(GetVariableSystem.HasValue('expand_view', 'family')), Not(GetVariableSystem.HasValue('expand_view', 'counties')))]"
							}

							text_single = {
								raw_text = "family"
								visible = "[And(GetVariableSystem.HasValue('expand_view', 'family'), Not(GetVariableSystem.Exists('char_tab')))]"
							}

							text_single = {
								raw_text = "[GetVariableSystem.Get('char_tab')]."
								visible = "[GetVariableSystem.HasValue('expand_view', 'family')]"
							}
							text_single = {
								raw_text = "[GetDataModelSize(CharacterWindow.GetDiplomacyItems)] items."
								visible = "[GetVariableSystem.HasValue('expand_view', 'diplomacy')]"
							}

							text_single = {
								raw_text = "[GetVariableSystem.Get('personality_view')]."
								visible = "[GetVariableSystem.Exists('personality_view')]"
							}

							# text_single = {
							# 	raw_text = ", close with Escape or E."
							# }

							hbox = {
								visible = "[GetVariableSystem.HasValue('expand_view', 'counties')]"
								button_text = {
									blockoverride "text" {
										raw_text = "Reload list with Shift E."
									}
									shortcut = map_mode_11
									onclick = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
									visible = "[Or(GetVariableSystem.HasValue('counties_tabs', 'holdings'), Not(GetVariableSystem.Exists('counties_tabs')))]"
								}
							}
							button_text = {
								shortcut = mapmode_house_secondary
								blockoverride "text" {
									raw_text = "[Select_CString(GetVariableSystem.Exists('show_diplo_descriptions'), 'Hide', 'Show')] details, Shift D."
								}
								onclick = "[GetVariableSystem.Toggle('show_diplo_descriptions')]"
								visible = "[GetVariableSystem.HasValue('expand_view', 'diplomacy')]"
							}

							expand = { }
						}

						counties_tabs = {
							visible = "[GetVariableSystem.HasValue('expand_view', 'counties')]"
							blockoverride "hotkey" {
							}
						}
					}

					scrollbox = {
						visible = "[And(GetVariableSystem.Exists('expand_view'), Not(GetVariableSystem.HasValue('expand_view', 'family')))]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content" {

							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								visible = "[GetVariableSystem.HasValue('expand_view', 'personality')]"

								personality_vbox = {
									blockoverride "details" {
										visible = no
									}
								}

								expand = { }
							}

							flowcontainer = {
								direction = vertical
								ignoreinvisible = yes
								layoutpolicy_horizontal = expanding

								flowcontainer = {
									ignoreinvisible = yes
									visible = "[GetVariableSystem.HasValue('expand_view', 'counties')]"

									direction = vertical

									#counties
									flowcontainer = {
										ignoreinvisible = yes
										direction = vertical
										visible = "[Not(GetVariableSystem.Exists('counties_tabs'))]"

										#counties
										flowcontainer = {
											datamodel = "[Character.MakeScope.GetList('counties')]"
											direction = vertical
											layoutpolicy_horizontal = expanding

											text_single = {
												raw_text = "[GetDataModelSize(Character.MakeScope.GetList('counties'))] personal counties:"
											}

											item = {
												button = {
													onclick = "[OpenGameViewData('holding_view', Scope.GetLandedTitle.GetProvince.Self)]"
													onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetLandedTitle.GetID)]"

													flowcontainer = {
														resizeparent = yes
														ignoreinvisible = yes
														spacing = 3
														text_single = {
															raw_text = "[Scope.GetLandedTitle.GetBaseNameNoTierNoTooltip],"
														}
														text_single = {
															raw_text = "tax: [Scope.GetLandedTitle.MakeScope.Var('total_tax').GetValue|1],"
														}
														text_single = {
															raw_text = "levies: [Scope.GetLandedTitle.MakeScope.Var('total_levies').GetValue|0]."
														}
														text_single = {
															raw_text = "Control: [Scope.GetLandedTitle.GetCountyData.GetControl]."
														}
														text_single = {
															raw_text = "[Scope.GetLandedTitle.GetCountyData.GetCulture.GetName],"
														}
														text_single = {
															raw_text = "[Scope.GetLandedTitle.GetCountyData.GetFaith.GetName]."
														}
													}
												}
											}
										}

										widget = {
											size = { 0 5 }
										}

										text_single = {
											raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('vassal_counties')] vassal counties."
										}

										divider_light = {
											size = { 500 3 }
										}
										#counties
										flowcontainer = {
											datamodel = "[Character.MakeScope.GetList('vassal_counties')]"
											direction = vertical
											layoutpolicy_horizontal = expanding
											item = {
												button = {
													onclick = "[OpenGameViewData('holding_view', Scope.GetLandedTitle.GetProvince.Self)]"
													onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetLandedTitle.GetID)]"

													flowcontainer = {
														resizeparent = yes
														ignoreinvisible = yes
														spacing = 3
														text_single = {
															raw_text = "[Scope.GetLandedTitle.GetBaseNameNoTierNoTooltip],"
														}
														text_single = {
															raw_text = "tax: [Scope.GetLandedTitle.MakeScope.Var('total_tax').GetValue|1],"
														}
														text_single = {
															raw_text = "levies: [Scope.GetLandedTitle.MakeScope.Var('total_levies').GetValue|0]."
														}
														char_name = {
															datacontext = "[Scope.GetLandedTitle.GetHolder]"
															blockoverride "pre" {
																text_single = {
																	margin_right = 3
																	raw_text = "Holder,"
																}
															}
														}
													}
												}
											}
										}
									}
									#holdings
									flowcontainer = {
										visible = "[GetVariableSystem.HasValue('counties_tabs', 'holdings')]"
										direction = vertical
										layoutpolicy_horizontal = expanding
										ignoreinvisible = yes

										# button = {
										# 	size = { 0 0 }
										# 	onclick = "[GetVariableSystem.Clear('expand_view')]"
										# 	onclick = "[GetScriptedGui('close_expanded_view').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
										# 	shortcut = "close_window"
										# }

										flowcontainer = {
											spacing = 3
											ignoreinvisible = yes
											text_single = {
												raw_text = "[Character.GetDomainSize] personal holdings. Limit: [Character.GetDomainLimit]. Total: [GuiScope.SetRoot(Character.MakeScope).ScriptValue('realm_holdings')]"
												# visible = "[GetScriptedGui('realm_holdings').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
											}

											# text_single = {
											# 	raw_text = "Sorted by income."
											# }
										}

										char_expanded_list = {
											datamodel = "[Character.MakeScope.GetList('holdings')]"
										}

										widget = {
											size = { 0 5 }
										}
										text_single = {
											raw_text = "[GuiScope.SetRoot(Character.MakeScope).ScriptValue('vassal_holdings')] vassal holdings."
										}
										char_expanded_list = {
											datamodel = "[Character.MakeScope.GetList('realm_holdings')]"
										}
									}
									#titles
									flowcontainer = {
										datacontext = "[CharacterWindow.GetCharacter]"
										direction = vertical
										visible = "[GetVariableSystem.HasValue('counties_tabs', 'titles')]"

										datamodel = "[CharacterWindow.GetTitles]"

										item = {
											button = {
												onclick = "[DefaultOnCoatOfArmsClick(TitleItem.GetTitle.GetID)]"
												onclick = "[DefaultOnCoatOfArmsRightClick(TitleItem.GetTitle.GetPreferredCapital.GetID)]"
												onrightclick = "[DefaultOnCoatOfArmsRightClick(TitleItem.GetTitle.GetPreferredCapital.GetID)]"
												onrightclick =  "[OpenGameViewData('holding_view', TitleItem.GetTitle.GetPreferredCapital.GetProvince.Self)]"
												button_ignore = none

												flowcontainer = {
													resizeparent = yes
													datacontext = "[TitleItem.GetTitle]"
													spacing = 3

													text_single = {
														raw_text = "[Title.GetNameNoTooltip]."
													}

													# text_single = {
													# 	visible = "[Not(ObjectsEqual(Title.Self, Character.GetPrimaryTitle))]"
													# 	datacontext = "[Title.GetPreferredCapital.GetProvince]"
													# 	raw_text = "AnyProvinceDistanceDirection"
													# }
												}
											}
										}
									}
									# claims
									flowcontainer = {
										visible = "[GetVariableSystem.HasValue('counties_tabs', 'claims')]"
										datacontext = "[CharacterWindow.GetCharacter]"
										datamodel = "[CharacterWindow.GetClaims]"
										direction = vertical
										spacing = 3

										item = {
											button = {
												onclick = "[DefaultOnCoatOfArmsClick(Claim.GetTitle.GetID)]"
												onclick = "[DefaultOnCoatOfArmsRightClick(Claim.GetTitle.GetID)]"
												flowcontainer = {
													resizeparent = yes

													using = tooltip_ne
													# tooltip = "[Claim.GetTooltip]"

													flowcontainer = {
														direction = vertical
														ignoreinvisible = yes

														flowcontainer = {
															ignoreinvisible = yes
															spacing = 3

															text_single = {
																raw_text = "[Claim.GetTitle.GetNameNoTooltip]."
															}

															text_single = {
																name = "pressed_claim"
																visible = "[And(Claim.IsPressed, Not(Claim.IsImplicit))]"
																raw_text = "[pressed_claim|E]."
															}

															text_single = {
																name = "unpressed_claim"
																visible = "[And(Not(Claim.IsPressed), Not(Claim.IsImplicit))]"
																raw_text = "[unpressed_claim|E]."
															}

															text_single = {
																name = "implicit_claim"
																visible = "[Claim.IsImplicit]"
																raw_text = "[implicit_claim|E]."
															}
														}


														flowcontainer = {
															ignoreinvisible = yes

															realm_name = {
																datacontext = "[Claim.GetTitle.GetHolder]"
																visible = "[Claim.GetTitle.GetHolder.IsValid]"
																blockoverride "pre" {
																	text_single = {
																		margin_right = 3
																		raw_text = "Held by"
																	}
																}
																blockoverride "extra" {
																	text_single = {
																		raw_text = "[Character.GetRelationToString( CharacterWindow.GetCharacter )]."
																	}
																}
															}

															text_single = {
																visible = "[Not(Claim.GetTitle.GetHolder.IsValid)]"
																raw_text = "[Localize('CLAIM_TITLE_NOT_CREATED')]."
															}
														}
													}
												}
											}
										}
									}
								}

								flowcontainer = {
									ignoreinvisible = yes
									direction = vertical
									visible = "[GetVariableSystem.HasValue('expand_view', 'resources')]"
									spacing = 5

									flowcontainer = {
										ignoreinvisible = yes
										direction = vertical
										visible = "[Character.HasLandedTitles]"

										text_single = {
											raw_text = "Soldiers, [Character.GetMilitaryStrengthText]."
											tooltip = "[CharacterWindow.GetMilitaryStrengthTooltip]"
										}

										button_text = {
											blockoverride "text" {
												raw_text = "Knights, [Character.MakeScope.ScriptValue('knights_sval')] out of [Character.MakeScope.ScriptValue('knights_max_sval')], see tooltip."
											}
											onmousehierarchyenter = "[GetScriptedGui('knights_list').Execute( GuiScope.SetRoot( Character.MakeScope ).End )]"
											tooltipwidget = {
												container = {
													alwaystransparent = no
													using = DefaultTooltipBackground

													flowcontainer = {
														ignoreinvisible = yes
														direction = vertical

														margin = { 15 10 }

														datamodel = "[Character.MakeScope.GetList('my_knights'))]"

														text_single = {
															raw_text = "Ordered by prowess."
														}

														item = {
															char_name = {
																datacontext = "[Scope.GetCharacter]"
																blockoverride "pre" {
																	text_single = {
																		margin_right = 3
																		raw_text = "[Character.GetProwess],"
																	}
																}
															}
														}
													}
												}
											}
										}
									}

									flowcontainer = {
										ignoreinvisible = yes

										text_single = {
											raw_text = "Gold, [Character.GetGold|0],"
										}

										text_single = {
											visible = "[Not(EqualTo_CFixedPoint(Character.GetBalance, '(CFixedPoint)0'))]"
											raw_text = "[Character.GetBalance|1=] a month."
										}
									}

									divider_light = {
										size = { 100% 3 }
									}

									text_single = {
										raw_text = "[Character.GetPrestigeTooltipWithBalance]"
									}

									divider_light = {
										size = { 100% 3 }
									}

									text_single = {
										raw_text = "[Character.GetPietyTooltipWithBalance]"
									}

									divider_light = {
										size = { 100% 3 }
									}

									flowcontainer = {
										ignoreinvisible = yes
										direction = vertical
										visible = "[Character.GetDynasty.IsValid]"

										text_single = {
											raw_text = "[Character.GetDynasty.GetNameNoTooltip] dynasty, [GetDynastyPrestigeLevelName(Character.GetDynasty.GetPrestigeLevel)]."
										}

										text_single = {
											raw_text = "Renown: [Character.GetDynasty.GetPrestige|0],"
											tooltip = "[Character.GetDynasty.GetPrestigeBreakdown]"
										}

										text_single = {
											tooltip = "[Character.GetDynasty.GetPrestigeBreakdown]"
											raw_text = "[Character.GetDynasty.GetPrestigeIncome|=1]/month."
										}
										text_single = {
											raw_text = "[Character.GetDynasty.GetPrestigeProgress]."
										}
									}

									divider_light = {
										size = { 100% 3 }
									}

									text_single = {
										# visible = "[GreaterThan_CFixedPoint(Character.GetDread, '(CFixedPoint)0')]"
										raw_text = "Dread [Character.GetDread|0],"
										tooltip = "[Character.GetDreadBreakdown]"
									}
								}
								#diplo
								flowcontainer = {
									direction = vertical
									visible = "[GetVariableSystem.HasValue('expand_view', 'diplomacy')]"
									name = "diplomacy_items"
									datamodel = "[CharacterWindow.GetDiplomacyItems]"
									ignoreinvisible = yes

									item = {
										button = {
											onclick = "[DiplomacyItem.OnClick]"
											onclick = "[GetVariableSystem.Clear('expand_view')]"

											flowcontainer = {
												direction = vertical
												resizeparent = yes
												spacing = 0
												ignoreinvisible = yes

												# text_single = {
												# 	raw_text = "[DiplomacyItem.GetDiplomacyFrame]"
												# }
												#
												# text_single = {
												# 	raw_text = ""
												# }

												widget = {
													size = { 550 45 }
													scissor = yes

													visible = "[Not(GetVariableSystem.Exists('show_diplo_descriptions'))]"

													text_multi = {
														raw_text = "[DiplomacyItem.GetWarScoreFraction|%0] [DiplomacyItem.GetInfo]"
														autoresize = yes
														max_width = 550
														alwaystransparent = yes
														visible = "[DiplomacyItem.HasWarScore]"
													}

													text_multi = {
														raw_text = "[DiplomacyItem.GetInfo]"
														autoresize = yes
														max_width = 550
														alwaystransparent = yes
														visible = "[Not(DiplomacyItem.HasWarScore)]"
													}
												}

												text_multi = {
													visible = "[GetVariableSystem.Exists('show_diplo_descriptions')]"
													text = "[DiplomacyItem.GetInfo]"
													autoresize = yes
													max_width = 550
													alwaystransparent = yes
												}

												# container = {
												# 	ignoreinvisible = yes
												# 	visible = "[DiplomacyItem.IsStruggle]"
												# 	datacontext = "[DiplomacyItem.GetStruggle]"
												#
												# 	text_single = {
												# 		raw_text = "Involved in Iberian struggle"
												# 		visible = "[Struggle.IsInvolvedCharacter(Character.Self)]"
												# 	}
												# 	text_single = {
												# 		raw_text = "Interloper in Iberian struggle"
												# 		visible = "[Struggle.IsInterloperCharacter(Character.Self)]"
												# 	}
												# }

												flowcontainer = {
													visible = no#"[DiplomacyItem.HasReasonCharacters]"
													direction = vertical

													text_single = {
														datacontext = "[DiplomacyItem.GetLeftReasonCharacter]"
														raw_text = "[Character.GetName]"
													}
													text_single = {
														datacontext = "[DiplomacyItem.GetRightReasonCharacter]"
														raw_text = "[Character.GetName]"
													}
												}
											}
										}
									}
								}
								#neighbours
								flowcontainer = {
									visible = "[GetVariableSystem.HasValue('expand_view', 'neighbours')]"
									datamodel = "[Character.MakeScope.GetList('adjacent_rulers')]"
									direction = vertical
									layoutpolicy_horizontal = expanding

									text_single = {
										raw_text = "[GetDataModelSize(Character.MakeScope.GetList('adjacent_rulers'))] Independent."
									}
									item = {
										adjacent_ruler_button = { }
									}
								}
								#vassals
								flowcontainer = {
									visible = "[And(GetVariableSystem.HasValue('expand_view', 'neighbours'), Not(Character.IsIndependentRuler))]"
									datamodel = "[Character.MakeScope.GetList('adjacent_vassals')]"
									direction = vertical
									layoutpolicy_horizontal = expanding

									text_single = {
										raw_text = "[GetDataModelSize(Character.MakeScope.GetList('adjacent_vassals'))] fellow vassals."
									}
									item = {
										adjacent_ruler_button = { }
									}
								}
								# across water
								flowcontainer = {
									visible = "[GetVariableSystem.HasValue('expand_view', 'neighbours')]"
									datamodel = "[Character.MakeScope.GetList('adjacent_rulers_across_water')]"
									direction = vertical
									layoutpolicy_horizontal = expanding

									text_single = {
										raw_text = "[GetDataModelSize(Character.MakeScope.GetList('adjacent_rulers_across_water'))] Across water."
									}
									item = {
										adjacent_ruler_button = { }
									}
								}
							}
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set('expand_view', 'family')]"
						visible = "[Not(GetVariableSystem.Exists('expand_view'))]"
						blockoverride "text" {
							margin_left = 7
							raw_text = "View all relations, hotkey 4."
						}
					}

					### expanded

					vbox = {
						margin_left = 10
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						visible = "[GetVariableSystem.HasValue('expand_view', 'family')]"

						### TABS
						hbox = {
							name = "tabs"
							margin_left = 5
							layoutpolicy_horizontal = expanding
							spacing = 5

							button_tab = {
								shortcut = speed_1
								name = "family_button"
								datacontext = "[CharacterWindow.GetCharacter]"

								onclick = "[GetVariableSystem.Set('char_tab', 'family')]"
								enabled = "[Not(GetVariableSystem.HasValue('char_tab', 'family'))]"

								using = tooltip_above

								flowcontainer = {
									resizeparent = yes
									ignoreinvisible = yes
									spacing = 3

									text_single = {
										raw_text = "Tab 1,"
									}

									text_single = {
										text = "CV_TAB_FAMILY"
									}

									text_single = {
										text = "[CharacterWindow.GetTabItemsCount('family')]"
									}
									dot_l = { }
								}
							}

							button_tab = {
								shortcut = speed_2
								name = "relations_button"
								datacontext = "[CharacterWindow.GetCharacter]"

								onclick = "[GetVariableSystem.Set('char_tab', 'relations')]"
								enabled = "[Not(GetVariableSystem.HasValue('char_tab', 'relations'))]"

								flowcontainer = {
									resizeparent = yes
									ignoreinvisible = yes
									spacing = 3

									text_single = {
										raw_text = "Tab 2,"
									}

									text_single = {
										text = "CV_TAB_RELATIONS"
									}
									text_single = {
										text = "[CharacterWindow.GetTabItemsCount('relations')]"
									}
									dot_l = { }
								}
							}

							button_tab = {
								name = "court_button"
								shortcut = speed_3
								datacontext = "[CharacterWindow.GetCharacter]"
								onclick = "[GetVariableSystem.Set('char_tab', 'court')]"
								enabled = "[Not(GetVariableSystem.HasValue('char_tab', 'court'))]"


								flowcontainer = {
									resizeparent = yes
									ignoreinvisible = yes
									spacing = 3

									text_single = {
										raw_text = "Tab 3,"
									}
									text_single = {
										text = "CV_TAB_COURT"
										margin_right = 3
									}
									text_single = {
										text = "[CharacterWindow.GetTabItemsCount('court')]"
									}
									dot_l = { }
								}
							}

							button_tab = {
								shortcut = speed_4
								name = "vassals_button"
								datacontext = "[CharacterWindow.GetCharacter]"
								visible = "[Character.IsRuler]"

								onclick = "[GetVariableSystem.Set('char_tab', 'vassals')]"
								enabled = "[Not(GetVariableSystem.HasValue('char_tab', 'vassals'))]"

								flowcontainer = {
									ignoreinvisible = yes
									resizeparent = yes
									spacing = 3

									text_single = {
										raw_text = "Tab 4,"
									}

									text_single = {
										text = "CV_TAB_VASSALS"
										margin_right = 3
									}
									text_single = {
										text = "[CharacterWindow.GetTabItemsCount('vassals')]"

									}
									dot_l = { }
								}
							}

							expand = { }
						}

						#######
						# family tab
						scrollbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							visible = "[Or(Not(GetVariableSystem.Exists('char_tab')), GetVariableSystem.HasValue('char_tab','family'))]"
							blockoverride "scrollbox_margins" {
								margin_top = 20
							}
							blockoverride "scrollbox_content" {
								vbox = {
									layoutpolicy_horizontal = expanding
									spacing = 10

									close_relations_vbox = { }
									#children
									vbox_character_row_item_ocr = {
										name = "children"
										layoutpolicy_horizontal = expanding

										blockoverride "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetChildren]"
										}

										blockoverride "header_text"
										{
											raw_text = "Children [Character.MakeScope.ScriptValue('num_of_living_children')],"
										}

										blockoverride "remaining_items"
										{
											spacing = 3

											text_single = {
												visible = "[GreaterThan_CFixedPoint(Character.MakeScope.ScriptValue('unmarried_children'), '(CFixedPoint)0')]"
												raw_text = "[Character.MakeScope.ScriptValue('unmarried_children')] unmarried."
											}

											text_single = {
												visible = "[GreaterThan_int32(GetDataModelSize(CharacterWindow.GetChildren), FixedPointToInt(Character.MakeScope.ScriptValue('num_of_living_children')))]"
												raw_text = "[Subtract_int32(GetDataModelSize(CharacterWindow.GetChildren), FixedPointToInt(Character.MakeScope.ScriptValue('num_of_living_children')))] dead."
											}

											text_single = {
												raw_text = "Click to [Select_CString(GetVariableSystem.Exists('hide_children'), 'show', 'hide')]."
											}
										}

										blockoverride "expand_button_inside" {
											onclick = "[GetVariableSystem.Toggle('hide_children')]"
										}
										blockoverride "hide_items" {
											visible = "[Not(GetVariableSystem.Exists('hide_children'))]"
										}
										blockoverride "extra3" {
											text_single = {
												raw_text = "[Select_CString( Character.IsFemale, 'Female', 'Male' )],"
											}
											text_single = {
												raw_text = "Unmarried."
												visible = "[Not(Character.GetPrimarySpouseOrBetrothed.IsValid)]"
											}
											flowcontainer = {
												ignoreinvisible = yes
												spacing = 3
												visible = "[Character.GetPrimarySpouseOrBetrothed.IsValid]"
												text_single = {
													raw_text = "[Select_CString( Character.IsBetrothed, 'Betrothed', 'Married' )] to"
												}
												text_single = {
													raw_text = "[Character.GetPrimarySpouseOrBetrothed.GetName], [Character.GetPrimarySpouseOrBetrothed.GetAge]."
												}
											}
										}
									}

									#spouses
									vbox_character_row_item_ocr = {
										name = "secondary_spouses"
										visible = "[GreaterThan_int32( Character.GetMaxSpouses, '(int32)1' )]"
										# layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding

										blockoverride "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetSecondarySpouses]"
										}

										blockoverride "header_text"
										{
											raw_text = "Secondary spouses [GetDataModelSize(CharacterWindow.GetSecondarySpouses)]."
										}

										blockoverride "expand_button" { }

										blockoverride "find_partner"
										{
											hbox = {
												visible = "[Character.IsPlayerInteractionShown('marry_off_interaction')]"
												layoutpolicy_horizontal = expanding
												spacing = 3

												text_single = {
													margin_left = 3
													raw_text = "[Character.CalcUnusedSecondarySpouseSlots] more slots. "
												}

												button = {
													size = { 0 20 }
													onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('marry_off_interaction')]"
													onclick = "[CharacterWindow.Close]"
													text_single = {
														resizeparent = yes
														raw_text = "Find spouse."
													}
												}

												expand = { }
											}
										}
									}

									#consorts
									vbox_character_row_item_ocr = {
										name = "consorts"
										visible = "[GreaterThan_int32( Character.GetMaxConsorts, '(int32)0' )]"
										# layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding


										blockoverride "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetConcubines]"
										}

										blockoverride "header_text"
										{
											raw_text = "Concubines [GetDataModelSize(CharacterWindow.GetConcubines)]."
										}

										blockoverride "expand_button" { }

										blockoverride "find_partner"
										{
											vbox = {
												visible = "[Character.IsPlayerInteractionShown('find_concubine')]"
												layoutpolicy_horizontal = expanding
												spacing = 3

												text_single = {
													layoutpolicy_horizontal = expanding
													margin_left = 3
													raw_text = "[Character.CalcUnusedConsortSlots] more slots. "
												}

												button = {
													layoutpolicy_horizontal = expanding
													size = { 0 20 }
													onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('find_concubine')]"
													enabled = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('find_concubine')]"

													flowcontainer = {
														resizeparent = yes
														ignoreinvisible = yes

														text_single = {
															raw_text = "Find concubine."
															visible = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('find_concubine')]"
														}
														text_single = {
															raw_text = "Disabled, see tooltip."
															visible = "[Not(CharacterWindow.GetCharacter.IsPlayerInteractionValid('find_concubine'))]"
															tooltip = "[CharacterWindow.GetCharacter.GetPlayerInteractionTooltip('find_concubine')]"
														}
													}
												}

											}
										}
									}

									#parents
									vbox_character_row_item_ocr = {
										name = "parents"
										layoutpolicy_horizontal = expanding

										blockoverride "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetParents]"
										}

										blockoverride "header_text"
										{
											raw_text = "Parents [GetDataModelSize(CharacterWindow.GetParents)]."
										}

										blockoverride "expand_button" { }
									}

									# siblings
									vbox_character_row_item_ocr = {
										name = "siblings"
										layoutpolicy_horizontal = expanding

										blockoverride "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetSiblings]"
										}

										blockoverride "header_text"
										{
											raw_text = "Siblings [GetDataModelSize(CharacterWindow.GetSiblings)]."
										}

										blockoverride "remaining_items"
										{
											# visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetSiblings), '(int32)7' )]"
											# text = "[GetNumberAbove_int32( GetDataModelSize(CharacterWindow.GetSiblings), '(int32)7' )|=]"
										}

										blockoverride "expand_button_inside" {
											# visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetSiblings), '(int32)7' )]"
											# onclick = "[CharacterWindow.ToggleExpandedRelation( 'siblings' )]"
										}
									}

									#grandparents
									vbox_character_row_item_ocr = {
										layoutpolicy_horizontal = expanding
										name = "grandparents"
										# visible = "[Not(Or(GreaterThan_int32( Character.GetMaxSpouses, '(int32)1' ), GreaterThan_int32( Character.GetMaxConsorts, '(int32)0' )))]"
										# layoutpolicy_vertical = expanding

										blockoverride "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetGrandparents]"
										}

										blockoverride "header_text"
										{
											raw_text = "Grandparents [GetDataModelSize(CharacterWindow.GetGrandparents)]."
										}

										blockoverride "expand_button" { }
									}

									expand = { }
								}
							}
						}

						########
						# relations tab

						scrollbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							visible = "[GetVariableSystem.HasValue('char_tab','relations')]"
							blockoverride "scrollbox_margins" {
								margin_top = 20
							}
							blockoverride "scrollbox_content" {
								vbox = {
									margin_top = 15
									spacing = 3
									layoutpolicy_horizontal = expanding

									vbox_character_row_item_ocr = {
										layoutpolicy_horizontal = expanding
										name = "wards"
										visible = "[CharacterWindow.GetCharacter.IsAdult]"
										# layoutpolicy_vertical = expanding

										blockoverride "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'ward' ) )]"
										}

										blockoverride "extra2" {
											text_single = {
												raw_text = "[Character.GetRelationToString( GetPlayer )]."
											}
										}

										blockoverride "header_text"
										{
											raw_text = "Wards, [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'ward' ) ))]."
										}

										blockoverride "expand_button" { }

										### WARD FINDER
										blockoverride "find_partner"
										{
											hbox = {
												visible = "[Character.IsPlayerInteractionShown('educate_child_interaction')]"
												layoutpolicy_horizontal = expanding
												spacing = 3


												text_single = {
													margin_left = 3
													raw_text = "[CharacterWindow.CalcUnusedRelationSlots( GetRelation( 'ward' ), '(int32)2' )] more slots. "
												}

												button = {
													size = { 0 20 }
													onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('educate_child_interaction')]"
													# enabled = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('educate_child_interaction')]"

													flowcontainer = {
														resizeparent = yes
														ignoreinvisible = yes

														text_single = {
															raw_text = "Educate child."
															# visible = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('educate_child_interaction')]"
														}
														# text_single = {
														# 	raw_text = "Disabled, see tooltip."
														# 	visible = "[Not(CharacterWindow.GetCharacter.IsPlayerInteractionValid('educate_child_interaction'))]"
														# 	# tooltip = "[CharacterWindow.GetCharacter.GetPlayerInteractionTooltip('educate_child_interaction')]"
														# }
													}
												}

												expand = { }
											}
										}
									}

									vbox_character_row_item_ocr = {
										name = "lovers"
										visible = "[CharacterWindow.GetCharacter.IsAdult]"
										# layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding

										blockoverride "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) )]"
										}

										blockoverride "extra2" {
											text_single = {
												raw_text = "[Character.GetRelationToString( GetPlayer )]."
											}
										}

										blockoverride "header_text"
										{
											raw_text = "Lovers. [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ))]."
										}

										blockoverride "remaining_items"
										{
											# visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ) ), '(int32)5' ) )]"
											# margin = { 167 }
											# text = "[GetNumberAbove_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ) ), '(int32)5' )|=]"

										}

										blockoverride "expand_button_inside" {
											# visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ) ), '(int32)5' )]"
											# onclick = "[CharacterWindow.ToggleExpandedRelation( 'lovers' )]"
										}

									}

									vbox_agot_paramour = { }

									vbox_character_row_item_ocr = {
										name = "guardian"
										layoutpolicy_horizontal = expanding
										visible = "[Not(CharacterWindow.GetCharacter.IsAdult)]"
										# layoutpolicy_vertical = expanding

										blockoverride "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'guardian' ) )]"
										}

										blockoverride "extra2" {
											text_single = {
												raw_text = "[Character.GetRelationToString( GetPlayer )]."
											}
										}

										blockoverride "header_text"
										{
											raw_text = "Guardian, [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'guardian' ) ))]."
										}


										blockoverride "expand_button" { }

										### GUARDIAN FINDER
										blockoverride "find_partner"
										{

											hbox = {
												layoutpolicy_horizontal = expanding
												hbox = {
													visible = "[Character.IsPlayerInteractionShown('educate_child_interaction')]"
													layoutpolicy_horizontal = expanding
													spacing = 3


													text_single = {
														margin_left = 3
														raw_text = "[CharacterWindow.CalcUnusedRelationSlots( GetRelation( 'guardian' ), '(int32)1' )] more slots. "
													}

													button = {
														size = { 0 20 }
														onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('educate_child_interaction')]"
														# enabled = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('educate_child_interaction')]"

														flowcontainer = {
															resizeparent = yes
															ignoreinvisible = yes

															text_single = {
																raw_text = "Educate child."
																# visible = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('educate_child_interaction')]"
															}
															# text_single = {
															# 	raw_text = "Disabled, see tooltip."
															# 	visible = "[Not(CharacterWindow.GetCharacter.IsPlayerInteractionValid('educate_child_interaction'))]"
															# 	# tooltip = "[CharacterWindow.GetCharacter.GetPlayerInteractionTooltip('educate_child_interaction')]"
															# }
														}
													}

													expand = { }
												}

												hbox = {
													visible = "[Character.IsPlayerInteractionShown('offer_guardianship_interaction')]"
													layoutpolicy_horizontal = expanding
													spacing = 3


													text_single = {
														margin_left = 3
														raw_text = "[CharacterWindow.CalcUnusedRelationSlots( GetRelation( 'guardian' ), '(int32)1' )] more slots. "
													}

													button = {
														size = { 0 20 }
														onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('offer_guardianship_interaction')]"
														enabled = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid( 'offer_guardianship_interaction' )]"
														# enabled = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('educate_child_interaction')]"

														flowcontainer = {
															resizeparent = yes
															ignoreinvisible = yes

															text_single = {
																raw_text = "Educate child."
																visible = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('offer_guardianship_interaction')]"
															}
															text_single = {
																raw_text = "Disabled, see tooltip."
																visible = "[Not(CharacterWindow.GetCharacter.IsPlayerInteractionValid('offer_guardianship_interaction'))]"
																tooltip = "[CharacterWindow.GetCharacter.GetPlayerInteractionTooltip('offer_guardianship_interaction')]"
															}
														}
													}

													expand = { }
												}
											}
										}
									}

									vbox_agot_squires = { }

									vbox_character_row_item_ocr = {
										name = "crushes"
										visible = "[Not(CharacterWindow.GetCharacter.IsAdult)]"
										layoutpolicy_horizontal = expanding
										# layoutpolicy_vertical = expanding

										blockoverride "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'crush' ) )]"
										}

										blockoverride "extra2" {
											text_single = {
												raw_text = "[Character.GetRelationToString( GetPlayer )]."
											}
										}

										blockoverride "header_text"
										{
											raw_text = "Crushes, [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'crush' ) ))]."
										}

										blockoverride "expand_button" { }
									}

									vbox_character_row_item_ocr = {
										name = "friends"
										# layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding

										blockoverride "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) )]"
										}

										blockoverride "extra2" {
											text_single = {
												raw_text = "[Character.GetRelationToString( GetPlayer )]."
											}
										}

										blockoverride "header_text"
										{
											raw_text = "Friends, [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ))]."
										}

										blockoverride "remaining_items"
										{
											# visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)7' ) )]"
											# text = "[GetNumberAbove_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)7' )|=]"
										}

										blockoverride "expand_button_inside" {
											# visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)7' )]"
											# onclick = "[CharacterWindow.ToggleExpandedRelation( 'friends' )]"
										}
									}

									vbox_character_row_item_ocr = {
										name = "rivals"
										# visible = "[CharacterWindow.GetCharacter.IsAdult]"
										# layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding

										blockoverride "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) )]"
										}

										blockoverride "extra2" {
											text_single = {
												raw_text = "[Character.GetRelationToString( GetPlayer )]."
											}
										}

										blockoverride "header_text"
										{
											raw_text = "Rivals, [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) ))]."
										}

										blockoverride "remaining_items"
										{
											# visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) )), '(int32)7' ))]"
											# text = "[GetNumberAbove_int32( GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) )), '(int32)7' )|=]"
										}

										blockoverride "expand_button_inside" {
											# visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'rival' ) )), '(int32)7' )]"
											# onclick = "[CharacterWindow.ToggleExpandedRelation( 'rivals' )]"
										}
									}

									vbox_character_row_item_ocr = {
										name = "bullies"
										visible = "[Not( CharacterWindow.GetCharacter.IsAdult )]"
										# layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding

										blockoverride "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'bully' ) )]"
										}

										blockoverride "header_text"
										{
											raw_text = "Bullies, [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'bully' ) ))]."
										}

										blockoverride "expand_button" { }
									}

									vbox_character_row_item_ocr = {
										name = "victims"
										visible = "[Not( CharacterWindow.GetCharacter.IsAdult )]"
										# layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding

										blockoverride "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'victim' ) )]"
										}

										blockoverride "header_text"
										{
											raw_text = "Victims, [GetDataModelSize(CharacterWindow.GetRelationsOfType( GetRelation( 'victim' ) ))]."
										}

										blockoverride "expand_button" { }
									}

									expand = { }
								}
							}
						}

						####################################
						############ COURT TAB #############
						####################################

						vbox_character_list = {
							datacontext = "[CharacterWindow.GetCourt]"
							visible = "[GetVariableSystem.HasValue('char_tab','court')]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							blockoverride "sort_dropdown" {
								dropdown_sort_characterlist = {
									# unique name needed to distinct from vassal sort options
									name = "court_sort_options"
								}
							}

							blockoverride "scrollbox_margins" {
								margin_top = 20
							}

							blockoverride "container_implementation" {
								fixedgridbox = {
									name = "characters_grid"
									datamodel = "[CharacterSelectionList.GetList]"
									visible = "[Not(CharacterSelectionList.IsBuildingList)]"
									addcolumn = 590
									addrow = 90
									setitemsizefromcell = yes

									item = {
										widget_character_list_item_finder = {
											blockoverride "click" {
												onclick = "[DefaultOnCharacterClick(CharacterListItem.GetCharacter.GetID)]"
												onclick = "[GetVariableSystem.Clear('char_tab')]"
												onclick = "[GetVariableSystem.Clear('expand_view')]"
												onrightclick = "[DefaultOnCharacterRightClick(CharacterListItem.GetCharacter.GetID)]"
											}
											datacontext = "[CharacterListItem.GetCharacter]"

											blockoverride "gridbox_items"
											{
												datamodel_wrap = 7
												maxverticalslots = 2
											}

											blockoverride "action_buttons" { }
										}
									}
								}
							}
						}

						####################################
						########### VASSALS TAB ############
						####################################

						vbox_character_list = {
							visible = "[GetVariableSystem.HasValue('char_tab','vassals')]"
							datacontext = "[CharacterWindow.GetVassals]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							blockoverride "sort_dropdown" {
								dropdown_sort_characterlist = {
									# unique name needed to distinct from court sort options
									name = "vassal_sort_options"
								}
							}

							blockoverride "scrollbox_margins" {
								margin_top = 20
							}

							blockoverride "container_implementation" {
								fixedgridbox = {
									name = "characters_grid"
									datamodel = "[CharacterSelectionList.GetList]"
									visible = "[Not(CharacterSelectionList.IsBuildingList)]"
									addcolumn = 590
									addrow = 90
									setitemsizefromcell = yes

									item = {
										widget_vassal_list_item = {
											onclick = "[GetVariableSystem.Clear('char_tab')]"

											datacontext = "[CharacterListItem.GetCharacter]"

											blockoverride "own_vassal" { }
										}
									}
								}
							}
						}

					}

					expand = { }
				}

				agot_ruin_character = { }

				expand = { }
			}

			expand = { }
		}
	}

	character_old = { }

	window_character_filter = {
		name = "court_character_filter_window"
		datacontext = "[CharacterWindow.GetCourt]"
		position = { 0 0 }
		using = ocr_size

		blockoverride "editbox_properties"
		{
			name = "court_text_filter"
			ontextedited = "[CharacterSelectionList.SetPattern]"
			oneditingfinished = "[CharacterSelectionList.FinishEdit]"
		}

		blockoverride "addition_filter" {
			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('age_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('adult_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('personal_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('hook_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('married_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('gender_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('health_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('inspiration_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('sexuality_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('politics_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('hostage_filter')]"
					}
				}
			}
		}
	}

	window_character_filter = {
		name = "vassal_filter_window"
		datacontext = "[CharacterWindow.GetVassals]"
		position = { 0 0 }
		using = ocr_size

		blockoverride "editbox_properties"
		{
			name = "vassal_text_filter"
			ontextedited = "[CharacterSelectionList.SetPattern]"
			oneditingfinished = "[CharacterSelectionList.FinishEdit]"
		}

		blockoverride "addition_filter" {
			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('age_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('adult_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('personal_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('vassal_stance_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('hook_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('married_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('gender_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('health_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('politics_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('hostage_filter')]"
					}
				}
			}
		}
	}
}


types CharOCRTypes {

	type char_expanded_list = flowcontainer {
		direction = vertical
		# layoutpolicy_horizontal = expanding
		ignoreinvisible = yes

		divider_light = {
			size = { 400 3 }
		}
		item = {
			button = {
				size = { 0 25 }
				onclick = "[OpenGameViewData('holding_view', Scope.GetProvince.Self)]"
				onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetProvince.GetTitle.GetID)]"
				flowcontainer = {
					resizeparent = yes
					ignoreinvisible = yes
					datacontext = "[Scope.GetProvince]"
					spacing = 3
					text_single = {
						raw_text = "[Province.GetHolding.GetType.GetName]"
						visible = "[Not(EqualTo_string(Province.GetHolding.GetType.GetKey, ''))]"
					}
					text_single = {
						raw_text = "[Province.GetNameNoTooltip],"
					}
					text_single = {
						raw_text = "Tax: [Province.GetHolding.GetIncome|1],"
						visible = "[Not(EqualTo_string(Province.GetHolding.GetType.GetKey, ''))]"
					}
					text_single = {
						raw_text = "Levies: [Province.GetHolding.GetMaxLevySize|0]."
						visible = "[Not(EqualTo_string(Province.GetHolding.GetType.GetKey, ''))]"
					}
					text_single = {
						raw_text = "Fort level: [Province.GetFortLevel]."
						visible = "[Province.HasFort]"
					}

					text_single = {
						raw_text = "Empty."
						visible = "[EqualTo_string(Province.GetHolding.GetType.GetKey, '')]"
					}

					text_single = {
						raw_text = "In county of [Province.GetCounty.GetName]."
					}
				}
			}
		}

		# text_single = {
		# 	layoutpolicy_horizontal = expanding
		# 	raw_text = ""
		# }
		#
		# flowcontainer = {
		# 	datamodel = "[Character.MakeScope.GetList('realm_holdings')]"
		# }
	}

	type adjacent_ruler_button = button {
		onclick = "[DefaultOnCharacterClick(Scope.GetCharacter.GetID)]"
		onclick = "[DefaultOnCoatOfArmsRightClick(Scope.GetCharacter.GetCapitalLocation.GetCoATitle.GetID)]"
		onclick = "[GetVariableSystem.Clear('expand_view')]"
		onrightclick = "[DefaultOnCharacterRightClick(Scope.GetCharacter.GetID)]"
		button_ignore = none

		flowcontainer = {
			resizeparent = yes
			ignoreinvisible = yes
			datacontext = "[Scope.GetCharacter]"
			spacing = 3
			text_single = {
				raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip],"
			}
			# text_single = {
			# 	raw_text = "[Character.GetPrimaryTitle.GetRankConcept],"
			# }
			text_single = {
				raw_text = "[Character.RealmSize] count[Select_CString(GreaterThan_int32(Character.RealmSize, '(int32)1'), 'ies', 'y')],"
			}
			text_single = {
				raw_text = "[GuiScope.SetRoot(CharacterWindow.GetCharacter.GetCapitalLocation.MakeScope).AddScope('second', Scope.GetCharacter.GetCapitalLocation.MakeScope).Custom('province_direction')]."
			}
			# text_single = {
			# 	raw_text = "[Scope.GetCharacter.GetFirstNameNicknamedOrMe],"
			# }
			text_single = {
				raw_text = "[Character.GetMaxMilitaryStrength|0] men,"
			}
			text_single = {
				visible = "[Character.IsAtWar]"
				raw_text = "at war."
			}
			# text_single = {
			# 	raw_text = "[Character.GetPrimaryTitle.GetTierAsNameNoTooltip]"
			# }
			text_single = {
				visible = "[Character.GetPrimaryTitle.GetDeJureLiege.IsValid]"
				raw_text = "de jure in [Character.GetPrimaryTitle.GetDeJureLiege.GetNameNoTierNoTooltip]."
			}
		}
	}

	type realm_name_and_type_vbox_ocr = vbox {
		layoutpolicy_horizontal = expanding

		#TODO
		text_single = {
			name = "faction"
			visible = "[And(Title.HasFaction, Character.HasLandedTitles)]"
			text = "CV_CIVIL_WAR_FACTION"
			fontsize_min = 14
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			shortcut = "zoom_out"
			visible = "[And(Not(Character.IsIndependentRuler), Character.HasLandedTitles)]"
		    blockoverride "extra" {
				text_single = {
					raw_text = "Inside [Character.GetLiege.GetPrimaryTitle.GetNameNoTooltip], [Character.GetLiege.RealmSize] counties."
				}

				text_single = {
					raw_text = "Liege, [Character.GetLiege.GetFirstNameNoTooltip], [Character.GetLiege.GetAge], Page Up."
				}
		    }
			onclick = "[DefaultOnCharacterClick(Character.GetLiege.GetID)]"
			onclick = "[DefaultOnCharacterClick(Character.GetLiege.GetID)]"
			onrightclick = "[DefaultOnCharacterRightClick(Character.GetLiege.GetID)]"
		}

		flowcontainer = {
			layoutpolicy_horizontal = expanding
		    ignoreinvisible = yes
			margin_left = 3
			spacing = 3
			visible = "[And(Not(Character.IsIndependentRuler), Character.HasLandedTitles)]"

			text_single = {
				visible = "[Not(Character.IsLocalPlayer)]"
				raw_text = "[Character.GetFirstNameNoTooltip] is"
			}

			flowcontainer = {
			    ignoreinvisible = yes
				visible = "[Character.IsLocalPlayer]"

			    spacing = 3

				text_single = {
					raw_text = "[Character.GetRelationToString( GetPlayer )]."
				}

				text_single = {
					visible = "[And(Character.HasRelationTo( Character.GetLiege ), Character.HasLiege)]"
					raw_text = "You are"
				}
			}

			flowcontainer = {
				ignoreinvisible = yes

				visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsLocalPlayer))]"

				text_single = {
					raw_text = "[Character.GetRelationToString( GetPlayer )]."
					tooltip = "[Character.GetRelationToStringExtended( GetPlayer )]"
				}
			}

			flowcontainer = {
				ignoreinvisible = yes
				visible = "[Or(Not(Character.HasRelationTo( GetPlayer )), Character.IsLocalPlayer)]"

				text_single = {
					visible = "[And(Character.HasRelationTo( Character.GetLiege ), Character.HasLiege)]"
					raw_text = "[Character.GetRelationToString( Character.GetLiege )]."
					tooltip = "[Character.GetRelationToStringExtended( Character.GetLiege )]"
				}
			}
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			visible = "[And(Character.IsIndependentRuler, Character.HasRelationTo( GetPlayer))]"
			raw_text = "[Character.GetRelationToString( GetPlayer )]."
			tooltip = "[Character.GetRelationToStringExtended( GetPlayer )]"
		}

		flowcontainer = {
		    ignoreinvisible = yes
			layoutpolicy_horizontal = expanding
			margin_left = 5
		    visible = "[Not(Character.HasLandedTitles)]"

			flowcontainer = {
				ignoreinvisible = yes

				visible = "[Character.HasRelationTo( GetPlayer )]"

				text_single = {
					raw_text = "[Character.GetRelationToString( GetPlayer )]."
					tooltip = "[Character.GetRelationToStringExtended( GetPlayer )]"
				}
			}

			flowcontainer = {
				ignoreinvisible = yes
				visible = "[Not(Character.HasRelationTo( GetPlayer ))]"

				text_single = {
					visible = "[And(Character.HasRelationTo( Character.GetLiege ), Character.HasLiege)]"
					raw_text = ", [Character.GetRelationToString( Character.GetLiege )]."
					tooltip = "[Character.GetRelationToStringExtended( Character.GetLiege )]"
				}
			}
		}

		expand = { }
	}

	type health_tooltip = flowcontainer {
		margin = { 15 10 }
		using = DefaultTooltipBackground
		ignoreinvisible = yes
		direction = vertical

		 text_single = {
			raw_text = "[Character.GetHealthInfo]."
		 }

		 flowcontainer = {
			 spacing = 3
			 ignoreinvisible = yes

			 text_single = {
				 raw_text = "Stress level: [Character.GetStressLevel],"
				 visible = "[And(Not(Character.IsDeadAndValid), GreaterThan_int32(Character.GetStress, '(int32)0'))]"
				 tooltip = "[Character.GetHealthInfo]"
			 }

			 text_single = {
				 visible = "[And(Not(Character.IsDeadAndValid), GreaterThan_int32(Character.GetStress, '(int32)0'))]"
				 raw_text = "[GetPlayer.GetStressProgress]% to next level."
			 }

			 text_single = {
				 raw_text = "Stress: [Character.GetStress]."
				 visible = "[Not(Character.IsDeadAndValid)]"
				 tooltip = "[Character.GetHealthInfo]"
			 }

		 }

		 flowcontainer = {
			 spacing = 3
		     ignoreinvisible = yes

			 text_single = {
				 raw_text = "[Select_CString( Character.IsFemale, 'Female', 'Male' )],"
			 }

			 text_single = {
				 raw_text = "[Character.GetSexuality]."
			 }
		 }

		 physical_appearance = { }
	}

	type physical_appearance = flowcontainer {
		direction = vertical
		ignoreinvisible = yes

		flowcontainer = {
			spacing = 3
			text_single = {
				raw_text = "Height, [Multiply_float( Add_float( Character.CalcMorphGeneAttribute('gene_height', 'body_height'), '(float)1' ), FixedPointToFloat(GuiScope.SetRoot(Character.MakeScope).ScriptValue('sex_height')) )|0] centimeters"
			}

			text_single = {
				raw_text = "or [Multiply_float( Add_float( Character.CalcMorphGeneAttribute('gene_height', 'body_height'), '(float)1' ), FixedPointToFloat(GuiScope.SetRoot(Character.MakeScope).ScriptValue('height_feet')) )|1] feet,"
			}

			# text_single = {
			# 	raw_text = "[Add_float(Character.CalcMorphGeneAttribute('gene_height', 'body_height'), '(float)1')|0%]."
			# }
		}

		 text_single = {
			raw_text = "Weight, [Character.GetCurrentWeight|=]% [Select_CString(GreaterThan_int32(Character.GetCurrentWeight, '(int32)0'), 'above', 'below')] average."
		 }

		 text_single = {
			 visible = "[And(Character.IsFemale, Character.IsAdult)]"
			 raw_text = "Bosom size, [Multiply_float(Character.CalcMorphGeneAttribute('gene_bs_bust', 'bs_body_breast_size_2_max'), '(float)2')|0%]."
		 }
	 }

	type vbox_character_row_item_ocr = vbox {
		# spacing = -3

		widget = {
			layoutpolicy_horizontal = expanding
			size = { 0 20 }
			min_width = 110

			block "expand_button" {
				button_standard_hover = {
					size = { 100% 100% }

					block "expand_button_inside" { }
				}
			}

			hbox = {
				margin = { 10 0 }

				background = {
					using = Text_Label_Background
					alpha = 0.5
					margin = { 0 -2 }
				}

				text_single = {

					block "header_text"
					{
						raw_text = "#D NEEDS TEXT#!"
					}
				}

				block "remaining_items" {
				}

				expand = { }
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			block "hide_items" { }



			block "gridbox" {
				vbox = {
					layoutpolicy_horizontal = expanding
					# flipdirection = yes
					# addcolumn = 85
					# addrow = 90
					# datamodel_wrap = 7

					block "gridbox_slots"
					{
						# maxverticalslots = 1
					}

					block "portrait_datamodel" {
						datamodel = "[CharacterWindow.GetParents]"
					}

					item = {
						char_name = {
							layoutpolicy_horizontal = expanding
							blockoverride "pre" {
								text_single = {
									raw_text = "Dead,"
									visible = "[Character.IsDeadAndValid]"
								}

								text_single = {
									raw_text = "In prison,"
									visible = "[Character.IsImprisoned]"
								}
							}
							blockoverride "extra" {
								spacing = 3
								text_single = {
									raw_text = "[Character.GetAge]."
								}
								block "extra2" { }
								block "extra3" { }
								expand = { }
							}
						}
					}
				}
			}

			block "find_partner" { }

			expand = { }
		}

		expand = { }
	}
}


######################################################
################ TYPES AND TEMPLATES #################
######################################################

types CharacterWindow
{
	type skill_icon_label_vertical = widget {
		size = { 40 60 }

		icon = {
			name = "skill_icon"
			texture = "gfx/interface/icons/icon_skills.dds"
			size = { 24 24 }
			framesize = { 60 60 }
			position = { -10 17 }

			block "icon"
			{
				frame = "[SkillItem.GetFrame]"
			}
		}

		block "tooltip"
		{
			tooltip = "SKILL_ITEM_TOOLTIP"
			using = tooltip_ne
		}

		text_single = {
			name = "skill_value"
			parentanchor = top|hcenter
			position = { 5 17 }
			align = center

			block "value"
			{
				text = "[SkillItem.GetValue]"
			}
		}
	}

	type icon_row_header_background = icon
	{
		size = { 100% 25 }

		texture = "gfx/interface/component_tiles/tile_title_bg_01.dds"
		spritetype = corneredtiled
		spriteborder = { 20 0 }
		texture_density = 2
		alpha = 0.5
	}

	type widget_family_row_item = widget
	{
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		maximumsize = { -1 110 }
		scissor = yes

		icon_row_header_background = { }

		hbox = {

			block "item_list"
			{
			}

			expand = { }
		}
	}

	type vbox_character_row_item = vbox {
		spacing = -3

		widget = {
			layoutpolicy_horizontal = expanding
			size = { 0 25 }
			min_width = 110

			block "expand_button" {
				button_standard_hover = {
					size = { 100% 100% }

					block "expand_button_inside" { }
				}
			}

			hbox = {
				margin = { 10 0 }

				background = {
					using = Text_Label_Background
					alpha = 0.5
					margin = { 0 -2 }
				}

				text_single = {
					align = nobaseline
					fontsize = 14

					block "header_text"
					{
						raw_text = "#D NEEDS TEXT#!"
					}
				}

				expand = { }

				text_single = {
					align = nobaseline
					default_format = "#weak"

					block "remaining_items" {
						visible = no
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding



			block "gridbox" {
				fixedgridbox = {
					flipdirection = yes
					addcolumn = 85
					addrow = 90
					datamodel_wrap = 7

					block "gridbox_slots"
					{
						maxverticalslots = 1
					}

					block "portrait_datamodel" {
						datamodel = "[CharacterWindow.GetParents]"
					}

					item = {
						portrait_head_small = {
							blockoverride "portrait_button"
							{
								using = tooltip_ne
							}
							blockoverride "glow_visible"
							{
								visible = no
							}
						}
					}
				}
			}

			block "find_partner" { }

			expand = { }
		}

		expand = { }
	}

	### Modified character row for relationship tab
	type vbox_character_row_relationship_item = vbox {
		spacing = -3

		widget = {
			layoutpolicy_horizontal = expanding
			size = { 0 25 }
			min_width = 110

			block "expand_button" {
				button_standard_hover = {
					size = { 100% 100% }

					block "expand_button_inside" { }
				}
			}

			hbox = {
				margin = { 10 0 }

				background = {
					using = Text_Label_Background
					alpha = 0.5
					margin = { 0 -2 }
				}

				text_single = {
					align = nobaseline
					fontsize = 14

					block "header_text"
					{
						raw_text = "#D NEEDS TEXT#!"
					}
				}

				expand = { }

				text_single = {
					align = nobaseline
					default_format = "#weak"

					block "remaining_items" {
						visible = no
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding



			block "gridbox" {
				fixedgridbox = {
					flipdirection = yes
					addcolumn = 85
					addrow = 90
					datamodel_wrap = 7

					block "gridbox_slots"
					{
						maxverticalslots = 1
					}

					block "portrait_datamodel" {
						datamodel = "[CharacterWindow.GetParents]"
					}

					item = {
						portrait_head_small_relationship = {
							blockoverride "portrait_button"
							{
								using = tooltip_ne
							}
							blockoverride "glow_visible"
							{
								visible = no
							}
						}
					}
				}
			}

			block "find_partner" { }

			expand = { }
		}

		expand = { }
	}

	type vbox_titles_claims_box = vbox {

		## Titles
		vbox = {
			name = "titles"
			visible = "[Not( IsDataModelEmpty( CharacterWindow.GetTitles ) )]"
			layoutpolicy_horizontal = expanding

			button_standard_hover = {
				layoutpolicy_horizontal = expanding
				size = { 0 25 }
				onclick = "[CharacterWindow.ToggleExpandedTitles]"
				down = "[CharacterWindow.AreTitlesExpanded]"
				tooltip = "[SelectLocalization( CharacterWindow.AreTitlesExpanded, 'CV_TITLES_HIDE_TT', 'CV_TITLES_SHOW_TT' )]"

				hbox = {
					margin = { 5 0 }
					margin_bottom = 3
					margin_right = 10

					text_label_left = {
						visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetTitles), '(int32)1' )]"
						text = "CV_TITLES"
					}

					text_label_left = {
						visible = "[Not(GreaterThan_int32( GetDataModelSize(CharacterWindow.GetTitles), '(int32)1' ))]"
						text = "CV_TITLES_SINGULAR"
					}

					expand = { }

					text_single = {
						block "titles_extra_items"
						{
							visible = "[GreaterThan_int32(GetDataModelSize(CharacterWindow.GetTitles), '(int32)8' )]"
							text = "[GetNumberAbove_int32( GetDataModelSize(CharacterWindow.GetTitles), '(int32)8' )|=]"
						}
						default_format = "#weak"
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				hbox = {
					layoutpolicy_horizontal = expanding

					fixedgridbox = {
						datamodel = "[CharacterWindow.GetTitles]"
						flipdirection = yes
						addrow = 60
						addcolumn = 38
						maxverticalslots = 1

						block "titles_max_slots" {
							datamodel_wrap = 2
						}

						item = {
							coa_title_tiny_crown = {
								datacontext = "[TitleItem.GetTitle]"
								#	visible = "[GreaterThan_int32( Title.GetTierFrame, '(int32)3' )]"
								using = tooltip_ne

								icon = {
									name = "has_laws"
									visible = "[TitleItem.GetTitle.HasLaws]"
									parentanchor = bottom|right
									size = { 25 25 }
									position = { 5 0 }
									texture = "gfx/interface/icons/title_status/icon_title_law.dds"
								}
							}
						}
					}

					expand = { }
				}
			}
		}

		## Claims
		vbox = {
			name = "claims"
			visible = "[Not(IsDataModelEmpty(CharacterWindow.GetClaims))]"
			layoutpolicy_horizontal = expanding

			vbox = {
				layoutpolicy_horizontal = expanding

				button_standard_hover = {
					layoutpolicy_horizontal = expanding
					margin_left = 5
					size = { 0 25 }
					onclick = "[CharacterWindow.ToggleExpandedClaims]"
					down = "[CharacterWindow.AreClaimsExpanded]"
					tooltip = "[SelectLocalization( CharacterWindow.AreClaimsExpanded, 'CV_CLAIMS_HIDE_TT', 'CV_CLAIMS_SHOW_TT' )]"

					hbox = {
						margin = { 5 0 }
						margin_bottom = 3
						margin_right = 10

						text_label_left = {
							visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetClaims), '(int32)1' )]"
							text = "CV_CLAIMS"
						}

						text_label_left = {
							visible = "[Not(GreaterThan_int32( GetDataModelSize(CharacterWindow.GetClaims), '(int32)1' ))]"
							text = "CV_CLAIMS_SINGULAR"
						}

						expand = { }

						text_single = {
							block "claims_extra_items"
							{
								visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetClaims), '(int32)10' )]"
								text = "[GetNumberAbove_int32(GetDataModelSize(CharacterWindow.GetClaims), '(int32)10' )|=]"
							}
							default_format = "#weak"
						}
					}
				}

				expand = { }
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				fixedgridbox = {
					name = "claims_box"
					datamodel = "[CharacterWindow.GetClaims]"
					flipdirection = yes
					addrow = 60
					addcolumn = 38
					maxverticalslots = 1

					block "claims_max_slots" {
						datamodel_wrap = 8
					}

					item = {
						container = {
							datacontext = "[Claim.GetTitle]"
							using = tooltip_ne
							tooltip = "CHARACTER_WINDOW_CLAIM_TOOLTIP"

							coa_title_tiny_crown = {
								name = "claim"
								tooltip_enabled = no


								highlight_icon = {
									name = "pressed_claim"
									visible = "[And(Claim.IsPressed, Not(Claim.IsImplicit))]"
									texture = "gfx/interface/icons/title_status/icon_claim_pressed.dds"
									size = { 24 24 }
									parentanchor = bottom|right
								}

								highlight_icon = {
									name = "unpressed_claim"
									visible = "[And(Not(Claim.IsPressed), Not(Claim.IsImplicit))]"
									texture = "gfx/interface/icons/title_status/icon_claim_unpressed.dds"
									size = { 24 24 }
									parentanchor = bottom|right
								}

								highlight_icon = {
									name = "implicit_claim"
									visible = "[Claim.IsImplicit]"
									texture = "gfx/interface/icons/title_status/icon_claim_implicit.dds"
									size = { 24 24 }
									parentanchor = bottom|right
								}
							}
						}
					}
				}

				expand = { }
			}
		}

		expand = { }
	}

	type vbox_diplomacy_box = vbox {
		name = "diplomacy"

		button_standard_hover = {
			layoutpolicy_horizontal = expanding
			size = { 0 25 }
			onclick = "[CharacterWindow.ToggleExpandedDiplomacy]"
			down = "[CharacterWindow.AreDiplomacyExpanded]"
			tooltip = "[SelectLocalization( CharacterWindow.AreDiplomacyExpanded, 'CV_DIPLOMACY_HIDE_TT', 'CV_DIPLOMACY_SHOW_TT' )]"

			hbox = {
				margin = { 5 0 }
				margin_left = 10
				margin_bottom = 3

				text_label_left = {
					layoutpolicy_horizontal = expanding
					text = "CV_DIPLOMACY"
					autoresize = no
					margin_right = 0
				}
			}

			hbox = {
				margin = { 10 0 }
				margin_bottom = 3

				expand = { }

				text_single = {
					default_format = "#weak"

					block "diplomacy_extra_items"
					{
						visible = no
					}
				}
			}
		}

		vbox = {
			margin_top = 20
			min_width = 100

			fixedgridbox = {
				name = "diplomacy_items"
				datamodel = "[CharacterWindow.GetDiplomacyItems]"
				flipdirection = yes
				addrow = 65
				addcolumn = 50

				block "diplomacy_slots"
				{
					maxverticalslots = 2
					maxhorizontalslots = 2
					datamodel_wrap = 2
				}

				item = {
					container = {
						onmousehierarchyenter = "[DiplomacyItem.MouseEnter]"
						onmousehierarchyleave = "[DiplomacyItem.MouseLeave]"

						button = {
							visible = "[Not(DiplomacyItem.IsStruggle)]"
							parentanchor = top|hcenter
							position = { 0 -22 }
							texture = "gfx/interface/icons/diplomatic_icons.dds"
							frame = "[DiplomacyItem.GetDiplomacyFrame]"
							framesize = { 120 120 }
							size = { 50 50 }
							tooltip_enabled = no

							text_single = {
								name = "warscore"
								visible = "[DiplomacyItem.HasWarScore]"
								parentanchor = top|hcenter
								position = { 0 10 }
								text = "[DiplomacyItem.GetWarScoreFraction|0%=+]"
								fontsize = 13
							}
						}

						coa_realm_small = {
							visible = "[Not(DiplomacyItem.IsStruggle)]"
							datacontext = "[DiplomacyItem.GetTargetCharacter]"
							tooltip = "[DiplomacyItem.GetTooltip]"
							using = tooltip_es
							tooltip_offset = { 0 22 }
							onrightclick = "[DefaultOnRealmFlagClick(Character.GetID)]"

							state = {
								name = _mouse_hierarchy_enter
								start_sound = {
									soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
								}
							}

							blockoverride "coa_button"
							{
								onclick = "[DiplomacyItem.OnClick]"
								button_ignore = none
							}
						}

						button = {
							datacontext = "[DiplomacyItem.GetStruggle]"
							visible = "[DiplomacyItem.IsStruggle]"
							position = { 0 -3 }
							size = { 50 60 }
							onclick = "[DiplomacyItem.OnClick]"

							datacontext = "[DiplomacyItem.GetTargetCharacter]"
							tooltipwidget = struggle_tooltip;
							using = tooltip_es
							tooltip_offset = { 0 22 }

							icon = {
								name = "involved_banner"
								visible = "[Struggle.IsInvolvedCharacter(Character.Self)]"
								size = { 50 65 }
								texture = "gfx/interface/icons/struggle_banners/involved_banner_tiny.dds"
							}

							icon = {
								visible = "[Struggle.IsInvolvedCharacter(Character.Self)]"
								parentanchor = center
								position = { 0 2 }
								size = { 34 34 }
								texture = "gfx/interface/icons/struggle_banners/icon_background_02.dds"
							}

							icon = {
								name = "interloper_banner"
								visible = "[Struggle.IsInterloperCharacter(Character.Self)]"
								size = { 50 65 }
								texture = "gfx/interface/icons/struggle_banners/interloper_banner_tiny.dds"
							}

							icon = {
								visible = "[Struggle.IsInterloperCharacter(Character.Self)]"
								parentanchor = center
								position = { 0 2 }
								size = { 34 34 }
								texture = "gfx/interface/icons/struggle_banners/icon_background_01.dds"
							}

							icon = {
								parentanchor = center
								position = { 0 2 }
								size = { 30 30 }
								texture = "[Struggle.GetCurrentPhase.GetIcon]"
							}
						}
					}
				}
			}
		}

		expand = { }
	}

	type realm_name_and_type_vbox = vbox {
		layoutpolicy_horizontal = expanding

		hbox = {
			layoutpolicy_horizontal = expanding

			text_single = {
				name = "character_title"
				layoutpolicy_horizontal = expanding
				text = "[Title.GetNameNoTooltip|U]"
				default_format = "#medium"
				using = Font_Size_Medium
				max_width = 300
			}

			expand = { }
		}

		text_single = {
			name = "faction"
			visible = "[Title.HasFaction]"
			layoutpolicy_horizontal = expanding
			autoresize = no
			text = "CV_CIVIL_WAR_FACTION"
			default_format = "#low"
			align = nobaseline
			fontsize_min = 14
		}

		text_single = {
			name = "government_type"
			visible = "[Not( Title.HasFaction )]"
			layoutpolicy_horizontal = expanding
			autoresize = no
			text = "CV_REALM_TYPE"
			default_format = "#low"
			align = nobaseline
			fontsize_min = 14
		}
	}

	type char_name_age = button_text {
		blockoverride "text" {
			raw_text = "[Character.GetFirstNameNoTooltip], [Character.GetAge]"
		}
		using = char_click
	}

	type opinion_text = text_single {
		visible = "[And(Not(Character.IsLocalPlayer), CharacterWindow.GetCharacter.IsLocalPlayer)]"
		raw_text = ", opinion [Character.GetOpinionOf(GetPlayer)]"
		tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
	}

	type counties_tabs = hbox {
		spacing = 1
		layoutpolicy_horizontal = expanding

		hbox = {
			visible = "[And(Character.HasLandedTitles, Character.IsAlive)]"
			button_text = {
				block "hotkeys" {
					shortcut = speed_1
				}
				blockoverride "pre" {
					text_single = {
						block "hotkey" {
							visible = no
						}
						margin_right = 3
						raw_text = "Tab 1,"
					}
				}
				blockoverride "text" {
					raw_text = "[Character.RealmSize] counties."
				}
				onclick = "[GetVariableSystem.Set('expand_view', 'counties')]"
				onclick = "[GetVariableSystem.Clear('counties_tabs')]"
				onclick = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
				using = expanded_view
			}

			button_text = {
				block "hotkeys" {
					shortcut = speed_2
				}
				blockoverride "pre" {
					text_single = {
						block "hotkey" {
							visible = no
						}
						margin_right = 3
						raw_text = "Tab 2,"
					}
				}
				blockoverride "text" {
					raw_text = "[Character.GetDomainSize] holdings."
				}
				onclick = "[GetVariableSystem.Set('expand_view', 'counties')]"
				onclick = "[GetVariableSystem.Set('counties_tabs', 'holdings')]"
				onclick = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
				using = expanded_view
			}
		}

		button_text = {
			block "hotkeys" {
				shortcut = speed_3
			}
			blockoverride "pre" {
				text_single = {
					block "hotkey" {
						visible = no
					}
					margin_right = 3
					raw_text = "Tab 3,"
				}
			}
			blockoverride "text" {
				raw_text = "[GetDataModelSize(CharacterWindow.GetTitles)] titles."
			}
			using = expanded_view
			onclick = "[GetVariableSystem.Set('expand_view', 'counties')]"
			onclick = "[GetVariableSystem.Set('counties_tabs', 'titles')]"
			visible = "[GreaterThan_int32(GetDataModelSize(CharacterWindow.GetTitles), '(int32)0' )]"
		}

		button_text = {
			block "hotkeys" {
				shortcut = speed_4
			}
			blockoverride "pre" {
				text_single = {
					block "hotkey" {
						visible = no
					}
					margin_right = 3
					raw_text = "Tab 4,"
				}
			}
			blockoverride "text" {
				raw_text = "[GetDataModelSize(CharacterWindow.GetClaims)] claims."
			}
			using = expanded_view
			onclick = "[GetVariableSystem.Set('expand_view', 'counties')]"
			onclick = "[GetVariableSystem.Set('counties_tabs', 'claims')]"
			visible = "[DataModelHasItems(CharacterWindow.GetClaims)]"
		}

		block "hotkey" {
		}

		expand = { }
	}

	type personality_vbox = vbox {
	# traits
		layoutpolicy_horizontal = expanding
		# spacing = 5

		button_text = {
			shortcut = speed_3
			block "details" { }
			layoutpolicy_horizontal = expanding
			onclick = "[GetVariableSystem.Set('expand_view', 'personality')]"
			blockoverride "text" {
				raw_text = "Personality, hotkey 3."
			}
		}

		hbox = {
		    layoutpolicy_horizontal = expanding

			text_single = {
				layoutpolicy_horizontal = expanding
				raw_text = "[Character.GetAIPersonalityNoTooltip]."
				tooltip = "AI_PERSONALITY_TT"
				visible = "[Not(Has('expand_view', 'personality'))]"
			}

			text_multi_wide = {
				layoutpolicy_horizontal = expanding
				visible = "[Has('expand_view', 'personality')]"
				raw_text = "AI_PERSONALITY_TT"
			}

			visible = "[And(And(Not( Character.IsPlayer ), Not(GetVariableSystem.HasValue('personality_view', 'traits'))), Not(GetVariableSystem.HasValue('personality_view', 'skills')))]"

		    expand = { }
		}

		button = {
			shortcut = close_window
			visible = "[GetVariableSystem.Exists('personality_view')]"
			onclick = "[GetVariableSystem.Clear('personality_view')]"
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(GetVariableSystem.Exists('personality_view'))]"
			# faith
			vbox = {
				layoutpolicy_horizontal = expanding

				#faith
				flowcontainer = {
					layoutpolicy_horizontal = expanding

					text_single = {
						datacontext = "[Character.GetFaith]"
						raw_text = "[Faith.GetAdjective], F"
						tooltipwidget = { faith_tooltip_click = { } }
					}

					text_single = {
						datacontext = "[Character.GetCulture]"
						raw_text = ", [Culture.GetName], C."
						tooltipwidget = { culture_tooltip_click = { } }
					}

					button_text = {
						blockoverride "text" {
							# raw_text = "Faith hotkey F."
						}
						datacontext = "[Character.GetFaith]"
						shortcut = army_split_half
						onclick = "[OpenGameViewData( 'faith', Faith.GetID )]"
					}

					button_text = {
						datacontext = "[Character.GetCulture]"
						blockoverride "text" {
							raw_text = "[Culture.GetName]"
						}
						visible = "[IsGameViewOpen('character_finder')]"
						onclick = "[OpenGameViewData( 'culture_window', Culture.GetID )]"
					}

					button_text = {
						datacontext = "[Character.GetCulture]"
						blockoverride "text" {
							# raw_text = "Culture hotkey C."
							tooltipwidget = {
								culture_tooltip_click = { }
							}
						}
						visible = "[Not(IsGameViewOpen('character_finder'))]"
						shortcut = character_finder
						onclick = "[OpenGameViewData( 'culture_window', Culture.GetID )]"
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				block "details" {
					visible = "[GreaterThan_int32(GetDataModelSize(Character.GetKnownLanguages), '(int32)1')]"
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Known [languages|E]: [Character.GetKnownLanguagesString]."
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Current [language_limit|E]: [Character.MakeScope.ScriptValue('current_extra_languages')|V0] out of [Character.MakeScope.ScriptValue('language_soft_cap')|V0]."
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				block "hide" {
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Known [languages|E]: [Character.GetKnownLanguagesString]."
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Current [language_limit|E]: [Character.MakeScope.ScriptValue('current_extra_languages')|V0] out of [Character.MakeScope.ScriptValue('language_soft_cap')|V0]."
				}
			}

			# personality
			hbox = {
				visible = "[Isnt('expand_view')]"
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterWindow.GetTraitArrays]"

				hbox = {
					datamodel = "[TraitArrays.GetPersonalityTraits]"
					spacing = 3

					item = {
						text_single = {
							datacontext = "[Character.GetFaith]"
							raw_text = "[Trait.GetName(Character.Self)][AddTextIf(Faith.IsTraitVirtue( Trait.Self ), ' (virtue)')][AddTextIf(Faith.IsTraitSin( Trait.Self ), ' (sin)')],"
							# [AddTextIf(Faith.IsTraitVirtue( Trait.Self ), ' (virtue)')][AddTextIf(Faith.IsTraitSin( Trait.Self ), ' (sin)')].
						}
					}
				}
				expand = { }
			}
		}

		# skills
		vbox = {
			visible = "[Or(Not(GetVariableSystem.Exists('personality_view')), GetVariableSystem.HasValue('personality_view', 'skills'))]"
			layoutpolicy_horizontal = expanding

			button_text = {
				layoutpolicy_horizontal = expanding
				block "hide" { }
				blockoverride "text" {
					raw_text = "Skills."
				}
				blockoverride "extra" {
					text_single = {
						visible = "[Not(GetVariableSystem.HasValue('personality_view', 'skills'))]"
						raw_text = "Hotkey 1."
					}
				}
				block "hotkeys" {
					shortcut = speed_1
				}
				onclick = "[GetVariableSystem.Set('expand_view', 'personality')]"
				onclick = "[GetVariableSystem.Set('personality_view', 'skills')]"
			}

			hbox = {
				visible = "[Not(GetVariableSystem.HasValue('personality_view', 'skills'))]"
				layoutpolicy_horizontal = expanding
				spacing = 3

				hbox = {
					name = "skills_grid"
					datamodel = "[CharacterWindow.GetSkills]"
					spacing = 3
					item = {
						container = {
							text_single = {
								raw_text = "[SkillItem.GetName] [SkillItem.GetValue|+],"
								alwaystransparent = yes
								default_format = "#high"
							}

							widget = {
								size = { 100% 100% }
								tooltip = "SKILL_ITEM_TOOLTIP"

								block_tooltip = { }
							}
						}
					}
				}

				text_single = {
					using = tooltip_ne
					tooltip = "[CharacterWindow.GetCharacter.GetProwessBreakdown]"
					raw_text = "Prowess [CharacterWindow.GetCharacter.GetProwess|0]."
					default_format = "#high"
				}

				expand = { }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				block "hide" {
					visible = "[GetVariableSystem.HasValue('personality_view', 'skills')]"
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					name = "skills_grid"
					datamodel = "[CharacterWindow.GetSkills]"

					item = {
						text_single = {
							layoutpolicy_horizontal = expanding
							raw_text = "[SkillItem.GetName] [SkillItem.GetValue|+],"
							alwaystransparent = yes

							widget = {
								size = { 100% 100% }
								tooltip = "SKILL_ITEM_TOOLTIP"

								block_tooltip = { }
							}
						}
					}
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					tooltip = "[CharacterWindow.GetCharacter.GetProwessBreakdown]"
					raw_text = "Prowess [CharacterWindow.GetCharacter.GetProwess|0]."
				}

				expand = { }
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(GetVariableSystem.Exists('personality_view'))]"

			button_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					raw_text = "Lifestyle, [CharacterWindow.GetCharacter.GetFocus.GetName]."
				}
				blockoverride "extra" {
					text_single = {
						raw_text = "Can't open"
						visible = "[Not(CharacterWindow.CanClickFocusButton)]"
					}
					text_single = {
						visible = "[CharacterWindow.CanClickFocusButton]"
						raw_text = "Control F."
					}
				}
				visible = "[Character.PlayerCanManageFocus]"
				onclick = "[CharacterWindow.OnClickFocusButton]"
				enabled = "[CharacterWindow.CanClickFocusButton]"
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				visible = "[Character.HasSexuality]"
				raw_text = "[Character.GetSexuality]."
			}
		}

		# Traits
		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[Or(Not(GetVariableSystem.Exists('personality_view')), GetVariableSystem.HasValue('personality_view', 'traits'))]"

			vbox = {
				visible = "[Is('expand_view')]"
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterWindow.GetTraitArrays]"

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Personaity:"
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					datamodel = "[TraitArrays.GetPersonalityTraits]"

					item = {
						text_single = {
							layoutpolicy_horizontal = expanding
							datacontext = "[Character.GetFaith]"
							raw_text = "[Trait.GetName(Character.Self)][AddTextIf(Faith.IsTraitVirtue( Trait.Self ), ' (virtue)')][AddTextIf(Faith.IsTraitSin( Trait.Self ), ' (sin)')],"
							# [AddTextIf(Faith.IsTraitVirtue( Trait.Self ), ' (virtue)')][AddTextIf(Faith.IsTraitSin( Trait.Self ), ' (sin)')].
						}
					}
				}
				expand = { }
			}

			vbox = {
				datacontext = "[CharacterWindow.GetTraitArrays]"
				layoutpolicy_horizontal = expanding
				visible = "[DataModelHasItems(TraitArrays.GetTraits)]"

				button_text = {
					layoutpolicy_horizontal = expanding
				    blockoverride "text" {
						raw_text = "[GetDataModelSize(TraitArrays.GetTraits)] traits."
				    }
					blockoverride "extra" {
						text_single = {
							block "hide" {
								visible = "[Not(GetVariableSystem.HasValue('personality_view', 'traits'))]"
							}
							raw_text = "Hotkey 2."
						}
					}
					block "hotkeys" {
						shortcut = speed_2
					}
					onclick = "[GetVariableSystem.Set('expand_view', 'personality')]"
					onclick = "[GetVariableSystem.Set('personality_view', 'traits')]"
				}

				fixedgridbox = {
					datamodel = "[TraitArrays.GetTraits]"
					layoutpolicy_horizontal = expanding
					addrow = 23
					addcolumn = 500
					block "slots" {
					}
					item = {
						text_single = {
							raw_text = "[Trait.GetName(Character.Self)]."
							margin_right = 10
							using = tooltip_se
						}
					}
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					block "details" {
						visible = "[GreaterThan_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)5')]"
					}
				    blockoverride "text" {
				        raw_text = "View [Subtract_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)5')] more.  Hotkey 3, 2."
				    }
					onclick = "[GetVariableSystem.Set('expand_view', 'personality')]"
					onclick = "[GetVariableSystem.Set('personality_view', 'traits')]"
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[Or(Not(GetVariableSystem.Exists('personality_view')), GetVariableSystem.HasValue('personality_view', 'modifiers'))]"

			vbox = {
				visible = "[Not(IsDataModelEmpty(CharacterWindow.GetTimedModifiers))]"
				layoutpolicy_horizontal = expanding

				button_text = {
					layoutpolicy_horizontal = expanding
				    blockoverride "text" {
						raw_text = "[GetDataModelSize(CharacterWindow.GetTimedModifiers)] Modifiers."
				    }
					blockoverride "extra" {
						text_single = {
							block "hide" {
								visible = "[Not(GetVariableSystem.HasValue('personality_view', 'modifiers'))]"
							}
							raw_text = "Hotkey 3."
						}
					}
					block "hotkeys" {
						shortcut = speed_3
					}
					onclick = "[GetVariableSystem.Set('expand_view', 'personality')]"
					onclick = "[GetVariableSystem.Set('personality_view', 'modifiers')]"
				}

				fixedgridbox = {
					name = "modifiers_grid"
					datamodel = "[CharacterWindow.GetTimedModifiers]"
					layoutpolicy_horizontal = expanding
					addrow = 23
					addcolumn = 500
					block "modifier slots" {
					}
					item = {
						text_single = {
							raw_text = "[ModifierItem.GetName]."
							tooltip = "[ModifierItem.GetTooltip]"
							margin_right = 10
						}
					}
				}
				button_text = {
					layoutpolicy_horizontal = expanding
					block "details" {
						visible = "[GreaterThan_int32(GetDataModelSize(CharacterWindow.GetTimedModifiers), '(int32)3')]"
					}
				    blockoverride "text" {
				        raw_text = "View [Subtract_int32(GetDataModelSize(CharacterWindow.GetTimedModifiers), '(int32)3')] more. Hotkey 3, 3."
				    }
					onclick = "[GetVariableSystem.Set('expand_view', 'personality')]"
					onclick = "[GetVariableSystem.Set('personality_view', 'modifiers')]"
				}
			}
		}

		# health
		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(GetVariableSystem.Exists('personality_view'))]"
			hbox = {
				spacing = 3
				layoutpolicy_horizontal = expanding
				ignoreinvisible = yes
				hbox = {
					spacing = 3
					visible = "[And(Not(Character.IsDeadAndValid), GreaterThan_int32(Character.GetStress, '(int32)0'))]"
					text_single = {
						raw_text = "Stress level: [Character.GetStressLevel],"
						tooltip = "[Character.GetHealthInfo]"
					}

					text_single = {
						raw_text = "[GetPlayer.GetStressProgress]% to next level."
					}

					text_single = {
						raw_text = "Stress: [Character.GetStress]."
						tooltip = "[Character.GetHealthInfo]"
					}
				}

				expand = { }
			}
		}
	}

	type character_name_text = text_single {
		name = "character_name"
		raw_text = "[Character.GetTitledFirstNameNicknamedNoTooltipRegnal],"
		max_width = 370
		fontsize_min = 14
	}

	type spouse_vbox = vbox {
		# visible = "[CharacterWindow.ShouldShowSpouses]"
		layoutpolicy_horizontal = expanding

		#TODO
		# visible = "[CharacterWindow.ShouldShowSpouseButtons]"
		text_single = {
			layoutpolicy_horizontal = expanding
			raw_text = "No spouse."
			visible = "[And(Not(Character.IsPlayerInteractionValid('marry_off_interaction')), Not(Character.GetPrimarySpouseOrBetrothed.IsValid))]"
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			datacontext = "[CharacterWindow.GetSecondaryCharater]"

			char_name = {
				layoutpolicy_horizontal = expanding
				blockoverride "pre" {
					flowcontainer = {
					    ignoreinvisible = yes
					    spacing = 3
						margin_right = 3
						text_single = {
							raw_text = "[AddTextIf(Character.IsDeadAndValid, 'Dead ')]"
						}

						text_single = {
							raw_text = "[CharacterWindow.GetSecondaryText],"
							visible = "[And(CharacterWindow.GetCharacter.HasActiveDiarchy, Not(CharacterWindow.ShowMarriageIcon))]"
							tooltip = IN_ACTIVE_DIARCHY
						}
						text_single = {
							raw_text = "[CharacterWindow.GetSecondaryText],"
							visible = "[CharacterWindow.ShowMarriageIcon]"
							tooltip = "[CharacterWindow.GetMarriageIconTooltip]"
						}
					}
				}
				blockoverride "extra" {
					flowcontainer = {
					    ignoreinvisible = yes
						visible = "[Character.IsValid]"

						text_single = {
							raw_text = "[Character.GetAge]"
						}
						opinion_text = { }
						dot = { }
					}
				}
			}
			button_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					raw_text = "View previous."
				}
				visible = "[CharacterWindow.HasPreviousSecondary]"
				onclick = "[CharacterWindow.PreviousSecondary]"
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					raw_text = "View next."
				}
				visible = "[CharacterWindow.HasNextSecondary]"
				onclick = "[CharacterWindow.NextSecondary]"
			}
		}


		expand = { }
	}

	type close_relations_vbox = vbox {
		layoutpolicy_horizontal = expanding
		# player heir
		hbox = {
			datacontext = "[CharacterWindow.GetCharacter.GetPlayerHeir]"
			visible = "[And( Character.IsValid, CharacterWindow.GetCharacter.IsLocalPlayer )]"
			layoutpolicy_horizontal = expanding

			char_name = {
				shortcut = "zoom_in"
				blockoverride "pre" {
					text_single = {
						raw_text = "Your heir,"
						margin_right = 3
					}
				}
				blockoverride "extra" {
					text_single = {
						raw_text = "[Character.GetAge]"
					}
					opinion_text = { }
					text_single = {
						raw_text = ", Page Down."
					}
				}
			}
			expand = { }
		}
		# heir
		hbox = {
			datacontext = "[CharacterWindow.GetCharacter.GetPrimaryTitle.GetHeir]"
			visible = "[And( And( Character.IsValid, Not(CharacterWindow.GetCharacter.IsLocalPlayer) ), CharacterWindow.GetCharacter.IsAlive )]"
			layoutpolicy_horizontal = expanding
			spacing = 3


			char_name = {
				shortcut = "zoom_in"
				blockoverride "pre" {
					spacing = 3
					text_single = {
						raw_text = "Heir,"
					}
				}
			}

			text_single = {
				raw_text = "Page Down."
			}
			expand = { }
		}
		# spouse
		vbox = {
			layoutpolicy_horizontal = expanding

			spouse_vbox = { }
		}
	}
}

template Animation_Character_Window_Refresh
{
	state = {
		name = character_window_refresh
		using = Animation_Refresh_FadeOut
		alpha = 0.65
	}

	state = {
		using = Animation_Refresh_FadeIn
	}
}

template Animation_Character_Window_Refresh_Short
{
	state = {
		name = character_window_refresh
		using = Animation_Refresh_FadeOut
		alpha = 0.8
	}

	state = {
		using = Animation_Refresh_FadeIn
		duration = 0.25
	}
}
template Character_Window_Relation_Icon
{
	size = { 24 24 }
	framesize = { 40 40 }

	visible = "[ScriptedRelation.HasRelationBetween( CharacterWindow.GetCharacter, Character.Self )]"

	tooltipwidget = {
		scripted_relation_tooltip = {
			blockoverride "description_text"
			{
				text = "[GetScriptedRelationTooltip( ScriptedRelation, CharacterWindow.GetCharacter, Character )]"
			}
		}
	}
}
template "expanded_view" {
	onclick = "[GetScriptedGui('expanded_view').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
	onclick = "[GetScriptedGui('holdings_list').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
}
