widget = {
	name = "outliner_window"
	parentanchor = top
	size = { 100% 100% }
	alwaystransparent = yes
	filter_mouse = all
	layer = top

	state = {
		name = _show
		alpha = 1
		on_start = "[GetVariableSystem.Set( 'cycle_army_selected', 'true' )]"
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_outliner_show"
		}
	}

	state = {
		name = _hide
		# using = Animation_FadeOut_Standard
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_outliner_hide"
		}
	}

	state = {
		name = pause_update
		trigger_when = "[IsGamePaused]"

		on_start = "[GetScriptedGui('sort_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'location', GetPlayer.GetCapitalLocation.MakeScope ).End )]"
		# remove units that are not hostile to us anymore
		# on_start = "[GetScriptedGui('clear_dead_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"

		# next = a
	}

	state = {
		name = "hide_outliner"
		using = Animation_FadeOut_Standard
		trigger_when = "[Not(IsDefaultGUIMode)]"
	}

	state = {
		name = "show_outliner"
		using = Animation_FadeIn_Quick
		trigger_when = "[IsDefaultGUIMode]"
	}

	window = {
		using = base_ocr_window
		visible = "[And( Not(IsGameViewOpen('barbershop')), And( Not( IsPauseMenuShown ), Not(IsRightWindowOpen) ) )]"

		window_ocr = {
			blockoverride "ocr_header" {

				button = {
					onclick = "[ToggleGameView('outliner')]"
					shortcut = close_window
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Outliner."
					}
					onclick = "[GetScriptedGui('sort_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'location', GetPlayer.GetCapitalLocation.MakeScope ).End )]"
					shortcut = map_mode_11
				}

				# unit hotkeys
				widget = {
					size = { 1 5 }
					visible = "[DataModelHasItems(Outliner.GetUnitItems)]"

					scissor = yes

					fixedgridbox = {
						size = { 0 0 }
						addrow = 0
						addcolumn = 0
						maxverticalslots = 1
						datamodel = "[Outliner.GetUnitItems]"

						item = {
							button = {
								size = { 0 0 }
								raw_text = "unit"
								onclick = "[PdxGuiWidget.TriggerAnimation('select_first_army')]"
								shortcut = mapmode_duchies_secondary

								state = {
									name = select_first_army
									on_start = "[UnitItem.SelectUnit]"
									# on_start = "[UnitItem.PanToUnit]"
									# on_start = "[DefaultOnCoatOfArmsRightClick(UnitItem.GetArmy.GetLocation.GetCoATitle.GetID)]"
									on_start = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"
									on_finish = "[Outliner.Close]"
								}
							}
						}
					}

					fixedgridbox = {
						size = { 0 0 }
						addrow = 1
						addcolumn = 1
						maxverticalslots = 5
						datamodel = "[Outliner.GetUnitItems]"
						visible = "[GreaterThan_int32(GetDataModelSize(Outliner.GetUnitItems), '(int32)4')]"

						item = {
							button = {
								shortcut = speed_5
								onclick = "[UnitItem.SelectAndPanUnit]"
								# onclick = "[UnitItem.PanToUnit]"
								# onclick = "[DefaultOnCoatOfArmsRightClick(UnitItem.GetArmy.GetLocation.GetCoATitle.GetID)]"
								onclick = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"
								onclick = "[Outliner.Close]"
							}
						}
					}

					fixedgridbox = {
						size = { 0 0 }
						addrow = 1
						addcolumn = 1
						maxverticalslots = 4
						datamodel = "[Outliner.GetUnitItems]"
						visible = "[GreaterThan_int32(GetDataModelSize(Outliner.GetUnitItems), '(int32)3')]"

						item = {
							button = {
								shortcut = speed_4
								onclick = "[UnitItem.SelectAndPanUnit]"
								# onclick = "[UnitItem.PanToUnit]"
								# onclick = "[DefaultOnCoatOfArmsRightClick(UnitItem.GetArmy.GetLocation.GetCoATitle.GetID)]"
								onclick = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"
								onclick = "[Outliner.Close]"
							}
						}
					}

					fixedgridbox = {
						size = { 0 0 }
						addrow = 1
						addcolumn = 1
						maxverticalslots = 3
						datamodel = "[Outliner.GetUnitItems]"
						visible = "[GreaterThan_int32(GetDataModelSize(Outliner.GetUnitItems), '(int32)2')]"

						item = {
							button = {
								shortcut = speed_3
								onclick = "[UnitItem.SelectAndPanUnit]"
								# onclick = "[UnitItem.PanToUnit]"
								# onclick = "[DefaultOnCoatOfArmsRightClick(UnitItem.GetArmy.GetLocation.GetCoATitle.GetID)]"
								onclick = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"
								onclick = "[Outliner.Close]"
							}
						}
					}

					fixedgridbox = {
						size = { 0 0 }
						addrow = 1
						addcolumn = 1
						maxverticalslots = 2
						datamodel = "[Outliner.GetUnitItems]"
						visible = "[GreaterThan_int32(GetDataModelSize(Outliner.GetUnitItems), '(int32)1')]"

						item = {
							button = {
								shortcut = speed_2
								onclick = "[UnitItem.SelectAndPanUnit]"
								# onclick = "[UnitItem.PanToUnit]"
								# onclick = "[DefaultOnCoatOfArmsRightClick(UnitItem.GetArmy.GetLocation.GetCoATitle.GetID)]"
								onclick = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"
								onclick = "[Outliner.Close]"
							}
						}
					}

					fixedgridbox = {
						size = { 0 0 }
						addrow = 1
						addcolumn = 1
						maxverticalslots = 1
						datamodel = "[Outliner.GetUnitItems]"

						item = {
							button = {
								shortcut = speed_1
								onclick = "[UnitItem.SelectAndPanUnit]"
								# onclick = "[UnitItem.PanToUnit]"
								# onclick = "[DefaultOnCoatOfArmsRightClick(UnitItem.GetArmy.GetLocation.GetCoATitle.GetID)]"
								onclick = "[PdxGuiTriggerAllAnimations('refresh_first_army')]"
								onclick = "[Outliner.Close]"
							}
						}
					}
				}
			}

			blockoverride "ocr_scrollbox" {
				scrollbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					blockoverride "scrollbox_margins" {
						margin_top = 20
					}
					blockoverride "scrollbox_content" {
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							margin = { 10 0 }

							button_outliner_header = {
								name = "pinned_characters_header"
								layoutpolicy_horizontal = expanding
								visible = "[Not(IsDataModelEmpty(Outliner.GetPinnedCharacters))]"

								blockoverride "button_expand_frame"
								{
									frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
								}

								blockoverride "oh_button"
								{
									onclick = "[Outliner.ToggleCategory('pinned_character')]"
									# tooltip = "[SelectLocalization( Outliner.IsCategoryShown('pinned_character'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
								}

								widget = {
									visible = "[Outliner.IsCategoryShown('pinned_character')]"
									state = {
										trigger_when = "[Is('close_outliner_categories')]"
										name = close_me
										on_finish = "[Outliner.ToggleCategory('pinned_character')]"
									}
								}

								blockoverride "oh_toggle_frame"
								{
									frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
								}

								blockoverride "oh_name"
								{
									raw_text = "Pinned character[AddTextIf(GreaterThan_int32(Outliner.GetCategoryItemsCount('pinned_character'), '(int32)1'), 's')]"
								}

								blockoverride "oh_count"
								{
									text = "[Outliner.GetCategoryItemsCount('pinned_character')|V]"
								}

								blockoverride "expanded"
								{
									frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
								}
								blockoverride "extra" {
									text_single = {
										raw_text = ", [CollapseIf(Not(Outliner.IsCategoryShown('pinned_character')))]"
									}
								}
							}

							vbox = {
								name = "pinned_characters"
								visible = "[Outliner.IsCategoryShown('pinned_character')]"
								datamodel = "[Outliner.GetPinnedCharacters]"
								layoutpolicy_horizontal = expanding
								margin = { 5 5 }

								item = {
									button_text = {
										layoutpolicy_horizontal = expanding
										onclick = "[DefaultOnCharacterClick(Character.GetID)]"
										onclick = "[CloseGameView('outliner')]"
										onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
										# using = character_tooltip
										blockoverride "pre" {
											button_text = {
												visible = "[Character.IsDeadAndValid]"
												onclick = "[Character.ToggleCharacterPinned]"
											    blockoverride "text" {
											        raw_text = "Unpin"
											    }
											}
											text_single = {
												visible = "[Character.IsDeadAndValid]"
												raw_text = "Dead,"

											}
										}
										blockoverride "text" {
											raw_text = "[Character.GetUINameNoTooltip], [Character.GetAge]."
										}
										blockoverride "extra" {
											spacing = 3
											text_single = {
												visible = "[Character.IsAlive]"
												raw_text = "Opinion [Character.GetOpinionOf( GetPlayer )|=]."
											}
											text_single = {
												raw_text = "[Character.GetRelationToString( GetPlayer )]."
												tooltip = "EXTENDED_RELATIONS_TOOLTIP"
											}
										}
									}
								}
							}

							button_outliner_header = {
								name = "players_header"
								layoutpolicy_horizontal = expanding
								visible = "[GameHasMultiplePlayers]"

								blockoverride "button_expand_frame"
								{
									frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
								}

								blockoverride "oh_button"
								{
									onclick = "[Outliner.ToggleCategory('players')]"
									tooltip = "[SelectLocalization( Outliner.IsCategoryShown('players'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
								}

								widget = {
									visible = "[Outliner.IsCategoryShown('players')]"
									state = {
										trigger_when = "[Is('close_outliner_categories')]"
										name = close_me
										on_finish = "[Outliner.ToggleCategory('players')]"
									}
								}

								blockoverride "oh_toggle_frame"
								{
									frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
								}

								blockoverride "oh_name"
								{
									text = "OUTLINER_PLAYERS"
								}

								blockoverride "oh_count"
								{
									text = "[Outliner.GetCategoryItemsCount('players')|V]"
								}

								blockoverride "expanded"
								{
									frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
								}
							}

							vbox = {
								visible = "[GetPlayer.IsValid]"
								layoutpolicy_horizontal = expanding

								vbox = {
									name = "players"
									datamodel = "[Outliner.GetPlayers]"
									visible = "[And( Outliner.IsCategoryShown('players'), GameHasMultiplePlayers )]"
									layoutpolicy_horizontal = expanding
									margin = { 8 5 }
									spacing = 5

									item = {
										button_list = {
											name = "player_button"
											datacontext = "[OutlinerPlayer.GetCharacter]"
											layoutpolicy_horizontal = expanding
											size = { 0 40 }

											enabled = "[Character.IsValid]"
											onclick = "[DefaultOnCharacterClick(Character.GetID)]"
											down = "[Character.IsShownInCharacterWindow]"
											onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
											button_ignore = none

											hbox = {
												spacing = 5
												margin = { 5 0 }

												coa_realm_tiny = {
													visible = "[Character.HasLandedTitles]"
												}

												using = character_tooltip

												using = tooltip_ws

												text_single = {
													name = "player_name"
													layoutpolicy_horizontal = expanding
													text = "[OutlinerPlayer.GetName]"
													default_format = "#high"
													using = Font_Size_Medium
													align = left
												}
											}
										}
									}
								}

								battles_categories = {
									blockoverride "click" {
										datacontext = "[Province.GetCounty.GetTitle]"
										using = title_pan
									}
									blockoverride "distance" {
										raw_text = "OutlinerProvinceDistance"
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									#TODO

									button_outliner_header = {
										name = "units_header"
										layoutpolicy_horizontal = expanding
										visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(Outliner.GetUnitItems)))]"


										blockoverride "oh_button"
										{
											onclick = "[Outliner.ToggleCategory('unit')]"
											oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
											clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
										}

										widget = {
											visible = "[Outliner.IsCategoryShown('unit')]"
											state = {
												trigger_when = "[Is('close_outliner_categories')]"
												name = close_me
												on_finish = "[Outliner.ToggleCategory('unit')]"
											}
										}

										blockoverride "oh_name"
										{
											raw_text = ""
										}
										blockoverride "extra" {
											text_single = {
												visible = "[GreaterThan_int32(GetDataModelSize(Outliner.GetUnitItems), '(int32)1')]"
												raw_text = "[Outliner.GetCategoryItemsCount('unit')]"
											}
											text_single = {
												raw_text = "army"
												visible = "[EqualTo_int32(GetDataModelSize(Outliner.GetUnitItems), '(int32)1')]"
											}
											text_single = {
												raw_text = " armies"
												visible = "[GreaterThan_int32(GetDataModelSize(Outliner.GetUnitItems), '(int32)1')]"
											}
											text_single = {
												raw_text = ", [CollapseIf(Not(Outliner.IsCategoryShown('unit')))]"
												# visible = "[GreaterThan_int32(GetDataModelSize(Outliner.GetUnitItems), '(int32)1')]"
												align = left
											}
										}

										blockoverride "oh_count"
										{
											raw_text = "Your"
										}
										blockoverride "expanded"
										{
											frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
										}
									}

									expand = { }
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[And(Outliner.IsCategoryShown('unit'), GetPlayer.IsValid)]"

									vbox = {
										name = "units"
										datamodel = "[Outliner.GetUnitItems]"
										layoutpolicy_horizontal = expanding
										margin = { 8 0 }

										item = {
											army_button_o = {
												blockoverride "war_filter" {
												}
												blockoverride "context" {
													datacontext = "[UnitItem.GetArmy]"
												}
												blockoverride "your_allies" {
													visible = no
												}
												blockoverride "grouping" {
												}
												blockoverride "click" {
													onclick = "[UnitItem.SelectAndPanUnit]"
													onclick = "[ToggleGameView('outliner')]"
													# # onclick = "[UnitItem.PanToUnit]"
													onrightclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
													# onrightclick = "[UnitItem.PanToUnit]"
													down = "[UnitItem.IsSelected]"
													button_ignore = none
												}
												# blockoverride "position" {
												# 	visible = "[UnitItem.IsSelected]"
												# }
												# blockoverride "same_position" {
												# 	visible = "[Not(UnitItem.IsSelected)]"
												# }
											}
										}

									}

									vbox = {
										visible = "[DataModelHasItems(Outliner.GetUnitItems)]"
										layoutpolicy_horizontal = expanding
										margin_left = 15
										text_single = {
											layoutpolicy_horizontal = expanding
											raw_text = "Numbers from 1 to 5 select your armies."
										}
									}
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									margin_top = 5
									margin_left = 15
									visible = "[And(GetScriptedGui('should_show_any_armies').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ), Or(Or(Isnt('hostiles_inside'), Isnt('hostiles_inside_liege')), Isnt('in_the_fog')))]"

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "Foreign armies."
									}

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "Sorted [Select_CString(GetScriptedGui('army_sorting').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ), 'by size', 'by distance')], grouped by [GetPlayer.Custom('army_grouping')]."
									}

								}

								outliner_armies = { }

								button_outliner_header = {
									name = "holdings_header"
									layoutpolicy_horizontal = expanding
									visible = "[GetPlayer.IsValid]"

									blockoverride "button_expand_frame"
									{
										frame = "[BoolTo1And2(Outliner.IsCategoryShown('holding'))]"
									}

									blockoverride "oh_button"
									{
										onclick = "[Outliner.ToggleCategory('holding')]"
										# tooltip = "[SelectLocalization( Outliner.IsCategoryShown('holding'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
									}

									widget = {
										visible = "[Outliner.IsCategoryShown('holding')]"

										state = {
											name = close_me
											trigger_when = "[Is('close_outliner_categories')]"
											on_finish = "[Outliner.ToggleCategory('holding')]"
										}
									}


									blockoverride "oh_name"
									{
										text = "OUTLINER_HOLDINGS"
									}
									blockoverride "extra" {
										text_single = {
											raw_text = ", [CollapseIf(Not(Outliner.IsCategoryShown('holding')))]"
										}
									}

									blockoverride "oh_count"
									{
										text = "[Outliner.GetCategoryItemsCount('holding')|V]"
									}

									blockoverride "expanded"
									{
										frame = "[BoolTo1And2(Outliner.IsCategoryShown('holding'))]"
									}
								}

								vbox = {
									name = "holdings"
									datamodel = "[Outliner.GetHoldingItems]"
									visible = "[Outliner.IsCategoryShown('holding')]"
									layoutpolicy_horizontal = expanding
									margin = { 8 5 }
									margin_bottom = 10

									item = {
										button_outliner_province = {}
									}
								}
								# pinned provinces

								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('outliner_provinces'))]"

									button_outliner_header = {
										layoutpolicy_horizontal = expanding

										blockoverride "button_expand_frame"
										{
										}

										blockoverride "oh_button"
										{
											onclick = "[Click('outliner_provinces')]"
											oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
											clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
										}

										state = {
											name = close_outliner_categories
											on_finish = "[Click('close_outliner_provinces')]"
										}

										blockoverride "oh_toggle_frame"
										{
										}

										blockoverride "oh_name"
										{
											raw_text = "pinned province[Select_CString(GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('outliner_provinces')), '(int32)1'), 's', '')],"
											margin_right = 3
										}

										blockoverride "extra" {
											text_single = {
												raw_text = "[CollapseIf(Show('outliner_provinces'))]"
											}
										}

										blockoverride "oh_count"
										{
											raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('outliner_provinces'))]"
										}
										blockoverride "expanded"
										{
										}
										blockoverride "o_dot" {
											visible = no

										}
									}

									vbox = {
										datamodel = "[GetPlayer.MakeScope.GetList('outliner_provinces')]"
										visible = "[Not(Show('outliner_provinces'))]"
										layoutpolicy_horizontal = expanding
										margin = { 8 0 }
										spacing = -2

										item = {
											button_outliner_province = {
												blockoverride "datacontext" {
													datacontext = "[Scope.GetProvince]"
													datacontext = "[Province.GetHolding]"
													datacontext = "[Province.GetCounty.GetTitle]"
													using = prov_click
													# using = prov_pan_right
													# button_ignore = none
													onrightclick = "[ClickAdd('add_province_to_outliner', GetPlayer, Province)]"
												}
												blockoverride "county" {
												}
												blockoverride "sea" {

												}
											}
										}
									}

									text_single = {
										visible = "[Not(Show('outliner_provinces'))]"
										layoutpolicy_horizontal = expanding
										raw_text = "Right click to unpin."
										margin_left = 10
									}
								}

								# pinned titles

								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('outliner_titles'))]"

									button_outliner_header = {
										layoutpolicy_horizontal = expanding

										blockoverride "button_expand_frame"
										{
										}

										blockoverride "oh_button"
										{
											onclick = "[Click('outliner_titles')]"
											oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
											clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
										}

										state = {
											name = close_outliner_categories
											on_finish = "[Click('close_outliner_titles')]"
										}

										blockoverride "oh_toggle_frame"
										{
										}

										blockoverride "oh_name"
										{
											raw_text = "pinned title[Select_CString(GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('outliner_titles')), '(int32)1'), 's', '')],"
											margin_right = 3
										}

										blockoverride "extra" {
											text_single = {
												raw_text = "[CollapseIf(Show('outliner_titles'))]"
											}
										}

										blockoverride "oh_count"
										{
											raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('outliner_titles'))]"
										}
										blockoverride "expanded"
										{
										}
										blockoverride "o_dot" {
											visible = no

										}
									}

									vbox = {
										datamodel = "[GetPlayer.MakeScope.GetList('outliner_titles')]"
										visible = "[Not(Show('outliner_titles'))]"
										layoutpolicy_horizontal = expanding
										margin = { 8 0 }
										spacing = -2

										item = {
											button_text = {
												layoutpolicy_horizontal = expanding
												using = title_click
												onclick = "[ToggleGameView('outliner')]"
												onrightclick = "[ClickAdd('add_title_to_outliner', GetPlayer, Title)]"
												datacontext = "[Scope.Title]"
											    blockoverride "text" {
											        raw_text = "[Title.GetNameNoTooltip],"
											    }
												blockoverride "extra" {
													char_name = {
														blockoverride "pre" {
															text_single = {
																raw_text = "held by"
															}
														}
														visible = [Character.IsValid]
														datacontext = "[Title.GetHolder]"
													}
													text_single = {
														datacontext = "[Title.GetHolder]"
														visible = "[Not(Character.IsValid)]"
														raw_text = "not created."
													}
												}
											}
										}
									}

									text_single = {
										visible = "[Not(Show('outliner_titles'))]"
										layoutpolicy_horizontal = expanding
										raw_text = "Right click to unpin."
										margin_left = 10
									}
								}
							}

							expand = { }
						}
					}
				}
			}
			blockoverride "ocr_footer" {

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Reload, Shift E."
					}
					onclick = "[GetScriptedGui('sort_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'location', GetPlayer.GetCapitalLocation.MakeScope ).End )]"
					shortcut = map_mode_11
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Close all categories, E."
					}
					onclick = "[PdxGuiTriggerAllAnimations('close_outliner_categories')]"
					onclick = "[Set('close_outliner_categories', 'yes')]"
					shortcut = map_mode_1
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						margin_left = 10
						raw_text = "[Select_CString(GetVariableSystem.Exists('compact_units'), 'Hide', 'Show')] unit details, Shift W."
					}
					visible = "[LessThan_CFixedPoint( GetPlayer.MakeScope.Var('army_grouping').GetValue, '(CFixedPoint)1')]"
					onclick = "[GetVariableSystem.Toggle('compact_units')]"
					shortcut = map_mode_10
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					shortcut = map_mode_2

					onclick = "[GetScriptedGui('army_sorting').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('sort_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'location', GetPlayer.GetCapitalLocation.MakeScope ).End )]"
					blockoverride "text" {
						raw_text = "Armies are sorted by [Select_CString( GetScriptedGui('army_sorting').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ), 'size. Sort by distance', 'distance. Sort by size.')], hotkey T."
					}
				}
				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[GetScriptedGui('lower_army_grouping').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					visible = "[GetScriptedGui('lower_army_grouping').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('sort_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'location', GetPlayer.GetCapitalLocation.MakeScope ).End )]"

					blockoverride "pre" {
						spacing = 3
						text_single = {
							raw_text = "Group by"
						}

						text_single = {
							raw_text = "[GetPlayer.Custom('army_ungrouping')],"
						}
						text_single = {
							raw_text = "Page Down."
						}
					}

					shortcut = zoom_in
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[GetScriptedGui('raise_army_grouping').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					visible = "[GetScriptedGui('raise_army_grouping').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('sort_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'location', GetPlayer.GetCapitalLocation.MakeScope ).End )]"

					blockoverride "pre" {
						spacing = 3
						text_single = {
							raw_text = "Group by"
						}

						text_single = {
							raw_text = "[GetPlayer.Custom('army_upgrouping')],"
						}

						text_single = {
							raw_text = "Page Up."
						}
					}

					shortcut = zoom_out
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					shortcut = map_mode_4

					onclick = "[GetScriptedGui('limit_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('sort_armies').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'location', GetPlayer.GetCapitalLocation.MakeScope ).End )]"
					blockoverride "text" {
						raw_text = "[Select_CString( GetScriptedGui('limit_armies').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ), 'Checked', 'Unchecked')], show only 5 armies, Y. Helps with performance."
					}
				}
			}
		}

		flowcontainer = {
			using = vanilla
			parentanchor = top|right
			margin = { 10 10 }
			position = { -35 50 }
			margin_bottom = 15

			state = {
				name = _show
				using = Animation_FadeIn_Standard
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
			}

			background = {
				name = "paper_texture_shadow"
				texture = "gfx/interface/window_event/tile_letter_shadow.dds"
				spriteType = Corneredtiled
				spriteborder = { 200 200 }
				margin = { -15 0 }
				margin_right = -20
			}

			background = {
				name = "paper_texture_flat"
				texture = "gfx/interface/window_event/tile_letter_flat.dds"
				spriteType = Corneredtiled
				spriteborder = { 200 200 }
				alpha = 0.9
				color = { 0.51 0.53 0.58 1 }
				margin = { -15 0 }
				margin_right = -20

				modify_texture = {
					name = "paper_texture_overlay"
					texture = "gfx/interface/window_event/overlay_letter_texture.dds"
					spriteType = Corneredstretched
					blend_mode = overlay
				}
			}

			scrollarea = {
				autoresizescrollarea = yes
				scrollbarpolicy_horizontal = always_off
				maximumsize = { -1 500 }
				size = { 300 0 }

				scrollbar_vertical = {
					using = Scrollbar_Vertical
				}

				scrollwidget = {
					vbox = {
						set_parent_size_to_minimum = yes
						min_width = 300
						margin = { 10 0 }
						margin_right = 15
						spacing = 2

						outliner_pinned_characters_header = {}
						outliner_pinned_characters_info = {}

						outliner_players_header = {}
						outliner_players_info = {}

						outliner_units_header = {}
						outliner_units_info = {}

						outliner_holdings_header = {}
						outliner_holdings_info = {}

						expand = {}
					}
				}
			}
		}
	}
}

types OCR {
	type button_outliner_header = button_tab {
		size = { 0 31 }
		onclick = "[Clear('close_outliner_categories')]"

		block "oh_button" { }

		hbox = {
			margin = { 15 0 }
			using = tooltip_ws

			# button_expand = {
			# 	size = { 22 22 }
			# 	alwaystransparent = yes
			# 	alpha = 0.1
			# 	block "button_expand_frame" { }
			# }
			#
			# widget = {
			# 	size = { 5 0 }
			# }

			text_single = {
				name = "count"
				align = left

				block "oh_count"
				{
					text = "DEFAULT_TEXT"
				}
			}

			widget = {
				size = { 5 0 }
			}

			text_single = {
				name = "category"
				# layoutpolicy_horizontal = expanding
				align = left
				default_format = "#high"

				block "oh_name"
				{
					text = "DEFAULT_TEXT"
				}
			}

			block "extra" {

			}

			text_single = {
				align = left
				block "o_dot" {
					visible = no
				}
				raw_text = "."
			}

			expand = { }
		}
	}

	type army_button_o = vbox {
		background = { using = Background_Area }

		block "context" {
			datacontext = "[Scope.Army]"
		}
		layoutpolicy_horizontal = expanding

		block "war_filter" {
			visible = "[GetScriptedGui('should_hide_army').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Army.MakeScope).End )]"
		}

		block "fog" {
			using = tooltip_ws

			tooltipwidget = {
				using = unit_icon_item_tooltip_ocr

				blockoverride "extra_unit_info"
				{
					vbox = {
						name = "army_extra_info"
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes
						margin = { 5 0 }


						text_single = {
							name = "status_info"
							layoutpolicy_horizontal = expanding
							text = "[UnitItem.GetStatusDescription]"
							align = left
						}

						text_single = {
							name = "warning_info"
							text = "[UnitItem.GetOutlinerWarning]"
							margin = { 10 5 }
						}

						text_single = {
							name = "click_info"
							text = "[SelectLocalization(UnitItem.IsSelectedOnArmyWindow, 'OUTLINER_ARMY_CLICK_TO_PAN', 'OUTLINER_ARMY_CLICK_TO_SELECT')]"
							margin = { 10 5 }
						}

						text_single = {
							name = "right_click_info"
							text = "OUTLINER_ARMY_RIGHT_CLICK_TO_PAN"
							margin = { 10 5 }
						}
					}
				}
			}
		}


		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[Army.GetOwner.IsValid]"

			spacing = -1
			margin_bottom = 2
			margin_left = 5

			# location
			# for the army window
			button_text = {
				block "army_window_show" {
					visible = no
				}
				layoutpolicy_horizontal = expanding
				block "click" {
					using = army_click
				}
			    blockoverride "text" {
			        raw_text = ""
			    }
				blockoverride "extra" {
					flowcontainer = {
						ignoreinvisible = yes

						block "same_province" { }

						flowcontainer = {
						    ignoreinvisible = yes

							flowcontainer = {
							    ignoreinvisible = yes

								block "hide_at_capital" {
									visible = "[Not(ObjectsEqual(Army.GetLocation.GetID, GetPlayer.GetCapitalLocation.GetID))]"
								}

								block "distance" {

									text_single = {
										raw_text = "TODO distance"
									}

									text_single = {
										raw_text = "ArmyDistance"
									}

									text_single = {
										raw_text = " [GuiScope.SetRoot(GetPlayer.GetCapitalLocation.MakeScope).AddScope('second', Army.GetLocation.MakeScope).Custom('province_direction')],"
									}
								}

							}

							text_single = {
								visible = "[ObjectsEqual(Army.GetLocation.GetID, GetPlayer.GetCapitalLocation.GetID)]"

								raw_text = " In your capital."
							}

							text_single = {
								visible = "[Army.GetLocation.GetCounty.GetTitle.GetDeJureLiege.IsValid]"
								raw_text = " [Army.GetLocation.GetCounty.GetTitle.GetDeJureLiege.GetNameNoTierNoTooltip],"
							}

							text_single = {
								visible = "[Not(Army.IsEmbarked)]"
								raw_text = " [Army.GetLocation.GetTerrain.GetName] of"
							}

							text_single = {
								raw_text = " [Army.GetLocation.GetHolding.GetNameNoTooltip]."
							}

							# text_single = {
							# 	visible = "[GetVariableSystem.Exists('compact_units')]"
							# 	raw_text = " [AddTextIf(Army.GetLocation.GetCounty.GetTitle.GetDeFactoTopLiege.IsValid, Army.GetLocation.GetCounty.GetTitle.GetDeFactoTopLiege.GetNameNoTierNoTooltip)][AddTextIf(Army.GetLocation.GetCounty.GetTitle.GetDeFactoTopLiege.IsValid, '.')]"
							# }
						}
					}
				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				block "army_name" { }
				block "click" {
					using = army_click
				}
				blockoverride "text" {
					raw_text = ""
				}
				blockoverride "extra" {
					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3

						block "count" {
							text_single = {
								raw_text = "[Army.GetSoldierCountString],"
								# visible = "[EqualTo_CFixedPoint(Army.MakeScope.Var('armies').GetValue,]"
								visible = "[Not(Army.MakeScope.Var('armies').IsSet)]"
							}

							text_single = {
								raw_text = "[Army.MakeScope.Var('army_strength').GetValue|0],"
								visible = "[Army.MakeScope.Var('armies').IsSet]"
							}
						}

						flowcontainer = {
						    ignoreinvisible = yes
							block "grouping" {
								visible = "[And(Not(Army.IsEmbarked), LessThan_CFixedPoint( GetPlayer.MakeScope.Var('army_grouping').GetValue, '(CFixedPoint)1'))]"
							}
							spacing = 3

							text_single = {
								raw_text = "In battle."
								block "fog" {
									visible = "[GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End )]"
								}
							}

							flowcontainer = {
								ignoreinvisible = yes
								spacing = 3
								block "fog" {
									visible = "[GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End )]"
								}
								text_single = {
									raw_text = "Your"
									block "your_allies" {
									}
								}
								text_single = {
									block "allies" {
									}
									raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Army.GetLocation.MakeScope).ScriptValue('allies_in_the_province')] against"
								}

								text_single = {
									raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('province', Army.GetLocation.MakeScope).ScriptValue('enemies_in_the_province')] enemies."
								}
								# container = {
								# 	block "fighting" {
								# 		visible = "[Army.GetOwner.IsLocalPlayer]"
								# 	}
								# }
							}
						}

						text_single = {
							raw_text = "[Army.MakeScope.Var('armies').GetValue|0] armies,"
							block "fog" {
								visible = "[Army.MakeScope.Var('armies').IsSet]"
							}
						}

						flowcontainer = {
							ignoreinvisible = yes
							block "fog" {
								visible = "[And(Not(Army.IsEmbarked), GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('army_grouping').GetValue, '(CFixedPoint)0'))]"
							}

							text_single = {
								raw_text = "In"
							}

							text_single = {
								visible = "[EqualTo_CFixedPoint( GetPlayer.MakeScope.Var('army_grouping').GetValue, '(CFixedPoint)4')]"
								raw_text = " [Army.GetLocation.GetCounty.GetTitle.GetDeJureLiege.GetDeJureLiege.GetDeJureLiege.GetNameNoTierNoTooltip],"
							}

							text_single = {
								visible = "[EqualTo_CFixedPoint( GetPlayer.MakeScope.Var('army_grouping').GetValue, '(CFixedPoint)3')]"
								raw_text = " [Army.GetLocation.GetCounty.GetTitle.GetDeJureLiege.GetDeJureLiege.GetNameNoTierNoTooltip],"
							}

							text_single = {
								visible = "[EqualTo_CFixedPoint( GetPlayer.MakeScope.Var('army_grouping').GetValue, '(CFixedPoint)2')]"
								raw_text = " [Army.GetLocation.GetCounty.GetTitle.GetDeJureLiege.GetNameNoTierNoTooltip],"
							}

							text_single = {
								visible = "[EqualTo_CFixedPoint( GetPlayer.MakeScope.Var('army_grouping').GetValue, '(CFixedPoint)1')]"
								raw_text = " [Army.GetLocation.GetCounty.GetTitle.GetNameNoTierNoTooltip],"
							}

							# text_single = {
							# 	raw_text = " [Army.GetLocation.GetCounty.GetTitle.GetDeJureLiege.GetNameNoTierNoTooltip],"
							# }

						}


						text_single = {
							raw_text = "Raiders, "
							visible = "[Army.IsRaidArmy]"
						}

						flowcontainer = {
						    ignoreinvisible = yes
							spacing = 3
							visible = "[Or(Army.IsEmbarked, LessThan_CFixedPoint( GetPlayer.MakeScope.Var('army_grouping').GetValue, '(CFixedPoint)2'))]"

							button_text = {
								datacontext = "[Army.GetOwner]"
								using = char_click
								blockoverride "margins" {
									margin_left = 1
								}
								blockoverride "text" {
									raw_text = "led by [Army.GetOwner.GetPrimaryTitle.GetNameNoTierNoTooltip]."
									align = left
								}
								blockoverride "extra" {
									text_single = {
										raw_text = " Enemy of my enemy."
										visible = "[GetScriptedGui('is_enemy_of_my_enemy').IsShown( GuiScope.SetRoot( Army.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
									}
								}
								visible = "[Not(Army.GetOwner.IsLocalPlayer)]"
							}

							text_single = {
								raw_text = "Gathering, [Army.GetGatheringDaysLeft] days left."
								visible = "[And(Army.IsGathering, Not(Army.IsMoving))]"
							}

							flowcontainer = {
								ignoreinvisible = yes
								spacing = 3
								block "fog" { }

								text_single = {
									raw_text = "Sieging, [Army.GetLocation.GetSiege.GetProgress|0]%[AddTextIf(Army.GetLocation.GetSiege.IsAssaultInProgress, ', Assaulting')]."
									visible = "[And(Army.IsSieging, Not(Army.IsMoving))]"
								}

								container = {
									visible = "[GetVariableSystem.Exists('compact_units')]"
									text_single = {
										raw_text = "attrition [Army.GetArmyAttritionPercentage|%0]."
										visible = "[GreaterThanOrEqualTo_CFixedPoint(Army.GetArmyAttritionPercentage, '(CFixedPoint)0.01')]"
									}
								}
							}

							flowcontainer = {
								block "fog" {
									visible = "[Army.MakeScope.Var('armies').IsSet]"
								}
								ignoreinvisible = yes
								datacontext = "[Army.MakeScope.Var('commander').GetCharacter]"

								button_text = {
									#TODO check
									blockoverride "margins" {
										margin_left = 1
									}
									using = char_click
									blockoverride "text" {
										raw_text = "[Character.GetCommanderAdvantage] advantage,"
									}
									visible = "[And(Character.IsValid, Not(Army.IsRecentlyDisembarked))]"
								}

								button_text = {
									#TODO check
									blockoverride "margins" {
										margin_left = 1
									}
									using = char_click
									blockoverride "text" {
										raw_text = "[Subtract_int32(Character.GetCommanderAdvantage, '(int32)30')] advantage,"
									}
									visible = "[And(Character.IsValid, Army.IsRecentlyDisembarked)]"
								}

								text_single = {
									visible = "[And(Not(Character.IsValid), Army.IsRecentlyDisembarked)]"
									raw_text = "-30 advantage,"
								}

								text_single = {
									visible = "[Army.IsRecentlyDisembarked]"
									raw_text = " disembarked for [Army.GetDisembarkPenaltyDays] days."
								}

								# text_single = {
								# 	visible = "[And(Character.IsValid, GetVariableSystem.Exists('compact_units'))]"
								# 	raw_text = " [Character.GetShortUINameNoTooltip]."
								# }

								text_single = {
									visible = "[Not(Character.IsValid)]"
									raw_text = "No leader."
								}
							}

							#penalties
							flowcontainer = {
								ignoreinvisible = yes
								block "fog" {
									visible = "[Not(Army.MakeScope.Var('armies').IsSet)]"
								}

								button_text = {
									datacontext = "[Army.GetCommander]"
									#TODO check
									blockoverride "margins" {
										margin_left = 1
									}
									using = char_click
									blockoverride "text" {
										raw_text = "[Character.GetCommanderAdvantage] advantage,"
									}
									visible = "[And(Character.IsValid, Not(Army.IsRecentlyDisembarked))]"
								}

								button_text = {
									datacontext = "[Army.GetCommander]"
									#TODO check
									blockoverride "margins" {
										margin_left = 1
									}
									using = char_click
									blockoverride "text" {
										raw_text = "[Subtract_int32(Character.GetCommanderAdvantage, '(int32)30')] advantage,"
									}
									visible = "[And(Character.IsValid, Army.IsRecentlyDisembarked)]"
								}

								text_single = {
									datacontext = "[Army.GetCommander]"
									visible = "[And(Not(Character.IsValid), Army.IsRecentlyDisembarked)]"
									raw_text = "-30 advantage,"
								}

								text_single = {
									visible = "[Army.IsRecentlyDisembarked]"
									raw_text = " disembarked for [Army.GetDisembarkPenaltyDays] days."
								}

								text_single = {
									visible = "[And(Army.GetCommander.IsValid, GetVariableSystem.Exists('compact_units'))]"
									raw_text = " [Army.GetCommander.GetShortUINameNoTooltip]."
								}

								text_single = {
									visible = "[Not(Army.GetCommander.IsValid)]"
									raw_text = "No leader."
								}
							}
						}

						container = {
							ignoreinvisible = yes
							block "in_fog" {
								visible = no
							}
							flowcontainer = {
								ignoreinvisible = yes
								visible = "[Not(ObjectsEqual(Army.GetLocation.GetID, GetPlayer.GetCapitalLocation.GetID))]"

								text_single = {
									visible = "[Not(GetScriptedGui('is_army_in_the_fog').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'army', Army.MakeScope ).End ))]"
									raw_text = "ArmyDistance"
								}

								text_single = {
									visible = "[GetScriptedGui('is_army_in_the_fog').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'army', Army.MakeScope ).End )]"
									raw_text = "Hiding"
								}

								text_single = {
									raw_text = " [GuiScope.SetRoot(GetPlayer.GetCapitalLocation.MakeScope).AddScope('second', Army.GetLocation.MakeScope).Custom('province_direction')]"
								}

								text_single = {
									block "fog" {
										visible = "[Army.GetLocation.GetCounty.GetTitle.GetDeJureLiege.IsValid]"
									}
									raw_text = " in [Army.GetLocation.GetCounty.GetTitle.GetDeJureLiege.GetNameNoTierNoTooltip]"
								}
								dot = { }
							}
						}


						block "selected" { }

						# text_single = {
						# 	raw_text = "[Army.GetNameNoTooltip]."
						# 	max_width = 250
						# 	fontsize_min = 14
						# }
					}
				}
			}

			# location
			button_text = {
				block "fog" { }
				block "army_window" { }
				layoutpolicy_horizontal = expanding
				block "click" {
					using = army_click
				}
			    blockoverride "text" {
			        raw_text = ""
			    }
				blockoverride "extra" {
					flowcontainer = {
						ignoreinvisible = yes

						block "same_province" { }

						flowcontainer = {
						    ignoreinvisible = yes

							flowcontainer = {
							    ignoreinvisible = yes

								block "hide_at_capital" {
									visible = "[Not(ObjectsEqual(Army.GetLocation.GetID, GetPlayer.GetCapitalLocation.GetID))]"
								}


								block "distance" {
									datacontext = "[Army.GetLocation]"
									text_single = {
										raw_text = "OutlinerProvinceDistance"
									}
								}
							}

							text_single = {
								visible = "[ObjectsEqual(Army.GetLocation.GetID, GetPlayer.GetCapitalLocation.GetID)]"

								raw_text = " In your capital."
							}

							text_single = {
								visible = "[Not(Army.IsEmbarked)]"
								raw_text = " [Army.GetLocation.GetTerrain.GetName] of"
							}

							text_single = {
								raw_text = " [Army.GetLocation.GetHolding.GetNameNoTooltip]."
							}

							# text_single = {
							# 	visible = "[GetVariableSystem.Exists('compact_units')]"
							# 	raw_text = " [AddTextIf(Army.GetLocation.GetCounty.GetTitle.GetDeFactoTopLiege.IsValid, Army.GetLocation.GetCounty.GetTitle.GetDeFactoTopLiege.GetNameNoTierNoTooltip)][AddTextIf(Army.GetLocation.GetCounty.GetTitle.GetDeFactoTopLiege.IsValid, '.')]"
							# }
						}
					}
				}
			}


			# detailed view
			hbox = {
			    layoutpolicy_horizontal = expanding
				visible = "[Or(Army.IsEmbarked, LessThan_CFixedPoint( GetPlayer.MakeScope.Var('army_grouping').GetValue, '(CFixedPoint)1'))]"

				button_text = {
					block "fog" {
						visible = "[GetVariableSystem.Exists('compact_units')]"
					}
					layoutpolicy_horizontal = expanding
					block "click" {
						using = army_click
					}
					blockoverride "text" {
						raw_text = ""
					}
					blockoverride "extra" {
						flowcontainer = {
							ignoreinvisible = yes
							spacing = 3

							name = "troops"
							datamodel = "[CalculateBreakdownItems(Army.Self)]"

							# maxverticalslots = 2
							tooltipwidget = {
								using = unit_icon_item_tooltip

								blockoverride "extra_unit_info"
								{
									vbox = {
										name = "army_extra_info"
										layoutpolicy_horizontal = expanding
										ignoreinvisible = yes
										margin = { 5 0 }

										text_single = {
											name = "status_info"
											layoutpolicy_horizontal = expanding
											text = "[UnitItem.GetStatusDescription]"
											align = left
										}

										text_single = {
											name = "warning_info"
											text = "[UnitItem.GetOutlinerWarning]"
											margin = { 10 5 }
										}
									}
								}
							}

							item = {
								widget = {
									# tooltip = "ARMY_VIEW_TROOP_TT"

									hbox = {
										set_parent_size_to_minimum = yes
										margin_left = 1
										spacing = 3

										text_single = {
											name = "men_at_arms_icon"
											visible = "[TroopItem.IsMaa]"
											raw_text = "[TroopItem.GetRegiment.GetRegiment.GetMAAType.GetNameNoTooltip] "
										}

										text_single = {
											raw_text = "Levies"
											visible = "[TroopItem.IsLevies]"
										}

										text_single = {
											raw_text = "Knights"
											visible = "[TroopItem.IsKnight]"
										}

										text_single = {
											layoutpolicy_horizontal = growing
											raw_text = "[TroopItem.GetCount|*],"
										}
									}
								}
							}
						}
					}
				}

			    expand = { }
			}

			hbox = {
			    layoutpolicy_horizontal = expanding

			    visible = "[Or(Army.IsEmbarked, LessThan_CFixedPoint( GetPlayer.MakeScope.Var('army_grouping').GetValue, '(CFixedPoint)1'))]"

				button_text = {
					block "fog" { }
					layoutpolicy_horizontal = expanding
					block "click" {
						using = army_click
					}
					blockoverride "text" {
						raw_text = ""
					}
					blockoverride "extra" {
						flowcontainer = {
							ignoreinvisible = yes
							spacing = 3

							text_single = {
								raw_text = "Moving to"
								visible = "[And(And(And(Army.IsMoving, Not(Army.IsEmbarked)), Not(GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End ))), Not(Army.IsRetreating))]"
							}

							# text_single = {
							# 	raw_text = "At sea."
							# 	visible = "[And(Army.IsEmbarked, Not(Army.IsMoving))]"
							# }

							container = {
								visible = "[Not(GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End ))]"
								ignoreinvisible = yes
								text_single = {
									raw_text = "Retreating to"
									visible = "[And(Army.IsRetreating, Not(Army.IsEmbarked))]"
								}
							}

							text_single = {
								raw_text = "Sailing to"
								visible = "[And(Army.IsEmbarked, Army.IsMoving)]"
							}


							text_single = {
								raw_text = "[Army.GetMovementInfoForTooltip]. View tooltip to pan there."
								visible = "[And(Army.IsMoving, Not(GetScriptedGui('is_army_in_combat').IsShown( GuiScope.SetRoot( Army.MakeScope ).End )))]"
								max_width = 480
								fontsize_min = 14
							}

							# text_single = {
							# 	raw_text = "[GuiScope.SetRoot(Army.MakeScope).ScriptValue('total_army_siege_svalue')]"
							# 	visible = "[And(Army.IsSieging, Not(Army.IsMoving))]"
							# }

							# text_single = {
							# 	raw_text = "Retreating"
							# 	visible = "[Army.IsRetreating]"
							# }

						}
					}

					text_single = {
						raw_text = "[Army.GetMovementInfoForTooltip]"
						alpha = 0
						alwaystransparent = yes
					}
				}

			    expand = { }
			}
			# movement
		}

		using = tooltip_ws
	}

	type outliner_tooltip = container {
		using = DefaultTooltipBackground
		flowcontainer = {
			margin = { 5 5 }
			block "datamodel" {
				datamodel = "[GetPlayer.MakeScope.GetList('allied_units')]"
			}
			# visible = "[And(Not(GetVariableSystem.Exists('allies')), GetPlayer.IsValid)]"
			direction = vertical
			spacing = -2

			item = {
				block "button" {
					army_button_o = {
						# size = { 400 40 }
					}
				}
			}
		}
	}

	type outliner_armies = vbox {
		layoutpolicy_horizontal = expanding

		text_single = {
			margin_left = 10
			layoutpolicy_horizontal = expanding
			raw_text = "Units in [GetDataModelSize(GetPlayer.MakeScope.GetList('hidden_wars'))] wars are hidden."
			visible = "[GetScriptedGui('are_any_wars_hidden').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
		}

		# hostiles in your land
		button_outliner_header = {
			visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('hostiles_inside'))))]"
			layoutpolicy_horizontal = expanding

			blockoverride "button_expand_frame"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_inside'))]"
			}

			blockoverride "oh_button"
			{
				onclick = "[GetVariableSystem.Toggle('hostiles_inside')]"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
			}

			state = {
				name = close_outliner_categories
				on_finish = "[GetVariableSystem.Set('hostiles_inside', 'yes')]"
			}

			blockoverride "oh_toggle_frame"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_inside'))]"
			}

			blockoverride "oh_name"
			{
				raw_text = "Enem[Select_CString(GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_inside')), '(int32)1'), 'ies', 'y')] in your lands"
			}

			blockoverride "extra" {
				text_single = {
					raw_text = ", [GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('hostiles_inside')] total"
					visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_inside')), '(int32)1')]"
				}
				text_single = {
					raw_text = ", [Collapse('hostiles_inside')]"
					# visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_inside')), '(int32)1')]"
				}
			}

			blockoverride "oh_count"
			{
				raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_inside'))]"
			}
			blockoverride "expanded"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_inside'))]"
			}
		}

		# hostiles in your land
		vbox = {
			datamodel = "[GetPlayer.MakeScope.GetList('hostiles_inside')]"
			visible = "[And(Not(GetVariableSystem.Exists('hostiles_inside')), GetPlayer.IsValid)]"
			layoutpolicy_horizontal = expanding
			margin = { 8 0 }
			spacing = -2

			item = {
				army_button_o = { }
			}
		}

		# hostiles in your liege
		button_outliner_header = {
			visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('hostiles_inside_liege'))))]"
			layoutpolicy_horizontal = expanding

			blockoverride "button_expand_frame"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_inside_liege'))]"
			}

			blockoverride "oh_button"
			{
				onclick = "[GetVariableSystem.Toggle('hostiles_inside_liege')]"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
			}

			state = {
				name = close_outliner_categories
				on_finish = "[GetVariableSystem.Set('hostiles_inside_liege', 'yes')]"
			}

			blockoverride "oh_toggle_frame"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_inside_liege'))]"
			}

			blockoverride "oh_name"
			{
				raw_text = "Enem[Select_CString(GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_inside_liege')), '(int32)1'), 'ies', 'y')] in your liege's realm"
			}

			blockoverride "extra" {
				text_single = {
					raw_text = ", [GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('hostiles_inside_liege')] total"
					visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_inside_liege')), '(int32)1')]"
				}
				text_single = {
					raw_text = ", [Collapse('hostiles_inside_liege')]"
					# visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_inside')), '(int32)1')]"
				}
			}

			blockoverride "oh_count"
			{
				raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_inside_liege'))]"
			}
			blockoverride "expanded"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_inside_liege'))]"
			}
		}

		# hostiles in your land
		vbox = {
			datamodel = "[GetPlayer.MakeScope.GetList('hostiles_inside_liege')]"
			visible = "[And(Not(GetVariableSystem.Exists('hostiles_inside_liege')), GetPlayer.IsValid)]"
			layoutpolicy_horizontal = expanding
			margin = { 8 0 }
			spacing = -2

			item = {
				army_button_o = { }
			}
		}

		# hostiles outside
		button_outliner_header = {
			layoutpolicy_horizontal = expanding
			visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('hostiles_outside'))))]"

			blockoverride "button_expand_frame"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_outside'))]"
			}

			blockoverride "oh_button"
			{
				onclick = "[GetVariableSystem.Toggle('hostiles_outside')]"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
			}

			state = {
				name = close_outliner_categories
				on_finish = "[GetVariableSystem.Set('hostiles_outside', 'yes')]"
			}

			blockoverride "oh_toggle_frame"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_outside'))]"
			}

			blockoverride "oh_name"
			{
				raw_text = "Enem[Select_CString(GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_outside')), '(int32)1'), 'ies', 'y')] outside your lands"
			}

			blockoverride "extra" {
				text_single = {
					raw_text = ", [GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('hostiles_outside')] total"
					visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_outside')), '(int32)1')]"
				}
				text_single = {
					raw_text = ", [Collapse('hostiles_outside')]"
					align = left
					# visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_outside')), '(int32)1')]"
				}
			}

			blockoverride "oh_count"
			{
				raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('hostiles_outside'))]"
			}
			blockoverride "expanded"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('hostiles_outside'))]"
			}
		}

		# hostiles outside your land
		vbox = {
			datamodel = "[GetPlayer.MakeScope.GetList('hostiles_outside')]"
			visible = "[And(Not(GetVariableSystem.Exists('hostiles_outside')), GetPlayer.IsValid)]"
			layoutpolicy_horizontal = expanding
			margin = { 8 0 }
			spacing = -2

			item = {
				army_button_o = { }
			}
		}

		# hostiles in the fog of war
		button_outliner_header = {
			layoutpolicy_horizontal = expanding
			visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('in_the_fog'))))]"

			blockoverride "button_expand_frame"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('in_the_fog'))]"
			}

			blockoverride "oh_button"
			{
				onclick = "[GetVariableSystem.Toggle('in_the_fog')]"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
			}

			state = {
				name = close_outliner_categories
				on_finish = "[GetVariableSystem.Set('in_the_fog', 'yes')]"
			}

			blockoverride "oh_toggle_frame"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('in_the_fog'))]"
			}

			blockoverride "oh_name"
			{
				raw_text = "Enem[Select_CString(GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('in_the_fog')), '(int32)1'), 'ies', 'y')] in the fog of war"
			}

			blockoverride "extra" {
				text_single = {
					raw_text = ", [GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('in_the_fog')] total"
					# visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('in_the_fog')), '(int32)1')]"
				}
				text_single = {
					raw_text = ", [Collapse('in_the_fog')]"
					# visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('in_the_fog')), '(int32)1')]"
				}
			}

			blockoverride "oh_count"
			{
				raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('in_the_fog'))]"
			}
			blockoverride "expanded"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('in_the_fog'))]"
			}
		}

		# hostiles in the fog
		vbox = {
			datamodel = "[GetPlayer.MakeScope.GetList('in_the_fog')]"
			visible = "[And(Not(GetVariableSystem.Exists('in_the_fog')), GetPlayer.IsValid)]"
			layoutpolicy_horizontal = expanding
			margin = { 8 0 }
			spacing = -2

			item = {
				army_button_o = {
					blockoverride "fog" {
						visible = no
					}
					blockoverride "in_fog" {
					}
					blockoverride "click" {
						enabled = no#"[Army.GetLocation.GetCoATitle.IsValid]"
						# onclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetDeJureLiege.GetID)]"
					}
				}
			}
		}

		# allied armies
		button_outliner_header = {
			layoutpolicy_horizontal = expanding
			visible = "[And(GetPlayer.IsValid, Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('allied_units'))))]"

			blockoverride "button_expand_frame"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('allies'))]"
			}

			blockoverride "oh_button"
			{
				onclick = "[GetVariableSystem.Toggle('allies')]"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
			}

			state = {
				name = close_outliner_categories
				on_finish = "[GetVariableSystem.Set('allies', 'yes')]"
			}

			blockoverride "oh_toggle_frame"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('allies'))]"
			}

			blockoverride "oh_name"
			{
				raw_text = "Allied armies"

			}

			blockoverride "extra" {
				text_single = {
					raw_text = ", [GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('allies_total')] total"
					visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('allied_units')), '(int32)1')]"
				}
				text_single = {
					raw_text = ", [Collapse('allies')]"
					align = left
					# visible = "[GreaterThan_int32(GetDataModelSize(GetPlayer.MakeScope.GetList('allied_units')), '(int32)1')]"
				}
			}

			blockoverride "oh_count"
			{
				raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('allied_units'))]"
			}
			blockoverride "expanded"
			{
				frame = "[BoolTo2And1(GetVariableSystem.Exists('allies'))]"
			}

		}

		# allied armies
		vbox = {
			datamodel = "[GetPlayer.MakeScope.GetList('allied_units')]"
			visible = "[And(Not(GetVariableSystem.Exists('allies')), GetPlayer.IsValid)]"
			layoutpolicy_horizontal = expanding
			margin = { 8 0 }
			spacing = -2

			item = {
				army_button_o = {
					blockoverride "fighting" {

					}
				}
			}
		}
	}
}


local_template character_tooltip
{
	tooltip_enabled = "[Not(IsInteractionMenuOpenForCharacter(Character.GetID))]"
	tooltipwidget = {
		cooltip_type = {
			blockoverride "interaction_info"
			{
				text = "CHARACTER_TOOLTIP_INSTRUCTION"
			}
		}
	}
	using = tooltip_ws
}


types Outliner {

	type button_outliner_province = button_text {
		block "datacontext" {
			datacontext = "[OutlinerHoldingItem.GetTitle]"
			datacontext = "[OutlinerHoldingItem.GetTitle.GetProvince]"
			datacontext = "[OutlinerHoldingItem.GetTitle.GetProvince.GetHolding]"
			onclick = "[OutlinerHoldingItem.OnClick]"
		}
		onclick = "[ToggleGameView('outliner')]"

		layoutpolicy_horizontal = expanding


		blockoverride "extra" {
			text_single = {
				visible = "[ShowRoot('is_river', Province)]"
				raw_text = "River"
			}
			text_single = {
				visible = "[Holding.IsEmpty]"
				raw_text = "[Province.GetNameNoTooltip],"
			}

			text_single = {
				visible = "[Not(ShowRoot('is_river', Province))]"
				raw_text = "[Province.GetTerrain.GetNameNoTooltip],"
			}


			text_single = {
				visible = "[Not(Holding.IsEmpty)]"
				raw_text = "[Holding.GetNameNoTooltip],"
			}

			flowcontainer = {
				ignoreinvisible = yes
				block "county" {
					visible = no
				}
				text_single = {
					visible = "[Title.IsValid]"
					raw_text = "in [Title.GetNameNoTierNoTooltip]."
				}
			}

			flowcontainer = {
				ignoreinvisible = yes
				spacing = 3
				visible = "[ShowRoot('is_land', Province)]"


				flowcontainer = {
					ignoreinvisible = yes
					visible = "[Holding.IsConstructionInProgress]"
					text_single = {
						max_width = 300
						name = "construction_name"
						raw_text = "[Holding.GetConstructionProgress|0]% building [Holding.GetConstructionBuilding.GetNameNoTooltip]."
					}
				}

				flowcontainer = {
					visible = "[Not(Holding.IsEmpty)]"
					ignoreinvisible = yes
					spacing = 3

					flowcontainer = {
						ignoreinvisible = yes
						visible = "[Not(Holding.IsConstructionInProgress)]"

						text_single = {
							visible = "[GreaterThan_CFixedPoint(Holding.GetProvince.MakeScope.ScriptValue('free_building_slots_sval'), '(CFixedPoint)0')]"
							raw_text = "[Holding.GetProvince.MakeScope.ScriptValue('free_building_slots_sval')] empty slots."
						}
					}
					# visible = "[Not(Holding.IsConstructionInProgress)]"

					text_single = {
						raw_text = "Tax, [Holding.GetIncome|1]."
					}

					text_single = {
						raw_text = "Levies, [Holding.GetMaxLevySize]."
					}
				}
			}

		}

		button = {
			visible = "[Not(ShowRoot('is_land', Province))]"
			size = { 100% 100% }
			onclick = "[Set('extra_window', 'window_sea')]"
			onclick = "[ClickAdd('window_sea', GetPlayer, Scope.GetProvince)]"
			onclick = "[GetScriptedGui('province_adjacencies').Execute( GuiScope.SetRoot( Scope.GetProvince.MakeScope ).AddScope( 'player', GetPlayer.MakeScope).End )]"
			onclick = "[GetScriptedGui('find_closest').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Scope.GetProvince.MakeScope).End )]"
			onclick = "[ToggleGameView('outliner')]"
			onclick = "[Scope.GetProvince.PanCameraTo]"
			button_ignore = none
			onrightclick = "[ClickAdd('add_province_to_outliner', GetPlayer, Province)]"
			# onrightclick = "[Scope.GetProvince.PanCameraTo]"
		}
	}
	type outliner_pinned_characters_header = button_outliner_header {
		name = "pinned_characters_header"
		layoutpolicy_horizontal = expanding

		blockoverride "button_expand_frame"
		{
			frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
		}

		blockoverride "oh_button"
		{
			onclick = "[Outliner.ToggleCategory('pinned_character')]"
			tooltip = "[SelectLocalization( Outliner.IsCategoryShown('pinned_character'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
		}

		blockoverride "oh_toggle_frame"
		{
			frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
		}

		blockoverride "oh_name"
		{
			text = "OUTLINER_PINNED_CHARACTERS"
		}

		blockoverride "oh_count"
		{
			text = "[Outliner.GetCategoryItemsCount('pinned_character')|V]"
		}

		blockoverride "expanded"
		{
			frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
		}
	}

	type outliner_pinned_characters_info = vbox {
		name = "pinned_characters"
		visible = "[Outliner.IsCategoryShown('pinned_character')]"
		datamodel = "[Outliner.GetPinnedCharacters]"
		layoutpolicy_horizontal = expanding
		margin = { 5 5 }
		margin_bottom = 4

		hbox = {
			layoutpolicy_horizontal = expanding

			expand = {}

			text_single = {
				visible = "[And(Outliner.IsCategoryShown('pinned_character'), IsDataModelEmpty(Outliner.GetPinnedCharacters))]"
				name = "no_pinned_characters"
				text = "OUTLINER_NO_PINNED_CHARACTERS"
				autoresize = yes
				default_format = "#light_background;italic"
			}

			expand = {}
		}

		item = {
			hbox = {
				name = "pinned_character_item"
				layoutpolicy_horizontal = expanding
				using = character_tooltip

				background = {
					using = Background_Area
				}

				button_list = {
					name = "character_button"
					size = { 0 54 }
					layoutpolicy_horizontal = expanding

					onclick = "[DefaultOnCharacterClick(Character.GetID)]"
					down = "[Character.IsShownInCharacterWindow]"
					onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
					button_ignore = none

					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiWidget.FindChild('button_unpin').TriggerAnimation('button_unpin_show')]"
					}

					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiWidget.FindChild('button_unpin').TriggerAnimation('button_unpin_hide')]"
					}

					hbox = {
						margin = { 10 2 }

						vbox = {
							layoutpolicy_horizontal = expanding

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5

								icon = {
									visible = "[Character.IsDeadAndValid]"
									size = { 20 20 }
									texture = "[Character.GetDeathReasonIcon]"
									tooltip = "CHARACTER_DEAD_TOOLTIP"
								}

								icon = {
									visible = "[Not(Character.IsDeadAndValid)]"
									size = { 23 23 }
									framesize = { 60 60 }
									frame = "[Character.GetHealthIconFrame]"
									tooltip = "[Character.GetHealthInfo]"
									using = tooltip_ws
									texture = "gfx/interface/icons/character_status/icon_health.dds"
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									autoresize = no
									text = "OUTLINER_PINNED_CHARACTER"
									align = nobaseline
									default_format = "#high"
								}

								expand = {}

								icon = {
									visible = "[Character.IsInFactionTargetingPlayer]"
									size = { 20 20 }

									texture = "gfx/interface/icons/portraits/faction_member_small.dds"
								}

								icon = {
									visible = "[And(Character.IsMyPowerfulVassal, Not(Character.IsInFactionTargetingPlayer))]"
									size = { 20 20 }

									texture = "gfx/interface/icons/portraits/powerful_vassal_small.dds"
									framesize = { 28 28 }
									frame = "[Character.GetPowerfulVassalFrame]"

									tooltip = "[Character.GetPowerfulVassalTooltip]"

								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5
								margin_left = 3

								text_single = {
									text = "[Character.GetOpinionOf( GetPlayer )|=]"
									fonttintcolor = "[Character.GetOpinionOfTint( GetPlayer )]"
									default_format = "#medium;glow_color:{0.1,0.1,0.1,1}"
									align = nobaseline
									visible = "[Character.IsAlive]"

									tooltipwidget = character_opinion_tooltip
									using = tooltip_ws

									background = {
										name = "portrait_opinion_bg"
										texture = "gfx/interface/component_tiles/solid_black_label.dds"
										spritetype = Corneredtiled
										spriteborder = { 20 20 }
										margin = { 5 1 }
										texture_density = 2
									}
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "[Character.GetRelationToString( GetPlayer )]"
									tooltip = "EXTENDED_RELATIONS_TOOLTIP"
									autoresize = no
									align = nobaseline
								}
							}
						}


						button_round = {
							name = "button_unpin"
							size = { 30 30 }
							onclick = "[Character.ToggleCharacterPinned]"
							tooltip = "PIN_TT"
							inherit_visual_state = no

							alpha = 0.6

							state = {
								name = _mouse_enter
								alpha = 1
								duration = 0.1
								using = Animation_Curve_Default
							}

							state = {
								name = _mouse_leave
								alpha = 0.6
								duration = 0.2
								using = Animation_Curve_Default
							}

							button_unpin = {
								parentanchor = center
								size = { 20 20 }
								alwaystransparent = yes
								inherit_visual_state = no
							}
						}
					}
				}
			}
		}
	}

	type outliner_players_header = button_outliner_header {
		name = "players_header"
		layoutpolicy_horizontal = expanding
		visible = "[GameHasMultiplePlayers]"

		blockoverride "button_expand_frame"
		{
			frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
		}

		blockoverride "oh_button"
		{
			onclick = "[Outliner.ToggleCategory('players')]"
			tooltip = "[SelectLocalization( Outliner.IsCategoryShown('players'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
		}

		blockoverride "oh_toggle_frame"
		{
			frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
		}

		blockoverride "oh_name"
		{
			text = "OUTLINER_PLAYERS"
		}

		blockoverride "oh_count"
		{
			text = "[Outliner.GetCategoryItemsCount('players')|V]"
		}

		blockoverride "expanded"
		{
			frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
		}
	}

	type outliner_players_info = vbox {
		name = "players"
		datamodel = "[Outliner.GetPlayers]"
		visible = "[And( Outliner.IsCategoryShown('players'), GameHasMultiplePlayers )]"
		layoutpolicy_horizontal = expanding
		margin = { 8 5 }
		margin_bottom = 4
		spacing = 5

		item = {
			button_list = {
				name = "player_button"
				datacontext = "[OutlinerPlayer.GetCharacter]"
				layoutpolicy_horizontal = expanding
				size = { 0 40 }

				enabled = "[Character.IsValid]"
				onclick = "[DefaultOnCharacterClick(Character.GetID)]"
				down = "[Character.IsShownInCharacterWindow]"
				onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
				button_ignore = none

				hbox = {
					spacing = 5
					margin = { 5 0 }

					coa_realm_tiny = {
						visible = "[Character.HasLandedTitles]"
					}

					using = character_tooltip

					using = tooltip_ws

					text_single = {
						name = "player_name"
						layoutpolicy_horizontal = expanding
						text = "[OutlinerPlayer.GetName]"
						default_format = "#high"
						using = Font_Size_Medium
						align = nobaseline
					}
				}
			}

		}
	}

	type outliner_units_header = button_outliner_header {
		name = "units_header"
		layoutpolicy_horizontal = expanding
		visible = "[GetPlayer.IsValid]"

		blockoverride "button_expand_frame"
		{
			frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
		}

		blockoverride "oh_button"
		{
			onclick = "[Outliner.ToggleCategory('unit')]"
			tooltip = "[SelectLocalization( Outliner.IsCategoryShown('unit'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
			oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
		}

		blockoverride "oh_toggle_frame"
		{
			frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
		}

		blockoverride "oh_name"
		{
			text = "OUTLINER_ARMIES"
		}

		blockoverride "oh_count"
		{
			text = "[Outliner.GetCategoryItemsCount('unit')|V]"
		}
		blockoverride "expanded"
		{
			frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
		}
	}

	type outliner_units_info = vbox {
		name = "units"
		datamodel = "[Outliner.GetUnitItems]"
		visible = "[And(Outliner.IsCategoryShown('unit'), GetPlayer.IsValid)]"
		layoutpolicy_horizontal = expanding
		margin = { 4 4 }
		margin_bottom = 4

		hbox = {
			name = "no_units_label"
			layoutpolicy_horizontal = expanding

			expand = {}

			text_single = {
				visible = "[And(And(Outliner.IsCategoryShown('unit'), IsDataModelEmpty(Outliner.GetUnitItems)), GetPlayer.IsValid)]"
				name = "no_units"
				text = "OUTLINER_NO_ARMIES"
				default_format = "#light_background;italic"
			}

			expand = {}
		}

		################################
		# / \ |Name of the Army        #
		# \ / | A 1000 ¤¤       @ &(^) #
		################################
		item = {
			button_list = {
				name = "unit_item"
				datacontext = "[UnitItem.GetArmy]"
				layoutpolicy_horizontal = expanding
				size = { 0 70 }

				onclick = "[UnitItem.SelectAndPanUnit]"
				onrightclick = "[UnitItem.PanToUnit]"
				button_ignore = none
				down = "[UnitItem.IsSelected]"

				background = {
					using = Background_Area
				}

				hbox = {

					layoutpolicy_horizontal = expanding
					margin = { 10 0 }

					icon = {
						texture = "[Army.GetArmyStatusOutlinerIcon]"
						size = { 50 50 }

						tooltip = "[Army.GetArmyStatusTooltip]"
						using = tooltip_ws
					}


					vbox = {
						name = "army_info"
						layoutpolicy_horizontal = expanding
						margin = { 6 4 }
						spacing = 0

						hbox = {
							name = "unit_item_1st_line"
							layoutpolicy_horizontal = expanding


							text_single = {
								layoutpolicy_horizontal = expanding
								autoresize = no
								text = "[Army.GetNameNoTooltip]"
								default_format = "#medium"
								#align = nobaseline
							}

						}

						hbox = {
							name = "unit_item_2nd_line"
							layoutpolicy_horizontal = expanding

							margin_left = -14
							soldiers_and_quality_small = {
								datacontext = "[Army.GetComposition]"
							}

							expand = {}

							# Attrition
							icon = {
								visible = "[Army.IsArmySufferingFromAttrition]"
								texture = "gfx/interface/icons/map_icons/attrition_icon.dds"
								size = { 24 24 }

							}


							spacer = { size = { 4 } }



							container_supply_icon = {}
						}

						using = tooltip_ws

						tooltipwidget = {
							using = unit_icon_item_tooltip

							blockoverride "extra_unit_info"
							{
								vbox = {
									name = "army_extra_info"
									layoutpolicy_horizontal = expanding
									ignoreinvisible = yes
									margin = { 5 0 }

									text_single = {
										name = "status_info"
										layoutpolicy_horizontal = expanding
										text = "[UnitItem.GetStatusDescription]"
										align = left
									}

									text_single = {
										name = "warning_info"
										text = "[UnitItem.GetOutlinerWarning]"
										margin = { 10 5 }
									}

									text_single = {
										name = "click_info"
										text = "[SelectLocalization(UnitItem.IsSelectedOnArmyWindow, 'OUTLINER_ARMY_CLICK_TO_PAN', 'OUTLINER_ARMY_CLICK_TO_SELECT')]"
										margin = { 10 5 }
									}

									text_single = {
										name = "right_click_info"
										text = "OUTLINER_ARMY_RIGHT_CLICK_TO_PAN"
										margin = { 10 5 }
									}
								}
							}
						}
					}
				}
			}
		}
	}

	type outliner_holdings_header = button_outliner_header {
		name = "holdings_header"
		layoutpolicy_horizontal = expanding
		visible = "[GetPlayer.IsValid]"

		blockoverride "button_expand_frame"
		{
			frame = "[BoolTo1And2(Outliner.IsCategoryShown('holding'))]"
		}

		blockoverride "oh_button"
		{

			onclick = "[Outliner.ToggleCategory('holding')]"
			tooltip = "[SelectLocalization( Outliner.IsCategoryShown('holding'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
		}

		blockoverride "oh_name"
		{
			text = "OUTLINER_HOLDINGS"
		}

		blockoverride "oh_count"
		{
			text = "[Outliner.GetCategoryItemsCount('holding')|V]"
		}

		blockoverride "expanded"
		{
			frame = "[BoolTo1And2(Outliner.IsCategoryShown('holding'))]"
		}
	}

	type outliner_holdings_info = vbox {
		name = "holdings"
		datamodel = "[Outliner.GetHoldingItems]"
		visible = "[Outliner.IsCategoryShown('holding')]"
		layoutpolicy_horizontal = expanding
		margin = { 8 5 }
		margin_bottom = 4

		item = {
			button_list = {
				name = "holding_item"
				datacontext = "[OutlinerHoldingItem.GetTitle]"
				datacontext = "[OutlinerHoldingItem.GetTitle.GetProvince.GetHolding]"
				layoutpolicy_horizontal = expanding
				size = { 0 34 }

				onclick = "[OutlinerHoldingItem.OnClick]"
				down = "[Or(Holding.IsHoldingOrNonCapitalHoldingHovered, Holding.IsSelected)]"
				tooltipwidget = { holding_tooltip_click = {} }
				using = tooltip_ws
				using = Holding_Mouse_Entry

				margin_widget = {
					size = { 100% 100% }
					margin = { 0 2 }
					margin_left = 40

					progressbar_standard_transparent = {
						name = "progress_bar"
						size = { 100% 100% }
						visible = "[Holding.IsConstructionInProgress]"
						value = "[Holding.GetConstructionProgress]"
						alpha = 0.8
					}
				}

				hbox = {
					widget = {
						size = { 40 28 }

						coa_title_tiny = {
							name = "claim"
							datacontext = "[Holding.GetProvince.GetTitle]"
							parentanchor = center
							tooltip_enabled = no
						}
					}

					hbox = {
						margin = { 5 0 }
						layoutpolicy_horizontal = expanding

						hbox = {

							text_single = {
								max_width = 80
								name = "holding_name"
								layoutpolicy_horizontal = expanding
								text = "[Holding.GetProvince.GetNameNoTooltip]"
								default_format = "#high"
								align = nobaseline
							}
						}

						expand = {}

						hbox = {
							visible = "[Holding.IsConstructionInProgress]"
							text_single = {
								max_width = 120
								name = "construction_name"
								text = "[Holding.GetConstructionBuilding.GetNameNoTooltip]"
								align = right|nobaseline
								default_format = "#high"
							}
						}

						hbox = {
							visible = "[Not(Holding.IsConstructionInProgress)]"

							text_single = {
								text = "HOLDING_TAX_VALUE"
								min_width = 70
								align = left|nobaseline
								default_format = "#high"
							}

							text_single = {
								text = "HOLDING_LEVY_SIZE"
								min_width = 60
								align = left|nobaseline
								default_format = "#high"
							}
						}
					}
				}

			}
		}
	}
}


template army_click {
	enabled = "[Army.GetLocation.GetCoATitle.IsValid]"
	onclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
	onrightclick = "[DefaultOnCoatOfArmsRightClick(Army.GetLocation.GetCoATitle.GetID)]"
	onrightclick = "[PdxGuiWidget.TriggerAnimation('right_click')]"

	state = {
		name = right_click

		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"
		}
	}
}

template army_prov_click {
	enabled = "[Province.GetCoATitle.IsValid]"
	onclick = "[DefaultOnCoatOfArmsRightClick(Province.GetCoATitle.GetID)]"
	onrightclick = "[DefaultOnCoatOfArmsRightClick(Province.GetCoATitle.GetID)]"
	onrightclick = "[PdxGuiWidget.TriggerAnimation('right_click')]"

	state = {
		name = right_click

		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"
		}
	}
}