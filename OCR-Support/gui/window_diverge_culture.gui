######################################################
################## CULTURE DIVERGENCE ################
######################################################

window = {
	name = "diverge_culture_window"
	datacontext = "[GetPlayer.GetCulture]"
	datacontext = "[GetVariableSystem]"
	datacontext = "[DivergenceWindow.GetVassalConversionWindow]"
	using = base_ocr_window
	layer = middle

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		on_start = "[GetVariableSystem.Set( 'culture_creation_tab', 'pillars' )]"
		on_start = "[GetVariableSystem.Clear( 'culture_creation_right_view' )]"
		on_start = "[GetVariableSystem.Clear('conversion_view_vassals')]"
		on_start = "[DivergenceWindow.SetTraditionCategory( DivergenceWindow.GetTraditionGrouping( 'realm' ).GetCategory )]"
		on_finish = "[Clear('renaming_culture')]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
	}

	window_ocr = {
		blockoverride "ocr_header" {
			header_text = {
				layoutpolicy_horizontal = expanding
				visible = "[Isnt('culture_creation_right_view')]"

				blockoverride "header_text"
				{
					text = "DIVERGE_CULTURE_WINDOW_TITLE"
				}

				blockoverride "button_close"
				{
					onclick = "[DivergenceWindow.Close]"
				}
			}
			button = {
				shortcut = close_window
				onclick = "[DivergenceWindow.Close]"
			}
		}
		blockoverride "ocr_content" {
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					vbox = {
						name = "left_side"
						visible = "[Isnt('culture_creation_right_view')]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								raw_text = "New culture:"
							}

							text_single = {
								raw_text = "DIVERGE_CULTURE_NAME"
							}

							dot = { }

							expand = { }
						}

						button_primary_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Finalize culture."
							}
							blockoverride "disabled" {
								visible = "[Not(DivergenceWindow.CanDiverge)]"
							}
							blockoverride "extra" {
								text_single = {
									# visible = "[Not(FaithCreationWindow.CanCreateFaith)]"
									raw_text = "See details"
								}
							}
							onclick = "[GetVariableSystem.Set('culture_creation_right_view', 'overview')]"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							name = "culture_name"
							onclick = "[GetVariableSystem.Set( 'culture_creation_right_view', 'name_selection' )]"
							blockoverride "extra" {
								text_single = {
									raw_text = "Change names."
								}
							}
						}

						# hbox = {
						# 	map_color_button = {
						# 		blockoverride "mcb_click"
						# 		{
						# 			onclick = "[GetVariableSystem.Set( 'culture_creation_right_view', 'color_selection' )]"
						# 		}
						#
						# 		blockoverride "mcb_color"
						# 		{
						# 			tintcolor = "[DivergenceWindow.GetColor]"
						# 		}
						# 	}
						# }

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								raw_text = "Showing [Get('culture_creation_tab')],"
							}

							space = {}

							# visible = no
							text_single = {
								raw_text = "other tabs:"
							}

							button_text = {
								visible = "[Hasnt('culture_creation_tab', 'pillars')]"
								shortcut = speed_1
								onclick = "[GetVariableSystem.Set( 'culture_creation_tab', 'pillars' )]"

								blockoverride "pre" {
									text_single = {
										raw_text = "1,"
									}
								}
								blockoverride "text" {
									text = "CULTURE_VIEW_PILLARS"
								}
								# blockoverride "extra" {
								# 	text_single = {
								# 		visible = "[Has( 'culture_creation_tab', 'pillars' )]"
								# 		raw_text = "Selected"
								# 	}
								# }
								blockoverride "dot" {}
							}

							button_text = {
								onclick = "[GetVariableSystem.Set( 'culture_creation_tab', 'traditions' )]"
								visible = "[Hasnt('culture_creation_tab', 'traditions')]"
								shortcut = speed_2
								blockoverride "pre" {
									text_single = {
										raw_text = "2,"
									}
								}
								blockoverride "text" {
									text = "CULTURE_VIEW_TRADITIONS"
								}
								# blockoverride "extra" {
								#
								# 	text_single = {
								# 		visible = "[Has( 'culture_creation_tab', 'traditions' )]"
								# 		raw_text = "Selected"
								# 	}
								# }
								blockoverride "dot" {}
							}

							expand = { }
						}

						# button_text = {
						# 	layoutpolicy_horizontal = expanding
						# 	shortcut = speed_1
						# 	onclick = "[SetOrToggle('culture_creation_tab', 'pillars')]"
						# 	blockoverride "text" {
						# 		raw_text = "CULTURE_VIEW_PILLARS"
						# 	}
						# 	blockoverride "extra" {
						# 		comma = {}
						# 		text_single = {
						# 			raw_text = "[CollapseIf(Hasnt('culture_creation_tab', 'pillars'))] hotkey 1."
						# 		}
						# 	}
						# }

						scrollbox = {
							visible = "[VariableSystem.HasValue( 'culture_creation_tab', 'pillars' )]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							using = Animation_Tab_Switch

							blockoverride "scrollbox_content"
							{
								vbox = {
									name = "pillars tab"
									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 3

										text_single = {
											text = "CULTURE_CREATION_ETHOS"
										}

										comma = {}

										text_single = {
											raw_text = "[GetDataModelSize(DivergenceWindow.GetPossibleEthos)] options:"
										}

										expand = { }
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										vbox = {
											datamodel = "[DivergenceWindow.GetPossibleEthos]"
											layoutpolicy_horizontal = expanding

											item = {
												button_text = {
													layoutpolicy_horizontal = expanding
													onclick = "[DivergenceWindow.SetPillar( CulturePillar.Self )]"
													enabled = "[DivergenceWindow.CanPickPillar( CulturePillar.Self )]" #TODO

													tooltipwidget = {
														using = culture_pillar_tooltip
													}

													blockoverride "pre" {
														text_single = {
															visible = "[Not( DivergenceWindow.CanPickPillar( CulturePillar.Self ) )]"
															alwaystransparent = yes
															tooltip = "[DivergenceWindow.GetPickPillarBlockers( CulturePillar.Self )]"
															raw_text = "Can't pick"
														}
														text_single = {
															visible = "[DivergenceWindow.HasPillar( CulturePillar.Self )]"
															raw_text = "Selected,"
														}

														text_single = {
															raw_text = "[CulturePillar.GetNameNoTooltip],"
														}
													}
												}
											}
										}
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 3

									text_single = {
										text = "CULTURE_CREATION_LANGUAGE"
									}

									comma = {}

									text_single = {
										raw_text = "[GetDataModelSize(DivergenceWindow.GetPossibleLanguage)] options:"
									}

									expand = { }
								}

								vbox = {
									datamodel = "[DivergenceWindow.GetPossibleLanguage]"
									layoutpolicy_horizontal = expanding

									item = {
										button_diverge_pillar_selection_ocr = {}
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding

									spacing = 3

									text_single = {
										text = "CULTURE_CREATION_MARTIAL_CUSTOM"
									}

									comma = {}

									text_single = {
										raw_text = "[GetDataModelSize(DivergenceWindow.GetPossibleMartial)] options:"
									}

									expand = { }
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									datamodel = "[DivergenceWindow.GetPossibleMartial]"
									item = {
										button_diverge_pillar_selection_ocr = {}
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 3

									text_single = {
										text = "CULTURE_CREATION_AESTHETICS"
									}

									comma = {}

									text_single = {
										raw_text = "[GetDataModelSize(DivergenceWindow.GetPossibleAesthetics)] options:"
									}

									expand = { }
								}

								vbox = {
									datamodel = "[DivergenceWindow.GetPossibleAesthetics]"
									layoutpolicy_horizontal = expanding

									item = {
										button_text = {
											layoutpolicy_horizontal = expanding
											onclick = "[DivergenceWindow.SetAesthetic( CultureAesthetics.Self )]"
											blockoverride "pre" {
												text_single = {
													visible = "[DivergenceWindow.HasAesthetic( CultureAesthetics.Self )]"
													raw_text = "Selected,"
												}
												text_single = {
													raw_text = "[CultureAesthetics.GetName]."
												}
											}
											tooltip = "CULTURE_AESTHETICS_DIVERGE_TOOLTIP"
										}
									}
								}

								expand = {}
							}
						}

						# button_text = {
						# 	layoutpolicy_horizontal = expanding
						# 	shortcut = speed_2
						# 	onclick = "[SetOrToggle('culture_creation_tab', 'tradiitons')]"
						# 	blockoverride "text" {
						# 		raw_text = "CULTURE_VIEW_TRADITIONS"
						# 	}
						# 	blockoverride "extra" {
						# 		comma = {}
						# 		text_single = {
						# 			raw_text = "[CollapseIf(Hasnt('culture_creation_tab', 'tradiitons'))] hotkey 2."
						# 		}
						# 	}
						# }

						scrollbox = {
							visible = "[VariableSystem.HasValue( 'culture_creation_tab', 'traditions' )]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							using = Animation_Tab_Switch

							blockoverride "scrollbox_content"
							{

								vbox = {
									layoutpolicy_horizontal = expanding
									datamodel = "[DivergenceWindow.GetTraditions]"

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "Select a tradition to replace."
									}

									item = {
										widget_tradition_selection_buttons_ocr = {
											layoutpolicy_horizontal = expanding
										}
									}
								}
							}
						}

						scrollbox = {
							visible = "[VariableSystem.HasValue( 'culture_creation_tab', 'aesthetics' )]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							blockoverride "scrollbox_content"
							{
								vbox = {
									spacing = 10

									expand = {}
								}
							}
						}

						expand = {}
					}

					# Vassal conversion list
					vassal_conversion_preview = {
						visible = "[VariableSystem.Exists( 'conversion_view_vassals')]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						blockoverride "margin_left" {
						}
					}

					### RIGHT PANEL
					vbox = {
						name = "right_side"
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						visible = "[And(Is('culture_creation_right_view'), Isnt('conversion_view_vassals'))]"

						button = {
							shortcut = close_window
							shortcut = go_back
							onclick = "[Clear('culture_creation_right_view')]"
						}

						## Main right side view
						vbox = {
							# visible = "[Not( VariableSystem.Exists('culture_creation_right_view') )]"
							visible = "[Has('culture_creation_right_view', 'overview')]"
							layoutpolicy_horizontal = expanding

							button_primary_text = {
								layoutpolicy_horizontal = expanding
								name = "create_culture"
								onclick = "[DivergenceWindow.DivergeCulture]"
								onclick = "[DivergenceWindow.Close]"
								enabled = "[DivergenceWindow.CanDiverge]"

								blockoverride "text" {
									text = "DIVERGE_CULTURE_EXECUTE_LABEL"
								}
								blockoverride "disabled" {
									visible = "[Not(DivergenceWindow.CanDiverge)]"
								}
								blockoverride "hotkey" {
									visible = "[DivergenceWindow.CanDiverge]"
								}
								using = Font_Size_Medium
								tooltip = "DIVERGE_CULTURE_EXECUTE_TOOLTIP"
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									tooltip = "DIVERGENCE_COST_TOOLTIP"
									text = "DIVERGENCE_TOTAL_COST"
								}

								dot = { }

								expand = { }
							}

							vbox = {
								name = "info"
								layoutpolicy_horizontal = expanding

								vbox = {
									name = "blockers"
									visible = "[Not( DivergenceWindow.CanDiverge )]"
									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding

										text_multi_wide = {
											text = "[DivergenceWindow.GetDivergeBlockers]"
										}
										expand = {}
									}
								}

								vbox = {
									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding

										text_multi_wide = {
											text = "CULTURE_CREATION_REALM_ADOPTION_TEXT"
										}

										expand = {}
									}

									hbox = {
										layoutpolicy_horizontal = expanding

										button_text = {
											layoutpolicy_horizontal = expanding
											name = "see_vassals"
											shortcut = find_title_shortcut
											onclick = "[VariableSystem.Toggle( 'conversion_view_vassals' )]"
											blockoverride "text" {
												text = "FAITH_CREATION_OPEN_VASSAL_LIST"
											}
											blockoverride "extra" {
												comma = {}
												text_single = {
													raw_text = "V."
												}
											}
											down = "[VariableSystem.HasValue( 'conversion_view_vassals', 'true' )]"
										}

										expand = {}
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding

									text_multi_wide = {
										text = "CULTURE_CREATION_NEW_CULTURE_TEXT"
									}

									expand = {}
								}

								hbox = {
									layoutpolicy_horizontal = expanding

									text_multi_wide = {
										text = "CULTURE_CREATION_DIVERGENCE_ACCEPTANCE_TEXT"
									}

									expand = {}
								}
							}

							text_multi_wide = {
								name = "cooldown"
								layoutpolicy_horizontal = expanding

								text = "CULTURE_DIVERGENCE_COOLDOWN"
							}
						}

						## Name selection
						vbox = {
							name = "name_selection"
							layoutpolicy_horizontal = expanding
							visible = "[VariableSystem.HasValue( 'culture_creation_right_view', 'name_selection' )]"

							# text_single = {
							# 	layoutpolicy_horizontal = expanding
							# 	name = "header_label"
							# 	text = "CULTURE_CREATION_NAMING_HEADER"
							# }

							text_single = {
								layoutpolicy_horizontal = expanding
								visible = "[Isnt('renaming_culture')]"
								raw_text = "You may start typing to change the name."
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "Use Control A to select all text, Tab to switch to the next name."
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								# The names of these are referenced in code. If you change them, they'll no longer get properly reset

								name_entry_big = {
									blockoverride "label"
									{
										layoutpolicy_horizontal = expanding
										text = "CULTURE_CREATION_NAMING_NAME"
									}

									blockoverride "editbox_properties"
									{
										name = "culture_name_edit"
										ontextedited = "[DivergenceWindow.OnEditName]"
										ontextedited = "[Set('renaming_culture','yes')]"
										onreturnpressed = "[Clear( 'culture_creation_right_view' )]"
										maxcharacters = 30
										focus_on_visible = yes
									}
								}

								name_entry_big = {
									blockoverride "label"
									{
										layoutpolicy_horizontal = expanding
										text = "CULTURE_CREATION_NAMING_COLLECTIVE_NOUN"
									}

									blockoverride "editbox_properties"
									{
										name = "culture_collective_noun_edit"
										ontextedited = "[DivergenceWindow.OnEditCollectiveNoun]"
										ontextedited = "[Set('renaming_culture','yes')]"
										onreturnpressed = "[Clear( 'culture_creation_right_view' )]"
										maxcharacters = 30
									}
								}

								name_entry_big = {
									blockoverride "label"
									{
										layoutpolicy_horizontal = expanding
										text = "CULTURE_CREATION_NAMING_PREFIX"
									}

									blockoverride "editbox_properties"
									{
										name = "culture_prefix_edit"
										ontextedited = "[DivergenceWindow.OnEditPrefix]"
										ontextedited = "[Set('renaming_culture','yes')]"
										onreturnpressed = "[Clear( 'culture_creation_right_view' )]"
										maxcharacters = 30
									}
								}
							}


							button_text = {
								layoutpolicy_horizontal = expanding
								name = "done"
								onclick = "[VariableSystem.Clear( 'culture_creation_right_view' )]"
								blockoverride "text" {
									text = "DONE"
								}
								blockoverride "extra" {
									comma = {}
									text_single = {
										raw_text = "Escape."
									}
								}
							}
						}

						vbox = {
							name = "color_selection"
							visible = "[VariableSystem.HasValue( 'culture_creation_right_view', 'color_selection' )]"
							margin = { 0 20 }
							margin_top = 15
							margin_left = 10
							spacing = 10

							text_label_center = {
								layoutpolicy_horizontal = expanding
								text = "MAP_COLOR_SELECTION_LABEL"
								max_width = 280
							}

							# colorpicker_simple = {
							# 	visible = yes
							# 	color = "[DivergenceWindow.GetColor]"
							# 	oncoloredited = "[DivergenceWindow.SetColor]"
							# }

							colorpicker_text = {
								visible = yes
								color = "[DivergenceWindow.GetColor]"
								oncoloredited = "[DivergenceWindow.SetColor]"
							}

							expand = {}

							button_standard = {
								name = "done"
								onclick = "[VariableSystem.Clear( 'culture_creation_right_view' )]"
								text = "DONE"
								default_format = "#high"
							}
						}

						## Tradition selection
						vbox = {
							name = "tradition_selection"
							visible = "[VariableSystem.HasValue( 'culture_creation_right_view', 'tradition_selection' )]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								text_single = {
									text = "CULTURE_CREATION_REPLACE_TRADITION_HEADER"
								}

								comma = {}

								hbox = {
									text_single = {
										raw_text = "Acive tab:"
									}

									hbox_diverge_traditions_categories = {
										blockoverride "visible" {
											visible = "[DivergenceWindow.HasTraditionCategory( TraditionGrouping.GetCategory )]"
										}
										blockoverride "extra" {
											text_single = {
												raw_text = "[GetDataModelSize( TraditionGrouping.GetPossibleTraditions )] items."
											}
										}
									}
								}
								expand = { }
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									raw_text = "All tabs:"
								}

								hbox_diverge_traditions_categories = {}

								expand = { }
							}

							vbox_diverge_traditions_list_ocr = {
								datacontext = "[DivergenceWindow.GetTraditionGrouping( 'realm' )]"
							}
							vbox_diverge_traditions_list_ocr = {
								datacontext = "[DivergenceWindow.GetTraditionGrouping( 'combat' )]"
							}
							vbox_diverge_traditions_list_ocr = {
								datacontext = "[DivergenceWindow.GetTraditionGrouping( 'societal' )]"
							}
							vbox_diverge_traditions_list_ocr = {
								datacontext = "[DivergenceWindow.GetTraditionGrouping( 'ritual' )]"
							}
							vbox_diverge_traditions_list_ocr = {
								datacontext = "[DivergenceWindow.GetTraditionGrouping( 'regional' )]"
							}

							button = {
								onclick = "[VariableSystem.Clear( 'culture_creation_right_view' )]"
								onclick = "[DivergenceWindow.ClearSelectedTradition]"
							}
						}

						expand = { }
					}
				}
			}
		}
	}
}

types OCR
{
	type button_diverge_pillar_selection_ocr = button_text {
		layoutpolicy_horizontal = expanding
		onclick = "[DivergenceWindow.SetPillar( CulturePillar.Self )]"
		using = tooltip_se
		enabled = "[StringIsEmpty(DivergenceWindow.GetPickPillarBlockers( CulturePillar.Self ))]"

		blockoverride "pre" {
			text_single = {
				raw_text = "Can't pick"
				visible = "[Not(StringIsEmpty(DivergenceWindow.GetPickPillarBlockers( CulturePillar.Self )))]"
			}

			text_single = {
				visible = "[DivergenceWindow.HasPillar( CulturePillar.Self )]"
				raw_text = "Selected,"
			}

			text_single = {
				raw_text = "[CulturePillar.GetNameNoTooltip]."
			}
		}
		tooltipwidget = {
			using = culture_pillar_tooltip

			blockoverride "above_description_text" {

				text = "[DivergenceWindow.GetPickPillarBlockers( CulturePillar.Self )]"
			}
		}
	}

	type widget_tradition_selection_buttons_ocr = button_text {

		tooltipwidget = {
			using = culture_tradition_tooltip_clickable

			blockoverride "above_description_text" {
				text = "[DivergenceWindow.GetPickTraditionBlockers( CultureTradition.Self )]"
			}
		}
		block "onclick" {
			enabled = "[DivergenceWindow.CanPickTradition( CultureTradition.Self )]"
			onclick = "[DivergenceWindow.SetSelectedTradition( CultureTradition.Self )]"
			onclick = "[GetVariableSystem.Set( 'culture_creation_right_view', 'tradition_selection' )]"
		}

		blockoverride "pre" {
			text_single = {
				visible = "[ObjectsEqual( CultureTradition.Self, DivergenceWindow.GetSelectedTradition )]"
				raw_text = "Selected,"
			}
			text_single = {
				visible = "[Not( DivergenceWindow.CanPickTradition( CultureTradition.Self ) )]"
				tooltip = "[DivergenceWindow.GetPickTraditionBlockers( CultureTradition.Self )]"
				raw_text = "Can't pick"
			}
			text_single = {
				raw_text = "[CultureTradition.GetNameNoTooltip],"
			}
			text_single = {
				visible = "[Not(DivergenceWindow.HasTradition(CultureTradition.Self ))]"
				name = "cost"
				raw_text = "[DivergenceWindow.GetTraditionCost( CultureTradition.Self )]."
				tooltip = "[DivergenceWindow.GetTraditionCostBreakdown( CultureTradition.Self )]"
			}
		}
	}

	type button_tabs_replace_tradition_category_ocr = button_text {
		onclick = "[DivergenceWindow.SetTraditionCategory( TraditionGrouping.GetCategory )]"
		down = "[DivergenceWindow.HasTraditionCategory( TraditionGrouping.GetCategory )]"
		block "visible" {}
		blockoverride "text" {
			text = "TRADITION_CATEGORY_DIVERGE_NAME"
		}
	}

	type hbox_diverge_traditions_categories = hbox {
		layoutpolicy_horizontal = expanding

		# The parameter for GetTraditionGrouping should match the categories in the traditions script
		button_tabs_replace_tradition_category_ocr = {
			shortcut = speed_1
			blockoverride "pre" { text_single = {	raw_text = "1, " } }
			datacontext = "[DivergenceWindow.GetTraditionGrouping( 'realm' )]"
		}

		button_tabs_replace_tradition_category_ocr = {
			shortcut = speed_2
			blockoverride "pre" { text_single = {	raw_text = "2, " } }
			datacontext = "[DivergenceWindow.GetTraditionGrouping( 'combat' )]"
		}

		button_tabs_replace_tradition_category_ocr = {
			shortcut = speed_3
			blockoverride "pre" { text_single = {	raw_text = "3, " } }
			datacontext = "[DivergenceWindow.GetTraditionGrouping( 'societal' )]"
		}
		button_tabs_replace_tradition_category_ocr = {
			shortcut = speed_4
			blockoverride "pre" { text_single = {	raw_text = "4, " } }
			datacontext = "[DivergenceWindow.GetTraditionGrouping( 'ritual' )]"
		}

		button_tabs_replace_tradition_category_ocr = {
			shortcut = speed_5
			blockoverride "pre" { text_single = {	raw_text = "5, " } }
			datacontext = "[DivergenceWindow.GetTraditionGrouping( 'regional' )]"
		}

		expand = { }
	}


	# Needs a wrapping vbox as otherwise the blockoverride for the scrollbox_content doesn't work
	type vbox_diverge_traditions_list_ocr = vbox {
		visible = "[DivergenceWindow.HasTraditionCategory( TraditionGrouping.GetCategory )]"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		using = Animation_Tab_Switch

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_content"
			{
				vbox = {
					layoutpolicy_horizontal = expanding

					datamodel = "[TraditionGrouping.GetPossibleTraditions]"

					item = {
						widget_tradition_selection_buttons_ocr = {
							layoutpolicy_horizontal = expanding

							blockoverride "onclick" {
								onclick = "[DivergenceWindow.ReplaceTradition( CultureTradition.Self )]"
								onclick = "[GetVariableSystem.Clear( 'culture_creation_right_view' )]"
							}
						}
					}
				}
			}
		}
	}
}

types DivergenceTypes
{
	type button_diverge_pillar_selection = button_standard {
		down = "[DivergenceWindow.HasPillar( CulturePillar.Self )]"
		onclick = "[DivergenceWindow.SetPillar( CulturePillar.Self )]"
		using = tooltip_se
		enabled = "[StringIsEmpty(DivergenceWindow.GetPickPillarBlockers( CulturePillar.Self ))]"

		tooltipwidget = {
			using = culture_pillar_tooltip

			blockoverride "above_description_text" {

				text = "[DivergenceWindow.GetPickPillarBlockers( CulturePillar.Self )]"
			}
		}

		block "icon"
		{
			button_icon = {
				parentanchor = vcenter
				position = { 4 0 }
				size = { 26 26 }
				alwaystransparent = yes
				texture = "[CulturePillar.GetIcon]"
				framesize = { 220 220 }
			}
		}

		text_multi = {
			size = { 100% 100% }
			margin = { 10 0 }
			text = "[CulturePillar.GetNameNoTooltip]"
			align = center|nobaseline
			default_format = "#clickable"
		}
	}

	type widget_tradition_selection_buttons = widget {
		size = { 220  184 }

		tooltipwidget = {
			using = culture_tradition_tooltip_clickable

			blockoverride "above_description_text" {
				text = "[DivergenceWindow.GetPickTraditionBlockers( CultureTradition.Self )]"
			}
		}

		vbox = {
			button_standard = {
				size = { 220 120 }

				block "onclick" {
					onclick = "[DivergenceWindow.SetSelectedTradition( CultureTradition.Self )]"
					onclick = "[GetVariableSystem.Set( 'culture_creation_right_view', 'tradition_selection' )]"
				}

				widget_tradition_icon = {
					block "icon_size" {
						size = { 220 120 }
					}
				}

				icon = {
					name = "selection_glow"
					visible = "[ObjectsEqual( CultureTradition.Self, DivergenceWindow.GetSelectedTradition )]"
					parentanchor = center
					size = { 100% 100% }

					state = {
						trigger_on_create = yes

						name = max_glow
						next = min_glow
						duration = 1
						using = Animation_Curve_Default
						alpha = 0.5
					}

					state = {
						name = min_glow
						next = max_glow
						duration = 1.6
						using = Animation_Curve_Default
						alpha = 0.3
					}

					background = {
						texture = "gfx/interface/component_effects/innovation_glow.dds"
						margin = { 14 12 }
						spriteType = Corneredstretched
						spriteborder = { 30 30 }
						tintcolor = { 1 0.8 0.6 1 }
					}
				}
			}

			hbox = {
				text_label_center = {
					name = "name"
					maximumsize = { 220 44 }
					text = "[CultureTradition.GetNameNoTooltip]"
					fontsize_min = 12
					multiline = yes
					align = center
					elide = right

					using = Font_Size_Medium
				}

				widget = {
					size = { 0 30 }
					allow_outside = yes

					warning_icon = {
						visible = "[Not( DivergenceWindow.CanPickTradition( CultureTradition.Self ) )]"
						size = { 30 30 }
						position = { 6 0 }
						widgetanchor = left
						alwaystransparent = yes
						tooltip = "[DivergenceWindow.GetPickTraditionBlockers( CultureTradition.Self )]"
					}
				}
			}


			text_label_center = {
				name = "cost"
				text = "[DivergenceWindow.GetTraditionCost( CultureTradition.Self )]"
				maximumsize = { 130 44 }
				fontsize_min = 12
				multiline = yes
				align = center
				elide = right
				default_format = "#weak"

				using = Font_Size_Small
				tooltip = "[DivergenceWindow.GetTraditionCostBreakdown( CultureTradition.Self )]"
			}
		}
	}

	type button_tabs_replace_tradition_category = button_standard {
		layoutpolicy_horizontal = expanding
		onclick = "[DivergenceWindow.SetTraditionCategory( TraditionGrouping.GetCategory )]"
		down = "[DivergenceWindow.HasTraditionCategory( TraditionGrouping.GetCategory )]"
		text = "TRADITION_CATEGORY_DIVERGE_NAME"
	}

	type map_color_button = button_standard_clean {
		name = "color_button"
		size = { 60 60 }
		tooltip = "CREATE_CULTURE_SELECT_COLOR"

		block "mcb_click"
		{
		}

		highlight_icon = {
			parentanchor = center
			size = { 58 58  }
			texture = "gfx/interface/colors/white.dds"

			block "mcb_color"
			{
			}

			using = Mask_Rough_Edges
		}
	}

	# Needs a wrapping vbox as otherwise the blockoverride for the scrollbox_content doesn't work
	type vbox_diverge_traditions_list = vbox {
		visible = "[DivergenceWindow.HasTraditionCategory( TraditionGrouping.GetCategory )]"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		using = Animation_Tab_Switch

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_content"
			{
				vbox = {
					margin_top = 4
					margin_left = 6

					fixedgridbox = {
						flipdirection = yes
						addcolumn = 240
						addrow = 196
						datamodel_wrap = 2
						datamodel = "[TraditionGrouping.GetPossibleTraditions]"

						item = {
							widget_tradition_selection_buttons = {

								blockoverride "onclick" {
									onclick = "[DivergenceWindow.ReplaceTradition( CultureTradition.Self )]"
									onclick = "[GetVariableSystem.Clear( 'culture_creation_right_view' )]"
								}
							}
						}
					}
				}
			}
		}
	}
}
