types OCR
{
	type widget_inspiration_details_ocr = vbox
	{
		datacontext = "[InspirationsWindow.GetSelectedInspiration]"
		datacontext = "[Inspiration.GetOwner]"
		visible = "[InspirationsWindow.HasSelectedInspiration]"
		layoutpolicy_horizontal = expanding

		using = Window_Background_Subwindow

		state = {
			name = _show
			using = Animation_FadeIn_Quick
			using = Sound_WindowShow_Standard
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
			using = Sound_WindowHide_Standard
		}

		using = tooltip_above

		vbox = {
			name = "selected_inspiration"
			layoutpolicy_horizontal = expanding
			margin = { 5 5 }

			block "hud" {
				hbox = {
					button = {
						visible = "[Has('royal_details', 'inspirations')]"
						shortcut = close_window
						onclick = "[InspirationsWindow.ClearSelectedInspiration]"
					}
					button = {
						visible = "[Has('royal_details', 'selected_inspiration')]"
						shortcut = close_window
						onclick = "[Clear('royal_details')]"
						onclick = "[InspirationsWindow.ClearSelectedInspiration]"
					}
				}

				vbox = {
					visible = "[Not( Inspiration.GetSponsor.IsValid )]"
					layoutpolicy_horizontal = expanding

					button_primary_text = {
						layoutpolicy_horizontal = expanding
						name = "sponsor_inspiration_tutorial_uses_this"
						blockoverride "disabled" {
							visible = "[Not(Character.IsPlayerInteractionValid( 'fund_inspiration_interaction' ))]"
						}
						blockoverride "text" {
							text = START_SPONSOR_INSPIRATION
						}

						enabled = "[Character.IsPlayerInteractionValid( 'fund_inspiration_interaction' )]"
						onclick = "[Character.OpenPlayerInteraction( 'fund_inspiration_interaction' )]"
						tooltip = "[Character.GetPlayerInteractionTooltip( 'fund_inspiration_interaction' )]"
					}

					text_multi_wide = {
						raw_text = "[Character.GetPlayerInteractionValidBlockers( 'fund_inspiration_interaction' )]."
						visible = "[Not(Character.IsPlayerInteractionValid( 'fund_inspiration_interaction' ))]"
					}
				}
			}

			hbox = {
				name = "selected_inspiration_data"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					name = "text"
					layoutpolicy_horizontal = expanding

					vbox = {
						name = "inspiration_progress"
						layoutpolicy_horizontal = expanding

						visible = "[Inspiration.GetSponsor.IsValid]"

						hbox = {
						    layoutpolicy_horizontal = expanding
								spacing = 3

						    text_single = {
						    	raw_text = "[Inspiration.GetNameNoTooltip]"
						    }

								text_single = {
									raw_text = "in progress."
								}

						    expand = { }
						}
						hbox = {
						    layoutpolicy_horizontal = expanding
								spacing = 3

								text_single = {
									text = INSPIRATION_ESTIMATED_REMAINING
									tooltip = INSPIRATION_ESTIMATED_TIME_TOOLTIP
								}

								text_single = {
									raw_text = "left."
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "[Inspiration.GetProgress] out of [GetDefine( 'NInspiration', 'MAX_PROGRESS')] steps, [Inspiration.GetProgressChance]% chance to progress every month."
								}

						    expand = { }
						}
					}

					text_multi_wide = {
						name = "inspiration_text"
						text = "SELECTED_INSPIRATION_TEXT"
					}


					hbox = {
						visible = "[Not(Inspiration.GetSponsor.IsValid)]"
						name = "recuirt_owner"
						layoutpolicy_horizontal = expanding
						spacing = 3

						button_recruit_character = {}

						text_single = {
							raw_text = "[Character.GetSheHe|U] is [Character.GetRelationToString( RoyalCourtWindow.GetCharacter )]"
							tooltip = "EXTENDED_RELATIONS_TOOLTIP"
						}

						dot_l = { }


						expand = {}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "Warning, wants to leave."
						tooltip = "[Character.GetCourtierLeaveDescription]"
						visible = "[And( Character.CourtierWantsToLeaveCourt, Not( Character.IsImprisoned))]"
					}

					hbox = {
				    layoutpolicy_horizontal = expanding

						visible = "[Inspiration.GetSponsor.IsLocalPlayer]"

						text_single = {
							name = "gold_invested"
							text = INSPIRATION_INVESTED_GOLD
						}

				    expand = { }
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				hbox = {
				    layoutpolicy_horizontal = expanding
						spacing = 3

						char_name = {
							block "hud" {
								onclick = "[Set('hide_court', 'yes')]"
							}
						}

						text_single = {
							raw_text = "[Character.GetAge], [Character.Custom('character_health')] health."
						}

				    expand = { }
				}

				hbox = {
				    layoutpolicy_horizontal = expanding

						hbox = {
							spacing = 3
							datamodel = "[Character.GetTraitIndices]"

							item = {
								text_single = {
									datacontext = "[GetTraitForIndex(int32.GetInt)]"
									visible = "[Trait.IsPersonality]"
									raw_text = "[Trait.GetName( GetNullCharacter )],"
								}
							}
						}

				    expand = { }
				}

				hbox = {
				    layoutpolicy_horizontal = expanding
						hbox_skills_grid_character_named_full = {}

				    expand = { }
				}
			}
		}
	}

	type flowcontainer_inspiration_list_item_ocr = button_text
	{
		datacontext = "[Inspiration.GetOwner]"
		# tooltip = "TT_INSPIRATION_WIDGET"
		onclick = "[InspirationsWindow.ToggleInspiration( Inspiration.Self )]"
		onclick = "[InspirationsWindow.RemoveNewInspiration( Inspiration.Self )]"

    blockoverride "text" {
				alwaystransparent = yes
        raw_text = "[Inspiration.GetNameNoTooltip],"
    }

		blockoverride "pre" {
			text_single = {
				visible = "[InspirationsWindow.IsNewInspiration( Inspiration.Self ) ]"
				raw_text = "New"
			}
			text_single = {
				visible = "[And( Inspiration.GetSponsor.IsValid, Not( Inspiration.IsComplete ) )]"

				# raw_text = "[Select_float( GreaterThan_int32( Inspiration.GetProgress, '(int32)0' ), CurrentAndMaxToProgressbarValueInt32( Inspiration.GetProgress, GetDefine( 'NInspiration', 'MAX_PROGRESS' ) ), '(float)2' )] progress."

				raw_text = "INSPIRATION_ESTIMATED_REMAINING"
			}
			text_single = {
				visible = "[And( Inspiration.GetSponsor.IsValid, Not( Inspiration.IsComplete ) )]"
				raw_text = "left,"
			}
			text_single = {
				visible = "[ObjectsEqual( InspirationsWindow.GetSelectedInspiration, Inspiration.Self )]"
				raw_text = "Selected,"
			}
		}
		blockoverride "extra" {
			text_single = {
				raw_text = "[Inspiration.GetOwner.Custom('InspiredPersonQualityShort')]"
			}
			text_single = {
				visible = "[Inspiration.GetOwner.IsGuest]"
				raw_text = "guest"
			}

			comma = { }

			text_single = {
				visible = "[And( Not(Inspiration.GetSponsor.IsValid), Not( Inspiration.IsComplete ) )]"
				raw_text = "[Inspiration.GetBaseGoldCost] base cost."
			}
			text_single = {
				visible = "[And(Inspiration.GetSponsor.IsValid, Inspiration.GetSponsor.IsLocalPlayer)]"
				raw_text = "INSPIRATION_INVESTED_GOLD"
			}
		}
	}

	type flowcontainer_inspirations_list_ocr = flowcontainer
	{
		name = "inspirations_list"
		layoutpolicy_horizontal = expanding

		flowcontainer = {
			direction = vertical
			ignoreinvisible = yes

			flowcontainer = {
		    ignoreinvisible = yes
				direction = vertical
				visible = "[And(RoyalCourtWindow.GetCharacter.IsLocalPlayer, DataModelHasItems(InspirationsWindow.GetPotentialInspirations))]"

				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[SetOrToggle('royal_details', 'inspirations')]"
					shortcut = mapmode_kingdoms_secondary
			    blockoverride "text" {
						alwaystransparent = yes
							raw_text = "[GetDataModelSize(InspirationsWindow.GetPotentialInspirations)] [inspirations|E] available,"
			    }
					blockoverride "extra" {
						text_single = {
							visible = "[Isnt('royal_details')]"
							raw_text = " i."
						}
					}
				}

				flowcontainer = {
					visible = "[Isnt('royal_details')]"
					direction = vertical
					name = "potential_inspirations"
					datamodel = "[DataModelFirst(InspirationsWindow.GetPotentialInspirations, '(int32)3')]"

					item = {
						flowcontainer_inspiration_list_item_ocr = {
							name = "inspiration_item"
							onclick = "[Set('royal_details', 'selected_inspiration')]"
						}
					}
				}

				button_text = {
					visible = "[And(GreaterThan_int32(GetDataModelSize(InspirationsWindow.GetPotentialInspirations), '(int32)3'), Isnt('royal_details'))]"
					onclick = "[SetOrToggle('royal_details', 'inspirations')]"
					blockoverride "extra" {
						text_single = {
							raw_text = "+ [Subtract_int32(GetDataModelSize(InspirationsWindow.GetPotentialInspirations), '(int32)3')] more."
						}
					}
				}

				flowcontainer = {
					direction = vertical
					visible = "[Has('royal_details', 'inspirations')]"
					datamodel = "[InspirationsWindow.GetPotentialInspirations]"

					item = {
						flowcontainer_inspiration_list_item_ocr = {
							name = "inspiration_item"
						}
					}
				}
			}

			flowcontainer = {
			    ignoreinvisible = yes
					direction = vertical
					visible = "[DataModelHasItems(InspirationsWindow.GetSponsoredInspirations)]"

					text_single = {
						raw_text = "[GetDataModelSize(InspirationsWindow.GetSponsoredInspirations)] sponsored inspirations:"
					}

					flowcontainer = {
						direction = vertical
						name = "sponsored_inspirations"
						datamodel = "[InspirationsWindow.GetSponsoredInspirations]"

						item = {
							flowcontainer_inspiration_list_item_ocr = {
								name = "sponsored_item"
							}
						}
					}
			}
		}
	}
}
