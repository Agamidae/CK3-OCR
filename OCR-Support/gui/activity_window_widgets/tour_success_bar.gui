vbox = {
	name = "tour_success_bar" #Needs to match the name of the GUI file
	layoutpolicy_horizontal = expanding

	datacontext = "[ActivityWindow.GetActivity]"

	text_label_center = {
		using = ocr_off
		text = "activity_tour_special_type_title"
		tooltip = "activity_tour_special_type_desc"
	}

	vbox = {
		layoutpolicy_horizontal = expanding
		using = ocr_on
		allow_outside = yes

		datacontext = "[ActivityWindow.AccessSpecialTypeComplexBar( 'tour_success_var' )]"

		# hbox_complex_bar_progress_next_ocr = {
		# 	tooltip = "ACTIVITY_WINDOW_SPECIAL_PROGRESS_TOOLTIP"
		# 	using = tooltip_se
		# }

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 3

			text_single = {
				visible = "[GreaterThan_CFixedPoint(ComplexBar.GetMaxValue, '(CFixedPoint)0')]" # to avoid dividing by zero, just in case
				raw_text = "[Divide_CFixedPoint(ActivityWindow.GetSpecialProgressValue, ComplexBar.GetMaxValue)|%0]"
			}

			text_single = {
				text = "activity_tour_special_type_title"
				tooltip = "activity_tour_special_type_desc"
			}

			dot_l = { }

			expand = { }
		}

		hbox_complex_bar_levels_ocr = {
			layoutpolicy_horizontal = expanding
			blockoverride "modifiers" {
				visible = no
			}

			blockoverride "active_only" {
				visible = "[ActivityWindow.IsActiveSpecialProgressLevel( ComplexBarItem.GetValue )]"
			}
			blockoverride "marker"
			{
				widget_level_marker_ocr = {
					visible = "[GreaterThan_int32( PdxGuiWidget.GetIndexInDataModel, '(int32)0')]"

					blockoverride "visible_active"
					{
						visible = "[ActivityWindow.IsActiveSpecialProgressLevel( ComplexBarItem.GetValue )]"
					}

					blockoverride "visible_inactive"
					{
						visible = "[Not( ActivityWindow.IsActiveSpecialProgressLevel( ComplexBarItem.GetValue ) )]"
					}

					blockoverride "marker_text"
					{
						raw_text = "tier [PdxGuiWidget.GetIndexInDataModel],"
					}
					blockoverride "marker_tooltip"
					{
						raw_text = "[ActivityWindow.GetSpecialTypeComplexBarSegmentDescription( Subtract_int32( PdxGuiWidget.GetIndexInDataModel, '(int32)1' ) )]"
					}
				}
			}
		}
	}

	widget = {
		using = ocr_off
		layoutpolicy_horizontal = expanding
		size = { 300 20 }
		allow_outside = yes

		datacontext = "[ActivityWindow.AccessSpecialTypeComplexBar( 'tour_success_var' )]"

		hbox_complex_bar_progress_next = {
			layoutpolicy_horizontal = expanding
			tooltip = "ACTIVITY_WINDOW_SPECIAL_PROGRESS_TOOLTIP"
			using = tooltip_se
		}

		hbox_complex_bar_levels = {
			layoutpolicy_horizontal = expanding

			blockoverride "marker"
			{
				widget_level_marker = {
					visible = "[GreaterThan_int32( PdxGuiWidget.GetIndexInDataModel, '(int32)0')]"

					blockoverride "visible_active"
					{
						visible = "[ActivityWindow.IsActiveSpecialProgressLevel( ComplexBarItem.GetValue )]"
					}

					blockoverride "visible_inactive"
					{
						visible = "[Not( ActivityWindow.IsActiveSpecialProgressLevel( ComplexBarItem.GetValue ) )]"
					}

					blockoverride "marker_text"
					{
						text = "[PdxGuiWidget.GetIndexInDataModel]"
					}

					blockoverride "marker_tooltip"
					{
						tooltip = "[ActivityWindow.GetSpecialTypeComplexBarSegmentDescription( Subtract_int32( PdxGuiWidget.GetIndexInDataModel, '(int32)1' ) )]"
						using = tooltip_se
					}
				}
			}
		}
	}
}
