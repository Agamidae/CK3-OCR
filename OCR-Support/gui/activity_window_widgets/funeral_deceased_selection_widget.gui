widget = {
	name = "funeral_deceased_selection_widget"
	visible = "[IsShowingFuneralDeceasedSelection]"
	using = base_ocr_window
	layer = middle
	allow_outside = yes

	state = {
		name = _show
		using = Animation_FadeIn_Quick
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
	}

	window_ocr = {
		blockoverride "ocr_header" {
			header_text = {
				layoutpolicy_horizontal = expanding

				blockoverride "pre" {
					text_single = {
						raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('funeral_activity_targets'))]"
					}
				}

				blockoverride "header_text"
				{
					raw_text = "bodies that can be buried."
				}
				blockoverride "button_close"
				{
					onclick = "[ToggleFuneralDeceasedSelection]"
				}
			}
		}
		blockoverride "ocr_content" {
			vbox = {
				name = "contents"
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "guest_list_instruction_text"
					layoutpolicy_horizontal = expanding

					text = "body_to_bury_selection_info"
				}

				vbox = {
					name = "character_grid"
					layoutpolicy_horizontal = expanding
					datamodel = "[GetPlayer.MakeScope.GetList('funeral_activity_targets')]"

					item = {
						potential_selectable_target_portrait_widget_ocr = {
							datacontext = "[Scope.Char]"
							shortcuts_list = {
								blockoverride "click" {
									onclick = "[ActivityPlanner.AddOrSetOnCreationObject( 'body_to_bury', Character.MakeScope )]"
									onclick = "[ToggleFuneralDeceasedSelection]"
								}
							}
							blockoverride "num" {}
							blockoverride "time" {
								visible = no
							}
							blockoverride "selected" {
								visible = "[ObjectsEqual( GetFuneralDeceasedToHonorPlannerContext, Character.Self )]"
							}
							visible = "[FuneralIsBodyAvailable]"

							blockoverride "onclick"
							{
								onclick = "[ActivityPlanner.AddOrSetOnCreationObject( 'body_to_bury', Character.MakeScope )]"
								onclick = "[ToggleFuneralDeceasedSelection]"
								down = "[ObjectsEqual( GetFuneralDeceasedToHonorPlannerContext, Character.Self )]"
							}
						}
					}
				}
			}
		}
	}

	vbox = {
		using = Window_Margins
		using = vanilla

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "deceased_selection_widget_header"
			}
			blockoverride "button_close"
			{
				onclick = "[ToggleFuneralDeceasedSelection]"
			}
		}

		vbox = {
			name = "contents"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			spacing = 3

			text_label_center = {
				name = "guest_list_instruction_text"
				layoutpolicy_horizontal = expanding

				text = "body_to_bury_selection_info"
				default_format = "#I"
				align = center|nobaseline

				margin = {4 4}
			}

			scrollbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				blockoverride "scrollbox_content" {
					vbox = {
						name = "character_grid"
						datamodel = "[GetPlayer.MakeScope.GetList('funeral_activity_targets')]"

						item = {
							potential_selectable_target_portrait_widget = {
								datacontext = "[Scope.Char]"

								size = { 475 100 }
								visible = "[FuneralIsBodyAvailable]"

								blockoverride "onclick"
								{
									onclick = "[ActivityPlanner.AddOrSetOnCreationObject( 'body_to_bury', Character.MakeScope )]"

									onclick = "[ToggleFuneralDeceasedSelection]"
									down = "[ObjectsEqual( GetFuneralDeceasedToHonorPlannerContext, Character.Self )]"
								}
							}
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 16 16 }

			background = {
				using = Background_Area
			}
			button_primary = {
				text = "CLOSE_LABEL"
				onclick = "[ToggleFuneralDeceasedSelection]"
			}
		}
	}
}
