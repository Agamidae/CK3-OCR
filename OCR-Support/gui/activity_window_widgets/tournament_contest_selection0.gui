types OCR {
	type window_contest_selection_vanilla = widget {
		using = vanilla
		size = { 100% 100% }
		using = Activity_Planner_Widget

		background = {
			using = Background_Area_Dark
			margin = { 10 10 }
			alpha = 0.5
		}

		state = {
			name = _show
			using = Animation_FadeIn_Quick

			on_start = "[ActivityPlanner.AccessPhasePageData.SetShownItems( '(int32)4')]"
			on_start = "[ActivityPlanner.AccessPhasePageData.ResetShown( GetDataModelSize( ActivityType.GetPickablePhases ) )]"
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		widget = {
			size = { 100% 100% }

			state = {
				name = _show
				using = Animation_FadeIn_Quick
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					expand = {
						minimumsize = { 0 130 }
					}

					hbox = {
						name = "contest_selection_middle"
						allow_outside = yes
						layoutpolicy_horizontal = expanding

						margin = { 16 0 }
						margin_left = -316
						spacing = 16

						background = {
							using = Background_Area_ExtraDark

							margin = { 16 0 }
							margin_top = 180
							margin_bottom = 220

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_textured_vertical_up.dds"
								blend_mode = alphamultiply
							}

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_textured_vertical_down.dds"
								blend_mode = alphamultiply
							}
						}

						expand = {}

						vbox = {
							layoutpolicy_vertical = expanding

							margin = { 16 0 }
							spacing = 8

							expand = {}

							text_single = {
								layoutpolicy_horizontal = expanding

								text = contest_planner_selection_header
								align = left
								default_format = "#T"
								max_width = 280
								using = Font_Size_Medium
							}

							text_multi = {
								layoutpolicy_horizontal = expanding

								text = contest_planner_selection_description
								autoresize = yes
								max_width = 280
							}

							expand = {}
						}

						vbox = {
							allow_outside = yes

							hbox = {
								allow_outside = yes
								spacing = 8

								hbox = {
									name = "contest_active_slots"
									datamodel = "[ActivityPlanner.AccessPlayerPickedPhases]"
									spacing = 8

									allow_outside = yes

									item = {
										tournament_contest_slot_widget = { }
									}
								}

								hbox = {
									name = "contest_empty_slots"
									spacing = 8

									tournament_empty_contest_slot_widget = {
										visible = "[And( LessThan_int32( GetDataModelSize( ActivityPlanner.AccessPlayerPickedPhases ), '(int32)1' ), GreaterThanOrEqualTo_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)1' ) )]"
									}

									tournament_empty_contest_slot_widget = {
										visible = "[And( LessThan_int32( GetDataModelSize( ActivityPlanner.AccessPlayerPickedPhases ), '(int32)2' ), GreaterThanOrEqualTo_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)2' ) )]"
									}

									tournament_empty_contest_slot_widget = {
										visible = "[And( LessThan_int32( GetDataModelSize( ActivityPlanner.AccessPlayerPickedPhases ), '(int32)3' ), GreaterThanOrEqualTo_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)3' ) )]"
									}

									tournament_empty_contest_slot_widget = {
										visible = "[And( LessThan_int32( GetDataModelSize( ActivityPlanner.AccessPlayerPickedPhases ), '(int32)4' ), GreaterThanOrEqualTo_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)4' ) )]"
									}

									tournament_empty_contest_slot_widget = {
										visible = "[And( LessThan_int32( GetDataModelSize( ActivityPlanner.AccessPlayerPickedPhases ), '(int32)5' ), GreaterThanOrEqualTo_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)5' ) )]"
									}
								}

								hbox = {
									name = "contest_unavailable_slots"
									spacing = 8

									tournament_unavailable_contest_slot = {
										visible = "[LessThan_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)2' )]"
									}

									tournament_unavailable_contest_slot = {
										visible = "[LessThan_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)3' )]"
									}

									tournament_unavailable_contest_slot = {
										visible = "[LessThan_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)4' )]"
									}

									tournament_unavailable_contest_slot = {
										visible = "[LessThan_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)5' )]"
									}
								}
							}

							vbox_available_contests = {
								visible = "[ActivityPlanner.IsEditingAnyPhase]"
							}
						}

						expand = {}
					}

					expand = {
						visible = "[Not( ActivityPlanner.IsEditingAnyPhase )]"
						maximumsize = { 0 80 }
					}

					expand = {
						visible = "[ActivityPlanner.IsEditingAnyPhase]"
						maximumsize = { 0 32 }
					}

					vbox = {
						name = "contest_selection_bottom"
						spacing = 4
						#margin = { 0 26 }

						background = {
							texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
							spriteType = Corneredtiled
							spriteborder = { 18 18 }
							texture_density = 2

							margin = { 64 0 }
							margin_top = 22
							margin_bottom = 28

							modify_texture = {
								name = "overlay"
								texture = "gfx/interface/component_overlay/overlay_effect.dds"
								spriteType = Corneredstretched
								spriteborder = { 0 0 }
								blend_mode = overlay
							}
						}

						cost_breakdown_vbox = {
							datacontext = "[ActivityPlanner.AccessTotalPhaseCostBreakdown]"
							name = "activity_cost"

							blockoverride "heading_text"
							{
								text = "contest_planner_contest_costs"
							}
						}

						button_standard_back = {
							name = "contest_selection_bottom_cancel_planning"
							text = CANCEL_BUTTON

							visible = "[Or( Not( ActivityPlanner.HasPickedPhase ), ActivityPlanner.IsFirstPickedPhase( ActivityPlanner.GetEditingPhase ) )]"

							onclick = "[ActivityPlanner.Close]"
							shortcut = "close_window"
						}

						button_standard = {
							name = "contest_selection_bottom_cancel_selection"
							text = CANCEL_BUTTON
							visible = "[And( ActivityPlanner.IsEditingAnyPhase, Not( ActivityPlanner.IsFirstPickedPhase( ActivityPlanner.GetEditingPhase ) ) )]"
							onclick = "[ActivityPlanner.RemovePhase( ActivityPlanner.AccessEditingPhase )]"
							onclick = "[ActivityPlanner.CancelEditingPhase]"
						}

						button_primary_big = {
							visible = "[And( ActivityPlanner.HasPickedPhase, Not(ActivityPlanner.IsEditingAnyPhase))]"
							text = "[SelectLocalization( ActivityPlanner.IsPlanningStage( 'options' ), 'START', 'CONTINUE' )]"
							onclick = "[ActivityPlanner.ProgressPlanningStage]"
							enabled = "[ActivityPlanner.CanProgressPlanningStage]"
							tooltip = "[ActivityPlanner.GetCanProgressPlanningStageTooltip]"
						}
					}

					expand = {}
				}
			}
		}

		widget = {
			name = "contest_selection_top"
			datacontext = "[ActivityPlanner.AccessSingleLocationPhase]"

			size = { 600 140 }

			background = {
				texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
				spriteType = Corneredtiled
				spriteborder = { 18 18 }
				texture_density = 2

				margin = { 16 16 }

				modify_texture = {
					name = "overlay"
					texture = "gfx/interface/component_overlay/overlay_effect.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
					blend_mode = alphamultiply
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin = { 16 8 }

				ignoreinvisible = yes

				spacing = 8

				hbox = {
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area_Dark

						margin = { 20 16 }

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
							blend_mode = alphamultiply
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding

						text = "[ActivityType.GetName]"
						align = left
					}
				}

				expand = {}

				vbox = {
					name = "contest_selection_header_change_destination"
					datacontext = "[ActivityPlanner.AccessSingleLocationPhase]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					margin = { 0 4 }

					# Background if you have no Type, just using regular Activity image
					background = {
						visible = "[Or( ActivityPlanner.IsPlanningStage( 'special_option_category' ), Not(ActivityPlanner.HasSelectedSpecialOption))]"

						texture = "[ActivityType.GetHeaderBackground]"
						alpha = 0.3
						fittype = centercrop

						margin = { 16 0 }
						margin_top = 4
						margin_bottom = 8

						using = Mask_Rough_Edges

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
							blend_mode = alphamultiply
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						spacing = 8

						text_single = {
							text = "TRAVEL_PLAN_DESTINATION"
							using = Font_Size_Big
							align = left|nobaseline
							default_format = "#high"
						}

						button_round = {
							onclick = "[ActivityPlanner.StartEditingPhase( PlannedActivityPhase.AccessSelf, 'destination' )]"
							tooltip = ACTIVITY_PLANNER_CHANGE_LOCATION_TT

							button_replace = {
								alwaystransparent = yes
								parentanchor = center

							}
						}

						expand = {}
					}

					expand = {}

					hbox = {
						layoutpolicy_horizontal = expanding

						button_tertiary = {
							name = "contest_selection_header_cancel"
							text = CANCEL_BUTTON
							min_width = 300

							onclick = "[ActivityPlanner.Close]"
							shortcut = "close_window"

						}

						expand = {}
					}
				}
			}
		}
	}
}