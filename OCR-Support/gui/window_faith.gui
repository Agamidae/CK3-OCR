######################################################
################### FAITH WINDOW #####################
######################################################

window = {
	name = "faith_window"
	widgetid = "faith_window"
	datacontext = "[FaithWindow.GetFaith]"
	datacontext = "[GetVariableSystem]"
	movable = no
	layer = windows_layer

	size = { 700 100% }


	state = {
		name = _show
		position = { 0 0 }
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"
		# on_finish = "[GetScriptedGui('faith_map_extents').Execute( GuiScope.SetRoot( Faith.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"

		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		on_finish = "[GetScriptedGui('faith_closest_county_ocr').Execute( GuiScope.SetRoot( Faith.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
	}

	state = {
		name = closest
		trigger_when = "[Not(Faith.MakeScope.Var('closest_county').IsSet)]"
		on_finish = "[GetScriptedGui('faith_closest_county_ocr').Execute( GuiScope.SetRoot( Faith.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
	}


	state = {
		name = _hide
		position = { -60 0 }
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"


		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		on_finish = "[Click('clear_last_view')]"
		on_finish = "[Set('holy_site_tip', 'yes')]"
	}

	window_ocr = {
		blockoverride "ocr_header" {
			button = {
				using = close_window_ocr
				onclick = "[FaithWindow.Close]"
			}

			button = {
				using = close_window_ocr
				onclick = "[Clear('faith_view_tabs')]"
				visible = "[Is('faith_view_tabs')]"
			}

			button_text = {
				layoutpolicy_horizontal = expanding
				onclick = "[FaithWindow.ToggleReligionWindow]"
				shortcut = map_mode_diplomatic_relations
				blockoverride "text" {
					raw_text = "FAITH_VIEW_HEADING"
				}
				blockoverride "extra" {

					, = {}
					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3
						visible = "[Isnt('faith_view_tabs')]"

						text_single = {
							visible = "[ObjectsEqual( GetPlayer.GetFaith, Faith.Self )]"
							raw_text = "Your"
						}

						text_single = {
							visible = "[Not(Faith.IsUnreformed)]"
							raw_text = "[organized|E]"
						}

						text_single = {
							visible = "[Faith.IsUnreformed]"
							text = "[GetFaithDoctrine('unreformed_faith_doctrine').GetBaseName]"
						}

						text_single = {
							raw_text = "[Faith.GetReligion.GetAdjective]"
						}

						text_single = {
							raw_text = "[faith|e],"
						}

						text_single = {
							visible = "[EqualTo_int32(GetDataModelSize(Faith.GetReligion.GetFaiths), '(int32)1')]"
							raw_text = "only one,"
						}

						text_single = {
							visible = "[GreaterThan_int32(GetDataModelSize(Faith.GetReligion.GetFaiths), '(int32)1')]"
							raw_text = "one of [GetDataModelSize(Faith.GetReligion.GetFaiths)],"
						}

						text_single = {
							raw_text = "Shift F."
						}
					}

					text_single = {
						visible = "[Is('faith_view_tabs')]"
						raw_text = "[Get('faith_view_tabs')]."
					}
				}
			}

			### Tabs
			hbox = {
				layoutpolicy_horizontal = expanding
				name = "tabs"
				visible = "[Isnt('faith_view_tabs')]"

				text_single = {
					raw_text = "Menus:"
				}

				button_text = {
					blockoverride "pre" {
						text_single = {
							raw_text = "1,"
						}
					}
					blockoverride "text" {
						raw_text = "FAITH_BELIEFS"
					}
					blockoverride "dot" {}
					onclick = "[Set('faith_view_tabs', 'beliefs')]"
					shortcut = "speed_1"
				}

				button_text = {
					blockoverride "pre" {
						text_single = {
							raw_text = "2,"
						}
					}
					blockoverride "text" {
						raw_text = "FAITH_HOLY_SITES"
					}
					blockoverride "dot" {}
					onclick = "[GetVariableSystem.Set( 'faith_view_tabs', 'holy sites' )]"
					shortcut = "speed_2"
				}

				button_text = {
					blockoverride "pre" {
						text_single = {
							raw_text = "3,"
						}
					}
					blockoverride "text" {
						raw_text = "Followers."
					}
					shortcut = "speed_3"
					onclick = "[GetScriptedGui('faith_followers').Execute( GuiScope.SetRoot( FaithWindow.GetFaith.MakeScope ).AddScope('player', GetPlayer.MakeScope ).End )]"
					onclick = "[Set('faith_view_tabs', 'followers')]"
				}

				button_text = {
					shortcut = editor_autosave
					blockoverride "text" {
						raw_text = "A, Adjacent faiths."
					}
					onclick = "[GetScriptedGui('adjacent_faiths_ocr').Execute( GuiScope.SetRoot( Faith.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
					onclick = "[Set('faith_view_tabs', 'adjacent faiths')]"
				}

				agot_patron_tab_button = { }

				expand = {}
			}

			spacer = { size = { 0 5 } }

			# desc
			flowcontainer = {
				visible = "[Has('faith_view_tabs', 'description')]"
				direction = vertical
				layoutpolicy_horizontal = expanding

				button = {
					shortcut = mapmode_house_secondary
					onclick = "[Clear('faith_view_tabs')]"
				}
				flowcontainer = {
					text_multi_wide = {
						raw_text = "[Faith.GetFlavorDesc]"
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Isnt('faith_view_tabs')]"

				# actions
				flowcontainer = {
					layoutpolicy_horizontal = expanding
					direction = vertical
					ignoreinvisible = yes

					button_text = {
						blockoverride "text" {
							text = "FAITH_CONVERSION_CONVERT"
						}
						blockoverride "dot" {

						}
						visible = "[NotEqualTo_uint32( Faith.GetID, GetPlayer.GetFaith.GetID )]"
						onclick = "[ToggleGameViewData( 'faith_conversion', Faith.GetID )]"
					}

					button_text = {
						shortcut = map_mode_15
						blockoverride "text" {
							text = "CREATE_REFORM_FAITH_TEXT"
						}
						blockoverride "extra" {
							, = {}
							text_single = {
								raw_text = "Control F."
							}
						}
						visible = "[ObjectsEqual(Faith.Self, GetPlayer.GetFaith )]"

						onclick = "[OpenGameViewData( 'faith_creation', Faith.GetID )]"
					}

					button_text = {
						blockoverride "text" {
							text = "CREATE_TEMPORAL_HEAD_OF_FAITH_TITLE"
						}
						blockoverride "disabled" {
							visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ))]"
						}
						blockoverride "dot" { }

						visible = "[And( And( Not(Faith.HasDoctrineByKey( 'doctrine_no_head' )), Not( Faith.GetReligiousHeadTitle.IsValid ) ), ObjectsEqual( GetPlayer.GetFaith, Faith.Self ) )]"
						datacontext = "[GetScriptedGui( 'create_head_of_faith' )]"
						enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ) ]"
						onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ) ]"
						tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ) ]"
					}

					button_text = {
						blockoverride "text" {
							text = "RECREATE_TEMPORAL_HEAD_OF_FAITH_TITLE"
						}
						blockoverride "disabled" {
							visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ))]"
						}
						blockoverride "dot" { }

						visible = "[And( And( Not(Faith.HasDoctrineByKey( 'doctrine_no_head' )), And(Faith.GetReligiousHeadTitle.IsValid, Not( Faith.GetReligiousHeadTitle.HasHolder ))), ObjectsEqual( GetPlayer.GetFaith, Faith.Self ) )]"
						datacontext = "[GetScriptedGui( 'recreate_head_of_faith' )]"
						enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ) ]"
						onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ) ]"
						tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ) ]"
					}
				}

				spacer = { size = { 0 5 } }

				button_text = {
					layoutpolicy_horizontal = expanding
					using = prov_click
					datacontext = "[Faith.MakeScope.Var('closest_county')]"
					visible = "[And(Scope.IsSet, Not(ObjectsEqual(Faith.Self, GetPlayer.GetFaith)))]"
					datacontext = "[Scope.Title.GetCountyData.GetCapital]"
					datacontext = "[Scope.Title]"
					blockoverride "extra" {
						text_distance_capital = {}
						text_single = {
							raw_text = "Closest county: [Title.GetNameNoTierNoTooltip],"
						}
						text_single = {
							visible = "[Not(ObjectsEqual(Title.Self, Title.GetHolder.GetTopLiege.GetPrimaryTitle))]"
							raw_text = "in [Title.GetHolder.GetTopLiege.GetPrimaryTitle.GetNameNoTierNoTooltip]"
						}
					}
				}

				# counties
				hbox = {
					layoutpolicy_horizontal = expanding

					button_text = {
						shortcut = character_finder
						onclick = "[Set('faith_view_tabs', 'counties')]"
						onclick = "[GetScriptedGui('faith_counties_ocr').Execute( GuiScope.SetRoot( Faith.MakeScope ).AddScope('player', GetPlayer.MakeScope ).End )]"

						blockoverride "extra" {
							text_single = {
								raw_text = "[Faith.GetNumberOfCountiesOfFaith] counties, C."
							}

							text_single = {
								raw_text = "[Faith.MakeScope.ScriptValue('faith_held_by_enemies')] held by non-believers."
							}
						}
					}

					button_map_extents = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetScriptedGui('faith_map_extents').Execute( GuiScope.SetRoot( Faith.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
						onclick = "[Set('faith_view_tabs', 'map extents')]"
					}

					expand = {}
				}

				# rulers
				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[GetScriptedGui('faith_followers').Execute( GuiScope.SetRoot( FaithWindow.GetFaith.MakeScope ).AddScope('player', GetPlayer.MakeScope ).End )]"
					onclick = "[Set('faith_view_tabs', 'followers')]"

					blockoverride "extra" {
						text_single = {
							raw_text = "[Faith.MakeScope.ScriptValue('num_faith_rulers')] rulers,"
						}

						flowcontainer = {
							ignoreinvisible = yes
							spacing = 3
							visible = "[GetScriptedGui('faith_has_rulers').IsShown( GuiScope.SetRoot( Faith.MakeScope ).End )]"

							text_single = {
								raw_text = "of them"
							}

							text_single = {
								raw_text = "[Faith.MakeScope.ScriptValue('num_faith_sinners')] sinners,"
							}

							text_single = {
								raw_text = "[Faith.MakeScope.ScriptValue('num_faith_virtuous')] virtuous,"
							}

							text_single = {
								visible = "[GetScriptedGui('has_excommunication').IsShown( GuiScope.SetRoot( Faith.MakeScope ).End )]"
								raw_text = "[Faith.MakeScope.ScriptValue('num_faith_excommunicated')] excommunicated,"
							}
						}

						text_single = {
							visible = "[Not(GetScriptedGui('faith_has_rulers').IsShown( GuiScope.SetRoot( Faith.MakeScope ).End ))]"
							raw_text = "[Faith.MakeScope.ScriptValue('faith_followers')] followers."
						}
					}
				}

				# wrong counties
				button_text = {
					layoutpolicy_horizontal = expanding
					shortcut = court_scene_editor_toolset_translate
					onclick = "[GetScriptedGui('faith_holders_wrong_counties').Execute( GuiScope.SetRoot( Faith.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
					onclick = "[Set('faith_view_tabs', 'counties of other faiths')]"

					blockoverride "extra" {
						text_single = {
							raw_text = "[Faith.GetAdherentNamePluralNoTooltip] hold [Faith.MakeScope.ScriptValue('faith_holders_wrong_counties')] counties of other faiths"
						}
						text_single = {
							raw_text = "and converting [Faith.MakeScope.ScriptValue('faith_holders_convert_counties')]."
						}
						text_single = {
							raw_text = "W."
						}
					}
				}


				# holy sites
				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[Set('faith_view_tabs', 'holy sites')]"
					blockoverride "text" {
						raw_text = "[GetDataModelSize(FaithWindow.GetHolySites)] holy sites,"
					}
					blockoverride "extra" {
						text_single = {
							visible = "[GetScriptedGui('all_holy_sites_held_by_faith').IsShown( GuiScope.SetRoot( Faith.MakeScope ).End )]"
							raw_text = "all"
						}
						text_single = {
							raw_text = "[Faith.MakeScope.ScriptValue('faith_holy_sites_held')] held by [Faith.GetAdherentNamePlural]."
						}
					}
				}

				spacer = { size = { 0 5 } }

				# evil and fervor
				vbox = {
					datacontext = "[FaithWindow.GetFaith]"
					layoutpolicy_horizontal = expanding
					visible = "[Isnt('faith_view_tabs')]"

					# fervor
					button_text = {
						layoutpolicy_horizontal = expanding
						shortcut = army_split_half
						onclick = "[Set('faith_view_tabs', 'fervor')]"
						blockoverride "extra" {
							text_single = {
								raw_text = "FAITH_WINDOW_FERVOR"
							}

							text_single = {
								raw_text = "[Faith.GetYearlyFervorChange|=+2] per year. F."
								tooltip = "FERVOR_TT"
							}
						}
					}

					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3
						layoutpolicy_horizontal = expanding

						flowcontainer = {
							ignoreinvisible = yes
							visible = "[Not(ObjectsEqual( GetPlayer.GetFaith, Faith.Self ))]"

							text_single = {
								name = "our_view"
								text = "FAITH_VIEW_OUR_VIEW"
							}

							dot = { }
						}

						flowcontainer = {
							ignoreinvisible = yes
							visible = "[Not(ObjectsEqual( GetPlayer.GetFaith, Faith.Self ))]"

							text_single = {
								name = "their_view"
								text = "FAITH_VIEW_THEIR_VIEW"
							}

							dot = { }
						}
					}
				}
			}

			spacer = { size = { 0 5 } }

			# sins
			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Isnt('faith_view_tabs')]"

				# tenets

				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[Set('faith_view_tabs', 'beliefs')]"
					onclick = "[Set('doctrines', 'tenets')]"
					blockoverride "text" {
						raw_text = "Core tenets:"
					}

					blockoverride "extra" {
						flowcontainer = {
							ignoreinvisible = yes
							spacing = 3
							datamodel = "[FaithWindow.GetGroupingHelper( 'core_tenets' ).GetGrouping]"

							item = {
								text_single = {
									datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
									datacontext = "[GuiFaithDoctrineItem.GetFaith]"
									raw_text = "[FaithDoctrine.GetNameNoTooltip( Faith.Self )]."
								}
							}
						}
					}
				}

				vbox = {
					name = "sins_and_virtues"
					layoutpolicy_horizontal = expanding

					hbox = {
						name = "sins"
						layoutpolicy_horizontal = expanding

						flowcontainer = {
							ignoreinvisible = yes

							text_single = {
								raw_text = "FAITH_WINDOW_SINS"
							}
							space = { }
							text_single = {
								raw_text = "[GetDataModelSize(FaithWindow.GetSins)]"
							}
							text_single = {
								raw_text = ":"
							}
							space = { }
						}

						dynamicgridbox = {
							name = "virtues_grid"
							datamodel = "[FaithWindow.GetSins]"
							flipdirection = yes
							datamodel_wrap = 7

							item = {
								text_single = {
									margin_right = 3
									datacontext = "[GuiVirtueOrSinItem.GetTrait]"
									raw_text = "[Trait.GetNameNoTooltip( GetPlayer )],"
									tooltipwidget = {
										using = faith_window_trait_tooltip
									}
								}
							}
						}

						expand = { }
					}

					hbox = {
						name = "virtues"
						layoutpolicy_horizontal = expanding

						flowcontainer = {
							ignoreinvisible = yes

							text_single = {
								raw_text = "FAITH_WINDOW_VIRTUES"
							}
							space = { }
							text_single = {
								raw_text = "[GetDataModelSize(FaithWindow.GetVirtues)]"
							}
							text_single = {
								raw_text = ":"
							}
							space = { }
						}

						dynamicgridbox = {
							name = "virtues_grid"
							datamodel = "[FaithWindow.GetVirtues]"
							flipdirection = yes

							item = {
								text_single = {
									margin_right = 3
									datacontext = "[GuiVirtueOrSinItem.GetTrait]"
									raw_text = "[Trait.GetNameNoTooltip( GetPlayer )],"
									tooltipwidget = {
										using = faith_window_trait_tooltip
									}
								}
							}
						}

						expand = { }
					}
				}

				# crimes
				flowcontainer = {
					ignoreinvisible = yes
					spacing = 3
					layoutpolicy_horizontal = expanding

					text_single = {
						raw_text = "Crimes [PdxGuiWidget.AccessParent.FindChild('crimes').CountVisibleChildren]:"
					}

					flowcontainer = {
						datamodel = "[FaithWindow.GetGroupingHelper( 'crimes' ).GetGrouping]"
						ignoreinvisible = yes
						name = "crimes"
						spacing = 3


						item = {
							text_single = {
								datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
								datacontext = "[GuiFaithDoctrineItem.GetFaith]"
								raw_text = "[FaithDoctrine.GetGroup.GetName( Faith.Self )],"

								visible = "[EqualTo_string(FaithDoctrine.GetNameNoTooltip( Faith.Self ), Localize('game_concept_criminal'))]"

							}
						}
					}
				}

				spacer = { size = { 0 5 } }

				# desc button
				button_text = {
					shortcut = mapmode_house_secondary
					blockoverride "text" {
						raw_text = "Show faith description, Shift D."
					}
					layoutpolicy_horizontal = expanding
					onclick = "[Set('faith_view_tabs', 'description')]"
				}

				# hof
				vbox = {
					layoutpolicy_horizontal = expanding

					# hof
					flowcontainer = {
						direction = vertical
						layoutpolicy_horizontal = expanding

						char_name = {
							shortcut = army_create_new
							blockoverride "pre" {
								text_single = {
									raw_text = "RELIGIOUS_HEAD"
								}
								, = {}
							}
							blockoverride "extra" {
								text_single = {
									raw_text = "H."
								}
							}
							blockoverride "width" {
								max_width = 600
							}
							datacontext = "[Faith.GetReligiousHead]"
							visible = "[Faith.GetReligiousHead.IsValid]"
						}

						button_text = {
							datacontext = "[Faith.GetReligiousHead]"
							visible = "[Faith.GetReligiousHead.IsValid]"
							shortcut = decrease_speed_2

							onclick = "[ToggleFilteredCharacterInteractionMenu(Character.Self, 'interaction_category_religion')]"
							onclick = "[Set('filtered_actions', 'yes')]"
							blockoverride "text" {
								raw_text = "[GetNumberOfValidInteractionsWithFilter(Character.Self, 'interaction_category_religion')] [head_of_faith|E] Interactions, Z."
							}
						}


						flowcontainer = {
							ignoreinvisible = yes
							visible = "[Not( Faith.GetReligiousHead.IsValid)]"

							text_single = {
								text = "RELIGIOUS_HEAD_EMPTY_DESC"
								max_width = 600
								autoresize = yes
							}

							dot = { }
						}
					}

					# hof doctrines
					vbox = {
						layoutpolicy_horizontal = expanding

						widget_doctrine_item_ocr = {
							visible = "[Faith.HasDoctrineByKey( 'doctrine_spiritual_head' )]"

							blockoverride "background" { }

							blockoverride "doctrine_icon"
							{
								texture = "[GetDoctrine( 'doctrine_spiritual_head' ).GetIcon]"
							}

							blockoverride "wdi_context"
							{
								datacontext = "[GetDoctrine('doctrine_spiritual_head')]"
								datacontext = "[Faith]"
							}
						}

						widget_doctrine_item_ocr = {
							visible = "[Faith.HasDoctrineByKey( 'doctrine_temporal_head' )]"

							blockoverride "background" { }

							blockoverride "doctrine_icon"
							{
								texture = "[GetDoctrine( 'doctrine_temporal_head' ).GetIcon]"
							}

							blockoverride "wdi_context"
							{
								datacontext = "[GetDoctrine('doctrine_temporal_head')]"
								datacontext = "[Faith]"
							}
						}

						button_text = {
							shortcut = map_mode_2
							blockoverride "text" {
								raw_text = "Title: [Title.GetNameNoTooltip|U], T."
							}
							layoutpolicy_horizontal = expanding
							using = title_click
							datacontext = "[Faith.GetReligiousHeadTitle]"
							visible = "[Title.IsValid]"
						}
					}
				}
			}
		}

		blockoverride "ocr_content" {
			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Is('faith_view_tabs')]"

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical
					layoutpolicy_horizontal = expanding
					visible = "[Has('faith_view_tabs', 'fervor')]"

					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3
						text_single = {
							raw_text = "FAITH_WINDOW_FERVOR"
						}
					}

					text_multi_wide = {
						raw_text = "[Faith.GetYearlyFervorChangeDesc]"
					}

					text_multi_wide = {
						raw_text = "game_concept_fervor_desc"
					}

				}

				# beliefs
				vbox = {
					name = "tab_beliefs"
					visible = "[Has('faith_view_tabs', 'beliefs')]"
					layoutpolicy_horizontal = expanding

					spacing = 10

					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[And(Isnt('doctrines'), Isnt('doctrine'))]"
						spacing = -1

						text_single = {
							raw_text = "Links:"
						}

						button_text = {
							shortcut = speed_1
							onclick = "[Set('doctrines', 'tenets')]"
							blockoverride "text" {
								raw_text = "Tenets one."
							}
						}
						button_text = {
							shortcut = speed_2
							onclick = "[Set('doctrines', 'main')]"
							blockoverride "text" {
								raw_text = "Main 2."
							}
						}
						button_text = {
							shortcut = speed_3
							onclick = "[Set('doctrines', 'marriage')]"
							blockoverride "text" {
								raw_text = "Marriage 3."
							}
						}
						button_text = {
							shortcut = speed_4
							onclick = "[Set('doctrines', 'crime')]"
							blockoverride "text" {
								raw_text = "Crimes 4."
							}
						}
						button_text = {
							shortcut = speed_5
							onclick = "[Set('doctrines', 'clergy')]"
							blockoverride "text" {
								raw_text = "Clergy 5."
							}
						}
						button_text = {
							visible = "[DataModelHasItems(FaithWindow.GetGroupingHelper( 'special' ).GetGrouping)]"
							shortcut = character_finder
							onclick = "[Set('doctrines', 'special')]"
							blockoverride "text" {
								raw_text = "special C."
							}
						}

						expand = {}
					}

					button = {
						using = close_window_ocr
						visible = "[Is('doctrines')]"
						onclick = "[Clear('doctrines')]"
					}

					button = {
						using = close_window_ocr
						visible = "[Is('doctrine')]"
						onclick = "[Clear('doctrine')]"
					}

					### Core Tenets


					vbox_doctrine_group = {
						blockoverride "set" {
							onclick = "[Set('doctrines', 'tenets')]"
						}
						visible = "[Or(Isnt('doctrines'), Has('doctrines', 'tenets'))]"
						blockoverride "datamodel" {
							datamodel = "[FaithWindow.GetGroupingHelper( 'core_tenets' ).GetGrouping]"
						}
						blockoverride "doctrine" {
							raw_text = "FAITH_CORE_TENETS_HEADING"
						}

						blockoverride "item" {
							button = {
								visible = "[Or(Isnt('doctrine'), Has('doctrine', FaithDoctrine.GetNameNoTooltip( Faith.Self )))]"
								onclick = "[Set('doctrine', FaithDoctrine.GetNameNoTooltip( Faith.Self ))]"
								layoutpolicy_horizontal = expanding
								datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
								datacontext = "[GuiFaithDoctrineItem.GetFaith]"
								shortcuts_list = {
									visible = "[Has('doctrines', 'tenets')]"
									blockoverride "click" {
										onclick = "[Set('doctrine', FaithDoctrine.GetNameNoTooltip( Faith.Self ))]"
									}
								}
								container_tenet_item_ocr = {
									blockoverride "num" {
										visible = "[Has('doctrines', 'tenets')]"
									}
									resizeparent = yes
									margin = { 3 1 }
									tooltip = "FAITH_WINDOW_DOCTRINE_TOOLTIP"
								}
							}
						}
					}

					###
					vbox_doctrine_group = {
						visible = "[And(DataModelHasItems(FaithWindow.GetGroupingHelper( 'special' ).GetGrouping), Or(Isnt('doctrines'), Has('doctrines', 'special')))]"
						blockoverride "set" {
							onclick = "[Set('doctrines', 'special')]"
						}
						blockoverride "item" {
							flowcontainer = {
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes
								direction = vertical
								datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
								datacontext = "[GuiFaithDoctrineItem.GetFaith]"
								text_single = {
									raw_text = "[FaithDoctrine.GetNameNoTooltip( GuiFaithDoctrineItem.GetFaith )]."
									tooltip = "FAITH_WINDOW_DOCTRINE_TOOLTIP_WITH_FAITH"
									visible = "[Not(Has('doctrines', 'special'))]"
								}
								text_multi_wide = {
									visible = "[Has('doctrines', 'special')]"
									raw_text = "FAITH_WINDOW_DOCTRINE_TOOLTIP_WITH_FAITH"
								}
							}
						}
					}

					vbox_doctrine_group = {
						blockoverride "set" {
							onclick = "[Set('doctrines', 'main')]"
						}
						visible = "[Or(Isnt('doctrines'), Has('doctrines', 'main'))]"
						blockoverride "datamodel" {
							datamodel = "[FaithWindow.GetGroupingHelper( 'main_group' ).GetGrouping]"
						}
						blockoverride "doctrine" {
							raw_text = "FAITH_DOCTRINES_IMPORTANT"
						}
					}

					vbox_agot_extra_doctrines = { }

					vbox_doctrine_group = {
						blockoverride "set" {
							onclick = "[Set('doctrines', 'marriage')]"
						}
						visible = "[Or(Isnt('doctrines'), Has('doctrines', 'marriage'))]"
						blockoverride "datamodel" {
							datamodel = "[FaithWindow.GetGroupingHelper( 'marriage' ).GetGrouping]"
						}
						blockoverride "doctrine" {
							raw_text = "FAITH_DOCTRINES_MARRIAGE"
						}
					}

					##
					vbox_doctrine_group = {
						blockoverride "set" {
							onclick = "[Set('doctrines', 'crime')]"
						}
						visible = "[Or(Isnt('doctrines'), Has('doctrines', 'crime'))]"
						blockoverride "datamodel" {
							datamodel = "[FaithWindow.GetGroupingHelper( 'crimes' ).GetGrouping]"
						}
						blockoverride "doctrine" {
							raw_text = "FAITH_DOCTRINES_CRIMES"
						}
					}

					###

					vbox_doctrine_group = {
						blockoverride "set" {
							onclick = "[Set('doctrines', 'clergy')]"
						}
						visible = "[Or(Isnt('doctrines'), Has('doctrines', 'clergy'))]"
						blockoverride "datamodel" {
							datamodel = "[FaithWindow.GetGroupingHelper( 'clergy' ).GetGrouping]"
						}
						blockoverride "doctrine" {
							raw_text = "FAITH_DOCTRINES_CLERGY"
						}
					}
				}

				# map extents
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					visible = "[Has('faith_view_tabs', 'map extents')]"

					state = {
						name = _hide
						on_finish = "[Set('map_extent_de_jure_tip', 'yes')]"
					}

					blockoverride "name" {
						raw_text = "[Faith.GetNameNoTooltip]"
					}
					blockoverride "refresh" {
						onclick = "[GetScriptedGui('faith_map_extents').Execute( GuiScope.SetRoot( Faith.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
					}
					# blockoverride "average" {
					# 	datacontext = "[Faith.MakeScope]"
					# }
					flow_map_extents = {
						layoutpolicy_horizontal = expanding
						datacontext = "[Faith.MakeScope]"
					}

					spacer = { size = { 0 5 } }

					flow_map_areas = {
						datacontext = "[Faith.MakeScope]"
						blockoverride "center" {
							datacontext = "[Faith.MakeScope.Var('center').Title.GetCountyData]"
							visible = "[Faith.MakeScope.Var('center').IsSet]"
						}
						layoutpolicy_horizontal = expanding
					}

					expand = {}
				}

				# holy sites
				vbox = {
					name = "holy_sites"
					visible = "[GetVariableSystem.HasValue( 'faith_view_tabs', 'holy sites' )]"
					layoutpolicy_horizontal = expanding

					flowcontainer = {
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes
						spacing = 3

						text_single = {
							raw_text = "[GetDataModelSize(FaithWindow.GetHolySites)] holy sites,"
						}
						text_single = {
							visible = "[GetScriptedGui('all_holy_sites_held_by_faith').IsShown( GuiScope.SetRoot( Faith.MakeScope ).End )]"
							raw_text = "all"
						}
						text_single = {
							raw_text = "[Faith.MakeScope.ScriptValue('faith_holy_sites_held')] held by [Faith.GetAdherentNamePlural]."
						}
					}

					flowcontainer = {
						layoutpolicy_horizontal = expanding
						visible = "[Isnt('holy_site_tip')]"

						text_single = {
							datacontext = "[FaithWindow.GetFaith]"
							text = "FAITH_HOLY_SITE_EXPLANATION"
						}

						dot = { }
					}

					# button_text = {
					# 	blockoverride "text" {
					# 		raw_text = "[Select_CString(GetVariableSystem.Exists('site_holders'), 'Show', 'Hide')] holders."
					# 	}
					# 	layoutpolicy_horizontal = expanding
					# 	onclick = "[GetVariableSystem.Toggle('site_holders')]"
					# }

					button_text = {
						shortcut = army_split_half
						blockoverride "text" {
							raw_text = "[Select_CString(GetVariableSystem.Exists('holy_site_effects'), 'Show', 'Hide')] effects, F."
						}
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Toggle('holy_site_effects')]"
					}

					spacer = { size = { 0 5 } }

					button_text = {
						layoutpolicy_horizontal = expanding
						visible = "[GreaterThan_CFixedPoint(Faith.MakeScope.ScriptValue('faith_holy_sites_held'), '(CFixedPoint)0')]"
						blockoverride "text" {
							raw_text = "[Faith.MakeScope.ScriptValue('faith_holy_sites_held')] holy sites held by [Faith.GetAdherentNamePlural]:"
						}
					}

					vbox_holy_sites_ocr = {}

					button_text = {
						visible = "[GreaterThan_CFixedPoint(Faith.MakeScope.ScriptValue('faith_holy_sites_not_held'), '(CFixedPoint)0')]"
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "[Faith.MakeScope.ScriptValue('faith_holy_sites_not_held')] holy sites not held by [Faith.GetAdherentNamePlural]:"
						}
					}

					vbox_holy_sites_ocr = {
						blockoverride "visible" {
							visible = "[Not(GuiHolySiteItem.IsHeldByFaith)]"
						}
					}
				}

				# followers
				vbox = {
					layoutpolicy_horizontal = expanding

					visible = "[Has('faith_view_tabs', 'followers')]"

					flowcontainer = {
						ignoreinvisible = yes
						layoutpolicy_horizontal = expanding
						visible = "[Isnt('faith_followers_sort')]"

						button_text = {
							shortcut = army_split_half
							onclick = "[GetScriptedGui('faith_followers_filter').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
							onclick = "[GetScriptedGui('faith_followers').Execute( GuiScope.SetRoot( Faith.MakeScope ).AddScope('player', GetPlayer.MakeScope ).End )]"
							blockoverride "pre" {
								text_single = {
									raw_text = "[GetDataModelSize(FaithWindow.GetFaith.MakeScope.GetList('followers'))] [FaithWindow.GetFaith.GetAdjectiveNoTooltip] [Select_CString(GetPlayer.MakeScope.Var('faith_followers_filter').IsSet, 'followers', 'rulers')],"
								}
							}
							blockoverride "text" {
								raw_text = "show [Select_CString(GetPlayer.MakeScope.Var('faith_followers_filter').IsSet, 'rulers only', 'all followers')], F."
							}
						}
					}


					flowcontainer = {
						ignoreinvisible = yes
						visible = "[Isnt('faith_followers_sort')]"

						layoutpolicy_horizontal = expanding

						button_text = {
							shortcut = map_mode_2
							onclick = "[Set('faith_followers_sort', 'yes')]"
							blockoverride "text" {
								raw_text = "Sorted by:"
							}
							blockoverride "extra" {
								text_single = {
									visible = "[Not(GetPlayer.MakeScope.Var('faith_followers_sort').IsSet)]"
									raw_text = "realm size,"
								}
								text_single = {
									visible = "[GetPlayer.MakeScope.Var('faith_followers_sort').IsSet]"
									raw_text = "[GetPlayer.MakeScope.Var('faith_followers_sort').GetFlagName],"
								}

								text_single = {
									raw_text = "T."
								}
							}
						}

						button_text = {
							visible = "[Isnt('faith_followers_sort')]"
							shortcut = map_mode_18
							onclick = "[GetScriptedGui('faith_followers').Execute( GuiScope.SetRoot( Faith.MakeScope ).AddScope('player', GetPlayer.MakeScope ).End )]"
							blockoverride "extra" {
								text_single = {
									raw_text = "Refresh, Control R."
								}
							}
						}
					}


					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical
						layoutpolicy_horizontal = expanding
						visible = "[Is('faith_followers_sort')]"
						datamodel = "[GetGlobalList('faith_followers_sort')]"

						button = {
							using = close_window_ocr
							onclick = "[Clear('faith_followers_sort')]"
						}

						text_single = {
							raw_text = "Sort by:"
						}

						item = {
							button_text = {
								blockoverride "y" {}
								blockoverride "sclick" {
									onclick = "[GetScriptedGui('faith_followers').Execute( GuiScope.SetRoot( Faith.MakeScope ).AddScope('player', GetPlayer.MakeScope ).AddScope('sorting', MakeScopeFlag(Scope.GetFlagName)).End )]"
									onclick = "[Clear('faith_followers_sort')]"
								}
								shortcuts_list = {}
								blockoverride "text" {
									raw_text = "[Scope.GetFlagName]"
								}
							}
						}
					}

					fixedgridbox = {
						layoutpolicy_horizontal = expanding
						addrow = 20
						addcolumn = 690
						datamodel = "[FaithWindow.GetFaith.MakeScope.GetList('followers')]"
						visible = "[Isnt('faith_followers_sort')]"

						item = {
							button_text = {
								blockoverride "sclick" {
									using = char_click
								}
								shortcuts_list = {
								}
								blockoverride "num" {}
								datacontext = "[Scope.GetCharacter]"
								blockoverride "pre" {
									text_single = {
										raw_text = "[Character.GetFirstNameNoTooltip]"
									}

									text_single = {
										margin_right = -3
										visible = "[Character.HasLandedTitles]"
										raw_text = "of [Character.GetPrimaryTitle.GetNameNoTierNoTooltip]"
									}
								}
								blockoverride "extra" {
									, = {}
									flowcontainer = {
										ignoreinvisible = yes
										spacing = 3
										visible = "[GetPlayer.MakeScope.Var('faith_followers_sort').IsSet]"

										text_single = {
											visible = "[EqualTo_string(GetPlayer.MakeScope.Var('faith_followers_sort').GetFlagName, 'piety')]"
											raw_text = "[Character.GetPiety] piety."
										}
										text_single = {
											visible = "[EqualTo_string(GetPlayer.MakeScope.Var('faith_followers_sort').GetFlagName, 'devotion')]"
											raw_text = "[GetPietyLevelName(Character.GetPietyLevel)]."
										}
										text_single = {
											visible = "[EqualTo_string(GetPlayer.MakeScope.Var('faith_followers_sort').GetFlagName, 'strength')]"
											raw_text = "[Character.GetMilitaryStrengthText] men,"
										}
										text_single = {
											visible = "[EqualTo_string(GetPlayer.MakeScope.Var('faith_followers_sort').GetFlagName, 'sins')]"
											raw_text = "[Character.MakeScope.ScriptValue('num_of_sins')] sins,"
										}
										text_single = {
											visible = "[EqualTo_string(GetPlayer.MakeScope.Var('faith_followers_sort').GetFlagName, 'virtues')]"
											raw_text = "[Character.MakeScope.ScriptValue('num_of_virtues')] virtues,"
										}
										text_single = {
											raw_text = "[Character.RealmSize] counties,"
										}
									}
									# text_single = {
									# 	raw_text = "[Character.GetTitleAsNameNoTooltip]"
									# }


									text_single = {
										visible = "[Not(ObjectsEqual(Province.Self, MyCapital))]"
										datacontext = "[Character.GetCurrentLocation]"
										raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)]."
									}
								}
							}
						}
					}
				}

				# counties
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Has('faith_view_tabs', 'counties')]"

					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3
						layoutpolicy_horizontal = expanding

						button_text = {
							shortcut = army_split_half
							onclick = "[GetScriptedGui('faith_counties_filter').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
							onclick = "[GetScriptedGui('faith_counties_ocr').Execute( GuiScope.SetRoot( Faith.MakeScope ).AddScope('player', GetPlayer.MakeScope ).End )]"
							blockoverride "extra" {
								text_single = {
									raw_text = "[GetDataModelSize(Faith.MakeScope.GetList('faith_counties'))] counties[AddTextIf(GetPlayer.MakeScope.Var('faith_counties_filter').IsSet, ' held by non-believers')]."
								}
								text_single = {
									raw_text = "Show [Select_CString(GetPlayer.MakeScope.Var('faith_counties_filter').IsSet, 'all', 'held by non-believers')] F,"
								}
							}
						}

						button_text = {
							onclick = "[GetScriptedGui('faith_counties_ocr').Execute( GuiScope.SetRoot( Faith.MakeScope ).AddScope('player', GetPlayer.MakeScope ).End )]"
							shortcut = map_mode_18
							blockoverride "text" {
								raw_text = "Refresh, Control R."
							}
						}
					}

					fixedgridbox = {
						layoutpolicy_horizontal = expanding
						addrow = 20
						addcolumn = 690
						datamodel = "[Faith.MakeScope.GetList('faith_counties')]"

						item = {
							button_county_ocr = {
								shortcuts_list = {
									blockoverride "click" {
										using = prov_click
									}
								}
								blockoverride "num" {}
								blockoverride "extra" {
									text_single = {
										# visible = "[GetPlayer.MakeScope.Var('faith_counties_filter').IsSet]"
										visible = "[Not(ObjectsEqual(Faith.Self, Title.GetHolder.GetFaith))]"
										raw_text = "Holder is [Title.GetHolder.GetFaith.GetAdjectiveNoTooltip]."
									}
								}
							}
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Has('faith_view_tabs', 'counties of other faiths')]"

					button_text = {
						layoutpolicy_horizontal = expanding
						shortcut = map_mode_18

						blockoverride "text" {
							raw_text = "[GetDataModelSize(Faith.MakeScope.GetList('wrong_counties'))] counties. refresh, Control R."
						}
					}

					fixedgridbox = {
						layoutpolicy_horizontal = expanding
						addrow = 20
						addcolumn = 600
						datamodel = "[Faith.MakeScope.GetList('wrong_counties')]"

						item = {
							button_county_ocr = {
								blockoverride "num" {}
								shortcuts_list = {}
								blockoverride "faith" {}
								blockoverride "sclick" {
									using = prov_click
								}
							}
						}
					}
				}

				# adjacent
				vbox = {
					layoutpolicy_horizontal = expanding

					visible = "[Has('faith_view_tabs', 'adjacent faiths')]"

					button_text = {
						layoutpolicy_horizontal = expanding
						shortcut = map_mode_18
						onclick = "[GetScriptedGui('adjacent_faiths_ocr').Execute( GuiScope.SetRoot( Faith.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
						blockoverride "text" {
							raw_text = "[GetDataModelSize(Faith.MakeScope.GetList('adjacent_faiths'))] faiths, Refresh Control R."
						}
					}

					fixedgridbox = {
						layoutpolicy_horizontal = expanding
						addrow = 20
						addcolumn = 690
						datamodel = "[FaithWindow.GetFaith.MakeScope.GetList('adjacent_faiths')]"

						item = {
							button_text = {
								datacontext = "[Scope.Faith]"
								datacontext = "[Scope.Var('closest_county').Title.GetCountyData.GetCapital]"
								blockoverride "sclick" {
									onclick = "[OpenGameViewData( 'faith', Faith.GetID )]"
									onclick = "[Clear('faith_view_tabs')]"
								}
								shortcuts_list = {}
								blockoverride "num" {}
								blockoverride "text" {
									raw_text = "[Faith.GetNameNoTooltip],"
								}
								blockoverride "extra" {
									text_single = {
										raw_text = "[Faith.GetReligion.GetNameNoTooltip],"
									}
									text_single = {
										raw_text = "[Faith.GetNumberOfCountiesOfFaith] counties,"
									}
									text_distance_capital = {}
								}
							}
						}
					}
				}
			}
		}
	}

	window_faith_vanilla = {}

	window_faith_patron_tab = {} # AGOT Added

}

### RELIGION VIEW
window = {
	name = "religion_window"
	using = base_ocr_window
	size = { 700 100% }
	position = { 0 0 }
	datacontext = "[ReligionWindow.GetReligion]"
	layer = top

	state = {
		name = _show
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Sound_WindowHide_Standard
	}

	attachto = {
		widgetid = "faith_window"
		inherit_visibility = no
	}

	window_ocr = {
		blockoverride "show_window" {
		}
		blockoverride "ocr_header" {

			button = {
				using = close_window_ocr
				onclick = "[ReligionWindow.Close]"
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				# text_single = {
				# 	raw_text = "[Faith.GetNameNoTooltip],"
				# }

				text_single = {
					raw_text = "[GetDataModelSize(ReligionWindow.GetFaiths)] [AddTextIf(ReligionWindow.ShowOnlyReligionFaiths, ReligionWindow.GetReligion.GetAdjectiveNoTooltip)][AddTextIf(ReligionWindow.ShowOnlyReligionFaiths, ' ')]faiths."
				}

				expand = {}
			}

			hbox = {
				# alpha = 0
				visible = no
				layoutpolicy_horizontal = expanding
				name = "tabs"

				text_single = {
					raw_text = "Menus:"
				}

				button_text = {
					blockoverride "pre" {
						text_single = {
							raw_text = "1,"
						}
					}
					blockoverride "text" {
						raw_text = "FAITH_BELIEFS"
					}
					blockoverride "dot" {}
					onclick = "[Set('faith_view_tabs', 'beliefs')]"
					onclick = "[ReligionWindow.Close]"
					shortcut = "speed_1"
				}

				button_text = {
					blockoverride "pre" {
						text_single = {
							raw_text = "2,"
						}
					}
					blockoverride "text" {
						raw_text = "FAITH_HOLY_SITES"
					}
					blockoverride "dot" {}
					onclick = "[GetVariableSystem.Set( 'faith_view_tabs', 'holy sites' )]"
					onclick = "[ReligionWindow.Close]"
					shortcut = "speed_2"
				}

				# button_text = {
				# 	blockoverride "pre" {
				# 		text_single = {
				# 			raw_text = "3,"
				# 		}
				# 	}
				# 	blockoverride "text" {
				# 		raw_text = "Other faiths."
				# 	}
				# 	shortcut = "speed_3"
				# 	onclick = "[ReligionWindow.Close]"
				# }

				button_text = {
					blockoverride "pre" {
						text_single = {
							raw_text = "4,"
						}
					}
					blockoverride "text" {
						raw_text = "Followers."
					}
					shortcut = "speed_4"
					onclick = "[Set('faith_view_tabs', 'followers')]"
					onclick = "[ReligionWindow.Close]"
				}

				agot_patron_tab_button = { }

				expand = {}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = -3

				### Only Selected religion faiths
				hbox = {
					layoutpolicy_horizontal = expanding
					button_text = {
						blockoverride "text" {
							raw_text = "[Select_CString(ReligionWindow.ShowOnlyReligionFaiths, 'Show all existing faiths', 'Show only fiaths of this religion')]."
						}
						onclick = "[ReligionWindow.OnShowOnlyReligionFaiths]"
					}

					expand = { }
					using = tooltip_ne
				}

				hbox = {
					spacing = 0
					layoutpolicy_horizontal = expanding

					text_single = {
						text = "SORT_BY"
						align = left
					}

					dropdown_sort_characterlist = {
						datamodel = "[ReligionWindow.GetOrderByOptions]"
						onselectionchanged = "[ReligionWindow.OnOrderBySelectionChanged]"
						selectedindex = "[ReligionWindow.GetOrderBySelectedIndex]"

						blockoverride "text_button_drop" {
							text = "[OrderFaithOption.GetName]"
						}
					}

					expand = { }
				}
			}

		}
		blockoverride "ocr_content" {
			vbox = {
				datamodel = "[ReligionWindow.GetFaiths]"
				layoutpolicy_horizontal = expanding

				item = {
					button_standard = {
						name = "show_faith_info"
						layoutpolicy_horizontal = expanding
						size = { 0 20 }

						shortcuts_list = {
							blockoverride "click" {
								onclick = "[OpenGameViewData( 'faith', Faith.GetID )]"
								onclick = "[ReligionWindow.Close]"
							}
						}
						state = {
							name = _mouse_click
							on_finish = "[OpenGameViewData( 'faith', Faith.GetID )]"
							on_finish = "[ReligionWindow.Close]"
						}

						background = {
							visible = "[Faith.IsSelected]"
							using = Background_Area
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = -2
							resizeparent =yes

							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								text_single = {
									raw_text = "[IndexNumber], "
								}

								text_single = {
									name = "faith_name"
									raw_text = "FAITH_COOLTIP_GETNAME"
									max_width = 300
								}

								dot = {}

								hbox = {
									visible = "[Not(ReligionWindow.ShowOnlyReligionFaiths)]"

									space = { }

									text_single = {
										name = "religion_faith_name"
										text = "FAITH_RELIGION"
										max_width = 300
									}

									dot = { }
								}

								hbox = {
									visible = "[GreaterThan_int32(Faith.GetNumberOfCountiesOfFaith, '(int32)0')]"
									space = { }

									text_single = {
										name = "fervor"
										text = "FAITH_WINDOW_FERVOR"
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									visible = "[EqualTo_int32(Faith.GetNumberOfCountiesOfFaith, '(int32)0')]"
									spacing = 3

									text_single = {
										name = "counties"
										raw_text = " [Faith.GetNumberOfCountiesOfFaith] counties,"
									}

									text_single = {
										raw_text = "[GuiScope.SetRoot(Faith.MakeScope).ScriptValue('faith_followers')] total followers."
									}

									expand = { }
								}

								expand = { }
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3
								visible = "[GreaterThan_int32(Faith.GetNumberOfCountiesOfFaith, '(int32)0')]"

								text_single = {
									name = "counties"
									raw_text = "[Faith.GetNumberOfCountiesOfFaith] counties,"
								}

								text_single = {
									raw_text = "[GuiScope.SetRoot(Faith.MakeScope).ScriptValue('faith_rulers')] rulers."
									visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Faith.MakeScope).ScriptValue('faith_rulers'), '(CFixedPoint)0')]"
								}

								text_single = {
									raw_text = "[GuiScope.SetRoot(Faith.MakeScope).ScriptValue('faith_followers')] total followers."
								}
								expand = { }
							}
						}
					}
				}
			}
		}
	}
}


	######################################################
	################ TYPES AND TEMPLATES #################
	######################################################

types FaithCreationWindow
{
	type name_entry_big = editbox_standard_with_label {
		layoutpolicy_horizontal = expanding

		blockoverride "editbox_label"
		{
			block "label"
			{
				text = "DEFAULT_TEXT"
			}
		}
		block "entry_big_size" {
			size = { 380 30 }
		}
	}
}

types OCR {
	type container_tenet_item_ocr = flowcontainer {
		layoutpolicy_horizontal = expanding
		direction = vertical
		ignoreinvisible = yes
		name = "doctrine_name"
		flowcontainer = {
			ignoreinvisible = yes
			spacing = 3

			text_single = {
				block "num" {
					visible = no
				}
				raw_text = "[IndexNumber],"
			}
			text_single = {
				raw_text = "[FaithDoctrine.GetNameNoTooltip( Faith.Self )]."
			}
			visible = "[Not(Has('doctrine', FaithDoctrine.GetNameNoTooltip( Faith.Self )))]"
		}

		text_multi = {
			max_width = 590
			visible = "[Has('doctrine', FaithDoctrine.GetNameNoTooltip( Faith.Self ))]"
			autoresize = yes
			raw_text = "FAITH_WINDOW_DOCTRINE_TOOLTIP"
		}
	}

	type widget_doctrine_item_ocr = vbox {
		block "wdi_context"
		{
			datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
			datacontext = "[GuiFaithDoctrineItem.GetFaith]"
		}
		block "tooltip" {
			tooltip = "FAITH_WINDOW_DOCTRINE_TOOLTIP_WITH_FAITH"
		}
		tooltip_offset = { 0 25 }
		layoutpolicy_horizontal = expanding
		spacing = 3
		visible = "[Or(Isnt('doctrine'), Has('doctrine', FaithDoctrine.GetGroup.GetName( Faith.Self )))]"

		button_text = {
			layoutpolicy_horizontal = expanding
			alwaystransparent = "[IsGameViewOpen('faith_creation')]"
			blockoverride "y" {
				visible = "[Is('doctrines')]"
			}
			blockoverride "sclick" {
				onclick = "[Set('doctrine', FaithDoctrine.GetGroup.GetName( Faith.Self ))]"
			}
			shortcuts_list = {
				visible = "[Is('doctrines')]"
			}
			# enabled = "[Is('doctrines')]"
			blockoverride "pre" {
				text_single = {
					name = "doctrine_group_name"
					block "text_title"
					{
						raw_text = "[FaithDoctrine.GetGroup.GetName( Faith.Self )]:"
					}
				}

				text_single = {
					visible = "[Isnt('doctrine')]"
					name = "faith_name"
					block "text_desc"
					{
						raw_text = "[FaithDoctrine.GetNameNoTooltip( Faith.Self )]."
					}
				}

			}
		}

		text_multi_wide = {
			visible = "[Has('doctrine', FaithDoctrine.GetGroup.GetName( Faith.Self ))]"
			raw_text = "FAITH_WINDOW_DOCTRINE_TOOLTIP"
		}

		expand = { }
	}

	type vbox_doctrine_group = vbox {
		layoutpolicy_horizontal = expanding

		button_text = {
			visible = "[Isnt('doctrine')]"
			block "set" {}
			layoutpolicy_horizontal = expanding
			blockoverride "text" {
				raw_text = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('items').CountVisibleChildren]"
			}
			blockoverride "extra" {
				text_single = {
					block "doctrine" {
						raw_text = "FAITH_DOCTRINES_SPECIAL"
					}
				}
				text_single = {
					margin_left = -3
					raw_text = ":"
				}

				text_single = {
					visible = "[And(Is('doctrines'), Hasnt('doctrines', 'special'))]"
					raw_text = "select for details."
				}
			}
		}

		vbox = {
			name = "items"
			block "datamodel" {
				datamodel = "[FaithWindow.GetGroupingHelper( 'special' ).GetGrouping]"
			}
			layoutpolicy_horizontal = expanding

			item = {
				block "item" {
					widget_doctrine_item_ocr = {}
				}
			}
		}
	}

	type vbox_holy_sites_ocr = vbox {
		layoutpolicy_horizontal = expanding
		datamodel = "[FaithWindow.GetHolySites]"

		item = {
			vbox = {
				datacontext = "[GuiHolySiteItem.GetHolySite]"
				datacontext = "[HolySite.GetBarony]"
				block "visible" {
					visible = "[GuiHolySiteItem.IsHeldByFaith]"
				}
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						button_text = {
							blockoverride "num" {}
							blockoverride "sclick" {
								using = prov_click
							}
							shortcuts_list = {}
							blockoverride "text" {
								raw_text = "[HolySite.GetName],"
							}
							datacontext = "[HolySite.GetBarony.GetProvince]"
							blockoverride "extra" {
								text_single = {
									raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)],"
								}
								text_single = {
									raw_text = "inside"
								}
								text_single = {
									raw_text = "[HolySite.GetBarony.GetHolder.GetTopLiege.GetPrimaryTitle.GetNameNoTierNoTooltip],"
								}
								text_single = {
									raw_text = "[HolySite.GetBarony.GetHolder.GetTopLiege.GetMilitaryStrengthText] strong."
								}
							}
						}

						# text_single = {
						# 	datacontext = "[FaithWindow.GetFaith]"
						# 	visible = "[Not( GuiHolySiteItem.IsHeldByFaith )]"
						# 	raw_text = "Not held by [Faith.GetNameNoTooltip]."
						# }

						expand = { }
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = no# "[Not(GetVariableSystem.Exists('site_holders'))]"

						hbox = {
							layoutpolicy_horizontal = expanding
							datacontext = "[Title.GetHolder]"
							tooltip = "FAITH_HOLY_SITE_HOLDER_TOOLTIP"
							spacing = 3

							char_name = {
								datacontext = "[Title.GetHolder]"
								blockoverride "bg" {
								}

								blockoverride "pre" {
									text_single = {
										raw_text = "Holder: "
									}
								}
							}

							text_single = {
								datacontext = "[Title.GetDeJureLiege.GetHolder.GetFaith]"
								raw_text = "[Faith.GetAdjectiveNoTooltip]."
							}
							expand = { }
						}
					}
				}

				vbox = {
					layoutpolicy_vertical = expanding

					text_multi_wide = {
						visible = "[Isnt('holy_site_effects')]"
						layoutpolicy_horizontal = expanding
						raw_text = "[AddTextIf(Not(GuiHolySiteItem.IsHeldByFaith), 'Inactive ')]Effects for [HolySite.GetEffectDesc( GuiHolySiteItem.GetFaith )]"
					}
				}
			}
		}
	}
}

types FaithShared
{
	type container_tenet_item = container {

		using = tooltip_se

		highlight_icon = {
			name = "doctrine_group_bg"
			texture = "[Faith.GetDoctrineBackgroundIcon]"
			size = { 130 200 }
		}

		highlight_icon = {
			name = "doctrine_group_icon"
			texture = "[FaithDoctrine.GetIcon]"
			size = { 130 200 }
			alpha = 0.85
			position = {0 0}
		}

		text_label_center = {
			name = "doctrine_name"
			parentanchor = bottom|hcenter
			widgetanchor = center
			position = { 0 -24 }
			maximumsize = { 130 44 }
			fontsize_min = 12
			multiline = yes
			align = center
			elide = right
			text = "[FaithDoctrine.GetNameNoTooltip( Faith.Self )]"
			default_format = "#high"

			using = Font_Size_Medium
		}
	}

	type fervor_container_vbox = vbox {
		name = "fervor_container"
		tooltip = "FERVOR_TT"
		spacing = -6

		# Fervor
		hbox = {

			icon = {
				texture = "gfx/interface/icons/icon_fervor.dds"
				size = { 22 22 }
			}

			text_single = {
				text = "FAITH_WINDOW_FERVOR"
				default_format = "#high"
				align = left
			}
		}
		hbox = {
			layoutpolicy_horizontal = expanding
			margin_right = 1
			expand = { }

			text_single = {
				name = "fervor_trend"
				text = "[Faith.GetYearlyFervorChange|=+2]"
				max_width = 110
				default_format = "#low"
				fontsize = 13
				size = { 0 12 }
			}
		}
	}
}

types FaithWindow
{
	type widget_doctrine_item = margin_widget {
		size = { 210 53 }
		#margin = {5 5}
		block "wdi_context"
		{
			datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
			datacontext = "[GuiFaithDoctrineItem.GetFaith]"
		}

		block "background" {
			background = {
				using = Background_Area
				margin = { 5 5 }
			}
		}

		hbox = {
			parentanchor = center
			name = "faith_list_item"
			block "tooltip" { #### current solution as to not display 2 different tooltips for special doctrines
				tooltip = "FAITH_WINDOW_DOCTRINE_TOOLTIP_WITH_FAITH"
			}
			spacing = 8

			using = tooltip_ne

			block "doctrine_icon"
			{
				icon_doctrine = {
					name = "doctrine_group_icon"
					size = { 50 50 }

					texture = "[FaithDoctrine.GetGroup.GetIcon]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "doctrine_group_name"
					layoutpolicy_horizontal = expanding
					align = left
					autoresize = no
					fontsize_min = 12
					# default_format = "#low"
					block "text_title"
					{
						text = "[FaithDoctrine.GetGroup.GetName( Faith.Self )]"
					}
				}

				text_single = {
					name = "faith_name"
					layoutpolicy_horizontal = expanding
					elide = right
					autoresize = no
					fontsize_min = 12
					align = left
					default_format = "#high"
					block "text_desc"
					{
						text = "[FaithDoctrine.GetNameNoTooltip( Faith.Self )]"
					}
				}
			}
		}
	}
}
