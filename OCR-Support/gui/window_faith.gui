######################################################
################### FAITH WINDOW #####################
######################################################

window = {
	name = "faith_window"
	datacontext = "[FaithWindow.GetFaith]"
	datacontext = "[GetVariableSystem]"
	movable = no
	layer = windows_layer

	size = { 700 100% }


	state = {
		name = _show
		position = { 0 0 }
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"

		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = tab
		on_start = "[GetVariableSystem.Set( 'faith_view_tabs', 'beliefs' )]"
		trigger_when = "[Not(GetVariableSystem.Exists('faith_view_tabs'))]"
	}

	state = {
		name = _hide
		position = { -60 0 }
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"


		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		on_finish = "[Click('clear_last_view')]"
	}

	widget = {
		size = { 100% 100% }
		using = Window_Background_Subwindow
		using = ocr

		### INSIDE WINDOW
		vbox = {
			visible = "[Not(GetVariableSystem.Exists('ocr'))]"
			using = ocr_margins
			margin_left = 10

			### Header
			header_with_picture = {
				name = "header"
				size = { 0 25 }
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = fixed

				blockoverride "size" {
					size = { 100% 25 }
				}

				blockoverride "header_text"
				{
					text = ""
					using = tooltip_es

					state = {
						name = "faith_view_refresh"
						using = Animation_Refresh_FadeOut
					}

					state = {
						using = Animation_Refresh_FadeIn
					}
				}

				blockoverride "button_close"
				{
					onclick = "[FaithWindow.Close]"
				}

				blockoverride "button_back"
				{
					size = { 0 0 }
					visible = "[HasViewHistory]"
					onclick = "[OpenFromViewHistory]"
					tooltip = "[GetViewHistoryTooltip]"
				}

				blockoverride "button_me"
				{
					onclick = "[DefaultOnCharacterClick(GetPlayer.GetID)]"
					size = { 0 0 }
				}

				blockoverride "illustration_texture"
				{
				}

				flowcontainer = {
					text_single = {
						raw_text = "FAITH_VIEW_HEADING"
					}

					dot = { }

					space = { }

					flowcontainer = {
						ignoreinvisible = yes

						text_single = {
							visible = "[And( Not( Faith.GetReligion.HasPaganRoots ), Not( Faith.IsUnreformed ) )]"
							text = "FAITH_VIEW_SUBHEADING"
						}

						text_single = {
							visible = "[Faith.IsUnreformed]"
							text = "FAITH_VIEW_UNREFORMED_SUBHEADING"
						}

						text_single = {
							visible = "[And( Faith.GetReligion.HasPaganRoots, Not( Faith.IsUnreformed ) )]"
							text = "FAITH_VIEW_REFORMED_SUBHEADING"
						}

						dot = { }
					}

					space = { }

					flowcontainer = {
						ignoreinvisible = yes
						visible = "[ObjectsEqual( GetPlayer.GetFaith, Faith.Self )]"

						text_single = {
							name = "your_faith"
							text = "FAITH_VIEW_YOUR_FAITH"
						}

						dot = { }
					}

				}
			}

			button_text = {
				blockoverride "text" {
					raw_text = "Show faith description."
				}
				layoutpolicy_horizontal = expanding
				onclick = "[GetVariableSystem.Toggle('faith_desc')]"
				visible = "[And(Not(GetVariableSystem.Exists('faith_desc')), GetVariableSystem.HasValue( 'faith_view_tabs', 'beliefs' ))]"
			}

			flowcontainer = {
				visible = "[And(GetVariableSystem.Exists('faith_desc'), GetVariableSystem.HasValue( 'faith_view_tabs', 'beliefs' ))]"
				direction = vertical
				max_width = 600

				flowcontainer = {
					text_multi = {
						autoresize = yes
						max_width = 600
						raw_text = "[Faith.GetFlavorDesc]"
					}

					expand = { }
				}

				button_text = {
					blockoverride "text" {
						raw_text = "Hide faith description."
					}
					onclick = "[GetVariableSystem.Clear('faith_desc')]"
				}
			}

			vbox = {
				datacontext = "[FaithWindow.GetFaith]"
				layoutpolicy_horizontal = expanding
				visible = "[GetVariableSystem.HasValue( 'faith_view_tabs', 'beliefs' )]"

				flowcontainer = {
					direction = vertical
					ignoreinvisible = yes
					layoutpolicy_horizontal = expanding

					flowcontainer = {
						ignoreinvisible = yes
						visible = "[Not(ObjectsEqual( GetPlayer.GetFaith, Faith.Self ))]"

						text_single = {
							name = "our_view"
							text = "FAITH_VIEW_OUR_VIEW"
						}

						dot = { }
					}

					flowcontainer = {
						ignoreinvisible = yes
						visible = "[Not(ObjectsEqual( GetPlayer.GetFaith, Faith.Self ))]"

						text_single = {
							name = "their_view"
							text = "FAITH_VIEW_THEIR_VIEW"
						}

						dot = { }
					}
				}

				flowcontainer = {
					ignoreinvisible = yes
					layoutpolicy_horizontal = expanding

					text_single = {
						raw_text = "FAITH_WINDOW_FERVOR"
					}

					text_single = {
						raw_text = ". [Faith.GetYearlyFervorChange|=+2] per year."
						tooltip = "FERVOR_TT"
					}
				}
			}

			flowcontainer = {
				visible = "[GetVariableSystem.HasValue( 'faith_view_tabs', 'beliefs' )]"
				direction = vertical
				layoutpolicy_horizontal = expanding

				char_name = {
					blockoverride "pre" {
						text_single = {
							raw_text = "RELIGIOUS_HEAD"
						}
						space = { }
					}
					blockoverride "width" {
						max_width = 600
					}
					layoutpolicy_horizontal = expanding
					datacontext = "[Faith.GetReligiousHead]"
					visible = "[Faith.GetReligiousHead.IsValid]"
				}

				flowcontainer = {
					ignoreinvisible = yes
					visible = "[Not( Faith.GetReligiousHead.IsValid)]"

					text_single = {
						text = "RELIGIOUS_HEAD_EMPTY_DESC"
						max_width = 600
						autoresize = yes
					}

					dot = { }
				}
			}

			vbox = {
				visible = "[GetVariableSystem.HasValue( 'faith_view_tabs', 'beliefs' )]"
				layoutpolicy_horizontal = expanding

				widget_doctrine_item_ocr = {
					visible = "[Faith.HasDoctrineByKey( 'doctrine_spiritual_head' )]"

					blockoverride "background" { }

					blockoverride "doctrine_icon"
					{
						texture = "[GetDoctrine( 'doctrine_spiritual_head' ).GetIcon]"
					}

					blockoverride "wdi_context"
					{
						datacontext = "[GetDoctrine('doctrine_spiritual_head')]"
						datacontext = "[Faith]"
					}
				}

				widget_doctrine_item_ocr = {
					visible = "[Faith.HasDoctrineByKey( 'doctrine_temporal_head' )]"

					blockoverride "background" { }

					blockoverride "doctrine_icon"
					{
						texture = "[GetDoctrine( 'doctrine_temporal_head' ).GetIcon]"
					}

					blockoverride "wdi_context"
					{
						datacontext = "[GetDoctrine('doctrine_temporal_head')]"
						datacontext = "[Faith]"
					}
				}

				button_text = {
					blockoverride "text" {
						raw_text = "Title: [Title.GetNameNoTooltip|U]."
					}
					layoutpolicy_horizontal = expanding
					using = title_click
					datacontext = "[Faith.GetReligiousHeadTitle]"
					visible = "[Title.IsValid]"
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				button_text = {
					blockoverride "text" {
						text = "FAITH_CONVERSION_CONVERT"
					}
					blockoverride "dot" {

					}
					visible = "[NotEqualTo_uint32( Faith.GetID, GetPlayer.GetFaith.GetID )]"
					onclick = "[ToggleGameViewData( 'faith_conversion', Faith.GetID )]"
				}

				button_text = {
					blockoverride "text" {
						text = "CREATE_REFORM_FAITH_TEXT"
					}
					blockoverride "dot" {

					}
					visible = "[And( ObjectsEqual(Faith.Self, GetPlayer.GetFaith ), GetVariableSystem.HasValue( 'faith_view_tabs', 'beliefs' ))]"

					onclick = "[OpenGameViewData( 'faith_creation', Faith.GetID )]"
				}

				button_text = {
					blockoverride "text" {
						text = "CREATE_TEMPORAL_HEAD_OF_FAITH_TITLE"
					}
					blockoverride "disabled" {
						visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ))]"
					}
					blockoverride "dot" { }

					visible = "[And( And( Not(Faith.HasDoctrineByKey( 'doctrine_no_head' )), Not( Faith.GetReligiousHeadTitle.IsValid ) ), ObjectsEqual( GetPlayer.GetFaith, Faith.Self ) )]"
					datacontext = "[GetScriptedGui( 'create_head_of_faith' )]"
					enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ) ]"
					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ) ]"
					tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ) ]"
				}

				button_text = {
					blockoverride "text" {
						text = "RECREATE_TEMPORAL_HEAD_OF_FAITH_TITLE"
					}
					blockoverride "disabled" {
						visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ))]"
					}
					blockoverride "dot" { }

					visible = "[And( And( Not(Faith.HasDoctrineByKey( 'doctrine_no_head' )), And(Faith.GetReligiousHeadTitle.IsValid, Not( Faith.GetReligiousHeadTitle.HasHolder ))), ObjectsEqual( GetPlayer.GetFaith, Faith.Self ) )]"
					datacontext = "[GetScriptedGui( 'recreate_head_of_faith' )]"
					enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ) ]"
					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ) ]"
					tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'faith', Faith.MakeScope ).End ) ]"
				}

				expand = { }
			}

			### Tabs
			vbox = {
				layoutpolicy_horizontal = expanding
				name = "tabs"

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "FAITH_BELIEFS"
						align = left
					}
					blockoverride "extra" {
						text_single = {
							raw_text = " tab 1"
						}
						text_single = {
							raw_text = ", Selected"
							visible = "[GetVariableSystem.HasValue( 'faith_view_tabs', 'beliefs' )]"
						}
						text_single = {
							raw_text = "."
						}
					}
					onclick = "[GetVariableSystem.Set( 'faith_view_tabs', 'beliefs' )]"
					shortcut = "speed_1"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "FAITH_HOLY_SITES"
						align = left
					}
					blockoverride "extra" {
						text_single = {
							raw_text = ", tab 2"
						}
						text_single = {
							raw_text = ", Selected"
							visible = "[GetVariableSystem.HasValue( 'faith_view_tabs', 'holy_sites' )]"
						}
						text_single = {
							raw_text = "."
						}
					}
					onclick = "[GetVariableSystem.Set( 'faith_view_tabs', 'holy_sites' )]"
					shortcut = "speed_2"
				}

				button_text = {
					blockoverride "text" {
						raw_text = "Other faiths, 3."
						align = left
					}
					shortcut = "speed_3"
					layoutpolicy_horizontal = expanding
					datacontext = "[Faith.GetReligion]"
					onclick = "[FaithWindow.ToggleReligionWindow]"
				}

				button_text = {
					blockoverride "text" {
						raw_text = "Followers, 4."
						align = left
					}
					shortcut = "speed_4"
					layoutpolicy_horizontal = expanding
					onclick = "[GetScriptedGui('followers').Execute( GuiScope.SetRoot( FaithWindow.GetFaith.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Toggle('followers')]"
				}

				agot_patron_tab_button = { }
			}

			vbox = {
				name = "tab_beliefs"
				visible = "[GetVariableSystem.HasValue( 'faith_view_tabs', 'beliefs' )]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				state = {
					name = _show
					using = Animation_FadeIn_Quick
				}

				state = {
					name = _hide
					alpha = 0
				}


				### Doctrines
				vbox = {
					name = "doctrines"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					#margin_top = 10

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding


						blockoverride "scrollbox_content"
						{
							#margin_top = 20

							state = {
								name = "faith_view_refresh"
								using = Animation_Refresh_FadeOut
							}

							state = {
								using = Animation_Refresh_FadeIn
							}

							### Core Tenets
							vbox = {
								layoutpolicy_horizontal = expanding

								flowcontainer = {
									ignoreinvisible = yes
									layoutpolicy_horizontal = expanding
									text_single = {
										text = "FAITH_CORE_TENETS_HEADING"
									}

									dot = { }
								}

								vbox = {
									name = "doctrines_grid_core_tenets"
									datamodel = "[FaithWindow.GetGroupingHelper( 'core_tenets' ).GetGrouping]"
									layoutpolicy_horizontal = expanding

									# button_text = {
									#     blockoverride "text" {
									#         raw_text = "[Select_CString(GetVariableSystem.Exists('tenet_desc'), 'Hide', 'Show')] tenet descriptions."
									#     }
									# 	onclick = "[GetVariableSystem.Toggle('tenet_desc')]"
									# 	layoutpolicy_horizontal = expanding
									# }

									state = {
										name = "faith_view_refresh"
										using = Animation_Refresh_FadeOut
									}

									state = {
										using = Animation_Refresh_FadeIn
									}

									item = {
										container_tenet_item_ocr = {
											datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
											datacontext = "[GuiFaithDoctrineItem.GetFaith]"
											tooltip = "FAITH_WINDOW_DOCTRINE_TOOLTIP"
										}
									}
								}
							}

							vbox = {
								name = "sins_and_virtues"
								layoutpolicy_horizontal = expanding

								hbox = {
									name = "sins"
									layoutpolicy_horizontal = expanding

									flowcontainer = {
										ignoreinvisible = yes

										text_single = {
											raw_text = "[GetDataModelSize(FaithWindow.GetSins)]"
										}
										space = { }
										text_single = {
											raw_text = "FAITH_WINDOW_SINS"
										}
										text_single = {
											raw_text = ":"
										}
										space = { }
									}

									dynamicgridbox = {
										name = "virtues_grid"
										datamodel = "[FaithWindow.GetSins]"
										flipdirection = yes
										datamodel_wrap = 7

										item = {
											text_single = {
												margin_right = 3
												datacontext = "[GuiVirtueOrSinItem.GetTrait]"
												raw_text = "[Trait.GetNameNoTooltip( GetPlayer )],"
												tooltipwidget = {
													using = faith_window_trait_tooltip
												}
											}
										}
									}

									expand = { }
								}

								hbox = {
									name = "virtues"
									layoutpolicy_horizontal = expanding

									flowcontainer = {
										ignoreinvisible = yes

										text_single = {
											raw_text = "[GetDataModelSize(FaithWindow.GetVirtues)]"
										}
										space = { }
										text_single = {
											raw_text = "FAITH_WINDOW_VIRTUES"
										}
										text_single = {
											raw_text = ":"
										}
										space = { }
									}

									dynamicgridbox = {
										name = "virtues_grid"
										datamodel = "[FaithWindow.GetVirtues]"
										flipdirection = yes

										item = {
											text_single = {
												margin_right = 3
												datacontext = "[GuiVirtueOrSinItem.GetTrait]"
												raw_text = "[Trait.GetNameNoTooltip( GetPlayer )],"
												tooltipwidget = {
													using = faith_window_trait_tooltip
												}
											}
										}
									}

									expand = { }
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "[GetDataModelSize(FaithWindow.GetGroupingHelper( 'main_group' ).GetGrouping)] [Localize('FAITH_DOCTRINES_IMPORTANT')]."
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									name = "important_doctrines"
									datamodel = "[FaithWindow.GetGroupingHelper( 'main_group' ).GetGrouping]"

									item = {
										vbox = {
											layoutpolicy_horizontal = expanding
											name = "doctrine_list_item"
											datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
											visible = "[FaithDoctrine.IsVisible]"
											tooltip = "FAITH_WINDOW_DOCTRINE_TOOLTIP"
											using = tooltip_se

											text_single = {
												layoutpolicy_horizontal = expanding
												name = "doctrine_name"
												raw_text = "[FaithDoctrine.GetNameNoTooltip( GuiFaithDoctrineItem.GetFaith )]."
											}
										}
									}
								}
							}

							vbox_agot_extra_doctrines = { }

							vbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "[GetDataModelSize(FaithWindow.GetGroupingHelper( 'marriage' ).GetGrouping)] [Localize('FAITH_DOCTRINES_MARRIAGE')]."
								}

								vbox = {
									datamodel = "[FaithWindow.GetGroupingHelper( 'marriage' ).GetGrouping]"
									layoutpolicy_horizontal = expanding

									item = {
										widget_doctrine_item_ocr = { }
									}
								}

								##
								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "[GetDataModelSize(FaithWindow.GetGroupingHelper( 'crimes' ).GetGrouping)] [Localize('FAITH_DOCTRINES_CRIMES')]."
								}

								vbox = {
									datamodel = "[FaithWindow.GetGroupingHelper( 'crimes' ).GetGrouping]"
									layoutpolicy_horizontal = expanding

									item = {
										widget_doctrine_item_ocr = { }
									}
								}

								###


								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "[GetDataModelSize(FaithWindow.GetGroupingHelper( 'clergy' ).GetGrouping)] [Localize('FAITH_DOCTRINES_CLERGY')]."
								}

								vbox = {
									datamodel = "[FaithWindow.GetGroupingHelper( 'clergy' ).GetGrouping]"
									layoutpolicy_horizontal = expanding

									item = {
										widget_doctrine_item_ocr = { }
									}
								}

								###
								text_single = {
									layoutpolicy_horizontal = expanding
									visible = "[DataModelHasItems(FaithWindow.GetGroupingHelper( 'special' ).GetGrouping)]"
									raw_text = "[GetDataModelSize(FaithWindow.GetGroupingHelper( 'special' ).GetGrouping)] [Localize('FAITH_DOCTRINES_SPECIAL')]."
								}

								vbox = {
									datamodel = "[FaithWindow.GetGroupingHelper( 'special' ).GetGrouping]"
									layoutpolicy_horizontal = expanding

									item = {
										text_single = {
											layoutpolicy_horizontal = expanding
											datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
											datacontext = "[GuiFaithDoctrineItem.GetFaith]"

											raw_text = "[FaithDoctrine.GetNameNoTooltip( GuiFaithDoctrineItem.GetFaith )]."
											tooltip = "FAITH_WINDOW_DOCTRINE_TOOLTIP_WITH_FAITH"
										}
									}
								}
							}
						}
					}
				}
			}

			## HOLY SITES
			scrollbox = {
				name = "tab_holy_sites"
				visible = "[GetVariableSystem.HasValue( 'faith_view_tabs', 'holy_sites' )]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_background" { }
				blockoverride "scrollbox_background_fade" { }

				state = {
					name = _show
					using = Animation_FadeIn_Quick
				}

				state = {
					name = _hide
					alpha = 0
				}


				blockoverride "scrollbox_content"
				{
					vbox = {
						name = "holy_sites"
						datamodel = "[FaithWindow.GetHolySites]"
						layoutpolicy_horizontal = expanding

						flowcontainer = {
							layoutpolicy_horizontal = expanding

							text_single = {
								datacontext = "[FaithWindow.GetFaith]"
								text = "FAITH_HOLY_SITE_EXPLANATION"
							}

							dot = { }
						}

						button_text = {
							blockoverride "text" {
								raw_text = "[Select_CString(GetVariableSystem.Exists('site_holders'), 'Show', 'Hide')] holders."
							}
							layoutpolicy_horizontal = expanding
							onclick = "[GetVariableSystem.Toggle('site_holders')]"
						}

						text_single = {
							raw_text = "[GetDataModelSize(FaithWindow.GetHolySites)] Holy sites:"
							layoutpolicy_horizontal = expanding
						}


						item = {
							vbox = {
								name = "faith_list_item"
								datacontext = "[GuiHolySiteItem.GetHolySite]"
								datacontext = "[HolySite.GetBarony]"
								layoutpolicy_horizontal = expanding

								vbox = {
									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 3

										button_text = {
											blockoverride "text" {
												raw_text = "[HolySite.GetName]."
												align = left
											}
											using = prov_click
										}

										text_single = {
											datacontext = "[FaithWindow.GetFaith]"
											visible = "[Not( GuiHolySiteItem.IsHeldByFaith )]"
											raw_text = "Not held by [Faith.GetNameNoTooltip]."
										}

										text_single = {
											datacontext = "[FaithWindow.GetFaith]"
											visible = "[GuiHolySiteItem.IsHeldByFaith]"
											raw_text = "[Faith.GetAdjectiveNoTooltip]."
										}

										expand = { }
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										visible = "[Not(GetVariableSystem.Exists('site_holders'))]"

										hbox = {
											layoutpolicy_horizontal = expanding
											datacontext = "[Title.GetHolder]"
											tooltip = "FAITH_HOLY_SITE_HOLDER_TOOLTIP"
											spacing = 3

											char_name = {
												datacontext = "[Title.GetHolder]"
												blockoverride "bg" {
												}

												blockoverride "pre" {
													text_single = {
														raw_text = "Holder: "
													}
												}

												blockoverride "text" {
												}

												blockoverride "extra" {
													spacing = 0
													space = { }

													text_single = {
														raw_text = "[Character.GetTitledFirstNameNicknamedNoTooltip]"
													}
													text_single = {
														raw_text = " of [Character.GetPrimaryTitle.GetNameNoTierNoTooltip]"
														visible = "[Not(ObjectsEqual(Title.GetHolder.GetPrimaryTitle, Title.GetProvince.GetCounty))]"
													}
													text_single = {
														raw_text = ", "
													}
												}
											}

											text_single = {
												datacontext = "[Title.GetDeJureLiege.GetHolder.GetFaith]"
												raw_text = "[Faith.GetAdjectiveNoTooltip]."
											}
											expand = { }
										}

										char_name = {
											layoutpolicy_horizontal = expanding
											blockoverride "bg" {

											}
											datacontext = "[Title.GetHolder.GetTopLiege]"
											visible = "[Not(Title.GetHolder.IsIndependentRuler)]"
											blockoverride "pre" {
												text_single = {
													raw_text = "Vassal of "
												}
											}
											blockoverride "width" {
												max_width = 550
											}
										}
									}
								}

								vbox = {
									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding
										margin_left = 3
										margin_top = 2

										vbox = {
											layoutpolicy_vertical = expanding
											#
											# text_single = {
											# 	raw_text = "Inactive effects:"
											# 	layoutpolicy_horizontal = expanding
											# 	visible = "[Not( GuiHolySiteItem.IsHeldByFaith )]"
											# }

											text_multi = {
												name = "effects_notheld"
												layoutpolicy_horizontal = expanding
												text = "[HolySite.GetEffectDesc( GuiHolySiteItem.GetFaith )]"
												autoresize = yes
												max_width = 600
											}
										}

										expand = {
											layoutpolicy_horizontal = expanding
										}
									}

									expand = { }
								}
							}
						}
					}
				}
			}
		}

		window = {
			name = "followers"
			size = { 700 100% }
			position = { 0 0 }
			layer = top
			visible = "[GetVariableSystem.Exists('followers')]"

			using = Window_Movable
			using = Window_Background_Subwindow

			state = {
				name = _show
				using = Animation_FadeIn_Quick
				using = Sound_WindowShow_Standard
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
				using = Sound_WindowHide_Standard
			}

			attachto = {
				widgetid = "faith_window"
				inherit_visibility = no
			}

			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				header_pattern = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text"
					{
						raw_text = "[GetDataModelSize(FaithWindow.GetFaith.MakeScope.GetList('followers'))] [FaithWindow.GetFaith.GetAdjectiveNoTooltip] followers."
					}

					blockoverride "button_close"
					{
						onclick = "[GetVariableSystem.Clear('followers')]"
					}

					blockoverride "button_back"
					{
						visible = no
					}
				}

				scrollbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content" {
						fixedgridbox = {
							addrow = 20
							addcolumn = 690
							datamodel = "[FaithWindow.GetFaith.MakeScope.GetList('followers')]"

							item = {
								char_name = {
									blockoverride "bg" {

									}
									datacontext = "[Scope.GetCharacter]"
									blockoverride "width" {
										max_width = 690
									}
									blockoverride "extra" {
										text_single = {
											raw_text = "[Character.GetRelationToString(GetPlayer)]."
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	window_faith_vanilla = {}

	window_faith_patron_tab = { } # AGOT Added

}

### RELIGION VIEW
window = {
	name = "religion_window"
	size = { 700 100% }
	position = { 0 0 }
	datacontext = "[ReligionWindow.GetReligion]"
	layer = top

	using = Window_Movable

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	attachto = {
		widgetid = "faith_window"
		inherit_visibility = no
	}

	vbox = {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		vbox = {
			margin_left = 10
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			using = Window_Background_Subwindow

			header_pattern = {
				layoutpolicy_horizontal = expanding
				size = { 0 22 }

				blockoverride "header_text"
				{
					# text = "RELIGION_WINDOW_TITLE"
				}

				text_single = {
					raw_text = "[GetDataModelSize(ReligionWindow.GetFaiths)] [AddTextIf(ReligionWindow.ShowOnlyReligionFaiths, ReligionWindow.GetReligion.GetAdjectiveNoTooltip)][AddTextIf(ReligionWindow.ShowOnlyReligionFaiths, ' ')]faiths."
				}

				blockoverride "button_close"
				{
					onclick = "[ReligionWindow.Close]"
				}

				blockoverride "button_back"
				{
					visible = no
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = -3

				### Only Selected religion faiths
				hbox = {
					layoutpolicy_horizontal = expanding
					button_text = {
					    blockoverride "text" {
							raw_text = "[Select_CString(ReligionWindow.ShowOnlyReligionFaiths, 'Show all existing faiths', 'Show only fiaths of this religion')]."
					    }
						onclick = "[ReligionWindow.OnShowOnlyReligionFaiths]"
					}

					expand = { }
					using = tooltip_ne
				}

				hbox = {
					spacing = 0
					layoutpolicy_horizontal = expanding

					text_single = {
						text = "SORT_BY"
						align = left
					}

					dropdown_sort_characterlist = {
						datamodel = "[ReligionWindow.GetOrderByOptions]"
						onselectionchanged = "[ReligionWindow.OnOrderBySelectionChanged]"
						selectedindex = "[ReligionWindow.GetOrderBySelectedIndex]"

						blockoverride "text_button_drop" {
							text = "[OrderFaithOption.GetName]"
						}
					}

					expand = { }
				}
			}

			scrollbox = {
				name = "faiths_scroll_area"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					vbox = {
						datamodel = "[ReligionWindow.GetFaiths]"
						layoutpolicy_horizontal = expanding

						item = {
							button_standard = {
								name = "show_faith_info"
								layoutpolicy_horizontal = expanding
								size = { 0 20 }
								onclick = "[PdxGuiTriggerAllAnimations('faith_view_refresh')]"

								state = {
									name = _mouse_click
									on_finish = "[OpenGameViewData( 'faith', Faith.GetID )]"
									on_finish = "[ReligionWindow.Close]"
								}

								background = {
									visible = "[Faith.IsSelected]"
									using = Background_Area
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									spacing = -2
									resizeparent =yes

									hbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding

										text_single = {
											name = "faith_name"
											raw_text = "[Faith.GetNameNoTooltip]."
											default_format = "#high"
											max_width = 300
										}

										hbox = {
											visible = "[Not(ReligionWindow.ShowOnlyReligionFaiths)]"

											space = { }

											text_single = {
												name = "religion_faith_name"
												text = "FAITH_RELIGION"
												max_width = 300
											}

											dot = { }
										}

										hbox = {
											visible = "[GreaterThan_int32(Faith.GetNumberOfCountiesOfFaith, '(int32)0')]"
											space = { }

											text_single = {
												name = "fervor"
												text = "FAITH_WINDOW_FERVOR"
											}

											dot = { }
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											visible = "[EqualTo_int32(Faith.GetNumberOfCountiesOfFaith, '(int32)0')]"
											spacing = 3

											text_single = {
												name = "counties"
												raw_text = " [Faith.GetNumberOfCountiesOfFaith] counties,"
											}


											text_single = {
												raw_text = "[GuiScope.SetRoot(Faith.MakeScope).ScriptValue('faith_followers')] total followers."
											}

											expand = { }
										}

										expand = { }
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 3
										visible = "[GreaterThan_int32(Faith.GetNumberOfCountiesOfFaith, '(int32)0')]"

										text_single = {
											name = "counties"
											raw_text = "[Faith.GetNumberOfCountiesOfFaith] counties,"
										}

										text_single = {
											raw_text = "[GuiScope.SetRoot(Faith.MakeScope).ScriptValue('faith_rulers')] rulers."
											visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Faith.MakeScope).ScriptValue('faith_rulers'), '(CFixedPoint)0')]"
										}

										text_single = {
											raw_text = "[GuiScope.SetRoot(Faith.MakeScope).ScriptValue('faith_followers')] total followers."
										}
										expand = { }
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


	######################################################
	################ TYPES AND TEMPLATES #################
	######################################################

types FaithCreationWindow
{
	type name_entry_big = editbox_standard_with_label {
		layoutpolicy_horizontal = expanding

		blockoverride "editbox_label"
		{
			block "label"
			{
				text = "DEFAULT_TEXT"
			}
		}
		block "entry_big_size" {
			size = { 380 30 }
		}
	}
}

types OCR {
	type container_tenet_item_ocr = flowcontainer {
		layoutpolicy_horizontal = expanding
		direction = vertical
		ignoreinvisible = yes
		name = "doctrine_name"
		text_single = {
			raw_text = "[FaithDoctrine.GetNameNoTooltip( Faith.Self )]."
			visible = "[Not(GetVariableSystem.Exists('tenet_desc'))]"
		}

		text_multi = {
			visible = "[GetVariableSystem.Exists('tenet_desc')]"
			max_width = 590
			autoresize = yes
			raw_text = "FAITH_WINDOW_DOCTRINE_TOOLTIP"
		}
	}

	type widget_doctrine_item_ocr = hbox {
		block "wdi_context"
		{
			datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
			datacontext = "[GuiFaithDoctrineItem.GetFaith]"
		}
		block "tooltip" {
			tooltip = "FAITH_WINDOW_DOCTRINE_TOOLTIP_WITH_FAITH"
		}
		tooltip_offset = { 0 25 }
		layoutpolicy_horizontal = expanding
		spacing = 3
		text_single = {
			name = "doctrine_group_name"
			block "text_title"
			{
				raw_text = "[FaithDoctrine.GetGroup.GetName( Faith.Self )]:"
			}
		}

		text_single = {
			name = "faith_name"
			block "text_desc"
			{
				raw_text = "[FaithDoctrine.GetNameNoTooltip( Faith.Self )]."
			}
		}

		block "extra" { }

		expand = { }
	}
}

types FaithShared
{
	type container_tenet_item = container {

		using = tooltip_se

		highlight_icon = {
			name = "doctrine_group_bg"
			texture = "[Faith.GetDoctrineBackgroundIcon]"
			size = { 130 200 }
		}

		highlight_icon = {
			name = "doctrine_group_icon"
			texture = "[FaithDoctrine.GetIcon]"
			size = { 130 200 }
			alpha = 0.85
			position = {0 0}
		}

		text_label_center = {
			name = "doctrine_name"
			parentanchor = bottom|hcenter
			widgetanchor = center
			position = { 0 -24 }
			maximumsize = { 130 44 }
			fontsize_min = 12
			multiline = yes
			align = center
			elide = right
			text = "[FaithDoctrine.GetNameNoTooltip( Faith.Self )]"
			default_format = "#high"

			using = Font_Size_Medium
		}
	}

	type fervor_container_vbox = vbox {
		name = "fervor_container"
		tooltip = "FERVOR_TT"
		spacing = -6

		# Fervor
		hbox = {

			icon = {
				texture = "gfx/interface/icons/icon_fervor.dds"
				size = { 22 22 }
			}

			text_single = {
				text = "FAITH_WINDOW_FERVOR"
				default_format = "#high"
				align = left
			}
		}
		hbox = {
			layoutpolicy_horizontal = expanding
			margin_right = 1
			expand = { }

			text_single = {
				name = "fervor_trend"
				text = "[Faith.GetYearlyFervorChange|=+2]"
				max_width = 110
				default_format = "#low"
				fontsize = 13
				size = { 0 12 }
			}
		}
	}
}

types FaithWindow
{
	type widget_doctrine_item = margin_widget {
		size = { 210 53 }
		#margin = {5 5}
		block "wdi_context"
		{
			datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
			datacontext = "[GuiFaithDoctrineItem.GetFaith]"
		}

		block "background" {
			background = {
				using = Background_Area
				margin = { 5 5 }
			}
		}

		hbox = {
			parentanchor = center
			name = "faith_list_item"
			block "tooltip" { #### current solution as to not display 2 different tooltips for special doctrines
				tooltip = "FAITH_WINDOW_DOCTRINE_TOOLTIP_WITH_FAITH"
			}
			spacing = 8

			using = tooltip_ne

			block "doctrine_icon"
			{
				icon_doctrine = {
					name = "doctrine_group_icon"
					size = { 50 50 }

					texture = "[FaithDoctrine.GetGroup.GetIcon]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "doctrine_group_name"
					layoutpolicy_horizontal = expanding
					align = left
					autoresize = no
					fontsize_min = 12
					# default_format = "#low"
					block "text_title"
					{
						text = "[FaithDoctrine.GetGroup.GetName( Faith.Self )]"
					}
				}

				text_single = {
					name = "faith_name"
					layoutpolicy_horizontal = expanding
					elide = right
					autoresize = no
					fontsize_min = 12
					align = left
					default_format = "#high"
					block "text_desc"
					{
						text = "[FaithDoctrine.GetNameNoTooltip( Faith.Self )]"
					}
				}
			}
		}
	}
}
