window = {
	name = "epidemics_window"
	widgetid = "epidemics_window"
	layer = windows_layer
	movable = no
	using = base_ocr_window

	state = {
		name = _show
		using = Expand_Epidemics
		on_finish = "[Clear('infected_realm')]"
	}

	window_ocr = {
		blockoverride "ocr_header" {
			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "pre" {
					spacing = 3

					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3
						visible = "[Not(EpidemicsWindow.HasFocusedEpidemic)]"

						text_single = {
							raw_text = "[Add_int32(Add_int32(GetDataModelSize( EpidemicsWindow.GetOwnRealmEpidemics),GetDataModelSize( EpidemicsWindow.GetNearbyEpidemics )), GetDataModelSize( EpidemicsWindow.GetOtherEpidemics ))]"
						}

						text_single = {
							raw_text = "EPIDEMICS_TITLE"
						}
					}

					button_text = {
						onclick = "[EpidemicsWindow.ClearFocusedEpidemic]"
						onclick = "[Clear('infected_realm')]"
						datacontext = "[MyCapital]"
						using = prov_pan
						shortcut = go_back
						blockoverride "extra" {
							visible = "[EpidemicsWindow.HasFocusedEpidemic]"
							datacontext = "[EpidemicsWindow.GetFocusedEpidemic]"
							text_single = {
								raw_text = "Showing"
							}
							text_single = {
								visible = "[Is('infected_realm')]"
								raw_text = "baronies of"
							}
							text_single = {
								name = "epidemic_in_focus_heading"
								# visible = "[Isnt('infected_realm')]"
								raw_text = "[Epidemic.GetNameNoTooltip]."
							}

							# text_single = {
							# 	margin_left = 1
							# 	raw_text = "B to go back."
							# }
						}
					}
				}

				blockoverride "header_text"
				{
					text = ""
				}

				blockoverride "button_close"
				{
					onclick = "[EpidemicsWindow.Close]"

					button = {
						shortcut = close_window
						visible = "[And(EpidemicsWindow.HasFocusedEpidemic, GetPlayer.IsValid)]"
						onclick = "[EpidemicsWindow.ClearFocusedEpidemic]"
						onclick = "[Clear('infected_realm')]"
						datacontext = "[MyCapital]"
						using = prov_pan
					}

					button = {
						shortcut = close_window
						visible = "[Is('infected_realm')]"
						onclick = "[Clear('infected_realm')]"
					}

				}

				blockoverride "button_go_to"
				{
					visible = "[And(EpidemicsWindow.HasFocusedEpidemic, IsVanilla)]"
					onclick = "[EpidemicsWindow.GetFocusedEpidemic.ZoomCameraTo]"
					tooltip = "EPIDEMIC_GO_TO"
				}
			}
		}
		blockoverride "ocr_content" {
			datacontext = "[GetPlayer]"

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				name = "epidemics"

				# Currently focused epidemic (if any)
				vbox = {
					name = "epidemic_in_focus"
					widgetid = "epidemic_in_focus"

					visible = "[EpidemicsWindow.HasFocusedEpidemic]"

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					datacontext = "[EpidemicsWindow.GetFocusedEpidemic]"

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Isnt('infected_realm')]"

						# Overview of epidemic (same as in listing)
						epidemic_item_vbox_ocr = {
							blockoverride "focused_epidemic" {
							}
						}

						epidemic_modifiers_hbox_ocr = {}
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content"
						{

							vbox = {
								name = "domain_infections"
								layoutpolicy_horizontal = expanding
								visible = "[DataModelHasItems( EpidemicsWindow.GetFocusedEpidemicDomainInfections )]"

								text_num_of_infections = {}

								fixedgridbox = {
									name = "infections"
									datamodel = "[EpidemicsWindow.GetFocusedEpidemicDomainInfections]"
									# visible = "[GetVariableSystem.Exists( 'expand_epidemic_domain_infections' )]"

									addcolumn = 524
									addrow = 44

									item = {
										epidemic_infected_province_item_ocr = {	}
									}
								}
							}

							vbox = {
								name = "realm_infections"

								layoutpolicy_horizontal = expanding
								visible = "[DataModelHasItems( EpidemicsWindow.AccessFocusedEpidemicOwnRealmInfections )]"

								text_num_of_infections = {}

								vbox = {
									name = "infections"
									datamodel = "[EpidemicsWindow.AccessFocusedEpidemicOwnRealmInfections]"
									layoutpolicy_horizontal = expanding
									# visible = "[GetVariableSystem.Exists( 'expand_epidemic_realm_infections' )]"

									item = {
										epidemic_infected_realm_item_ocr = { }
									}
								}
							}

							vbox = {
								name = "other_realm_infections"
								layoutpolicy_horizontal = expanding
								visible = "[DataModelHasItems( EpidemicsWindow.AccessFocusedEpidemicInfectedRealms )]"

								text_num_of_infections = {}

								vbox = {
									layoutpolicy_horizontal = expanding
									name = "infections"
									datamodel = "[EpidemicsWindow.AccessFocusedEpidemicInfectedRealms]"
									# visible = "[Not(GetVariableSystem.Exists( 'expand_epidemic_other_realm_infections' ))]"

									item = {
										epidemic_infected_realm_item_ocr = { }
									}
								}
							}
						}
					}

					expand = {}
				}

				scrollbox = {
					visible = "[Not( EpidemicsWindow.HasFocusedEpidemic )]"

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content"
					{
						name = "epidemics_container"
						spacing = 5

						# widget = {
						# 	size = { 0 30 }
						# 	scissor = yes
						# 	layoutpolicy_horizontal = expanding
						# 	visible = "[Or(Or(IsDataModelEmpty( EpidemicsWindow.GetOwnRealmEpidemics),IsDataModelEmpty( EpidemicsWindow.GetNearbyEpidemics ) ), IsDataModelEmpty( EpidemicsWindow.GetOtherEpidemics ))]"
						#
						# 	hbox = {
						# 		layoutpolicy_horizontal = expanding
						# 		spacing = 3
						#
						# 		text_single = {
						# 			raw_text = "There are"
						# 		}
						#
						# 		hbox = {
						# 			visible = "[IsDataModelEmpty( EpidemicsWindow.GetOwnRealmEpidemics)]"
						# 			spacing = 3
						#
						# 			text_single = {
						# 				raw_text = "no"
						# 			}
						#
						# 			text_single = {
						# 				text = "EPIDEMICS_IN_OWN_REALM"
						# 			}
						#
						# 			comma = {}
						# 		}
						#
						# 		hbox = {
						# 			visible = "[IsDataModelEmpty( EpidemicsWindow.GetNearbyEpidemics)]"
						# 			spacing = 3
						#
						# 			text_single = {
						# 				raw_text = "no"
						# 			}
						#
						# 			text_single = {
						# 				text = "EPIDEMICS_NEARBY"
						# 			}
						#
						# 			comma = {}
						# 		}
						#
						# 		hbox = {
						# 			visible = "[IsDataModelEmpty( EpidemicsWindow.GetOtherEpidemics)]"
						# 			spacing = 3
						#
						# 			text_single = {
						# 				raw_text = "no"
						# 			}
						#
						# 			text_single = {
						# 				text = "EPIDEMICS_REST_OF_WORLD"
						# 			}
						#
						# 			dot_l = {}
						# 		}
						#
						# 		expand = {}
						# 	}
						# }

						flowcontainer = {
							layoutpolicy_horizontal = expanding
							ignoreinvisible = yes
							spacing = 3
							visible = "[IsDataModelEmpty(EpidemicsWindow.GetOwnRealmEpidemics)]"

							text_single = {
								raw_text = "No"
							}

							text_single = {
								text = "EPIDEMICS_IN_OWN_REALM"
							}
						}

						vbox = {
							name = "epidemics_in_my_realm"
							layoutpolicy_horizontal = expanding
							visible = "[DataModelHasItems(EpidemicsWindow.GetOwnRealmEpidemics)]"

							button_text = {
								layoutpolicy_horizontal = expanding
								onclick = "[Toggle('expand_epidemics_realm')]"
								blockoverride "pre" {
									text_single = {
										raw_text = "[GetDataModelSize(EpidemicsWindow.GetOwnRealmEpidemics)]"
									}
								}
								blockoverride "text" {
									raw_text = "EPIDEMICS_IN_OWN_REALM"
								}
								blockoverride "extra" {
									text_single = {
										raw_text = "[Collapse('expand_epidemics_realm')]"
									}
								}
							}

							vbox = {
								name = "epidemic_entries"
								visible = "[Not(GetVariableSystem.Exists( 'expand_epidemics_realm' ))]"
								layoutpolicy_horizontal = expanding
								datamodel = "[EpidemicsWindow.GetOwnRealmEpidemics]"
								spacing = 3

								item = {
									epidemic_item_vbox_ocr = {
										blockoverride "epidemic_extras"
										{
											using = open_epidemic
											onclick = "[EpidemicsWindow.SelectFocusedEpidemicInOwnRealm( PdxGuiWidget.GetIndexInDataModel )]"
										}
									}
								}
							}
						}

						flowcontainer = {
							layoutpolicy_horizontal = expanding
							spacing = 3
							visible = "[IsDataModelEmpty(EpidemicsWindow.GetNearbyEpidemics)]"

							text_single = {
								raw_text = "No"
							}

							text_single = {
								text = "EPIDEMICS_NEARBY"
							}
						}

						vbox = {
							name = "epidemics_nearby"
							layoutpolicy_horizontal = expanding
							visible = "[DataModelHasItems(EpidemicsWindow.GetNearbyEpidemics)]"

							button_text = {
								layoutpolicy_horizontal = expanding
								onclick = "[Toggle('expand_epidemics_nearby')]"
								blockoverride "pre" {
									text_single = {
										raw_text = "[GetDataModelSize(EpidemicsWindow.GetNearbyEpidemics)]"
									}
								}
								blockoverride "text" {
									raw_text = "EPIDEMICS_NEARBY"
								}
								blockoverride "extra" {
									text_single = {
										raw_text = "[Collapse('expand_epidemics_nearby')]"
									}
								}
							}

							vbox = {
								name = "epidemic_entries"
								visible = "[Not(GetVariableSystem.Exists( 'expand_epidemics_nearby' ))]"
								layoutpolicy_horizontal = expanding
								datamodel = "[EpidemicsWindow.GetNearbyEpidemics]"
								spacing = 3

								item = {
									epidemic_item_vbox_ocr = {
										blockoverride "epidemic_extras"
										{
											using = open_epidemic
											onclick = "[EpidemicsWindow.SelectFocusedEpidemicNearby( PdxGuiWidget.GetIndexInDataModel )]"
										}
									}
								}
							}
						}

						flowcontainer = {
							layoutpolicy_horizontal = expanding
							spacing = 3
							visible = "[IsDataModelEmpty(EpidemicsWindow.GetOtherEpidemics)]"

							text_single = {
								raw_text = "No"
							}

							text_single = {
								text = "EPIDEMICS_REST_OF_WORLD"
							}
						}


						vbox = {
							name = "epidemics_rest_of_world"
							layoutpolicy_horizontal = expanding

							visible = "[DataModelHasItems(EpidemicsWindow.GetOtherEpidemics)]"

							button_text = {
								layoutpolicy_horizontal = expanding
								onclick = "[Toggle('expand_epidemics_world')]"
								blockoverride "pre" {
									text_single = {
										raw_text = "[GetDataModelSize(EpidemicsWindow.GetOtherEpidemics)]"
									}
								}
								blockoverride "text" {
									raw_text = "EPIDEMICS_REST_OF_WORLD"
								}
								blockoverride "extra" {
									text_single = {
										raw_text = "[Collapse('expand_epidemics_world')]"
									}
								}
							}

							vbox = {
								name = "epidemic_entries"
								visible = "[Not(GetVariableSystem.Exists( 'expand_epidemics_world' ))]"
								layoutpolicy_horizontal = expanding
								datamodel = "[EpidemicsWindow.GetOtherEpidemics]"
								spacing = 3

								item = {
									epidemic_item_vbox_ocr = {
										blockoverride "epidemic_extras"
										{
											using = open_epidemic
											onclick = "[EpidemicsWindow.SelectFocusedEpidemicInOther( PdxGuiWidget.GetIndexInDataModel )]"
										}
									}
								}
							}
						}
					}
				}
			}

			# text_single = {
			# 	layoutpolicy_horizontal = expanding
			# 	datacontext = "[GetCourtPositionType( 'court_physician_court_position' )]"
			# 	datacontext = "[Character.GetFirstEmployedOfType( CourtPositionType.Self )]"
			# 	datacontext = "[GetPlayer]"
			# 	raw_text = "[CourtPosition.GetName]"
			# }

			hbox_single_court_position_ocr = {
				datacontext = "[GetCourtPositionType( 'court_physician_court_position' )]"
				datacontext = "[GetPlayer]"
				datacontext = "[Character.GetFirstEmployedOfType( CourtPositionType.Self )]"

				visible = "[And(GetPlayer.IsValid, Isnt('infected_realm'))]"
				layoutpolicy_horizontal = expanding
				# blockoverride "position_datacontext" {
				# 	datacontext = "[Character.GetFirstEmployedOfType( CourtPositionType.Self )]"
				# }
				# 
				# blockoverride "position_extra"
				# {
				# 	widget = {
				# 		size = { 0 5 }
				# 	}
				# 	button_text = {
				# 		layoutpolicy_horizontal = expanding
				# 		shortcut = map_mode_2
				# 		onclick = "[Toggle('expand_epidemic_court_physician')]"
				# 		blockoverride "text" {
				# 			raw_text = "Tasks, [Collapse('expand_epidemic_court_physician')] T."
				# 		}
				# 	}
				# }
				blockoverride "position_effects"
				{
					visible = no
				}
				blockoverride "position_tasks"
				{
					visible = "[Not(GetVariableSystem.Exists( 'expand_epidemic_court_physician' ))]"
				}
			}
		}
	}

	epidemics_window_vanilla = {}
}

types OCR
{
	type epidemic_modifier_tooltip_ocr = object_tooltip_pop_out
	{
		blockoverride "subtitle_text"
		{
			text = "[Epidemic.GetNameNoTooltip]"

		}
		blockoverride "concept_link"
		{
			text = "[epidemic|E]"
		}

		blockoverride "main_description"
		{
			vbox = {
				layoutpolicy_horizontal = expanding
				datacontext = "[Epidemic.GetType]"

				text_multi_wide = {
					text = "EPIDEMIC_INFECTION_LEVEL_EXPLANATION"
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					datamodel = "[EpidemicType.GetInfectionLevels]"

					item = {
						vbox = {
							layoutpolicy_horizontal = expanding

							block "level_visible"
							{
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "EPIDEMIC_INFECTION_LEVEL_NAME"
							}

							text_multi_wide = {
								layoutpolicy_horizontal = expanding
								block "level_entry_text"
								{
									raw_text = "#D Replace Me#!"
								}
							}
						}
					}
				}
			}
		}
	}

	type epidemic_modifiers_hbox_ocr = vbox
	{
		datacontext = "[Epidemic.GetType]"
		layoutpolicy_horizontal = expanding

		text_single = {
			layoutpolicy_horizontal = expanding
			datacontext = "[EpidemicType.GetTrait]"
			datacontext = "[GetNullCharacter]"
			# tooltip = "[Trait.GetFullDescription( Character.Self, Character.GetFaith )]"
			raw_text = "[Trait.GetName( Character.Self)] effects, see tooltip."
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			raw_text = "Realm effects, see tooltip."
			visible = "[EpidemicType.HasRealmModifiers]"

			tooltipwidget = {
				epidemic_modifier_tooltip = {
					blockoverride "title_text"
					{
						text = "EPIDEMIC_MODIFIER_HEADING_REALM"
						default_format = "#T"
					}
					blockoverride "level_visible"
					{
						visible = "[EpidemicInfectionLevel.HasRealmModifier]"
					}
					blockoverride "level_entry_text"
					{
						text = "[EpidemicInfectionLevel.GetRealmModifierDesc]"
					}
				}
			}
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			raw_text = "Effect on provinces, see tooltip."
			visible = "[Or( EpidemicType.HasProvinceModifiers, EpidemicType.HasCountyModifiers )]"

			tooltipwidget = {
				epidemic_modifier_tooltip_ocr = {
					blockoverride "title_text"
					{
						text = "PROVINCE_AND_COUNTY_MODIFIERS"

					}
					blockoverride "level_visible"
					{
						visible = "[Or( EpidemicInfectionLevel.HasProvinceModifier, EpidemicInfectionLevel.HasCountyModifier )]"
					}
					blockoverride "level_entry_text"
					{
						text = "EPIDEMIC_MODIFIERS_PROVINCE_AND_COUNTY"
					}
				}
			}
		}

		icon_modifier_legend_owner = {
			visible = "[EpidemicType.HasRealmModifiers]"

			tooltipwidget = {
				epidemic_modifier_tooltip_ocr = {
					blockoverride "title_text"
					{
						text = "EPIDEMIC_MODIFIER_HEADING_REALM"

					}
					blockoverride "level_visible"
					{
						visible = "[EpidemicInfectionLevel.HasRealmModifier]"
					}
					blockoverride "level_entry_text"
					{
						text = "[EpidemicInfectionLevel.GetRealmModifierDesc]"
					}
				}
			}
		}

	}

	type epidemic_item_vbox_ocr = vbox
	{
		layoutpolicy_horizontal = expanding
		using = Epidemic_Mouse_Entry

		visible = "[Epidemic.IsValidCheck]"

		datacontext = "[Epidemic.GetType]"
		datacontext = "[EpidemicType.GetTrait]"
		datacontext = "[GetNullCharacter]"
		datacontext = "[GetNullCharacter.GetFaith]"

		# tooltipwidget = {
		# 	using = character_trait_tooltip
		# }

		# epidemic_modifiers_hbox_ocr = {}

		button_text = {
			layoutpolicy_horizontal = expanding
			block "epidemic_extras" {}
			shortcuts_list = {
				blockoverride "click" {
					block "epidemic_extras" {}
				}
			}
			blockoverride "extra" {
				block "focused_epidemic" {
					# text_single = {
					# 	raw_text = "[IndexNumber],"
					# }
					text_single = {
						raw_text = "[Epidemic.GetNameNoTooltip],"
					}
				}
				text_single = {
					block "focused_epidemic" {
						visible = no
					}
					raw_text = "[Epidemic.GetTotalInfectedCharacters] infected,"
				}
				text_single = {
					raw_text = "EPIDEMIC_INTENSITY"
				}
				text_single = {
					raw_text = "[Epidemic.GetType.GetName]."
				}
				text_single = {
					raw_text = "Started [GetTimeBetweenDates(Epidemic.GetOutbreakStartDate, GetCurrentDate)] ago."
				}
			}
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			block "epidemic_extras" {}
			blockoverride "extra" {
				text_single = {
					raw_text = "[Epidemic.GetTotalCharacterDeaths|V] [fatalities|e],"
					alwaystransparent = yes
				}

				text_single = {
					raw_text = "[Epidemic.GetTotalInfectedProvinces] baronies."
				}

				button_text = {
					using = prov_click
					datacontext = "[Epidemic.GetStartingOutbreakProvince]"
					blockoverride "extra" {
						margin_left = -2
						text_single = {
							raw_text = "Source:"
						}

						flowcontainer = {
							ignoreinvisible = yes
							visible = "[GetPlayer.IsValid]"

							text_single = {
								visible = "[Not(ObjectsEqual( MyCapital, Province.Self))]"
								raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)],"
							}

							text_single = {
								visible = "[ObjectsEqual( MyCapital, Province.Self)]"
								raw_text = "your capital"
							}
						}

						text_single = {
							raw_text = "[Province.GetNameNoTooltip], [Province.GetCounty.GetCount.GetTopLiege.GetPrimaryTitle.GetNameNoTierNoTooltip]."
						}
					}
				}
			}
		}
	}

	type epidemic_infected_province_item_ocr = widget
	{
		datacontext = "[EpidemicInfectedProvinceItem.GetProvince]"
		layoutpolicy_horizontal = expanding

		# This is required for performance reasons.
		size = { 600 25 }

		button_text = {
			# datacontext = "[Province.GetCoATitle]"
			using = prov_click
			blockoverride "extra" {
				#TODO show different names for holdings/county capital
				text_single = {
					raw_text = "[Province.GetNameNoTooltip],"
				}

				text_single = {
					raw_text = "Capital,"
					visible = "[Province.IsRealmCapital]"
				}

				text_single = {
					datacontext = "[EpidemicInfectedProvinceItem.GetInfectionProgress]"
					raw_text = "[ComplexBar.GetCurrentValue|0]%,"
					tooltip = "EPIDEMIC_WINDOW_INFECTION_RATE_TOOLTIP"
				}

				container = {
					visible = "[GetPlayer.IsValid]"
					ignoreinvisible = yes

					text_single = {
						visible = "[Not(ObjectsEqual( MyCapital, Province.Self))]"
						raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)]."
					}
				}
			}
		}
	}

	# Brief: Summary of the infection state of a group of provinces
	# Data context: EpidemicInfectedRealm
	type epidemic_infected_realm_item_ocr = vbox {
		datacontext = "[EpidemicInfectedRealm.GetTitle]"
		layoutpolicy_horizontal = expanding
		visible = "[Or(Isnt('infected_realm'), Has('infected_realm', Title.GetNameNoTooltip))]"

		# # This is required for performance reasons.
		# size = "[EpidemicInfectedRealm.GetWidgetSize]"

		vbox = {
			layoutpolicy_horizontal = expanding

			button_text = {
				layoutpolicy_horizontal = expanding
				onclick = "[Set('infected_realm', Title.GetNameNoTooltip)]"

				blockoverride "extra" {
					text_single = {
						raw_text = "[GetDataModelSize( EpidemicInfectedRealm.GetInfectedProvinces )][AddTextIf(IsIndexFirst, ' baronies')] in"
					}

					text_single = {
						margin_left = 2
						raw_text = "[Title.GetNameNoTooltip],"
					}

					text_single = {
						raw_text = "[EpidemicInfectedRealm.GetAverageInfection|0]%[AddTextIf(IsIndexFirst, ' average infection')]."
						tooltip = "EPIDEMIC_AVERAGE_INFECTION_RATE_TOOLTIP"
					}

					container = {
						visible = "[GetPlayer.IsValid]"
						ignoreinvisible = yes

						text_single = {
							datacontext = "[Title.GetHolder.GetCapitalLocation]"
							visible = "[Not(ObjectsEqual( MyCapital, Province.Self))]"
							raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)]."
						}
					}
				}
			}

			fixedgridbox = {
				visible = "[Has('infected_realm', Title.GetNameNoTooltip)]"
				datamodel = "[EpidemicInfectedRealm.GetInfectedProvinces]"
				layoutpolicy_horizontal = expanding

				addcolumn = 600
				addrow = 25

				item = {
					epidemic_infected_province_item_ocr = {
						blockoverride "container_margin"
						{

						}
					}
				}
			}
		}
	}

	type text_num_of_infections = text_single {
		layoutpolicy_horizontal = expanding
		visible = "[Isnt('infected_realm')]"
		raw_text = "[PdxGuiWidget.AccessParent.FindChild('infections').CountVisibleChildren] realms infected. Select for details."
	}
}

template open_epidemic {
	onclick = "[Epidemic.ZoomCameraTo]"
}

types EpidemicsWindowTypes
{
	type epidemic_modifier_tooltip = object_tooltip_pop_out
	{
		blockoverride "subtitle_text"
		{
			text = "[Epidemic.GetNameNoTooltip]"
			default_format = "#weak"
		}
		blockoverride "concept_link"
		{
			text = "[epidemic|E]"
		}

		blockoverride "main_description"
		{
			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10

				datacontext = "[Epidemic.GetType]"

				text_multi = {
					text = "EPIDEMIC_INFECTION_LEVEL_EXPLANATION"
					autoresize = yes
					max_width = 400
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5

					datamodel = "[EpidemicType.GetInfectionLevels]"

					item = {
						vbox = {
							layoutpolicy_horizontal = expanding
							margin = { 10 10 }
							spacing = 5

							block "level_visible"
							{
							}

							background = {
								using = Background_Frame
								margin = { 10 0 }
							}

							text_label_left = {
								layoutpolicy_horizontal = expanding
								text = "EPIDEMIC_INFECTION_LEVEL_NAME"
								default_format = "#S"
								align = nobaseline
							}

							text_multi = {
								layoutpolicy_horizontal = expanding
								block "level_entry_text"
								{
									raw_text = "#D Replace Me#!"
								}
								autoresize = yes
								max_width = 400
							}
						}
					}
				}
			}
		}
	}

	type epidemic_modifiers_hbox = hbox
	{
		datacontext = "[Epidemic.GetType]"

		icon_trait = {
			datacontext = "[EpidemicType.GetTrait]"
			datacontext = "[GetNullCharacter]"
		}

		icon_modifier_legend_owner = {
			visible = "[EpidemicType.HasRealmModifiers]"

			tooltipwidget = {
				epidemic_modifier_tooltip = {
					blockoverride "title_text"
					{
						text = "EPIDEMIC_MODIFIER_HEADING_REALM"
						default_format = "#T"
					}
					blockoverride "level_visible"
					{
						visible = "[EpidemicInfectionLevel.HasRealmModifier]"
					}
					blockoverride "level_entry_text"
					{
						text = "[EpidemicInfectionLevel.GetRealmModifierDesc]"
					}
				}
			}
		}

		icon_modifier_legend_province_and_county = {
			visible = "[Or( EpidemicType.HasProvinceModifiers, EpidemicType.HasCountyModifiers )]"

			tooltipwidget = {
				epidemic_modifier_tooltip = {
					blockoverride "title_text"
					{
						text = "PROVINCE_AND_COUNTY_MODIFIERS"
						default_format = "#T"
					}
					blockoverride "level_visible"
					{
						visible = "[Or( EpidemicInfectionLevel.HasProvinceModifier, EpidemicInfectionLevel.HasCountyModifier )]"
					}
					blockoverride "level_entry_text"
					{
						text = "EPIDEMIC_MODIFIERS_PROVINCE_AND_COUNTY"
					}
				}
			}
		}
	}

	type epidemic_item_vbox = vbox_generic_object_card
	{
		layoutpolicy_horizontal = expanding
		using = Epidemic_Mouse_Entry

		visible = "[Epidemic.IsValidCheck]"

		blockoverride "header_properties"
		{
			using = GenericObjectCardDefaultHeaderProperites
			margin = { 10 4 }
		}

		blockoverride "header_background" {

			background = {
				spriteType = Corneredtiled
				texture = "gfx/interface/colors/blue.dds"
				using = Mask_Rough_Edges
				alpha = 0.2

				modify_texture = {
					spriteType = Corneredtiled
					texture = "gfx/interface/component_overlay/seamless_noise.dds"
					blend_mode = overlay
					alpha = 0.4
				}
			}

			background = {
				spriteType = Corneredtiled
				alpha = 0.3
				texture = "gfx/interface/colors/white.dds"
				using = Mask_Rough_Edges

				modify_texture = {
					name = "mask"
					texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
					mirror = horizontal
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
					spriteType = Corneredtiled
					blend_mode = alphamultiply
					alpha = 0.2
				}

				block "header_background_color" {}
			}
		}

		blockoverride "header_background_color"
		{
			modify_texture = {
				visible = "[Epidemic.HasOutbreakIntensity( 'minor' )]"
				color = { 1 0.5 0.4 1 }
				blend_mode = normal
			}
			modify_texture = {
				visible = "[Epidemic.HasOutbreakIntensity( 'major' )]"
				color = { 0.65 0.15 0.15 1 }
				blend_mode = normal
			}
			modify_texture = {
				visible = "[Epidemic.HasOutbreakIntensity( 'apocalyptic' )]"
				color = { 0.7 0.0 0.0 1 }
				blend_mode = normal
			}
		}
		blockoverride "header_pre_contents"
		{
			icon_epidemic = {
				datacontext = "[Epidemic.GetType]"
				datacontext = "[EpidemicType.GetTrait]"
				datacontext = "[GetNullCharacter]"
				datacontext = "[GetNullCharacter.GetFaith]"
				tooltipwidget = {
					using = character_trait_tooltip
				}
				using = tooltip_ws
			}
		}

		blockoverride "header_top_contents"
		{
			text_single = {
				text = "[Epidemic.GetNameNoTooltip]"
				default_format = "#high"

				using = Font_Size_Medium
				align = nobaseline

				parentanchor = vcenter|left
			}
		}
		blockoverride "header_bottom_contents"
		{
			text_single = {
				margin_bottom = 4
				text = "[Epidemic.GetType.GetName]"
				default_format = "#weak"
				align = nobaseline
				parentanchor = vcenter|left
			}
		}
		blockoverride "header_post_contents"
		{
			text_single  = {
				margin_right = 10
				text = "EPIDEMIC_INTENSITY"
				default_format = "#weak"
				align = nobaseline
			}
			hbox = {
				spacing = -4

				icon_flat_standard_red = {
					size = { 24 24 }
					texture = "gfx/interface/icons/flat_icons/epidemics.dds"

					glow = {
						glow_radius = 3
						using = Glow_Standard
						using = Color_Black
						alpha = 1
					}
				}

				icon_flat_standard_red = {

					visible = "[Or(Epidemic.HasOutbreakIntensity( 'major' ),Epidemic.HasOutbreakIntensity( 'apocalyptic' ))]"
					size = { 24 24 }
					texture = "gfx/interface/icons/flat_icons/epidemics.dds"

					glow = {
						glow_radius = 3
						using = Glow_Standard
						using = Color_Black
						alpha = 1
					}

				}

				icon_flat_standard_red = {
					visible = "[Epidemic.HasOutbreakIntensity( 'apocalyptic' )]"
					size = { 24 24 }
					texture = "gfx/interface/icons/flat_icons/epidemics.dds"

					glow = {
						glow_radius = 3
						using = Glow_Standard
						using = Color_Black
						alpha = 1
					}
				}

				icon_flat_standard_black = {
					visible = "[Not(Or(Epidemic.HasOutbreakIntensity( 'major' ),Epidemic.HasOutbreakIntensity( 'apocalyptic' )))]"
					size = { 24 24 }
					texture = "gfx/interface/icons/flat_icons/epidemics.dds"
					glow = {
						glow_radius = 3
						using = Glow_Standard
						using = Color_White
						alpha = 0.2
					}
				}

				icon_flat_standard_black = {
					visible = "[Not(Epidemic.HasOutbreakIntensity( 'apocalyptic' ))]"
					size = { 24 24 }
					texture = "gfx/interface/icons/flat_icons/epidemics.dds"

					glow = {
						glow_radius = 3
						using = Glow_Standard
						using = Color_White
						alpha = 0.2
					}
				}
			}
		}

		blockoverride "card_contents"
		{
			margin = { 10 0 }
			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 4 10 }
				margin_bottom = 15
				spacing = 10

				vbox = {
					text_single = {
						layoutpolicy_horizontal = expanding
						text = "EPIDEMIC_OUTBREAK_LOCATION"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "EPIDEMIC_OUTBREAK_DATE"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "EPIDEMIC_TOTAL_DEATH_TOLL"
					}
				}

				expand = {}

				vbox = {
					text_single = {
						text = AFFECTING_MODIFIERS_LABEL
						fontsize = 14
						align = nobaseline|left
					}

					epidemic_modifiers_hbox = {}
				}

				block "epidemic_extras"
				{
				}
			}
		}
	}

	type select_epidemic_button = button_round
	{
		tooltip = "OPEN_EPIDEMIC_DETAIL"

		onclick = "[Epidemic.ZoomCameraTo]"

		button_search = {
			name = view_epidemic_tutorial_uses_this
			parentanchor = center
			alwaystransparent = yes
		}
	}

	type epidemic_infected_province_item = widget
	{
		datacontext = "[EpidemicInfectedProvinceItem.GetProvince]"

		# This is required for performance reasons.
		size = "[GetDefine( 'NEpidemic', 'EPIDEMIC_INFECTED_PROVINCE_ITEM_SIZE' )]"

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 4

			block "container_margin" { }

			coa_title_tiny = {
				datacontext = "[Province.GetCoATitle]"
				using = tooltip_ws

				blockoverride "coa_onclick"
				{
					onclick = "[OpenGameViewData( 'holding_view', Province.Self )]"
					onclick = "[Province.ZoomCameraTo]"
				}

				blockoverride "coa_tooltip"
				{
					tooltipwidget = {
						using = ProvinceTooltip
					}
				}
			}

			text_single = {
				text = "[Province.GetName]"
			}

			icon = {
				name = "realm_capital_icon"
				visible = "[Province.IsRealmCapital]"
				size = { 35 35 }
				framesize = { 63 63 }
				texture = "gfx/interface/icons/icon_capital.dds"
				frame = 2
				tooltip = "REALM_CAPITAL_TOOLTIP"
			}

			expand = {}

			widget = {
				name = "infection_rate_progressbar"
				size = { 220 16 }

				datacontext = "[EpidemicInfectedProvinceItem.GetInfectionProgress]"

				hbox_complex_bar_progress_next = {
					layoutpolicy_horizontal = expanding

					blockoverride "texture_filled"
					{
						texture = "gfx/interface/progressbars/progress_red.dds"
					}
					blockoverride "texture_empty"
					{
						texture = "gfx/interface/progressbars/progress_gray.dds"
					}
					blockoverride "texture_increase"
					{
						texture = "gfx/interface/progressbars/progress_orange.dds"
					}
					blockoverride "texture_decrease"
					{
						texture = "gfx/interface/progressbars/progress_green.dds"
					}

					tooltip = "EPIDEMIC_WINDOW_INFECTION_RATE_TOOLTIP"
					using = tooltip_se
				}
			}
		}
	}

	# Brief: Summary of the infection state of a group of provinces
	# Data context: EpidemicInfectedRealm
	type epidemic_infected_realm_item = widget {
		datacontext = "[EpidemicInfectedRealm.GetTitle]"

		# This is required for performance reasons.
		size = "[EpidemicInfectedRealm.GetWidgetSize]"

		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 16 8 }
			spacing = 4

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3

				coa_title_tiny_crown = {}

				vbox = {
					layoutpolicy_horizontal = expanding
					margin = { 8 4 }
					spacing = 2

					text_single = {
						layoutpolicy_horizontal = expanding
						autoresize = yes
						text = "[Title.GetName]"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						autoresize = yes
						text = "EPIDEMIC_HAS_INFECTED_NUM_PROVINCES"
					}
				}

				expand = {}

				progressbar_standard = {
					name = "infection_rate_progressbar"
					size = { 220 16 }

					blockoverride "progress_textures"
					{
						progresstexture = "gfx/interface/progressbars/progress_red.dds"
						noprogresstexture = "gfx/interface/progressbars/progress_gray.dds"
					}

					value = "[EpidemicInfectedRealm.GetAverageInfection]"
					tooltip = "EPIDEMIC_AVERAGE_INFECTION_RATE_TOOLTIP"
				}

				button_expand = {
					frame = "[BoolTo1And2( EpidemicInfectedRealm.IsExpanded )]"
					mirror = horizontal
					onclick = "[EpidemicInfectedRealm.ToggleExpanded]"
				}
			}

			fixedgridbox = {
				visible = "[EpidemicInfectedRealm.IsExpanded]"
				datamodel = "[EpidemicInfectedRealm.GetInfectedProvinces]"

				addcolumn = 524
				addrow = 44

				item = {
					epidemic_infected_province_item = {
						blockoverride "container_margin"
						{
							margin = { 24 0 }
						}
					}
				}
			}
		}
	}

	type epidemics_view_vbox = vbox
	{
		name = "epidemics"

		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		using = Animation_Tab_Switch

		# Currently focused epidemic (if any)
		vbox = {
			name = "epidemic_in_focus"
			widgetid = "epidemic_in_focus"

			visible = "[EpidemicsWindow.HasFocusedEpidemic]"

			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			datacontext = "[EpidemicsWindow.GetFocusedEpidemic]"

			text_label_left = {
				name = "epidemic_in_focus_heading"
				layoutpolicy_horizontal = expanding
				margin = { 16 8 }
				text = "[EpidemicsWindow.GetFocusedAreaHeading]"
				using = Font_Size_Medium
			}

			# Overview of epidemic (same as in listing)
			epidemic_item_vbox = {}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					margin = { 4 0 }

					vbox = {
						name = "domain_infections"

						layoutpolicy_horizontal = expanding
						visible = "[DataModelHasItems( EpidemicsWindow.GetFocusedEpidemicDomainInfections )]"

						hbox_expandable_toggle_field = {
							layoutpolicy_horizontal = expanding

							blockoverride "onclick"
							{
								onclick = "[GetVariableSystem.Toggle( 'expand_epidemic_domain_infections' )]"
							}

							blockoverride "button_expand"
							{
								frame = "[SelectFrame( 'expand_epidemic_domain_infections' )]"
							}

							blockoverride "text"
							{
								text = "EPIDEMIC_INFECTION_IN_DOMAIN"
							}
						}

						fixedgridbox = {
							datamodel = "[EpidemicsWindow.GetFocusedEpidemicDomainInfections]"
							visible = "[GetVariableSystem.Exists( 'expand_epidemic_domain_infections' )]"

							addcolumn = 524
							addrow = 44

							item = {
								epidemic_infected_province_item = {
									blockoverride "container_margin"
									{
										margin = { 8 0 }
									}
								}
							}
						}
					}

					vbox = {
						name = "realm_infections"

						layoutpolicy_horizontal = expanding
						visible = "[DataModelHasItems( EpidemicsWindow.AccessFocusedEpidemicOwnRealmInfections )]"

						hbox_expandable_toggle_field = {
							layoutpolicy_horizontal = expanding

							blockoverride "onclick"
							{
								onclick = "[GetVariableSystem.Toggle( 'expand_epidemic_realm_infections' )]"
							}

							blockoverride "button_expand"
							{
								frame = "[SelectFrame( 'expand_epidemic_realm_infections' )]"
							}

							blockoverride "text"
							{
								text = "EPIDEMIC_INFECTION_IN_OWN_REALM"
							}
						}

						dynamicgridbox = {
							datamodel = "[EpidemicsWindow.AccessFocusedEpidemicOwnRealmInfections]"
							visible = "[GetVariableSystem.Exists( 'expand_epidemic_realm_infections' )]"

							item = {
								epidemic_infected_realm_item = { }
							}
						}
					}

					vbox = {
						name = "other_realm_infections"

						layoutpolicy_horizontal = expanding
						visible = "[DataModelHasItems( EpidemicsWindow.AccessFocusedEpidemicInfectedRealms )]"

						hbox_expandable_toggle_field = {
							layoutpolicy_horizontal = expanding

							blockoverride "onclick"
							{
								onclick = "[GetVariableSystem.Toggle( 'expand_epidemic_other_realm_infections' )]"
							}

							blockoverride "button_expand"
							{
								frame = "[SelectFrame( 'expand_epidemic_other_realm_infections' )]"
							}

							blockoverride "text"
							{
								text = "EPIDEMIC_INFECTION_IN_OTHER_REALMS"
							}
						}

						dynamicgridbox = {
							datamodel = "[EpidemicsWindow.AccessFocusedEpidemicInfectedRealms]"
							visible = "[GetVariableSystem.Exists( 'expand_epidemic_other_realm_infections' )]"

							item = {
								epidemic_infected_realm_item = { }
							}
						}
					}
				}
			}

			expand = {}
		}

		scrollbox = {
			visible = "[Not( EpidemicsWindow.HasFocusedEpidemic )]"

			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_content"
			{
				name = "epidemics_container"
				margin = { 4 0 }

				vbox = {
					name = "epidemics_in_my_realm"
					layoutpolicy_horizontal = expanding
					margin = { 4 4 }
					margin_right = 8
					spacing = 4

					hbox_expandable_toggle_field = {
						layoutpolicy_horizontal = expanding

						blockoverride "onclick"
						{
							onclick = "[GetVariableSystem.Toggle( 'expand_epidemics_realm' )]"
						}

						blockoverride "button_expand"
						{
							frame = "[SelectFrame( 'expand_epidemics_realm' )]"
						}

						blockoverride "text"
						{
							text = "EPIDEMICS_IN_OWN_REALM"
						}
					}

					text_single = {
						visible = "[And( IsDataModelEmpty( EpidemicsWindow.GetOwnRealmEpidemics ),  GetVariableSystem.Exists( 'expand_epidemics_realm' ) )]"
						text = "EPIDEMICS_IN_OWN_REALM_EMPTY"
						default_format = "#low;italic"
					}

					vbox = {
						name = "epidemic_entries"
						visible = "[GetVariableSystem.Exists( 'expand_epidemics_realm' )]"
						layoutpolicy_horizontal = expanding
						spacing = 4

						datamodel = "[EpidemicsWindow.GetOwnRealmEpidemics]"

						item = {
							epidemic_item_vbox = {
								blockoverride "epidemic_extras"
								{
									select_epidemic_button = {
										onclick = "[EpidemicsWindow.SelectFocusedEpidemicInOwnRealm( PdxGuiWidget.GetIndexInDataModel )]"
									}
								}
							}
						}
					}
				}

				vbox = {
					name = "epidemics_nearby"
					layoutpolicy_horizontal = expanding
					margin = { 4 4 }
					margin_right = 8
					spacing = 4

					hbox_expandable_toggle_field = {
						layoutpolicy_horizontal = expanding

						blockoverride "onclick"
						{
							onclick = "[GetVariableSystem.Toggle( 'expand_epidemics_nearby' )]"
						}

						blockoverride "button_expand"
						{
							frame = "[SelectFrame( 'expand_epidemics_nearby' )]"
						}

						blockoverride "text"
						{
							text = "EPIDEMICS_NEARBY"
						}
					}

					text_single = {
						visible = "[And( IsDataModelEmpty( EpidemicsWindow.GetNearbyEpidemics ), GetVariableSystem.Exists( 'expand_epidemics_nearby' ) )]"
						text = "EPIDEMICS_NEARBY_EMPTY"
						default_format = "#low;italic"
					}

					vbox = {
						name = "epidemic_entries"
						visible = "[GetVariableSystem.Exists( 'expand_epidemics_nearby' )]"
						layoutpolicy_horizontal = expanding
						spacing = 4

						datamodel = "[EpidemicsWindow.GetNearbyEpidemics]"

						item = {
							epidemic_item_vbox = {
								blockoverride "epidemic_extras"
								{
									select_epidemic_button = {
										onclick = "[EpidemicsWindow.SelectFocusedEpidemicNearby( PdxGuiWidget.GetIndexInDataModel )]"
									}
								}
							}
						}
					}
				}

				vbox = {
					name = "epidemics_rest_of_world"
					layoutpolicy_horizontal = expanding
					margin = { 4 4 }
					margin_right = 8
					spacing = 4

					hbox_expandable_toggle_field = {
						layoutpolicy_horizontal = expanding

						blockoverride "onclick"
						{
							onclick = "[GetVariableSystem.Toggle( 'expand_epidemics_world' )]"
						}

						blockoverride "button_expand"
						{
							frame = "[SelectFrame( 'expand_epidemics_world' )]"
						}

						blockoverride "text"
						{
							text = "EPIDEMICS_REST_OF_WORLD"
						}
					}

					text_single = {
						visible = "[And( IsDataModelEmpty( EpidemicsWindow.GetOtherEpidemics ), GetVariableSystem.Exists( 'expand_epidemics_world' ))]"
						text = "EPIDEMICS_REST_OF_WORLD_EMPTY"
						default_format = "#low;italic"
					}

					vbox = {
						name = "epidemic_entries"
						visible = "[GetVariableSystem.Exists( 'expand_epidemics_world' )]"
						layoutpolicy_horizontal = expanding
						spacing = 4

						datamodel = "[EpidemicsWindow.GetOtherEpidemics]"

						item = {
							epidemic_item_vbox = {
								blockoverride "epidemic_extras"
								{
									select_epidemic_button = {
										onclick = "[EpidemicsWindow.SelectFocusedEpidemicInOther( PdxGuiWidget.GetIndexInDataModel )]"
									}
								}
							}
						}
					}
				}
			}
		}

		hbox_single_court_position_card = {
			datacontext = "[GetCourtPositionType( 'court_physician_court_position' )]"
			datacontext = "[GetPlayer]"

			visible = [GetPlayer.IsValid]
			layoutpolicy_horizontal = expanding
			margin = { 4 8 }
			margin_top = 12

			blockoverride "header_pre_contents"
			{
				hbox = {
					margin = { 5 2 }

					background = {
						using = Background_Area_Dark_Border
						margin = { 2 5 }
						margin_right = 250
						alpha = 0.4
						using = Mask_Rough_Edges

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
							blend_mode = alphaMultiply
						}
					}

					button_expand = {
						onclick = "[GetVariableSystem.Toggle( 'expand_epidemic_court_physician' )]"
						frame = "[SelectFrame( 'expand_epidemic_court_physician' )]"
					}
				}
			}
			blockoverride "card_visible"
			{
				visible = "[GetVariableSystem.Exists( 'expand_epidemic_court_physician' )]"
			}
		}
	}
}


template Expand_Epidemics {
	# on_start = "[GetVariableSystem.Set( 'expand_epidemics_realm', 'true' )]"
	# on_start = "[GetVariableSystem.Set( 'expand_epidemics_nearby', 'true' )]"
	# on_start = "[GetVariableSystem.Set( 'expand_epidemics_world', 'true' )]"
	# on_start = "[GetVariableSystem.Set( 'expand_epidemic_domain_infections', 'true' )]"
	# on_start = "[GetVariableSystem.Set( 'expand_epidemic_realm_infections', 'true' )]"
	# on_start = "[GetVariableSystem.Set( 'expand_epidemic_realm_infections', 'true' )]"
	# on_start = "[GetVariableSystem.Set( 'expand_epidemic_court_physician', 'true' )]"
}
