
######################################################
################## COUNCIL WINDOW ####################
######################################################

window = {
	name = "council_window"
	widgetid = "council_window_id"
	layer = windows_layer
	size = { 100% 100% }
	alwaystransparent = yes
	movable = no

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab
		# on_start = "[GetVariableSystem.Clear('council_focus')]"
		# start_sound = {
		# 	soundeffect = "event:/SFX/UI/Character/Lifestyle/sfx_ui_character_lifestyle_diplomacy_lifestyle"
		# }
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/rightTab/sfx_ui_window_rightTab_Council"
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
	}

	window = {
		using = ocr_window

		vbox = {
			using = ocr_margins
			spacing = 10

			error_button = {
				layoutpolicy_horizontal = expanding
			}

			header_pattern = {
				layoutpolicy_horizontal = expanding
				size = { 0 0 }

				blockoverride "header_text"
				{
					# text = "COUNCILWINDOW_TITLE"
				}

				blockoverride "button_close"
				{
					onclick = "[CouncilWindow.Close]"
				}

			}

			vbox = {
				spacing = 10
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[Not(GetVariableSystem.HasValue('council_tabs', 'kingsguard'))]"

				vbox = {
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding

						visible = "[Not(GetVariableSystem.Exists('council_focus'))]"

						text_single = {
							raw_text = "Your council"
							visible = "[CouncilWindow.IsPlayerCouncilShown]"
						}

						text_single = {
							raw_text = "COUNCIL_WINDOW_LIEGE_COUNCIL"
							visible = "[CouncilWindow.IsLiegeCouncilShown]"
						}

						text_single = {
							raw_text = ". Number keys select positions."
						}

						expand = { }
					}

					hbox = {
					    layoutpolicy_horizontal = expanding
						visible = "[Not(GetVariableSystem.Exists('council_focus'))]"

						spacing = 3
					    text_single = {
					    	raw_text = "Current skills:"
					    }

						text_single = {
							datacontext = "[CouncilWindow.GetCouncillor('councillor_chancellor')]"
							raw_text = "[GuiCouncilPosition.GetMainSkillItem.GetValue],"
						}

						text_single = {
							datacontext = "[CouncilWindow.GetCouncillor('councillor_marshal')]"
							raw_text = "[GuiCouncilPosition.GetMainSkillItem.GetValue],"
						}

						text_single = {
							datacontext = "[CouncilWindow.GetCouncillor('councillor_steward')]"
							raw_text = "[GuiCouncilPosition.GetMainSkillItem.GetValue],"
						}

						text_single = {
							datacontext = "[CouncilWindow.GetCouncillor('councillor_spymaster')]"
							raw_text = "[GuiCouncilPosition.GetMainSkillItem.GetValue],"
						}

						text_single = {
							datacontext = "[CouncilWindow.GetCouncillor('councillor_court_chaplain')]"
							raw_text = "[GuiCouncilPosition.GetMainSkillItem.GetValue]."
						}

						# text_single = {
						# 	datacontext = "[CouncilWindow.GetCouncillor('councillor_spouse')]"
						# 	raw_text = "[GuiCouncilPosition.GetMainSkillItem.GetValue],"
						# }

					    expand = { }
					}
				}

				# tabs
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[And(Not(GetPlayer.IsIndependentRuler), Not(GetVariableSystem.Exists('council_focus')))]"

					button_text = {
						layoutpolicy_horizontal = expanding
						visible = "[CouncilWindow.IsLiegeCouncilShown]"
						shortcut = confirm
						blockoverride "pre" {
							spacing = 5
							text_single = {
								raw_text = "Switch to"
							}
						}
						blockoverride "text" {
							raw_text = "Your council, Enter."
							align = left
						}
						onclick = "[CouncilWindow.SetPlayerCouncil]"
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						visible = "[CouncilWindow.IsPlayerCouncilShown]"
						shortcut = confirm
						blockoverride "pre" {
							spacing = 5

							text_single = {
								raw_text = "Switch to"
							}
						}
						blockoverride "text" {
							raw_text = "Liege's Council, Enter."
						}

						blockoverride "extra" {
							text_single = {
								visible = "[Not(StringIsEmpty(CouncilWindow.GetPositionAtLiege))]"
								raw_text = "You are [GetPlayer.GetLiege.GetHerHis] [CouncilWindow.GetPositionAtLiege]."
							}
						}
						onclick = "[CouncilWindow.SetLiegeCouncil]"
					}
					expand = { }
				}

				agot_kingsguard_tab_button = { }

				# line items
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Not(GetVariableSystem.Exists('council_focus'))]"
					spacing = 10

					agot_castellan_item = { }

					council_line_item = {
						blockoverride "pre" {
							text_single = {
								raw_text = "1."
							}
						}
						blockoverride "button" {
							shortcut = speed_1
							onclick = "[GetVariableSystem.Set('council_focus', 'chancellor')]"
						}
						datacontext = "[CouncilWindow.GetCouncillor('councillor_chancellor')]"
					}

					council_line_item = {
						blockoverride "pre" {
							text_single = {
								raw_text = "2."
							}
						}
						blockoverride "button" {
							shortcut = speed_2
							onclick = "[GetVariableSystem.Set('council_focus', 'marshal')]"
						}
						datacontext = "[CouncilWindow.GetCouncillor('councillor_marshal')]"
					}

					council_line_item = {
						blockoverride "pre" {
							text_single = {
								raw_text = "3."
							}
						}
						blockoverride "button" {
							shortcut = speed_3
							onclick = "[GetVariableSystem.Set('council_focus', 'steward')]"
						}
						datacontext = "[CouncilWindow.GetCouncillor('councillor_steward')]"
					}

					council_line_item = {
						blockoverride "pre" {
							text_single = {
								raw_text = "4."
							}
						}
						blockoverride "button" {
							shortcut = speed_4
							onclick = "[GetVariableSystem.Set('council_focus', 'spymaster')]"
						}
						datacontext = "[CouncilWindow.GetCouncillor('councillor_spymaster')]"
					}

					council_line_item = {
						blockoverride "pre" {
							text_single = {
								raw_text = "5."
							}
						}
						blockoverride "button" {
							shortcut = speed_5
							onclick = "[GetVariableSystem.Set('council_focus', 'priest')]"
						}
						datacontext = "[CouncilWindow.GetCouncillor('councillor_court_chaplain')]"
					}

					vbox = {
						using = agot_not_nightswatch
						layoutpolicy_horizontal = expanding

						council_line_item = {
							visible = "[Not( CouncilOwnerHasVizier )]"
							blockoverride "pre" {
								text_single = {
									raw_text = "T."
								}
							}
							blockoverride "button" {
								shortcut = map_mode_2
								onclick = "[GetVariableSystem.Set('council_focus', 'spouse')]"
							}
							datacontext = "[CouncilWindow.GetCouncillor('councillor_spouse')]"
						}

						council_line_item = {
							visible = "[CouncilOwnerHasVizier]"
							blockoverride "pre" {
								text_single = {
									raw_text = "T."
								}
							}
							blockoverride "button" {
								shortcut = map_mode_2
								onclick = "[GetVariableSystem.Set('council_focus', 'spouse')]"
							}
							datacontext = "[CouncilWindow.GetCouncillor('councillor_vizier')]"
						}
					}

					vbox_agot_council_line_items = { }

					expand = { }
				}

				# hotkeys
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[GetVariableSystem.Exists('council_focus')]"

					container = {
						using = agot_not_nightswatch
						button = {
							shortcut = map_mode_2
							visible = "[Not(GetVariableSystem.HasValue('council_focus', 'spouse'))]"
							onclick = "[GetVariableSystem.Set('council_focus', 'spouse')]"
						}
					}

					button = {
						shortcut = speed_1
						onclick = "[GetVariableSystem.Set('council_focus', 'chancellor')]"
					}
					button = {
						shortcut = speed_2
						onclick = "[GetVariableSystem.Set('council_focus', 'marshal')]"
					}
					button = {
						shortcut = speed_3
						onclick = "[GetVariableSystem.Set('council_focus', 'steward')]"
					}
					button = {
						shortcut = speed_4
						onclick = "[GetVariableSystem.Set('council_focus', 'spymaster')]"
					}
					button = {
						shortcut = speed_5
						onclick = "[GetVariableSystem.Set('council_focus', 'priest')]"
					}

					vbox_agot_council_items_hotkeys = { }

					expand = { }
				}

				# layouts
				widget = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					vbox_council_layout = {
						name = "my_council"
						visible = "[CouncilWindow.IsPlayerCouncilShown]"

						using = Animation_Tab_Switch
					}

					vbox_council_layout = {
						name = "council_refresh"
						visible = "[CouncilWindow.IsLiegeCouncilShown]"

						using = Animation_Tab_Switch
					}
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Reset view with Escape."
					}
					visible = "[GetVariableSystem.Exists('council_focus')]"
					onclick = "[GetVariableSystem.Clear('council_focus')]"
					shortcut = close_window
				}

				expand = { }
			}

			button_text = {
				visible = "[GetVariableSystem.HasValue('council_tabs', 'kingsguard')]"
				layoutpolicy_horizontal = expanding
				onclick = "[GetVariableSystem.Clear('council_tabs')]"
				shortcut = army_merge
			    blockoverride "text" {
			        raw_text = "Close Kingsguard, G."
			    }
			}

			kingsguard_tab_layout = { }
		}
	}

	old_council = { }
}

widget = {
	name = "potential_task_location_window"
	size = { 100% 100% }
	using = TooltipFocus
	alwaystransparent = yes

	state = {
		name = _show
		on_start = "[GetVariableSystem.Set('council_task', 'yes')]"
	}

	button = {
		parentanchor = center
		widgetanchor = left|vcenter
		onmousehierarchyenter = "[GetVariableSystem.Clear('council_task')]"
		visible = "[GetVariableSystem.Exists('council_task')]"
		position = { -50 0 }
		# texture = "gfx/interface/colors/white.dds"

		flowcontainer = {
			ignoreinvisible = yes
			resizeparent = yes
			margin = { 50 50 }
			direction = vertical

			text_single = {
				background = { using = Background_Area_Border_Solid }
				raw_text = "Click here to select the last viewed county."
				autoresize = yes
			}

			text_single = {
				raw_text = "Or press Shift 1 if you use Autohotkey."
			}

			text_single = {
				raw_text = "Task: [PotentialTaskLocationWindow.GetTaskType.GetName]."
			}

			text_single = {
				raw_text = "Cancel with Escape."
			}
		}
	}

	button = {
		onclick = "[PotentialTaskLocationWindow.Close]"
		shortcut = "close_window"
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types CouncilWindow
{

	type council_task_info = vbox
	{
		name = "task"
		datacontext = "[ActiveCouncilTask.GetTaskTypeOrDefault]"
		visible = "[Character.IsValid]"

		background = {
			using = Background_Area_Dark
			alpha = 0.7
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			raw_text = "Active task, [CouncilTaskType.GetName]."
			tooltip = "[CouncilTaskType.GetEffectDesc( ActiveCouncilTask.GetScopes )]"
		}

		hbox = {
			visible = "[CouncilTaskType.IsPercentageTask]"
			layoutpolicy_horizontal = expanding
			margin = { 5 0 }
			spacing = 3

			text_single = {
				raw_text = "[ActiveCouncilTask.GetTaskTarget],"
			}

			text_single = {
				tooltipwidget = {
					council_task_progress_breakdown_widget = { }
				}
				raw_text = "[ActiveCouncilTask.GetETA]."
			}
			expand = { }
		}

		hbox = {
			visible = "[And( CouncilTaskType.IsValueTask, Not( ActiveCouncilTask.IsFrozen ) )]"
			layoutpolicy_horizontal = expanding
			margin = { 5 0 }
			spacing = 3

			text_single = {
				name = "location"
				raw_text = "[ActiveCouncilTask.GetTaskTarget],"
			}

			text_single = {
				tooltipwidget = {
					council_task_progress_breakdown_widget = { }
					}
				raw_text = "[ActiveCouncilTask.GetETA]."
			}
			expand = { }
		}
	}

	type widget_councillor_item = widget {
		size = { 260 250 }

		widget = {
			size = { 100% 100% }
			using = ocr_on
			### Required Datacontexts
			# A council position type
			# The councillor
			# The active council task

			vbox = {
				layoutpolicy_horizontal = expanding

				hbox = {
					layoutpolicy_horizontal = expanding

					block "missing_councillor"
					{

						portrait_council = {
							name = "councillor_portrait_blank_liege"
							visible = "[And( Not(Character.IsValid), CouncilWindow.IsLiegeCouncilShown )]"
							parentanchor = center

							text_label_center = {
								parentanchor = bottom|hcenter
								position = { 0 -10 }
								text = "COUNCILLOR_BLANK_LIEGE"
								default_format = "#low;italic"
							}

							blockoverride "portrait_button"
							{
								using = tooltip_ws
							}
						}
					}

					expand = {}
				}


				hbox = {
					layoutpolicy_horizontal = expanding
					margin_right = 3

					vbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 2
						spacing = 10

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(GuiCouncilPosition.ArePotentialTasksVisible)]"

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3
								block "replace_councillor"
								{
									hbox = {

										button_text = {
											shortcut = confirm
											# name = "replace"
											blockoverride "text" {
												# raw_text = "Appoint "
												raw_text = "[Select_CString(Character.IsValid, '', 'Appoint')]"
												align = left
											}
											# blockoverride "disabled" {
											# 	visible = "[Not(GuiCouncilPosition.CanSelectCouncillor)]"
											# }
											visible = "[And(GuiCouncilPosition.CanPotentiallySelectCouncillor, Not(Character.IsValid))]"
											onclick = "[GuiCouncilPosition.SelectCouncillor]"
											enabled = "[GuiCouncilPosition.CanSelectCouncillor]"
											# tooltip = "[GuiCouncilPosition.GetSelectCouncillorTooltip]" #TODO #COUNCILWINDOW_TT_REPLACE
											using = tooltip_se

											# button_change = {
											# 	alwaystransparent = yes
											# 	parentanchor = center
											# }
										}

										button_text = {
											name = "replace"
											blockoverride "text" {
												raw_text = "Resign as "
												align = left
											}
											# name = "leave"
											visible = "[ObjectsEqual( GetPlayer.Self, Character.Self )]"
											onclick = "[CouncilWindow.OnLeaveCouncil]"
											# tooltip = "DECISIONS_VIEW_LEAVE_COUNCIL_TT"
											using = tooltip_se

											# button_leave_council = {
											# 	mirror = horizontal
											# 	parentanchor = center
											# 	alwaystransparent = yes
											# }
										}
									}
								}


								text_single = {
									name = "title"
									# layoutpolicy_horizontal = expanding
									raw_text = "[ActiveCouncilTask.GetPositionName|E]."
									tooltip = "[ActiveCouncilTask.GetPositionTooltip]"
									# autoresize = no
									fontsize_min = 14
								}

								text_single = {
									visible = "[And(And(GuiCouncilPosition.CanPotentiallySelectCouncillor, Not(Character.IsValid)), GuiCouncilPosition.CanSelectCouncillor)]"
									raw_text = "Enter."
								}

								expand = { }
							}

							hbox = {
								visible = "[Character.IsValid]"
								layoutpolicy_horizontal = expanding
								spacing = 5

								char_name = {
									blockoverride "text" {
										raw_text = "[Character.GetShortUINameNoTooltip],"
										max_width = 200
										align = left
									}
								}

								text_single = {
									datacontext = "[GuiCouncilPosition.GetMainSkillItem]"
									# visible = "[ActiveCouncilTask.HasMainSkill]"
									visible = "[And( ActiveCouncilTask.HasMainSkill, ActiveCouncilTask.HasCouncillor )]"

									raw_text = "[SkillItem.GetName] [SkillItem.GetValue]."
									tooltip = "SKILL_ITEM_TOOLTIP"
									align = left
								}
								expand = { }
							}
						}

						vbox = {
							visible = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
							layoutpolicy_horizontal = expanding
							margin = { 7 0 }

							background = {
								using = Background_Area_Dark
							}

							council_task_info = {
								layoutpolicy_horizontal = expanding
							}

						}

						vbox = {
							layoutpolicy_horizontal = expanding
							block "assist_task" { }

							block "agot_reset_castellan" { }

							vbox = {
								visible = "[GuiCouncilPosition.ArePotentialTasksVisible]"
								layoutpolicy_horizontal = expanding

								state = {
									name = _show
									using = Animation_FadeIn_Quick
								}

								vbox = {
									name = "council_position_tasks"
									datamodel = "[GuiCouncilPosition.GetPotentialCouncilTasks]"
									layoutpolicy_horizontal = expanding
									alwaystransparent = no
									background = { using = Background_Area_Border_Solid }

									item = {
										button_standard = {
											layoutpolicy_horizontal = expanding
											shortcuts_list = {
												blockoverride "click" {
													onclick = "[GuiPotentialCouncilTask.SelectTaskType]"
												}
											}
											name = "potential_task"
											datacontext = "[GuiPotentialCouncilTask.GetCouncilTaskType]"
											datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
											visible = "[GuiPotentialCouncilTask.IsVisible]"
											size = { 260 25 }

											enabled = "[GuiPotentialCouncilTask.CanSelect]"
											onclick = "[GuiPotentialCouncilTask.SelectTaskType]"
											# onclick = "[GuiCouncilPosition.ShowHideTasks]"

											tooltip = "[CouncilTaskType.GetEffectDesc( ActiveCouncilTask.GetScopes )]"

											hbox = {
												margin_left = 10
												layoutpolicy_horizontal = expanding
												spacing = 3
												text_single = {
													raw_text = "[IndexNumber],"
												}
												text_single = {
													raw_text = "[CouncilTaskType.GetName],"
												}

												text_single = {
													raw_text = "see tooltip."
													visible = "[Not(CouncilTaskType.HasMainSkill)]"
												}

												text_single = {
													text = "[GuiCouncilPosition.GetSkillModifierForTask(CouncilTaskType.Self)|+=]"
													visible = "[CouncilTaskType.HasMainSkill]"
													datacontext = "[GuiCouncilPosition.GetSkillItemForTask(CouncilTaskType.Self)]"
												}

												text_single = {
													datacontext = "[GuiCouncilPosition.GetSkillItemForTask(CouncilTaskType.Self)]"
													raw_text = "[SkillItem.GetName]."
												}

												expand = { }
											}
										}
									}
								}
							}
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "[Select_CString(Character.IsValid, 'Replace', '')]"
							}
							blockoverride "extra" {
								text_single = {
									margin_left = -3
									raw_text = ", X"
									visible = "[And(GuiCouncilPosition.CanPotentiallySelectCouncillor, Character.IsValid)]"
								}
							}
							shortcut = increase_speed_2
							blockoverride "disabled" {
								visible = "[Not(GuiCouncilPosition.CanSelectCouncillor)]"
								tooltip = "[GuiCouncilPosition.GetSelectCouncillorTooltip]" #TODO #COUNCILWINDOW_TT_REPLACE
							}
							blockoverride "dot" { }
							visible = "[And(GuiCouncilPosition.CanPotentiallySelectCouncillor, Character.IsValid)]"
							onclick = "[GuiCouncilPosition.SelectCouncillor]"
							enabled = "[GuiCouncilPosition.CanSelectCouncillor]"
							using = tooltip_se
						}

						hbox = {
							margin_left = 5
							layoutpolicy_horizontal = expanding
							spacing = 5
							visible = "[Character.IsValid]"

							text_single = {
								visible = "[Not(Character.IsLocalPlayer)]"
								raw_text = "[Character.GetOpinionOf(GetPlayer)|=] opinion."
								tooltip = "[Character.GetOpinionBreakdownText(GetPlayer)]"
							}
							text_single = {
								visible = "[Character.IsPowerfulVassal]"
								text = "MY_REALM_WINDOW_POWERFUL_VASSAL"
								align = left
								# layoutpolicy_horizontal = expanding
							}
							text_single = {
								visible = "[And(Character.HasLandedTitles, Not(Character.IsPowerfulVassal))]"
								raw_text = "Vassal,"
								align = left
								# layoutpolicy_horizontal = expanding
							}
							expand = { }
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							margin_left = 5
							visible = "[Character.IsValid]"

							text_single = {
								layoutpolicy_horizontal = expanding
								visible = "[Character.IsTheocraticLesseeOf( GetPlayer )]"
								raw_text = "[Select_CString( And( Character.TheocraticLesseeHasApprovalStatus, Character.TheocraticLesseeApprovesOfLiege ), 'Endorses you.', 'Does not endorse you.' )]"
								tooltip = "[Character.GetTheocraticLesseeApprovalTooltip]"
							}
							expand = {}
						}


						hbox = {
							margin_left = 5
							visible = "[Character.IsValid]"
							spacing = 5
							layoutpolicy_horizontal = expanding
							text_single = {
								visible = no#"[Character.HasLandedTitles]"
								raw_text = "Strength: [Character.GetMaxMilitaryStrength|0]."
								align = left
								# layoutpolicy_horizontal = expanding
							}
							text_single = {
								raw_text = "Other "
								align = left
							}
							hbox_skills_grid = {
								datamodel = "[GuiCouncilPosition.GetSkillItems]"
							}
							expand = { }
						}
					}
				}

				vbox = {
					visible = "[Not(GuiCouncilPosition.ArePotentialTasksVisible)]"
					layoutpolicy_horizontal = expanding
					margin = { 10 10 }
					# layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					text_multi = {
						layoutpolicy_horizontal = expanding
						autoresize = yes
						max_width = 600
						visible = "[Character.IsLocalPlayer]"
						text = "ON_COUNCIL_EFFECTS"
					}

					block "regular_task"
					{
						flowcontainer = {
							name = "council_position_tasks"
							visible = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
							datamodel = "[GuiCouncilPosition.GetPotentialCouncilTasks]"
							direction = vertical
							layoutpolicy_horizontal = expanding

							# position = { 10 0 }

							text_single = {
								raw_text = "Tasks:"
								background = { using = Background_Area_Dark }
								visible = "[Character.IsValid]"

							}

							item = {
								container = {
									datacontext = "[GuiPotentialCouncilTask.GetCouncilTaskType]"
									ignoreinvisible = yes
									visible = "[GuiPotentialCouncilTask.IsVisible]"

									button_text = {
										block "kingsguard" { }
										blockoverride "pre" {
											text_single = {
												raw_text = "Active,"
												margin_right = 3
												visible = "[GuiPotentialCouncilTask.IsActive]"
											}
										}
										blockoverride "text" {
											raw_text = "[CouncilTaskType.GetName]."
										}
										blockoverride "disabled" {
											visible = "[CouncilWindow.IsLiegeCouncilShown]"
										}
										blockoverride "extra" {
											block "kingsguard_text" { }
										}
										using = tooltip_ws

										tooltipwidget = {
											council_task_icon_tooltip_widget = {
											}
										}
										visible = "[Or(And(GuiPotentialCouncilTask.CanSelect, Not(CouncilWindow.IsLiegeCouncilShown)), GuiPotentialCouncilTask.IsActive)]"
										onclick = "[GuiPotentialCouncilTask.SelectTaskType]"
										enabled = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
										down = "[GuiPotentialCouncilTask.IsActive]"
										# onclick = "[GetVariableSystem.Set('council_task', 'yes')]"
									}

									text_single = {
										margin_left = 3
										visible = "[And(Not(GuiPotentialCouncilTask.CanSelect), Not(CouncilWindow.IsLiegeCouncilShown))]"
										datacontext = "[GuiPotentialCouncilTask.GetCouncilTaskType]"

										raw_text = "Can't [CouncilTaskType.GetName]."

										tooltipwidget = {
											invalid_potential_council_task_icon_tooltip_widget = {
											}
										}
									}
								}
							}
						}
					}
				}

				expand = { }
			}
		}

		widget = {
			size = { 100% 100% }
			using = ocr_off

			widget = {
				visible = "[Not(GuiCouncilPosition.ArePotentialTasksVisible)]"
				size = { 100% 100% }

				state = {
					name = _show
					using = Animation_FadeIn_Quick
				}

				state = {
					name = _hide
					using = Animation_FadeOut_Quick
				}

				portrait_council = {
					name = "councillor_portrait"
					datacontext = "[ActiveCouncilTask.GetCouncillor]"
					visible = "[Character.IsValid]"
					parentanchor = bottom
					position = { 0 4 }

					blockoverride "portrait_button_no_character_text"
					{
						text = "PORTRAIT_NO_COUNCILLOR"
					}

					blockoverride "portrait_button"
					{
						using = tooltip_ws
					}
				}

				block "missing_councillor"
				{
					portrait_council = {
						name = "councillor_portrait_blank"
						visible = "[And( Not(Character.IsValid), CouncilWindow.IsPlayerCouncilShown)]"
						parentanchor = center

						blockoverride "portrait_button_no_character_text"
						{
							text = "PORTRAIT_NO_COUNCILLOR"
						}

						blockoverride "portrait_button_template_onclick"
						{
							onclick = "[GuiCouncilPosition.SelectCouncillor]"
						}

						text_label_center = {
							parentanchor = bottom|hcenter
							position = { 0 -10 }
							text = "COUNCILLOR_CLICK_TO_HIRE"
							default_format = "#low;italic"
							max_width = 235
						}

						blockoverride "onclick" {
							onclick = "[GuiCouncilPosition.SelectCouncillor]"

							button_icon = {
								parentanchor = center
								alwaystransparent = yes
								size = { 40 40 }
								position = { 0 70 }
								texture = "gfx/interface/icons/flat_icons/plus.dds"
							}
						}
						blockoverride "portrait_button"
						{
							using = tooltip_ws
						}
					}

					portrait_council = {
						name = "councillor_portrait_blank_liege"
						visible = "[And( Not(Character.IsValid), CouncilWindow.IsLiegeCouncilShown )]"
						parentanchor = center

						text_label_center = {
							parentanchor = bottom|hcenter
							position = { 0 -10 }
							text = "COUNCILLOR_BLANK_LIEGE"
							default_format = "#low;italic"
						}

						blockoverride "portrait_button"
						{
							using = tooltip_ws
						}
					}
				}
			}

			vbox = {

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 5 }
					margin_right = 3

					background = {
						using = Background_Area_Dark
					}

					background = {
						visible = "[ObjectsEqual( Character.Self, GetPlayer )]"
						texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
						spriteType = Corneredtiled
						alpha = 0.4

						using = Color_Blue

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							alpha = 0.9
							mirror = horizontal
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_texture_01.dds"
							spriteType = Corneredtiled
							spriteborder = { 15 15 }
							blend_mode = alphamultiply
						}
					}

					background = {
						visible = "[ObjectsEqual( Character.Self, GetPlayer )]"
						texture = "gfx/interface/component_masks/mask_frame.dds"
						spriteType = Corneredstretched
						spriteborder = { 15 15 }
						alpha = 0.25

						using = Color_Blue

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							alpha = 0.9
							mirror = horizontal
						}
					}

					spacer = {
						visible = "[GuiCouncilPosition.CanPotentiallySelectCouncillor]"
						size = { 6 6 }
					}

					spacer = {
						visible = "[CouncilWindow.IsLiegeCouncilShown]"
						size = { 5 5 }
					}

					block "replace_councillor"
					{
						hbox = {

							button_round = {
								name = "replace"
								visible = "[GuiCouncilPosition.CanPotentiallySelectCouncillor]"
								onclick = "[GuiCouncilPosition.SelectCouncillor]"
								enabled = "[GuiCouncilPosition.CanSelectCouncillor]"
								tooltip = "[GuiCouncilPosition.GetSelectCouncillorTooltip]" #COUNCILWINDOW_TT_REPLACE
								using = tooltip_se

								button_change = {
									alwaystransparent = yes
									parentanchor = center
								}
							}

							button_round = {
								name = "leave"
								visible = "[ObjectsEqual( GetPlayer.Self, Character.Self )]"
								onclick = "[CouncilWindow.OnLeaveCouncil]"
								tooltip = "DECISIONS_VIEW_LEAVE_COUNCIL_TT"
								using = tooltip_se

								button_leave_council = {
									mirror = horizontal
									parentanchor = center
									alwaystransparent = yes
								}
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 6

						text_single = {
							name = "title"
							layoutpolicy_horizontal = expanding
							text = "[ActiveCouncilTask.GetPositionName|E]"
							tooltip = "[ActiveCouncilTask.GetPositionTooltip]"
							autoresize = no
							fontsize_min = 13
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "[Character.GetShortUINameNoTooltip]"
							default_format = "#high"
							align = nobaseline
							autoresize = no
							fontsize_min = 13
						}
					}

					skill_icon_label = {
						datacontext = "[GuiCouncilPosition.GetMainSkillItem]"
						visible = "[ActiveCouncilTask.HasMainSkill]"

						blockoverride "icon_size"
						{
							size = { 35 35 }
						}

						blockoverride "font_size" {
							using = Font_Size_Medium
							visible = "[And( ActiveCouncilTask.HasMainSkill, ActiveCouncilTask.HasCouncillor )]"
							min_width = 13
						}

						blockoverride "tooltip"
						{
							tooltip_enabled = "[And( ActiveCouncilTask.HasMainSkill, ActiveCouncilTask.HasCouncillor )]"
							tooltip = "[SkillItem.GetSkillBreakdownTooltip]"
						}
					}
				}

				widget = {
					visible = "[GuiCouncilPosition.ArePotentialTasksVisible]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					flowcontainer = {
						name = "council_position_tasks"
						datamodel = "[GuiCouncilPosition.GetPotentialCouncilTasks]"
						parentanchor = bottom|hcenter
						margin_bottom = 10
						direction = vertical
						spacing = 3
						alwaystransparent = no

						item = {
							button_standard = {
								name = "potential_task"
								datacontext = "[GuiPotentialCouncilTask.GetCouncilTaskType]"
								datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
								visible = "[GuiPotentialCouncilTask.IsVisible]"
								size = { 220 25 }

								enabled = "[GuiPotentialCouncilTask.CanSelect]"
								onclick = "[GuiPotentialCouncilTask.SelectTaskType]"

								tooltip = "[CouncilTaskType.GetEffectDesc( ActiveCouncilTask.GetScopes )]"

								text_single = {
									parentanchor = left|vcenter
									position = { 10 0 }
									text = "[CouncilTaskType.GetName]"
									align = nobaseline
									default_format = "#clickable"
								}

								container = {
									visible = "[CouncilTaskType.HasMainSkill]"
									parentanchor = right|vcenter


									skill_icon_label_vertical = {
										datacontext = "[GuiCouncilPosition.GetSkillItemForTask(CouncilTaskType.Self)]"

										blockoverride "font_size" {
											min_width = 13
										}

										blockoverride "value"
										{
											text = "[GuiCouncilPosition.GetSkillModifierForTask(CouncilTaskType.Self)|+=]"
										}

										blockoverride "tooltip"
										{
										}
									}
								}
							}
						}
					}
				}

				widget = {
					visible = "[Not(GuiCouncilPosition.ArePotentialTasksVisible)]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					text_multi = {
						margin_left = 10
						margin_bottom = 10
						margin_right = 5
						autoresize = yes
						max_width = 180
						visible = "[Character.IsLocalPlayer]"
						align = bottom|left
						parentanchor = bottom|left
						text = "ON_COUNCIL_EFFECTS"
						background = {
							using = Background_Area_Dark
						}
						fontsize = 14
					}

					portrait_opinion = {
						visible = "[And(Character.IsValid, Not(Character.IsLocalPlayer) )]"
						parentanchor = bottom|hcenter
						position = { 0 -2 }

						blockoverride "opinion_text"
						{
							text = "[Character.GetOpinionOf( Character.GetLiege )|=]"
							fonttintcolor = "[Character.GetOpinionOfTint( Character.GetLiege )]"
						}

						blockoverride "ott_heading_text"
						{
							text = "[Character.GetOpinionHeadingText( Character.GetLiege )]"
						}

						blockoverride "ott_opinion_value_text"
						{
							text = "[Character.GetOpinionOf( Character.GetLiege )|=]"
							fonttintcolor = "[Character.GetOpinionOfTint( Character.GetLiege )]"
						}

						blockoverride "ott_opinion_breakdown_text"
						{
							text = "[Character.GetOpinionBreakdownText( Character.GetLiege )|=]"
						}
					}

					background = {
						texture = "gfx/interface/component_masks/mask_fade_corner.dds"
						color = { 0.12 0.12 0.12 1 }
						alpha = 0.5
						margin_top = -130
						margin_left = -150
					}

					flowcontainer = {
						parentanchor = bottom|right
						ignoreinvisible = yes
						margin_bottom = 3

						icon = {
							name = "church_approval_icon"
							visible = "[Character.IsTheocraticLesseeOf( GetPlayer )]"

							texture = "gfx/interface/icons/icon_bishop_approval.dds"
							framesize = { 120 120 }
							size = { 50 50 }
							frame = "[Select_int32( And( Character.TheocraticLesseeHasApprovalStatus, Character.TheocraticLesseeApprovesOfLiege ), '(int32)1', '(int32)2' )]"
							tooltip = "[Character.GetTheocraticLesseeApprovalTooltip]"
						}

						flowcontainer = {
							parentanchor = bottom
							margin_bottom = 4

							portrait_status_icons = {
								background = {
									using = Background_Area_Dark
									margin = { 1 2 }
								}
							}
						}

						coa_realm_small_crown = {
							visible = "[Character.HasLandedTitles]"
							parentanchor = bottom
							name = "councillor_realm"
						}
					}

					block "regular_task"
					{
						fixedgridbox = {
							name = "council_position_tasks"
							visible = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
							datamodel = "[GuiCouncilPosition.GetPotentialCouncilTasks]"

							addcolumn = 45
							addrow = 45
							datamodel_wrap = 4
							maxhorizontalslots = 2
							maxverticalslots = 4
							layoutanchor = bottomleft

							parentanchor = bottom|left
							position = { 10 0 }

							background = {
								texture = "gfx/interface/hud/tab_bg.dds"
								mirror = horizontal
								margin_top = 15
								margin_bottom = 12
								margin_right = 15
								margin_left = 10
								using = Color_Black
							}

							item = {
								container = {
									visible = "[GuiPotentialCouncilTask.IsVisible]"
									widget = {
										size = { 42 42 }

										icon = {
											visible = "[GuiPotentialCouncilTask.IsActive]"
											texture = "gfx/particles/halo.dds"
											parentanchor = center
											size = { 58 58 }
											color = { 1 0.85 0.6 1 }
										}

										button_round = {
											visible = "[Or(And(GuiPotentialCouncilTask.CanSelect, Not(CouncilWindow.IsLiegeCouncilShown)), GuiPotentialCouncilTask.IsActive)]"
											parentanchor = center
											size = { 46 46 }
											gfxtype = togglepushbuttongfx
											effectname = "NoHighlight"

											onclick = "[GuiPotentialCouncilTask.SelectTaskType]"
											enabled = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
											down = "[GuiPotentialCouncilTask.IsActive]"

											using = tooltip_ws

											tooltipwidget = {
												council_task_icon_tooltip_widget = {
													using = DefaultTooltipBackground
													using = GeneralTooltipSetup
													alwaystransparent = no
												}
											}

											upframe = 1
											downframe = 1
											uphoverframe = 2
											disableframe = 6

											button_normal = {
												name = "potential_task"
												parentanchor = center
												widgetanchor = center
												datacontext = "[GuiPotentialCouncilTask.GetCouncilTaskType]"
												effectname = "NoHighlight"
												gfxtype = togglepushbuttongfx
												shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
												texture = "[CouncilTaskType.GetIcon]"
												alwaystransparent = yes
												size = { 38 38 }
											}
										}
									}

									widget = {
										size = { 40 40 }
										visible = "[And(Not(GuiPotentialCouncilTask.CanSelect), Not(CouncilWindow.IsLiegeCouncilShown))]"

										icon = {
											datacontext = "[GuiPotentialCouncilTask.GetCouncilTaskType]"
											parentanchor = center
											size = { 35 35 }
											alwaystransparent = yes

											texture = "[CouncilTaskType.GetIcon]"
											alpha = 0.4

											tooltipwidget = {
												invalid_potential_council_task_icon_tooltip_widget = {
													using = DefaultTooltipBackground
													using = GeneralTooltipSetup
													alwaystransparent = no
												}
											}
										}
									}
								}
							}
						}

						# flowcontainer = {
						# 	name = "council_position_tasks"
						# 	visible = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
						# 	datamodel = "[GuiCouncilPosition.GetPotentialCouncilTasks]"
						# 	parentanchor = bottom|left
						# 	position = { 0  }
						# 	margin = { 10 5 }
						# 	spacing = 4
						# 	direction = vertical
						# 	alwaystransparent = no
						# 	ignoreinvisible = yes

						# 	background = {
						# 		texture = "gfx/interface/hud/tab_bg.dds"
						# 		mirror = horizontal
						# 		margin = { 0 10 }
						# 		margin_right = 15
						# 		using = Color_Black
						# 	}

						# 	item = {
						# 		container = {
						# 			visible = "[GuiPotentialCouncilTask.IsVisible]"
						# 			widget = {
						# 				size = { 42 42 }

						# 				icon = {
						# 					visible = "[GuiPotentialCouncilTask.IsActive]"
						# 					texture = "gfx/particles/halo.dds"
						# 					parentanchor = center
						# 					size = { 58 58 }
						# 					color = { 1 0.85 0.6 1 }
						# 				}

						# 				button_round = {
						# 					visible = "[Or(And(GuiPotentialCouncilTask.CanSelect, Not(CouncilWindow.IsLiegeCouncilShown)), GuiPotentialCouncilTask.IsActive)]"
						# 					parentanchor = center
						# 					size = { 46 46 }
						# 					gfxtype = togglepushbuttongfx
						# 					effectname = "NoHighlight"

						# 					onclick = "[GuiPotentialCouncilTask.SelectTaskType]"
						# 					enabled = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
						# 					down = "[GuiPotentialCouncilTask.IsActive]"

						# 					using = tooltip_ws

						# 					tooltipwidget = {
						# 						council_task_icon_tooltip_widget = {
						# 							using = DefaultTooltipBackground
						# 							using = GeneralTooltipSetup
						# 							alwaystransparent = no
						# 						}
						# 					}

						# 					upframe = 1
						# 					downframe = 1
						# 					uphoverframe = 2
						# 					disableframe = 6

						# 					button_normal = {
						# 						name = "potential_task"
						# 						parentanchor = center
						# 						widgetanchor = center
						# 						datacontext = "[GuiPotentialCouncilTask.GetCouncilTaskType]"
						# 						effectname = "NoHighlight"
						# 						gfxtype = togglepushbuttongfx
						# 						shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
						# 						texture = "[CouncilTaskType.GetIcon]"
						# 						alwaystransparent = yes
						# 						size = { 38 38 }
						# 					}
						# 				}
						# 			}

						# 			widget = {
						# 				size = { 40 40 }
						# 				visible = "[And(Not(GuiPotentialCouncilTask.CanSelect), Not(CouncilWindow.IsLiegeCouncilShown))]"

						# 				icon = {
						# 					datacontext = "[GuiPotentialCouncilTask.GetCouncilTaskType]"
						# 					parentanchor = center
						# 					size = { 35 35 }
						# 					alwaystransparent = yes

						# 					texture = "[CouncilTaskType.GetIcon]"
						# 					alpha = 0.4

						# 					tooltipwidget = {
						# 						invalid_potential_council_task_icon_tooltip_widget = {
						# 							using = DefaultTooltipBackground
						# 							using = GeneralTooltipSetup
						# 							alwaystransparent = no
						# 						}
						# 					}
						# 				}
						# 			}
						# 		}
						# 	}
						# }
					}
				}

				vbox = {
					visible = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
					layoutpolicy_horizontal = expanding
					margin = { 7 0 }

					background = {
						using = Background_Area_Dark
					}

					council_task_info = {
						layoutpolicy_horizontal = expanding
					}

					block "assist_task" {}
				}
			}
		}
	}
}

types CouncilTaskTypes
{

	# Requires a GuiPotentialCouncilTask data context to be provided
	type invalid_potential_council_task_icon_tooltip_widget = widget
	{
		size = { 50 50 }

		vbox = {
			using = DefaultTooltipBackground
			using = GeneralTooltipSetup
			restrictparent_min = yes
			minimumsize = { 280 0 }

			margin = { 15 15 }
			spacing = 5

			datacontext = "[GuiPotentialCouncilTask.GetDummyTask]"

			text_single = {
				name = "task_info"
				text = "[GuiPotentialCouncilTask.GetCouncilTaskType.GetName]"
				default_format = "#T"
				layoutpolicy_horizontal = expanding
			}

			text_multi = {
				name = "cannot_select_text"
				text = "[GuiPotentialCouncilTask.GetCannotSelectTooltip]"
				layoutpolicy_horizontal = expanding
				autoresize = yes
				max_width = 800
				align = left
			}
		}
	}

	# Requires an ActiveCouncilTask data context to be provided
	type council_task_icon_tooltip_widget_base = widget
	{
		size = { 50 50 }

		vbox = {
			restrictparent_min = yes
			minimumsize = { 280 0 }
			maximumsize = { 800 0 }

			hide_tooltip = { }

			vbox = {
				using = DefaultTooltipBackground
				using = GeneralTooltipSetup

				margin = { 15 15 }
				margin_top = 10
				spacing = 7

				text_multi = {
					name = "task_info"
					block "task_info_heading"
					{
						raw_text = "#D GIVE ME SOME TEXT#!"
					}
					layoutpolicy_horizontal = expanding
					autoresize = yes
					max_width = 800
					align = left
				}

				text_single = {
					name = "progress"
					layoutpolicy_horizontal = expanding

					block "progress_visiblity"
					{
						visible = "[Not( ActiveCouncilTask.GetTaskType.IsInfiniteTask )]"
					}

					text = COUNCIL_TASK_PROGRESSBAR_TOOLTIP_HEADER
					tooltipwidget = {
						council_task_progress_breakdown_widget = { }
						}
					}

					text_multi = {
						name = "effects"
						text = COUNCIL_TASK_EFFECTS
						layoutpolicy_horizontal = expanding
						autoresize = yes
						max_width = 800
						align = left
					}
				}
		}

	}

	# Requires an ActiveCouncilTask data context to be provided
	type council_task_icon_tooltip_widget = council_task_icon_tooltip_widget_base
	{
		datacontext = "[GuiPotentialCouncilTask.GetDummyTaskOrActualIfActive]"
		blockoverride "task_info_heading"
		{
			text = COUNCIL_TASK_TT
		}
		blockoverride "progress_visiblity"
		{
			visible = "[And( Not( ActiveCouncilTask.GetTaskType.IsInfiniteTask ), GuiPotentialCouncilTask.IsActive ) ]"
		}
	}

	type council_task_map_icon_tooltip_widget = council_task_icon_tooltip_widget_base
	{
		blockoverride "task_info_heading"
		{
			text = COUNCIL_TASK_MAP_TT
		}
	}

	type vbox_council_layout = vbox {
		vbox = {
			using = ocr_on
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			widget_councillor_item = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[CouncilWindow.GetCouncillor('councillor_vizier')]"
				datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
				datacontext = "[ActiveCouncilTask.GetPositionType]"
				datacontext = "[ActiveCouncilTask.GetCouncillor]"
				visible = "[And(GetVariableSystem.HasValue('council_focus', 'spouse'), CouncilOwnerHasVizier )]"

				# make spouse portrait unique size, so it doesn't reuse
				# textures from other councilors during hide animation
				blockoverride "portrait_size"
				{
					size = { 260 286 }
				}

				blockoverride "regular_task" {}

				blockoverride "assist_task"
				{
					hbox = {
						visible = "[Character.IsValid]"
						layoutpolicy_horizontal = expanding
						spacing = 3

						button_text = {
							shortcut = map_mode_2
							layoutpolicy_horizontal = expanding
							onclick = "[GuiCouncilPosition.ShowHideTasks]"
							datacontext = "[ActiveCouncilTask.GetTaskTypeOrDefault]"
							visible = "[GuiCouncilPosition.ArePotentialTasksVisible]"

							blockoverride "text" {
								raw_text = "Select new task. Close with T."
							}
						}

						button_text = {
							shortcut = map_mode_2
							layoutpolicy_horizontal = expanding
							onclick = "[GuiCouncilPosition.ShowHideTasks]"
							datacontext = "[ActiveCouncilTask.GetTaskTypeOrDefault]"
							visible = "[Not(GuiCouncilPosition.ArePotentialTasksVisible)]"

							blockoverride "text" {
								raw_text = "Task, [CouncilTaskType.GetName], hotkey T."
							}
						}
					}
				}

				blockoverride "missing_councillor"
				{
					text_single = {
						visible = "[And( Not(Character.IsValid), CouncilWindow.IsPlayerCouncilShown )]"
						text = "COUNCILLOR_MISSING_VIZIER"
					}

					text_single = {
						visible = "[And( Not(Character.IsValid), CouncilWindow.IsLiegeCouncilShown )]"
						text = "COUNCILLOR_LIEGE_MISSING_VIZIER"
					}
				}
			}

			widget_councillor_item = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[CouncilWindow.GetCouncillor('councillor_spouse')]"
				datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
				datacontext = "[ActiveCouncilTask.GetPositionType]"
				datacontext = "[ActiveCouncilTask.GetCouncillor]"
				visible = "[And(GetVariableSystem.HasValue('council_focus', 'spouse'), Not( CouncilOwnerHasVizier ))]"


				# make spouse portrait unique size, so it doesn't reuse
				# textures from other councilors during hide animation
				blockoverride "portrait_size"
				{
					size = { 260 286 }
				}

				blockoverride "replace_councillor"
				{
					spacer = {
						visible = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
						size = { 5 5 }
					}
				}

				blockoverride "regular_task" { }

				blockoverride "assist_task"
				{
					hbox = {
						visible = "[Character.IsValid]"
						layoutpolicy_horizontal = expanding
						spacing = 3

						button_text = {
							shortcut = map_mode_2
							layoutpolicy_horizontal = expanding
							onclick = "[GuiCouncilPosition.ShowHideTasks]"
							datacontext = "[ActiveCouncilTask.GetTaskTypeOrDefault]"
							visible = "[GuiCouncilPosition.ArePotentialTasksVisible]"

							blockoverride "text" {
								raw_text = "Select new task. Close with T."
							}
						}

						button_text = {
							shortcut = map_mode_2
							layoutpolicy_horizontal = expanding
							onclick = "[GuiCouncilPosition.ShowHideTasks]"
							datacontext = "[ActiveCouncilTask.GetTaskTypeOrDefault]"
							visible = "[Not(GuiCouncilPosition.ArePotentialTasksVisible)]"

							blockoverride "text" {
								raw_text = "Task, [CouncilTaskType.GetName], hotkey T."
							}
						}
					}
				}

				blockoverride "missing_councillor"
				{
					text_single = {
						visible = "[And( And( Not( CouncilOwnerCanUseVizier ), CouncilWindow.IsPlayerCouncilShown ), Not( Character.IsValid ) )]"
						text = "COUNCILLOR_MISSING_SPOUSE"
					}

					text_single = {
						visible = "[And( And( Not( CouncilOwnerCanUseVizier ), CouncilWindow.IsLiegeCouncilShown ), Not( Character.IsValid ) )]"
						text = "COUNCILLOR_LIEGE_MISSING_SPOUSE"
					}

					text_single = {
						visible = "[And( And( CouncilOwnerCanUseVizier, CouncilWindow.IsPlayerCouncilShown ), Not( Character.IsValid ) )]"
						text = "COUNCILLOR_MISSING_VIZIER"
					}

					text_single = {
						visible = "[And( And( CouncilOwnerCanUseVizier, CouncilWindow.IsLiegeCouncilShown ), Not( Character.IsValid ) )]"
						text = "COUNCILLOR_LIEGE_MISSING_VIZIER"
					}
				}
			}

			widget_councillor_item = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[CouncilWindow.GetCouncillor('councillor_court_chaplain')]"
				datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
				datacontext = "[ActiveCouncilTask.GetPositionType]"
				datacontext = "[ActiveCouncilTask.GetCouncillor]"
				name = "tutorial_court_chaplain"
				visible = "[GetVariableSystem.HasValue('council_focus', 'priest')]"

				datacontext = "[GetIllustration( 'religion_interior' )]"


			}

			widget_councillor_item = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[CouncilWindow.GetCouncillor('councillor_chancellor')]"
				datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
				datacontext = "[ActiveCouncilTask.GetPositionType]"
				datacontext = "[ActiveCouncilTask.GetCouncillor]"
				visible = "[GetVariableSystem.HasValue('council_focus', 'chancellor')]"

			}

			widget_councillor_item = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[CouncilWindow.GetCouncillor('councillor_steward')]"
				datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
				datacontext = "[ActiveCouncilTask.GetPositionType]"
				datacontext = "[ActiveCouncilTask.GetCouncillor]"
				visible = "[GetVariableSystem.HasValue('council_focus', 'steward')]"

			}

			widget_councillor_item = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[CouncilWindow.GetCouncillor('councillor_marshal')]"
				datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
				datacontext = "[ActiveCouncilTask.GetPositionType]"
				datacontext = "[ActiveCouncilTask.GetCouncillor]"
				visible = "[GetVariableSystem.HasValue('council_focus', 'marshal')]"

			}

			widget_councillor_item = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[CouncilWindow.GetCouncillor('councillor_spymaster')]"
				datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
				datacontext = "[ActiveCouncilTask.GetPositionType]"
				datacontext = "[ActiveCouncilTask.GetCouncillor]"
				visible = "[GetVariableSystem.HasValue('council_focus', 'spymaster')]"
			}

			vbox_agot_council_items = { }
		}

		vbox = {
			using = ocr_off
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			maximumsize = { -1 932 }
			spacing = 5

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 0 }
				spacing = 5

				widget_councillor_item = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[CouncilWindow.GetCouncillor('councillor_vizier')]"
					datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
					datacontext = "[ActiveCouncilTask.GetPositionType]"
					datacontext = "[ActiveCouncilTask.GetCouncillor]"
					visible = "[CouncilOwnerHasVizier]"

					background =  {
						texture = "gfx/interface/skinned/illustrations/council/bg_council_spouse.dds"
						fittype = centercrop
						using = Mask_Rough_Edges
						alpha = 0.8
					}

					background = {
						texture = "gfx/interface/component_masks/mask_vignette.dds"
						color = { 0.15 0.15 0.15 1 }
						alpha = 0.3
					}

					# make spouse portrait unique size, so it doesn't reuse
					# textures from other councilors during hide animation
					blockoverride "portrait_size"
					{
						size = { 260 286 }
					}

					blockoverride "regular_task" {}

					blockoverride "assist_task"
					{
						hbox = {
							visible = "[Character.IsValid]"
							layoutpolicy_horizontal = expanding
							margin = { 5 5 }
							spacing = 3

							button_standard = {
								size = { 190 25 }
								onclick = "[GuiCouncilPosition.ShowHideTasks]"
								tooltip = "[GuiCouncilPosition.GetShowHideTooltip]"
								down = "[GuiCouncilPosition.ArePotentialTasksVisible]"

								text_single = {
									datacontext = "[ActiveCouncilTask.GetTaskTypeOrDefault]"
									parentanchor = vcenter
									position = { 10 0 }
									text = "[CouncilTaskType.GetName]"
									align = nobaseline
								}

								button_change = {
									name = "show_tasks"
									parentanchor = right|vcenter
									position = { -5 0 }
									alwaystransparent = yes
									size = { 25 25 }
								}
							}
						}
					}

					blockoverride "missing_councillor"
					{
						text_label_center = {
							visible = "[And( Not(Character.IsValid), CouncilWindow.IsPlayerCouncilShown )]"
							parentanchor = bottom|hcenter
							position = { 0 -10 }
							text = "COUNCILLOR_MISSING_VIZIER"
							default_format = "#low;italic"
						}

						text_label_center = {
							visible = "[And( Not(Character.IsValid), CouncilWindow.IsLiegeCouncilShown )]"
							parentanchor = bottom|hcenter
							position = { 0 -10 }
							text = "COUNCILLOR_LIEGE_MISSING_VIZIER"
							default_format = "#low;italic"
							max_width = 250
							fontsize_min = 14
						}
					}
				}

				widget_councillor_item = {
					visible = "[Not( CouncilOwnerHasVizier )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[CouncilWindow.GetCouncillor('councillor_spouse')]"
					datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
					datacontext = "[ActiveCouncilTask.GetPositionType]"
					datacontext = "[ActiveCouncilTask.GetCouncillor]"

					background =  {
						texture = "gfx/interface/skinned/illustrations/council/bg_council_spouse.dds"
						fittype = centercrop
						using = Mask_Rough_Edges
						alpha = 0.8
					}

					background = {
						texture = "gfx/interface/component_masks/mask_vignette.dds"
						color = { 0.15 0.15 0.15 1 }
						alpha = 0.3
					}

					# make spouse portrait unique size, so it doesn't reuse
					# textures from other councilors during hide animation
					blockoverride "portrait_size"
					{
						size = { 260 286 }
					}

					blockoverride "replace_councillor"
					{
						spacer = {
							visible = "[Not(CouncilWindow.IsLiegeCouncilShown)]"
							size = { 5 5 }
						}
					}

					blockoverride "regular_task" {}

					blockoverride "assist_task"
					{
						hbox = {
							visible = "[Character.IsValid]"
							layoutpolicy_horizontal = expanding
							margin = { 5 5 }
							spacing = 3

							button_standard = {
								size = { 190 25 }
								onclick = "[GuiCouncilPosition.ShowHideTasks]"
								tooltip = "[GuiCouncilPosition.GetShowHideTooltip]"
								down = "[GuiCouncilPosition.ArePotentialTasksVisible]"

								text_single = {
									datacontext = "[ActiveCouncilTask.GetTaskTypeOrDefault]"
									parentanchor = vcenter
									position = { 10 0 }
									text = "[CouncilTaskType.GetName]"
									align = nobaseline
								}

								button_change = {
									name = "show_tasks"
									parentanchor = right|vcenter
									position = { -5 0 }
									alwaystransparent = yes
									size = { 25 25 }
								}
							}
						}
					}

					blockoverride "missing_councillor"
					{
						text_label_center = {
							visible = "[And( Not(Character.IsValid), CouncilWindow.IsPlayerCouncilShown )]"
							parentanchor = bottom|hcenter
							position = { 0 -10 }
							text = "COUNCILLOR_MISSING_SPOUSE"
							default_format = "#low;italic"
						}

						text_label_center = {
							visible = "[And( Not(Character.IsValid), CouncilWindow.IsLiegeCouncilShown )]"
							parentanchor = bottom|hcenter
							position = { 0 -10 }
							text = "COUNCILLOR_LIEGE_MISSING_SPOUSE"
							default_format = "#low;italic"
							max_width = 250
							fontsize_min = 14
						}
					}
				}

				widget_councillor_item = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[CouncilWindow.GetCouncillor('councillor_court_chaplain')]"
					datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
					datacontext = "[ActiveCouncilTask.GetPositionType]"
					datacontext = "[ActiveCouncilTask.GetCouncillor]"
					name = "tutorial_court_chaplain"

					datacontext = "[GetIllustration( 'religion_interior' )]"

					background =  {
						texture = "[Illustration.GetTexture( ActiveCouncilTask.GetCouncillor.GetFaith.MakeScope )]"
						fittype = centercrop
						alpha = 0.7
						using = Mask_Rough_Edges
					}

					background = {
						texture = "gfx/interface/component_masks/mask_vignette.dds"
						color = { 0.15 0.15 0.15 1 }
						alpha = 0.3
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 0 }
				spacing = 5

				widget_councillor_item = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[CouncilWindow.GetCouncillor('councillor_chancellor')]"
					datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
					datacontext = "[ActiveCouncilTask.GetPositionType]"
					datacontext = "[ActiveCouncilTask.GetCouncillor]"

					background =  {
						texture = "gfx/interface/skinned/illustrations/council/bg_council_chancellor.dds"
						fittype = centercrop
						alpha = 0.6
						using = Mask_Rough_Edges
					}

					background = {
						texture = "gfx/interface/component_masks/mask_vignette.dds"
						color = { 0.15 0.15 0.15 1 }
						alpha = 0.3
					}
				}

				widget_councillor_item = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[CouncilWindow.GetCouncillor('councillor_steward')]"
					datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
					datacontext = "[ActiveCouncilTask.GetPositionType]"
					datacontext = "[ActiveCouncilTask.GetCouncillor]"

					background =  {
						texture = "gfx/interface/skinned/illustrations/council/bg_council_steward.dds"
						fittype = centercrop
						using = Mask_Rough_Edges
						alpha = 0.7
					}

					background = {
						texture = "gfx/interface/component_masks/mask_vignette.dds"
						color = { 0.15 0.15 0.15 1 }
						alpha = 0.3
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 0 }
				margin_bottom = 5
				spacing = 5

				widget_councillor_item = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[CouncilWindow.GetCouncillor('councillor_marshal')]"
					datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
					datacontext = "[ActiveCouncilTask.GetPositionType]"
					datacontext = "[ActiveCouncilTask.GetCouncillor]"

					background =  {
						texture = "gfx/interface/skinned/illustrations/council/bg_council_marshal.dds"
						fittype = centercrop
						using = Mask_Rough_Edges
						alpha = 0.7
					}

					background = {
						texture = "gfx/interface/component_masks/mask_vignette.dds"
						color = { 0.15 0.15 0.15 1 }
						alpha = 0.3
					}
				}

				widget_councillor_item = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[CouncilWindow.GetCouncillor('councillor_spymaster')]"
					datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
					datacontext = "[ActiveCouncilTask.GetPositionType]"
					datacontext = "[ActiveCouncilTask.GetCouncillor]"

					background =  {
						texture = "gfx/interface/skinned/illustrations/council/bg_council_spymaster.dds"
						fittype = centercrop
						using = Mask_Rough_Edges
						alpha = 0.7
					}

					background = {
						texture = "gfx/interface/component_masks/mask_vignette.dds"
						color = { 0.15 0.15 0.15 1 }
						alpha = 0.3
					}
				}
			}
		}

		expand = {
			layoutpolicy_vertical = growing
		}
	}

	type council_line_item = vbox {
		datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
		datacontext = "[ActiveCouncilTask.GetTaskTypeOrDefault]"
		datacontext = "[ActiveCouncilTask.GetCouncillor]"
		layoutpolicy_horizontal = expanding

		button_text = {
			layoutpolicy_horizontal = expanding
			block "button" { }

			button = {
				size = { 100% 100% }
				onclick = "[GuiCouncilPosition.SelectCouncillor]"
				enabled = "[GuiCouncilPosition.CanSelectCouncillor]"
				visible = "[And(GuiCouncilPosition.CanPotentiallySelectCouncillor, Not(Character.IsValid))]"
				block "button" { }
			}
			blockoverride "text" {
				raw_text = "[AddTextIf(Not(Character.IsValid), 'No ')][ActiveCouncilTask.GetPositionName],"
			}

			blockoverride "extra" {
				spacing = 3

				text_single = {
					visible = "[And(GuiCouncilPosition.CanPotentiallySelectCouncillor, Not(Character.IsValid))]"
					raw_text = "Appoint."
				}

				flowcontainer = {
				    ignoreinvisible = yes
					spacing = 3
					visible = "[Character.IsValid]"
					text_single = {
						visible = "[ActiveCouncilTask.HasMainSkill]"
						raw_text = "[GuiCouncilPosition.GetMainSkillItem.GetValue] skill."
					}
					text_single = {
						raw_text = "Task,"
					}
					text_single = {
						visible = "[CouncilTaskType.IsProgressDefined]"
						raw_text = "[ActiveCouncilTask.GetProgress|0]%"
					}
					text_single = {
						raw_text = "[CouncilTaskType.GetName]"
						tooltip = "[CouncilTaskType.GetEffectDesc( ActiveCouncilTask.GetScopes )]"
					}

					dot_l = {
						visible = "[StringIsEmpty(ActiveCouncilTask.GetTaskTarget)]"
					}
					text_single = {
						visible = "[Not(StringIsEmpty(ActiveCouncilTask.GetTaskTarget))]"
						raw_text = "[ActiveCouncilTask.GetTaskTarget]."
					}

				}
			}
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			using = char_click
			visible = "[Character.IsValid]"

			blockoverride "pre" {
				spacing = 3
				text_single = {
					visible = "[Character.IsMyPowerfulVassal]"
					raw_text = "Powerful vassal,"
				}
				text_single = {
					raw_text = "[Character.GetTitledFirstNameOrMeNoTooltip]."
				}
				text_single = {
					raw_text = "[Character.GetOpinionOf(GetPlayer)|=] opinion."
				}
				text_single = {
					visible = "[Character.IsMyPowerfulVassal]"
					raw_text = "[Character.GetMilitaryStrengthText] soldiers."
				}
				text_single = {
					visible = "[Character.IsTheocraticLesseeOf( GetPlayer )]"
					raw_text = "[Select_CString( And( Character.TheocraticLesseeHasApprovalStatus, Character.TheocraticLesseeApprovesOfLiege ), 'Endorses you.', 'Does not endorse you.' )]"
					tooltip = "[Character.GetTheocraticLesseeApprovalTooltip]"
				}
			}
		}
	}
}
