
######################################################
################### MILTARY VIEW #####################
######################################################

window = {
	name = "military_view"
	widgetid = "military_view"
	datacontext = "[GetVariableSystem]"
	datacontext = "[GetPlayer]"

	layer = windows_layer
	movable = no

	using = Window_Size_MainTab
	size = { 100% 100% }
	alwaystransparent = yes

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab
		on_start = "[GetVariableSystem.Set( 'military_view_mercenaries', 'mercenaries' )]"

		# start_sound = {
		# 	soundeffect = "event:/SFX/UI/Character/Lifestyle/sfx_ui_character_lifestyle_martial_lifestyle"
		# }
		# start_sound = {
		# 	soundeffect = "event:/SFX/UI/Generic/rightTab/sfx_ui_window_rightTab_Military"
		# }
	}

	state = {
		name = tabs
		trigger_when = "[Not(GetVariableSystem.Exists('military_view_tabs'))]"
		on_finish = "[GetVariableSystem.Set( 'military_view_tabs', 'armies' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
	}

	widget = {
		using = Window_Size_CharacterList
		background = { using = Background_Area_Border_Solid }
		visible = "[Not(GetVariableSystem.Exists('ocr'))]"

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			using = ocr_margins

			error_button = {
				layoutpolicy_horizontal = expanding
			}

			### WINDOW CONTENT
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				# using = Window_Margins
				# margin_bottom = 30
				header_pattern = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text" {

					}

					blockoverride "illustration_texture" {
						# texture = "gfx/interface/illustrations/window_headers/header_military.dds"
					}

					blockoverride "button_close" {
						onclick = "[MilitaryView.Close]"
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3
						datacontext = "[MilitaryView.GetMilitaryItem]"
						datacontext = "[MilitaryItem.GetComposition]"

						text_single = {
							raw_text = "[Localize('MILITARY_VIEW')],"
						}

						text_single = {
							raw_text = "[Localize(Get('military_view_tabs'))] tab,"
						}

						hbox = {
							spacing = 3
							visible = "[And(Has('military_view_tabs', 'armies'), Isnt('men_at_arms'))]"
							text_single = {
								raw_text = "[ArmyComposition.GetSoldierCountString] soldiers,"
							}

							text_single = {
								visible = "[ArmyComposition.HasRaisedSoldiers]"
								raw_text = "[ArmyComposition.GetUnraisedNumberOfSoldiers] unraised,"
							}

							text_single = {
								raw_text = "KNIGHTS_CURRENT_MAX"
							}

							text_single = {
								raw_text = "knights."
							}
						}

						hbox = {
							visible = "[Has('military_view_tabs', 'mercenaries')]"
							text_single = {
								raw_text = "[GetDataModelSize(MilitaryView.GetAllMercenaries)]"
							}
						}

						expand = { }
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					# visible = "[Isnt('rally_point_window')]"
					margin_left = 5

					text_single = {
						raw_text = "Tabs:"
					}

					button_text = {
						onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'armies' )]"
						shortcut = speed_1
						blockoverride "pre" {
							text_single = {
								raw_text = "1, "
							}
						}
						blockoverride "text" {
							raw_text = "Armies"
						}
						blockoverride "dot" {

						}
					}

					button_text = {
						onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'mercenaries' )]"
						shortcut = speed_2

						blockoverride "pre" {
							text_single = {
								raw_text = "2, "
							}
						}
						blockoverride "text" {
							raw_text = "MV_MERCENARIES"
						}
					}

					button_text = {
						onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'holy_orders' )]"
						shortcut = speed_3

						blockoverride "pre" {
							text_single = {
								raw_text = "3,"
							}
						}
						blockoverride "extra" {
							text_single = {
								raw_text = "[GetDataModelSize(MilitaryView.GetAllHolyOrders)],"
							}
						}

						blockoverride "text" {
							raw_text = "MV_HOLY_ORDERS"
						}
					}

					button_text = {
						onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'adventurers' )]"
						shortcut = speed_4

						blockoverride "pre" {
							text_single = {
								raw_text = "4,"
							}
						}
						blockoverride "extra" {

							text_single = {
								raw_text = "[GetDataModelSize(MilitaryView.GetAllHireableRulers)],"
							}
						}

						blockoverride "text" {
							raw_text = "adventurers"
						}
					}

					button_text = {
						onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'ongoing_wars' )]"
						shortcut = speed_5
						layoutpolicy_horizontal = expanding

						blockoverride "text" {
							raw_text = "5, All ongoing wars."
						}

						onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					}
					expand = { }
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Isnt('men_at_arms')]"

					flowcontainer = {
						layoutpolicy_horizontal = expanding
						spacing = 3
						direction = vertical
						visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'armies' )]"

						ignoreinvisible = yes

						button_text = {
							shortcut = map_mode_16
					    blockoverride "text" {
				        raw_text = "RAISE_ALL"
					    }
							blockoverride "disabled" {
								visible = "[Not(PlayerCanRaiseAnyRallyPoint)]"
							}
							name = "tutorial_highlight_raise_troops_button"
							datacontext = "[GetPlayer]"
							onclick = "[PlayerRaiseAllRegiments]"
							enabled = "[PlayerCanRaiseAnyRallyPoint]"
							onclick = "[MilitaryView.Close]"
							# onclick = "[OpenGameView('outliner')]"
							clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
							tooltip = "[GetPlayerRaiseAllTooltip]"
							blockoverride "extra" {
								comma = {}
								text_single = {
									visible = "[PlayerCanRaiseAnyRallyPoint]"
									raw_text = "Control E,"
								}
								text_single = {
									raw_text = "tooltip"
								}
							}
						}

						button_text = {
					    blockoverride "text" {
				        raw_text = "Click with Control Slash to raise without splitting."
					    }
							datacontext = "[GetPlayer]"
							onclick = "[PlayerRaiseAllRegiments]"
							visible = "[PlayerCanRaiseAnyRallyPoint]"
							onclick = "[MilitaryView.Close]"
							# onclick = "[OpenGameView('outliner')]"
							clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
						}

						button_text = {
						    blockoverride "text" {
						        raw_text = "RAISE_ALL_RAIDERS"
						    }
							blockoverride "disabled" {
								visible = "[Not(PlayerCanRaiseAnyRaiderRallyPoint)]"
							}
							shortcut = army_split_half
							datacontext = "[GetPlayer]"
							onclick = "[PlayerRaiseAllRaidRegiments]"
							# onclick = "[OpenGameView('outliner')]"
							visible = "[Character.CanRaid]"
							enabled = "[PlayerCanRaiseAnyRaiderRallyPoint]"
							tooltip = "[GetPlayerRaiseAllRaidersTooltip]"
							onclick = "[MilitaryView.Close]"
							clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
							blockoverride "extra" {
								text_single = {
									margin_left = -3
									raw_text = ", F"
								}
							}
							blockoverride "dot" {

							}
						}

						button_text = {
						    blockoverride "text" {
						        raw_text = "DISBAND_ALL"
						    }
							blockoverride "extra" {
								text_single = {
									margin_left = -3
									raw_text = ", j"
								}
							}
							shortcut = army_disband

							blockoverride "disabled" {
								visible = "[Not(PlayerCanDisbandAll)]"
							}
							datacontext = "[GetPlayer]"

							onclick = "[PlayerDisbandAll]"
							enabled = "[PlayerCanDisbandAll]"
							tooltip = "[GetDisbandAllTooltip]"
							clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_unit_army_disband"
							blockoverride "dot" {
							}
						}
						button_text = {
							shortcut = character_finder
							layoutpolicy_horizontal = expanding
							onclick = "[MilitaryView.ShowKnights]"
							datacontext = "[MilitaryItem.GetComposition]"

							blockoverride "text" {
								raw_text = "Manage knights, C."
							}
						}
					}

					vbox = {
						name = "rally_points"
						layoutpolicy_horizontal = expanding
						visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'armies' )]"

						button_text = {
							layoutpolicy_horizontal = expanding
							onclick = "[GetVariableSystem.Toggle('rally_points')]"
							blockoverride "text" {
								raw_text = "[GetDataModelSize(MilitaryView.GetRallyPoints)]"
								margin_right = 2
							}
						    blockoverride "extra" {
								spacing = 3
								text_single = {
									raw_text = "Rally points,"
								}
								text_single = {
									visible = "[Not(GetVariableSystem.Exists('rally_points'))]"
									raw_text = "Click to hide."
								}
								text_single = {
									visible = "[GetVariableSystem.Exists('rally_points')]"
									raw_text = "Click to show."
								}
						    }
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(GetVariableSystem.Exists('rally_points'))]"

							dynamicgridbox = {
								name = "rally_point_list"
								datamodel = "[MilitaryView.GetRallyPoints]"
								# flipdirection = yes
								layoutpolicy_horizontal = expanding

								item = {
									button_text = {
										datacontext = "[RallyPointItem.GetRallyPoint]"
										datacontext = "[RallyPoint.GetProvince]"
										button = {
											visible = "[IsIndexFirst]"
											enabled = "[Not(IsGameViewOpen('accolade_view'))]"
											shortcut = map_mode_1
											onclick = "[RallyPointItem.OnClick]"
										}
										blockoverride "text" {
											raw_text = "[Province.GetCounty.GetTitle.GetNameNoTierNoTooltip], [Province.GetNameNoTooltip],"
										}
										blockoverride "extra" {
											spacing = 3
											text_single = {
												visible = "[ObjectsEqual(Province.GetID, GetPlayer.GetCapitalLocation.GetID)]"
												raw_text = "your capital"
											}
											text_single = {
												visible = "[Not(ObjectsEqual(Province.GetID, GetPlayer.GetCapitalLocation.GetID))]"
												raw_text = "AnyProvinceDistance"
											}
											text_single = {
												visible = "[Not(ObjectsEqual(Province.GetID, GetPlayer.GetCapitalLocation.GetID))]"
												raw_text = "AnyProvinceDirection"
											}
											text_single = {
												margin_left = -3
												visible = "[IsIndexFirst]"
												raw_text = ", E"
											}
											dot = { margin_left = -3 }
										}
										onclick = "[RallyPointItem.OnClick]"
									}
								}
							}

							button_text = {
								blockoverride "text" {
									raw_text = "Add Rally Point."
								}
								layoutpolicy_horizontal = expanding
								visible = "[MilitaryView.CanAddRallyPoint]" #TODO
								onclick = "[MilitaryView.OnAddRallyPoint]"
								# tooltip = "[MilitaryView.GetAddRallyPointTooltip]"
							}

							# expand = { }
						}
					}
				}


				vbox = {
					name = "tab_your_armies"
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'armies' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					scrollbox = {
						name = "scrollbox_troops"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding


						blockoverride "scrollbox_content" {
							datacontext = "[MilitaryView.GetMilitaryItem]"

							vbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5
								vbox = {
									datacontext = "[MilitaryItem.GetComposition]"
									layoutpolicy_horizontal = expanding
									tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
									ignoreinvisible = no
									visible = "[Isnt('men_at_arms')]"
									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 3
										name = "tutorial_highlight_soldiers_total"

										text_single = {
											text = "MV_TOTAL_SOLDIERS"
										}

										text_single = {
											raw_text = "[ArmyComposition.GetSoldierCountString]"
										}

										text_single = {
											raw_text = "[ArmyComposition.GetArmyQualityName]."
										}

										expand = { }
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 3
										visible = "[ArmyComposition.HasRaisedSoldiers]"
										tooltip = "[ArmyComposition.GetUnraisedArmyCompositionTooltip]"

										text_single = {
											text = "MV_UNRAISED_SOLDIERS"
										}

										text_single = {
											text = "[ArmyComposition.GetUnraisedNumberOfSoldiers]"
										}

										text_single = {
											raw_text = "[ArmyComposition.GetUnraisedArmyQualityName]."
										}
										expand = { }
									}

								}

								vbox = {
									name = "maa_area"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									vbox = {
										layoutpolicy_horizontal = expanding
										name = "heading"
										button_text = {
											layoutpolicy_horizontal = expanding
											onclick = "[MilitaryView.ShowLevies]"
											datacontext = "[MilitaryItem.GetComposition]"
											blockoverride "text" {
												raw_text = "Levies [ArmyComposition.GetLeviesCountString]"
												align = left
											}
											blockoverride "extra" {
												text_single = {
													text = MV_LEVY_MAINTENANCE
												}
												text_single = {
													raw_text = "text"
													visible = "[NotEqualTo_int32(ArmyComposition.GetCurrentNumberOfLevies, ArmyComposition.GetMaxNumberOfLevies)]"
												}
											}
											blockoverride "dot" {

											}
										}

										button_text = {
											layoutpolicy_horizontal = expanding
											shortcut = map_mode_6
											onclick = "[Toggle('men_at_arms')]"

											blockoverride "extra" {
												text_single = {
													text = "BANNER_MEN_AT_ARMS_LABEL"
												}

												text_single = {
													raw_text = "[MilitaryView.GetMAACountAndCapString],"
													tooltip = "[MilitaryView.GetMAACountAndCapTooltip]"
												}
												text_single = {
													raw_text = "Control A."
												}
											}
										}

										button_text = {
											shortcut = map_mode_11
											layoutpolicy_horizontal = expanding
											blockoverride "disabled" {
												visible = "[Not(PlayerCanRaiseAnyMenAtArmsRallyPoint)]"
											}
									    blockoverride "text" {
									        raw_text = "Raise all men-at-arms, Shift E."
									    }
											visible = "[Not(IsDataModelEmpty(MilitaryItem.GetOwnedMaa))]"
											using = Animation_ShowHide_Standard

											name = "raise_all_men_at_arms"
											datacontext = "[GetPlayer]"
											onclick = "[PlayerRaiseAllMenAtArmsRegiments]"
											enabled = "[PlayerCanRaiseAnyMenAtArmsRallyPoint]"

											tooltip = "[GetPlayerRaiseAllMenAtArmsTooltip]"
											using = tooltip_se
											clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
										}
									}

									button_text = {
										layoutpolicy_horizontal = expanding
										shortcut = map_mode_2
										onclick = "[MilitaryItem.OnClick]"
										blockoverride "disabled" {
											visible = "[Not(MilitaryItem.CanCreateAnyMAAType)]"
										}
										blockoverride "text" {
											raw_text = "ADD_MEN_AT_ARMS_LABEL"
										}
										blockoverride "extra" {
											comma = {}
											text_single = {
												raw_text = "T."
											}
										}
									}

									button = {
										visible = "[Is('men_at_arms')]"
										shortcut = close_window
										onclick = "[Clear('men_at_arms')]"
									}

									vbox = { # MAA
										datamodel = "[MilitaryItem.GetOwnedMaa]"
										layoutpolicy_horizontal = expanding
										visible = "[Not(GetVariableSystem.Exists('ocr'))]"
										spacing = 3

										item = {
											vbox = {
												layoutpolicy_horizontal = expanding
												datacontext = "[Regiment.GetMAAType]"
												datacontext = "[Regiment.GetOriginProvince]"
												datacontext = "[GetNullLandedTitle]"

												button_text = {
													layoutpolicy_horizontal = expanding
													onclick = "[Regiment.ToggleMaaView]"

													blockoverride "num" {
														visible = "[Is('men_at_arms')]"
													}
													shortcuts_list = {
														visible = "[Is('men_at_arms')]"
														blockoverride "click" {
															onclick = "[Regiment.ToggleMaaView]"
														}
													}

													blockoverride "text" {
														text = "[Regiment.BuildCurrentRegimentCountString|V]"
													}

													blockoverride "extra" {
														text_single = {
															raw_text = "[Regiment.GetName],"
														}

														text_single = {
															visible = "[And( Not( Regiment.GetOriginProvince.IsValid ), GetPlayer.HasDomainProvincesForMAAOrigin )]"
															raw_text = "[Localize('MAA_UNSTATIONED')]!"
														}

														text_single = {
															visible = "[And( Not(Regiment.IsRaised), GetPlayer.IsAtWar)]"
															raw_text = "[Localize('MAA_UNRAISED')]."
														}

														text_single = {
															visible = "[Not(And( Not(Regiment.IsRaised), GetPlayer.IsAtWar))]"
															raw_text = "[Localize('MAA_CURRENT_SIZE')],"
														}

														text_single = {
															text = "TOTAL_MAA_COST"
															tooltip = "TOTAL_MAA_COST_TOOLTIP"
														}

														dot = { }
													}
												}

												siege_stat = {
												}

												hbox_maa_stats = {
												}
											}
										}
									}
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[Isnt('men_at_arms')]"
									vbox = {
										visible = "[Not(IsDataModelEmpty(MilitaryView.GetEventTroops))]"
										layoutpolicy_horizontal = expanding

										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "pre" {
												text_single = {
													raw_text = "[GetDataModelSize(MilitaryView.GetEventTroops)]"
													margin_right = 3
												}
											}
											blockoverride "extra" {
												text_single = {
													raw_text = ", click to [Select_CString(GetVariableSystem.Exists('special_troops'), 'Show', 'Hide')]."
												}
											}
										    blockoverride "text" {
										        raw_text = "MILITARY_VIEW_EVENT_TROOPS"
												align = left
										    }
											onclick = "[GetVariableSystem.Toggle('special_troops')]"
										}

										vbox = {
											visible = "[Not(GetVariableSystem.Exists('special_troops'))]"
											datamodel = "[MilitaryView.GetEventTroops]"
											layoutpolicy_horizontal = expanding

											item = {
												hbox_event_troop_item_ocr = {
													layoutpolicy_horizontal = expanding
												}
											}
										}
									}

									vbox = {
										visible = "[Or( Not(IsDataModelEmpty(MilitaryView.GetHiredMercenaries)), Not(IsDataModelEmpty(MilitaryView.GetHiredHolyOrders)) )]"
										layoutpolicy_horizontal = expanding

										text_single = {
											layoutpolicy_horizontal = expanding
											text = "MILITARY_VIEW_HIRED_TROOPS"
										}

										vbox = {
											datamodel = "[MilitaryView.GetHiredMercenaries]"
											layoutpolicy_horizontal = expanding


											item = {
												button_mercenary_list_item_ocr = {
													blockoverride "your" { }
													datacontext = "[HiredTroopItem.GetMercenaryCompany]"
													layoutpolicy_horizontal = expanding

													blockoverride "HiredTroopMenAtArmsTypesDataModel"
													{
														datamodel = "[HiredTroopItem.GetRegiments]"
													}
												}
											}
										}

										vbox = {
											datamodel = "[MilitaryView.GetHiredHolyOrders]"
											layoutpolicy_horizontal = expanding

											item = {
												button_holyorder_list_item_ocr = {
													datacontext = "[HiredTroopItem.GetHolyOrder]"
													layoutpolicy_horizontal = expanding
													blockoverride "your" { }

													blockoverride "HiredTroopMenAtArmsTypesDataModel"
													{
														datamodel = "[HiredTroopItem.GetRegiments]"
													}
												}
											}
										}
									}
								}
							}
						}
					}

					vbox = {
						name = "footer"
						layoutpolicy_horizontal = expanding

						margin = { 10 0 }

						vbox = {
							layoutpolicy_horizontal = expanding
							# margin = { 5 5 }
							spacing = 2

							background = {
								using = Background_Area
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not( GetPlayer.GetGovernment.HasRule( 'conditional_maa_refill' ))]"

								button_text = {
									onclick = "[MilitaryView.OnMilitaryReinforcementClick]"
								    blockoverride "text" {
											raw_text = "MONTHLY_REINFORCEMENT_COST_LABEL"
								    }

									blockoverride "pre" {
										# tooltip = "[MilitaryView.GetMilitaryReinforcementCostTooltip]"
										text_single = {
											raw_text = "[Select_CString(MilitaryView.IsMilitaryReinforcementsEnabled, 'Disable', 'Enable')]"
										}
									}
									blockoverride "dot" {

									}
								}

								expand = { }
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[GetPlayer.GetGovernment.HasRule( 'conditional_maa_refill' )]"

								text_multi_wide = {
									text = "ADVENTURER_MAINTENANCE_INFO"
								}

								expand = {}
							}


							vbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									raw_text = "Maintenance is increased due to embarked armies."
									visible = "[MilitaryView.HasEmbarkedArmies]"
									layoutpolicy_horizontal = expanding
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5

									text_single = {
										text = "MONTHLY_MAINTENANCE_LABEL"
									}

									text_single = {
										datacontext = "[MilitaryView.GetGoldMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPrestigeMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPietyMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										text = "COST_RESULT_NOTHING"
										visible = "[And(EqualTo_CFixedPoint(MilitaryView.GetGoldMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ,And( EqualTo_CFixedPoint( MilitaryView.GetPrestigeMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0'), EqualTo_CFixedPoint(MilitaryView.GetPietyMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ) ) ]"

									}
									expand = { }
								}

								hbox = {
									visible = "[MilitaryView.HasAnyRaisedMilitaryExpenses]"
									layoutpolicy_horizontal = expanding
									spacing = 4

									text_single = {
										text = "MONTHLY_MAX_MAINTENANCE_LABEL"
										maximumsize = { 400 -1 }
										tooltip = "MONTHLY_MAX_MAINTENANCE_TT"
										align = left
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedGoldMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = left

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "MONTHLY_MAX_MAINTENANCE_VIEW"
										maximumsize = { 400 -1 }
										default_format = "#weak"
										align = left
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPrestigeMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPrestigeMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = left

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPietyMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPietyMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = left

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = { }
										}
									}

									dot = { margin_left = -4 }
									expand = { }
								}
							}
						}
					}
				}

				button_text = {
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'mercenaries' )]"
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "In [Select_CString(GetVariableSystem.Exists('merc_sorting'), 'descending', 'ascending')] order."
					}
					onclick = "[GetVariableSystem.Toggle('merc_sorting')]"
				}

				scrollbox = {
					name = "tab_mercenaries"
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'mercenaries' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					blockoverride "scrollbox_content" {
						text_single = {
							visible = "[IsDataModelEmpty(MilitaryView.GetAllMercenaries)]"
							raw_text = "No entries, try reloading in a second."
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[DataModelHasItems(MilitaryView.GetAllMercenaries)]"

							state = {
								name = _show
								using = Sound_WindowShow_Standard
							}

							vbox = {
								name = "tutorial_highlight_mercenary_list_item"
								datamodel = "[MilitaryView.GetAllMercenaries]"
								visible = "[Not(GetVariableSystem.Exists('merc_sorting'))]"
								layoutpolicy_horizontal = expanding
								item = {
									vbox = {
										layoutpolicy_horizontal = expanding

										button_mercenary_list_item_ocr = {
											datacontext = "[HiredTroopItem.GetMercenaryCompany]"
											visible = "[MercenaryCompany.IsHired]"
											layoutpolicy_horizontal = expanding
											size = { 600 60 }

											blockoverride "HiredTroopMenAtArmsTypesDataModel"
											{
												datamodel = "[HiredTroopItem.GetRegiments]"
											}
										}

										button_mercenary_list_item_ocr = {
											datacontext = "[HiredTroopItem.GetMercenaryCompany]"
											visible = "[Not(MercenaryCompany.IsHired)]"
											layoutpolicy_horizontal = expanding
											size = { 600 60 }

											blockoverride "HiredTroopMenAtArmsTypesDataModel"
											{
												datamodel = "[HiredTroopItem.GetRegiments]"
											}
										}

									}
								}
							}

							vbox = {
								datamodel = "[MilitaryView.GetAllMercenaries]"
								visible = "[GetVariableSystem.Exists('merc_sorting')]"
								layoutpolicy_horizontal = expanding
								bottomtotop = yes
								item = {
									vbox = {
										layoutpolicy_horizontal = expanding
										button_mercenary_list_item_ocr = {
											datacontext = "[HiredTroopItem.GetMercenaryCompany]"
											visible = "[MercenaryCompany.IsHired]"
											layoutpolicy_horizontal = expanding
											size = { 600 60 }

											blockoverride "HiredTroopMenAtArmsTypesDataModel"
											{
												datamodel = "[HiredTroopItem.GetRegiments]"
											}
										}

										button_mercenary_list_item_ocr = {
											datacontext = "[HiredTroopItem.GetMercenaryCompany]"
											visible = "[Not(MercenaryCompany.IsHired)]"
											layoutpolicy_horizontal = expanding
											size = { 600 60 }

											blockoverride "HiredTroopMenAtArmsTypesDataModel"
											{
												datamodel = "[HiredTroopItem.GetRegiments]"
											}
										}
									}
								}
							}
						}
					}
				}

				scrollbox = {
					name = "tab_holy_orders"
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'holy_orders' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}


					blockoverride "scrollbox_content" {
						vbox = {
							datamodel = "[MilitaryView.GetAllHolyOrders]"
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding
								name = "hired_troops_view_holy_orders_header_item"
								text = "HIRED_TROOPS_VIEW_LIST_HO_HEADER"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								visible = "[And( Not(MilitaryView.CanUseAnyHolyOrder), DataModelHasItems(MilitaryView.GetAllHolyOrders))]"
								text = "HOLY_ORDER_MUST_BE_AT_WAR_WITH_BAD_FAITH"
							}

							hbox = {
								visible = "[Not(DataModelHasItems(MilitaryView.GetAllHolyOrders ))]"
								layoutpolicy_horizontal = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "HIRED_TROOPS_VIEW_LIST_HO_NO_HOS"
									default_format = "#weak"
								}
							}

							button_decision_entry_text = {
								name = "hired_troops_view_create_holy_order_item"
								datacontext = "[GetDecisionWithKey('create_holy_order_decision')]"
								visible = "[Decision.IsShownForPlayer]"
								layoutpolicy_horizontal = expanding
								onclick = "[OpenGameViewData( 'decision_detail', Decision.Self)]"
							}

							item = {
								vbox = {
									layoutpolicy_horizontal = expanding

									button_holyorder_list_item_ocr = {
										visible = "[Not(And(HolyOrder.IsHired, HolyOrder.IsPledgedToGreatHolyWar))]"

										datacontext = "[HiredTroopItem.GetHolyOrder]"
										layoutpolicy_horizontal = expanding

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}

									button_holyorder_list_item_ocr = {
										visible = "[And(HolyOrder.IsHired, HolyOrder.IsPledgedToGreatHolyWar)]"
										datacontext = "[HiredTroopItem.GetHolyOrder]"
										layoutpolicy_horizontal = expanding

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}
								}
							}

						}
					}
				}

				scrollbox = {
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'adventurers' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}


					blockoverride "scrollbox_content" {
						vbox = {
							datamodel = "[MilitaryView.GetAllHireableRulers]"
							layoutpolicy_horizontal = expanding


							hbox = {
								visible = "[Not(DataModelHasItems(MilitaryView.GetAllHireableRulers ))]"
								layoutpolicy_horizontal = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "MV_MERCENARIES_NO_HIREABLE_RULERS_IN_RANGE"
								}
							}
							item = {
								vbox = {
									layoutpolicy_horizontal = expanding

									button_hireable_ruler_item_ocr = {
										visible = "[Not( ObjectsEqual( HiredTroopItem.GetHireableRuler, GetPlayer ) )]"
										layoutpolicy_horizontal = expanding
									}
								}
							}
						}
					}
				}

				#wars
				vbox = {
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'ongoing_wars' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						vbox = {
							layoutpolicy_horizontal = expanding

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Sorted by [GetPlayer.MakeScope.Var('sort_wars').GetFlagName]. Change, hotkey T."
								}
								shortcut = map_mode_2
								onclick = "[GetVariableSystem.Set('war_sorting', 'yes')]"
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							button_text = {
							    blockoverride "text" {
							        raw_text = "Showing [GetPlayer.MakeScope.Var('filter_wars').GetFlagName]. Filter, hotkey F."
							    }
								shortcut = army_split_half
								onclick = "[GetVariableSystem.Set('war_filters', 'yes')]"
							}
							expand = { }
						}

						button_text = {
							layoutpolicy_horizontal = expanding
						    blockoverride "text" {
						        raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('ongoing_wars'))] wars. Refresh the list, Shift E."
						    }
							shortcut = map_mode_11
							onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						}

						scrollbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							blockoverride "scrollbox_margins" {
								margin_top = 20
							}

							blockoverride "scrollbox_content" {
								fixedgridbox = {
									addcolumn = 600
									addrow = 40
									layoutpolicy_horizontal = expanding
									# layoutpolicy_vertical = expanding

									datamodel = "[GetPlayer.MakeScope.GetList('ongoing_wars')]"

									item = {
										widget = {
											datacontext = "[Scope.War]"
											size = { 600 40 }

											vbox = {
												margin_left = 5
												layoutpolicy_horizontal = expanding
												spacing = -6

												hbox = {
													layoutpolicy_horizontal = expanding

													text_single = {
														max_width = 450
														text = "[War.GetName]"
													}

													text_single = {
														raw_text = ", started [GuiScope.SetRoot(War.MakeScope).ScriptValue('war_days_sval')] days ago."
													}
													#
													# text_single = {
													# 	raw_text = "[War.GetStartDate.GetStringShort]."
													# }

													expand = { }
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													spacing = 3


													text_single = {
														raw_text = "[GuiScope.SetRoot(War.MakeScope).ScriptValue('attacker_war_score_sval')|+=0]%,"
													}

													text_single = {
														raw_text = "[GuiScope.SetRoot(War.MakeScope).ScriptValue('total_war_attackers')|0]"
													}

													text_single = {
														raw_text = "versus"
													}

													text_single = {
														raw_text = "[GuiScope.SetRoot(War.MakeScope).ScriptValue('total_war_defenders')|0]"
													}

													text_single = {
														raw_text = "men."
													}

													expand = { }
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													spacing = 3
													visible = no


													block "attackers" {
														widget = {
															size = { 200 22 }
															scissor = yes

															flowcontainer = {
																datamodel = "[War.MakeScope.GetList('allies')]"
																item = {
																	char_name = {
																		datacontext = "[Scope.GetCharacter]"
																		blockoverride "text" {
																			raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip],"
																		}
																		blockoverride "extra" {
																			text_single = {
																				raw_text = "[Character.GetMilitaryStrengthText]."
																			}
																		}
																	}
																}
															}
														}
													}


													expand = { }
												}
											}

											button = {
												size = { 100% 100% }
												onclick = "[OpenGameViewData( 'war_overview',  War.GetID )]"
											}
										}
									}
								}
							}
						}

						expand = { }
					}
				}
			}
		}

		vbox = {
			using = Window_Background_No_Edge
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			visible = "[GetVariableSystem.Exists('war_sorting')]"
			margin = { 5 0 }
			alwaystransparent = no

			button = {
				onclick = "[GetVariableSystem.Clear('war_sorting')]"
				shortcut = close_window
				shortcut = map_mode_2
			}

			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				spacing = 3

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Sort by:"
					margin_bottom = 5
					background = { using = Background_Area_Border_Solid }
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Total soldiers."
					}
					onclick = "[GetScriptedGui('sort_wars_total').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_sorting')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Sort by date."
					}
					onclick = "[GetScriptedGui('sort_wars_time').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_sorting')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Amount of attackers."
					}
					onclick = "[GetScriptedGui('sort_wars_attackers').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_sorting')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Amount of defenders."
					}
					onclick = "[GetScriptedGui('sort_wars_defenders').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_sorting')]"
				}

				expand = { }
			}
		}

		vbox = {
			using = Window_Background_No_Edge
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			visible = "[GetVariableSystem.Exists('war_filters')]"
			margin = { 5 5 }
			alwaystransparent = no

			button = {
				onclick = "[GetVariableSystem.Clear('war_filters')]"
				shortcut = close_window
				shortcut = army_split_half
			}

			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				spacing = 3

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Filter by:"
					margin_bottom = 5
					background = { using = Background_Area_Border_Solid }
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Show all."
					}

					onclick = "[GetScriptedGui('filter_wars_all').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_filters')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('vassal_wars')] Vassal wars."
					}
					onclick = "[GetScriptedGui('filter_wars_your_realm').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_filters')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					visible = "[Not(GetPlayer.IsIndependentRuler)]"
					blockoverride "text" {
						raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('realm_wars')] wars in your realm."
					}
					onclick = "[GetScriptedGui('filter_wars_top_liege_realm').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_filters')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('holy_wars')] Holy wars."
					}
					onclick = "[GetScriptedGui('filter_wars_holy_wars').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_filters')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					using = agot_hide
					blockoverride "text" {
						raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('great_holy_wars')] Crusades."
					}
					onclick = "[GetScriptedGui('filter_wars_great_holy_wars').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_filters')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('civil_wars')] Civil wars."
					}
					onclick = "[GetScriptedGui('filter_wars_civil_wars').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_filters')]"
				}

				expand = { }

			}
		}

	}

	widget = {
		using = Window_Size_MainTab
		parentanchor = right
		visible = "[GetVariableSystem.Exists('ocr')]"

		military_old = {
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################


types OCR {
	type hbox_event_troop_item_ocr = vbox {
		spacing = -6

		hbox  = {
			name = "header"
			layoutpolicy_horizontal = expanding


			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 2

				button_text = {
					blockoverride "text" {
						raw_text = "MILITARY_VIEW_EVENT_TROOPS_RAISE"
						align = left
					}
					onclick = "[OnRaiseEventTroops(MilitaryViewEventTroop.Self)]"
					# visible = "[MilitaryViewEventTroop.CanBeRaised]"
				}

				soldiers_and_quality_small_text = {
					margin_top = 1
					datacontext = "[MilitaryViewEventTroop.GetComposition]"
					blockoverride "background" {
						background = {
							using = Background_Area
							margin = { 3 0 }
						}
					}
				}

				text_single = {
					raw_text = "Levies."
					visible = "[IsDataModelEmpty(MilitaryViewEventTroop.GetRegiments)]"
				}

				text_single = {
					raw_text = "[MilitaryViewEventTroop.GetName]."
				}

				expand = { }
			}
		}

		vbox = {
			margin = { 5 5 }
			layoutpolicy_horizontal = expanding

			hbox = {
				name = "menatarms"
				layoutpolicy_horizontal = expanding
				hbox = {
					name = "regiment_types"
					datamodel = "[MilitaryViewEventTroop.GetRegiments]"
					layoutpolicy_vertical = expanding
					margin_left = 5
					spacing = 3
					item = {
						text_single = {
							raw_text = "[Regiment.GetMAAType.GetName], "
						}
					}
				}

				expand = { }
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				text_single = {
					visible = "[Not(MilitaryViewEventTroop.IsInheritable)]"

					text = "MILITARY_VIEW_EVENT_TROOPS_NOT_INHERITABLE"
				}

				text_single = {
					visible = "[MilitaryViewEventTroop.IsInheritable]"

					text = "MILITARY_VIEW_EVENT_TROOPS_INHERITABLE"
				}
				dot = { }
				expand = { }
			}


			hbox = {
				datacontext = "[MilitaryViewEventTroop.GetAssociatedWar]"
				visible = "[War.IsValid]"

				layoutpolicy_horizontal = expanding

				text_single = {
					visible = "[MilitaryViewEventTroop.IsInheritable]"
					text = "MILITARY_VIEW_EVENT_TROOPS_ASSOCIATED_WAR"
					max_width = 450
					multiline = yes
				}

				expand = { }
			}
		}
	}

	type button_mercenary_list_item_ocr = button {
		size = { 430 110 }

		down = "[IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self)]"

		button = {
			visible = "[Or( IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self), Not(GetVariableSystem.Exists( 'hired_troop_detail_view_open' )))]"
			size = { 100% 100% }
			enabled = "[Or(Not(MercenaryCompany.IsHired), MercenaryCompany.IsHiredByLocalPlayer)]"
			onclick = "[ToggleMercenaryCompanyDetailView(MercenaryCompany.Self)]"
		}

		button = {
			visible = "[And( GetVariableSystem.Exists( 'hired_troop_detail_view_open' ), Not( IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self) ) )]"
			size = { 100% 100% }
			onclick = "[PdxGuiTriggerAllAnimations('mercenary_details_refresh')]"

			state = {
				name = _mouse_click
				delay = 0.2
				on_finish = "[ToggleMercenaryCompanyDetailView(MercenaryCompany.Self)]"
			}
		}

		vbox = {
			set_parent_size_to_minimum = yes
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 5 2 }

			hbox = {
				layoutpolicy_horizontal = expanding
				allow_outside = yes

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					ignoreinvisible = yes

					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[MercenaryCompany.IsHired]"
						ignoreinvisible = no

						text_single = {
							name = "hired_by_label"
							text = "[SelectLocalization( MercenaryCompany.IsHiredByLocalPlayer, 'HIRED_TROOPS_VIEW_HIRED_BY_ME_LEFT', 'HIRED_TROOPS_VIEW_NOT_AVAILABLE' )]"
						}

						text_single = {
							name = "hired_info_time_left"
							visible = "[MercenaryCompany.IsHiredByLocalPlayer]"
							text = "HIRED_TROOPS_VIEW_MC_HIRED_TIME_LEFT"
						}

						expand = { }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[And(MercenaryCompany.WillGoInBankruptcy(GetPlayer.Self),  Not(MercenaryCompany.IsHired))]"
						raw_text = "Can't hire! It will put you into too much debt."
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3
						block "your" {
							text_single = {
								# to avoid the tooltip
								raw_text = "Hire"
								visible = "[And(Or(Not(MercenaryCompany.IsHired), MercenaryCompany.IsHiredByLocalPlayer), Not(MercenaryCompany.WillGoInBankruptcy(GetPlayer.Self)))]"
							}

							text_single = {
								visible = "[MercenaryCompany.IsHiredByLocalPlayer]"
								raw_text = "View"
							}

							text_single = {
								name = "cost_label"
								raw_text = "[MercenaryCompany.GetCostDesc],"
								alwaystransparent = yes
							}
						}

						text_single = {
							datacontext = "[HiredTroopItem.GetComposition]"
							tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
							name = "strength"
							raw_text = "[ArmyComposition.GetSoldierCountString] men."
						}

						char_name = {
							datacontext = "[MercenaryCompany.GetTitle.GetHolder]"
							blockoverride "text2" {
								margin_left = -3
								raw_text = "[Character.GetSkill('martial')] Martial."
							}
						}

						# bad for FPS, showing only for available bands
						hbox = {
							datamodel = "[GetTraits]"
							datacontext = "[Character.GetFaith]"
							datacontext = "[MercenaryCompany.GetTitle.GetHolder]"
							visible = no#"[And(Or(Not(MercenaryCompany.IsHired), MercenaryCompany.IsHiredByLocalPlayer), Not(MercenaryCompany.WillGoInBankruptcy(GetPlayer.Self)))]"
							spacing = 3
							item = {
								text_single = {
									raw_text = "[Trait.GetName(Character.Self)],"
									visible = "[And(EqualTo_string(Trait.GetTraitCategoryLabel, GetTrait('forder').GetTraitCategoryLabel), Character.HasTrait(Trait.Self))]"
								}
							}
						}

						expand = {}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[And(MercenaryCompany.WillGoInDebt(GetPlayer.Self), Not(MercenaryCompany.IsHired))]"
						raw_text = "Hiring will put you into debt."
					}

					expand = { }
				}

				expand = { }
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3

				text_single = {
					raw_text = "Has"
				}

				flowcontainer = {
					name = "regiment_types"
					layoutpolicy_horizontal = expanding

					block "HiredTroopMenAtArmsTypesDataModel" { }

					item = {
						text_single = {
							margin_right = 5
							raw_text = "[Regiment.GetMAAType.GetName],"
						}
					}
				}

				expand = { }
			}

			expand = { }
		}
	}

	type button_holyorder_list_item_ocr = button {
		size = { 430 110 }

		down = "[IsHolyOrderDetailViewShown(HolyOrder.Self)]"

		button = {
			visible = "[Not(GetVariableSystem.Exists( 'hired_troop_detail_view_open' ))]"
			size = { 100% 100% }
			enabled = "[Or(Not(HolyOrder.IsHired), Or(HolyOrder.IsHiredByLocalPlayer, HolyOrder.IsPlayerPatron))]"
			onclick = "[OpenHolyOrderDetailView(HolyOrder.Self)]"
		}

		button = {
			visible = "[GetVariableSystem.Exists( 'hired_troop_detail_view_open' )]"
			size = { 100% 100% }
			onclick = "[PdxGuiTriggerAllAnimations('mercenary_details_refresh')]"

			state = {
				name = _mouse_click
				delay = 0.2
				on_finish = "[OpenHolyOrderDetailView(HolyOrder.Self)]"
			}
		}

		vbox = {
			set_parent_size_to_minimum = yes
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 5 2 }

			hbox = {
				layoutpolicy_horizontal = expanding
				allow_outside = yes

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					ignoreinvisible = yes

					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[HolyOrder.IsHired]"
						ignoreinvisible = no

						text_single = {
							name = "hired_by_label"
							text = "[SelectLocalization( HolyOrder.IsHiredByLocalPlayer, 'HIRED_TROOPS_VIEW_HIRED_BY_ME_LEFT', 'HIRED_TROOPS_VIEW_NOT_AVAILABLE' )]"
						}

						text_single = {
							raw_text = "pledged to a holy war,"
							visible = "[HolyOrder.IsPledgedToGreatHolyWar]"
						}

						expand = { }
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3
						block "your" {
							text_single = {
								# to avoid the tooltip
								raw_text = "Hire"
								visible = "[Or(Not(HolyOrder.IsHired), Or(HolyOrder.IsHiredByLocalPlayer, HolyOrder.IsPlayerPatron))]"
							}

							text_single = {
								visible = "[HolyOrder.IsHiredByLocalPlayer]"
								raw_text = "View"
							}

							text_single = {
								name = "cost_label"
								raw_text = "[HolyOrder.GetCostDescForPlayer],"
								alwaystransparent = yes
							}
						}

						text_single = {
							name = "strength"
							raw_text = "[HolyOrder.GetCurrentSoldiers] men,"
						}

						text_single = {
							raw_text = "[HolyOrder.GetNumberOfKnights] knights."
						}

						char_name = {
							datacontext = "[HolyOrder.GetTitle.GetHolder]"
							blockoverride "text2" {
								margin_left = -3
								raw_text = "[Character.GetSkill('martial')] Martial."
							}
						}

						# bad for FPS, showing only for available bands
						hbox = {
							datamodel = "[GetTraits]"
							datacontext = "[Character.GetFaith]"
							datacontext = "[HolyOrder.GetTitle.GetHolder]"
							visible = no#"[Or(Not(HolyOrder.IsHired), Or(HolyOrder.IsHiredByLocalPlayer, HolyOrder.IsPlayerPatron))]"
							spacing = 3
							item = {
								text_single = {
									raw_text = "[Trait.GetName(Character.Self)],"
									visible = "[And(EqualTo_string(Trait.GetTraitCategoryLabel, GetTrait('forder').GetTraitCategoryLabel), Character.HasTrait(Trait.Self))]"
								}
							}
						}

						expand = {}
					}

					expand = { }
				}

				expand = { }
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3

				text_single = {
					raw_text = "Has"
				}

				flowcontainer = {
					name = "regiment_types"
					layoutpolicy_horizontal = expanding

					block "HiredTroopMenAtArmsTypesDataModel" { }

					item = {
						text_single = {
							margin_right = 5
							raw_text = "[Regiment.GetMAAType.GetName],"
						}
					}
				}

				expand = { }
			}

			expand = { }
		}
	}

	type button_hireable_ruler_item_ocr = button {
		size = { 430 110 }
		datacontext = "[HiredTroopItem.GetHireableRuler]"

		onclick = "[OpenHireableRulerDetailView( Character.Self )]"
		down = "[IsHireableRulerDetailViewShown( Character.Self )]"

		vbox = {
			set_parent_size_to_minimum = yes
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 5 2 }

			hbox = {
				layoutpolicy_horizontal = expanding
				allow_outside = yes

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					ignoreinvisible = yes

					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Character.IsHireableRulerEmployedByLocalPlayer]"
						ignoreinvisible = no

						text_single = {
							name = "hired_by_label"
							text = "[SelectLocalization( Character.IsHireableRulerEmployedByLocalPlayer, 'HIRED_TROOPS_VIEW_HIRED_BY_ME_LEFT', 'HIRED_TROOPS_VIEW_NOT_AVAILABLE' )]"
						}
						expand = { }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[And(HiredTroopItem.WillHireableRulerCauseBankrupcy, Not(HiredTroopItem.IsHired))]"
						raw_text = "Can't hire! It will put you into too much debt."
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3
						block "your" {
							text_single = {
								# to avoid the tooltip
								raw_text = "Hire"
								visible = "[And(And( Character.IsHireableRuler, Character.IsPlayerInteractionValid( 'hire_laamp_mercenaries_interaction' ) ), HiredTroopItem.WillHireableRulerCauseBankrupcy)]"
							}

							text_single = {
								visible = "[Character.IsHireableRulerEmployedByLocalPlayer]"
								raw_text = "View"
							}

							text_single = {
								name = "cost_label"
								raw_text = "[HiredTroopItem.GetHireableRulerCost],"
								alwaystransparent = yes
							}
						}

						text_single = {
							datacontext = "[HiredTroopItem.GetComposition]"
							tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
							name = "strength"
							raw_text = "[ArmyComposition.GetSoldierCountString] men."
						}

						char_name = {
							blockoverride "pre" {
								text_single = {
									raw_text = "[Character.GetSkill('martial')] Martial,"
								}
							}
						}

						# bad for FPS, showing only for available bands
						hbox = {
							datamodel = "[GetTraits]"
							datacontext = "[Character.GetFaith]"
							visible = no#"[And(Or(Not(HiredTroopItem.IsHired), Character.IsHireableRulerEmployedByLocalPlayer), Not(HiredTroopItem.WillHireableRulerCauseBankrupcy))]"
							spacing = 3
							item = {
								text_single = {
									raw_text = "[Trait.GetName(Character.Self)],"
									visible = "[And(EqualTo_string(Trait.GetTraitCategoryLabel, GetTrait('forder').GetTraitCategoryLabel), Character.HasTrait(Trait.Self))]"
								}
							}
						}

						expand = {}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[And(HiredTroopItem.WillHireableRulerCauseBankrupcy, Not(HiredTroopItem.IsHired))]"
						raw_text = "Hiring will put you into debt."
					}

					expand = { }
				}

				expand = { }
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3

				text_single = {
					raw_text = "Has"
				}

				flowcontainer = {
					name = "regiment_types"
					layoutpolicy_horizontal = expanding

					block "HiredTroopMenAtArmsTypesDataModel" {
						datamodel = "[HiredTroopItem.GetRegiments]"
					}

					item = {
						text_single = {
							margin_right = 5
							raw_text = "[Regiment.GetMAAType.GetName],"
						}
					}
				}

				expand = { }
			}

			expand = { }
		}
	}
}


types ArmiesView
{
	type overlappingitembox_regiment_types = overlappingitembox
	{
		item = {
			icon = {
				name = "men_at_arms_icon"
				size = { 30 30 }
				texture = "[Regiment.GetMAAType.GetIcon]"
				tooltipwidget = regiment_container_tooltip
				using = tooltip_ws
			}
		}
	}

	type hbox_your_raised_and_unraised_soldiers = hbox
	{
		vbox = {
			datacontext = "[MilitaryView.GetComposition]"
			layoutpolicy_horizontal = expanding
			margin = { 0 5 }
			tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
			ignoreinvisible = no

			# background = {
			# 	using = Background_Area
			# }

			hbox = {
				name = tutorial_highlight_soldiers_total
				layoutpolicy_horizontal = expanding
				spacing = 10

				text_single = {
					text = "MV_TOTAL_SOLDIERS"
					layoutpolicy_horizontal = expanding
					align = nobaseline
				}

				hbox = {
					spacing = 7

					icon = {
						name = "icon_soldier"
						texture = "gfx/interface/icons/icon_soldier.dds"
						size = { 25 25 }
					}

					text_single = {
						text = "[ArmyComposition.GetSoldierCountString]"
						using = Font_Size_Big
						default_format = "#high"
						align = nobaseline
					}

					army_quality_icon = {}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10
				visible = "[And( ArmyComposition.HasRaisedSoldiers, GreaterThan_int32( ArmyComposition.GetUnraisedNumberOfSoldiers, '(int32)0' ) )]"
				tooltip = "[ArmyComposition.GetUnraisedArmyCompositionTooltip]"

				text_single = {
					text = "MV_UNRAISED_SOLDIERS"
					layoutpolicy_horizontal = expanding
					align = nobaseline
					margin_bottom = 3
					margin_left = 3
					using = Font_Size_Small
				}

				hbox = {
					spacing = 7

					text_single = {
						text = "[ArmyComposition.GetUnraisedNumberOfSoldiers]"
						layoutpolicy_horizontal = expanding
						using = Font_Size_Small
						default_format = "#high"
						align = nobaseline
					}

					unraised_army_quality_icon = {}
				}
			}

			progressbar_standard = {
				name = "soldiers_max"
				size = { 140 10 }
				visible = "[NotEqualTo_int32(ArmyComposition.GetCurrentNumberOfSoldiers, ArmyComposition.GetMaxNumberOfSoldiers)]"
				layoutpolicy_horizontal = expanding
				max = "[IntToFloat(ArmyComposition.GetMaxNumberOfSoldiers)]"
				value = "[IntToFloat(ArmyComposition.GetCurrentNumberOfSoldiers)]"
				using = Animation_ShowHide_Standard
			}
		}
	}

	type hbox_your_levies_and_knights = hbox
	{
		button_standard_clean = {
			name = "levies_button"
			datacontext = "[MilitaryView.GetComposition]"
			visible = "[Not( IsLandlessAdventurer( GetPlayer ) )]"

			size = { 249 140 }

			onclick = "[MilitaryView.ShowLevies]"


			tooltip = "MV_LEVY_TT"

			background = {
				texture = "gfx/interface/illustrations/men_at_arms_big/levies.dds"
				alpha = 0.7
			}

			background = {
				using = Background_Button_Illustration
				visible = "[MilitaryView.AreLeviesShown]"
			}

			background = {
				texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
				spriteType = Corneredtiled
				spriteborder = { 5 5 }
				margin = { -2 -2 }
			}

			using = Background_Vignette_Button

			vbox = {
				expand = {}
				margin = { 8 10 }

				text_single = {
					layoutpolicy_horizontal = expanding
					alwaystransparent = yes
					text = "LEVIES_LABEL"
				}

				hbox = {
					spacing = 3
					layoutpolicy_horizontal = expanding
					margin_right = 5

					icon = {
						name = "icon_soldier"
						texture = "gfx/interface/icons/icon_soldier.dds"
						size = { 25 25 }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[ArmyComposition.GetLeviesCountString]"
						using = Font_Size_Big
						default_format = "#high"
						align = nobaseline

					}

					expand = {}

					text_single = {
						text = MV_LEVY_MAINTENANCE
						tooltip = MV_LEVY_MAINTENANCE_TOOLTIP
						alwaystransparent = yes
						default_format = "#high"
						align = nobaseline

						background = {
							using = Background_Area_Dark
							margin = { 10 5 }
						}

					}
				}
			}

			progressbar_standard = {
				name = "levies_max"
				parentanchor = bottom|left
				position = { 5 -3 }
				size = { 96% 10 }
				visible = "[NotEqualTo_int32(ArmyComposition.GetCurrentNumberOfLevies, ArmyComposition.GetMaxNumberOfLevies)]"
				max = "[IntToFloat(ArmyComposition.GetMaxNumberOfLevies)]"
				value = "[IntToFloat(ArmyComposition.GetCurrentNumberOfLevies)]"
			}
		}

		button_standard_clean = {
			name = "knights_button"
			size = { 249 140 }

			onclick = "[MilitaryView.ShowKnights]"

			tooltip = "MV_KNIGHTS_TT"

			background = {
				texture = "gfx/interface/skinned/illustrations/men_at_arms/knights.dds"
				alpha = 0.7
			}

			background = {
				using = Background_Button_Illustration
				visible = "[MilitaryView.AreKnightsShown]"
			}

			background = {
				texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
				spriteType = Corneredtiled
				spriteborder = { 5 5 }
				margin = { -2 -2 }
			}

			using = Background_Vignette_Button

			vbox = {
				tooltip = "MV_KNIGHTS_TOOLTIP"
				using = tooltip_se
				expand = {}
				margin = { 8 10 }

				text_single = {
					visible = "[Not( GreaterThan_int32( Character.GetNumAccoladeSlots, '(int32)0' ) )]"
					layoutpolicy_horizontal = expanding
					text = "MV_KNIGHTS"
					alwaystransparent = yes
				}
				text_single = {
					visible = "[GreaterThan_int32( Character.GetNumAccoladeSlots, '(int32)0' )]"
					layoutpolicy_horizontal = expanding
					text = "MV_KNIGHTS_AND_ACCOLADES"
					alwaystransparent = yes
				}

				hbox = {
					spacing = 3
					layoutpolicy_horizontal = expanding
					icon = {
						name = "icon_knight"
						texture = "gfx/interface/icons/icon_knight_small.dds"
						size = { 30 30 }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "KNIGHTS_CURRENT_MAX"
						using = Font_Size_Big
						default_format = "#high"
						align = nobaseline
					}

					expand = {}

					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "MV_MANAGE_KNIGHTS"
					}
				}
			}
		}
	}

	type vbox_your_armies = vbox
	{
		hbox_your_raised_and_unraised_soldiers = {
			layoutpolicy_horizontal = expanding
		}

		hbox_your_levies_and_knights = {
			layoutpolicy_horizontal = expanding
			spacing = 10
		}

		vbox = {
			name = "maa_area"
			datacontext = "[MilitaryView.GetMilitaryItem]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 0 0 }
			spacing = 4

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 0 5 }
				spacing = 5
				name = "heading"

				hbox = {
					layoutpolicy_horizontal = expanding
					ignoreinvisible = no

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						expand = {}
						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5

							text_single = {
								text = "BANNER_MEN_AT_ARMS_LABEL"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[MilitaryView.GetMAACountAndCapString]"
								default_format = "#high"
								tooltip = "[MilitaryView.GetMAACountAndCapTooltip]"
								using = tooltip_ne
							}
						}

						text_single = {
							max_width = 300
							visible = "[GetPlayer.GetGovernment.IsType( 'landless_adventurer_government' )]"
							layoutpolicy_horizontal = expanding
							text = "ADVENTURER_CAP_HINT"
							default_format = "#weak"
						}
					}

					button_tertiary = {
						datacontext = "[MilitaryView.GetMilitaryItem]"
						visible = "[Not(IsDataModelEmpty( MilitaryItem.GetOwnedMaa ))]"
						using = Animation_ShowHide_Standard

						name = "raise_all_men_at_arms"
						datacontext = "[GetPlayer]"
						onclick = "[PlayerRaiseAllMenAtArmsRegiments]"
						enabled = "[PlayerCanRaiseAnyMenAtArmsRallyPoint]"

						text = "RAISE_ALL_MEN_AT_ARMS"
						size = {200 36}

						tooltip = "[GetPlayerRaiseAllMenAtArmsTooltip]"
						using = tooltip_se
						clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
					}
				}

				divider_light = {
					layoutpolicy_horizontal = expanding
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				name = "maa_tiles"

				fixedgridbox = {
					datacontext = "[MilitaryView.GetMilitaryItem]"
					datamodel = "[MilitaryItem.GetOwnedMaa]"
					layoutpolicy_horizontal = expanding
					flipdirection = yes
					datamodel_wrap = 3
					addcolumn = 169
					addrow = 93

					item = {
						container_maa_item = {}
					}
				}

				expand = {}
			}

			button_standard = {
				datacontext = "[MilitaryView.GetMilitaryItem]"
				visible = "[And( GetPlayer.GetGovernment.IsType( 'landless_adventurer_government' ), Character.IsPlayerInteractionShown('refill_maa_interaction') )]"
				layoutpolicy_horizontal = expanding

				name = "adventurer_refill_shortcut"
				datacontext = "[GetPlayer]"
				enabled = "[Character.IsPlayerInteractionValid('refill_maa_interaction')]"
				onclick = "[Character.OpenPlayerInteraction('refill_maa_interaction')]"
				text = "[Character.GetPlayerInteractionName('refill_maa_interaction')]"
				tooltip = "[Character.GetPlayerInteractionTooltip('refill_maa_interaction')]"
				using = tooltip_se
				clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"

				icon = {
					name = "adventurer_gold_icon"
					parentanchor = left|vcenter
					position = { 10 0 }
					size = { 29 29 }
					texture = "gfx/interface/icons/icon_gold.dds"
				}

				icon = {
					name = "adventurer_provision_icon"
					parentanchor = left|vcenter
					position = { 40 0 }
					size = { 29 29 }
					framesize = { 60 60 }
					frame = 0
					texture = "gfx/interface/icons/icon_camp_supply.dds"
				}
			}

			button_standard = {
				datacontext = "[MilitaryView.GetMilitaryItem]"
				visible = "[And( GetPlayer.GetGovernment.IsType( 'landless_adventurer_government' ), Character.IsPlayerInteractionShown('reinforce_soldiers_interaction') )]"
				layoutpolicy_horizontal = expanding

				name = "adventurer_reinforce_shortcut"
				datacontext = "[GetPlayer]"
				enabled = "[Character.IsPlayerInteractionValid('reinforce_soldiers_interaction')]"
				onclick = "[Character.OpenPlayerInteraction('reinforce_soldiers_interaction')]"
				text = "[Character.GetPlayerInteractionName('reinforce_soldiers_interaction')]"
				tooltip = "[Character.GetPlayerInteractionTooltip('reinforce_soldiers_interaction')]"
				using = tooltip_se
				clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"

				icon = {
					name = "adventurer_icon"
					parentanchor = left|vcenter
					position = { 5 -1 }
					size = { 28 28 }
					texture = "gfx/interface/icons/combat_effects/owner_in_debt.dds"
				}
			}

			button_standard = {
				name = "add_maa"
				layoutpolicy_horizontal = expanding

				text = "ADD_MEN_AT_ARMS_LABEL"

				onclick = "[MilitaryItem.OnClick]"
				tooltip = "CREATE_MAA_TOOLTIP"
				down = "[MilitaryItem.IsOpen]"

				button_plus = {
					name = "can_be_created"
					visible = "[MilitaryItem.CanCreateAnyMAAType]"
					parentanchor = left|vcenter
					position = { 5 0 }
					alwaystransparent = yes
				}

				warning_icon = {
					name = "at_cap"
					visible = "[Not(MilitaryItem.MaACanBeCreated)]"
					parentanchor = left|vcenter
					position = { 5 0 }
					size = { 28 28 }
				}
			}
		}

		vbox = {
			visible = "[Not(IsDataModelEmpty(MilitaryView.GetEventTroops))]"
			layoutpolicy_horizontal = expanding
			margin = { 0 5 }
			spacing = 5

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "MILITARY_VIEW_EVENT_TROOPS"
			}

			divider_light = {
				layoutpolicy_horizontal = expanding
			}

			vbox = {
				datamodel = "[MilitaryView.GetEventTroops]"
				layoutpolicy_horizontal = expanding

				item = {
					hbox_event_troop_item = {
						layoutpolicy_horizontal = expanding
					}
				}
			}
		}

		vbox = {
			visible = "[Or( Not(IsDataModelEmpty(MilitaryView.GetHiredMercenaries)), Not(IsDataModelEmpty(MilitaryView.GetHiredHolyOrders)) )]"
			layoutpolicy_horizontal = expanding
			margin = { 0 5 }
			spacing = 5

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "MILITARY_VIEW_HIRED_TROOPS"
			}

			divider_light = {
				layoutpolicy_horizontal = expanding
			}

			vbox = {
				datamodel = "[MilitaryView.GetHiredMercenaries]"
				layoutpolicy_horizontal = expanding
				spacing = 5
				margin_top = 5

				item = {
					button_mercenary_list_item = {
						datacontext = "[HiredTroopItem.GetMercenaryCompany]"
						layoutpolicy_horizontal = expanding
						size = { 504 92 }

						blockoverride "HiredTroopMenAtArmsTypesDataModel"
						{
							datamodel = "[HiredTroopItem.GetRegiments]"
						}
					}
				}
			}

			vbox = {
				datamodel = "[MilitaryView.GetHiredHolyOrders]"
				layoutpolicy_horizontal = expanding
				spacing = 5

				item = {
					button_holyorder_list_item = {
						datacontext = "[HiredTroopItem.GetHolyOrder]"
						layoutpolicy_horizontal = expanding
						size = { 504 92 }

						blockoverride "HiredTroopMenAtArmsTypesDataModel"
						{
							datamodel = "[HiredTroopItem.GetRegiments]"
						}
					}
				}
			}
		}
	}

	type button_imperial_army_item = widget
	{
		datacontext = "[HiredTroopItem.GetAdministrativeTitle]"
		allow_outside = yes

		button_standard = {
			allow_outside = yes
			parentanchor = bottom|right
			size = { 100% 82% }

			onclick = "[OpenAdministrativeArmyDetailView( Title.Self )]"
			down = "[IsAdministrativeArmyDetailViewShown( Title.Self )]"

			tooltip = TT_IMPERIAL_ARMIES

			vbox = {
				allow_outside = yes
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin_left = 42

				widget = {
					allow_outside = yes
					layoutpolicy_horizontal = expanding
					size = { 0 34 }

					# Status available
					highlight_icon = {
						visible = "[And( Not( Title.IsAdministrativeArmyHiredByLocalPlayer ), Not( HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) )]"
						position = { -2 2 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_green.dds"
					}

					# Status commanded by you
					highlight_icon = {
						visible = "[And( Title.IsAdministrativeArmyHiredByLocalPlayer, Not( HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) )]"
						position = { -2 2 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_blue.dds"
					}

					# Status unavailable
					highlight_icon = {
						visible = "[And( Or( And( HiredTroopItem.IsHired, HiredTroopItem.GetHiredBy.IsAtWar ), And( Not( HiredTroopItem.IsHired ), HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ), Not( And( Title.IsAdministrativeArmyHiredByLocalPlayer, Not( HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ) ) ) ]"
						position = { -2 2 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_red.dds"
					}

					text_single = {
						parentanchor = left|vcenter
						position = { 0 -1 }
						text = MV_ADMIN_ARMY_NAME
						align = nobaseline
						max_width = 350
						using = Font_Size_Medium
					}

					# Status icon & background
					widget = {
						parentanchor = top|right
						position = { -10 -8 }
						size = { 42 52 }

						tooltip = "[Title.GetAdministrativeArmyStatus]"

						# Status available
						highlight_icon = {
							visible = "[And(And( Not( Title.IsAdministrativeArmyHiredByLocalPlayer ), Not( HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ), Not(And(HiredTroopItem.IsHired, HiredTroopItem.GetHiredBy.IsAtWar)))]"
							parentanchor = center
							size = { 42 52 }
							texture = "gfx/interface/window_military/military_banner_green_icon_bg.dds"
						}

						icon_flat_standard_gold = {
							visible = "[And(And( Not( Title.IsAdministrativeArmyHiredByLocalPlayer ), Not( HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ), Not(And(HiredTroopItem.IsHired, HiredTroopItem.GetHiredBy.IsAtWar)))]"
							parentanchor = top|hcenter
							position = { 0 12 }
							size = { 22 22 }
							texture = "gfx/interface/icons/flat_icons/army_select.dds"
						}

						# Status Commanded by you
						highlight_icon = {
							visible = "[Title.IsAdministrativeArmyHiredByLocalPlayer]"
							parentanchor = center
							size = { 42 52 }
							texture = "gfx/interface/window_military/military_banner_blue_icon_bg.dds"
						}

						icon_flat_standard_gold = {
							visible = "[Title.IsAdministrativeArmyHiredByLocalPlayer]"
							parentanchor = top|hcenter
							position = { 0 8 }
							size = { 28 28 }
							texture = "gfx/interface/icons/flat_icons/army_details.dds"
						}

						# Status unavailable
						highlight_icon = {
							visible = "[And( Or( And( HiredTroopItem.IsHired, HiredTroopItem.GetHiredBy.IsAtWar ), And( Not( HiredTroopItem.IsHired ), HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ), Not( And( Title.IsAdministrativeArmyHiredByLocalPlayer, Not( HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ) ) ) ]"
							parentanchor = center
							position = { 0 2}
							size = { 42 52 }
							texture = "gfx/interface/window_military/military_banner_red_icon_bg.dds"
						}

						icon_flat_standard_gold = {
							visible = "[And( Or( And( HiredTroopItem.IsHired, HiredTroopItem.GetHiredBy.IsAtWar ), And( Not( HiredTroopItem.IsHired ), HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ), Not( And( Title.IsAdministrativeArmyHiredByLocalPlayer, Not( HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ) ) ) ]"
							parentanchor = top|hcenter
							position = { 0 9 }
							size = { 30 30 }
							texture = "gfx/interface/icons/flat_icons/cancel.dds"
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_right = 10

					overlappingitembox_regiment_types = {
						datamodel = "[HiredTroopItem.GetRegiments]"

						layoutpolicy_horizontal = expanding
						size = { -1 30 }
					}

					expand = {}

					soldiers_and_quality_small = {
						datacontext = "[HiredTroopItem.GetComposition]"
					}
				}
			}

			widget = {
				allow_outside = yes
				parentanchor = top|left
				position = { -16 -20 }
				size = { 62 58 }

				coa_title_small_crown = {
					parentanchor = center
					scale = 0.8
				}
			}
		}
	}

	type vbox_imperial_armies = vbox
	{
		vbox = {
			layoutpolicy_horizontal = expanding
			datamodel = "[MilitaryView.GetHeldTitleItems]"
			spacing = 5

			item = {
				vbox = {
					datacontext = "[MilitaryItem.GetTitle]"
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5

						coa_title_tiny_crown = {}

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							margin_bottom = 5
							spacing = 5

							expand = {}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5

								text_single = {
									layoutpolicy_horizontal = expanding
									text = MV_ADMIN_ARMY_ARMIES_NAME
								}

								expand = { }

								text_single = {
									text = "BANNER_MEN_AT_ARMS_LABEL"
								}

								text_single = {
									text = "[MilitaryItem.GetMAACountAndCapTooltip]"
									default_format = "#high"
									tooltip = "[MilitaryItem.GetMAACountAndCapTooltip]"
									using = tooltip_ne
								}
							}

							divider_light = {
								layoutpolicy_horizontal = expanding
							}
						}
					}

					text_single = {
						visible = "[IsDataModelEmpty( MilitaryItem.GetOwnedMaa )]"
						margin = { 0 10 }

						text = "MV_NO_MAA_FOR_TITLE"
						default_format = "#weak"
						align = center
					}

					fixedgridbox = {
						layoutpolicy_horizontal = expanding
						datamodel = "[MilitaryItem.GetOwnedMaa]"
						flipdirection = yes
						datamodel_wrap = 3
						addcolumn = 169
						addrow = 93

						item = {
							container_maa_item = {

								widget = {
									###Add Tooltip to show how long this maa will be loaned out.
									size = { 68 64 }
									visible = "[Not( ObjectsEqual( Regiment.GetOwningTitle, Regiment.GetControllingTitle ) )]"

									background = {
										using = Background_Area_Dark
									}

									text_single = {
										visible = "[Not( ObjectsEqual( Regiment.GetOwningTitle, Regiment.GetControllingTitle ) )]"
										parentanchor = top|hcenter
										text = MV_ADMIN_ARMY_ARMIES_LOANED_LABEL
										align = center
									}

									coa_title_tiny = {
										datacontext = "[Regiment.GetControllingTitle]"
										parentanchor = bottom|hcenter
										position = { 0 2 }
									}
								}
							}
						}
					}

					spacer = {
						size = { 0 5 }
					}

					button_standard = {
						name = "add_maa"
						layoutpolicy_horizontal = expanding

						text = "ADD_MEN_AT_ARMS_LABEL"

						onclick = "[MilitaryItem.OnClickTitle( Title.Self )]"
						down = "[MilitaryItem.IsOpen]"

						tooltip = "CREATE_MAA_TOOLTIP"

						button_plus = {
							name = "can_be_created"
							visible = "[MilitaryItem.CanCreateAnyMAAType]"
							parentanchor = vcenter
							alwaystransparent = yes
						}

						warning_icon = {
							name = "at_cap"
							visible = "[Not(MilitaryItem.MaACanBeCreated)]"
							parentanchor = left|vcenter
							position = { 10 0 }
							size = { 29 29 }
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin_top = 15
			margin_bottom = 5

			text_label_left = {
				layoutpolicy_horizontal = expanding

				text = MV_ADMIN_ARMY_ARMIES_YOU_COMMAND
				using = Font_Size_Medium
			}

			expand = { }
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			datamodel = "[MilitaryView.GetAllAdministrativeArmies]"

			item = {
				button_imperial_army_item = {
					visible = "[Title.IsAdministrativeArmyHiredByLocalPlayer]"
					size = { 504 94 }
					layoutpolicy_horizontal = expanding
				}
			}
		}

		vbox = {
			visible = "[Not(MilitaryView.IsControllingOtherTitlesTroops)]"
			margin = { 0 10 }

			text_single = {
				text = "MV_ADMIN_ARMY_NO_CONTROLLED_TITLES"
				default_format = "#weak"
				align = center
			}

			text_single = {
				visible = "[Not(GetPlayer.IsIndependentRuler)]"

				text = "MV_ADMIN_ARMY_ASK_EMPEROR"
				default_format = "#weak"
				align = center
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin_top = 15
			margin_bottom = 5

			text_label_left = {
				layoutpolicy_horizontal = expanding
				text = MV_ADMIN_ARMY_ARMIES_IN_OTHER_GOVERNORSHIPS
				using = Font_Size_Medium
			}

			expand = { }

			text_single = {
				text = MV_ADMIN_ARMY_ARMIES_REALM_STRENGTH
				align = nobaseline
			}

			text_single = {
				align = nobaseline
				text = "[MilitaryView.GetTotalAdminRealmStrengthString]"
				default_format = "#high"
				using = tooltip_ne
			}
		}

		hbox = {
			visible = "[InDebugMode]"

			layoutpolicy_horizontal = expanding
			spacing = 5
			margin = { 0 8 }

			expand = { }

			text_single = {
				raw_text = "#D Military Power"
				align = bottom
			}

			text_single = {
				align = bottom
				text = "[MilitaryView.GetTotalAdminRealmPowerString]"
				default_format = "#D;high"
				using = tooltip_ne
			}
		}

		text_label_center = {
			visible = "[And(MilitaryView.CanRequestAnyTitleArmyPersonally, Not(GetPlayer.IsIndependentRuler))]"
			text = "MV_ADMIN_ARMY_HIRE_DIRECTLY"
		}

		vbox = {
			datamodel = "[MilitaryView.GetAllAdministrativeArmies]"
			layoutpolicy_horizontal = expanding

			item = {
				button_imperial_army_item = {
					name = imperial_army_item
					widgetid = imperial_army_item
					visible = "[And(IsNotHiredByPlayer(Title), And(MilitaryView.CanRequestTitleArmyPersonally(Title.Self), MilitaryView.IsAdminTitleWithTroops(Title.Self)))]"
					layoutpolicy_horizontal = expanding
					size = { 504 98 }
				}
			}
		}

		vbox = {
			visible = "[Not(MilitaryView.DoesOtherUncontrolledTitlesExist)]"
			margin = { 0 10 }

			text_single = {
				text = "MV_ADMIN_ARMY_NO_UNCONTROLLED_TITLES"
				default_format = "#weak"
				align = center
			}

			text_single = {
				visible = "[Not(GetPlayer.IsIndependentRuler)]"

				text = "MV_ADMIN_ARMY_ASK_EMPEROR"
				default_format = "#weak"
				align = center
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			datamodel = "[MilitaryView.GetAllAdministrativeArmies]"

			item = {
				button_imperial_army_item = {
					name = imperial_army_item_2
					visible = "[And(IsNotHiredByPlayer(Title), And(Not(MilitaryView.CanRequestTitleArmyPersonally(Title.Self)), MilitaryView.IsAdminTitleWithTroops(Title.Self)))]"
					layoutpolicy_horizontal = expanding
					size = { 504 98 }
				}
			}
		}
	}

	type button_hireable_ruler_item = widget
	{
		datacontext = "[HiredTroopItem.GetHireableRuler]"
		allow_outside = yes

		button_standard = {
			allow_outside = yes
			parentanchor = bottom|right
			size = { 100% 85% }

			onclick = "[OpenHireableRulerDetailView( Character.Self )]"
			down = "[IsHireableRulerDetailViewShown( Character.Self )]"

			tooltip = TT_MERCENARIES_HIREABLE_RULER

			vbox = {
				allow_outside = yes
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin_left = 40

				# Banner
				widget = {
					allow_outside = yes
					layoutpolicy_horizontal = expanding
					size = { 0 34 }

					# Status available
					highlight_icon = {
						visible = "[And( Character.IsHireableRuler, Character.IsPlayerInteractionValid( 'hire_laamp_mercenaries_interaction' ) )]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_green.dds"
					}

					# Status commanded by you
					highlight_icon = {
						visible = "[Character.IsHireableRulerEmployedByLocalPlayer]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_blue.dds"
					}

					# Status unavailable
					highlight_icon = {
						visible = "[And( Or( Not( Character.IsHireableRuler ), And( Character.IsHireableRuler, Not(Character.IsPlayerInteractionValid( 'hire_laamp_mercenaries_interaction' ) ) ) ), Not(Character.IsHireableRulerEmployedByLocalPlayer) )]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_red.dds"
					}

					text_single = {
						parentanchor = vcenter|left
						position = { 0 -1 }
						text = "[Character.GetPrimaryTitle.GetNameNoTooltip]"
						align = nobaseline
						max_width = 350
						using = Font_Size_Medium
					}

					widget = {
						parentanchor = vcenter|right
						position = { -54 -1 }
						size = { -1 24 }

						hbox = {
							resizeparent = yes

							tooltip = "[SelectLocalization( HiredTroopItem.WillHireableRulerCauseBankrupcy, 'MERCENARY_COMPANY_COST_BANKRUPTCY', 'MERCENARY_COMPANY_COST_DEBT')]"
							tooltip_visible = "[HiredTroopItem.WillHireableRulerCauseDebt]"
							using = tooltip_ne

							highlight_icon = {
								name = "debt"
								#visible = no
								visible = "[HiredTroopItem.WillHireableRulerCauseDebt]"
								size = { 24 24 }

								texture = "gfx/interface/icons/symbols/icon_alert.dds"
							}

							text_single = {
								text = "[HiredTroopItem.GetHireableRulerCost]"
								align = nobaseline|left
								max_width = 350
								#using = Font_Size_Medium

								background = {
									visible = "[HiredTroopItem.WillHireableRulerCauseDebt]"
									margin_bottom = -2
									using = Status_Bad
								}
							}
						}
					}

					# Status icon & background
					widget = {
						parentanchor = top|right
						position = { -10 -8 }
						size = { 42 52 }


						# Status available
						highlight_icon = {
							visible = "[And( Character.IsHireableRuler, Character.IsPlayerInteractionValid( 'hire_laamp_mercenaries_interaction' ) )]"
							parentanchor = center
							size = { 42 52 }
							texture = "gfx/interface/window_military/military_banner_green_icon_bg.dds"
							tooltip = MV_MERCENARIES_HIREABLE_RULER_STATUS
						}

						icon_flat_standard_gold = {
							visible = "[And( Character.IsHireableRuler, Character.IsPlayerInteractionValid( 'hire_laamp_mercenaries_interaction' ) )]"
							parentanchor = top|hcenter
							position = { 0 12 }
							size = { 22 22 }
							texture = "gfx/interface/icons/flat_icons/army_select.dds"
							tooltip = MV_MERCENARIES_HIREABLE_RULER_STATUS
						}

						# Status Commanded by you
						highlight_icon = {
							visible = "[Character.IsHireableRulerEmployedByLocalPlayer]"
							parentanchor = center
							position = { 0 2}
							size = { 42 52 }
							texture = "gfx/interface/window_military/military_banner_blue_icon_bg.dds"
							tooltip = "MV_MERCENARIES_STATUS_COMMANDED"
						}

						icon_flat_standard_gold = {
							visible = "[Character.IsHireableRulerEmployedByLocalPlayer]"
							parentanchor = top|hcenter
							position = { 0 8 }
							size = { 28 28 }
							texture = "gfx/interface/icons/flat_icons/army_details.dds"
							tooltip = "MV_MERCENARIES_STATUS_COMMANDED"
						}

						# Status unavailable
						highlight_icon = {
							visible = "[And( Or( Not( Character.IsHireableRuler ), And( Character.IsHireableRuler, Not(Character.IsPlayerInteractionValid( 'hire_laamp_mercenaries_interaction' ) ) ) ), Not(Character.IsHireableRulerEmployedByLocalPlayer) )]"
							parentanchor = center
							position = { 0 2}
							size = { 42 52 }
							texture = "gfx/interface/window_military/military_banner_red_icon_bg.dds"
							tooltip = "[Character.GetPlayerInteractionTooltip( 'hire_laamp_mercenaries_interaction' )]"
						}

						icon_flat_standard_gold = {
							visible = "[And( Or( Not( Character.IsHireableRuler ), And( Character.IsHireableRuler, Not(Character.IsPlayerInteractionValid( 'hire_laamp_mercenaries_interaction' ) ) ) ), Not(Character.IsHireableRulerEmployedByLocalPlayer) )]"
							parentanchor = top|hcenter
							position = { 0 12 }
							size = { 22 22 }
							texture = "gfx/interface/icons/flat_icons/cancel.dds"
							tooltip = "[Character.GetPlayerInteractionTooltip( 'hire_laamp_mercenaries_interaction' )]"
						}
					}
				}

				# Regiments type & size
				hbox = {
					layoutpolicy_horizontal = expanding
					margin_right = 10
					margin_bottom = 3

					overlappingitembox_regiment_types = {
						datamodel = "[HiredTroopItem.GetRegiments]"

						layoutpolicy_horizontal = expanding
						size = { -1 30 }
					}

					soldiers_and_quality_small = {
						datacontext = "[HiredTroopItem.GetComposition]"
					}
				}
			}

			widget = {
				allow_outside = yes
				parentanchor = top|left
				position = { -16 -24 }
				size = { 62 74 }

				coa_realm_medium_crown = {
					datacontext = "[Character.GetPrimaryTitle]"
					parentanchor = center
					scale = 0.7
				}
			}
		}
	}
}

types MilitaryView
{
	type hbox_event_troop_item = vbox {
		background = {
			using = Background_Area
		}
		margin = { 5 5 }

		hbox  = {
			name = "header"
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area
			}

			hbox = {
				margin = { 5 5 }
				layoutpolicy_horizontal = expanding

				icon = {
					name = "event_troops"
					texture = "gfx/interface/icons/icon_special_troops.dds"
					size = { 36 36 }
				}

				spacer = {
					size = { 5 0 }
				}

				text_single = {
					text = "[MilitaryViewEventTroop.GetName]"
					default_format = "#high"
				}

				expand = {}

				soldiers_and_quality_small = {
					datacontext = "[MilitaryViewEventTroop.GetComposition]"

					blockoverride "background" {
						background = {
							using = Background_Area
							margin = { 3 0 }
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			vbox = {
				margin = { 5 5 }
				layoutpolicy_horizontal = expanding

				hbox = {
					name = "menatarms"
					layoutpolicy_horizontal = expanding

					text_single = {
						text = MV_MEN_AT_ARMS_LABEL
					}

					text_single = {
						text = MV_MEN_AT_ARMS_NONE
						default_format = "#weak"
						visible = "[IsDataModelEmpty(MilitaryViewEventTroop.GetRegiments)]"
					}

					spacer = {
						size = { 10 5 }
					}

					hbox = {
						name = "regiment_types"
						datamodel = "[MilitaryViewEventTroop.GetRegiments]"
						layoutpolicy_vertical = expanding
						margin_top = 5

						background = {
							using = Background_Area
							margin = { 10 2 }
						}

						item = {
							container = {
								highlight_icon = {
									size = { 40 40 }
									texture = "[Regiment.GetMAAType.GetIcon]"
									tooltipwidget = regiment_container_tooltip
									using = tooltip_se
								}
							}
						}
					}

					expand = {}
				}

				text_single = {
					visible = "[Not(MilitaryViewEventTroop.IsInheritable)]"

					layoutpolicy_horizontal = expanding
					text = "MILITARY_VIEW_EVENT_TROOPS_NOT_INHERITABLE"
				}

				text_single = {
					visible = "[MilitaryViewEventTroop.IsInheritable]"

					layoutpolicy_horizontal = expanding
					text = "MILITARY_VIEW_EVENT_TROOPS_INHERITABLE"
				}

				hbox = {
					datacontext = "[MilitaryViewEventTroop.GetAssociatedWar]"
					visible = "[War.IsValid]"

					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[MilitaryViewEventTroop.IsInheritable]"
						text = "MILITARY_VIEW_EVENT_TROOPS_ASSOCIATED_WAR"
						max_width = 450
						multiline = yes
					}

					expand = {}
				}
			}

			vbox = {
				layoutpolicy_vertical = growing

				margin = { 10 5 }

				expand = {
					layoutpolicy_vertical = growing
				}

				button_standard = {
					name = "raise"
					size = { 100 32 }
					onclick = "[OnRaiseEventTroops(MilitaryViewEventTroop.Self)]"
					visible = "[MilitaryViewEventTroop.CanBeRaised]"
					tooltip = "MILITARY_VIEW_EVENT_TROOPS_RAISE_TT"

					hbox = {
						margin = { 5 0 }

						button_army_details = {
							size = { 28 28 }
							alwaystransparent = yes
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							align = center|nobaseline
							text = "MILITARY_VIEW_EVENT_TROOPS_RAISE"
							default_format = "#clickable"
						}
					}
				}
			}
		}
	}

	type container_maa_item = container {
		datacontext = "[Regiment.GetMAAType]"
		using = tooltip_es

		background = {
			texture = "[MenAtArmsType.GetHorizontalImage]"
			alpha = 0.7
			margin = { -2 -2 }
		}

		background = {
			using = Background_Button_Illustration
			visible = "[Regiment.IsShownInMaaView]"
		}

		background = {
			texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
			spriteType = Corneredtiled
			spriteborder = { 5 5 }
			margin = { -2 -2 }
		}

		tooltipwidget = {
			using = regiment_container_text_tooltip

			blockoverride "extra_info" {
				divider_light = {
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = "CLICK_TO_SELECT"
					margin = { 10 0 }
				}
			}
		}

		button_standard_clean = {
			name = "maa_entry"
			size = { 166 90 }

			vbox = {
				expand = {}

				hbox = {
					margin = { 8 4 }
					spacing = 2
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area_Dark
					}

					icon = {
						name = "icon_maa"
						texture = [MenAtArmsType.GetIcon]
						size = { 20 20 }
					}

					text_single = {
						text = "[Regiment.BuildCurrentRegimentCountString|V]"
						default_format = "#high"
					}

					expand = {}

					text_single = {
						text = "TOTAL_MAA_COST"
						tooltip = "TOTAL_MAA_COST_TOOLTIP"

						default_format = "#high"
					}
				}
			}

			button_normal = {
				visible = "[Not(Regiment.IsShownInMaaView)]"
				size = { 100% 100% }
				onclick = "[Regiment.ToggleMaaView]"
			}

			text_label_right = {
				visible = "[And( Not(Regiment.IsRaised), GetPlayer.IsAtWar)]"
				text = "MAA_UNRAISED"
				using = Font_Size_Small
				default_format = "#X"
				parentanchor = top|right
				position = {-10 1}
			}

			text_label_right = {
				visible = "[Not(And( Not(Regiment.IsRaised), GetPlayer.IsAtWar))]"
				text = "MAA_CURRENT_SIZE"
				using = Font_Size_Small
				parentanchor = top|right
				position = {-10 1}
			}

			text_label_right = {
				visible = "[And( Not( Regiment.GetOriginProvince.IsValid ), GetPlayer.HasDomainProvincesForMAAOrigin )]"
				text = "MAA_UNSTATIONED"
				default_format = "#X"
				using = Font_Size_Small
				parentanchor = top|right
				position = { -10 22 }
			}

			button_normal = {
				visible = "[GetVariableSystem.Exists( 'menatarms_open' )]"
				size = { 100% 100% }
				onclick = "[PdxGuiTriggerAllAnimations('menatarms_refresh')]"

				state = {
					name = _mouse_click
					delay = 0.2
					on_finish = "[Regiment.ToggleMaaView]"
				}
			}
		}
	}
}

types HiredTroops
{
	type button_mercenary_list_item = widget
	{
		allow_outside = yes

		button_standard = {
			allow_outside = yes
			parentanchor = bottom|right
			size = { 100% 85% }

			tooltip = "HIRED_TROOPS_VIEW_LIST_MC_BUTTON_TOOLTIP"
			tooltip_visible = "[Or(Not(MercenaryCompany.IsHired), MercenaryCompany.IsHiredByLocalPlayer)]"

			down = "[IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self)]"

			button = {
				visible = "[Or( IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self), Not(GetVariableSystem.Exists( 'hired_troop_detail_view_open' )))]"
				size = { 100% 100% }
				onclick = "[ToggleMercenaryCompanyDetailView(MercenaryCompany.Self)]"
			}

			button = {
				visible = "[And( GetVariableSystem.Exists( 'hired_troop_detail_view_open' ), Not( IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self) ) )]"
				size = { 100% 100% }
				onclick = "[PdxGuiTriggerAllAnimations('mercenary_details_refresh')]"

				state = {
					name = _mouse_click
					delay = 0.2
					on_finish = "[ToggleMercenaryCompanyDetailView(MercenaryCompany.Self)]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin_left = 40

				widget = {
					layoutpolicy_horizontal = expanding
					size = { 0 34 }

					# Status available
					highlight_icon = {
						visible = "[And( Not( MercenaryCompany.IsHired ), Not( MercenaryCompany.WillGoInBankruptcy( GetPlayer.Self ) ) )]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_green.dds"
					}

					highlight_icon = {
						visible = "[Or( And( Not( MercenaryCompany.IsHired ), MercenaryCompany.WillGoInBankruptcy(GetPlayer.Self) ), And( Not( MercenaryCompany.IsHiredByLocalPlayer ), MercenaryCompany.IsHired ) )]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_red.dds"
					}

					highlight_icon = {
						visible = "[MercenaryCompany.IsHiredByLocalPlayer]"
						position = { -2 2 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_blue.dds"
					}

					text_single = {
						parentanchor = left|vcenter
						position = { 0 -1 }
						text = "[MercenaryCompany.GetName]"
						align = nobaseline
						default_format = "#high"
						max_width = 300
						using = Font_Size_Medium
					}

					# Status icon & background
					widget = {
						parentanchor = top|right
						position = { -10 -8 }
						size = { 42 52 }

						# Status available
						widget = {
							visible = "[And( And( Not( MercenaryCompany.IsHired ), Not( MercenaryCompany.WillGoInBankruptcy( GetPlayer.Self ) ) ), Not( MercenaryCompany.WillGoInDebt( GetPlayer.Self ) ) )]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "MV_MERCENARIES_STATUS_AVAILABLE"

							highlight_icon = {
								parentanchor = center
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_green_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 12 }
								size = { 22 22 }
								texture = "gfx/interface/icons/flat_icons/army_select.dds"
							}
						}

						# Status commanded by you
						widget = {
							visible = "[MercenaryCompany.IsHiredByLocalPlayer]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "MV_MERCENARIES_STATUS_COMMANDED"

							highlight_icon = {
								parentanchor = center
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_blue_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 8 }
								size = { 28 28 }
								texture = "gfx/interface/icons/flat_icons/army_details.dds"
							}
						}

						# Status debt
						widget = {
							visible = "[And( Not( MercenaryCompany.IsHired ), MercenaryCompany.WillGoInDebt( GetPlayer.Self ) )]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "[SelectLocalization(MercenaryCompany.IsHiredByLocalPlayer, 'MERCENARY_COMPANY_COST_DEBT_HIRED', 'MERCENARY_COMPANY_COST_DEBT')]"

							highlight_icon = {
								parentanchor = center
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_green_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 12 }
								size = { 22 22 }
								texture = "gfx/interface/icons/flat_icons/army_select.dds"
							}
						}

						# Status unavailable
						widget = {
							visible = "[And( Not( MercenaryCompany.IsHired ), MercenaryCompany.WillGoInBankruptcy(GetPlayer.Self) )]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "[SelectLocalization(MercenaryCompany.IsHiredByLocalPlayer, 'MERCENARY_COMPANY_COST_BANKRUPTCY_HIRED', 'MERCENARY_COMPANY_COST_BANKRUPTCY')]"

							highlight_icon = {
								parentanchor = center
								position = { 0 2}
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_red_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 9 }
								size = { 30 30 }
								texture = "gfx/interface/icons/flat_icons/cancel.dds"
							}
						}

						# Status unavailable, hired by other
						widget = {
							visible = "[And( Not( MercenaryCompany.IsHiredByLocalPlayer ), MercenaryCompany.IsHired )]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "HIRED_TROOPS_VIEW_NOT_AVAILABLE"

							highlight_icon = {
								parentanchor = center
								position = { 0 2}
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_red_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 9 }
								size = { 30 30 }
								texture = "gfx/interface/icons/flat_icons/cancel.dds"
							}
						}
					}

					widget = {
						parentanchor = right|vcenter
						position = { -58 -1 }
						size = { 192 34 }

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5

							expand = {}

							highlight_icon = {
								name = "debt"
								visible = "[MercenaryCompany.WillGoInDebt(GetPlayer.Self)]"
								size = { 24 24 }
								texture = "gfx/interface/icons/symbols/icon_alert.dds"

								tooltip = "[SelectLocalization(MercenaryCompany.IsHiredByLocalPlayer, 'MERCENARY_COMPANY_COST_DEBT_HIRED', 'MERCENARY_COMPANY_COST_DEBT')]"
								using = tooltip_se
							}

							text_single = {
								name = "cost_label"
								text = "[MercenaryCompany.GetCostDesc]"
								alwaystransparent = yes
								align = nobaseline

								background = {
									visible = "[Or(MercenaryCompany.WillGoInDebt(GetPlayer.Self), MercenaryCompany.WillGoInBankruptcy(GetPlayer.Self))]"
									margin_bottom = -2
									using = Status_Bad
								}
							}
						}
					}
				}

				# Regiments type & size
				hbox = {
					layoutpolicy_horizontal = expanding
					margin_right = 10
					margin_bottom = 3

					overlappingitembox = {
						name = "regiment_types"
						layoutpolicy_horizontal = expanding
						size = { -1 30 }

						block "HiredTroopMenAtArmsTypesDataModel" { }

						item = {
							icon = {
								name = "men_at_arms_icon"
								size = { 30 30 }
								texture = "[Regiment.GetMAAType.GetIcon]"
								tooltipwidget = regiment_container_tooltip
								using = tooltip_se

							}
						}
					}

					text_single = {
						name = "hired_by_label"
						visible = "[MercenaryCompany.IsHired]"
						align = left|nobaseline
						text = "[SelectLocalization( MercenaryCompany.IsHiredByLocalPlayer, 'HIRED_TROOPS_VIEW_MC_HIRED_TIME_LEFT', 'HIRED_TROOPS_VIEW_NOT_AVAILABLE' )]"
					}

					soldiers_and_quality_small = {
						datacontext = "[HiredTroopItem.GetComposition]"
					}
				}
			}

			widget = {
				allow_outside = yes
				parentanchor = top|left
				position = { -16 -21 }
				size = { 62 74 }

				coa_realm_medium = {
					datacontext = "[MercenaryCompany.GetTitle.GetHolder]"
					parentanchor = center
					scale = 0.7
				}
			}
		}
	}

	type button_holyorder_list_item = widget
	{
		allow_outside = yes

		button_standard = {
			allow_outside = yes
			parentanchor = bottom|right
			size = { 100% 85% }

			tooltip = "HIRED_TROOPS_VIEW_LIST_HO_BUTTON_TOOLTIP"

			down = "[IsHolyOrderDetailViewShown(HolyOrder.Self)]"

			button = {
				visible = "[Not(GetVariableSystem.Exists( 'hired_troop_detail_view_open' ))]"
				size = { 100% 100% }
				enabled = "[Or(Not(HolyOrder.IsHired), Or(HolyOrder.IsHiredByLocalPlayer, HolyOrder.IsPlayerPatron))]"
				onclick = "[OpenHolyOrderDetailView(HolyOrder.Self)]"
			}

			button = {
				visible = "[GetVariableSystem.Exists( 'hired_troop_detail_view_open' )]"
				size = { 100% 100% }
				onclick = "[PdxGuiTriggerAllAnimations('mercenary_details_refresh')]"

				state = {
					name = _mouse_click
					delay = 0.2
					on_finish = "[OpenHolyOrderDetailView(HolyOrder.Self)]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin_left = 40

				widget = {
					layoutpolicy_horizontal = expanding
					size = { 0 34 }

					# Status available
					highlight_icon = {
						visible = "[Not( HolyOrder.IsHired )]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_green.dds"
					}

					# Status commanded by you
					highlight_icon = {
						visible = "[HolyOrder.IsHired]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_blue.dds"
					}

					highlight_icon = {
						visible = "[And(HolyOrder.IsHired, HolyOrder.IsPledgedToGreatHolyWar)]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_red.dds"
					}

					text_single = {
						parentanchor = vcenter|left
						position = { 0 -1 }
						text = "[HolyOrder.GetName]"
						default_format = "#high"
						align = nobaseline
						max_width = 300
						using = Font_Size_Medium
					}

					text_single = {
						name = "cost_label"
						parentanchor = right|vcenter
						position = { -58 -1 }
						text = "[HolyOrder.GetCostDescForPlayer]"
						align = nobaseline
					}

					# Status icon & background
					widget = {
						parentanchor = top|right
						position = { -10 -8 }
						size = { 42 52 }

						# Status available
						widget = {
							visible = "[Not( HolyOrder.IsHired )]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "MV_MERCENARIES_STATUS_AVAILABLE"

							highlight_icon = {
								parentanchor = center
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_green_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 12 }
								size = { 22 22 }
								texture = "gfx/interface/icons/flat_icons/army_select.dds"
							}
						}

						# Status commanded by you
						widget = {
							visible = "[HolyOrder.IsHired]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "MV_MERCENARIES_STATUS_COMMANDED"

							highlight_icon = {
								parentanchor = center
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_blue_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 8 }
								size = { 28 28 }
								texture = "gfx/interface/icons/flat_icons/army_details.dds"
							}
						}

						# Status unavailable
						widget = {
							visible = "[And(HolyOrder.IsHired, HolyOrder.IsPledgedToGreatHolyWar)]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "HIRED_TROOPS_VIEW_PLEDGED_TO_GREAT_HOLY_WAR"

							highlight_icon = {
								parentanchor = center
								position = { 0 2}
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_red_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 9 }
								size = { 30 30 }
								texture = "gfx/interface/icons/flat_icons/cancel.dds"
							}
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_right = 10
					margin_bottom = 3

					overlappingitembox = {
						name = "regiment_types"
						layoutpolicy_horizontal = expanding
						size = { -1 30 }

						block "HiredTroopMenAtArmsTypesDataModel" { }

						item = {
							icon = {
								datacontext = "[Regiment.GetMAAType]"
								name = "men_at_arms_icon"
								size = { 30 30 }
								texture = "[MenAtArmsType.GetIcon]"

								tooltipwidget = regiment_container_tooltip
							}
						}
					}

					soldiers_and_quality_small = {
						datacontext = "[HiredTroopItem.GetComposition]"
					}
				}
			}

			widget = {
				allow_outside = yes
				parentanchor = top|left
				position = { -16 -21 }
				size = { 62 74 }

				coa_realm_medium = {
					name = "realm_flag"
					datacontext = "[HolyOrder.GetTitle.GetHolder]"
					parentanchor = center
					scale = 0.7
				}
			}
		}
	}
}
