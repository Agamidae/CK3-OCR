
######################################################
################### MILTARY VIEW #####################
######################################################

window = {
	name = "military_view"
	datacontext = "[GetVariableSystem]"
	datacontext = "[GetPlayer]"

	layer = windows_layer
	movable = no

	using = Window_Size_MainTab
	size = { 100% 100% }
	alwaystransparent = yes

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab

		start_sound = {
			soundeffect = "event:/SFX/UI/Character/Lifestyle/sfx_ui_character_lifestyle_martial_lifestyle"
		}
		# start_sound = {
		# 	soundeffect = "event:/SFX/UI/Generic/rightTab/sfx_ui_window_rightTab_Military"
		# }
	}

	state = {
		name = tabs
		trigger_when = "[Not(GetVariableSystem.Exists('military_view_tabs'))]"
		on_start = "[GetVariableSystem.Set( 'military_view_tabs', 'troops' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
	}

	widget = {
		using = Window_Size_CharacterList
		background = { using = Background_Area_Border_Solid }
		visible = "[Not(GetVariableSystem.Exists('ocr'))]"

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			using = ocr_margins

			error_button = {
				layoutpolicy_horizontal = expanding
			}

			### WINDOW CONTENT
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				# using = Window_Margins
				margin_bottom = 30

				header_pattern = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text" {

					}

					blockoverride "illustration_texture" {
						# texture = "gfx/interface/illustrations/window_headers/header_military.dds"
					}

					blockoverride "button_close" {
						onclick = "[MilitaryView.Close]"
					}

					hbox = {
					    layoutpolicy_horizontal = expanding
						spacing = 3

					    text_single = {
					    	raw_text = "[Localize('MILITARY_VIEW')]."
					    }

						datacontext = "[MilitaryView.GetMilitaryItem]"
						datacontext = "[MilitaryItem.GetComposition]"

						text_single = {
							raw_text = "[ArmyComposition.GetSoldierCountString] soldiers,"
						}

						text_single = {
							visible = "[ArmyComposition.HasRaisedSoldiers]"
							raw_text = "[ArmyComposition.GetUnraisedNumberOfSoldiers] unraised,"
						}

						text_single = {
							raw_text = "KNIGHTS_CURRENT_MAX"
						}

						text_single = {
							raw_text = "knights."
						}
					    expand = { }
					}
				}

				flowcontainer = {
					layoutpolicy_horizontal = expanding
					spacing = 3
					direction = vertical
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'troops' )]"

					ignoreinvisible = yes

					button_primary_text = {
					    blockoverride "text" {
					        raw_text = "RAISE_ALL"
					    }
						blockoverride "disabled" {
							visible = "[Not(PlayerCanRaiseAnyRallyPoint)]"
						}
						name = "tutorial_highlight_raise_troops_button"
						datacontext = "[GetPlayer]"
						onclick = "[PlayerRaiseAllRegiments]"
						enabled = "[PlayerCanRaiseAnyRallyPoint]"
						onclick = "[MilitaryView.Close]"
						# onclick = "[OpenGameView('outliner')]"
						clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
						blockoverride "extra" {
							text_single = {
								margin_left = -3
								tooltip = "[GetPlayerRaiseAllTooltip]"
								raw_text = ", tooltip"
							}
						}
					}

					button_text = {
					    blockoverride "text" {
					        raw_text = "RAISE_ALL_RAIDERS"
					    }
						blockoverride "disabled" {
							visible = "[Not(PlayerCanRaiseAnyRaiderRallyPoint)]"
						}
						shortcut = army_split_half
						datacontext = "[GetPlayer]"
						onclick = "[PlayerRaiseAllRaidRegiments]"
						# onclick = "[OpenGameView('outliner')]"
						visible = "[Character.CanRaid]"
						enabled = "[PlayerCanRaiseAnyRaiderRallyPoint]"
						tooltip = "[GetPlayerRaiseAllRaidersTooltip]"
						onclick = "[MilitaryView.Close]"
						clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
						blockoverride "extra" {
							text_single = {
								margin_left = -3
								raw_text = ", F"
							}
						}
						blockoverride "dot" {

						}
					}

					button_text = {
					    blockoverride "text" {
					        raw_text = "DISBAND_ALL"
					    }
						blockoverride "extra" {
							text_single = {
								margin_left = -3
								raw_text = ", j"
							}
						}
						shortcut = army_disband

						blockoverride "disabled" {
							visible = "[Not(PlayerCanDisbandAll)]"
						}
						datacontext = "[GetPlayer]"

						onclick = "[PlayerDisbandAll]"
						enabled = "[PlayerCanDisbandAll]"
						tooltip = "[GetDisbandAllTooltip]"
						clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_unit_army_disband"
						blockoverride "dot" {
						}
					}
				}

				button_text = {
					shortcut = character_finder
					layoutpolicy_horizontal = expanding
					onclick = "[MilitaryView.ShowKnights]"
					datacontext = "[MilitaryItem.GetComposition]"

					blockoverride "text" {
						raw_text = "Manage knights, C."
					}
				}

				vbox = {
					name = "rally_points"
					layoutpolicy_horizontal = expanding
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'troops' )]"

					button_text = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Toggle('rally_points')]"
						blockoverride "text" {
							raw_text = "[GetDataModelSize(MilitaryView.GetRallyPoints)]"
							margin_right = 2
						}
					    blockoverride "extra" {
							spacing = 3
							text_single = {
								raw_text = "Rally points,"
							}
							text_single = {
								visible = "[Not(GetVariableSystem.Exists('rally_points'))]"
								raw_text = "Click to hide."
							}
							text_single = {
								visible = "[GetVariableSystem.Exists('rally_points')]"
								raw_text = "Click to show."
							}
					    }
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(GetVariableSystem.Exists('rally_points'))]"

						dynamicgridbox = {
							name = "rally_point_list"
							datamodel = "[MilitaryView.GetRallyPoints]"
							# flipdirection = yes
							layoutpolicy_horizontal = expanding

							item = {
								button_text = {
									datacontext = "[RallyPointItem.GetRallyPoint]"
									datacontext = "[RallyPoint.GetProvince]"
									button = {
										visible = "[IsIndexFirst]"
										enabled = "[Not(IsGameViewOpen('accolade_view'))]"
										shortcut = map_mode_1
										onclick = "[RallyPointItem.OnClick]"
									}
									blockoverride "text" {
										raw_text = "[Province.GetCounty.GetTitle.GetNameNoTierNoTooltip], [Province.GetNameNoTooltip],"
									}
									blockoverride "extra" {
										spacing = 3
										text_single = {
											visible = "[ObjectsEqual(Province.GetID, GetPlayer.GetCapitalLocation.GetID)]"
											raw_text = "your capital"
										}
										text_single = {
											visible = "[Not(ObjectsEqual(Province.GetID, GetPlayer.GetCapitalLocation.GetID))]"
											raw_text = "AnyProvinceDistance"
										}
										text_single = {
											visible = "[Not(ObjectsEqual(Province.GetID, GetPlayer.GetCapitalLocation.GetID))]"
											raw_text = "AnyProvinceDirection"
										}
										text_single = {
											margin_left = -3
											visible = "[IsIndexFirst]"
											raw_text = ", E"
										}
										dot = { margin_left = -3 }
									}
									onclick = "[RallyPointItem.OnClick]"
								}
							}
						}

						button_text = {
							blockoverride "text" {
								raw_text = "Add Rally Point."
							}
							layoutpolicy_horizontal = expanding
							visible = "[MilitaryView.CanAddRallyPoint]" #TODO
							onclick = "[MilitaryView.OnAddRallyPoint]"
							# tooltip = "[MilitaryView.GetAddRallyPointTooltip]"
						}

						# expand = { }
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					button_text = {
						onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'troops' )]"
						shortcut = speed_1

					    blockoverride "text" {
					        raw_text = "BANNER_TROOPS_TAB"
							align = left
					    }
						blockoverride "extra" {
							text_single = {
								raw_text = ", tab 1[Select_CString(GetVariableSystem.HasValue('military_view_tabs', 'troops'), ', Selected', '')]"
							}
							dot = { }
						}
					}

					button_text = {
						onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'mercenaries' )]"
						shortcut = speed_2

					    blockoverride "text" {
					        raw_text = "MV_MERCENARIES"
							align = left
					    }
						blockoverride "extra" {
							text_single = {
								raw_text = ", tab 2[Select_CString(GetVariableSystem.HasValue('military_view_tabs', 'mercenaries'), ', Selected', '')]"
							}
							dot = { }
						}
					}

					button_text = {
						onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'holy_orders' )]"
						shortcut = speed_3

						blockoverride "pre" {
							text_single = {
								raw_text = "[GetDataModelSize(MilitaryView.GetAllHolyOrders)]"
							}
							space = { }
						}

					    blockoverride "text" {
					        raw_text = "MV_HOLY_ORDERS"
							align = left
					    }
						blockoverride "extra" {
							text_single = {
								raw_text = ", tab 3[Select_CString(GetVariableSystem.HasValue('military_view_tabs', 'holy_orders'), ', Selected', '')]"
							}
							dot = { }
						}
					}
					expand = { }
				}

				button_text = {
					onclick = "[GetVariableSystem.Set( 'military_view_tabs', 'ongoing_wars' )]"
					shortcut = speed_4
					layoutpolicy_horizontal = expanding

					blockoverride "text" {
						raw_text = "All ongoing wars"
						align = left
					}
					blockoverride "extra" {
						text_single = {
							raw_text = ", tab 4[Select_CString(GetVariableSystem.HasValue('military_view_tabs', 'ongoing_wars'), ', Selected', '')]"
						}
						dot = { }
					}
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
				}

				widget = {
					size = { 0 5 }
				}

				vbox = {
					name = "tab_your_armies"
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'troops' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					scrollbox = {
						name = "scrollbox_troops"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						state = {
							name = _show
							using = Animation_FadeIn_Quick
						}

						state = {
							name = _hide
							alpha = 0
						}


						blockoverride "scrollbox_content" {
							datacontext = "[MilitaryView.GetMilitaryItem]"

							vbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding

									vbox = {
										datacontext = "[MilitaryItem.GetComposition]"
										layoutpolicy_horizontal = expanding
										tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
										ignoreinvisible = no

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 3

											text_single = {
												text = "MV_TOTAL_SOLDIERS"
											}

											text_single = {
												raw_text = "[ArmyComposition.GetSoldierCountString]"
											}

											text_single = {
												raw_text = "[ArmyComposition.GetArmyQualityName]."
											}

											expand = { }
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 3
											visible = "[ArmyComposition.HasRaisedSoldiers]"
											tooltip = "[ArmyComposition.GetUnraisedArmyCompositionTooltip]"

											text_single = {
												text = "MV_UNRAISED_SOLDIERS"
											}

											text_single = {
												text = "[ArmyComposition.GetUnraisedNumberOfSoldiers]"
											}

											text_single = {
												raw_text = "[ArmyComposition.GetUnraisedArmyQualityName]."
											}
											expand = { }
										}
									}
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									onclick = "[MilitaryView.ShowLevies]"
									datacontext = "[MilitaryItem.GetComposition]"
								    blockoverride "text" {
								        raw_text = "Levies [ArmyComposition.GetLeviesCountString]"
										align = left
								    }
									blockoverride "extra" {
										text_single = {
											text = MV_LEVY_MAINTENANCE
										}
										text_single = {
											raw_text = "text"
											visible = "[NotEqualTo_int32(ArmyComposition.GetCurrentNumberOfLevies, ArmyComposition.GetMaxNumberOfLevies)]"
										}
									}
									blockoverride "dot" {

									}
								}
								vbox = {
									name = "maa_area"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									margin = { 0 0 }
									spacing = 4

									vbox = {
										layoutpolicy_horizontal = expanding
										name = "heading"

										hbox = {
											layoutpolicy_horizontal = expanding

											text_single = {
												text = "BANNER_MEN_AT_ARMS_LABEL"
											}
											space = { }

											text_single = {
												text = "[MilitaryView.GetMAACountAndCapString]"
												default_format = "#high"
												tooltip = "[MilitaryView.GetMAACountAndCapTooltip]"
												using = tooltip_ne
											}

											dot = { }

											expand = { }
										}

										button_text = {
											layoutpolicy_horizontal = expanding
											blockoverride "disabled" {
												visible = "[Not(PlayerCanRaiseAnyMenAtArmsRallyPoint)]"
											}
										    blockoverride "text" {
										        raw_text = "Raise all men-at-arms."
										    }
											visible = "[Not(IsDataModelEmpty(MilitaryItem.GetMAA))]"
											using = Animation_ShowHide_Standard

											name = "raise_all_men_at_arms"
											datacontext = "[GetPlayer]"
											onclick = "[PlayerRaiseAllMenAtArmsRegiments]"
											enabled = "[PlayerCanRaiseAnyMenAtArmsRallyPoint]"

											tooltip = "[GetPlayerRaiseAllMenAtArmsTooltip]"
											using = tooltip_se
											clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
										}
									}

									button_text = {
										layoutpolicy_horizontal = expanding
										onclick = "[MilitaryItem.OnClick]"
										blockoverride "disabled" {
											visible = "[Not(MilitaryItem.CanCreateAnyMAAType)]"
											# visible = "[Not(MilitaryItem.MaACanBeCreated)]"
										}
										blockoverride "text" {
											raw_text = "ADD_MEN_AT_ARMS_LABEL"
										}
										blockoverride "dot" {

										}
									}

									vbox = { # MAA
										datamodel = "[MilitaryItem.GetMAA]"
										layoutpolicy_horizontal = expanding
										visible = "[Not(GetVariableSystem.Exists('ocr'))]"
										spacing = 3

										item = {
											vbox = {
												layoutpolicy_horizontal = expanding
												datacontext = "[Regiment.GetMAAType]"
												datacontext = "[Regiment.GetOriginProvince]"

												button_text = {
													layoutpolicy_horizontal = expanding
													onclick = "[Regiment.ToggleMaaView]"

													blockoverride "text" {
														text = "[Regiment.BuildCurrentRegimentCountString|V]"
													}

													blockoverride "extra" {
														text_single = {
															raw_text = "[Regiment.GetName],"
														}

														text_single = {
															visible = "[And( Not( Regiment.GetOriginProvince.IsValid ), GetPlayer.HasDomainProvincesForMAAOrigin )]"
															raw_text = "[Localize('MAA_UNSTATIONED')]!"
														}

														text_single = {
															visible = "[And( Not(Regiment.IsRaised), GetPlayer.IsAtWar)]"
															raw_text = "[Localize('MAA_UNRAISED')]."
														}

														text_single = {
															visible = "[Not(And( Not(Regiment.IsRaised), GetPlayer.IsAtWar))]"
															raw_text = "[Localize('MAA_CURRENT_SIZE')],"
														}

														text_single = {
															text = "TOTAL_MAA_COST"
															tooltip = "TOTAL_MAA_COST_TOOLTIP"
														}

														dot = { }
													}
												}

												siege_stat = {
												}

												hbox_maa_stats = {
												}
											}
										}
									}
								}

								vbox = {
									visible = "[Not(IsDataModelEmpty(MilitaryView.GetEventTroops))]"
									layoutpolicy_horizontal = expanding


									button_text = {
										layoutpolicy_horizontal = expanding
										blockoverride "pre" {
											text_single = {
												raw_text = "[GetDataModelSize(MilitaryView.GetEventTroops)]"
												margin_right = 3
											}
										}
										blockoverride "extra" {
											text_single = {
												raw_text = ", click to [Select_CString(GetVariableSystem.Exists('special_troops'), 'Show', 'Hide')]."
											}
										}
									    blockoverride "text" {
									        raw_text = "MILITARY_VIEW_EVENT_TROOPS"
											align = left
									    }
										onclick = "[GetVariableSystem.Toggle('special_troops')]"
									}

									vbox = {
										visible = "[Not(GetVariableSystem.Exists('special_troops'))]"
										datamodel = "[MilitaryView.GetEventTroops]"
										layoutpolicy_horizontal = expanding

										item = {
											hbox_event_troop_item = {
												layoutpolicy_horizontal = expanding
											}
										}
									}
								}

								vbox = {
									visible = "[Or( Not(IsDataModelEmpty(MilitaryView.GetHiredMercenaries)), Not(IsDataModelEmpty(MilitaryView.GetHiredHolyOrders)) )]"
									layoutpolicy_horizontal = expanding

									text_single = {
										layoutpolicy_horizontal = expanding
										text = "MILITARY_VIEW_HIRED_TROOPS"
									}

									vbox = {
										datamodel = "[MilitaryView.GetHiredMercenaries]"
										layoutpolicy_horizontal = expanding

										item = {
											button_mercenary_list_item = {
												blockoverride "your" { }
												datacontext = "[HiredTroopItem.GetMercenaryCompany]"
												layoutpolicy_horizontal = expanding

												blockoverride "HiredTroopMenAtArmsTypesDataModel"
												{
													datamodel = "[HiredTroopItem.GetRegiments]"
												}
											}
										}
									}

									vbox = {
										datamodel = "[MilitaryView.GetHiredHolyOrders]"
										layoutpolicy_horizontal = expanding

										item = {
											button_holyorder_list_item = {
												datacontext = "[HiredTroopItem.GetHolyOrder]"
												layoutpolicy_horizontal = expanding
												blockoverride "your" { }

												blockoverride "HiredTroopMenAtArmsTypesDataModel"
												{
													datamodel = "[HiredTroopItem.GetRegiments]"
												}
											}
										}
									}
								}
							}
						}
					}

					vbox = {
						name = "footer"
						layoutpolicy_horizontal = expanding

						margin = { 10 0 }
						background = {

							using = Background_Bottom_Fade
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							margin = { 5 5 }
							spacing = 2

							background = {
								using = Background_Area
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								button_text = {
									onclick = "[MilitaryView.OnMilitaryReinforcementClick]"
								    blockoverride "text" {
								        raw_text = "MONTHLY_REINFORCEMENT_COST_LABEL"
										align = left
								    }

									blockoverride "pre" {
										# tooltip = "[MilitaryView.GetMilitaryReinforcementCostTooltip]"
										text_single = {
											raw_text = "[Select_CString(MilitaryView.IsMilitaryReinforcementsEnabled, 'Disable', 'Enable')]"
										}
										space = { }
									}
									blockoverride "dot" {

									}
								}

								expand = { }
							}


							vbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									raw_text = "Maintenance is increased due to embarked armies."
									visible = "[MilitaryView.HasEmbarkedArmies]"
									layoutpolicy_horizontal = expanding
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5

									text_single = {
										text = "MONTHLY_MAINTENANCE_LABEL"
									}

									text_single = {
										datacontext = "[MilitaryView.GetGoldMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPrestigeMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPietyMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										text = "COST_RESULT_NOTHING"
										visible = "[And(EqualTo_CFixedPoint(MilitaryView.GetGoldMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ,And( EqualTo_CFixedPoint( MilitaryView.GetPrestigeMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0'), EqualTo_CFixedPoint(MilitaryView.GetPietyMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ) ) ]"

									}
									expand = { }
								}

								hbox = {
									visible = "[MilitaryView.HasAnyRaisedMilitaryExpenses]"
									layoutpolicy_horizontal = expanding
									spacing = 4

									text_single = {
										text = "MONTHLY_MAX_MAINTENANCE_LABEL"
										maximumsize = { 400 -1 }
										tooltip = "MONTHLY_MAX_MAINTENANCE_TT"
										align = left
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedGoldMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = left

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "MONTHLY_MAX_MAINTENANCE_VIEW"
										maximumsize = { 400 -1 }
										default_format = "#weak"
										align = left
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPrestigeMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPrestigeMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = left

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = { }
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPietyMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPietyMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = left

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = { }
										}
									}

									dot = { margin_left = -4 }
									expand = { }
								}
							}
						}
					}
				}

				button_text = {
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'mercenaries' )]"
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "In [Select_CString(GetVariableSystem.Exists('merc_sorting'), 'descending', 'ascending')] order."
					}
					onclick = "[GetVariableSystem.Toggle('merc_sorting')]"
				}

				scrollbox = {
					name = "tab_mercenaries"
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'mercenaries' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					blockoverride "scrollbox_content" {
						vbox = {
							name = "tutorial_highlight_mercenary_list_item"
							datamodel = "[MilitaryView.GetAllMercenaries]"
							visible = "[Not(GetVariableSystem.Exists('merc_sorting'))]"
							layoutpolicy_horizontal = expanding
							item = {
								vbox = {
									layoutpolicy_horizontal = expanding

									button_mercenary_list_item = {
										datacontext = "[HiredTroopItem.GetMercenaryCompany]"
										visible = "[MercenaryCompany.IsHired]"
										layoutpolicy_horizontal = expanding
										size = { 600 60 }

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}

									button_mercenary_list_item = {
										datacontext = "[HiredTroopItem.GetMercenaryCompany]"
										visible = "[Not(MercenaryCompany.IsHired)]"
										layoutpolicy_horizontal = expanding
										size = { 600 60 }

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}
								}
							}
						}
						vbox = {
							datamodel = "[MilitaryView.GetAllMercenaries]"
							visible = "[GetVariableSystem.Exists('merc_sorting')]"
							layoutpolicy_horizontal = expanding
							bottomtotop = yes
							item = {
								vbox = {
									layoutpolicy_horizontal = expanding

									button_mercenary_list_item = {
										datacontext = "[HiredTroopItem.GetMercenaryCompany]"
										visible = "[MercenaryCompany.IsHired]"
										layoutpolicy_horizontal = expanding
										size = { 600 60 }

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}

									button_mercenary_list_item = {
										datacontext = "[HiredTroopItem.GetMercenaryCompany]"
										visible = "[Not(MercenaryCompany.IsHired)]"
										layoutpolicy_horizontal = expanding
										size = { 600 60 }

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}
								}
							}
						}
					}
				}

				scrollbox = {
					name = "tab_holy_orders"
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'holy_orders' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}


					blockoverride "scrollbox_content" {
						vbox = {
							datamodel = "[MilitaryView.GetAllHolyOrders]"
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding
								name = "hired_troops_view_holy_orders_header_item"
								text = "HIRED_TROOPS_VIEW_LIST_HO_HEADER"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								visible = "[And( Not(MilitaryView.CanUseAnyHolyOrder), DataModelHasItems(MilitaryView.GetAllHolyOrders))]"
								text = "HOLY_ORDER_MUST_BE_AT_WAR_WITH_BAD_FAITH"
							}

							hbox = {
								visible = "[Not(DataModelHasItems(MilitaryView.GetAllHolyOrders ))]"
								layoutpolicy_horizontal = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "HIRED_TROOPS_VIEW_LIST_HO_NO_HOS"
									default_format = "#weak"
								}
							}

							button_decision_entry_text = {
								name = "hired_troops_view_create_holy_order_item"
								datacontext = "[GetDecisionWithKey('create_holy_order_decision')]"
								visible = "[Decision.IsShownForPlayer]"
								layoutpolicy_horizontal = expanding
								onclick = "[OpenGameViewData( 'decision_detail', Decision.Self)]"
							}

							item = {
								vbox = {
									layoutpolicy_horizontal = expanding

									button_holyorder_list_item = {
										visible = "[Not(And(HolyOrder.IsHired, HolyOrder.IsPledgedToGreatHolyWar))]"

										datacontext = "[HiredTroopItem.GetHolyOrder]"
										layoutpolicy_horizontal = expanding

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}

									button_holyorder_list_item = {
										visible = "[And(HolyOrder.IsHired, HolyOrder.IsPledgedToGreatHolyWar)]"
										size = { 430 120 }
										datacontext = "[HiredTroopItem.GetHolyOrder]"
										layoutpolicy_horizontal = expanding

										blockoverride "HiredTroopMenAtArmsTypesDataModel"
										{
											datamodel = "[HiredTroopItem.GetRegiments]"
										}
									}
								}
							}
						}
					}
				}

				#wars
				vbox = {
					visible = "[GetVariableSystem.HasValue( 'military_view_tabs', 'ongoing_wars' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						vbox = {
							layoutpolicy_horizontal = expanding

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Sorted by [GetPlayer.MakeScope.Var('sort_wars').GetFlagName]. Change, hotkey T."
								}
								shortcut = map_mode_2
								onclick = "[GetVariableSystem.Set('war_sorting', 'yes')]"
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							button_text = {
							    blockoverride "text" {
							        raw_text = "Showing [GetPlayer.MakeScope.Var('filter_wars').GetFlagName]. Filter, hotkey F."
							    }
								shortcut = army_split_half
								onclick = "[GetVariableSystem.Set('war_filters', 'yes')]"
							}
							expand = { }
						}

						button_text = {
							layoutpolicy_horizontal = expanding
						    blockoverride "text" {
						        raw_text = "[GetDataModelSize(GetPlayer.MakeScope.GetList('ongoing_wars'))] wars. Refresh the list, Shift E."
						    }
							shortcut = map_mode_11
							onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						}

						scrollbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							blockoverride "scrollbox_margins" {
								margin_top = 20
							}

							blockoverride "scrollbox_content" {
								fixedgridbox = {
									addcolumn = 600
									addrow = 40
									layoutpolicy_horizontal = expanding
									# layoutpolicy_vertical = expanding

									datamodel = "[GetPlayer.MakeScope.GetList('ongoing_wars')]"

									item = {
										widget = {
											datacontext = "[Scope.War]"
											size = { 600 40 }

											vbox = {
												margin_left = 5
												layoutpolicy_horizontal = expanding
												spacing = -6

												hbox = {
													layoutpolicy_horizontal = expanding

													text_single = {
														max_width = 450
														text = "[War.GetName]"
													}

													text_single = {
														raw_text = ", started [GuiScope.SetRoot(War.MakeScope).ScriptValue('war_days_sval')] days ago."
													}
													#
													# text_single = {
													# 	raw_text = "[War.GetStartDate.GetStringShort]."
													# }

													expand = { }
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													spacing = 3


													text_single = {
														raw_text = "[GuiScope.SetRoot(War.MakeScope).ScriptValue('attacker_war_score_sval')|+=0]%,"
													}

													text_single = {
														raw_text = "[GuiScope.SetRoot(War.MakeScope).ScriptValue('total_war_attackers')|0]"
													}

													text_single = {
														raw_text = "versus"
													}

													text_single = {
														raw_text = "[GuiScope.SetRoot(War.MakeScope).ScriptValue('total_war_defenders')|0]"
													}

													text_single = {
														raw_text = "men."
													}

													expand = { }
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													spacing = 3
													visible = no


													block "attackers" {
														widget = {
															size = { 200 22 }
															scissor = yes

															flowcontainer = {
																datamodel = "[War.MakeScope.GetList('allies')]"
																item = {
																	char_name = {
																		datacontext = "[Scope.GetCharacter]"
																		blockoverride "text" {
																			raw_text = "[Character.GetPrimaryTitle.GetNameNoTierNoTooltip],"
																		}
																		blockoverride "extra" {
																			text_single = {
																				raw_text = "[Character.GetMilitaryStrengthText]."
																			}
																		}
																	}
																}
															}
														}
													}


													expand = { }
												}
											}

											button = {
												size = { 100% 100% }
												onclick = "[OpenGameViewData( 'war_overview',  War.GetID )]"
											}
										}
									}
								}
							}
						}

						expand = { }
					}
				}
			}
		}

		vbox = {
			using = Window_Background_No_Edge
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			visible = "[GetVariableSystem.Exists('war_sorting')]"
			margin = { 5 0 }
			alwaystransparent = no

			button = {
				onclick = "[GetVariableSystem.Clear('war_sorting')]"
				shortcut = close_window
				shortcut = map_mode_2
			}

			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				spacing = 3

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Sort by:"
					margin_bottom = 5
					background = { using = Background_Area_Border_Solid }
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Total soldiers."
					}
					onclick = "[GetScriptedGui('sort_wars_total').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_sorting')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Sort by date."
					}
					onclick = "[GetScriptedGui('sort_wars_time').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_sorting')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Amount of attackers."
					}
					onclick = "[GetScriptedGui('sort_wars_attackers').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_sorting')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Amount of defenders."
					}
					onclick = "[GetScriptedGui('sort_wars_defenders').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_sorting')]"
				}

				expand = { }
			}
		}

		vbox = {
			using = Window_Background_No_Edge
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			visible = "[GetVariableSystem.Exists('war_filters')]"
			margin = { 5 5 }
			alwaystransparent = no

			button = {
				onclick = "[GetVariableSystem.Clear('war_filters')]"
				shortcut = close_window
				shortcut = army_split_half
			}

			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				spacing = 3

				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Filter by:"
					margin_bottom = 5
					background = { using = Background_Area_Border_Solid }
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "Show all."
					}

					onclick = "[GetScriptedGui('filter_wars_all').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_filters')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('vassal_wars')] Vassal wars."
					}
					onclick = "[GetScriptedGui('filter_wars_your_realm').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_filters')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					visible = "[Not(GetPlayer.IsIndependentRuler)]"
					blockoverride "text" {
						raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('realm_wars')] wars in your realm."
					}
					onclick = "[GetScriptedGui('filter_wars_top_liege_realm').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_filters')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('holy_wars')] Holy wars."
					}
					onclick = "[GetScriptedGui('filter_wars_holy_wars').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_filters')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('great_holy_wars')] Crusades."
					}
					onclick = "[GetScriptedGui('filter_wars_great_holy_wars').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_filters')]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					blockoverride "text" {
						raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue('civil_wars')] Civil wars."
					}
					onclick = "[GetScriptedGui('filter_wars_civil_wars').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetScriptedGui('ongoing_wars_list').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					onclick = "[GetVariableSystem.Clear('war_filters')]"
				}

				expand = { }

			}
		}

	}

	widget = {
		using = Window_Size_MainTab
		parentanchor = right
		visible = "[GetVariableSystem.Exists('ocr')]"

		military_old = {
		}
	}

}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types MilitaryView
{
	type hbox_event_troop_item = vbox {
		spacing = -6
		background = {
			using = Background_Area
		}

		hbox  = {
			name = "header"
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 2

				button_text = {
					blockoverride "text" {
						raw_text = "MILITARY_VIEW_EVENT_TROOPS_RAISE"
						align = left
					}
					onclick = "[OnRaiseEventTroops(MilitaryViewEventTroop.Self)]"
					# visible = "[MilitaryViewEventTroop.CanBeRaised]"
				}

				soldiers_and_quality_small_text = {
					margin_top = 1
					datacontext = "[MilitaryViewEventTroop.GetComposition]"
					blockoverride "background" {
						background = {
							using = Background_Area
							margin = { 3 0 }
						}
					}
				}

				text_single = {
					raw_text = "Levies."
					visible = "[IsDataModelEmpty(MilitaryViewEventTroop.GetRegiments)]"
				}

				text_single = {
					raw_text = "[MilitaryViewEventTroop.GetName]."
				}

				expand = { }
			}
		}

		vbox = {
			margin = { 5 5 }
			layoutpolicy_horizontal = expanding

			hbox = {
				name = "menatarms"
				layoutpolicy_horizontal = expanding
				hbox = {
					name = "regiment_types"
					datamodel = "[MilitaryViewEventTroop.GetRegiments]"
					layoutpolicy_vertical = expanding
					margin_left = 5
					spacing = 3
					item = {
						text_single = {
							raw_text = "[Regiment.GetMAAType.GetName], "
						}
					}
				}

				expand = { }
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				text_single = {
					visible = "[Not(MilitaryViewEventTroop.IsInheritable)]"

					text = "MILITARY_VIEW_EVENT_TROOPS_NOT_INHERITABLE"
				}

				text_single = {
					visible = "[MilitaryViewEventTroop.IsInheritable]"

					text = "MILITARY_VIEW_EVENT_TROOPS_INHERITABLE"
				}
				dot = { }
				expand = { }
			}


			hbox = {
				datacontext = "[MilitaryViewEventTroop.GetAssociatedWar]"
				visible = "[War.IsValid]"

				layoutpolicy_horizontal = expanding

				text_single = {
					visible = "[MilitaryViewEventTroop.IsInheritable]"
					text = "MILITARY_VIEW_EVENT_TROOPS_ASSOCIATED_WAR"
					max_width = 450
					multiline = yes
				}

				expand = { }
			}
		}
	}
}

types HiredTroops
{
	type button_mercenary_list_item = button {
		size = { 430 110 }

		background = {
			using = Background_Area
		}

		# tooltip = "HIRED_TROOPS_VIEW_LIST_MC_BUTTON_TOOLTIP"
		# tooltip_enabled = "[Or(Not(MercenaryCompany.IsHired), MercenaryCompany.IsHiredByLocalPlayer)]"

		down = "[IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self)]"

		button = {
			visible = "[Or( IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self), Not(GetVariableSystem.Exists( 'hired_troop_detail_view_open' )))]"
			size = { 100% 100% }
			enabled = "[Or(Not(MercenaryCompany.IsHired), MercenaryCompany.IsHiredByLocalPlayer)]"
			onclick = "[ToggleMercenaryCompanyDetailView(MercenaryCompany.Self)]"
		}

		button = {
			visible = "[And( GetVariableSystem.Exists( 'hired_troop_detail_view_open' ), Not( IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self) ) )]"
			size = { 100% 100% }
			onclick = "[PdxGuiTriggerAllAnimations('mercenary_details_refresh')]"

			state = {
				name = _mouse_click
				delay = 0.2
				on_finish = "[ToggleMercenaryCompanyDetailView(MercenaryCompany.Self)]"
			}
		}

		vbox = {
			set_parent_size_to_minimum = yes
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 5 2 }

			hbox = {
				layoutpolicy_horizontal = expanding
				allow_outside = yes

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					ignoreinvisible = yes

					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[MercenaryCompany.IsHired]"
						ignoreinvisible = no

						text_single = {
							name = "hired_by_label"
							text = "[SelectLocalization( MercenaryCompany.IsHiredByLocalPlayer, 'HIRED_TROOPS_VIEW_HIRED_BY_ME_LEFT', 'HIRED_TROOPS_VIEW_NOT_AVAILABLE' )]"
						}

						text_single = {
							name = "hired_info_time_left"
							visible = "[MercenaryCompany.IsHiredByLocalPlayer]"
							text = "HIRED_TROOPS_VIEW_MC_HIRED_TIME_LEFT"
						}

						expand = { }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[And(MercenaryCompany.WillGoInBankruptcy(GetPlayer.Self),  Not(MercenaryCompany.IsHired))]"
						raw_text = "Can't hire! It will put you into too much debt."
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						block "your" {
							text_single = {
								raw_text = "Hire"
								margin_right = 3
								visible = "[Or(Not(MercenaryCompany.IsHired), MercenaryCompany.IsHiredByLocalPlayer)]"
							}

							text_single = {
								name = "cost_label"
								raw_text = "[MercenaryCompany.GetCostDesc],"
							}

							space = { }
						}

						text_single = {
							datacontext = "[MercenaryCompany.GetComposition]"
							tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
							name = "strength"
							raw_text = "[ArmyComposition.GetSoldierCountString] men."
						}

						char_name = {
							datacontext = "[MercenaryCompany.GetTitle.GetHolder]"
							blockoverride "text" {
								raw_text = "[Character.GetSkill('martial')] Martial leader."
							}
						}

						space = { }

						text_single = {
							raw_text = "[MercenaryCompany.GetName]."
							max_width = 280
						}

						expand = { }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[And(MercenaryCompany.WillGoInDebt(GetPlayer.Self), Not(MercenaryCompany.IsHired))]"
						raw_text = "Hiring will put you into debt."
					}

					expand = { }
				}

				expand = { }
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3

				text_single = {
					raw_text = "View details. Has"
				}

				flowcontainer = {
					name = "regiment_types"
					layoutpolicy_horizontal = expanding

					block "HiredTroopMenAtArmsTypesDataModel" { }

					item = {
						text_single = {
							margin_right = 5
							raw_text = "[Regiment.GetMAAType.GetName],"
						}
					}
				}

				expand = { }
			}

			expand = { }
		}
	}

	type button_holyorder_list_item = button {
		size = { 430 45 }

		background = {
			using = Background_Area
		}

		# tooltip = "HIRED_TROOPS_VIEW_LIST_HO_BUTTON_TOOLTIP"

		down = "[IsHolyOrderDetailViewShown(HolyOrder.Self)]"

		button = {
			visible = "[Not(GetVariableSystem.Exists( 'hired_troop_detail_view_open' ))]"
			size = { 100% 100% }
			enabled = "[Or(Not(HolyOrder.IsHired), Or(HolyOrder.IsHiredByLocalPlayer, HolyOrder.IsPlayerPatron))]"
			onclick = "[OpenHolyOrderDetailView(HolyOrder.Self)]"
		}

		button = {
			visible = "[GetVariableSystem.Exists( 'hired_troop_detail_view_open' )]"
			size = { 100% 100% }
			onclick = "[PdxGuiTriggerAllAnimations('mercenary_details_refresh')]"

			state = {
				name = _mouse_click
				delay = 0.2
				on_finish = "[OpenHolyOrderDetailView(HolyOrder.Self)]"
			}
		}

		vbox = {
			resizeparent = yes
			margin = { 5 5 }

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				minimumsize = { 80 0 }
				allow_outside = yes

				hbox = {
					layoutpolicy_horizontal = expanding
					block "your" {
						text_single = {
							raw_text = "Hire"
							margin_right = 3
							visible = "[Not(HolyOrder.IsHired)]"
						}

						text_single = {
							raw_text = "Already hired."
							margin_right = 3
							visible = "[HolyOrder.IsHired]"
						}
					}

					text_single = {
						datacontext = "[HolyOrder.GetComposition]"
						tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
						name = "strength"
						raw_text = "[ArmyComposition.GetSoldierCountString] men."
					}

					char_name = {
						datacontext = "[HolyOrder.GetTitle.GetHolder]"
						blockoverride "text" {
							raw_text = "[Character.GetSkill('martial')] Martial leader."
						}
					}

					space = { }

					text_single = {
						raw_text = "[HolyOrder.GetName]."
						max_width = 280
					}

					block "your" {
						text_single = {
							name = "cost_label"
							raw_text = " Cost: [HolyOrder.GetCostDescForPlayer]."
						}
					}

					expand = { }
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 3

				text_single = {
					raw_text = "View details. Has"
				}

				flowcontainer = {
					name = "regiment_types"
					layoutpolicy_horizontal = expanding

					block "HiredTroopMenAtArmsTypesDataModel" { }

					item = {
						text_single = {
							margin_right = 5
							raw_text = "[Regiment.GetMAAType.GetName],"
						}
					}
				}

				expand = { }
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				visible = "[And(HolyOrder.IsHired, HolyOrder.IsPledgedToGreatHolyWar)]"
				text = "HIRED_TROOPS_VIEW_PLEDGED_TO_GREAT_HOLY_WAR"
				default_format = "#low"
			}
		}
	}
}
