######################################################
############## DECISIONS DETAIL VIEW #################
######################################################
@decision_width = 700

window = {
	name = "decisiondetail_view"
	# position = "[DecisionDetailView.GetDynamicPosition]" # can be changed by DECISION_DETAILS_VIEW_POSITION_DEFAULT and DECISION_DETAILS_VIEW_POSITION_COURT in 00_graphics.txt
	using = base_ocr_window
	layer = middle
	movable = "[Is('ocr')]"

	state = {
		name = _show
		# using = Sound_WindowShow_Standard
		# position = "[DecisionDetailView.GetDynamicPosition]"
		on_start = "[GetVariableSystem.Clear('show_decision_next_step')]"
		on_finish = "[Clear('decision_selected_entry')]"
	}

	state = {
		name = _hide
		using = Sound_WindowHide_Standard
	}

	window_ocr = {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		blockoverride "show_window" {
			# visible = "[Or(Isnt('ocr'), Not(DecisionDetailView.IsDefaultWidgetShown))]"
		}

		blockoverride "ocr_header" {

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "[DecisionDetailView.GetTitle]"
				}
				blockoverride "extra" {
					text_single = {
						raw_text = ", [Get('decision_selected_entry')]"
					}
				}

				blockoverride "button_close"
				{
					onclick = "[DecisionDetailView.Close]"
				}
			}
		}

		blockoverride "ocr_content" {
			vbox = {
				datacontext = "[DecisionDetailView.GetDecision]"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				vbox = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 550 220 }
					visible = "[And(Not(DecisionDetailView.IsOpenedFromRoyalCourt), Is('ocr'))]"

					background = {
						name = "illustrations"
						texture = "[DecisionDetailView.GetDecisionPicture]"
						margin_top = 10
						alpha = 0.7
						using = Mask_Rough_Edges
					}
				}

				decision_detail_buttons = {}
				decision_detail_buttons_old = {}

				decision_detail_view_content = {}

				expand = { }
			}
		}
	}

	# decisiondetail_view_old = {
	# 	visible = "[And(Is('ocr'), DecisionDetailView.IsDefaultWidgetShown)]"
	# }
}

types DecisionDetailViewTypes
{
	type decision_detail_description_content = vbox {
		layoutpolicy_horizontal = expanding

		visible = "[DecisionDetailView.IsDefaultWidgetShown]"

		vbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			margin_bottom = 10

			dynamicgridbox = {
				layoutpolicy_horizontal = expanding
				name = "additional_widgets_desc_container"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10

			vbox = {
				name = "effect"
				visible = "[DecisionDetailView.HasEffect]"
				layoutpolicy_horizontal = expanding

				button_text = {
					layoutpolicy_horizontal = expanding
					shortcut = map_mode_1
					onclick = "[Toggle('decision_effects')]"
					blockoverride "text" {
						text = "DECISION_DETAIL_EFFECTS"
					}
					blockoverride "extra" {
						comma = {}
						text_single = {
							raw_text = "[Collapse('decision_effects')] E."
						}
					}
				}

				text_multi_wide = {
					visible = "[Isnt('decision_effects')]"
					layoutpolicy_horizontal = expanding
					text = "[DecisionDetailView.GetEffectDescription]"
				}
			}

			vbox = {
				name = "requirements"
				visible = "[DecisionDetailView.HasRequirements]"
				layoutpolicy_horizontal = expanding

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "DECISION_DETAIL_REQUIREMENTS"
				}

				text_multi_wide = {
					text = "[DecisionDetailView.GetRequirementsDescription]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				text_single = {
					layoutpolicy_horizontal = expanding
					raw_text = "Description:"
				}

				text_multi_wide = {
					name = "description"
					text = "[DecisionDetailView.GetDescription]"
				}
			}
		}
	}

	type decision_custom_widget_content = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		visible = "[Not(DecisionDetailView.IsDefaultWidgetShown)]"

		dynamicgridbox = {
			name = "custom_widgets_container"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
		}
	}

	type decision_detail_view_content = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		decision_custom_widget_content = {}
		decision_detail_description_content = {}

		expand = { }
	}

	type decision_confirm_button = button_primary_text {
		using = ocr
		blockoverride "disabled" {
			visible = "[Not(DecisionDetailView.CanConfirm)]"
		}
		enabled = "[DecisionDetailView.CanConfirm]"
    tooltip = "[DecisionDetailView.GetConfirmTooltip]"
    onclick = "[DecisionDetailView.Confirm]"
		blockoverride "text" {
			raw_text = "Confirm [DecisionDetailView.GetConfirmText]"
		}
		blockoverride "hotkey" {
			visible = "[DecisionDetailView.CanConfirm]"
		}

    default_clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
    clicksound = "[DecisionDetailView.GetConfirmClickSound]"
	}

	type decision_detail_buttons = vbox {
		using = ocr
		layoutpolicy_horizontal = expanding

		vbox = {
			layoutpolicy_horizontal = expanding

			text_single = {
				layoutpolicy_horizontal = expanding
				visible = "[DecisionDetailView.HasCost]"
				raw_text = "[DecisionDetailView.GetCostDescription]."
			}

			# default step
			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Not(GetVariableSystem.HasValue( 'show_decision_next_step', 'true' ))]"

				# next step button
				button_primary_text = {
					layoutpolicy_horizontal = expanding

					visible = "[DecisionDetailView.HasNextStep]"

					tooltip = "[DecisionDetailView.GetConfirmTooltip]"
					onclick = "[GetVariableSystem.Set('show_decision_next_step', 'true')]"
					onclick = "[DecisionDetailView.ToggleCustomWidgetState]"

					blockoverride "text" {
						raw_text = "Next step: [DecisionDetailView.GetNextStepButtonLabel]"
					}

					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_advance"
				}

				decision_confirm_button = {
					layoutpolicy_horizontal = expanding
					visible = "[Not( DecisionDetailView.HasNextStep )]"
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					text_multi_wide = {
						visible = "[And(Not( DecisionDetailView.HasNextStep ), Not(DecisionDetailView.CanConfirm))]"
						raw_text = "[DecisionDetailView.GetConfirmTooltip]."
					}

					expand = { }
				}
			}

			vbox = {
				visible = "[GetVariableSystem.HasValue( 'show_decision_next_step', 'true' )]"
				layoutpolicy_horizontal = expanding

				button_text = {
					layoutpolicy_horizontal = expanding
					name = "back"
					visible = "[DecisionDetailView.HasNextStep]"
					onclick = "[GetVariableSystem.Clear('show_decision_next_step')]"
					onclick = "[DecisionDetailView.ToggleCustomWidgetState]"
					onclick = "[Clear('decision_selected_entry')]"
					shortcut = go_back
					blockoverride "text" {
						text = "BACK_LABEL"
					}
					blockoverride "extra" {
						comma = {}
						text_single = {
							raw_text = "B."
						}
					}
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
				}

				decision_confirm_button = {
					layoutpolicy_horizontal = expanding
				}
			}

			button_checked_text = {
				layoutpolicy_horizontal = expanding
				shortcut = army_split_half
				onclick = "[Decision.OnToggleImportantForPlayer]"

				blockoverride "visible"
				{
					visible = "[Not(Decision.IsImportantForPlayer)]"
				}

				blockoverride "text"
				{
					text = "DECISIONS_VIEW_MAJOR_TOGGLE"
				}
				blockoverride "extra" {
					spacing = 3
					comma = {}
					text_single = {
						raw_text = "F."
					}
				}
			}

			expand = {}
		}
	}

	type decision_confirm_button_old = button_primary {
		block "visible" {
			using = vanilla
		}
		enabled = "[DecisionDetailView.CanConfirm]"
				tooltip = "[DecisionDetailView.GetConfirmTooltip]"
				onclick = "[DecisionDetailView.Confirm]"

				text = "[DecisionDetailView.GetConfirmText]"

				default_clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
				clicksound = "[DecisionDetailView.GetConfirmClickSound]"
	}

	type decision_detail_buttons_old = vbox {
		layoutpolicy_horizontal = expanding
		using = vanilla

		vbox = {
			layoutpolicy_horizontal = expanding
			margin_top = 4
			margin_bottom = 10
			spacing = 5

			text_single = {
				name = "cost"
				visible = "[DecisionDetailView.HasCost]"
				text = "[DecisionDetailView.GetCostDescription]"
				using = Font_Size_Medium
				default_format = "#high"
				align = nobaseline
			}

			spacer = {
				size = { 10 2 }
			}

			# default step
			widget = {
				visible = "[Not(GetVariableSystem.HasValue( 'show_decision_next_step', 'true' ))]"
				size = { 380 50 }

				# next step button
				button_primary = {
					size = { 100% 100% }

					visible = "[DecisionDetailView.HasNextStep]"

					tooltip = "[DecisionDetailView.GetConfirmTooltip]"
					onclick = "[GetVariableSystem.Set('show_decision_next_step', 'true')]"
					onclick = "[DecisionDetailView.ToggleCustomWidgetState]"

					text = "[DecisionDetailView.GetNextStepButtonLabel]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_advance"
				}


				decision_confirm_button_old = {
					blockoverride "visible" {
						visible = "[Not( DecisionDetailView.HasNextStep )]"
					}
					size = { 100% 100% }
				}
			}

			hbox = {
				visible = "[GetVariableSystem.HasValue( 'show_decision_next_step', 'true' )]"

				spacing = 10

				button_standard_back = {
					name = "back"
					size = { 180 50 }
					visible = "[DecisionDetailView.HasNextStep]"
					onclick = "[GetVariableSystem.Clear('show_decision_next_step')]"
					onclick = "[DecisionDetailView.ToggleCustomWidgetState]"
					text = "BACK_LABEL"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
				}

				decision_confirm_button_old = {
					size = { 250 50 }
				}
			}

			spacer = {
				size = { 0 2 }
			}

			button_checkbox_label = {
				onclick = "[Decision.OnToggleImportantForPlayer]"

				blockoverride "checkbox"
				{
					checked = "[Decision.IsImportantForPlayer]"
				}

				blockoverride "text"
				{
					text = "DECISIONS_VIEW_MAJOR_TOGGLE"
				}
			}

			expand = {}
		}
	}
}
