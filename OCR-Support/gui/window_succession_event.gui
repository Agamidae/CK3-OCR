######################################################
################# SUCCESSION EVENT ###################
######################################################

window = {
	name = "succession_event_window"
	size = { 100% 100% }
	movable = no
	layer = confirmation
	alwaystransparent = yes
	using = TooltipFocus

	state = {
		name =_show
		on_finish = "[PdxGuiTriggerAllAnimations('ruler_transition_appear')]"
		on_start = "[GetVariableSystem.Clear( 'ruler_transition_remove_fade')]"
	}

	state = {
		name = ruler_transition_reset
		delay = 0.25
		on_finish = "[SuccessionEventWindow.Close]"
	}

	state = {
		name =_show
		start_sound = {
			soundeffect = "event:/SFX/UI/Character/sfx_ui_character_death"
		}
	}

	button = {
		size = { 100% 100% }
		alpha = 0
		visible = "[Not(GetVariableSystem.Exists( 'ruler_transition_remove_fade'))]"

		state = {
			name = _show
			trigger_on_create = yes
			duration = 0.1
			alpha = 0.7
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Standard
		}

		state = {
			name = _mouse_click
			on_start = "[GetVariableSystem.Set( 'ruler_transition_remove_fade', 'true')]"
		}

		background = {
			using = Background_Area_Dark
			margin = { 20 20 }
		}
	}

	window_ocr = {
		blockoverride "ocr_content" {
			vbox = {
				layoutpolicy_horizontal = expanding

				vbox = {
					visible = "[SuccessionEventWindow.IsSuccession]"
					layoutpolicy_horizontal = expanding

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[SuccessionEventWindow.GetHeader]."
					}

					vbox = {
						visible = "[SuccessionEventWindow.IsSuccessorTabOpen]"
						layoutpolicy_horizontal = expanding

						vbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							### Center box
							vbox = {
								name = "center"
								datacontext = "[SuccessionEventWindow.GetDeadCharacter]"
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								# hbox = {
								#     layoutpolicy_horizontal = expanding
								#
								#     visible = "[SuccessionEventWindow.GetPlayerHeir.IsValid]"
								#
								# 	text_single = {
								# 		layoutpolicy_horizontal = expanding
								# 		raw_text = "You heir kept the primary title."
								# 		visible = "[ObjectsEqual(SuccessionEventWindow.GetPlayerHeir.GetPrimaryTitle, SuccessionEventWindow.GetDeadCharacter.GetPrimaryTitle)]"
								# 	}
								#     expand = { }
								# }


								hbox = {
									layoutpolicy_horizontal = expanding

									visible = "[Not(ObjectsEqual(SuccessionEventWindow.GetPlayerHeir.GetPrimaryTitle, SuccessionEventWindow.GetDeadCharacter.GetPrimaryTitle))]"

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "Your primary title changed to [SuccessionEventWindow.GetPlayerHeir.GetPrimaryTitle.GetNameNoTooltip]."
									}

									expand = { }
								}

								hbox = {
									visible = "[SuccessionEventWindow.HasLostTitles]"
									layoutpolicy_horizontal = expanding

									button_text = {
										enabled = "[DataModelHasItems( SuccessionEventWindow.GetInheritedTitles )]"
										onclick = "[PdxGuiTriggerAllAnimations('ruler_transition_tab_switch')]"
										onclick = "[SuccessionEventWindow.OpenTitlesTab]"

										blockoverride "text" {
											alwaystransparent = yes
											text = "SUCCESSION_LOST_TITLES"
										}
									}

									expand = { }
								}

								hbox = {
									name = "bottom"
									visible = "[SuccessionEventWindow.IsSuccession]"
									layoutpolicy_horizontal = expanding

									vbox = {
										layoutpolicy_horizontal = expanding

										button_primary_text = {
											layoutpolicy_horizontal = expanding
											name = "close_button"
											visible = "[SuccessionEventWindow.GetPlayerHeir.IsValid]"
											onclick = "[SuccessionEventWindow.Close]"
											blockoverride "text" {
												text = "SUCCESSION_EVENT_WINDOW_CLOSE"
											}
										}

										button_text = {
											layoutpolicy_horizontal = expanding
											name = "select_destiny_button"
											visible = "[SuccessionEventWindow.GetPlayerHeir.IsValid]"
											onclick = "[SuccessionEventWindow.ToggleSelectDestinyOpen]"
											enabled = "[SuccessionEventWindow.HasSelectDestinyCharacters]"
											shortcut = mapmode_house_secondary

											blockoverride "disabled" {
												visible = "[Not(SuccessionEventWindow.HasSelectDestinyCharacters)]"
											}
											blockoverride "text" {
												text = "SUCCESSION_EVENT_WINDOW_SELECT_DESTINY"
											}
											blockoverride "extra" {
												text_single = {
													visible = "[SuccessionEventWindow.HasSelectDestinyCharacters]"
													raw_text = "Shift D."
												}
											}

											tooltip = "[SelectLocalization( SuccessionEventWindow.HasSelectDestinyCharacters, 'SUCCESSION_EVENT_WINDOW_SELECT_DESTINY_TT', 'SUCCESSION_EVENT_WINDOW_SELECT_DESTINY_NO_OPTIONS_TT')]"
										}

										button_text = {
											layoutpolicy_horizontal = expanding
											name = "observer_button"
											visible = "[And( Not(SuccessionEventWindow.GetPlayerHeir.IsValid), SuccessionEventWindow.CanChangeCharacter)]"
											blockoverride "text" {
												text = "SUCCESSION_EVENT_WINDOW_OBSERVER"
											}
											onclick = "[SuccessionEventWindow.GoToObserver]"
										}

										button_text = {
											layoutpolicy_horizontal = expanding
											name = "change_button"
											visible = "[And( Not(SuccessionEventWindow.GetPlayerHeir.IsValid), SuccessionEventWindow.CanChangeCharacter)]"
											blockoverride "text" {
												text = "SUCCESSION_EVENT_WINDOW_CHANGE_CHARACTER"
											}
											onclick = "[SuccessionEventWindow.ChooseNewCharacter]"
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											visible = "[Not(SuccessionEventWindow.GetPlayerHeir.IsValid)]"

											button_text = {
												layoutpolicy_horizontal = expanding
												name = "menu_button"
												blockoverride "text" {
													text = "[SuccessionEventWindow.GetExitName]"
												}
												tooltip = "[SuccessionEventWindow.GetExitTooltip]"
												onclick = "[SuccessionEventWindow.GoToMenu]"
											}

											expand = { }
										}
									}
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									margin_top = 10
									spacing = 5

									hbox = {
										layoutpolicy_horizontal = expanding

										text_multi = {
											name = "dead_description"
											autoresize = yes
											max_width = 650
											text = "[SuccessionEventWindow.GetDeadDesc]"
											visible = "[And(Not(SuccessionEventWindow.IsEndDateReached), Not(SuccessionEventWindow.GetDeadCharacter.IsAlive))]"
										}

										expand = {}
									}


									hbox = {
										layoutpolicy_horizontal = expanding

										text_multi = {
											name = "heir_description"
											autoresize = yes
											max_width = 650
											text = "[SuccessionEventWindow.GetHeirDesc]"
											visible = "[Not(SuccessionEventWindow.IsEndDateReached)]"
										}

										expand = {}
									}

									hbox = {
										layoutpolicy_horizontal = expanding

										text_multi = {
											name = "end_date_description"
											autoresize = yes
											max_width = 650
											text = "SUCCESSION_EVENT_WINDOW_END_DATE_DESC"
											visible = "[SuccessionEventWindow.IsEndDateReached]"
										}

										expand = {}
									}

								}
							}


							# Left Character
							vbox = {
								name = "left"
								layoutpolicy_horizontal = expanding
								datacontext = "[SuccessionEventWindow.GetDeadCharacterLegacy]"

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "Previous ruler,"
								}
								datacontext = "[SuccessionEventWindow.GetDeadCharacter]"

								button_text = {
									layoutpolicy_horizontal = expanding
									using = char_click
									blockoverride "text" {
										text = "LEGACY_NAME"
									}
									blockoverride "dot" { }
								}
								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "LEGACY_REIGN"
									tooltip = "LEGACY_REIGN_TT"
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									margin_left = 3
									raw_text = "View legacy, tooltip."

									tooltipwidget = {
										container = {
											using = DefaultTooltipBackground
											alwaystransparent = no

											legacy_status_ocr = {
												margin = { 10 10 }
												layoutpolicy_horizontal = expanding
											}
										}
									}
								}


								spacer = {
									size = { 20 10 }
								}

								expand = {
									layoutpolicy_vertical = expanding
								}
							}

							### Right Character
							vbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									visible = "[SuccessionEventWindow.GetPlayerHeir.IsValid]"
									text = "LEGACY_CONTINUE_PLAYING"
								}

								vbox_heir_ocr = {
									layoutpolicy_horizontal = expanding
									name = "right"
									datacontext = "[SuccessionEventWindow.GetPlayerHeirLegacy]"
									visible = "[SuccessionEventWindow.GetPlayerHeir.IsValid]"
								}


								vbox = {
									layoutpolicy_horizontal = expanding
									margin_top = 5
									datacontext = "[SuccessionEventWindow.GetDeadCharacter.GetDynasty]"
									visible = "[Not(SuccessionEventWindow.GetPlayerHeir.IsValid)]"


									text_multi = {
										layoutpolicy_horizontal = expanding
										text = "SUCCESSION_NO_HEIR"
										visible = "[Not( SuccessionEventWindow.GetDeadCharacter.IsAlive )]"
										autoresize = yes
										max_width = 650
									}

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "Dynasty."
									}

									text_multi = {
										layoutpolicy_horizontal = expanding
										text = "SUCCESSION_DYNASTY_INFO"
										autoresize = yes
										max_width = 650
										min_width = 650
									}
								}
							}
						}
					}
				}

				vbox = {
					name = "top_lineage"
					visible = "[SuccessionEventWindow.IsLineage]"

					text_single = {
						text = "SUCCESSION_INHERITED_TITLES"
						default_format = "#light_background"
						align = left
						layoutpolicy_horizontal = expanding
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						fixedgridbox = {
							name = "inherited"
							datamodel = "[SuccessionEventWindow.GetInheritedTitles]"
							datamodel_wrap = 11
							addcolumn = 56
							addrow = 56
							flipdirection = yes

							item = {
								coa_title_small_crown = {
								}
							}
						}

						expand = { }
					}

					spacer = {
						size = { 5 5 }
					}

					hbox = {
						text_single = {
							name = "dynasty_name"
							text = "SUCCESSION_EVENT_WINDOW_HEADING_LINEAGE"
							default_format = "#high"
							using = Font_Type_Flavor
							align = center
							fontsize = 30
						}

						button_icon = {
							name = "close_button"
							using = close_window_ocr
							tooltip = "CLOSE_TOOLTIP"
							texture = "gfx/interface/icons/flat_icons/window_close.dds"
							onclick = "[SuccessionEventWindow.Close]"
						}
					}

					divider_light = {
						layoutpolicy_horizontal = expanding
					}
				}

				### TITLES
				vbox = {
					visible = "[SuccessionEventWindow.IsTitlesTabOpen]"
					name = "titles"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					margin = { 16 4 }
					spacing = 6

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[GetDataModelSize(SuccessionEventWindow.GetInheritedTitles)] [Localize('SUCCESSION_INHERITED_TITLES')]."
					}

					background = {
						using = Background_Area_With_Header_Dark
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						fixedgridbox = { # hbox doesn't work with datamodel_wrap
						name = "inherited"
						datamodel = "[SuccessionEventWindow.GetInheritedTitles]"
						addcolumn = 500
						addrow = 22

						item = {
							text_single = {
								raw_text = "[Title.GetNameNoTooltip],"
							}
						}
					}

					expand = { }
				}

				hbox = {
					visible = "[SuccessionEventWindow.HasLostTitles]"
					layoutpolicy_horizontal = expanding

					text_single = {
						text = "SUCCESSION_LOST_TITLES"
					}

					expand = { }
				}

				vbox = {
					name = "lost_titles"
					visible = "[And( SuccessionEventWindow.ShowLostTitles, SuccessionEventWindow.HasLostTitles )]"
					layoutpolicy_horizontal = expanding
					margin_top = 5

					vbox = {
						datamodel = "[SuccessionEventWindow.GetLostTitles]"
						layoutpolicy_horizontal = expanding

						item = {
							vbox = {
								layoutpolicy_horizontal = expanding

								char_name = {
									layoutpolicy_horizontal = expanding
									blockoverride "pre" {
										spacing = 3
										text_single = {
											raw_text = "[GetDataModelSize(SuccessionEventWindowLostTitlesItem.GetTitles)] to"
										}
									}
									datacontext = "[SuccessionEventWindowLostTitlesItem.GetHeir]"
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									datamodel = "[SuccessionEventWindowLostTitlesItem.GetTitles]"
									item = {
										text_single = {
											layoutpolicy_horizontal = expanding
											raw_text = "[Title.GetNameNoTooltip]."
										}
									}
								}
							}
						}
					}
				}

				expand = {
					layoutpolicy_vertical = expanding
				}
			}

				# lineage
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[SuccessionEventWindow.IsLineageTabOpen]"

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "Your lineage, [GetDataModelSize(SuccessionEventWindow.GetLegacy)] predecessors."
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						datamodel = "[SuccessionEventWindow.GetLegacy]"

						item = {
							vbox_legacy_item_ocr = {
								layoutpolicy_horizontal = expanding
							}
						}
					}

					vbox_current_lineage_ocr = {
						layoutpolicy_horizontal = expanding
						visible = "[SuccessionEventWindow.GetPlayerHeir.IsValid]"
						datacontext = "[SuccessionEventWindow.GetPlayerHeirLegacy]"
					}
				}

				vbox = {
					visible = "[SuccessionEventWindow.IsSuccession]"
					layoutpolicy_horizontal = expanding

					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "Tabs."
					}

					button_text = {
						shortcut = speed_1
						layoutpolicy_horizontal = expanding
						down = "[SuccessionEventWindow.IsSuccessorTabOpen]"
						onclick = "[PdxGuiTriggerAllAnimations('ruler_transition_tab_switch')]"

						state = {
							name = _mouse_click
							delay = 0.1
							on_finish = "[SuccessionEventWindow.OpenSuccessorTab]"
						}

						blockoverride "pre" {
							spacing = 3
							text_single = {
								raw_text = "Selected,"
								visible = "[SuccessionEventWindow.IsSuccessorTabOpen]"
							}
							text_single = {
								raw_text = "1,"
							}
							text_single = {
								raw_text = "SUCCESSION_SUCCESSOR_TAB_TT"
							}
						}
					}

					button_text = {
						shortcut = speed_2
						layoutpolicy_horizontal = expanding
						down = "[SuccessionEventWindow.IsTitlesTabOpen]"
						visible = "[DataModelHasItems( SuccessionEventWindow.GetInheritedTitles )]"
						onclick = "[PdxGuiTriggerAllAnimations('ruler_transition_tab_switch')]"
						onclick = "[SuccessionEventWindow.OpenTitlesTab]"
						state = {
							name = _mouse_click
							delay = 0.1
							on_finish = "[SuccessionEventWindow.OpenTitlesTab]"
						}

						blockoverride "pre" {
							spacing = 3
							text_single = {
								raw_text = "Selected,"
								visible = "[SuccessionEventWindow.IsTitlesTabOpen]"
							}
							text_single = {
								raw_text = "2,"
							}
							text_single = {
								raw_text = "SUCCESSION_TITLES_TAB_TT"
							}
						}
					}

					button_text = {
						shortcut = speed_3
						layoutpolicy_horizontal = expanding
						down = "[SuccessionEventWindow.IsLineageTabOpen]"
						onclick = "[PdxGuiTriggerAllAnimations('ruler_transition_tab_switch')]"

						state = {
							name = _mouse_click
							delay = 0.1
							on_finish = "[SuccessionEventWindow.OpenLineageTab]"
						}

						blockoverride "pre" {
							spacing = 3
							text_single = {
								raw_text = "Selected,"
								visible = "[SuccessionEventWindow.IsLineageTabOpen]"
							}
							text_single = {
								raw_text = "3,"
							}
							text_single = {
								raw_text = "SUCCESSION_LINEAGE_TAB_TT"
							}
						}
					}
				}
			}
		}
	}

	succession_event_window_old = {
		using = vanilla
	}
}

window = {
	name = "succession_select_destiny_window"
	using = base_ocr_window

	button = {
		onclick = "[SuccessionEventWindow.ToggleSelectDestinyOpen]"
		onclick = "[GetVariableSystem.Clear( 'random_destiny_expanded' )]"
		using = close_window_ocr
	}

	window_ocr = {
		blockoverride "ocr_header" {
			flowcontainer = {
				ignoreinvisible = yes
				direction = vertical
				layoutpolicy_horizontal = expanding
				visible = "[Isnt('random_destiny_expanded')]"

				button_text = {
					shortcut = character_finder
					blockoverride "pre" {
						text_single = {
							raw_text = "Confirm,"
						}
					}
					blockoverride "text" {
						raw_text = "SUCCESSION_EVENT_WINDOW_CLOSE"
					}
					onclick = "[SuccessionEventWindow.ConfirmSelectDestinyCharacter]"
					visible = "[And(Not( SuccessionEventWindow.IsSelectedDestinyCharacterRandom ), SuccessionEventWindow.GetSelectedDestinyCharacter.GetCharacter.IsValid)]"
					name = "continue_button"
					blockoverride "extra" {
						comma = {}
						text_single = {
							raw_text = "C."
						}
					}
				}

				button_text = {
					shortcut = character_finder
					blockoverride "pre" {
						text_single = {
							raw_text = "Confirm,"
						}
					}
					blockoverride "text" {
						raw_text = "SUCCESSION_EVENT_WINDOW_RANDOM_CLOSE"
					}
					onclick = "[SuccessionEventWindow.ConfirmSelectDestinyCharacter]"
					visible = "[And(SuccessionEventWindow.IsSelectedDestinyCharacterRandom, SuccessionEventWindow.GetSelectedDestinyCharacter.GetCharacter.IsValid)]"
					name = "continue_button_random"

					blockoverride "extra" {
						comma = {}
						text_single = {
							raw_text = "C."
						}
					}
				}

				button_text = {
					onclick = "[GetVariableSystem.Toggle( 'random_destiny_expanded' )]"
					visible = "[SuccessionEventWindow.HasRandomDestinyCharacters]"
					shortcut = map_mode_18

					blockoverride "text" {
						raw_text = "SUCCESSION_EVENT_WINDOW_RANDOM_DESTINY"
					}
					blockoverride "extra" {
						comma = {}
						text_single = {
							raw_text = "[GetDataModelSize(SuccessionEventWindow.GetRandomDestinyCharacters)] options, Control R."
						}
					}
				}

				flowcontainer = {
					ignoreinvisible = yes
					spacing = 3

					text_single = {
						raw_text = "choose_destiny_header_text"
					}

					comma = {}

					text_single = {
						raw_text = "[CountItems] options:"

						hbox = {
							datamodel = "[SuccessionEventWindow.GetMainDestinyCharacters]"
							name = "items"
							item = {
								hbox = {
									visible = "[Character.IsValid]"
								}
							}
						}
					}
				}

			}
		}

		blockoverride "ocr_content" {
			flowcontainer = {
				ignoreinvisible = yes
				direction = vertical
				layoutpolicy_horizontal = expanding

				flowcontainer = {
					margin_bottom = 10
					visible = "[Isnt('random_destiny_expanded')]"
					ignoreinvisible = yes
					direction = vertical
					datamodel = "[SuccessionEventWindow.GetMainDestinyCharacters]"

					text_single = {
						raw_text = "Click to select, right-click or use number key to view character."
					}

					item = {
						widget_destiny_character_ocr = {

							blockoverride "hide" {
								visible = no
							}
						}
					}
				}

				text_single = {
					visible = "[Isnt('random_destiny_expanded')]"
					raw_text = "Details below:"
				}

				flowcontainer = {
					visible = "[Isnt('random_destiny_expanded')]"
					ignoreinvisible = yes
					direction = vertical
					datamodel = "[SuccessionEventWindow.GetMainDestinyCharacters]"
					name = "items"

					item = {
						widget_destiny_character_ocr = {}
					}
				}

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical
					visible = "[Is('random_destiny_expanded')]"

					text_single = {
						text = "SUCCESSION_EVENT_WINDOW_RANDOM_DESTINY_HEADER"
					}

					button = {
						onclick = "[Clear( 'random_destiny_expanded' )]"
						using = close_window_ocr
					}

					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical

						datamodel = "[SuccessionEventWindow.GetRandomDestinyCharacters]"

						item = {
							button_text = {
								enabled = "[DestinyCharacter.GetCharacter.IsValid]"
								onclick = "[SuccessionEventWindow.SelectDestinyCharacter( DestinyCharacter.Self )]"
								onclick = "[Clear( 'random_destiny_expanded' )]"

								tooltip = "[DestinyCharacter.GetTypeTooltip]"

								shortcuts_list = {
									blockoverride "click" {
										enabled = "[DestinyCharacter.GetCharacter.IsValid]"
										onclick = "[SuccessionEventWindow.SelectDestinyCharacter( DestinyCharacter.Self )]"
										onclick = "[Clear( 'random_destiny_expanded' )]"
									}
								}
								blockoverride "num" {}
								blockoverride "pre" {
									text_single = {
										visible = "[Not(DestinyCharacter.GetCharacter.IsValid)]"
										raw_text = "Disabled,"
									}
								}
								blockoverride "text" {
									raw_text = "[DestinyCharacter.GetTypeName]."
								}
							}
						}
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types Legacy
{
	type tree_background = background {
		texture = "gfx/interface/window_ruler_transition/illustration_tree.dds"
		margin = { -35 -50 }
		fittype = centercrop
		spriteType = corneredTiled
		spriteborder = { 30 0 }
		alpha = 0.8

		using = Mask_Rough_Edges

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_brushed.dds"
			blend_mode = alphamultiply
		}

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_fade_halfcircle_inverted.dds"
			blend_mode = alphamultiply
			alpha = 0.6
		}

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
			blend_mode = alphamultiply
			alpha = 0.3
		}

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
			blend_mode = alphamultiply
			alpha = 0.4
		}
	}

	type vbox_dynasty = vbox {
		spacing = 20
		spacer = {
			size = { 240 0 }
		}

		coa_dynasty_huge = { }

		text_label_center = {
			text = "SUCCESSION_DYNASTY_INFO"
			autoresize = yes
			max_width = 200
			min_width = 200
		}
		text_multi = {
			text = "SUCCESSION_NO_HEIR"
			visible = "[Not( SuccessionEventWindow.GetDeadCharacter.IsAlive )]"
			autoresize = yes
			max_width = 220
			align = center
		}

		expand = {
			layoutpolicy_vertical = expanding
		}
	}

	type vbox_heir = vbox {
		margin_bottom = 5

		widget = {
			size = { 250 340 }

			portrait_body = {
				datacontext = "[SuccessionEventWindow.GetPlayerHeir]"
				blockoverride "status_icons" { }
				blockoverride "opinion_box" { }
				blockoverride "coa" { }
				blockoverride "dead_icon" { }
				scale = 1.2
			}
		}

		spacer = {
			size = { 20 10 }
		}

		hbox_legacy_status = { }

		text_single = {
			layoutpolicy_horizontal = expanding
			autoresize = no
			text = "LEGACY_NAME"
			default_format = "#high"
			align = center
		}

		text_single = {
			text = "[SuccessionEventWindow.GetPlayerHeir.GetSuccessionRelation( SuccessionEventWindow.GetDeadCharacter)]"
		}

		spacer = {
			size = { 20 10 }
		}

		text_label_center = {
			visible = "[SuccessionEventWindow.GetPlayerHeir.IsAtWar]"
			text = "LEGACY_IS_AT_WAR"
		}

		text_label_center = {
			visible = "[Not(SuccessionEventWindow.GetPlayerHeir.GetPlayerHeir.IsValid)]"
			text = "LEGACY_NO_HEIR"
		}

		expand = { }
	}

	type vbox_current_lineage = vbox {
		datacontext = "[SuccessionEventWindow.GetPlayerHeir]"

		portrait_body = {
			blockoverride "status_icons" { }
			blockoverride "opinion_box" { }
			blockoverride "coa" { }
			blockoverride "dead_icon" { }

			blockoverride "portrait_button"
			{
				size = { 300 444 }
			}

			blockoverride "portrait_glow" { }
		}

		hbox_legacy_status = { }

		text_single = {
			text = "LEGACY_NAME"
			default_Format = "#high"
		}

		text_single = {
			text = "LEGACY_LINEAGE_YOU"
		}
	}

	type hbox_legacy_status = hbox {
		spacing = 2

		icon = {
			datacontext = "[LegacyItem.GetCharacter]"
			visible = "[Not(Character.IsAlive)]"
			name = "death"
			size = { 24 24 }
			tooltip = "CHARACTER_DEAD_TOOLTIP"
			texture = "[Character.GetDeathReasonIcon]"
			using = tooltip_se
		}

		widget = {
			visible = "[LegacyItem.GetFoundedHouse.IsValid]"
			name = "house"
			size = { 24 24 }
			tooltip = "LEGACY_FOUNDED_HOUSE"
			using = tooltip_se

			coa_house_microscopic = {
				datacontext = "[LegacyItem.GetFoundedHouse]"
				blockoverride "coa_button" { }
			}
		}

		icon = {
			visible = "[LegacyItem.GetFoundedFaith.IsValid]"
			name = "faith"
			size = { 24 24 }
			texture = "[LegacyItem.GetFoundedFaith.GetIcon]"
			tooltip = "LEGACY_FOUNDED_FAITH"
			using = tooltip_se
		}

		icon = {
			visible = "[And(LegacyItem.GetCharacter.IsAlive, LegacyItem.WasCulturalHead)]"
			name = "cultural_head"
			size = { 24 24 }
			texture = "gfx/interface/icons/icon_culture.dds"
			tooltip = "LEGACY_CULTURAL_HEAD"
			using = tooltip_se
		}

		icon = {
			visible = "[And(Not(LegacyItem.GetCharacter.IsAlive), LegacyItem.WasCulturalHead)]"
			name = "cultural_head_dead"
			size = { 24 24 }
			texture = "gfx/interface/icons/icon_culture.dds"
			tooltip = "LEGACY_CULTURAL_HEAD_DEAD"
			using = tooltip_se
		}

		icon = {
			visible = "[GreaterThanOrEqualTo_CFixedPoint(LegacyItem.GetDread, GetDefine('NCharacter', 'BOLD_LEVEL_INTIMIDATED') )]"
			name = "dreaded"
			size = { 24 24 }
			texture = "gfx/interface/icons/icon_dread.dds"
			tooltip = "LEGACY_DREADED"
			using = tooltip_se
		}

		icon = {
			name = "renowned"
			size = { 24 24 }
			texture = "[GetPrestigeLevelIcon(LegacyItem.GetPrestigeLevel)]"
			tooltip = "LEGACY_RENOWNED"
			using = tooltip_se
		}


		icon = {
			name = "pious"
			size = { 24 24 }
			texture = "[GetPietyLevelIcon(LegacyItem.GetPietyLevel)]"
			tooltip = "LEGACY_PIOUS"
			using = tooltip_se
		}

		icon = {
			name = "lifestyle"
			visible = "[LegacyItem.GetLifestyle.IsValid]"
			size = { 24 24 }
			texture = "[LegacyItem.GetLifestyle.GetIcon]"
			framesize = { 160 160 }

			tooltip = "LEGACY_LIFESTYLE"
			using = tooltip_se

		}

		icon = {
			name = "wars"
			visible = "[LegacyItem.HasFoughtInWar]"
			size = { 24 24 }
			texture = "gfx/interface/icons/character_interactions/declare_war_interaction.dds"
			tooltip = "LEGACY_WARS"
			using = tooltip_se
		}

		container = {
			name = "activities_hosted"
			visible = "[DataModelHasItems( LegacyItem.GetActivitiesHosted )]"

			icon = {
				datacontext_from_model = {
					datamodel = "[LegacyItem.GetActivitiesHosted]"
					index = 0
				}

				texture = "[ActivityType.GetIcon]"
				size = { 24 24 }
				tooltip = "LEGACY_HOSTED_ACTIVITIES"
				using = tooltip_se
			}
		}

		container = {
			name = "activities_attended"
			visible = "[DataModelHasItems( LegacyItem.GetActivitiesAttended )]"

			icon = {
				datacontext_from_model = {
					datamodel = "[LegacyItem.GetActivitiesAttended]"
					index = 0
				}

				texture = "[ActivityType.GetIcon]"
				size = { 24 24 }
				tooltip = "LEGACY_ATTENDED_ACTIVITIES"
				using = tooltip_se
			}
		}
	}

	type vbox_legacy_item = vbox {
		datacontext = "[LegacyItem.GetCharacter]"
		layoutpolicy_vertical = expanding

		portrait_body = {
			blockoverride "status_icons" { }
			blockoverride "opinion_box" { }
			blockoverride "coa" { }
			blockoverride "dead_icon" { }

			blockoverride "portrait_button"
			{
				size = { 300 444 }
			}
		}

		hbox_legacy_status = { }

		text_single = {
			text = "LEGACY_NAME"
			default_Format = "#high"
		}

		text_single = {
			text = "LEGACY_REIGN"
			tooltip = "LEGACY_REIGN_TT"
		}
	}

	type widget_destiny_character = widget {

		size = { 290 560 }

		datacontext = "[DestinyCharacter.GetCharacter]"

		visible = "[Character.IsValid]"

		background = {
			using = Background_Area_Solid
			margin_bottom = 0
			alpha = 0.5
		}

		widget = {
			layoutpolicy_horizontal = expanding
			parentanchor = top|right
			position = { -30 0 }
			size = { 50 50 }
			allow_outside = yes

			expand = {}

			block "coa" {
				coa_realm_medium_crown = {
					visible = "[Character.HasLandedTitles]"
					scale = 1
				}
			}

			block "unlanded" {
				icon = {
					position = { 0 35 }
					visible = "[Not( Character.HasLandedTitles)]"
					parentanchor = center
					size = { 76 76 }
					texture = "gfx/interface/icons/government_types/landless_adventurer_government_large.dds"
					tooltip = "will_become_adventurer"
				}
			}

			icon = {
				position = { 28 60 }
				visible = "[ObjectsEqual( Character.Self, SuccessionEventWindow.GetFavoriteChildCharacter )]"
				parentanchor = center
				size = { 30 30 }
				texture = "gfx/interface/icons/character_interactions/designate_favorite.dds"

				tooltip = "SUCCESSION_IS_FAVORITE_CHILD_TT"

				glow = {
					glow_radius = 8
					using = Glow_Standard
					using = Color_Black
				}
			}
		}

		portrait_body = {
			parentanchor = bottom|hcenter
			position = { 0 -130}

			blockoverride "status_icons" {}
			blockoverride "opinion_box" {}
			blockoverride "coa" {}
			blockoverride "dead_icon" {}

			blockoverride "portrait_button"
			{
				size = { 300 440 }
			}

			blockoverride "portrait_texture"
			{
				portrait_texture = "[Character.GetAnimatedPortrait('environment_body', 'camera_body', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
			}
		}

		widget = {

			size = { 290 180 }
			parentanchor = bottom|hcenter
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 5 2 }
				spacing = 5
				margin_top = 5
				margin_bottom = 10

				background = {
					using = Background_Area_Solid
					alpha = 0.8
				}

				vbox = {
					spacing = -5
					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 3 0 }
						margin_top = 1

						text_single = {
							name = "character_name"
							raw_text = "[Character.GetShortUINameNotMeNoTooltip], "
							margin_left = 2
							max_width = 230
							fontsize = 20
							fontsize_min = 14
							align = nobaseline
							default_format = "#medium"
							tooltip = "[Character.GetShortUINameNotMeNoTooltip]"
						}

						text_single = {
							name = "character_age"
							raw_text = " [Character.GetAge]"
							default_format = "#low"
							tooltip = "[Character.GetDeathOrBirthDateInfo]"
							fontsize = 20
							align = nobaseline
						}

						hbox = {
							margin_left = 4
							spacing = -3

							icon = {
								visible = "[Not(Character.IsDeadAndValid)]"
								size = { 23 23 }
								framesize = { 60 60 }
								frame = "[Character.GetHealthIconFrame]"
								texture = "gfx/interface/icons/character_status/icon_health.dds"
								tooltip = "[Character.GetHealthInfo]"
							}
							icon = {
								visible = "[Character.IsDeadAndValid]"
								size = { 23 23 }
								texture = "gfx/interface/icons/character_status/icon_dead.dds"
								tooltip = "CHARACTER_DEAD_TOOLTIP"
							}
						}

						expand = {}
					}

					text_single = {
						text = "[Character.GetSuccessionRelation( SuccessionEventWindow.GetDeadCharacter )]"
						default_Format = "#low"
					}
				}

				vbox = {
					datacontext = "[Character.GetDestinyScriptedValueBreakdown( 'destiny_score_interest', SuccessionEventWindow.GetDeadCharacter, SuccessionEventWindow.GetPlayerHeir )]"
					spacing = 5
					layoutpolicy_horizontal = expanding

					tooltipwidget = {
						recursive = yes

						scripted_score_breakdown_tooltip = {
							blockoverride "header_text" {
								text = "character_interest_breakdown_header"
								default_format = "#T"
							}
						}
					}
					vbox = {
						min_height = 60
						layoutpolicy_horizontal = expanding
						vbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[DataModelFirst( ValueBreakdown.GetSubValuesDescending, '(int32)3' )]"

							item = {
								hbox = {
									name = "value_breakdown"

									layoutpolicy_horizontal = expanding

									text_single = {
										align = center
										name = "name"
										layoutpolicy_horizontal = expanding
										text = "[ValueBreakdown.GetName]"
										margin_right = 10
										default_format = "#help"
									}
								}
							}
						}
					}

					text_single = {
						text = "character_difficulty_text"
						using = tooltip_es
						layoutpolicy_horizontal = expanding
						align = center

						tooltipwidget = {
							scripted_score_breakdown_tooltip = {
								blockoverride "breakdown_datacontext"
								{
									datacontext = "[Character.GetDestinyScriptedValueBreakdown( 'character_difficulty_value', SuccessionEventWindow.GetDeadCharacter, SuccessionEventWindow.GetPlayerHeir )]"
								}
								blockoverride "header_text" {
									text = "character_difficulty_breakdown_header"
									default_format = "#T"
								}
							}
						}
					}
				}

				button_standard = {
					text = "[SelectLocalization( ObjectsEqual( DestinyCharacter.GetTypeName, SuccessionEventWindow.GetSelectedDestinyCharacter.GetTypeName ), 'SUCCESSION_UNSELECT_DESTINY_CHARACTER', 'SUCCESSION_SELECT_DESTINY_CHARACTER' )]"
					onclick = "[SuccessionEventWindow.SelectDestinyCharacter( DestinyCharacter.Self )]"
					enabled = "[Character.IsAlive]"
				}
			}
		}
	}
}

types OCR {

	type vbox_legacy_item_ocr = vbox {
		datacontext = "[LegacyItem.GetCharacter]"
		text_single = {
			layoutpolicy_horizontal = expanding
			text = "LEGACY_NAME"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			text = "LEGACY_REIGN"
			tooltip = "LEGACY_REIGN_TT"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			margin_left = 3
			raw_text = "View legacy, tooltip."
			tooltipwidget = {
				container = {
					using = DefaultTooltipBackground
					alwaystransparent = no

					legacy_status_ocr = {
						margin = { 10 10 }
						layoutpolicy_horizontal = expanding
					}
				}
			}
		}
	}

	type legacy_status_ocr = flowcontainer {

		ignoreinvisible = yes
		direction = vertical
		text_single = {
			datacontext = "[LegacyItem.GetCharacter]"
			visible = "[Not(Character.IsAlive)]"
			raw_text = "[Localize('CHARACTER_DEAD_TOOLTIP')]."
		}

		text_single = {
			visible = "[LegacyItem.GetFoundedHouse.IsValid]"
			text = "LEGACY_FOUNDED_HOUSE"
		}

		text_single = {
			visible = "[LegacyItem.GetFoundedFaith.IsValid]"
			text = "LEGACY_FOUNDED_FAITH"
		}

		text_single = {
			visible = "[And(LegacyItem.GetCharacter.IsAlive, LegacyItem.WasCulturalHead)]"
			text = "LEGACY_CULTURAL_HEAD"
		}

		text_single = {
			visible = "[And(Not(LegacyItem.GetCharacter.IsAlive), LegacyItem.WasCulturalHead)]"
			text = "LEGACY_CULTURAL_HEAD_DEAD"
		}

		text_single = {
			visible = "[GreaterThanOrEqualTo_CFixedPoint(LegacyItem.GetDread, GetDefine('NCharacter', 'BOLD_LEVEL_INTIMIDATED') )]"
			text = "LEGACY_DREADED"
		}

		text_single = {
			raw_text = "[Localize('LEGACY_RENOWNED')]."
		}

		text_single = {
			raw_text = "[Localize('LEGACY_PIOUS')]."
		}

		text_single = {
			visible = "[LegacyItem.GetLifestyle.IsValid]"
			text = "LEGACY_LIFESTYLE"
		}

		text_single = {
			visible = "[LegacyItem.HasFoughtInWar]"
			text = "LEGACY_WARS"
		}
		text_single = {
			text = "LEGACY_HOSTED_ACTIVITIES"
			visible = "[DataModelHasItems( LegacyItem.GetActivitiesHosted )]"
			datacontext_from_model = {
				datamodel = "[LegacyItem.GetActivitiesHosted]"
				index = 0
			}
		}

		text_single = {
			text = "LEGACY_ATTENDED_ACTIVITIES"
			visible = "[DataModelHasItems( LegacyItem.GetActivitiesAttended )]"
			datacontext_from_model = {
				datamodel = "[LegacyItem.GetActivitiesAttended]"
				index = 0
			}
		}
	}

	type vbox_heir_ocr = vbox {

		button_text = {
			layoutpolicy_horizontal = expanding
			using = char_click
				blockoverride "text" {
						raw_text = "LEGACY_NAME"
				}
			blockoverride "dot" { }
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			raw_text = "[SuccessionEventWindow.GetPlayerHeir.GetSuccessionRelation( SuccessionEventWindow.GetDeadCharacter)]."
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			margin_left = 3
			raw_text = "View legacy, tooltip."

			tooltipwidget = {
				container = {
					using = DefaultTooltipBackground
					alwaystransparent = no

					legacy_status_ocr = {
						margin = { 10 10 }
						layoutpolicy_horizontal = expanding
					}
				}
			}
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			visible = "[SuccessionEventWindow.GetPlayerHeir.IsAtWar]"
			text = "LEGACY_IS_AT_WAR"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(SuccessionEventWindow.GetPlayerHeir.GetPlayerHeir.IsValid)]"
			text = "LEGACY_NO_HEIR"
		}

		expand = { }
	}

	type vbox_current_lineage_ocr = vbox {
		datacontext = "[SuccessionEventWindow.GetPlayerHeir]"


		text_single = {
			layoutpolicy_horizontal = expanding
			text = "LEGACY_NAME"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			text = "LEGACY_LINEAGE_YOU"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			margin_left = 3
			raw_text = "View legacy, tooltip."

			tooltipwidget = {
				container = {
					using = DefaultTooltipBackground
					alwaystransparent = no

					legacy_status_ocr = {
						margin = { 10 10 }
						layoutpolicy_horizontal = expanding
					}
				}
			}
		}
	}

	type widget_destiny_character_ocr = flowcontainer {
		direction = vertical
		ignoreinvisible = yes
		datacontext = "[DestinyCharacter.GetCharacter]"

		visible = "[Character.IsValid]"

		flowcontainer = {
			ignoreinvisible = yes
			direction = vertical

			button_text = {
				onclick = "[SuccessionEventWindow.SelectDestinyCharacter( DestinyCharacter.Self )]"
				using = char_rightclick
				enabled = "[Character.IsAlive]"

				shortcuts_list = {
					blockoverride "click" {
						using = char_click
					}
				}
				blockoverride "num"{}
				blockoverride "pre" {
					text_single = {
						text = "[AddTextIf( ObjectsEqual( DestinyCharacter.GetTypeName, SuccessionEventWindow.GetSelectedDestinyCharacter.GetTypeName ), 'Selected')]"
					}
					text_single = {
						visible = "[Character.IsDeadAndValid]"
						raw_text = "Dead, can't pick"
					}
				}
				blockoverride "text" {
					raw_text = "[Character.GetUINameNoTooltip]"
				}
				blockoverride "extra" {
					text_single = {
						raw_text = " [Character.GetAge] years,"
						tooltip = "[Character.GetDeathOrBirthDateInfo]"
					}

					text_single = {
						raw_text = "[Character.Custom('character_health')] health."
						visible = "[Not(Character.IsDeadAndValid)]"

						tooltipwidget = {
							health_tooltip = { }
						}
					}
				}
			}
		}

		flowcontainer = {
			ignoreinvisible = yes
			direction = vertical
			block "hide" {}

			text_single = {
				text = "[Character.GetSuccessionRelation( SuccessionEventWindow.GetDeadCharacter )]"
			}
			flowcontainer = {
				ignoreinvisible = yes
				spacing = 3

				container = {
					ignoreinvisible = yes
					visible = "[Character.IsAlive]"

					char_text_soldiers = {}
				}

				button_text = {
					onclick = "[Set('expand_view', 'personality')]"
					onclick = "[Set('personality_view', 'traits')]"
					blockoverride "text" {
						margin_left = -3
						raw_text = "[CharYouSheHe(Character)|U] [Select_CString( Character.IsAlive, CharAreIs(Character), CharWereWas(Character))]"
					}
					blockoverride "extra" {
						flowcontainer = {
							datamodel = "[Character.GetTraitIndices]"
							spacing = 3
							ignoreinvisible =yes

							item = {
								text_single = {
									datacontext = "[GetTraitForIndex(int32.GetInt)]"
									datacontext = "[Character.GetFaith]"
									visible = "[Trait.IsPersonality]"
									raw_text = "[Trait.GetName(Character.Self)],"
									alwaystransparent = yes
								}
							}
						}

						# flowcontainer = {
						# 	ignoreinvisible = yes
						# 	datacontext = "[CharacterWindow.GetTraitArrays]"
						# 	visible = "[DataModelHasItems(TraitArrays.GetTraits)]"
						#
						# 	text_single = {
						# 		block "some_extra_traits" {
						# 			visible = "[And(LessThan_int32(GetDataModelSize(TraitArrays.GetPersonalityTraits), '(int32)3'), GreaterThan_int32(Subtract_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)3'), '(int32)0'))]"
						# 			raw_text = "+[Subtract_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)3')]."
						# 		}
						# 	}
						#
						# 	text_single = {
						# 		block "all_extra_traits" {
						# 			visible = "[GreaterThan_int32(GetDataModelSize(TraitArrays.GetPersonalityTraits), '(int32)2')]"
						# 		}
						# 		raw_text = "+[GetDataModelSize(TraitArrays.GetTraits)]."
						# 	}
						# }
					}
				}

				flowcontainer = {
					margin_left = -3
					background = { using = Background_Area_Border_Solid margin_bottom = 2 }

					button_text = {
						datacontext = "[Character.GetFaith]"
						tooltipwidget = { faith_tooltip_click = { } }
						blockoverride "text" {
							raw_text = "[Faith.GetAdjective],"
						}
						onclick = "[OpenGameViewData( 'faith', Faith.GetID )]"
					}

					button_text = {
						datacontext = "[Character.GetCulture]"
						onclick = "[OpenGameViewData( 'culture_window', Culture.GetID )]"
						blockoverride "text" {
							raw_text = "[Culture.GetName]."
						}
						tooltipwidget = { culture_tooltip_click = { } }
					}
				}
			}

			flow_skills_grid_character_named_full = {}

			flowcontainer = {
				ignoreinvisible = yes
				spacing = 3

				visible = "[Or(Not( Character.HasLandedTitles), ObjectsEqual( Character.Self, SuccessionEventWindow.GetFavoriteChildCharacter ))]"

				text_single = {
					visible = "[Not( Character.HasLandedTitles)]"
					raw_text = "will_become_adventurer"
				}

				comma = {
					visible = "[Not( Character.HasLandedTitles)]"
				}

				text_single = {
					visible = "[ObjectsEqual( Character.Self, SuccessionEventWindow.GetFavoriteChildCharacter )]"
					raw_text = "SUCCESSION_IS_FAVORITE_CHILD_TT"
				}

				dot_l = {
					visible = "[ObjectsEqual( Character.Self, SuccessionEventWindow.GetFavoriteChildCharacter )]"
				}
			}

			flowcontainer = {
				ignoreinvisible = yes
				direction = vertical
				datacontext = "[Character.GetDestinyScriptedValueBreakdown( 'destiny_score_interest', SuccessionEventWindow.GetDeadCharacter, SuccessionEventWindow.GetPlayerHeir )]"
				tooltipwidget = {
					recursive = yes

					scripted_score_breakdown_tooltip = {
						blockoverride "header_text" {
							text = "character_interest_breakdown_header"
							default_format = "#T"
						}
					}
				}

				datamodel = "[DataModelFirst( ValueBreakdown.GetSubValuesDescending, '(int32)3' )]"

				item = {
					text_single = {
						text = "[ValueBreakdown.GetName]"
					}
				}

				text_single = {
					text = "character_difficulty_text"

					tooltipwidget = {
						scripted_score_breakdown_tooltip = {
							blockoverride "breakdown_datacontext"
							{
								datacontext = "[Character.GetDestinyScriptedValueBreakdown( 'character_difficulty_value', SuccessionEventWindow.GetDeadCharacter, SuccessionEventWindow.GetPlayerHeir )]"
							}
							blockoverride "header_text" {
								text = "character_difficulty_breakdown_header"
							}
						}
					}
				}
			}
		}
	}
}
