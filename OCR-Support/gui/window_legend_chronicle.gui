window = {
	name = "legend_chronicle"
	layer = windows_layer
	using = base_ocr_window

	state = {
		name = _show
		using = Animation_FadeIn_Quick
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
	}

	window_ocr = {
		blockoverride "ocr_header" {
			hbox = {
				layoutpolicy_horizontal = expanding

				buttons_window_control = {
					blockoverride "button_close"
					{
						onclick = "[LegendChronicleWindow.Close]"
					}
				}

				text_single = {
					name = "header_text"
					text = "LEGEND_CHRONICLE_HEADER"

				}

				expand = {}
			}
		}
		blockoverride "ocr_content" {
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				datacontext = "[LegendChronicleWindow.GetLegend]"
				datacontext = "[Legend.GetType]"

				vbox = {
					name = "parchment_background"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					vbox = {
						name = "main_content"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						hbox = {
							layoutpolicy_horizontal = expanding

							spacing = 3

							text_single = {
								raw_text = "[Legend.GetQualityLevel]"
							}

							text_single = {
								name = "legend_title"
								raw_text = "[Legend.GetNameNoTooltip]."
							}

							text_single = {
								raw_text = "Created [Legend.GetCreationDate.GetString]."
							}

							expand = {}
						}

						vbox = {
							name = "buttons"
							layoutpolicy_horizontal = expanding

							vbox = {
								name = "owner_buttons"
								visible = "[ObjectsEqual( Legend.GetOwner.Self, GetPlayer )]"
								layoutpolicy_horizontal = expanding

								button_text = {
									layoutpolicy_horizontal = expanding
									shortcut = map_mode_1
									blockoverride "disabled" {
										visible = "[Not(IsValidCommand( Legend.IncreaseLegendQuality ))]"
									}
									blockoverride "text" {
										text = "LEGEND_CHRONICLE_INCREASE_QUALITY"
									}
									blockoverride "extra" {
										comma = {}
										text_single = {
											raw_text = "E."
										}
									}
									onclick = "[PostCommand( Legend.IncreaseLegendQuality )]"
									enabled = "[IsValidCommand( Legend.IncreaseLegendQuality )]"
									tooltip = "[GetCommandDesc( Legend.IncreaseLegendQuality )]"
									# onclick = "[CreateCommandPopup( Legend.IncreaseLegendQuality )]"
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									shortcut = character_finder
									blockoverride "text" {
										text = "LEGEND_CHRONICLE_COMPLETE"
									}
									blockoverride "extra" {
										comma = {}
										text_single = {
											raw_text = "C."
										}
									}
									blockoverride "disabled" {
										visible = "[Not(IsValidCommand( Legend.Complete ))]"
									}
									onclick = "[CreateCommandPopup( Legend.Complete )]"
									enabled = "[IsValidCommand( Legend.Complete )]"
									tooltip = "[GetCommandDesc( Legend.Complete )]"
								}

							}

							vbox = {
								name = "unowned_buttons"
								visible = "[And( Not( Legend.GetOwner.IsValid ), Not( ObjectsEqual( Legend.GetOwner.Self, GetPlayer ) ) )]"
								layoutpolicy_horizontal = expanding

								button_text = {
									layoutpolicy_horizontal = expanding
									shortcut = mapmode_empires_secondary
									blockoverride "text" {
										text = "LEGEND_CHRONICLE_START_OWNING"
									}
									blockoverride "extra" {
										comma = {}
										text_single = {
											raw_text = "O."
										}
									}
									blockoverride "disabled" {
										visible = "[Not(IsValidCommand( GetPlayer.TakeUnownedLegend( Legend.Self ) ))]"
									}
									onclick = "[PostCommand( GetPlayer.TakeUnownedLegend( Legend.Self ) )]"
									enabled = "[IsValidCommand( GetPlayer.TakeUnownedLegend( Legend.Self ) )]"
									tooltip = "[GetCommandDesc( GetPlayer.TakeUnownedLegend( Legend.Self ) )]"
								}
							}

							vbox = {
								name = "non_owner_buttons"
								visible = "[And( Legend.GetOwner.IsValid, Not( ObjectsEqual( Legend.GetOwner.Self, GetPlayer ) ) )]"
								layoutpolicy_horizontal = expanding

								button_text = {
									shortcut = explore_plagues
									layoutpolicy_horizontal = expanding
									blockoverride "text" {
										text = "LEGEND_CHRONICLE_STOP_PROMOTING"
									}
									visible = "[ObjectsEqual( Legend.Self, GetPlayer.GetPromotedLegend.Self )]"
									onclick = "[PostCommand( GetPlayer.StopPromotingLegend( Legend.Self ) )]"
									blockoverride "disabled" {
										visible = "[Not(IsValidCommand( GetPlayer.StopPromotingLegend( Legend.Self ) ))]"
									}
									blockoverride "extra" {
										comma = {}
										text_single = {
											raw_text = "P."
										}
									}
									enabled = "[IsValidCommand( GetPlayer.StopPromotingLegend( Legend.Self ) )]"
									tooltip = "[GetCommandDesc( GetPlayer.StopPromotingLegend( Legend.Self ) )]"
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									shortcut = explore_plagues
									blockoverride "text" {
										text = "LEGEND_CHRONICLE_START_PROMOTING"
									}
									visible = "[Not(ObjectsEqual( Legend.Self, GetPlayer.GetPromotedLegend.Self ))]"
									onclick = "[CreateCommandPopup( GetPlayer.StartPromotingLegend( Legend.Self ) )]"
									blockoverride "disabled" {
										visible = "[Not(IsValidCommand( GetPlayer.StartPromotingLegend( Legend.Self ) ))]"
									}
									blockoverride "extra" {
										comma = {}
										text_single = {
											raw_text = "P."
										}
									}
									enabled = "[IsValidCommand( GetPlayer.StartPromotingLegend( Legend.Self ) )]"
									tooltip = "[GetCommandDesc( GetPlayer.StartPromotingLegend( Legend.Self ) )]"
								}
							}
						}

						hbox = {
							name = "legend_flavor"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							expand = {}

							vbox = {
								layoutpolicy_vertical = expanding

								vbox = {
									name = "chapters"
									datamodel = "[LegendChronicleWindow.GetChapters]"
									item = {
										hbox = {
											layoutpolicy_horizontal = expanding
											text_multi_wide = {
												name = "chapter_text"

												text = "[CString.GetString]"
											}

											expand = {}
										}
									}
								}

								expand = {}
							}

							vbox = {
								layoutpolicy_vertical = expanding

								portrait_legend_chronicle_ocr = {}

								expand = {}
							}

							expand = {}
						}

						expand = {}
					}
				}
			}
		}
	}

	legend_chronicle_old = {
		using = vanilla
	}
}
######################################################
################ TYPES AND TEMPLATES #################
######################################################

types OCR
{
	type portrait_legend_chronicle_ocr = widget {
		portrait_button = {
			datacontext = "[Legend.GetProtagonist]"

			alpha = 0.80 # We blend in the portrait into the background a bit
			using = portrait_base
			alwaystransparent = yes
			tooltip_visible = no

			portrait_texture = "[Character.GetPortrait( 'environment_painterly', 'camera_legend_chronicle', 'idle', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"

			mask = "gfx/portraits/portrait_mask_legend_chronicle.dds"
			effectname = "NoHighlight"

			shaderfile = "gfx/FX/gui_painterly_portrait.shader"
			pop_out = yes # Painterly shader override for `pop_out` property, it now means "add outline"
			pop_out_v = 3.0 # Painterly shader override for `pop_out_v` property, it now means "outline width"
			grayscale = no # Dead people should be painted non-gray
		}

		icon = {
			texture = "[GetIllustration( 'legend_chronicle_portrait_frame' ).GetTexture( Legend.MakeScope )]"
		}
	}
}


######################################################
################ TYPES AND TEMPLATES #################
######################################################

types LegendChronicleWindow
{
	type portrait_legend_chronicle = widget {
		size = { 200 380 }

		background = {
			texture = "gfx/interface/window_legend_chronicle/marginalia_portrait_gold_bg.dds"
		}

		portrait_button = {
			datacontext = "[Legend.GetProtagonist]"
			size = { 200 380 }
			alpha = 0.80 # We blend in the portrait into the background a bit
			parentanchor = bottom|hcenter

			using = portrait_base
			alwaystransparent = yes
			tooltip_visible = no

			portrait_texture = "[Character.GetPortrait( 'environment_painterly', 'camera_legend_chronicle', 'idle', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"

			mask = "gfx/portraits/portrait_mask_legend_chronicle.dds"
			effectname = "NoHighlight"

			shaderfile = "gfx/FX/gui_painterly_portrait.shader"
			pop_out = yes # Painterly shader override for `pop_out` property, it now means "add outline"
			pop_out_v = 3.0 # Painterly shader override for `pop_out_v` property, it now means "outline width"
			grayscale = no # Dead people should be painted non-gray
		}

		icon = {
			size = { 100% 100% }
			texture = "[GetIllustration( 'legend_chronicle_portrait_frame' ).GetTexture( Legend.MakeScope )]"
		}
	}
}
