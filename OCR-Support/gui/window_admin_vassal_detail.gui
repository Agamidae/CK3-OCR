window = {
	name = "admin_vassal_detail_view"
	widgetid = "admin_vassal_detail_view"
	using = base_ocr_window

	state = {
		name = _show
		# using = Animation_FadeIn_Quick
		# position_x = -610
		on_start = "[GetVariableSystem.Set( 'admin_vassal_detail_view_open', 'true'  )]"
		on_finish = "[GetScriptedGui('bordering_realm_theme').Execute( GuiScope.SetRoot( Title.MakeScope ).End )]"
		on_finish = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"

	}

	state = {
		name = _hide
		# using = Animation_FadeOut_Quick
		# position_x = -580
		on_start = "[GetVariableSystem.Clear( 'admin_vassal_detail_view_open' )]"
	}

	admin_vassal_detail_view_old = {}
	datacontext = "[AdminVassalDetailView.GetTitle]"
	datacontext = "[AdminVassalDetailView.GetGovernor]"
	datacontext = "[Title.GetPreferredCapital.GetProvince]"

	window_ocr = {

		blockoverride "ocr_header" {
			button_text = {
				using = title_click
				layoutpolicy_horizontal = expanding
				blockoverride "text" {
					raw_text = "[Title.GetNameNoTooltip],"
				}
				blockoverride "extra" {
					text_single = {
						raw_text = "[Title.GetRankConcept] [title_tier|E],"
					}
					text_single = {
						visible = "[Not(ObjectsEqual(MyCapital, Province.Self))]"
						raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)],"
					}
					text_single = {
						raw_text = "click to open title view."
					}
				}
			}

			button = {
				onclick = "[AdminVassalDetailView.Close]"
				shortcut = close_window
			}

			flowcontainer = {
				ignoreinvisible = yes
				layoutpolicy_horizontal = expanding
				visible = "[DataModelHasItems(Title.MakeScope.GetList('bordering_realms'))]"

				# button_text = {
				# 	onclick = "[GetScriptedGui('bordering_realm_theme').Execute( GuiScope.SetRoot( Title.MakeScope ).End )]"
				#
				# 	blockoverride "text" {
				# 		raw_text = "refresh"
				# 	}
				# }

				flowcontainer = {
					ignoreinvisible = yes
					spacing = 3

					text_single = {
						raw_text = "Borders"
					}

					datamodel = "[DataModelFirst(Title.MakeScope.GetList('bordering_realms'), Min_int32('(int32)2', GetDataModelSize(Title.MakeScope.GetList('bordering_realms'))))]"

					item = {
						button_text = {
							using = char_click
							datacontext = "[Scope.GetCharacter]"
							blockoverride "pre" {
								margin_left = 1
								text_single = {
									visible = "[Not(IsIndexFirst)]"
									raw_text = "and"
								}
							}
							blockoverride "text" {
								raw_text = "[Character.GetPrimaryTitle.GetNameNoTooltip]"
							}
						}
					}
				}

				text_single = {
					visible = "[GreaterThan_int32(GetDataModelSize(Title.MakeScope.GetList('bordering_realms')), '(int32)2')]"
					raw_text = "and [Subtract_int32( GetDataModelSize(Title.MakeScope.GetList('bordering_realms')), '(int32)2')] more"
				}

				dot = {}
			}

			# succession
			widget = {
				size = { 600 35 }
				layoutpolicy_horizontal = expanding
				scissor = yes

				vbox = {
					layoutpolicy_horizontal = expanding

					datacontext = "[AdminVassalDetailView.GetTitle]"
					datacontext = "[AdminVassalDetailView.GetSuccessorCandidateList]"
					datacontext = "[AdminVassalSuccessorCandidateList.GetBestLocalPlayerCandidate( '(int32)0' )]"
					datacontext = "[AdminVassalSuccessorCandidate.GetCandidate]"

					vbox = {
						visible = "[AdminVassalSuccessorCandidateList.ShowBestPlayerCandidateIndependently( '(int32)3' )]"
						layoutpolicy_horizontal = expanding

						vbox = {
							datamodel = "[DataModelFirst( AdminVassalSuccessorCandidateList.GetSuccessorCandidates, '(int32)3')]"
							layoutpolicy_horizontal = expanding
							spacing = 3

							item = {
								vbox_admin_vassal_successor_candidate_tip = {
									datacontext = "[AdminVassalSuccessorCandidate.GetCandidate]"
								}
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							vbox_admin_vassal_successor_candidate_tip = {
								datacontext = "[AdminVassalSuccessorCandidateList.GetBestLocalPlayerCandidate( '(int32)3' )]"
								datacontext = "[AdminVassalSuccessorCandidate.GetCandidate]"
							}
							expand = {}
						}
					}

					vbox = {
						visible = "[Not( AdminVassalSuccessorCandidateList.ShowBestPlayerCandidateIndependently( '(int32)3' ) )]"
						datamodel = "[DataModelFirst( AdminVassalSuccessorCandidateList.GetSuccessorCandidates, '(int32)4')]"
						layoutpolicy_horizontal = expanding
						spacing = 3

						item = {
							vbox_admin_vassal_successor_candidate_tip = {
								datacontext = "[AdminVassalSuccessorCandidate.GetCandidate]"
							}
						}

						expand = {}
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = ADMIN_VASSAL_DETAILS_NO_SUCCESSORS
						visible = "[IsDataModelEmpty( AdminVassalSuccessorCandidateList.GetSuccessorCandidates )]"
					}
				}
			}
			widget = {
				size = { 0 5 }
			}
		}
		blockoverride "ocr_content" {
			spacing = 10

			flowcontainer = {
				ignoreinvisible = yes
				visible = "[Isnt('theme_succession')]"

				spacing = 10
				direction = vertical
				layoutpolicy_horizontal = expanding

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical

					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3
						visible = "[Not( Character.IsIndependentRuler )]"

						button_modify_theme_ocr = {}

						button_text = {
							datacontext = "[Title.GetHolder.GetLiege]"
							visible = "[And(Title.GetHolder.IsPlayer,Title.GetHolder.GetLiege.IsValid)]"
							enabled = "[Character.IsPlayerInteractionValid('admin_vassal_modify_vassal_contract_interaction')]"
							tooltip = "[Character.GetPlayerInteractionTooltip('admin_vassal_modify_vassal_contract_interaction')]"
							onclick = "[Character.OpenPlayerInteraction('admin_vassal_modify_vassal_contract_interaction')]"

							tooltip_visible = "[Not(Character.IsPlayerInteractionValid('admin_vassal_modify_vassal_contract_interaction'))]"

							blockoverride "text" {
								raw_text = "[Character.GetPlayerInteractionName('admin_vassal_modify_vassal_contract_interaction')]."
							}
							blockoverride "disabled" {
								visible = "[Not(Character.IsPlayerInteractionValid('admin_vassal_modify_vassal_contract_interaction'))]"
							}
						}

						button_text = {
							onclick = "[GetScriptedGui('save_directed_vassal').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Character.MakeScope).End )]"
							visible = "[Character.IsPlayerInteractionShown('give_vassal_directive_interaction')]"
							enabled = "[Character.IsPlayerInteractionValid('give_vassal_directive_interaction')]"
							onclick = "[Character.OpenPlayerInteraction('give_vassal_directive_interaction')]"
							tooltip = "[Character.GetPlayerInteractionTooltip('give_vassal_directive_interaction')]"

							tooltip_visible = "[Not(Character.IsPlayerInteractionValid('give_vassal_directive_interaction'))]"
							shortcut = find_title_shortcut

							blockoverride "text" {
								raw_text = "[Character.Custom('vassal_directive_text')], V."
								alwaystransparent = yes
								# raw_text = "[Character.GetPlayerInteractionName('give_vassal_directive_interaction')]."
							}
							blockoverride "extra" {
								text_single = {
									raw_text = "Can't change."
									visible = "[Not(Character.IsPlayerInteractionValid('give_vassal_directive_interaction'))]"
								}
							}
						}
					}

					button_text = {
						using = title_click
						blockoverride "text" {
							raw_text = "[Character.GetTitleAsNameNoTooltip] holds [GuiScope.SetRoot( Title.MakeScope ).AddScope('player', Character.MakeScope).ScriptValue('your_counties_in_title')] out of [Title.MakeScope.ScriptValue('counties_in_title')] de-jure counties."
						}
					}

					text_single = {
						visible = "[Character.IsIndependentRuler]"
						text = ADMIN_WINDOW_THEME_IMPERIAL_LANDS_HEADER
					}
				}

				### governor

				flowcontainer = {
					ignoreinvisible = yes
					direction = vertical

					button_text = {
						visible = "[Not(Character.IsLocalPlayer)]"
						using = char_click
						shortcut = army_create_new
						blockoverride "pre" {
							text_single = {
								raw_text = "Held by"
							}
							text_single = {
								raw_text = "[Character.GetNameNoTooltip], [Character.GetAge],"
							}
							text_single = {
								raw_text = "[Character.Custom('BaseRankName')] of [Character.RealmSize] counties."
							}
							text_single = {
								raw_text = "h hotkey."
							}
						}
					}

					text_single = {
						visible = "[Not(Character.IsLocalPlayer)]"
						raw_text = "[Character.GetSheHe|U] is [Character.GetRelationToString(GetPlayer)]."
					}

					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical

						visible = "[GetPlayer.IsIndependentRuler]"

						button_text = {
							visible = "[Not( Character.IsIndependentRuler )]"
							enabled = "[Character.IsPlayerInteractionValid('revoke_title_interaction')]"

							blockoverride "text" {
								text = ADMIN_VASSAL_DETAILS_REVOKE_BUTTON
							}

							blockoverride "disabled" {
								visible = "[Not(Character.IsPlayerInteractionValid('revoke_title_interaction'))]"
							}

							blockoverride "extra" {
								comma = {}
								text_single = {
									raw_text = "Control R."
								}
							}

							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('revoke_title_interaction', Title.Self)]"
							onclick = "[Character.PanCameraTo]"
							onclick = "[AdminVassalDetailView.Close]"

							tooltip_visible = "[Not(Character.IsPlayerInteractionValid('revoke_title_interaction'))]"

							tooltip = "[Character.GetPlayerInteractionTooltip('revoke_title_interaction')]"
							shortcut = map_mode_18
						}

						text_multi_wide = {
							visible = "[And( Character.IsIndependentRuler, GetPlayer.IsIndependentRuler )]"

							text = ADMIN_WINDOW_THEME_IMPERIAL_LAND_DETAILS
						}



						button_text = {
							visible = "[Character.IsIndependentRuler]"
							enabled = "[And( And( ObjectsEqual( GetPlayer.Self, Character.Self ), Title.CanUseFindVassal( Character.Self ) ), Not( Title.IsLeasedOut ) )]"

							blockoverride "disabled" {
								visible = "[Not(And( And( ObjectsEqual( GetPlayer.Self, Character.Self ), Title.CanUseFindVassal( Character.Self ) ), Not( Title.IsLeasedOut ) ))]"
							}

							blockoverride "text" {
								text = ADMIN_VASSAL_DETAILS_APPOINT_BUTTON
							}

							tooltip_visible = "[Not(And( And( ObjectsEqual( GetPlayer.Self, Character.Self ), Title.CanUseFindVassal( Character.Self ) ), Not( Title.IsLeasedOut ) ))]"


							onclick = "[OpenTitleWindowAndGrantTitle( Title.Self )]"
							onclick = "[Character.PanCameraTo]"
							onclick = "[AdminVassalDetailView.Close]"

							tooltip = FIND_VASSAL_BUTTON_TOOLTIP
						}
					}

					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical

						button_text = {
							visible = "[Character.IsPlayerInteractionShown('force_step_down_interaction')]"
							enabled = "[Character.IsPlayerInteractionValid('force_step_down_interaction')]"
							tooltip = "[Character.GetPlayerInteractionTooltip('force_step_down_interaction')]"
							onclick = "[Character.OpenPlayerInteraction('force_step_down_interaction')]"

							blockoverride "disabled" {
								visible = "[Not(Character.IsPlayerInteractionValid('force_step_down_interaction'))]"
							}

							blockoverride "text" {
								text = "[Character.GetPlayerInteractionName('force_step_down_interaction')]"
							}
						}

						button_text = {
							visible = "[Character.IsPlayerInteractionShown('start_subsume_province_interaction')]"
							enabled = "[Character.IsPlayerInteractionValid('start_subsume_province_interaction')]"
							tooltip = "[Character.GetPlayerInteractionTooltip('start_subsume_province_interaction')]"
							onclick = "[Character.OpenPlayerInteraction('start_subsume_province_interaction')]"

							blockoverride "disabled" {
								visible = "[Not(Character.IsPlayerInteractionValid('start_subsume_province_interaction'))]"
							}

							blockoverride "text" {
								text = "[Character.GetPlayerInteractionName('start_subsume_province_interaction')]"
							}
						}

						button_text = {
							visible = "[Character.IsPlayerInteractionShown('start_dispute_border_interaction')]"
							enabled = "[Character.IsPlayerInteractionValid('start_dispute_border_interaction')]"
							tooltip = "[Character.GetPlayerInteractionTooltip('start_dispute_border_interaction')]"
							onclick = "[Character.OpenPlayerInteraction('start_dispute_border_interaction')]"

							blockoverride "disabled" {
								visible = "[Not(Character.IsPlayerInteractionValid('start_dispute_border_interaction'))]"
							}

							blockoverride "text" {
								text = "[Character.GetPlayerInteractionName('start_dispute_border_interaction')]"
							}
						}

						button_text = {
							visible = "[Character.IsPlayerInteractionShown('frontier_influence_war_interaction')]"
							enabled = "[Character.IsPlayerInteractionValid('frontier_influence_war_interaction')]"
							tooltip = "[Character.GetPlayerInteractionTooltip('frontier_influence_war_interaction')]"
							onclick = "[Character.OpenPlayerInteraction('frontier_influence_war_interaction')]"

							blockoverride "disabled" {
								visible = "[Not(Character.IsPlayerInteractionValid('frontier_influence_war_interaction'))]"
							}

							blockoverride "text" {
								text = "[Character.GetPlayerInteractionName('frontier_influence_war_interaction')]"
							}
						}
					}

					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3

						text_single = {
							raw_text = "[Character.MakeScope.ScriptValue( 'governor_efficiency_presented')|0]% efficiency,"
							tooltip = ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_TT
						}

						flowcontainer = {
							ignoreinvisible = yes
							spacing = 3
							visible = "[Character.HasTraitByKey('governor')]"

							text_single = {
								raw_text = "[GetTrait('governor').GetName(Character.Self)] trait level [Character.MakeScope.ScriptValue('governor_level')|0], [Character.MakeScope.ScriptValue('governor_xp')] experience."
							}
						}

						text_single = {
							visible = "[Not(Character.HasTraitByKey('governor'))]"
							raw_text = "no [GetTrait('governor').GetName(Character.Self)] trait."
						}
					}

					flow_skills_grid_character_short = {
						visible = "[And(Not(Character.IsLocalPlayer), Not(Character.IsIndependentRuler))]"
					}
				}

				# tax
				flowcontainer = {
					direction = vertical
					ignoreinvisible = yes

					text_single = {
						visible = "[And(Not(Character.IsLocalPlayer), Not(Character.IsIndependentRuler))]"
						raw_text = "[Character.GetFirstName] provides to [Character.GetLiege.GetNameOrMeNoTooltip], affected by [Character.GetHerHis] efficiency:"
					}

					text_single = {
						visible = "[And(Character.IsLocalPlayer, Not(Character.IsIndependentRuler))]"
						raw_text = "You provide to your liege, [Character.GetLiege.GetFirstName], affected by your efficiency:"
					}

					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical
						visible = "[And(Not(Character.IsLocalPlayer), Not(Character.IsIndependentRuler))]"
						datacontext = "[Title.GetHolder.GetVassalContract]"

						flowcontainer = {
							ignoreinvisible = yes
							spacing = 3

							text_single = {
								raw_text = "ADMIN_VASSAL_DETAILS_TAX_CONTRIBUTION"
							}

							text_single = {
								raw_text = "gold,"
							}

							text_single = {
								raw_text = "[VassalContract.GetTaxRatioForLiege|%0]"
							}

							text_single = {
								visible = "[GreaterThan_CFixedPoint(VassalContract.GetTaxRatioForLiege, '(CFixedPoint)0')]"
								raw_text = "of [Divide_CFixedPoint(AdminVassalDetailView.GetTaxContribution, VassalContract.GetTaxRatioForLiege)|1] max"
							}

							dot_l = {}
						}

						flowcontainer = {
							ignoreinvisible = yes
							spacing = 3

							text_single = {
								raw_text = "ADMIN_VASSAL_DETAILS_LEVY_CONTRIBUTION"
							}

							text_single = {
								raw_text = "levies,"
							}

							text_single = {
								raw_text = "[VassalContract.GetLevyRatioForLiege|%0]"
							}

							text_single = {
								visible = "[GreaterThan_CFixedPoint(VassalContract.GetLevyRatioForLiege, '(CFixedPoint)0')]"
								raw_text = "of [Divide_CFixedPoint(AdminVassalDetailView.GetLevyContribution, VassalContract.GetLevyRatioForLiege)|0] max"
							}

							dot_l = {}
						}
					}

					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3
						visible = "[And(Not(Character.IsLocalPlayer), Not(Character.IsIndependentRuler))]"

						text_single = {
							visible = "[Character.IsLocalPlayer]"
							raw_text = "You have"
						}
						text_single = {
							visible = "[Not(Character.IsLocalPlayer)]"
							raw_text = "[Character.GetSheHe|U] has"
						}
						text_single = {
							raw_text = "[Character.GetGold|0] gold,"
						}
						text_single = {
							raw_text = "[Character.GetBalance|1=] a month"
						}
						text_single = {
							raw_text = "and [Character.GetMilitaryStrengthText] soldiers."
						}
					}

					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3

						text_single = {
							raw_text = "[Character.MakeScope.ScriptValue('ruler_num_buildings')] total buildings, [Character.MakeScope.ScriptValue('ruler_num_free_building_slots')] empty slots, [Character.MakeScope.ScriptValue('ruler_num_empty_holdings')] empty holdings."
						}
					}

					text_single = {
						visible = "[Not(Character.IsLocalPlayer)]"
						raw_text = "[Character.Custom( 'AIEconomicPersonality' )] [economical_archetype|E]."
					}
				}

				# maa
				flowcontainer = {
					direction = vertical
					ignoreinvisible = yes

					flowcontainer = {
						ignoreinvisible = yes
						spacing = 3

						text_single = {
							raw_text = "[Title.GetTierAsNameNoTooltip]"
						}

						text_single = {
							raw_text = "BANNER_MEN_AT_ARMS_LABEL"
						}

						text_single = {
							raw_text = "[GetDataModelSize(Title.GetControlledMAA)]"
						}

						text_single = {
							raw_text = "out of [Add_CFixedPoint(Character.MakeScope.ScriptValue('bav_maa_title_cap'), Select_CFixedPoint(EqualTo_string(Character.GetHouse.GetHousePowerBonus.GetName, GetHousePowerBonus('army_quartermasters').GetName), '(CFixedPoint)1', '(CFixedPoint)0'))],"
						}

						text_single = {
							raw_text = "[Title.GetTotalTitleMAATroopsDesc]."
						}
					}

					button_text = {
						visible = "[DataModelHasItems(Title.GetControlledMAA)]"
						shortcut = character_finder
						enabled = "[And(Title.CanTransferTitleMaaOwnershipToLocalPlayer, GetScriptedGui('pay_to_transfer_title_maa').IsValid( GuiScope.SetRoot( Title.MakeScope ).AddScope('actor', GetPlayer.MakeScope).End ))]"

						onclick = "[GetScriptedGui('pay_to_transfer_title_maa').Execute( GuiScope.SetRoot( Title.MakeScope ).AddScope('actor', GetPlayer.MakeScope).End )]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"

						blockoverride "disabled" {
							visible = "[Not(Title.CanTransferTitleMaaOwnershipToLocalPlayer)]"
						}
						blockoverride "text" {
							raw_text = "HIRED_TROOPS_REQUEST_AS_EMPEROR"
						}
						blockoverride "extra" {
							comma = {}
							text_single = {
								raw_text = "Cost [GuiScope.SetRoot(Title.MakeScope).AddScope('actor', GetPlayer.MakeScope).ScriptValue('admin_title_troop_command_cost_value')] influence,"
							}
							text_single = {
								raw_text = "C."
							}
						}
					}

					button_text = {
						shortcut = increase_speed_2
						blockoverride "text" {
							raw_text = "HIRED_TROOPS_VIEW_RETURN"
						}
						visible = "[Not(DataModelHasItems(Title.GetControlledMAA))]"
						enabled = "[Title.CanReturnTitleMaaToOwner]"
						blockoverride "disabled" {
							visible = "[Not(Title.CanReturnTitleMaaToOwner)]"
						}
						blockoverride "extra" {
							comma = {}
							text_single = {
								raw_text = "X."
							}
						}
						onclick = "[Title.ReturnTitleMaaToOwner]"
					}


					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical

						datamodel = "[Title.GetControlledMAA]"

						item = {
							maa_one_line = {
								blockoverride "stationed" {}
							}
						}
					}
				}
			}

			# succession
			flowcontainer = {
				layoutpolicy_horizontal = expanding
				ignoreinvisible = yes
				direction = vertical

				button = {
					visible = "[Is('theme_succession')]"
					shortcut = close_window
					onclick = "[Clear('theme_succession')]"
				}

				button_text = {
					onclick = "[Toggle('theme_succession')]"
					shortcut = map_mode_1
					blockoverride "text" {
						raw_text = "ADMIN_VASSAL_DETAILS_SUCCESSION_LABEL"
					}
					blockoverride "extra" {
						comma = {}
						text_single = {
							raw_text = "E."
						}
					}
				}

				# INVEST IN BEST LOCAL PLAYER CANDIDATE IF THEY EXIST

				button_text = {
					datacontext = "[AdminVassalDetailView.GetTitle]"
					datacontext = "[AdminVassalDetailView.GetSuccessorCandidateList]"
					datacontext = "[AdminVassalSuccessorCandidateList.GetBestLocalPlayerCandidate( '(int32)0' )]"
					datacontext = "[AdminVassalSuccessorCandidate.GetCandidate]"
					shortcut = mapmode_kingdoms_secondary
					visible = "[AdminVassalSuccessorCandidateList.ShowBestPlayerCandidateIndependently( '(int32)0' )]"

					blockoverride "text" {
						raw_text = "ADMIN_VASSAL_DETAILS_VOTE_FOR_SUCCESSOR_BUTTON"
					}
					blockoverride "extra" {
						text_single = {
							raw_text = "of [Character.GetNameNoTooltip], i."
						}
					}
					blockoverride "disabled" {
						visible = "[Not(Character.IsPlayerInteractionValid('influence_candidacy_interaction'))]"
					}

					enabled = "[Character.IsPlayerInteractionValid('influence_candidacy_interaction')]"
					tooltip = "[Character.GetPlayerInteractionTooltip('influence_candidacy_interaction')]"
					onclick = "[Character.OpenPlayerInteractionWithTargetTitle('influence_candidacy_interaction', Title.Self)]"
				}

				# INVEST IN ANYONE (FALLBACK)
				button_text = {
					datacontext = "[AdminVassalDetailView.GetTitle]"
					datacontext = "[AdminVassalDetailView.GetSuccessorCandidateList]"

					visible = "[Not( AdminVassalSuccessorCandidateList.ShowBestPlayerCandidateIndependently( '(int32)0' ) )]"
					shortcut = mapmode_kingdoms_secondary

					blockoverride "text" {
						raw_text = "ADMIN_VASSAL_DETAILS_VOTE_FOR_SUCCESSOR_BUTTON"
					}
					blockoverride "extra" {
						text_single = {
							raw_text = "of somebody,"
						}
						text_single = {
							raw_text = "i."
						}
					}
					blockoverride "disabled" {
						visible = "[Not(Character.IsPlayerInteractionValid('influence_candidacy_interaction'))]"
					}

					enabled = "[Character.IsPlayerInteractionValid('influence_candidacy_interaction')]"
					tooltip = "[Character.GetPlayerInteractionTooltip('influence_candidacy_interaction')]"
					onclick = "[Character.GetTopLiege.OpenPlayerInteractionWithTargetTitle('influence_candidacy_interaction', Title.Self)]"
				}


				hbox_admin_title_successor_candidates_list_ocr = {
					datacontext = "[AdminVassalDetailView.GetSuccessorCandidateList]"
				}
				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[ToggleGameViewData( 'title_appointment', Title.GetID )]"
					shortcut = mapmode_culture_secondary
					blockoverride "text" {
						raw_text = "TITLE_VIEW_APPOINTMENT"
					}
					blockoverride "extra" {
						comma = {}
						text_single = {
							raw_text = "Shift S."
						}
					}
				}
			}
		}
	}
}

types AdminVassalDetails
{
	type vbox_admin_vassal_successor_candidate = vbox {
		margin = { 4 4 }
		margin_bottom = 8

		background = {
			visible = "[AdminVassalSuccessorCandidate.IsLocalPlayerCandidate]"
			using = Background_Area_Border
			using = Background_Frame_Gold
		}

		background = {
			visible = "[Not( AdminVassalSuccessorCandidate.IsLocalPlayerCandidate )]"
			using = Background_Area_Border
			using = Background_Frame
		}
		hbox = {
			visible = "[GreaterThan_int32( AdminVassalSuccessorCandidate.GetCandidateIndex, '(int32)0' )]"
			text_single = {
				text = "ADMIN_VASSAL_DETAILS_SUCCESSOR_INDEX"
			}
		}

		portrait_head = {
			widget = {
				parentanchor = top
				size = { 56 64 }
				position = { -6 2 }

				widget = {
					name = "investment_has_candidate"
					visible = "[And(AdminVassalSuccessorCandidate.IsLocalPlayerInvested, Not( AdminVassalSuccessorCandidate.IsLocalPlayerCandidateInFirst ))]"

					size = { 100% 100% }

					tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_LOSING_TT"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
					}

					button_promote_candidate = {
						parentanchor = center
						position = { 0 -8 }
						alwaystransparent = yes
					}
				}

				widget = {
					name = "no_investment_has_candidate"
					visible = "[And( And( AdminVassalSuccessorCandidate.IsLocalPlayerCandidate, Not( AdminVassalSuccessorCandidate.IsLocalPlayerInvested ) ), Not( AdminVassalSuccessorCandidate.IsLocalPlayerCandidateInFirst  ) )]"

					size = { 100% 100% }

					tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_LOSING_TT"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_no_sucession.dds"
					}

					button_house = {
						parentanchor = center
						position = { 0 -8 }
						alwaystransparent = yes
					}
				}

				widget = {
					name = "player_candidate_in_first_invested"
					visible = "[And( And( AdminVassalSuccessorCandidate.IsLocalPlayerCandidate, AdminVassalSuccessorCandidate.IsLocalPlayerCandidateInFirst ), AdminVassalSuccessorCandidate.IsLocalPlayerInvested )]"

					size = { 100% 100% }

					tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_WINNING_TT"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_sucession.dds"
					}

					button_promote_candidate = {
						parentanchor = center
						position = { 0 -8 }
						alwaystransparent = yes
					}
				}

				widget = {
					name = "player_candidate_in_first"
					visible = "[And( And( AdminVassalSuccessorCandidate.IsLocalPlayerCandidate, AdminVassalSuccessorCandidate.IsLocalPlayerCandidateInFirst ), Not(AdminVassalSuccessorCandidate.IsLocalPlayerInvested) )]"

					size = { 100% 100% }

					tooltip = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_WINNING_TT"

					background = {
						texture = "gfx/interface/window_theme_administration/admin_theme_sucession.dds"
					}

					button_house = {
						parentanchor = center
						position = { 0 -8 }
						alwaystransparent = yes
					}
				}
			}
		}

		hbox = {
			spacing = 4

			background = {
				margin_left = 40
				margin_right = 40

				texture = "gfx/interface/component_tiles/tile_title_bg_01.dds"
				spriteType = Corneredtiled
				spriteborder = { 40 8 }
				texture_density = 2

				modify_texture = {
					name = "mask"
					texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
			}

			tooltipwidget = {
				widget_value_breakdown_tooltip = {
					block "score_breakdown" {
						datacontext = "[AdminVassalDetailView.GetSuccessionScoreBreakdown(AdminVassalSuccessorCandidate.GetCandidate.Self )]"
					}
				}
			}

			icon = {
				size = { 24 24 }
				texture = "gfx/interface/icons/flat_icons/election_vote_strength.dds"

				modify_texture = {
					texture = "gfx/interface/colors/colors_textured.dds"
					blend_mode = add
					framesize = { 96 96 }
					spritetype = corneredtiled

					block "master_color_frame" {}
				}
			}

			text_single = {
				text = ADMIN_VASSAL_DETAILS_SUCCESSOR_SCORES
			}
		}
	}

	type hbox_admin_title_successor_candidates_list = hbox {
		hbox = {
			visible = "[AdminVassalSuccessorCandidateList.ShowBestPlayerCandidateIndependently( '(int32)3' )]"
			spacing = 0

			hbox = {
				datamodel = "[DataModelFirst( AdminVassalSuccessorCandidateList.GetSuccessorCandidates, '(int32)3')]"

				spacing = 0

				item = {
					vbox_admin_vassal_successor_candidate = {
						datacontext = "[AdminVassalSuccessorCandidate.GetCandidate]"
					}
				}
			}

			vbox_admin_vassal_successor_candidate = {
				datacontext = "[AdminVassalSuccessorCandidateList.GetBestLocalPlayerCandidate( '(int32)3' )]"
				datacontext = "[AdminVassalSuccessorCandidate.GetCandidate]"
			}
		}

		hbox = {
			visible = "[Not( AdminVassalSuccessorCandidateList.ShowBestPlayerCandidateIndependently( '(int32)3' ) )]"
			datamodel = "[DataModelFirst( AdminVassalSuccessorCandidateList.GetSuccessorCandidates, '(int32)4')]"
			spacing = 0

			item = {
				vbox_admin_vassal_successor_candidate = {
					datacontext = "[AdminVassalSuccessorCandidate.GetCandidate]"
				}
			}
		}

		hbox = {
			visible = "[IsDataModelEmpty( AdminVassalSuccessorCandidateList.GetSuccessorCandidates )]"

			text_single = {
				text = ADMIN_VASSAL_DETAILS_NO_SUCCESSORS
				default_format = "#low"
			}
		}
	}

	type powerful_family_bonus = button {
		allow_outside = yes

		datacontext = "[DynastyHouse]"
		datacontext = "[DynastyHouse.GetHousePowerBonus]"

		name = "powerful_family_bonus"
		size = { 36 36 }
		visible = "[HousePowerBonus.IsValid]"

		onclick = "[OpenGameViewData( 'family_attribute_window', DynastyHouse.Self )]"
		tooltip = "ADMINISTRATIVE_GOVERNMENT_BONUS_TOOLTIP"

		highlight_icon = {
			texture = "gfx/interface/icons/powerful_family_bonus/powerful_family_shield.dds"
			size = { 100% 100% }
		}

		highlight_icon = {
			size = { 24 24 }
			parentanchor = center
			texture = "[HousePowerBonus.GetIcon]"
		}
	}

	type vbox_skill_entry = vbox {
		using = tooltip_ne
		spacing = -3

		icon = {
			name = "skill_icon"
			size = { 32 32 }
			framesize = { 60 60 }
			block "frame" {
				frame = 1
			}
			texture = "gfx/interface/icons/icon_skills.dds"
		}

		text_single = {
			name = "skill_value"
			block "value" {
				text = "[Character.GetSkill('diplomacy')]"
			}
			default_format = "#high"
			align = nobaseline

			background = {
				name = "skill_icon_bg"
				texture = "gfx/interface/window_character/character_view_skills_bg.dds"
				block "frame" {
					frame = 1
				}
				framesize = { 70 26 }
				margin = { 10 0 }
			}
		}
	}
}

types OCR
{
	type vbox_admin_vassal_successor_candidate_ocr = button_text {
		using = char_click
		blockoverride "pre" {
			tooltipwidget = {
				widget_value_breakdown_tooltip = {
					block "score_breakdown" {
						datacontext = "[AdminVassalDetailView.GetSuccessionScoreBreakdown(AdminVassalSuccessorCandidate.GetCandidate.Self )]"
					}
				}
			}

			text_single = {
				raw_text = "ADMIN_VASSAL_DETAILS_SUCCESSOR_INDEX"
			}
			comma = {}
			text_single = {
				raw_text = "ADMIN_VASSAL_DETAILS_SUCCESSOR_SCORES"
			}
			text_single = {
				raw_text = "score,"
			}
			text_single = {
				visible = "[AdminVassalSuccessorCandidate.IsLocalPlayerInvested]"
				raw_text = "you invested in"
			}
			text_single = {
				visible = "[AdminVassalSuccessorCandidate.IsLocalPlayerCandidate]"
				raw_text = "your candidate,"
			}

			###

			text_single = {
				raw_text = "[Character.GetNameOrMeNoTooltip], [Character.GetAge]."
			}
			text_single = {
				visible = "[Not(Character.IsLocalPlayer)]"
				raw_text = "[Character.GetRelationToString(GetPlayer)]."
			}
		}
	}

	type vbox_admin_vassal_successor_candidate_tip = vbox {
		layoutpolicy_horizontal = expanding

		text_single = {
			layoutpolicy_horizontal = expanding
			name = "investment_has_candidate"
			background = { using = Background_Area_Border_Solid }
			visible = "[And(AdminVassalSuccessorCandidate.IsLocalPlayerInvested, Not( AdminVassalSuccessorCandidate.IsLocalPlayerCandidateInFirst ))]"
			raw_text = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_LOSING_TT"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			name = "no_investment_has_candidate"
			background = { using = Background_Area_Border_Solid }
			visible = "[And( And( AdminVassalSuccessorCandidate.IsLocalPlayerCandidate, Not( AdminVassalSuccessorCandidate.IsLocalPlayerInvested ) ), Not( AdminVassalSuccessorCandidate.IsLocalPlayerCandidateInFirst  ) )]"
			raw_text = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_LOSING_TT"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			name = "player_candidate_in_first_invested"
			background = { using = Background_Area_Border_Solid }
			visible = "[And( And( AdminVassalSuccessorCandidate.IsLocalPlayerCandidate, AdminVassalSuccessorCandidate.IsLocalPlayerCandidateInFirst ), AdminVassalSuccessorCandidate.IsLocalPlayerInvested )]"

			raw_text = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_INVESTED_WINNING_TT"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			name = "player_candidate_in_first"
			background = { using = Background_Area_Border_Solid }
			visible = "[And( And( AdminVassalSuccessorCandidate.IsLocalPlayerCandidate, AdminVassalSuccessorCandidate.IsLocalPlayerCandidateInFirst ), Not(AdminVassalSuccessorCandidate.IsLocalPlayerInvested) )]"

			raw_text = "ADMIN_WINDOW_THEME_ADMINISTRATION_LOCAL_PLAYER_HAS_CANDIDATE_WINNING_TT"
		}
	}

	type hbox_admin_title_successor_candidates_list_ocr = flowcontainer {
		ignoreinvisible = yes
		direction = vertical

		flowcontainer = {
			visible = "[AdminVassalSuccessorCandidateList.ShowBestPlayerCandidateIndependently( '(int32)3' )]"
			ignoreinvisible = yes
			direction = vertical

			flowcontainer = {
				datamodel = "[DataModelFirst( AdminVassalSuccessorCandidateList.GetSuccessorCandidates, '(int32)3')]"
				direction = vertical

				item = {
					vbox_admin_vassal_successor_candidate_ocr = {
						datacontext = "[AdminVassalSuccessorCandidate.GetCandidate]"
					}
				}
			}

			vbox_admin_vassal_successor_candidate_ocr = {
				datacontext = "[AdminVassalSuccessorCandidateList.GetBestLocalPlayerCandidate( '(int32)3' )]"
				datacontext = "[AdminVassalSuccessorCandidate.GetCandidate]"
			}
		}

		flowcontainer = {
			visible = "[Not( AdminVassalSuccessorCandidateList.ShowBestPlayerCandidateIndependently( '(int32)3' ) )]"
			datamodel = "[DataModelFirst( AdminVassalSuccessorCandidateList.GetSuccessorCandidates, '(int32)4')]"
			ignoreinvisible = yes
			direction = vertical

			item = {
				vbox_admin_vassal_successor_candidate_ocr = {
					datacontext = "[AdminVassalSuccessorCandidate.GetCandidate]"
				}
			}
		}

		flowcontainer = {
			visible = "[IsDataModelEmpty( AdminVassalSuccessorCandidateList.GetSuccessorCandidates )]"
			direction = vertical
			ignoreinvisible = yes

			text_single = {
				text = ADMIN_VASSAL_DETAILS_NO_SUCCESSORS
			}
		}
	}

	type powerful_family_bonus_ocr = button_text {
		allow_outside = yes

		datacontext = "[DynastyHouse]"
		datacontext = "[DynastyHouse.GetHousePowerBonus]"

		name = "powerful_family_bonus"
		visible = "[HousePowerBonus.IsValid]"

		onclick = "[OpenGameViewData( 'family_attribute_window', DynastyHouse.Self )]"
		tooltip = "ADMINISTRATIVE_GOVERNMENT_BONUS_TOOLTIP"

		blockoverride "text" {
			raw_text = "[HousePowerBonus.GetName],"
		}
		blockoverride "extra" {
			text_single = {
				block "show_button" {}
				raw_text = "[Select_CString(DynastyHouse.GetHeadOfHouse.IsLocalPlayer, 'click to change', 'click for details')]."
			}
		}
	}

	type vbox_skill_entry_ocr = vbox {
		using = tooltip_ne
		spacing = -3

		icon = {
			name = "skill_icon"
			size = { 32 32 }
			framesize = { 60 60 }
			block "frame" {
				frame = 1
			}
			texture = "gfx/interface/icons/icon_skills.dds"
		}

		text_single = {
			name = "skill_value"
			block "value" {
				text = "[Character.GetSkill('diplomacy')]"
			}
			default_format = "#high"
			align = nobaseline

			background = {
				name = "skill_icon_bg"
				texture = "gfx/interface/window_character/character_view_skills_bg.dds"
				block "frame" {
					frame = 1
				}
				framesize = { 70 26 }
				margin = { 10 0 }
			}
		}
	}
}
