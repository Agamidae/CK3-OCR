######################################################
################## CULTURE REPLACE PILLAR #############
######################################################

window = {
	name = "replace_pillar_window"
	layoutpolicy_vertical = expanding
	using = base_ocr_window
	datacontext = "[GetPlayer.GetCulture]"

	state = {
		name = _show
		using = Animation_FadeIn_Quick
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
	}

	window_ocr = {
		blockoverride "ocr_header" {
			header_text = {
				layoutpolicy_horizontal = expanding
				datacontext = "[ReplacePillarWindow.GetSelectedPillar]"

				blockoverride "header_text"
				{
					# text = "REPLACE_PILLAR_WINDOW_TITLE"
				}
				blockoverride "pre_header" {
					spacing = 2
					text_single = {
						visible = "[Not(CulturePillar.IsValid)]"
						raw_text = "REPLACE_PILLAR_WINDOW_TITLE"
					}
					comma = {
						visible = "[Not(CulturePillar.IsValid)]"
					}
					text_single = {
						visible = "[Not(CulturePillar.IsValid)]"
						raw_text = "[GetDataModelSize(ReplacePillarWindow.GetPossiblePillars)] options"
					}
					text_single = {
						visible = "[CulturePillar.IsValid]"
						raw_text = "Replacing [ReplacePillarWindow.GetReplacedPillar.GetName] with [ReplacePillarWindow.GetSelectedPillar.GetName]"
					}
				}

				blockoverride "button_close"
				{
					onclick = "[ReplacePillarWindow.Close]"
				}
			}
		}
		blockoverride "ocr_content" {
			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				vbox = {
					name = "cost"
					datacontext = "[ReplacePillarWindow.GetSelectedPillar]"
					visible = "[CulturePillar.IsValid]"
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							tooltip = "REPLACE_PILLAR_COST_TOOLTIP"
							text = "REPLACE_PILLAR_TOTAL_COST"
						}

						dot = { }

						expand = { }
					}


					button_primary_text = {
						name = "done"
						layoutpolicy_horizontal = expanding
						onclick = "[ReplacePillarWindow.ReplacePillar]"
						onclick = "[ReplacePillarWindow.Close]"
						enabled = "[ReplacePillarWindow.CanReplacePillar]"
						blockoverride "text" {
							text = "REPLACE_PILLAR_EXECUTE_LABEL"
						}
						blockoverride "disabled" {
							visible = "[Not(ReplacePillarWindow.CanReplacePillar)]"
						}


						# visible = "[Culture.IsReforming]"
					}

					text_multi_wide = {
						raw_text = "[ReplacePillarWindow.GetBlockers].[AddLine(SelectLocalization(GetPlayer.GetCulture.IsReforming, 'REFORM_CULTURE_TOOLTIP_WARNING',''))]"
						visible = "[Not(ReplacePillarWindow.CanReplacePillar)]"
					}
				}

				vbox = {
					name = "pillar_selection"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content"
						{
							vbox = {
								datamodel = "[ReplacePillarWindow.GetPossiblePillars]"
								layoutpolicy_horizontal = expanding

								item = {
									widget_pillar_item_ocr = {
									}
								}
							}
						}
					}
				}
			}
		}
	}

	window_replace_ethos_old = {}
}

types OCR
{
	type widget_pillar_item_ocr = vbox {
		layoutpolicy_horizontal = expanding

		tooltipwidget = {
			using = culture_pillar_tooltip

			blockoverride "above_description_text" {
				text = "[ReplacePillarWindow.GetPickPillarBlockers( CulturePillar.Self )]"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding

			button_text = {
				layoutpolicy_horizontal = expanding
				shortcuts_list = {
					blockoverride "click" {
						onclick = "[ReplacePillarWindow.SelectPillar( CulturePillar.Self )]"
					}
				}
				blockoverride "pre" {
					#TODO
					# text_single = {
					# 	visible = "[ReplacePillarWindow.IsMartial]"
					# 	raw_text = "Martial custom"
					# }

					text_single = {
						raw_text = "[IndexNumber],"
					}
					text_single = {
						visible = "[ObjectsEqual( ReplacePillarWindow.GetSelectedPillar, CulturePillar.Self )]"
						raw_text = "Selected,"
					}
					text_single = {
						visible = "[Not(ReplacePillarWindow.CanPickPillar( CulturePillar.Self ))]"
						raw_text = "Can't pick"
					}
				}
				blockoverride "text" {
					raw_text = "[CulturePillar.GetNameNoTooltip]."
				}
				blockoverride "extra" {
					text_single = {
						raw_text = "[ReplacePillarWindow.GetPillarCostString( CulturePillar.Self )],"
					}
					text_single = {
						visible = "[Not( ReplacePillarWindow.CanAffordPillar( CulturePillar.Self ) )]"
						raw_text = "not enough,"
					}
					text_single = {
						margin_left = -3
						raw_text = "[Culture.GetTotalReformTimeForPillar]."
						tooltip = "ESTABLISHMENT_TIME_TOOLTIP_PILLAR"
					}
				}
				onclick = "[ReplacePillarWindow.SelectPillar( CulturePillar.Self )]"
				enabled = "[ReplacePillarWindow.CanPickPillar( CulturePillar.Self )]"
			}
		}
	}
}

types CultureReplacePillarTypes
{
	type widget_pillar_item = widget {
		size = {  300 90  }

		tooltipwidget = {
			using = culture_pillar_tooltip

			blockoverride "above_description_text" {
				text = "[ReplacePillarWindow.GetPickPillarBlockers( CulturePillar.Self )]"
			}
		}

		vbox = {
			button_standard = {
				size = {  300 60  }
				onclick = "[ReplacePillarWindow.SelectPillar( CulturePillar.Self )]"
				enabled = "[ReplacePillarWindow.CanPickPillar( CulturePillar.Self )]"

				highlight_icon = {
					name = "ethos_icon"
					visible = "[ReplacePillarWindow.IsEthos]"
					block "icon_size" {
						size = { 300 60 }
					}
					texture = "[CulturePillar.GetIcon]"
					using = Mask_Rough_Edges
				}

				icon = {
					name = "selection_glow"
					visible = "[ObjectsEqual( ReplacePillarWindow.GetSelectedPillar, CulturePillar.Self )]"
					parentanchor = center
					position = { 0 2 }
					size = { 100% 100% }

					state = {
						trigger_on_create = yes

						name = max_glow
						next = min_glow
						duration = 1
						using = Animation_Curve_Default
						alpha = 0.5
					}

					state = {
						name = min_glow
						next = max_glow
						duration = 1.6
						using = Animation_Curve_Default
						alpha = 0.3
					}

					background = {
						texture = "gfx/interface/component_effects/innovation_glow.dds"
						margin = { 14 12 }
						spriteType = Corneredstretched
						spriteborder = { 30 30 }
						tintcolor = { 1 0.8 0.6 1 }
					}
				}


				hbox = {
					margin_top = 10
					margin_right = 10
					margin_bottom = 10
					margin_left = 10

					expand = {}

					icon_doctrine = {
						name = "doctrine_icon"
						visible = "[ReplacePillarWindow.IsMartial]"
						size = { 44 44 }
						texture = "[CulturePillar.GetIcon]"
					}

					spacer = {
						size = { 15 44 }
					}

					text_label_center = {
						name = "name"
						visible = "[Not( ReplacePillarWindow.IsMartial ) ]"
						text = "[CulturePillar.GetNameNoTooltip]"
						maximumsize = { 180 44 }
						fontsize_min = 12
						multiline = yes
						elide = right

						using = Font_Size_Medium

						block "default_format" {
							default_format = "#high"
						}
					}

					text_label_center = {
						name = "name2"
						visible = "[ReplacePillarWindow.IsMartial]"
						text = "[CulturePillar.GetNameNoTooltip]"
						maximumsize = { 180 44 }
						fontsize_min = 12
						multiline = yes
						elide = right

						using = Font_Size_Medium
					}

					expand = {}

				}
			}
			hbox = {
				spacing = 20
				text_label_center = {
					name = "cost"
					text = "[ReplacePillarWindow.GetPillarCostString( CulturePillar.Self )]"
					maximumsize = { 130 44 }
					fontsize_min = 12
					multiline = yes
					align = center
					elide = right

					using = Font_Size_Small
					tooltip = "[ReplacePillarWindow.GetPillarCostBreakdown( CulturePillar.Self )]"
					using = tooltip_se

					background = {
						visible = "[Not( ReplacePillarWindow.CanAffordPillar( CulturePillar.Self ) )]"
						margin_bottom = -1
						margin_top = -3
						margin_right = 15
						using = Status_Bad
					}
				}

				text_label_center = {
					name = "time"
					text = "[Culture.GetTotalReformTimeForPillar]"
					maximumsize = { 130 44 }
					fontsize_min = 12
					multiline = yes
					align = center
					elide = right

					using = Font_Size_Small
					tooltip = "ESTABLISHMENT_TIME_TOOLTIP_PILLAR"
					using = tooltip_se
				}
			}
		}
	}
}
