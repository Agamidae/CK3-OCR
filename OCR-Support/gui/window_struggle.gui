######################################################
##################### STRUGGLE #######################
######################################################
window = {
	name = "struggle_window"
	widgetid = "struggle_window"
	datacontext = "[StruggleWindow.GetStruggle]"
	datacontext = "[GetVariableSystem]"
	datacontext = "[GetPlayer]"
	layer = windows_layer
	movable = no
	allow_outside = yes
	using = base_ocr_window
	using = sound_struggle_panel

	window_ocr = {
		blockoverride "ocr_content" {
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				visible = "[Isnt('struggle_ending_phase_details')]"

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					visible = "[Isnt('struggle_effects')]"

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Isnt('catalysts')]"

						vbox = { # participants
							name = "struggle_participants"
							layoutpolicy_horizontal = expanding
							visible = "[Isnt('showing_ending_decisions')]"

							header_pattern = {
								background = { using = Background_Area_Border_Solid }
								layoutpolicy_horizontal = expanding

								blockoverride "header_text"
								{
									text = "[StruggleWindow.GetStruggle.GetNameNoTooltip]"
								}

								blockoverride "button_close"
								{
									onclick = "[StruggleWindow.Close]"
									onclick = "[GetVariableSystem.Clear( 'showing_ending_decisions' )]"
									clicksound = "event:/DLC/FP2/SFX/UI/fp2_struggle_view_close"
								}
							}

							text_single = {
								raw_text = "[Struggle.GetPlayerInvolvementDesc]."
								layoutpolicy_horizontal = expanding
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								shortcut = mapmode_kingdoms_secondary
								name = "struggle_involvement_button_tutorial_uses_this"
								widgetid = "struggle_involvement_button_tutorial_uses_this"
								onclick = "[ToggleGameViewData('struggle_involvement', Struggle.GetID)]"
								blockoverride "text" {
									raw_text = "STRUGGLE_INVOLVEMENT_BUTTON"
								}
								blockoverride "extra" {
									comma = {}
									text_single = {
										raw_text = "i."
									}
								}
							}

							#expand = { }
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							name = "ending_decision_button_tutorial_uses_this"
							visible = "[Not(GetVariableSystem.Exists('showing_ending_decisions'))]"

							ending_decision_button_ocr = {
								layoutpolicy_horizontal = expanding
								visible = "[GreaterThanOrEqualTo_int32(GetDataModelSize(StruggleWindow.GetEndingDecisions), '(int32)2')]"

								blockoverride onclick {
									shortcut = map_mode_1
									onclick = "[VariableSystem.Toggle('showing_ending_decisions')]"
								}
							}

							ending_decision_button_ocr = {
								layoutpolicy_horizontal = expanding
								visible = "[LessThanOrEqualTo_int32(GetDataModelSize(StruggleWindow.GetEndingDecisions), '(int32)1')]"

								blockoverride onclick {
									shortcut = map_mode_1
									onclick = "[StruggleWindow.OnSingleDecisionClick]"
								}
							}
						}

						vbox = { # Ending Decisions
							name = "ending_decision_area_tutorial_uses_this"
							widgetid = "ending_decision_area_tutorial_uses_this"
							visible = "[VariableSystem.Exists('showing_ending_decisions')]"
							layoutpolicy_horizontal = expanding
							margin_top = 5

							using = Animation_Tab_Switch

							vbox = {
								name = "next_phase_area"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								button_close = {
									onclick = "[VariableSystem.Toggle('showing_ending_decisions')]"
								}

								text_single = {
									datacontext = "[Struggle.GetCurrentPhase]"
									layoutpolicy_horizontal = expanding
									text = "ENDING_DECISION_AREA_HEADER"
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[GreaterThanOrEqualTo_int32(GetDataModelSize(StruggleWindow.GetEndingPhases), '(int32)1')]"

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 3

										text_single = {
											text = "ENDING_PHASE_AREA_LABEL"
										}

										comma = {}

										text_single = {
											raw_text = "[GetDataModelSize(StruggleWindow.GetEndingPhases)]:"
										}

										expand = { }
									}

									vbox = {
										datamodel = "[StruggleWindow.GetEndingPhases]"
										layoutpolicy_horizontal = expanding

										item = {
											text_single = {
												layoutpolicy_horizontal = expanding
												raw_text = "[StrugglePhase.GetName]."
											}
										}
									}
								}

								text_single = {
									text = "ENDING_DECISION_AREA_DESCRIPTION"
									layoutpolicy_horizontal = expanding
								}

								vbox = {
									name = "ending_decisions"
									datamodel = "[StruggleWindow.GetEndingDecisions]"
									layoutpolicy_horizontal = expanding

									item = {
										button_text = {
											layoutpolicy_horizontal = expanding
											shortcuts_list = {
												blockoverride "click" {
													onclick = "[StruggleWindow.OnEndingDecisionClick(Decision.Self)]"
												}
											}
											blockoverride "num" {
											}
											onclick = "[StruggleWindow.OnEndingDecisionClick(Decision.Self)]"
											visible = "[Decision.IsShownForPlayer]"
											blockoverride "text" {
												text = "[Decision.GetTitleForPlayer]"
											}
											blockoverride "extra" {
												text_single = {
													raw_text = ", Incomplete"
													margin_left = -3
													visible = "[Not(Decision.IsPossibleForPlayer)]"
												}
											}
											blockoverride "dot" {
											}
										}
									}
								}
							}
						}

						button_text = {
							shortcut = map_mode_1
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Close decisions."
							}
							visible = "[GetVariableSystem.Exists('showing_ending_decisions')]"
							using = close_window_ocr
							onclick = "[VariableSystem.Clear('showing_ending_decisions')]"
						}


						button = { # Current Phase area
							visible = "[Not( VariableSystem.Exists('showing_ending_decisions') )]"
							name = "current_phase_area"
							layoutpolicy_horizontal = expanding

							button = {
								name = "current_phase_widget"
								datacontext = [StruggleWindow.GetStruggle.GetCurrentPhase]
								datacontext = [GetPlayer]
								resizeparent = yes
								distribute_visual_state = no
								allow_outside = yes

								state = {
									name = active_ending_decision
									trigger_when = "[StruggleWindow.HasPossibleEndingDecision]"
									using = Animation_FadeIn_Standard
									bezier = { 0.5 0 0.5 1 }
								}

								state = {
									name = inactive_ending_decision
									using = Animation_FadeIn_Standard
									bezier = { 0.5 0 0.5 1 }
								}

								vbox = {
									resizeparent = yes
									layoutpolicy_horizontal = expanding

									vbox = {
										layoutpolicy_horizontal = expanding

										hbox = {
											name = "current_phase_header"
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding

											datacontext = "[GetPlayer]"
											tooltipwidget = struggle_tooltip_light

											hbox = {
												layoutpolicy_horizontal = expanding
												name = "text"

												text_single = {
													text = "CURRENT_PHASE"
												}

												text_single = {
													margin_left = 3
													raw_text = "is [StruggleWindow.GetStruggle.GetCurrentPhase.GetNameNoTooltip]. See tooltip for the description."
												}

												dot = { }

												expand = { }
											}
										}

										vbox = {
											name = "current_phase_effects"
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding

											button_text = {
												layoutpolicy_horizontal = expanding
												onclick = "[GetVariableSystem.SetOrToggle('struggle_effects', 'current')]"
												blockoverride "pre" {
													text_single = {
														raw_text = "View"
													}
												}
												blockoverride "text" {
													text = "PHASE_EFFECTS_HEADER"
												}
												blockoverride "extra" {
													comma = {}
													text_single = {
														raw_text = "F."
													}
												}
												shortcut = army_split_half
											}
										}
									}

										widget = { # next phase info
											name = "next_phase_info"
											visible = "[Not( VariableSystem.Exists('showing_ending_decisions') )]"

											size = { 600 25 }

											vbox = { # Phase progressing
											visible = "[Not( Struggle.IsInTransitionPhase )]"
											layoutpolicy_horizontal = expanding

											text_single = {
												text = STRUGGLE_NEXT_PHASE_PROGRESS_DESC
												max_width = 650
												layoutpolicy_horizontal = expanding
											}
										}

										vbox = { # In phase transition
											visible = "[Struggle.IsInTransitionPhase]"
											layoutpolicy_horizontal = expanding

											text_single = {
												text = STRUGGLE_NEXT_PHASE_TRANSITION_LABEL
												layoutpolicy_horizontal = expanding
											}
											text_single = {
												text = STRUGGLE_NEXT_PHASE_TRANSITION_DESC
												layoutpolicy_horizontal = expanding
											}
										}
									}
								}
							}
						}

						vbox = {
							name = "next_phase_area_tutorial_uses_this"
							layoutpolicy_horizontal = expanding

							vbox = {
								visible = "[Not( VariableSystem.Exists('showing_ending_decisions') )]"
								layoutpolicy_horizontal = expanding
								name = "next_phase_area"
								margin_left = 5

								flowcontainer = {
									layoutpolicy_horizontal = expanding
									name = "next_phase_widgets"
									datamodel = "[StruggleWindow.GetNextPhases]"
									direction = vertical

									item = {
										flowcontainer = {
											ignoreinvisible = yes
											direction = vertical

											next_phase_banner_ocr = {}

											flowcontainer = {
												visible = "[StrugglePhase.IsContentVisible( GetDefine( 'NStruggle', 'ENDING_PHASE_WIDGET_CONTENT' ) )]"

												state = {
													name = _hide
													on_start = "[GetVariableSystem.Clear( 'struggle_ending_phase_details' )]"
												}

												button_primary_text = {
													blockoverride "pre" {
														text_single = {
															text = "STRUGGLE_ENDING_LABEL"
														}
														text_single = {
															raw_text = "phase"
														}
														comma = {}
													}
													blockoverride "text" {
														text =  "STRUGGLE_ENDING_EFFECTS_BUTTON"
													}
													onclick = "[VariableSystem.Toggle('struggle_ending_phase_details')]"
												}
											}
										}
									}
								}
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Isnt('showing_ending_decisions')]"
							text_single = {
								layoutpolicy_horizontal = expanding
								text = "STRUGGLE_TOOLTIP_CATALYST_HISTORY_HEADER"
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								block "catalyst_datamodel"
								{
									datamodel = "[Struggle.GetLatestCatalystHistory]"
								}

								item = {
									hbox = {
										layoutpolicy_horizontal = expanding
										text_single = {
											raw_text = "[CatalystHistory.GetStrugglePhase.GetNameNoTooltip]"
										}
										space = { }
										text_single = {
											raw_text = "[CatalystHistory.GetProgress|+=],"
										}
										space = { }

										text_single = {
											text = STRUGGLE_TOOLTIP_CATALYST_HISTORY_ENTRY
										}

										dot = { }

										expand = { }
									}
								}
							}
						}


						expand = { }
					}

					vbox = {
						name = "catalyst_information_area"
						datacontext = "[StruggleWindow.GetSelectedPhase]"
						visible = "[GetVariableSystem.Exists('catalysts')]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						button = {
							using = close_window_ocr
							onclick = "[GetVariableSystem.Clear('catalysts')]"
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3

							text_single = {
								raw_text = "[GetDataModelSize(StruggleWindow.GetCatalystsForSelectedPhase)]"
							}

							text_single = {
								text = "PHASE_CATALYST_DESCRIPTION_HEADER"
							}
							comma = {}
							text_single = {
								raw_text = "sorted by points"
							}

							dot_l = { }
							expand = { }
						}

						text_single = {
							text = "PHASE_CATALYST_DESCRIPTION_HEADER_INFO"
							layoutpolicy_horizontal = expanding
						}

						button_checked_text = {
							shortcut = map_mode_11
							layoutpolicy_horizontal = expanding
							onclick = "[Toggle('time_catalysts')]"
							blockoverride "visible" {
								visible = "[Isnt('time_catalysts')]"
							}
							blockoverride "text" {

							}
							blockoverride "extra" {
								text_single = {
									raw_text = "show only"
								}
								text_single = {
									raw_text = "[CountItems]"
									margin_left = 5
									margin_right = 5

									hbox = {
										name = "items"
										datamodel = "[StruggleWindow.GetCatalystsForSelectedPhase]"
										item = {
											hbox = {
												visible = "[GreaterThan_int32( Struggle.GetNumCompletionsOfCatalystForPhase(StruggleWindow.GetSelectedPhase, CatalystEntry.GetCatalyst), '(int32)0' )]"
											}
										}
									}
								}
								text_single = {
									raw_text = "completed catalysts, Shift E."
								}

							}
						}

						scrollbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							blockoverride "scrollbox_background" { }
							blockoverride "scrollbox_background_fade" { }
							# blockoverride "scrollbox_margins" { }

							blockoverride "scrollbox_content"
							{
								margin_left = 5

								vbox = {
									name = "catalyst_entries"
									visible = "[Isnt('time_catalysts')]"
									datamodel = "[StruggleWindow.GetCatalystsForSelectedPhase]"
									layoutpolicy_horizontal = expanding
									spacing = -3

									item = {
										hbox = {
											layoutpolicy_horizontal = expanding

											text_multi_wide = {
												text = "[CatalystEntry.GetWorth], [Struggle.GetNumCompletionsOfCatalystForPhase(StruggleWindow.GetSelectedPhase, CatalystEntry.GetCatalyst)] times, [CatalystEntry.GetCatalystDescription]"
												max_width = 680
											}

											expand = { }
										}
									}
								}

								vbox = {
									visible = "[Is('time_catalysts')]"
									datamodel = "[StruggleWindow.GetCatalystsForSelectedPhase]"
									layoutpolicy_horizontal = expanding
									spacing = -3

									item = {
										hbox = {
											visible = "[GreaterThan_int32( Struggle.GetNumCompletionsOfCatalystForPhase(StruggleWindow.GetSelectedPhase, CatalystEntry.GetCatalyst), '(int32)0' )]"
											layoutpolicy_horizontal = expanding

											text_multi_wide = {
												text = "[CatalystEntry.GetWorth], [Struggle.GetNumCompletionsOfCatalystForPhase(StruggleWindow.GetSelectedPhase, CatalystEntry.GetCatalyst)] times, [CatalystEntry.GetCatalystDescription]"
												max_width = 680
											}

											expand = { }
										}
									}
								}
							}
						}
					}

					expand = { }
				}

				vbox = {
					visible = "[GetVariableSystem.Exists('struggle_effects')]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Window_Background_Sidebar

					button = {
						using = close_window_ocr
						shortcut = army_split_half
						onclick = "[GetVariableSystem.Clear('struggle_effects')]"
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "pre" {
							text_single = {
								raw_text = "Show"
								visible = "[Not(GetVariableSystem.HasValue('struggle_effects', 'current'))]"
							}
						}
						blockoverride "text" {
							raw_text = "[StruggleWindow.GetStruggle.GetCurrentPhase.GetNameNoTooltip]"
						}
						blockoverride "extra" {
							text_single = {
								raw_text = "Selected"
								visible = "[GetVariableSystem.HasValue('struggle_effects', 'current')]"
							}
						}
						blockoverride "dot" {

						}
						onclick = "[GetVariableSystem.Set('struggle_effects', 'current')]"
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						datamodel = "[StruggleWindow.GetNextPhases]"

						item = {
							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "pre" {
									text_single = {
										raw_text = "Show"
										visible = "[Or(GetVariableSystem.HasValue('struggle_effects', 'current'), Not(ObjectsEqual(StruggleWindow.GetSelectedPhase, StrugglePhase.Self)))]"
										align = left
									}
								}
								blockoverride "text" {
									raw_text = "[StrugglePhase.GetNameNoTooltip]"
								}
								blockoverride "extra" {
									text_single = {
										align = left
										raw_text = "Selected"
										visible = "[And(ObjectsEqual(StruggleWindow.GetSelectedPhase, StrugglePhase.Self), Not(GetVariableSystem.HasValue('struggle_effects', 'current')))]"
									}
								}
								blockoverride "dot" {

								}
								onclick = "[GetVariableSystem.Set('struggle_effects', 'next')]"
								onclick = "[StruggleWindow.SetSelectedPhase(StrugglePhase.Self)]"
								onclick = "[PdxGuiTriggerAllAnimations('catalyst_refresh')]"
							}
						}
					}

					phase_effects_vbox = {
						visible = "[GetVariableSystem.HasValue('struggle_effects', 'next')]"
						datacontext = "[StruggleWindow.GetSelectedPhase]"
					}

					phase_effects_vbox = {
						visible = "[GetVariableSystem.HasValue('struggle_effects', 'current')]"
						datacontext = "[StruggleWindow.GetStruggle.GetCurrentPhase]"
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				visible = "[Is('struggle_ending_phase_details')]"

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[StruggleWindow.GetSelectedPhase]"

					header_text = {
						layoutpolicy_horizontal = expanding

						blockoverride "header_text"
						{
							text = "STRUGGLE_ENDING_PHASE_WINDOW_TITLE"
						}

						blockoverride "button_close"
						{
							onclick = "[VariableSystem.Toggle( 'struggle_ending_phase_details' )]"
							using = close_window_ocr
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
						}
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						shortcut = map_mode_1
						onclick = "[Toggle('decision_desc')]"
						blockoverride "text" {
							raw_text = "Description,"
						}
						blockoverride "extra" {
							text_single = {
								raw_text = "[Collapse('decision_desc')] E."
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Isnt('decision_desc')]"

						text_multi_wide = {
							text = "STRUGGLE_PHASE_DESCRIPTION"
						}
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content"
						{
							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								vbox = {
									layoutpolicy_horizontal = expanding

									text_single = {
										layoutpolicy_horizontal = expanding
										text = "STRUGGLE_ENDING_PHASE_EFFECTS_TITLE"
									}

									text_multi_wide = {
										visible = "[Not( StringIsEmpty( Struggle.GetEndingPhaseEffectDesc( StrugglePhase.Self, Character.Self ) ) )]"
										layoutpolicy_horizontal = expanding
										text = "[Struggle.GetEndingPhaseEffectDesc( StrugglePhase.Self, Character.Self )]"
									}

									text_single = {
										layoutpolicy_horizontal = expanding
										visible = "[StringIsEmpty( Struggle.GetEndingPhaseEffectDesc( StrugglePhase.Self, Character.Self ) )]"
										text = "STRUGGLE_ENDING_PHASE_NO_EFFECT_DESC"
										alwaystransparent = yes
									}
								}

								expand = {}
							}
						}
					}

					text_multi_wide = {
						layoutpolicy_horizontal = expanding
						text = STRUGGLE_ENDING_PHASE_WARNING_MESSAGE
					}
				}
				expand = { }
			}
		}
	}

	window_struggle_old = {}
}

types OCR {
	type next_phase_banner_ocr = flowcontainer {
		direction = vertical
		ignoreinvisible = yes

		button_text = {
			datacontext = "[GetPlayer]"

			onclick = "[StruggleWindow.SetSelectedPhase(StrugglePhase.Self)]"
			onclick = "[DefaultOnStrugglePhaseClick(Struggle.GetID, StrugglePhase.Self)]"
			onclick = "[PdxGuiTriggerAllAnimations('catalyst_refresh')]"
			onclick = "[GetVariableSystem.Set('catalysts', 'yes')]"
			enabled = "[Or( Not( Struggle.IsInTransitionPhase ), ObjectsEqual( StrugglePhase.Self, Struggle.GetNextPhase ) )]"

			shortcuts_list = {
				blockoverride "click" {
					onclick = "[StruggleWindow.SetSelectedPhase(StrugglePhase.Self)]"
					onclick = "[PdxGuiTriggerAllAnimations('catalyst_refresh')]"
					onclick = "[GetVariableSystem.Set('catalysts', 'yes')]"
				}
			}

			blockoverride "num" {
			}
			blockoverride "extra" {
				flowcontainer = {
					ignoreinvisible = yes
					margin_left = -3
					spacing = 3
					text_single = {
						raw_text = "[StrugglePhase.GetNameNoTooltip] phase"
					}

					text_single = {
						raw_text = "is leading"
						visible = "[ObjectsEqual(Struggle.GetCurrentLeadingPhase, StrugglePhase.Self)]"
					}

					comma = {}

					text_single = {
						raw_text = "[Struggle.GetPhaseValue(StrugglePhase.Self)] points out of [Struggle.GetPhaseDurationValue]."
					}

					text_single = {
						raw_text = "Click to view its catalysts"
						# visible = "[Not(ObjectsEqual(StruggleWindow.GetSelectedPhase, StrugglePhase.Self))]"
					}

					dot = { }

					# text_single = {
					# 	raw_text = ". See tooltip for recent changes."
					# 	tooltipwidget = {
					# 		using = struggle_phase_tooltip
					# 	}
					# }
				}
			}
		}

		button_text = {
			onclick = "[StruggleWindow.SetSelectedPhase(StrugglePhase.Self)]"
			onclick = "[PdxGuiTriggerAllAnimations('catalyst_refresh')]"
			onclick = "[GetVariableSystem.Set('catalysts', 'yes')]"
			enabled = "[Or( Not( Struggle.IsInTransitionPhase ), ObjectsEqual( StrugglePhase.Self, Struggle.GetNextPhase ) )]"
			blockoverride "extra" {
				flowcontainer = {

					text_single = {
						raw_text = "See this tooltip for the description."
					}
					tooltipwidget = {
						struggle_phase_tooltip = {}
					}
				}
			}
		}
	}

	type phase_effects_vbox = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		datacontext = "[GetPlayer]"

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_content" {

				flowcontainer = {
					ignoreinvisible = yes
					layoutpolicy_horizontal = expanding
					direction = vertical

					button_text = {
						shortcut = map_mode_1
						visible = "[Or(Or(Isnt('war_effects'), Isnt('faith_effects')), Or(Isnt('culture_effects'), Isnt('other_effects')))]"
						onclick = "[Set('war_effects', 'yes')]"
						onclick = "[Set('faith_effects', 'yes')]"
						onclick = "[Set('culture_effects', 'yes')]"
						onclick = "[Set('other_effects', 'yes')]"
						blockoverride "text" {
							raw_text = "Collapse all, E."
						}
					}

					flowcontainer = {
						ignoreinvisible = yes
						layoutpolicy_horizontal = expanding

						direction = vertical

						button_text = {
							onclick = "[Toggle('war_effects')]"
							shortcut = speed_1
							blockoverride "pre" {
								text_single = {
									raw_text = "1, "
								}
							}
							blockoverride "text" {
								raw_text = "STRUGGLE_PHASE_EFFECTS_WAR_TT_HEADER"
							}
							blockoverride "extra" {
								comma = {}
								text_single = {
									raw_text = "[Collapse('war_effects')]"
								}
							}
						}

						text_multi = {
							visible = "[Isnt('war_effects')]"
							background = { using = Background_Area_Border_Solid }
							autoresize = yes
							min_width = 650
							max_width = 650
							text = "[Struggle.GetWarEffect(StrugglePhase.Self, Character.Self)]"
						}

						button_text = {
							onclick = "[Toggle('faith_effects')]"
							shortcut = speed_2
							blockoverride "pre" {
								text_single = {
									raw_text = "2, "
								}
							}
							blockoverride "text" {
								raw_text = "STRUGGLE_PHASE_EFFECTS_FAITH_TT_HEADER"
							}
							blockoverride "extra" {
								comma = {}
								text_single = {
									raw_text = "[Collapse('faith_effects')]"
								}
							}
							using = agot_hide
						}

						container = {
							visible = "[Isnt('faith_effects')]"

							widget = {
								background = { using = Background_Area_Border_Solid }
								size = { 0 0 }
								scissor = yes
								using = agot_hide

								text_multi = {
									min_width = 650
									max_width = 650
									margin_top = -35
									autoresize = yes
									resizeparent = yes
									text = "[Struggle.GetFaithEffect(StrugglePhase.Self, Character.Self)]"
								}
							}
						}
					}

					flowcontainer = {
						ignoreinvisible = yes
						direction = vertical

						button_text = {
							onclick = "[Toggle('culture_effects')]"
							shortcut = speed_3
							blockoverride "pre" {
								text_single = {
									raw_text = "3, "
								}
							}
							blockoverride "text" {
								raw_text = "STRUGGLE_PHASE_EFFECTS_CULTURE_TT_HEADER"
							}
							blockoverride "extra" {
								comma = {}
								text_single = {
									raw_text = "[Collapse('culture_effects')]"
								}
							}
						}

						widget = {
							background = { using = Background_Area_Border_Solid }
							size = { 0 0 }
							scissor = yes
							visible = "[Isnt('culture_effects')]"

							text_multi = {
								max_width = 650
								min_width = 650
								margin_top = -35
								autoresize = yes
								resizeparent = yes
								text = "[Struggle.GetCultureEffect(StrugglePhase.Self, Character.Self)]"
							}
						}

						button_text = {
							onclick = "[Toggle('other_effects')]"
							shortcut = speed_4
							blockoverride "pre" {
								text_single = {
									raw_text = "4, "
								}
							}
							blockoverride "text" {
								raw_text = "STRUGGLE_PHASE_EFFECTS_OTHER_TT_HEADER"
							}
							blockoverride "extra" {
								comma = {}
								text_single = {
									raw_text = "[Collapse('other_effects')]"
								}
							}
						}

						widget = {
							background = { using = Background_Area_Border_Solid }
							size = { 0 0 }
							scissor = yes
							visible = "[Isnt('other_effects')]"

							text_multi = {
								min_width = 650
								max_width = 650
								margin_top = -35
								autoresize = yes
								resizeparent = yes
								text = "[Struggle.GetOtherEffect(StrugglePhase.Self, Character.Self)]"
							}
						}
					}
				}
			}
		}
	}

	type ending_decision_button_ocr = button {
		name = "end_struggle_button"
		size = { 600 0 }
		enabled = "[GreaterThan_int32(GetDataModelSize(StruggleWindow.GetEndingDecisions), '(int32)0')]"
		# tooltip = "[StruggleWindow.GetEndingButtonTooltip]"

		block onclick { }
		clicksound = "event:/DLC/FP2/SFX/UI/fp2_struggle_ending_decision_view"

		flowcontainer = {
			resizeparent = yes
			min_width = 600
				ignoreinvisible = yes

			text_single = {
				raw_text = "[SelectLocalization(GreaterThan_int32(GetDataModelSize(StruggleWindow.GetEndingDecisions), '(int32)1'), 'ENDING_DECISION_BUTTON_LABEL_MULTIPLE', 'ENDING_DECISION_BUTTON_LABEL_SINGLE')], hotkey E."
			}

			space = { }

			text_single = {
				visible = "[And( StruggleWindow.HasPossibleEndingDecision, Struggle.IsCharacterInvolvedOrInterloper( GetPlayer ) )]"
				text = "ENDING_DECISION_AVAILABLE"
				default_format = "#clickable"
				alwaystransparent = yes
			}

			text_single = {
				visible = "[Or( Not( StruggleWindow.HasPossibleEndingDecision ), Not( Struggle.IsCharacterInvolvedOrInterloper( GetPlayer ) ) )]"
				text = "ENDING_DECISION_UNAVAILABLE"
				default_format = "#clickable"
				alwaystransparent = yes
			}

			dot = { }

		}
	}
}


types Struggle
{
	type next_phase_banner = container {
		button = {
			size = { 148 160 }
			position = { 0 26 }

			onclick = "[StruggleWindow.SetSelectedPhase(StrugglePhase.Self)]"
			onclick = "[DefaultOnStrugglePhaseClick(Struggle.GetID, StrugglePhase.Self)]"
			onclick = "[PdxGuiTriggerAllAnimations('catalyst_refresh')]"

			enabled = "[Or( Not( Struggle.IsInTransitionPhase ), ObjectsEqual( StrugglePhase.Self, Struggle.GetNextPhase ) )]"

			tooltipwidget = {
				struggle_phase_tooltip = {}
			}

			widget = {
				visible = "[Not( VariableSystem.Exists('showing_ending_decisions') )]"
				size = { 46 60 }
				position = { 0 -27 }
				parentanchor = hcenter|top

				background = {
					using = Background_Area_Dark
				}
			}

			background = {
				visible = "[ObjectsEqual(StruggleWindow.GetSelectedPhase, StrugglePhase.Self)]"
				using = Background_Area_Dark
				alpha = 0.6

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
					blend_mode = alphamultiply
					alpha = 1
				}
			}

			default_struggle_phase_banner = {

				blockoverride "default_point_content" {
					container = {
						parentanchor = center
						position = { 0 30 }
						current_struggle_phase_progress = { }
					}
				}

				blockoverride "default_time_content" {
					container = {
						parentanchor = center
						position = { 0 30 }
						current_struggle_phase_progress = { }
					}
				}

				blockoverride "default_ending_content" {
					container = {
						parentanchor = center
						position = { 0 30 }
						current_struggle_phase_progress = { }
					}
				}

				icon = {
					name = "arrow"
					visible = "[ObjectsEqual(Struggle.GetCurrentLeadingPhase, StrugglePhase.Self)]"
					parentanchor = center
					texture = "gfx/interface/window_struggle/arrow.dds"
					size = { 30 18 }
					position = { -1 -90 }
					allow_outside = yes
				}

				icon = {
					name = "funnel_right"
					visible = "[ObjectsEqual(StruggleWindow.GetSelectedPhase, StrugglePhase.Self)]"
					parentanchor = center
					texture = "gfx/interface/window_struggle/funnel_divider.dds"
					size = { 322 100 }
					position = { 225 33 }
					using = Color_Blue
					alpha = 0.4

				}

				icon = {
					name = "funnel_left"
					visible = "[ObjectsEqual(StruggleWindow.GetSelectedPhase, StrugglePhase.Self)]"
					parentanchor = center
					mirror = horizontal
					texture = "gfx/interface/window_struggle/funnel_divider.dds"
					size = { 322 100 }
					position = { -225 33 }
					using = Color_Grey
					alpha = 0.4
				}
			}
		}
	}

	type struggle_phase_based_widget = widget {
		block "size" {
			size = { 100% 100% }
		}

		widget = {
			size = { 100% 100% }
			visible = "[StrugglePhase.IsContentVisible(GetDefine( 'NStruggle', 'POINT_BASED_PHASE_WIDGET_CONTENT' ))]"
			block "point_based_widget_content" {}
		}

		widget = {
			size = { 100% 100% }
			visible = "[StrugglePhase.IsContentVisible(GetDefine( 'NStruggle', 'TIME_BASED_PHASE_WIDGET_CONTENT' ))]"
			block "time_based_widget_content" {}
		}

		widget = {
			size = { 100% 100% }
			visible = "[StrugglePhase.IsContentVisible(GetDefine( 'NStruggle', 'ENDING_PHASE_WIDGET_CONTENT' ))]"
			block "ending_widget_content" {}
		}
	}

	type current_struggle_phase_based_widget = widget {
		block "size" {
			size = { 100% 100% }
		}

		widget = {
			size = { 100% 100% }
			visible = "[Struggle.GetCurrentPhase.IsContentVisible(GetDefine( 'NStruggle', 'POINT_BASED_PHASE_WIDGET_CONTENT' ))]"
			block "point_based_widget_content" {}
		}

		widget = {
			size = { 100% 100% }
			visible = "[Struggle.GetCurrentPhase.IsContentVisible(GetDefine( 'NStruggle', 'TIME_BASED_PHASE_WIDGET_CONTENT' ))]"
			block "time_based_widget_content" {}
		}

		widget = {
			size = { 100% 100% }
			visible = "[Struggle.GetCurrentPhase.IsContentVisible(GetDefine( 'NStruggle', 'ENDING_PHASE_WIDGET_CONTENT' ))]"
			block "ending_widget_content" {}
		}
	}

	type struggle_phase_based_banner = widget {
		size = { 100% 100% }

		struggle_phase_based_widget = {
			blockoverride "point_based_widget_content" {
				icon = {
					size = { 100% 100% }
					texture = "gfx/interface/window_struggle/current_phase_point_based_phase.dds"

					block "current_state_background_texture" { }
				}

				block "point_based_banner_content" {}
			}

			blockoverride "time_based_widget_content" {
				icon = {
					size = { 100% 100% }
					texture = "gfx/interface/window_struggle/current_phase_time_based_phase.dds"

					block "current_state_background_texture" { }
				}

				block "timed_based_banner_content" {}
			}

			blockoverride "ending_widget_content" {
				icon = {
					size = { 100% 100% }
					texture = "gfx/interface/window_struggle/current_phase_ending_phase.dds"
					block "current_state_background_texture" {}
				}

				widget = {
					size = { 100% 100% }

					icon = {
						size = { 100% 100% }
						texture = "gfx/interface/window_struggle/next_phase_ending_fire_01.dds"
						alpha = 0.2

						state = {
							trigger_on_create = yes
							name = a
							next = b

							using = Animation_Curve_Default
							duration = 1
							alpha = 0.2
						}

						state = {
							name = b
							next = a

							using = Animation_Curve_Default
							duration = 1
							alpha = 0
						}
					}

					icon = {
						size = { 100% 100% }
						texture = "gfx/interface/window_struggle/next_phase_ending_fire_02.dds"
						alpha = 0

						state = {
							trigger_on_create = yes
							name = a
							next = b

							using = Animation_Curve_Default
							duration = 1
							alpha = 0
						}

						state = {
							name = b
							next = a

							using = Animation_Curve_Default
							duration = 1
							alpha = 0.2
						}
					}
				}

				block "ending_banner_content" {}
			}
		}

		widget = {
			parentanchor = center
			size = { 100% 100% }

			text_single = {
				block "title_visibiliy" {}
				parentanchor = center
				position = { 0 -46 }
				text = "[StrugglePhase.GetNameNoTooltip]"
				default_format = "#high"
			}

			container = {
				parentanchor = center
				block "icon_position" {}
				block "icon_visibiliy" {}
				icon = {
					size = { 65 65 }
					texture = "gfx/interface/icons/struggle_banners/icon_background_dark.dds"
				}

				icon = {
					parentanchor = center
					position = { 0 -1 }
					size = { 45 45 }
					texture = "[StrugglePhase.GetIcon]"
				}
			}
		}
	}

	type default_struggle_phase_banner = struggle_phase_based_banner {
		blockoverride "current_state_background_texture" {
			modify_texture = {
				visible = "[And(ObjectsEqual(StruggleWindow.GetSelectedPhase, StrugglePhase.Self), Not(VariableSystem.Exists('showing_ending_decisions')))]"
				texture = "gfx/interface/colors/white.dds"
				alpha = 0.4
				blend_mode = overlay
			}
		}

		blockoverride "point_based_banner_content" {
			block "default_point_content" {}

			icon = {
				size = { 21 21 }
				parentanchor = top|hcenter
				position = { 0 7}
				texture = "gfx/interface/icons/struggle_types/point_based_phase_icon.dds"
			}
		}

		blockoverride "timed_based_banner_content" {
			block "default_time_content" {}
			icon = {
				size = { 24 24 }
				parentanchor = top|hcenter
				position = { 0 }
				texture = "gfx/interface/icons/struggle_types/time_based_phase_icon.dds"
			}
		}

		blockoverride "ending_banner_content" {
			block "default_ending_content" {}
			icon = {
				size = { 23 23 }
				parentanchor = top|hcenter
				position = { 0 4}
				texture = "gfx/interface/icons/struggle_types/ending_phase_icon.dds"
			}
		}

	}

	type current_struggle_phase_progress = current_struggle_phase_based_widget {
		blockoverride "point_based_widget_content" {
			progressbar_standard = {
				visible = "[ObjectsEqual(Struggle.GetCurrentLeadingPhase, StrugglePhase.Self)]"
				parentanchor = center
				size = { 80 12 }
				value = "[CurrentAndMaxToProgressbarValueInt32(Struggle.GetPhaseValue(StrugglePhase.Self), Struggle.GetPhaseDurationValue)]"
				progresstexture = "gfx/interface/progressbars/progress_orange.dds"
			}

			progressbar_standard = {
				visible = "[Not(ObjectsEqual(Struggle.GetCurrentLeadingPhase, StrugglePhase.Self))]"
				parentanchor = center
				size = { 80 12 }
				value = "[CurrentAndMaxToProgressbarValueInt32(Struggle.GetPhaseValue(StrugglePhase.Self), Struggle.GetPhaseDurationValue)]"
				progresstexture = "gfx/interface/progressbars/progress_grandeur_increase.dds"
			}

			text_single = {
				parentanchor = center
				position = { 0 10 }
				text = "POINT_BASED_PHASE_VALUE"
				default_format = "#high"
			}
		}

		blockoverride "time_based_widget_content" {
			text_single = {
				parentanchor = center
				position = { 0 10 }
				text = "TIME_BASED_PHASE_VALUE"
				default_format = "#high"
			}
		}
	}

	### Ending Phase Banner
	type struggle_ending_phase_banner = container {
		button = {
			size = { 148 160 }
			block "banner_position" {
				position = { 0 26 }
			}
			tooltipwidget = {
				struggle_phase_tooltip = {}
			}

			default_struggle_phase_banner = { }
		}
	}

	type ending_decision_button = button_primary {
		name = "end_struggle_button"
		enabled = "[GreaterThan_int32(GetDataModelSize(StruggleWindow.GetEndingDecisions), '(int32)0')]"

		size = {100 60 }

		block onclick {}
		clicksound = "event:/DLC/FP2/SFX/UI/fp2_struggle_ending_decision_view"

		text_single = {
			parentanchor = center
			position = { 0 -15 }
			text = "[SelectLocalization(Or(GreaterThan_int32(GetDataModelSize(StruggleWindow.GetEndingDecisions), '(int32)1'),GreaterThan_int32(GetDataModelSize(StruggleWindow.GetEndingPhases), '(int32)1')), 'ENDING_DECISION_BUTTON_LABEL_MULTIPLE', 'ENDING_DECISION_BUTTON_LABEL_SINGLE')]"
			max_width = 230
			using = Font_Size_Medium
			default_format = "#clickable"
			alwaystransparent = yes
		}

		text_single = {
			visible = "[And( StruggleWindow.HasPossibleEndingDecision, Struggle.IsCharacterInvolvedOrInterloper( GetPlayer ) )]"
			parentanchor = center
			position = { 0 8 }
			max_width = 180
			text = "ENDING_DECISION_AVAILABLE"
			default_format = "#clickable"
			alwaystransparent = yes
		}

		text_single = {
			visible = "[Or( Not( StruggleWindow.HasPossibleEndingDecision ), Not( Struggle.IsCharacterInvolvedOrInterloper( GetPlayer ) ) )]"
			parentanchor = center
			position = { 0 8 }
			max_width = 180
			text = "ENDING_DECISION_UNAVAILABLE"
			default_format = "#clickable"
			alwaystransparent = yes
		}
	}

	type struggle_mini_map_mode = mini_map_mode {
		parentanchor = bottom|left
		widgetanchor = bottom|right
		position = { -350 -25 }

		blockoverride "map_mode_buttons"
		{
			icon_button_mapmode = {
				blockoverride = "mm_datacontext"
				{
					datacontext = "[GetMapMode( 'struggle' )]"
				}
			}

			icon_button_mapmode = {
				blockoverride = "mm_datacontext"
				{
					datacontext = "[GetMapMode( 'realms' )]"
				}

				blockoverride "mm_button"
				{
					shortcut = "map_mode_1"
				}
			}

			icon_button_mapmode = {
				blockoverride = "mm_datacontext"
				{
					datacontext = "[GetMapMode( 'religions' )]"
				}

				blockoverride "mm_button"
				{
					shortcut = "map_mode_3"
				}
			}

			icon_button_mapmode = {
				blockoverride = "mm_datacontext"
				{
					datacontext = "[GetMapMode( 'cultures' )]"
				}

				blockoverride "mm_button"
				{
					shortcut = "map_mode_2"
				}
			}
		}
	}

	type window_ending_phase_effects = window {
		parentanchor = center
		widgetanchor = center

		using = Window_Movable
		using = Window_Background
		using = Window_Decoration_Spike

		visible = "[VariableSystem.Exists('struggle_ending_phase_details')]"

		datacontext = "[StruggleWindow.GetSelectedPhase]"

		size = { 630 935 }
		layer = middle
		position = { -700 0 }

		vbox = {
			using = Window_Margins

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					layoutpolicy_horizontal = expanding
					text = "STRUGGLE_ENDING_PHASE_WINDOW_TITLE"
				}

				blockoverride "button_close"
				{
					onclick = "[VariableSystem.Toggle( 'struggle_ending_phase_details' )]"
					using = close_window_ocr
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 550 220 }

					background = {
						texture = "[StrugglePhase.GetDetailBackground]"
						margin_top = 10
						alpha = 0.7
						using = Mask_Rough_Edges
					}
				}

				text_multi = {
					name = "description"
					minimumsize = { 550 -1 }
					maximumsize = { 550 -1 }
					margin = { 15 15 }
					autoresize = yes
					text = "STRUGGLE_PHASE_DESCRIPTION"
					using = Font_Size_Small
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						spacing = 10

						vbox = {
							layoutpolicy_horizontal = expanding

							background = {
								texture = "gfx/interface/icons/lifestyle_tree_backgrounds/skulduggery.dds"
								tintcolor = { 0.6 0.8 0.8 0.8 }

								margin = { 0 5 }
								using = Mask_Rough_Edges
								alpha = 0.8
								fittype = centercrop
								mirror = horizontal

								modify_texture = {
									texture = "gfx/interface/component_masks/mask_fade_corners_bottom.dds"
									blend_mode = alphamultiply
									alpha = 0.6
								}

								modify_texture = {
									texture = "gfx/interface/component_masks/mask_rough_edges.dds"
									blend_mode = overlay
									alpha = 0.4
								}
							}

							text_label_center = {
								margin = { 40 10 }
								max_width = 450
								text = "STRUGGLE_ENDING_PHASE_EFFECTS_TITLE"
							}

							text_multi = {
								visible = "[Not( StringIsEmpty( Struggle.GetEndingPhaseEffectDesc( StrugglePhase.Self, Character.Self ) ) )]"
								layoutpolicy_horizontal = expanding
								margin = { 15 15 }
								max_width = 550
								autoresize = yes
								text = "[Struggle.GetEndingPhaseEffectDesc( StrugglePhase.Self, Character.Self )]"
							}

							text_single = {
								visible = "[StringIsEmpty( Struggle.GetEndingPhaseEffectDesc( StrugglePhase.Self, Character.Self ) )]"
								margin = { 15 15 }
								max_width = 550
								text = "STRUGGLE_ENDING_PHASE_NO_EFFECT_DESC"
								alwaystransparent = yes
							}
						}

						expand = {}
					}
				}
			}
			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 10 10 }

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 10 10 }

					background = {
						using = Background_Area_Light
						tintcolor = {0.8 0.5 0.5 2.0}
						margin = { -1 -1 }
					}

					background = {
						using = Background_Frame
						tintcolor = {0.8 0.5 0.5 2.0}
					}

					icon = {
						size = {30 30 }
						texture = "gfx/interface/icons/struggle_types/ending_phase_icon.dds"
					}

					text_multi = {
						align = nobaseline
						max_width = 500
						layoutpolicy_horizontal = expanding
						margin_left = 10
						text = STRUGGLE_ENDING_PHASE_WARNING_MESSAGE
						alwaystransparent = no
					}
				}
			}
		}
	}
}
