window = {
	name = "game_rules"
	size = { 100% 100% }
	movable = no
	layer = confirmation

	using = Background_Full_Dim

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		on_start = "[GetVariableSystem.Clear('selected_rule')]"
		on_start = "[PdxGuiWidget.FindChild('game_rules_window').TriggerAnimation('appear')]"
		on_finish = "[Clear('game_rules_list')]"
		on_finish = "[Clear('rules_page')]"
		on_finish = "[Clear('show_all_rule_pages')]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		on_start = "[PdxGuiWidget.FindChild('game_rules_window').TriggerAnimation('disappear')]"
	}

	widget = {
		size = { 100% 100% }
		using = ocr


		vbox = {
			# visible = "[Is('rules_page')]"
			datamodel = "[DataModelFirst(JominiGameRules.GetSettings, '(int32)5')]"

			item = {
				button = {
					shortcuts_list = {
						blockoverride "click" {
							clicksound = ""
						}
					}
				}
			}
		}


		button_normal = {
			size = { 100% 100% }
			onclick = "[JominiGameRules.Hide]"
		}

		widget = {
			name = "game_rules_window"
			parentanchor = center
			size = { 100% 100% }
			alwaystransparent = no
			allow_outside = yes

			# using = Window_Decoration_Frontend_Spike
			using = Window_Background_No_Edge

			state = {
				name = appear
				duration = 0.15
				using = Animation_Curve_Default

				position_y = 0
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_standard_show"
				}
			}

			state = {
				name = disappear
				duration = 0.15
				using = Animation_Curve_Default

				position_y = 50
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/Windows/sfx_ui_generic_window_standard_hide"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[Not(GetVariableSystem.Exists('selected_rule'))]"
				margin = { 5 5 }
				# using = Window_Margins
				# spacing = 5

				hbox = {
		    layoutpolicy_horizontal = expanding

					button_text = {
						onclick = "[Toggle('game_rules_list')]"
					    blockoverride "extra" {
							text_single = {
								raw_text = "[GetDataModelSize(JominiGameRules.GetSettings)] [Localize('GAME_RULES_HEADER')]."
							}
							text_single = {
								raw_text = "[Select_CString(Is('game_rules_list'), 'Show controls, Shift E', 'Expand the list with E')]."
							}
							button = {
								onclick = "[Set('game_rules_list', 'yes')]"
								shortcut = map_mode_1
							}
							button = {
								onclick = "[Clear('game_rules_list')]"
								shortcut = map_mode_11
							}
						}
					}

					button = {
						visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
						onclick = "[JominiGameRules.ApplySettings]"
						onclick = "[JominiGameRules.Hide]"
						shortcut = "close_window"
					}

					button = {
						onclick = "[JominiGameRules.Hide]"
						shortcut = "close_window"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
					}

				    expand = { }
				}

				error_button = {
					layoutpolicy_horizontal = expanding
				}

				vbox = {
					visible = "[Isnt('game_rules_list')]"
					layoutpolicy_horizontal = expanding
					hbox_ironman_achievements_info = {
						layoutpolicy_horizontal = expanding
						name = "ironman_and_achievements"
						visible = "[Not( GameHasMultiplePlayers )]"
					}

					vbox_game_rule_preset_options = {
						layoutpolicy_horizontal = expanding
						visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						hbox = {
						    layoutpolicy_horizontal = expanding

							dropdown_menu_standard = {
								visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"

								blockoverride "dropdown_properties"
								{
									datamodel = "[JominiGameRules.GetCategories]"
									onselectionchanged = "[JominiGameRules.SelectCategory]"
									onselectionchanged = "[Clear('rules_page')]"
									selectedindex = "[JominiGameRules.GetSelectedCategoryIndex]"
								}

								blockoverride "dropdown_active_item_properties"
								{
									raw_text = "[Select_CString( JominiGameRules.HasSelectedCategoryIndex, GameRuleCategory.GetName, Localize( 'Filter by category.' ) )] [AddTextIf(JominiGameRules.HasSelectedCategoryIndex, 'category.')]"
								}

								blockoverride "dropdown_item_properties"
								{
									raw_text = "[GameRuleCategory.GetName] category"
								}

								blockoverride "dropdown_size"
								{
									size = { 400 32 }
								}

								blockoverride "dropdown_list_maxsize"
								{
									maximumsize = { 391 780 }
								}
							}

						    expand = { }
						}
					}
				}


				scrollbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content"
					{
						vbox = {
							layoutpolicy_horizontal = expanding

							button = {
								shortcut = action_list
								# to not accidentally switch to any ruler view
							}

							vbox = {
								visible = "[GreaterThan_int32(GetDataModelSize(JominiGameRules.GetVisibleSettings), '(int32)40')]"
								layoutpolicy_horizontal = expanding
								datamodel = "[DataModelFirst(JominiGameRules.GetVisibleSettings, FixedPointToInt(Add_CFixedPoint(Divide_CFixedPoint(IntToFixedPoint(GetDataModelSize(JominiGameRules.GetVisibleSettings)), '(CFixedPoint)40'), '(CFixedPoint)0.99')))]"
								# total size / 40 (per page) + 0.99 so we have one more
								# so 79 /40 = 1.975 + 0.99 = 2.975 = 2 pages


								button_text = {
									layoutpolicy_horizontal = expanding
									shortcut = map_mode_18
									onclick = "[SetOrToggle('show_all_rule_pages', 'yes')]"

									blockoverride "text" {
										raw_text = "[Select_CString(Is('rules_page'), 'Show pages, Control R', 'Rule pages']."
									}
								}

								item = {
									vbox = {
										layoutpolicy_horizontal = expanding

										hbox = {
											visible = "[Or(Isnt('rules_page'), Is('show_all_rule_pages'))]"
											layoutpolicy_horizontal = expanding

											button_text = {
												name = "show_rules"
												layoutpolicy_horizontal = expanding
												state = {
													trigger_when = "[Isnt('rules_page')]"
													name = "hide_rules"
													on_finish = "[PdxGuiWidget.Show]"
												}
												# onclick = "[PdxGuiTriggerAllAnimations('hide_rules')]"
												onclick = "[Set('rules_page', 'yes')]"
												onclick = "[PdxGuiWidget.AccessParent.AccessParent.FindChild('rules').Show]"
												onclick = "[PdxGuiWidget.AccessParent.AccessParent.FindChild('hide_rules').Show]"
												onclick = "[PdxGuiWidget.Hide]"

												blockoverride "text" {
													raw_text = "[IndexNumber], Show [Add_int32(Multiply_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)40'), '(int32)1')] to [Min_int32(Multiply_int32(IndexNumber, '(int32)40'), GetDataModelSize(JominiGameRules.GetVisibleSettings))]."
												}

												shortcuts_list = {
													blockoverride "click" {
														onclick = "[Set('rules_page', 'yes')]"
														onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.AccessParent.FindChild('rules').Show]"
														onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.AccessParent.FindChild('hide_rules').Show]"
														# onclick = "[PdxGuiWidget.Hide]"
													}
												}
											}
										}

										button_text = {
											# visible = no
											state = {
												trigger_when = "[Isnt('rules_page')]"
												name = "hide_rules"
												on_finish = "[PdxGuiWidget.Hide]"
											}
											name = "hide_rules"
											layoutpolicy_horizontal = expanding
											onclick = "[Clear('rules_page')]"
											onclick = "[PdxGuiWidget.AccessParent.FindChild('rules').Hide]"
											onclick = "[PdxGuiWidget.AccessParent.FindChild('show_rules').Show]"
											onclick = "[PdxGuiWidget.Hide]"
											shortcut = close_window
											blockoverride "text" {
												raw_text = "Showing [Add_int32(Multiply_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)40'), '(int32)1')] to [Min_int32(Multiply_int32(IndexNumber, '(int32)40'), GetDataModelSize(JominiGameRules.GetVisibleSettings))], return with Escape."
											}
										}

										vbox = {
											visible = no
											state = {
												trigger_when = "[Isnt('rules_page')]"
												name = "hide_rules"
												on_finish = "[PdxGuiWidget.Hide]"
											}

											state = {
												name = "show_rules"
												on_finish = "[PdxGuiWidget.Show]"
											}
											name = "rules"
											layoutpolicy_horizontal = expanding

											dynamicgridbox = {
												# visible = no
												datamodel = "[DataModelSubSpan(JominiGameRules.GetVisibleSettings, Multiply_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)40'), Min_int32(Subtract_int32(GetDataModelSize(JominiGameRules.GetVisibleSettings), Multiply_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)40')), '(int32)40') )]"

												layoutpolicy_horizontal = expanding
												# flipdirection = yes
												datamodel_wrap = 20

												item = {
													button_text = {
														layoutpolicy_horizontal = expanding
														datacontext = "[GuiGameRule.GetRule]"
														datacontext = "[GuiGameRule.GetSetting]"
														onclick = "[GetVariableSystem.Set('selected_rule', GameRule.GetName)]"

														blockoverride "pre" {
															spacing = 3
															text_single = {
																raw_text = "[GameRule.GetName],"
																max_width = 900
															}
														}

														blockoverride "text" {
															raw_text = "[GameRuleSetting.GetName]."
															margin_right = 30
														}
													}
												}
											}
										}
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not(GreaterThan_int32(GetDataModelSize(JominiGameRules.GetVisibleSettings), '(int32)40'))]"


								dynamicgridbox = {
									datamodel = "[JominiGameRules.GetVisibleSettings]"

									layoutpolicy_horizontal = expanding
									# flipdirection = yes
									datamodel_wrap = 20

									item = {
										button_text = {
											layoutpolicy_horizontal = expanding
											datacontext = "[GuiGameRule.GetRule]"
											datacontext = "[GuiGameRule.GetSetting]"
											onclick = "[GetVariableSystem.Set('selected_rule', GameRule.GetName)]"

											blockoverride "pre" {
												spacing = 3
												text_single = {
													raw_text = "[GameRule.GetName],"
													max_width = 900
												}
											}

											blockoverride "text" {
												raw_text = "[GameRuleSetting.GetName]."
												margin_right = 30
											}
										}
									}
								}

							}
						}
					}
				}

				expand = {}
			}

			vbox = {
				visible = "[GetVariableSystem.Exists('selected_rule')]"
				margin = { 5 5 }

				vbox = {
					layoutpolicy_horizontal = expanding
					datamodel = "[JominiGameRules.GetSettings]"

					item = {
						vbox = {
							layoutpolicy_horizontal = expanding
							datacontext = "[GuiGameRule.GetRule]"
							datacontext = "[GuiGameRule.GetSetting]"

							visible = "[EqualTo_string(GetVariableSystem.Get('selected_rule'), GameRule.GetName)]"

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[GameRule.GetName]."
							}

							hbox = {
							    layoutpolicy_horizontal = expanding
								spacing = 2

								text_single = {
									raw_text = "[GameRuleSetting.GetName]"
								}
								dot = { margin_left = -1 }


							    expand = { }
							}


							hbox = {
							    layoutpolicy_horizontal = expanding

								text_multi = {
									autoresize = yes
									max_width = 1020
									raw_text = "[GameRuleSetting.GetDescription]"
								}

							    expand = { }
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Previous option, Z,"
								}
								shortcut = decrease_speed_2
								shortcut = speed_1
								visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
								onclick = "[GuiGameRule.Prev]"
								clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Next option, X."
								}
								shortcut = increase_speed_2
								shortcut = speed_2
								visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
								onclick = "[GuiGameRule.Next]"
								clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
							}
						}
					}
				}

				button_text = {
					layoutpolicy_horizontal = expanding
				    blockoverride "text" {
				        raw_text = "Close, Escape"
				    }
					shortcut = close_window
					onclick = "[GetVariableSystem.Clear('selected_rule')]"
				}

				expand = { }

			}

			game_rules_preset_window = {}
		}
	}

	game_rules_old = {}

}

types GameRuleTypes
{
	type widget_game_rule_option = widget {
		size = { 240 30 }

		flowcontainer = {
			ignoreinvisible = yes
			resizeparent = yes

			text_single = {
				raw_text = "[GameRuleSetting.GetName]."
			}

			button_text = {
				shortcut = decrease_speed_2
				blockoverride "text" {
					raw_text = "Previous Z,"
				}
				visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
				block "onclick_prev" {
					onclick = "[GuiGameRule.Prev]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
				}
			}

			button_text = {
				shortcut = increase_speed_2
				blockoverride "text" {
					raw_text = "Next X."
				}
				visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
				block "onclick_next" {
					onclick = "[GuiGameRule.Next]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
				}
			}
		}
		# achievements_disabled_icon = {
		# 	visible = "[GameRuleSetting.HasFlag( 'blocks_achievements' )]"
		# 	parentanchor = right
		# 	position = { -30 4 }
		# 	size = { 22 22 }
		# 	tooltip = "GAME_RULE_BLOCKS_ACHIEVEMENTS"
		# }
	}

	type flowcontainer_game_rules_mini = flowcontainer {
		name = "difficulty_setting"
		datacontext = "[AccessGameRules]"
		datacontext = "[JominiGameRules.AccessNamedGameRule( 'difficulty' )]"
		datacontext = "[GuiGameRule.GetRule]"
		datacontext = "[GuiGameRule.GetSetting]"
		spacing = 5

		text_single = {
			align = left
			raw_text = "[GameRule.GetName]:"
			# tooltip = "[GameRule.GetSettings.GetDescription]"
			# default_format = "#medium"
			max_width = 150
			# minimumsize = { 0 25 }
		}

		widget_game_rule_option = {
			blockoverride "onclick_prev"
			{
				onclick = "[GuiGameRule.Prev]"
				onclick = "[JominiGameRules.ApplySettings]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"

			}
			blockoverride "onclick_next"
			{
				onclick = "[GuiGameRule.Next]"
				onclick = "[JominiGameRules.ApplySettings]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
			}
		}
	}

	type hbox_achievements_info = hbox {
		name = "achievements"
		# visible = no
		tooltip = "[SelectLocalization( CanGetAchievements, 'ACHIEVEMENTS_ENABLED', 'ACHIEVEMENTS_DISABLED' )]"

		block "ai_background"
		{

		}


		achievements_enabled_icon = {
			visible = no#"[CanGetAchievements]"
			block "ai_icon_size"
			{

			}
		}

		achievements_disabled_icon = {
			visible = no#"[Not( CanGetAchievements )]"
			block "ai_icon_size"
			{

			}
		}

		hbox = {
			name = "text"
			spacing = 3
			layoutpolicy_horizontal = expanding

			text_single = {
				text = "ACHIEVEMENTS_LABEL"
			}

			text_single = {
				raw_text = "[SelectLocalization( CanGetAchievements, 'on', 'off' )]."
			}

			expand = { }
		}

	}

	type hbox_ironman_achievements_info = vbox {
		layoutpolicy_horizontal = expanding
		# margin = { 30 6 }
		# spacing = 20



		button_primary_text = {
			layoutpolicy_horizontal = expanding
			blockoverride "text" {
				raw_text = "[Localize('APPLY')]"
			}
			visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
			onclick = "[JominiGameRules.ApplySettings]"
			onclick = "[JominiGameRules.Hide]"
			shortcut = "close_window"
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
		}
		# spacer = {
		# 	size = { 5 0 }
		# }

		hbox = {
			layoutpolicy_horizontal = expanding
			name = "ironman"

			# tooltip = "IRONMAN_PAUSE_MENU_TOOLTIP"

			hbox = {
				hbox = {
					spacing = 3

					text_single = {
						text = "IRONMAN_LABEL"
						max_width = 150
						align = left
					}

					text_single = {
						text = "[SelectLocalization( IsIronmanEnabled, 'IRONMAN_ENABLED_NO_HEADER', 'IRONMAN_DISABLED_NO_HEADER' )]"
						# default_format = "#warning"
						max_width = 150
						# min_width = 60
						align = left
						layoutpolicy_horizontal = expanding
					}
				}
				dot = { }
			}

			hbox = {
				# margin = { 3 5 }
				name = "buttons"
				visible = "[Not( HasGameStartedForTheFirstTime )]"

				button_text = {
					name = "enable"
					blockoverride "text" {
						text = "ENABLE_IRONMAN"
					}
					visible = "[Not( IsIronmanEnabled )]"
					enabled = "[Not( IsIronmanEnabled )]"
					onclick = "[SetIronmanEnabledStatus( '(bool)yes' )]"
					onclick = "[JominiGameRules.SetIronman( '(bool)yes' )]"
				}

				button_text = {
					name = "disable"
					blockoverride "text" {
						text = "DISABLE_IRONMAN"
					}
					visible = "[IsIronmanEnabled]"
					enabled = "[IsIronmanEnabled]"
					onclick = "[SetIronmanEnabledStatus( '(bool)no' )]"
					onclick = "[JominiGameRules.SetIronman( '(bool)no' )]"
				}

				dot = { }

			}

			expand = { }

		}

		hbox_achievements_info = {
			layoutpolicy_horizontal = expanding
		}

		# expand = {}

		hbox = {
			layoutpolicy_horizontal = expanding

			button_text = {
				visible = "[And( IsHost, Not( HasGameStartedForTheFirstTime ) )]"
				blockoverride "text" {
					text = "GAME_RULES_RESET_TO_DEFAULTS_TEXT"
				}
				onclick = "[JominiGameRules.ResetAllToDefaults]"
			}
			# spacer = {
			# 	size = { 5 0 }
			# }

			button_text = {
				blockoverride "text" {
					text = "CLOSE_LABEL"
				}
				visible = "[Not( And( IsHost, Not( HasGameStartedForTheFirstTime ) ) )]"
				onclick = "[JominiGameRules.Hide]"
				shortcut = "close_window"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
			}
			dot = { }
			# spacer = {
			# 	size = { 5 0 }
			# }

			expand = { }
		}


		expand = { }
	}

	type vbox_game_rule_preset_options = vbox
	{
		layoutpolicy_horizontal = expanding

		hbox = {
		    layoutpolicy_horizontal = expanding
			visible = "[DataModelHasItems(JominiGameRules.GetRulePresets)]"

			dropdown_menu_standard = {
				blockoverride "dropdown_properties"
				{
					datamodel = "[JominiGameRules.GetRulePresets]"
					onselectionchanged = "[JominiGameRules.OnSelectPreset]"
					onselectionchanged = "[SetIronmanEnabledStatus(JominiGameRules.GetSelectedPreset.IsIronmanEnabled)]"
					onselectionchanged = "[Clear('rules_page')]"
				}


				blockoverride "dropdown_active_item_properties"
				{
					raw_text = "Preset, [SelectLocalization( JominiGameRules.HasValidPresetSelected, JominiGameRules.GetSelectedPreset.GetName, 'GAME_RULES_PRESET_DROPDOWN_NO_SELECTED' )]"
				}

				blockoverride "dropdown_item_properties"
				{
					widget = {
						size = { 100% 100% }

						hbox = {
							margin_right = 10

							text_single = {
								layoutpolicy_horizontal = expanding
								max_width = 300
								margin_left = 4
								default_format = "#clickable"
								text = "[GuiGameRulePreset.GetName]"
							}

							achievements_enabled_icon = {
								visible = "[And( GuiGameRulePreset.IsIronmanEnabled, Not( GuiGameRulePreset.HasRuleWithFlag('blocks_achievements') ) )]"
								size = { 20 20 }
							}

							achievements_disabled_icon = {
								visible = "[Or( Not( GuiGameRulePreset.IsIronmanEnabled ), GuiGameRulePreset.HasRuleWithFlag('blocks_achievements') )]"
								size = { 20 20 }
							}
						}
					}
				}

				blockoverride "dropdown_list_properties"
				{
					minimumsize = { 192 50 }
					hbox = {
						visible = "[IsDataModelEmpty(JominiGameRules.GetRulePresets)]"
						textbox = {
							text = "GAME_RULES_PRESET_DROPDOWN_NO_SELECTED_BODY"
							align = center
						}
					}
				}

				blockoverride "dropdown_size"
				{
					size = { 400 32 }
				}

				blockoverride "dropdown_list_maxsize"
				{
					maximumsize = { 391 780 }
				}
			}

		    expand = { }
		}

		vbox = {
			layoutpolicy_horizontal = expanding

			button_text = {
				layoutpolicy_horizontal = expanding
				onclick = "[JominiGameRules.ShowPresetWindow]"
				onclick = "[JominiGameRules.SetPresetSaveName]"

				blockoverride "text" {
					text = "SAVE_PRESET_BUTTON_TOOLTIP"
				}
				blockoverride "extra" {
					text_single = {
						margin_left = -3
						raw_text = ", Control S"
					}
				}
				shortcut = map_mode_14
				blockoverride "dot" {

				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding

				enabled = "[JominiGameRules.HasValidPresetSelected]"
				onclick = "[JominiGameRules.DeletePresetAtIndex( JominiGameRules.GetSelectedPresetIndex )]"
				blockoverride "delete" {
					raw_text = "[Localize('DELETE_SELECTED_PRESET_BUTTON_TOOLTIP')]."
				}
			}
		}
	}

	type game_rules_preset_window = window  {
		name = "game_rules_preset"

		visible = "[And( And( IsHost, Not( HasGameStartedForTheFirstTime ) ), JominiGameRules.IsPresetWindowShown )]"

		size = { 100% 100% }

		layer = confirmation
		alwaystransparent = no
		movable = no

		using = Window_Background_Subwindow

		vbox = {
			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "SAVE_PRESET_HEADER"
				}

				blockoverride "button_close"
				{
					onclick = "[JominiGameRules.HidePresetWindow]"
					shortcut = "close_window"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
				}
			}

			editbox_standard_with_label = {
				margin = { 30 0 }
				margin_bottom = 14
				layoutpolicy_horizontal = expanding

				blockoverride "editbox_label"
				{
					layoutpolicy_horizontal = expanding
					raw_text = "You may start typing, press Enter to save."
				}

				blockoverride "editbox_properties"
				{
					name = "preset_name_edit"
					# enabled = "[JominiGameRules.IsValidPresetName]"
					onreturnpressed = "[JominiGameRules.SavePreset]"
					multiline = no
					focus_on_visible = yes
					maxcharacters = 999
					text = "[JominiGameRules.GetPresetSaveName]"
					ontextedited = "[JominiGameRules.OnPresetSaveNameEdit]"
				}
			}

			scrollbox = {
				size = { 390 0 }
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					margin_top = 20
					margin_left = 20

					fixedgridbox = {
						datamodel = "[JominiGameRules.GetRulePresets]"
						addcolumn = 350
						addrow = 70
						datamodel_wrap = 1
						maxhorizontalslots = 1
						flipdirection = yes

						item = {
							button_standard = {
								size = { 350 60 }

								onclick = "[JominiGameRules.OnPresetSaveNameChange( GuiGameRulePreset.GetName )]"
								down = "[EqualTo_string(JominiGameRules.GetPresetSaveName, GuiGameRulePreset.GetName)]"

								hbox = {
									vbox = {
										margin_left = 10

										text_single = {
											text = "[GuiGameRulePreset.GetName]"
											layoutpolicy_horizontal = expanding
											align = left
											max_width = 280
										}

										text_single = {
											datacontext = "[GuiGameRulePreset.GetSettingForRule( 'difficulty' )]"
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											minimumsize = { 240 0 }

											text = "GAME_RULES_PRESET_DIFFICULTY"
											default_format = "#low"
											align = left
										}
									}

									expand = {}

									hbox = {
										margin_right = 10

										achievements_enabled_icon = {
											visible = "[And( GuiGameRulePreset.IsIronmanEnabled, Not( GuiGameRulePreset.HasRuleWithFlag('blocks_achievements') ) )]"
										}

										achievements_disabled_icon = {
											visible = "[Or( Not( GuiGameRulePreset.IsIronmanEnabled ), GuiGameRulePreset.HasRuleWithFlag('blocks_achievements') )]"
										}
									}
								}
							}
						}
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				using = ocr_margins

				button_text = {
					layoutpolicy_horizontal = expanding
					enabled = "[JominiGameRules.HasPresetWithName(JominiGameRules.GetPresetSaveName)]"
					onclick = "[JominiGameRules.DeletePresetWithName( JominiGameRules.GetPresetSaveName )]"
					blockoverride "text" {

						text = "DELETE"
					}
					blockoverride "disabled" {
						visible = "[Not(JominiGameRules.HasPresetWithName(JominiGameRules.GetPresetSaveName))]"
					}

					# tooltip = "DELETE_PRESET_WITH_NAME_BUTTON_TOOLTIP"
				}


				button_primary_text = {
					layoutpolicy_horizontal = expanding
					visible = "[Not(JominiGameRules.HasPresetWithName(JominiGameRules.GetPresetSaveName))]"
					blockoverride "disabled" {
						visible = "[Not(JominiGameRules.IsValidPresetName)]"
					}

					enabled = "[JominiGameRules.IsValidPresetName]"
					onclick = "[JominiGameRules.SavePreset]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"

					blockoverride "text" {
						text = "SAVE"
					}
					# tooltip = "[SelectLocalization( JominiGameRules.IsValidPresetName, 'SAVE_PRESET_BUTTON_TOOLTIP', JominiGameRules.GetInvalidPresetNameTooltip )]"
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "[JominiGameRules.GetInvalidPresetNameTooltip]"
					visible = "[Not(JominiGameRules.IsValidPresetName)]"
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					visible = "[JominiGameRules.HasPresetWithName(JominiGameRules.GetPresetSaveName)]"

					onclick = "[JominiGameRules.SavePreset]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"

					blockoverride "text" {
						text = "OVERWRITE_GAME_RULES_PRESET_ACCEPT"
					}
					# tooltip = "OVERWRITE_PRESET_BUTTON_TOOLTIP"
				}
			}
			expand = {}
		}
	}
}
