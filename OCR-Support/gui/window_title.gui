### TITLE WINDOW

window = {
	name = "title_view_window"
	movable = no
	allow_outside = yes
	layer = windows_layer
	using = base_ocr_window

	state = {
		name = _show
		position = { 0 0 }
		on_start = "[GetVariableSystem.Clear( 'title_tabs' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"
		onclick = "[GetScriptedGui('adjacent_titles').Execute( GuiScope.SetRoot( Title.MakeScope ).End )]"

		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		position_x = -60
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"

		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		on_finish = "[Click('clear_last_view')]"
	}

	datacontext = "[TitleViewWindow.GetTitle]"

	buttons_window_control = {
		blockoverride "button_close"
		{
			onclick = "[TitleViewWindow.Close]"
			onclick = "[TitleViewWindow.CloseHistory]"
			onclick = "[TitleViewWindow.CloseClaimants]"
		}

		blockoverride "button_back"
		{
			size = { 0 0 }
			visible = "[HasViewHistory]"
			onclick = "[OpenFromViewHistory]"
			tooltip = "[GetViewHistoryTooltip]"
		}

		blockoverride "button_me"
		{
			size = { 0 0 }
			onclick = "[DefaultOnCharacterClick(GetPlayer.GetID)]"
		}
	}

	window_ocr = {
		blockoverride "ocr_header" {
			### HEADER ###
			vbox = {
				using = locr_title_not_wasteland
				layoutpolicy_horizontal = expanding

				vbox = {
					datacontext = "[TitleViewWindow.GetTitle]"
					layoutpolicy_horizontal = expanding

					button = {
						using = prov_click
						datacontext = "[TitleViewWindow.GetTitle.GetPreferredCapital]"
						shortcut = map_mode_9
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						text_single = {
							visible = "[Not(Or(Title.IsMercenaryCompany, Or( Title.IsHolyOrder, Title.HasFaction )))]"
							raw_text = "[Localize('TV_TIER_INFO')],"
						}

						hbox = {
							background = { using = Background_Area_Border_Solid }
							name = "tabs"
							spacing = 3
							text_single = {
								visible = "[Isnt('title_tabs')]"
								raw_text = "general"
							}

							text_single = {
								visible = "[Is('title_tabs')]"
								raw_text = "[Get('title_tabs')]"
							}

							text_single = {
								raw_text = "tab."
							}

							button_text = {
								shortcut = increase_speed_2
								visible = "[And(Show('clear_county_title_filters'), Has('title_tabs', 'counties'))]"
								onclick = "[Click('clear_county_title_filters')]"
								onclick = "[ClickAdd('counties_in_title', Title, GetPlayer)]"
								blockoverride "text" {
									raw_text = "Filtered, reset with X."
								}
							}

							button_text = {
								shortcut = map_mode_11
								onclick = "[ClickAdd('counties_in_title', Title, GetPlayer)]"
								blockoverride "text" {
									raw_text = "Reload Shift E."
								}
							}

							expand = { }
						}

						expand = {}
					}


					hbox = {
						layoutpolicy_horizontal = expanding

						button_text = {
							blockoverride "pre" {
								text_single = {
									raw_text = "[TitleViewWindow.GetTitle.GetNameNoTooltip|U]."
									max_width = 350
									autoresize = yes
									fontsize_min = 14
								}

								text_single = {
									visible = "[Not(Title.CanHaveClaim)]"
									raw_text = "[Title.GetSpecialDescription]."
								}
							}
							blockoverride "extra" {
								text_single = {
									visible = "[DataModelHasItems(TitleViewWindow.GetLiegeItems)]"
									raw_text = "De jure in [Title.GetDeJureLiege.GetNameNoTooltip], Page Up."
								}
							}
							enabled = "[DataModelHasItems(TitleViewWindow.GetLiegeItems)]"
							onclick = "[DefaultOnCoatOfArmsClick(Title.GetDeJureLiege.GetID)]"
							onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetDeJureLiege.GetID)]"
							onclick = "[GetScriptedGui('adjacent_titles').Execute( GuiScope.SetRoot( Title.GetDeJureLiege.MakeScope ).End )]"
							onclick = "[ClickAdd('counties_in_title', Title, GetPlayer)]"

							shortcut = "zoom_out"
						}

						expand = { }
					}

					button_agot_three_daughters = {}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(GetVariableSystem.Exists('title_tabs'))]"

						vbox = {
							layoutpolicy_horizontal = expanding
							datacontext = "[TitleViewWindow.GetTitle.GetHolder]"
							visible = "[And(Character.IsValid, Not(Character.IsLocalPlayer))]"

							char_name = {
								layoutpolicy_horizontal = expanding
								blockoverride "width" {
									max_width = 450
								}

								blockoverride "pre" {
									text_single = {
										margin_right = 3
										alwaystransparent = yes
										raw_text = "[Localize('TITLE_VIEW_HOLDER')],"
									}
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								text_single = {
									raw_text = "[Character.GetSheHe|U] holds [GuiScope.SetRoot(Title.MakeScope).AddScope('player', Character.MakeScope).ScriptValue('your_counties_in_title')] counties"
								}

								text_single = {
									raw_text = "out of [GuiScope.SetRoot(Title.MakeScope).ScriptValue('counties_in_title')]."
								}

								expand = { }
							}
						}

						watch_window_button = {
							size = { 60 40 }
							onclick = "[AddWatchWindow( TitleViewWindow.GetTitle.MakeScope )]"
						}

						text_single = {
							visible = "[Title.HasFaction]"
							datacontext = "[Title.GetFaction]"
							text = "TITLE_VIEW_FACTION"
						}

						vbox = {
							# visible = "[Title.HasHolder]"
							margin = { 0 5 }
							layoutpolicy_horizontal = expanding
							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "Drifting towards your primary title."
								visible = "[GetScriptedGui('is_drifting_to_player').IsShown( GuiScope.SetRoot( Title.MakeScope ).AddScope('player', GetPlayer.MakeScope).End )]"
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								text_multi = {
									raw_text = "[Title.GetDeJureDriftTooltip]"
									autoresize = yes
									max_width = 570
								}

								text_multi = {
									raw_text = "[Title.GetDeJureLiege.GetDeJureDriftTooltip]"
									autoresize = yes
									max_width = 570
								}

								text_multi = {
									raw_text = "[Title.GetDeJureLiege.GetDeJureLiege.GetDeJureDriftTooltip]"
									autoresize = yes
									max_width = 570
								}

								expand = { }
							}
						}

						#
						# hbox = {
						#     layoutpolicy_horizontal = expanding
						# 	visible = "[GetScriptedGui('is_drifting').IsShown( GuiScope.SetRoot( Title.MakeScope ).AddScope('parent_title', Title.GetDeFactoLiege.MakeScope).End )]"
						#
						# 	text_single = {
						# 		raw_text = "[Title.Custom('DriftProgress')]"
						# 	}
						#
						# 	text_single = {
						# 		raw_text = "de jure drifting into [Title.GetDeFactoLiege.GetNameNoTooltip]."
						# 	}
						#
						#     expand = { }
						# }
						#
						# hbox = {
						#     layoutpolicy_horizontal = expanding
						# 	visible = "[GetScriptedGui('is_drifting_to_liege').IsShown( GuiScope.SetRoot( Title.MakeScope ).AddScope('parent_title', Title.GetDeFactoLiege.MakeScope).End )]"
						#
						# 	text_single = {
						# 		raw_text = "[Title.Custom('DriftProgressLiege')]"
						# 	}
						#
						# 	text_single = {
						# 		raw_text = "de jure drifting into [Title.GetDeFactoLiege.GetDeFactoLiege.GetNameNoTooltip]."
						# 	}
						#
						#     expand = { }
						# }


						# owner
						vbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding
								name = "is_created"
								visible = "[Not(Title.HasHolder)]"
								raw_text = "[Localize('TV_NOT_CREATED')]."
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								name = "existing_title"
								ignoreinvisible = yes
								visible = "[Title.HasHolder]"

								text_single = {
									name = "my_title"
									visible = "[EqualTo_uint32( Title.GetHolder.GetID, GetPlayer.GetID )]"
									raw_text = "[Localize('TV_MY_TITLE')]."
								}

								text_single = {
									raw_text = "[Localize('TV_NO_CLAIM')]."
									visible = "[And(And(NotEqualTo_uint32( Title.GetHolder.GetID, GetPlayer.GetID ), Not(GetPlayer.HasClaimOnTitle(TitleViewWindow.GetTitle ))),Title.CanHaveClaim)]"
								}

								text_single = {
									name = "have_claim"
									raw_text = "[Title.GetClaimStateFor(GetPlayer)]."
									visible = "[And(NotEqualTo_uint32( Title.GetHolder.GetID, GetPlayer.GetID ), GetPlayer.HasClaimOnTitle(TitleViewWindow.GetTitle ))]"
								}

								expand = { }
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						button_text = {
							layoutpolicy_horizontal = expanding
							shortcut = map_mode_1
							onclick = "[Set('title_tabs', 'counties')]"
							onclick = "[Click('filter_counties_title_you')]"
							onclick = "[ClickAdd('counties_in_title', Title, GetPlayer)]"
							blockoverride "extra" {
								text_single = {
									raw_text = "You hold [GuiScope.SetRoot(Title.MakeScope).AddScope('player', GetPlayer.MakeScope).ScriptValue('your_counties_in_title')] counties"
								}

								text_single = {
									raw_text = "out of [GuiScope.SetRoot(Title.MakeScope).ScriptValue('counties_in_title')]."
								}

								text_single = {
									visible = "[GetPlayer.MakeScope.Var('filter_counties_title_you').IsSet]"
									raw_text = "Remove filter, E."
								}
								text_single = {
									visible = "[Not(GetPlayer.MakeScope.Var('filter_counties_title_you').IsSet)]"
									raw_text = "Filter out, E."
								}
							}
						}

						expand = { }
					}
					widget = {
						size = { 0 5 }
					}

					### TABS ###
					hbox = {
						background = { using = Background_Area_Border_Solid }
						name = "tabs"
						layoutpolicy_horizontal = expanding

						text_single = {
							raw_text = "Tabs:"
						}

						button_text = {
							onclick = "[GetVariableSystem.Clear('title_tabs')]"
							# onclick = "[GetVariableSystem.Clear( 'display_allegiance' )]"
							shortcut = speed_1
							blockoverride "text" {
								raw_text = "1,"
							}
							blockoverride "extra" {
								text_single = {
									raw_text = "general."
								}
							}
						}

						button_text = {
							onclick = "[GetVariableSystem.Set('title_tabs', 'de jure')]"
							shortcut = speed_2
							blockoverride "pre" {
								text_single = {
									raw_text = "2,"
								}
							}
							blockoverride "text" {
								text = "TITLE_VIEW_DE_JURE"
							}
							blockoverride "dot" {
							}
						}

						button_text = {
							onclick = "[GetVariableSystem.Set('title_tabs', 'counties')]"
							onclick = "[ClickAdd('counties_in_title', Title, GetPlayer)]"
							visible = "[Not(Or(Title.IsBarony, Title.IsCounty))]"
							shortcut = speed_3
							blockoverride "pre" {
								text_single = {
									raw_text = "3,"
								}
							}
							blockoverride "text" {
								raw_text = "All counties"
							}
							blockoverride "dot" {
							}
						}

						button_text = {
							visible = "[Not(IsDataModelEmpty(TitleViewWindow.GetTitleAllegianceVassals))]"
							onclick = "[GetVariableSystem.Set('title_tabs', 'allegiance')]"
							shortcut = speed_4
							blockoverride "pre" {
								text_single = {
									raw_text = "4,"
								}
							}
							blockoverride "text" {
								raw_text = "Allegiance"
							}
							blockoverride "dot" {
							}
						}

						button_text = {
							onclick = "[GetVariableSystem.Set('title_tabs', 'adjacent')]"
							onclick = "[GetScriptedGui('adjacent_titles').Execute( GuiScope.SetRoot( Title.MakeScope ).End )]"
							# shortcut = speed_3
							shortcut = map_mode_6
							blockoverride "pre" {
								text_single = {
									raw_text = "Control A,"
								}
							}
							blockoverride "text" {
								raw_text = "Adjacent"
							}
							blockoverride "dot" {
							}
						}
						expand = { }
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						visible = "[GetVariableSystem.HasValue('title_tabs', 'adjacent')]"

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "[GetDataModelSize(Title.MakeScope.GetList('adjacent_titles'))] adjacent titles. Reload with E."
							}
							onclick = "[GetScriptedGui('adjacent_titles').Execute( GuiScope.SetRoot( Title.MakeScope ).End )]"
							shortcut = map_mode_1
						}

						vbox = {
							layoutpolicy_horizontal = expanding

							datamodel = "[Title.MakeScope.GetList('adjacent_titles')]"

							item = {
								button_text = {
									using = title_click
									onclick = "[GetScriptedGui('adjacent_titles').Execute( GuiScope.SetRoot( Title.MakeScope ).End )]"
									onclick = "[GetVariableSystem.Clear('title_tabs')]"
									layoutpolicy_horizontal = expanding
									datacontext = "[Scope.Title]"
									blockoverride "text" {
										raw_text = "[Title.GetNameNoTierNoTooltip],"
									}
									blockoverride "extra" {
										text_single = {
											visible = "[GreaterThan_int32(Title.GetTierFrame, '(int32)3')]"
											raw_text = "[GuiScope.SetRoot(Title.MakeScope).ScriptValue('counties_in_title')] counties."
										}
										text_single = {
											visible = "[Not(Title.HasHolder)]"
											raw_text = "not created,"
										}
										text_single = {
											visible = "[Not(ObjectsEqual(MyCapital.GetID, Title.GetPreferredCapital.GetProvince.GetID))]"
											raw_text = "[Direction(MyCapital, Title.GetPreferredCapital.GetProvince)]."
										}
										# widget = {
										# 	scissor = yes
										# 	text_single = {
										# 		raw_text = "[GuiScope.SetRoot(Title.GetPreferredCapital.GetProvince.MakeScope).AddScope('origin', TitleViewWindow.GetTitle.GetPreferredCapital.GetProvince.MakeScope).GetScriptValueDesc('direction_svalue_temp')],"
										# 		resizeparent = yes
										# 		margin_right = -43
										# 	}
										# }
										flowcontainer = {
											ignoreinvisible = yes
											visible = "[Title.HasHolder]"
											datacontext = "[Title.GetHolder]"
											spacing = 3

											text_single = {
												visible = "[GreaterThan_int32(Title.GetTierFrame, '(int32)3')]"
												raw_text = "[GuiScope.SetRoot(Title.MakeScope).AddScope('player', Character.MakeScope).ScriptValue('your_counties_in_title')] "
											}

											text_single = {
												raw_text = "held by"
											}

											text_single = {
												raw_text = "[Character.GetNameNoTooltip]."
											}
										}
									}
								}
							}
						}
						expand = { }
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(GetVariableSystem.Exists('title_tabs'))]"

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "Rename title."
							}
							visible = "[TitleViewWindow.GetTitle.CanPlayerCustomizeTitle]"
							onclick = "[OpenTitleCustomizationWindow(TitleViewWindow.GetTitle)]"
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							visible = "[And(TitleViewWindow.GetTitle.HasHolder,TitleViewWindow.GetTitle.IsLanded)]"
							blockoverride "text" {
								raw_text = "[TitleViewWindow.GetTypeOfLanded],"
								alwaystransparent = yes
							}
							blockoverride "extra" {
								text_single = {
									raw_text = "[Holding.GetProvince.GetNameNoTooltip]."
								}
								# text_single = {
								# 	datacontext = "[Holding.GetProvince]"
								# 	raw_text = "AnyProvinceDistanceDirection"
								# }
							}
							datacontext = "[TitleViewWindow.GetHolding]"
							onclick = "[TitleViewWindow.GoToHolding]"
						}

						# capital
						button_text = {
							shortcut = map_mode_9
							layoutpolicy_horizontal = expanding
							datacontext = "[TitleViewWindow.GetTitle.GetPreferredCapital]"
							visible = "[And( Title.HasHolder, Not( TitleViewWindow.GetTitle.HasFaction ) )]"
							blockoverride "pre" {
								text_single = {
									raw_text = "De Jure Capital,"
								}
								space = { }
							}
							blockoverride "text" {
								raw_text = "[Title.GetNameNoTooltip],"
							}
							blockoverride "extra" {
								text_single = {
									visible = "[Not(ObjectsEqual(GetPlayer.GetCapitalLocation.GetID, Province.GetID))]"
									margin_left = 3
									datacontext = "[TitleViewWindow.GetTitle.GetPreferredCapital.GetProvince]"
									raw_text = "AnyProvinceDistanceDirection"
								}
								text_single = {
									raw_text = "Shift Q."
								}
							}
							using = prov_click
						}

						button_text = {
							layoutpolicy_horizontal = expanding

							shortcut = mapmode_empires_secondary
							blockoverride "text" {
								raw_text = "[Select_CString(ShowAdd('is_in_outliner', GetPlayer, Title), 'Unpin from', 'Pin to')] outliner, hotkey O."
							}
							onclick = "[ClickAdd('add_title_to_outliner', GetPlayer, Title)]"
						}

						widget = {
							size = { 0 5 }
						}

						# buttons
						vbox = {
							visible = "[Not( Title.HasFaction )]"
							layoutpolicy_horizontal = expanding

							hbox = {
								layoutpolicy_horizontal = expanding

								text_multi = {
									visible = "[TitleViewWindow.GetTitle.HasHolder]"
									raw_text = "[TitleViewWindow.GetSuccessionDescription]."
									layoutpolicy_horizontal = expanding
									max_width = 570
									autoresize = yes
								}

								expand = { }
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[TitleViewWindow.GetTitle.HasHolder]"

								button_text = {
									layoutpolicy_horizontal = expanding
									blockoverride "text" {
										raw_text = "TITLE_VIEW_SHOW_ELECTION_TT"
									}
									blockoverride "dot" { }
									datacontext = "[Title.GetHolder]"
									datacontext = "[TitleViewWindow.GetTitle]"
									onclick = "[TitleViewWindow.OpenElection]"
									visible = "[TitleViewWindow.GetTitle.HasSuccessionOrder('election')]"
								}

								expand = { }
							}


							vbox = {
								datacontext = "[TitleViewWindow.GetTitle]"
								datacontext = "[Title.GetHolder]"
								visible = "[Not(Or(Title.IsMercenaryCompany,Title.IsHolyOrder))]"
								ignoreinvisible = yes
								layoutpolicy_horizontal = expanding

								button_text = {
									layoutpolicy_horizontal = expanding
									visible = "[And( Character.IsLocalPlayer, TitleViewWindow.GetTitle.HasLaws )]"
									blockoverride "text" {
										raw_text = "[Localize('TITLE_VIEW_CLEAR_LAWS')]."
									}
									blockoverride "disabled" {
										visible = "[Not(TitleViewWindow.CanClearLaws)]"
									}
									enabled = "[TitleViewWindow.CanClearLaws]"
									onclick = "[TitleViewWindow.ClearLaws]"
									tooltip = "[TitleViewWindow.GetClearLawsButtonTooltip]"
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									name = "open_laws"
									blockoverride "text" {
										raw_text = "[Localize('TITLE_VIEW_SHOW_ADD_LAWS')]."
									}
									visible = "[And( Character.IsLocalPlayer, TitleViewWindow.CanAddLaws )]"
									onclick = "[TitleViewWindow.ToggleLaws]"
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									name = "toggle_find_vassal"
									shortcut = army_merge
									blockoverride "text" {
										raw_text = "[Localize('FIND_VASSAL_HEADER')], hotkey G."
									}
									visible = "[And( And( ObjectsEqual( Title.GetHolder, GetPlayer ), TitleViewWindow.GetTitle.CanUseFindVassal( GetPlayer ) ), Not( Title.IsLeasedOut))]"

									onclick = "[TitleViewWindow.ToggleFindVassalListWindow]"
									tooltip = "FIND_VASSAL_BUTTON_TOOLTIP"
								}
							}

							vbox = {
								datacontext = "[TitleViewWindow.GetTitle]"
								datacontext = "[TitleViewWindow.GetTitle.GetHolder]"
								visible = "[Not(Or(Title.IsMercenaryCompany,Title.IsHolyOrder))]"
								layoutpolicy_horizontal = expanding

								button_text = {
									layoutpolicy_horizontal = expanding
										blockoverride "text" {
										raw_text = "[Localize('TITLE_VIEW_DESTROY_TITLE')]."
										}
									blockoverride "disabled" {
										visible = "[Not(TitleViewWindow.CanTitleBeDestroyed)]"
									}
									visible = "[TitleViewWindow.ShowDestroy]"
									enabled = "[TitleViewWindow.CanTitleBeDestroyed]"
									onclick = "[TitleViewWindow.DestroyTitle]"
									tooltip = "[TitleViewWindow.GetDestroyTitleButtonTooltip]"
								}

								button_text = {
									layoutpolicy_horizontal = expanding
										blockoverride "text" {
										raw_text = "[Localize('TITLE_VIEW_MAKE_PRIMARY')]."
										}
									name = "make_primary_title"
									visible = "[And( Character.IsLocalPlayer, TitleViewWindow.CanMakePrimary )]"
									onclick = "[TitleViewWindow.MakePrimary]"
									tooltip = "TITLE_MAKE_PRIMARY_TOOLTIP"
								}

								button_text = {
									layoutpolicy_horizontal = expanding
										blockoverride "text" {
										raw_text = "[Localize('TITLE_VIEW_USURP_TITLE')]."
										}
									blockoverride "disabled" {
										visible = "[Not(TitleViewWindow.CanTitleBeUsurped)]"
									}
									visible = "[And( Not(Character.IsLocalPlayer), TitleViewWindow.ShowUsurp )]"
									enabled = "[TitleViewWindow.CanTitleBeUsurped]"
									onclick = "[TitleViewWindow.UsurpTitle]"
									tooltip = "[TitleViewWindow.GetUsurpTitleButtonTooltip]"
								}
							}
						}

						flowcontainer = {
							direction = vertical
							layoutpolicy_horizontal = expanding
							ignoreinvisible = yes

							button_text = {
								shortcut = character_finder
								blockoverride "pre" {
									text_single = {
										raw_text = "View"
										margin_right = 3
										visible = "[GreaterThan_int32( TitleViewWindow.GetNumberOfClaimants, '(int32)0' )]"
									}
								}
								blockoverride "text" {
									raw_text = "[Localize('TITLE_VIEW_CLAIMANTS')], C."
								}
								onclick = "[TitleViewWindow.ToggleClaimants]"
								# tooltip = "TITLE_CLAIMANTS_TOOLTIP"
								visible = "[Title.CanHaveClaim]"
								enabled = "[GreaterThan_int32( TitleViewWindow.GetNumberOfClaimants, '(int32)0' )]"
							}

							button_text = {
								shortcut = army_create_new
								blockoverride "text" {
									raw_text = "View [Localize('TITLE_HISTORY')], H."
								}
								visible = "[And( Not( Title.IsBarony ), Not( Title.HasFaction ) )]"
								onclick = "[TitleViewWindow.ToggleHistory]"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								visible = "[Not(Title.CanHaveClaim)]"
								raw_text = "[Localize('TITLE_VIEW_NO_CLAIMANTS')]."
								tooltip = "TITLE_VIEW_NO_CLAIMANTS_TOOLTIP"
							}
						}
					}
				}
			}
		}
		blockoverride "ocr_content" {

			vbox = {
				using = locr_title_not_wasteland
				name = "title_view_main_tab"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 5

				state = {
					name = _show
					using = Animation_FadeIn_Quick
				}

				state = {
					name = _hide
					using = Animation_FadeOut_Quick
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					spacing = 5
					# info
					vbox = {
						visible = "[Not(GetVariableSystem.Exists('title_tabs'))]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						# create
						vbox = {
							layoutpolicy_horizontal = expanding
							name = "create_title"
							visible = "[And( Not( Title.IsBarony ), Not( TitleViewWindow.GetTitle.HasHolder ) )]"

							button_primary_text = {
								layoutpolicy_horizontal = expanding
								enabled = "[TitleViewWindow.CanTitleBeCreated]"
								blockoverride "text" {
									raw_text = "Create title"
								}
								blockoverride "disabled" {
									visible = "[Not(TitleViewWindow.CanTitleBeCreated)]"
								}
								blockoverride "hotkey" {
									visible = "[TitleViewWindow.CanTitleBeCreated]"
								}
								onclick = "[TitleViewWindow.CreateTitle]"
								tooltip = "[TitleViewWindow.GetCreateTitleButtonTooltip]"
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "Requirements:"
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									tooltip = "[TitleViewWindow.GetMinimumDeJureTooltip]"
									spacing = 3

									text_single = {
										raw_text = "complete,"
										visible = "[TitleViewWindow.HasEnoughCounties]"
									}

									# text_single = {
									# 	raw_text = "incomplete,"
									# 	visible = "[Not(TitleViewWindow.HasEnoughCounties)]"
									# }

									text_single = {
										raw_text = "[TitleViewWindow.GetMinimumDeJureText]."
									}

									expand = { }
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									tooltip = "[TitleViewWindow.GetMinimumGoldTooltip]"

									spacing = 3

									text_single = {
										raw_text = "complete,"
										visible = "[TitleViewWindow.HasEnoughGold]"
									}

									# text_single = {
									# 	raw_text = "incomplete,"
									# 	visible = "[Not(TitleViewWindow.HasEnoughGold)]"
									# }

									text_single = {
										raw_text = "[TitleViewWindow.GetMinimumGoldText]."
									}

									expand = { }
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									visible = "[Not( TitleViewWindow.HasTitlesOfTier )]"
									tooltip = "[TitleViewWindow.GetTitlesOfTierTooltip]"

									spacing = 3

									text_single = {
										raw_text = "complete,"
										visible = "[TitleViewWindow.HasTitlesOfTier]"
									}

									# text_single = {
									# 	raw_text = "incomplete,"
									# 	visible = "[Not(TitleViewWindow.HasTitlesOfTier)]"
									# }

									text_single = {
										raw_text = "[TitleViewWindow.GetTitlesOfTierText]."
									}

									expand = { }
								}
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[TitleViewWindow.GetGainText]."
							}
						}

						#TODO
						vbox_strength_info = {
							visible = "[Title.IsMercenaryCompany]"
							datacontext = "[Title.GetMercenaryCompany]"

							blockoverride "hired_troops_knights" {
								text = "TITLE_VIEW_MERCENARY_NUMBER_OF_KNIGHTS"
							}

							blockoverride "hired_troops_soldiers" {
								text = "TITLE_VIEW_MERCENARY_NUMBER_OF_SOLDIERS"
							}

							blockoverride "strength_values" {
								value = "[CurrentAndMaxToProgressbarValueInt32( MercenaryCompany.GetCurrentSoldiers, MercenaryCompany.GetMaxSoldiers )]"
							}
						}

						vbox_strength_info = {
							visible = "[Title.IsHolyOrder]"
							datacontext = "[Title.GetHolyOrder]"
						}

						#### PORTRAITS ###
						vbox = {
							name = "succession_info"
							visible = "[TitleViewWindow.GetTitle.HasHolder]"
							# layoutpolicy_vertical = preferred
							layoutpolicy_horizontal = expanding
							ignoreinvisible = yes

							vbox = {
								layoutpolicy_horizontal = expanding

								vbox = {
									layoutpolicy_horizontal = expanding
									# layoutpolicy_vertical = expanding
									visible = "[Not( Title.HasFaction )]"


									hbox = {
										visible = "[Not(Title.IsHolyOrder)]"
										layoutpolicy_horizontal = expanding

										text_single = {
											text = "TITLE_VIEW_SUCCESSION"
										}
										text_single = {
											raw_text = ", top 5:"
										}
										expand = { }
									}

									fixedgridbox = {
										layoutpolicy_horizontal = expanding
										datamodel = "[TitleViewWindow.GetLineOfSuccession]"
										maxverticalslots = 5
										maxhorizontalslots = 1
										addrow = 22
										addcolumn = 550

										item = {
											char_name = {
												layoutpolicy_horizontal = expanding
												blockoverride "extra" {
													spacing = 3
													text_single = {
														raw_text = "[Character.GetAge]."
													}
													text_single = {
														raw_text = "[Character.GetRelationToString( Title.GetHolder )]."
													}
												}
											}
										}
									}
								}

								expand = { }
							}
						}

						expand = { }
					}

					# children
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						visible = "[GetVariableSystem.HasValue('title_tabs', 'de jure')]"

						text_single = {
							visible = "[DataModelHasItems(TitleViewWindow.GetLiegeItems)]"
							raw_text = "De Jure Part of:"
							layoutpolicy_horizontal = expanding
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_left = 5
							visible = "[DataModelHasItems(TitleViewWindow.GetLiegeItems)]"

							vbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[TitleViewWindow.GetLiegeItems]"
								visible = "[Not(GetVariableSystem.Exists('hide_hierarchy'))]"

								item = {
									button_text = {
										layoutpolicy_horizontal = expanding
										datacontext = "[TitleItem.GetTitle]"
										onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
										onclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
										blockoverride "text" {
											raw_text = "[Title.GetNameNoTooltip]"
											align = left
										}
										blockoverride "extra" {
											text_single = {
												visible = "[Not(Title.HasHolder)]"
												raw_text = ", not created"
											}
											text_single = {
												visible = "[Title.HasHolder]"
												datacontext = "[Title.GetHolder]"
												raw_text = ", held by [Character.GetNameNoTooltip]"
											}
										}
										blockoverride "dot" { }
									}
								}
							}

							expand = { }
						}

						vbox = {
							name = "dejure_tab_contents"
							datacontext = "[TitleViewWindow.GetTitle]"
							visible = "[And(DataModelHasItems(TitleViewWindow.GetVassalGroupItems), Not(Or(Title.IsMercenaryCompany,Title.IsHolyOrder)))]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							margin_top = 10

							text_single = {
								raw_text = "[TitleViewWindow.GetDeJureDescription]:"
								alwaystransparent = yes
								max_width = 660
								layoutpolicy_horizontal = expanding
							}

							scrollbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								minimumsize = { 0 300 }

								using = title_window_background_illustration

								blockoverride "scrollbox_content" {
									vbox = {
										layoutpolicy_horizontal = expanding
										datamodel = "[TitleViewWindow.GetVassalGroupItems]"
										# spacing = 10

										item = {
											vbox = {
												layoutpolicy_horizontal = expanding

												vbox = {
													datamodel = "[DeJureVassalGroupItem.GetTitleItems]"
													layoutpolicy_horizontal = expanding

													text_single = {
														layoutpolicy_horizontal = expanding
														raw_text = "[GetDataModelSize(DeJureVassalGroupItem.GetTitleItems)] [DeJureVassalGroupItem.GetOwnedBy]:"
														max_width = 700
													}

													item = {
														hbox = {
															layoutpolicy_horizontal = expanding
															datacontext = "[TitleItem.GetTitle]"
															# spacing = 3

															button_text = {
																onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
																onrightclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
																button_ignore = none
																blockoverride "text" {
																	raw_text = "[Title.GetNameNoTooltip|U],"
																	max_width = 300
																}
															}

															char_name = {
																visible = "[Title.GetHolder.IsValid]"
																datacontext = "[Title.GetHolder]"
																blockoverride "text2" {
																	raw_text = "held by [Title.GetHolder.GetFirstNameOrMeRegnal],"
																	max_width = 300
																}
															}


															text_single = {
																margin_left = 3
																datacontext = "[Title.GetPreferredCapital.GetProvince]"
																visible = "[Not(ObjectsEqual(MyCapital.GetID, Title.GetPreferredCapital.GetProvince.GetID))]"
																raw_text = "[DistanceTo(MyCapital, Province)|0] [DaysTo(MyCapital, Province)] [Direction(MyCapital, Province)]"
															}

															expand = { }
														}
													}
												}
											}
										}
									}
								}
							}
						}

						scrollbox = {
							name = "tab_contents_empty"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							visible = "[IsDataModelEmpty(TitleViewWindow.GetVassalGroupItems)]"

							using = title_window_background_illustration

							blockoverride "scrollbox_content" {
								vbox = {
									layoutpolicy_vertical = expanding

									container = {
										visible = "[Not(DataModelHasItems(TitleViewWindow.GetVassalGroupItems))]"

										text_single = {
											visible = "[Not(TitleViewWindow.GetTitle.IsBarony)]"
											text = "TITLE_VIEW_TITULAR"
										}

										text_single = {
											visible = "[TitleViewWindow.GetTitle.IsBarony]"
											text = "TITLE_VIEW_BARONY_NO_DEJURE"
										}
									}
								}
							}
						}
					}

					# counties
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						visible = "[GetVariableSystem.HasValue('title_tabs', 'counties')]"

						text_single = {
							raw_text = "[GetDataModelSize(Title.MakeScope.GetList('counties_in_title'))] counties."
							layoutpolicy_horizontal = expanding
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Title.GetHolder.IsValid]"
							datacontext = "[Title.GetHolder]"

							button_text = {
								layoutpolicy_horizontal = expanding
								datacontext = "[Character.GetFaith]"
								shortcut = army_split_half
								blockoverride "extra" {
									flowcontainer = {
										ignoreinvisible = yes
										spacing = 3

										text_single = {
											visible = "[EqualTo_CFixedPoint(Title.MakeScope.ScriptValue('counties_of_this_title_faith'), GuiScope.SetRoot(Title.MakeScope).ScriptValue('counties_in_title'))]"
											raw_text = "All"
										}
										text_single = {
											raw_text = "[Title.MakeScope.ScriptValue('counties_of_this_title_faith')] of"
										}
										text_single = {
											visible = "[Not(EqualTo_CFixedPoint(Title.MakeScope.ScriptValue('counties_of_this_title_faith'), GuiScope.SetRoot(Title.MakeScope).ScriptValue('counties_in_title')))]"
											raw_text = "[GuiScope.SetRoot(Title.MakeScope).ScriptValue('counties_in_title')]"
										}
										text_single = {
											raw_text = "counties are [Faith.GetAdjectiveNoTooltip],"
										}
										text_single = {
											visible = "[GetPlayer.MakeScope.Var('filter_counties_title_faith').IsSet]"
											raw_text = "Remove filter, F."
										}
										text_single = {
											visible = "[Not(GetPlayer.MakeScope.Var('filter_counties_title_faith').IsSet)]"
											raw_text = "Filter out, F."
										}
									}
								}
								onclick = "[Click('filter_counties_title_faith')]"
								onclick = "[ClickAdd('counties_in_title', Title, GetPlayer)]"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								datacontext = "[Character.GetCulture]"
								shortcut = character_finder
								blockoverride "extra" {
									flowcontainer = {
										ignoreinvisible = yes
										spacing = 3

										text_single = {
											visible = "[EqualTo_CFixedPoint(Title.MakeScope.ScriptValue('counties_of_this_title_culture'), GuiScope.SetRoot(Title.MakeScope).ScriptValue('counties_in_title'))]"
											raw_text = "All"
										}
										text_single = {
											raw_text = "[Title.MakeScope.ScriptValue('counties_of_this_title_culture')] of"
										}
										text_single = {
											visible = "[Not(EqualTo_CFixedPoint(Title.MakeScope.ScriptValue('counties_of_this_title_culture'), GuiScope.SetRoot(Title.MakeScope).ScriptValue('counties_in_title')))]"
											raw_text = "[GuiScope.SetRoot(Title.MakeScope).ScriptValue('counties_in_title')]"
										}
										text_single = {
											raw_text = "counties are [Culture.GetNameNoTooltip],"
										}
										text_single = {
											visible = "[GetPlayer.MakeScope.Var('filter_counties_title_culture').IsSet]"
											raw_text = "Remove filter, C."
										}
										text_single = {
											visible = "[Not(GetPlayer.MakeScope.Var('filter_counties_title_culture').IsSet)]"
											raw_text = "Filter out, C."
										}
									}
								}
								onclick = "[Click('filter_counties_title_culture')]"
								onclick = "[ClickAdd('counties_in_title', Title, GetPlayer)]"
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[DataModelHasItems(Title.MakeScope.GetList('counties_in_title'))]"
							datamodel = "[Title.MakeScope.GetList('counties_in_title')]"

							item = {
								button_text = {
									layoutpolicy_horizontal = expanding
									using = prov_click
									datacontext = "[Scope.Title]"
									blockoverride "text" {
										raw_text = "[Title.GetNameNoTierNoTooltip],"
									}
									blockoverride "extra" {
										text_single = {
											raw_text = "held by [Title.GetHolder.GetPrimaryTitle.GetNameNoTierNoTooltip]."
										}
										text_single = {
											raw_text = "[Title.GetCountyData.GetFaith.GetAdjectiveNoTooltip],"
										}
										text_single = {
											raw_text = "[Title.GetCountyData.GetCulture.GetNameNoTooltip]."
										}
										flowcontainer = {
											ignoreinvisible = yes
											spacing = 3
											visible = "[Not(ObjectsEqual(MyCapital.GetID, Title.GetProvince.GetID))]"
											text_single = {
												raw_text = "[DistanceTo(MyCapital, Title.GetProvince)|0]"
											}
											text_single = {
												raw_text = "[DaysTo(MyCapital, Title.GetProvince)|0]"
											}
											text_single = {
												raw_text = "[Direction(MyCapital, Title.GetProvince)|0]."
											}

										}
									}
								}
							}
						}

						expand = { }
					}

					# vassals
					vbox = {
						name = "vassals_tab_contents"
						visible = "[GetVariableSystem.HasValue('title_tabs', 'allegiance')]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						hbox = {
								layoutpolicy_horizontal = expanding
							spacing = 4

								text_single = {
									raw_text = "[GetDataModelSize(TitleViewWindow.GetTitleAllegianceVassals)]"
								}

							text_single = {
								raw_text = "[Localize('TITLE_ALLEGIANCE_VASSAL_LIST')]."
							}

								expand = { }
						}


						scrollbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							minimumsize = { 0 300 }

							blockoverride "scrollbox_content" {
								vbox = {
									datamodel = "[TitleViewWindow.GetTitleAllegianceVassals]"
									layoutpolicy_horizontal = expanding
									spacing = 3

									item = {
										char_name = {
											layoutpolicy_horizontal = expanding
										}
									}
								}
							}
						}
					}
				}
			}

			vbox_locr_title_wasteland = {}
		}
	}

	window_title_old = {}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################


template title_view_window_side_pop_out
{
	position = { 0 80 }


	state = {
		name = _show
		using = Animation_FadeIn_Standard
		position_x = 590
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		position_x = 500
	}
}

template title_window_background_illustration
{
	background = {
		texture = "[GetIllustration( 'title_holding' ).GetTexture( TitleViewWindow.GetTitle )]"
		alpha = 0.1
		fittype = centercrop

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
			blend_mode = alphamultiply
			mirror = vertical
		}

		using = Mask_Rough_Edges
	}
}

types Title
{
	type vbox_title_type_text = vbox {

		text_single = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(Or(Title.IsMercenaryCompany, Or( Title.IsHolyOrder, Title.HasFaction )))]"
			text = "TV_TIER_INFO"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(Title.CanHaveClaim)]"
			text = "[Title.GetSpecialDescription]"
		}
	}
}
