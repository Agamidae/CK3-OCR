######################################################
##################### INTRIGUE #######################
######################################################

window = {
	name = "intrigue_window"

	movable = no

	using = base_ocr_window

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab

		on_start = "[GetVariableSystem.Set( 'intrigue_view_tabs', 'schemes' )]"	# Added by AGOT, This is necessary to manage the additional tab
		on_start = "[GetVariableSystem.Set( 'secrets_show_all', 'true' )]"

		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/rightTab/sfx_ui_window_rightTab_Intrigue"
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
	}

	window = {
		using = ocr_window

		vbox = {
			using = ocr_margins

			header_pattern = {
				size = { 0 30 }
				scissor = yes
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "INTRIGUE_VIEW"
				}

				blockoverride "button_close"
				{
					onclick = "[IntrigueWindow.Close]"
				}

				blockoverride "illustration_texture"
				{
					texture = "gfx/interface/illustrations/window_headers/header_prison.dds"
				}
			}

			error_button = {
				layoutpolicy_horizontal = expanding
			}

			vbox = {
				name = "tabs"
				layoutpolicy_horizontal = expanding
				margin_left = 1

				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[GetVariableSystem.Set( 'intrigue_view_tabs', 'schemes' )]" # Added by AGOT
					onclick = "[IntrigueWindow.SetTab( 'schemes' )]"
					shortcut = speed_1
					blockoverride "text" {
						raw_text = "[Localize('OPEN_SCHEMES_TAB')],"
					}

					blockoverride "extra" {
						text_single = {
							raw_text = "tab 1, "
						}

						text_single = {
							raw_text = "[Select_CString(GetVariableSystem.HasValue( 'intrigue_view_tabs', 'schemes' ), 'selected.', '')]"
						}
					}
				}

				button_text = {
					layoutpolicy_horizontal = expanding
					onclick = "[IntrigueWindow.SetTab( 'hooks_and_secrets' )]"
					onclick = "[GetVariableSystem.Set( 'intrigue_view_tabs', 'hooks_and_secrets' )]" # Added by AGOT
					shortcut = speed_2
					blockoverride "text" {
						raw_text = "[Localize('OPEN_HOOKS_AND_SECRETS_TAB')],"
					}

					blockoverride "extra" {

						text_single = {
							raw_text = "tab 2,"
						}

						text_single = {
							raw_text = "[Select_CString(GetVariableSystem.HasValue( 'intrigue_view_tabs', 'hooks_and_secrets' ), 'selected.', '')]"
						}
					}
				}

				button_agot_spies = { }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				### SCHEMES
				scrollbox = {
					name = "schemes"
					visible = "[GetVariableSystem.HasValue( 'intrigue_view_tabs', 'schemes' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}


					blockoverride "scrollbox_content"
					{
						## My Schemes
						vbox = {
							name = "my_own_schemes"
							layoutpolicy_horizontal = expanding
							spacing = 10

							vbox = {
								datacontext = "[IntrigueWindow.GetHostileSchemes]"
								layoutpolicy_horizontal = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "[hostile_schemes|E]."
								}

								vbox = {
									name = "my_hostile_schemes"
									visible = "[SkillSchemeGroup.HasSchemes]"
									datamodel = "[SkillSchemeGroup.GetSchemes]"
									layoutpolicy_horizontal = expanding

									item = {
										vbox_own_scheme_item = {
											layoutpolicy_horizontal = expanding
										}
									}
								}

								text_multi = {
									name = "no_own_schemes"
									visible = "[Not(SkillSchemeGroup.HasSchemes)]"
									layoutpolicy_horizontal = expanding

									raw_text = "[Localize('SCHEME_WINDOW_NOT_OWNED_SCHEMES')]."

									background = {
										using = Background_Area
									}
								}
							}

							vbox = {
								name = "my_personal_schemes"
								datacontext = "[IntrigueWindow.GetPersonalSchemes]"
								layoutpolicy_horizontal = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "[personal_schemes|E]:"
								}

								vbox = {
									name = "hostile_list"
									visible = "[SkillSchemeGroup.HasSchemes]"
									datamodel = "[SkillSchemeGroup.GetSchemes]"
									layoutpolicy_horizontal = expanding

									item = {
										vbox_own_scheme_item = {
											layoutpolicy_horizontal = expanding
										}
									}
								}

								text_multi = {
									name = "no_own_schemes"
									visible = "[Not(SkillSchemeGroup.HasSchemes)]"
									layoutpolicy_horizontal = expanding

									raw_text = "[Localize('SCHEME_WINDOW_NOT_OWNED_SCHEMES')]."

									background = {
										using = Background_Area
									}
								}
							}
						}

						## Known schemes
						vbox = {
							name = "discovered_schemes"
							layoutpolicy_horizontal = expanding
							margin_top = 10

							text_single = {
								name = "label"
								layoutpolicy_horizontal = expanding

								text = "SCHEME_WINDOW_KNOWN_SCHEMES_TITLE"
							}

							vbox = {
								name = "known_schemes_grid"
								visible = "[IntrigueWindow.HasKnownSchemes]"
								datamodel = "[IntrigueWindow.GetKnownSchemes]"
								layoutpolicy_horizontal = expanding

								item = {
									vbox_discovered_scheme_item = {
										layoutpolicy_horizontal = expanding
									}
								}
							}

							text_multi = {
								name = "no_own_schemes"
								visible = "[Not(IntrigueWindow.HasKnownSchemes)]"
								layoutpolicy_horizontal = expanding

								raw_text = "[Localize('SCHEME_WINDOW_NOT_KNOWN_SCHEMES')]."

								background = {
									using = Background_Area
								}
							}
						}
						# mod
						vbox_wok_intrigue_arranged_courtships = {}
					}
				}

				### HOOKS AND SECRETS
				scrollbox = {
					name = "hooks_and_secrets"
					visible = "[GetVariableSystem.HasValue( 'intrigue_view_tabs', 'hooks_and_secrets' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}


					blockoverride "scrollbox_content"
					{
						spacing = 5

						# My Hooks
						vbox = {
							name = "my_hooks"
							layoutpolicy_horizontal = expanding
							spacing = 2


							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5

								text_single = {
									raw_text = "You hold"
								}

								text_single = {
									raw_text = "[IntrigueWindow.GetMyWeakHooksCount] weak and"
									# tooltip = "INTRIGUE_WINDOW_WEAK_HOOKS_COUNT"
								}

								# tooltip = "INTRIGUE_WINDOW_STRONG_HOOKS_COUNT"
								text_single = {
									raw_text = "[IntrigueWindow.GetMyStrongHooksCount] strong hooks."
								}

								# button_text = {
								# 	layoutpolicy_horizontal = expanding
								#     blockoverride "text" {
								#         raw_text = "[Select_CString(GetVariableSystem.Exists('hooks_expand'), 'Expand', 'Collapse')]"
								#     }
								# 	onclick = "[GetVariableSystem.Toggle( 'hooks_expand' )]"
								# 	visible = "[GreaterThan_int32(GetDataModelSize(IntrigueWindow.GetMyHooks), '(int32)4')]"
								# }

								expand = { }
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								fixedgridbox = {
									datamodel = "[IntrigueWindow.GetMyHooks]"
									# visible = "[And( Not( GetVariableSystem.Exists( 'hooks_expand' ) ), DataModelHasItems( IntrigueWindow.GetMyHooks ) )]"
									# flipdirection = yes
									maxhorizontalslots = 1

									addcolumn = 700
									addrow = 22

									item = {
										button_text = {
											blockoverride "text" {
												raw_text = "[Character.GetShortUINameNoTooltip], "
											}
											blockoverride "extra" {
												text_single = {
													raw_text = " Strong."
													align = left
													visible = "[EqualTo_int32(Character.GetHookOrHookableSecretsFrame, '(int32)2')]"
												}
												text_single = {
													raw_text = " Weak."
													align = left
													visible = "[EqualTo_int32(Character.GetHookOrHookableSecretsFrame, '(int32)1')]"
												}
											}
											datacontext = "[IntrigueWindowHookItem.GetCharacter]"
											using = char_click
										}
									}
								}
							}

							text_multi = {
								visible = "[IsDataModelEmpty( IntrigueWindow.GetMyHooks )]"
								layoutpolicy_horizontal = expanding
								text = "MY_HOOKS_ARE_EMPTY"

								background = {
									using = Background_Area
								}
							}
						}

						# Secrets known to me
						vbox = {
							name = "secrets_known_to_me"
							layoutpolicy_horizontal = expanding
							# spacing = 2

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "You know [GetDataModelSize(IntrigueWindow.GetSecretsKnownToMe)] secrets. [Select_CString(GetVariableSystem.Exists('secrets_show_all'), 'Expanded', 'Collapsed')]."
								}
								onclick = "[GetVariableSystem.Toggle( 'secrets_show_all' )]"
							}

							vbox_secret_item_ocr = {
								datamodel = "[IntrigueWindow.GetSecretsKnownToMe]"
								layoutpolicy_horizontal = expanding

								blockoverride "portrait"
								{
									datacontext = "[IntrigueWindowSecretGroup.GetCharacter]"
								}
							}
						}

						# Hooks on you

						vbox = {
							name = "hooks_on_me"
							layoutpolicy_horizontal = expanding
							# spacing = 2

							hbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									raw_text = "INTRIGUE_WINDOW_HOOKS_ON_ME_TITLE"
								}

								text_single = {
									raw_text = ": "
								}

								text_single = {
									raw_text = " [IntrigueWindow.GetWeakHooksOnMeCount] weak and "
								}

								text_single = {
									raw_text = " [IntrigueWindow.GetStrongHooksOnMeCount] strong hooks."
								}

								expand = { }
							}


							vbox = {
								datamodel = "[IntrigueWindow.GetHooksOnMe]"
								visible = "[DataModelHasItems( IntrigueWindow.GetHooksOnMe )]"
								layoutpolicy_horizontal = expanding
								spacing = 3

								item = {
									hbox = {
										layoutpolicy_horizontal = expanding
										datacontext = "[IntrigueWindowHookItem.GetHook]"

										background = {
											using = Background_Area
										}

										char_name = {
											datacontext = "[IntrigueWindowHookItem.GetCharacter]"
										}



										text_single = {
											# layoutpolicy_horizontal = expanding
											raw_text = " [Hook.GetHookStrengthState]"
											# align = left
										}

										text_single = {
											raw_text = ", [Hook.GetName],"
										}

										text_single = {
											raw_text = " "
										}

										text_single = {
											# layoutpolicy_horizontal = expanding
											visible = "[Hook.HasExpirationDate]"
											raw_text = "for [Hook.GetExpirationDate.GetTimeDiffFromNow]."
										}

										expand = { }
									}
								}
							}
						}

						# My secrets
						vbox = {
							name = "my_secrets"
							layoutpolicy_horizontal = expanding
							# spacing = 2

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "INTRIGUE_WINDOW_MY_SECRETS_TITLE"
							}


							vbox = {
								name = "my_secrets_grid"
								datamodel = "[IntrigueWindow.GetMySecrets]"
								visible = "[DataModelHasItems( IntrigueWindow.GetMySecrets )]"
								layoutpolicy_horizontal = expanding
								margin_top = 10
								spacing = 5

								item = {
									vbox = {
										datacontext = "[IntrigueWindowSecretItem.GetSecret]"
										visible = "[Secret.IsValid]"
										layoutpolicy_horizontal = expanding

										hbox = {
											layoutpolicy_horizontal = expanding
											margin = { 10 0 }
											spacing = 10
											tooltip = "[Secret.GetTooltipDesc]"

											icon = {
												texture = "[Secret.GetType.GetIcon]"
												size = { 30 30 }
											}

											text_multi = {
												layoutpolicy_horizontal = expanding
												text = "INTRIGUE_WINDOW_SECRET_DESC"
												align = left
												max_width = 450
											}

											expand = { }
										}

										vbox_secret_item_ocr = {
											visible = "[IntrigueWindowSecretItem.IsExpanded]"
											datamodel = "[IntrigueWindowSecretItem.GetKnownBy]"
											layoutpolicy_horizontal = expanding

											blockoverride "portrait_context"
											{
											}
										}
									}
								}
							}

							text_multi = {
								visible = "[IsDataModelEmpty( IntrigueWindow.GetMySecrets )]"
								layoutpolicy_horizontal = expanding
								raw_text = "[Localize('I_HAVE_NO_SECRETS')]."

								background = {
									using = Background_Area
								}
							}
						}
					}
				}

				vbox_spy_list = { }
			}
		}
	}

	old_intrigue = { }
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types IntrigueWindow
{
	type vbox_own_scheme_item = vbox {
		name = "my_own_scheme"
		block "datacontext" {
			datacontext = "[SchemeItem.GetScheme]"
		}

		background = {
			using = Background_Area_With_Header
		}

		flowcontainer = {
			layoutpolicy_horizontal = expanding

			text_single = {
				text = "SCHEME_WINDOW_ITEM_NAME"
				tooltip = "SCHEME_WINDOW_TT_ITEM"
			}

			dot = { }

			space = { }

			text_single = {
				raw_text = "Opinion: [Scheme.GetTarget.GetOpinionOf( GetPlayer )]."
			}
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			blockoverride "text" {
				raw_text = "[SchemeItem.GetCancelSchemeDescription]."
			}
			onclick = "[SchemeItem.OnCancelClick]"
			block "cancel_scheme" {
				visible = "[SchemeItem.CanCancelScheme]" #TODO
			}
		}

		flowcontainer = {
			direction = vertical
			ignoreinvisible = yes
			layoutpolicy_horizontal = expanding

			text_single = {
				raw_text = "SCHEME_WINDOW_EXPOSED_TOOLTIP"
				visible = "[Scheme.IsExposed]"
			}

			flowcontainer  = {
				tooltip = "SCHEME_WINDOW_SUCCESS_TOOLTIP"

				text_single = {
					raw_text = "Success chance:"
				}

				space = { }

				text_single = {
					name = "success"
					text = "SCHEME_WINDOW_SUCCESS_CHANCE"
				}

				dot = { }
			}

			flowcontainer  = {
				visible = "[Scheme.IsSecret]"
				tooltip = "SCHEME_WINDOW_SECRECY_TOOLTIP"

				text_single = {
					raw_text = "Secrecy:"
				}

				space = { }

				text_single = {
					name = "secrecy"
					text = "SCHEME_WINDOW_SECRECY"
				}

				dot = { }
			}
		}

		flowcontainer = {
			layoutpolicy_horizontal = expanding

			text_single = {
				raw_text = "Expected time: "
			}

			space = { }

			text_single = {
				name = "estimated_time"
				text = "SW_ESTIMATED_TIME"
			}

			dot = { }

			space = { }

			text_single = {
				raw_text = "[Scheme.GetProgressDescription]."
			}

			space = { }

			text_single = {
				raw_text = "Power difference: [Scheme.GetPowerDifference|0%]."
			}
			tooltip = "SCHEME_ITEM_PROGRESS_TOOLTIP"
		}

		char_name = {
			layoutpolicy_horizontal = expanding
			datacontext = "[Scheme.GetTarget]"
			blockoverride "pre" {
				text_single = {
					raw_text = "Target: "
				}
			}
		}

		### MEMBERS BUTTONS
		hbox = {
			name = "my_own_scheme_buttons"
			block "members" {
				visible = "[Scheme.GetSchemeType.UsesAgents]"
			}
			layoutpolicy_horizontal = expanding

			button_text = {
				visible = "[SchemeItem.HasMembers]"
			    blockoverride "text" {
			        raw_text = "[Select_CString(GetVariableSystem.Exists('own_scheme_expand'), 'Hide ', 'Show ')]"
					align = left
			    }
				onclick = "[GetVariableSystem.Toggle( 'own_scheme_expand')]"
			}

			space = { }

			text_single = {
				raw_text = "[SchemeItem.GetNumberOfOwnerAgents|V] [agents|E]."
			}

			expand = { }
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			shortcut = mapmode_kingdoms_secondary
		    blockoverride "text" {
		        raw_text = "Invite agents, i, [SchemeItem.GetNumberOfPotentialOwnerAgents] might accept"
				align = left
		    }

			blockoverride "dot" {

			}
			block "members" {
				visible = "[Scheme.GetSchemeType.UsesAgents]"
			}
			onclick = "[SchemeItem.ShowPotentialAgents]"
		}


		### MEMBERS
		vbox = {
			name = "my_own_scheme_members"
			block "members" {
				visible = "[GetVariableSystem.Exists( 'own_scheme_expand' )]"
			}
			layoutpolicy_horizontal = expanding
			margin = { 7 0 }
			margin_bottom = 5

			vbox = {
				name = "owner_member_grid"
				datamodel = "[SchemeItem.GetMembers]"
				layoutpolicy_horizontal = expanding

				item = {
					hbox = {
						layoutpolicy_horizontal = expanding
						datacontext = "[SchemeAgentItem.GetCharacter]"
						spacing = 3

						char_name = {

						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3

							hbox = {
								text_single = {
									raw_text = "Success chance:"
								}

								space = { }

								text_single = {
									raw_text = "[SchemeAgentItem.GetSuccessChance|0]."
								}
								tooltip = "[SchemeAgentItem.GetSuccessDesc]"
							}

							hbox = {
								text_single = {
									raw_text = "Scheme power:"
								}

								space = { }

								text_single = {
									raw_text = "[SchemeAgentItem.GetInfluence|0]."
								}
								tooltip = "INTRIGUE_WINDOW_SCHEME_POWER_TT"
							}

							text_single = {
								text = "INTRIGUE_WINDOW_AGENT_DISCOVERED"
								visible = "[SchemeAgentItem.IsExposed]"
								default_format = "#negative_value"
								tooltip = "INTRIGUE_WINDOW_AGENT_DISCOVERED_TT"
							}

							dot = { visible = "[SchemeAgentItem.IsExposed]" }

							expand = { }
						}
					}
				}
			}

			expand = { }
		}
	}

	type vbox_discovered_scheme_item = vbox {
		name = "known_scheme"
		datacontext = "[SchemeItem.GetScheme]"

		background = {
			using = Background_Area_With_Header
		}

		widget = {
			name = "my_own_scheme_header"
			size = { 510 130 }

			text_single = {
				parentanchor = hcenter
				position = { 0 3 }
				text = "SCHEME_WINDOW_ITEM_NAME"
				using = Font_Size_Medium
			}

			flowcontainer = {
				position = { 10 35 }
				direction = vertical

				flowcontainer = {
					tooltip = "SCHEME_WINDOW_SUCCESS_DISCOVERED_TOOLTIP"
					spacing = 5

					icon = {
						name = success_icon
						size = { 30 30 }

						texture = "gfx/interface/icons/schemes/icon_scheme_success.dds"
					}

					text_single = {
						name = "success"
						parentanchor = vcenter
						text = "SCHEME_WINDOW_SUCCESS_CHANCE"
						using = Font_Size_Medium
						align = left
					}
				}

				flowcontainer = {
					visible = "[Scheme.IsSecret]"
					spacing = 5
					tooltip = "SCHEME_WINDOW_SECRECY_DISCOVERED_TOOLTIP"

					icon = {
						name = "secrecy_icon"
						size = { 30 30 }
						texture = "gfx/interface/icons/schemes/icon_secrecy.dds"
					}

					text_single = {
						name = "secrecy"
						size = { 40 20 }
						text = "SCHEME_WINDOW_SECRECY"
						using = Font_Size_Medium
						align = left
					}
				}
			}

			portrait_head = {
				name = "target_portrait"
				datacontext = "[Scheme.GetTarget]"
				parentanchor = right
				position = { -20 0 }
				using = tooltip_es
				blockoverride "portrait_button"
				{
					tooltip = "SCHEME_WINDOW_SCHEME_TARGET"
				}

				icon = {
					name = "target_arrow"
					position = { -40 20 }
					parentanchor = left|vcenter
					texture = "gfx/interface/icons/scheme_target_arrow.dds"
				}
			}
		}

		hbox = {
			visible = "[And( Not(SchemeItem.HasMembers ), SchemeItem.GetScheme.GetSchemeType.UsesAgents)]"
			layoutpolicy_horizontal = expanding
			margin = { 0 30 }

			background = {
				using = Background_Area
			}

			text_single = {
				text = "SCHEME_WINDOW_NO_KNOWN_AGENTS"
				align = center
				default_format = "#low;italic"
			}
		}

		vbox = {
			visible = "[SchemeItem.HasMembers]"
			name = "known_scheme_members"
			layoutpolicy_horizontal = expanding
			margin = { 15 10 }
			spacing = 5

			background = {
				using = Background_Area
			}

			text_single = {
				text = "SCHEME_WINDOW_MEMBER_LIST"
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				fixedgridbox = {
					name = "owner_member_grid"
					datamodel = "[SchemeItem.GetMembers]"
					addcolumn = 95
					addrow = 95
					datamodel_wrap = 5
					flipdirection = yes

					item = {
						portrait_head_small = {
							datacontext = "[SchemeAgentItem.GetCharacter]"
							using = tooltip_ws

							blockoverride "portrait_button"
							{
								tooltip = "[SchemeAgentItem.GetTooltip]"
							}
						}
					}
				}

				expand = { }
			}

			expand = { }
		}
	}
}

types IntrigueWindowTypes
{
	type vbox_secret_item = vbox {
		spacing = 7

		item = {
			hbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Or( IntrigueWindowSecretGroup.HasUnspentHooks, GetVariableSystem.Exists( 'secrets_show_all' ) )]"

				background = {
					using = Background_Area
					margin_bottom = 5
				}

				portrait_head_small = {
					block "portrait" { }
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					datacontext = "[IntrigueWindowSecretGroup.GetCharacter]"
					margin = { 10 0 }

					vbox = {
						name = "secrets"
						datamodel = "[IntrigueWindowSecretGroup.GetSecrets]"
						visible = "[DataModelHasItems( IntrigueWindowSecretGroup.GetSecrets )]"
						margin = { 5 5 }
						spacing = 5
						layoutpolicy_horizontal = expanding

						item = {
							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5
								datacontext = "[IntrigueWindowSecretItem.GetSecret]"
								visible = "[And( Secret.IsValid, Or( Not( IntrigueWindowSecretItem.IsSpent ), GetVariableSystem.Exists( 'secrets_show_all' ) ) )]"


								icon = {
									texture = "[Secret.GetType.GetIcon]"
									size = { 30 30 }
									tooltip = "INTRIGUE_WINDOW_SECRET_TOOLTIP"
								}
								spacer = { }
								text_multi = {
									layoutpolicy_horizontal = expanding
									text = "INTRIGUE_WINDOW_SECRET_DESC"
									#default_format = "#high"
									align = left
									autoresize = yes
									max_width = 300
								}

								expand = { }
								icon = {
									size = { 20 20 }
									texture = "gfx/interface/icons/portraits/hook_secret.dds"
									framesize = {40 40 }
									frame = 1
									visible = "[IntrigueWindowSecretItem.IsWeakHook( Character.Self )]"
									tooltip = "INTRIGUE_WINDOW_BLACKMAIL_WEAK_HOOK_TT"
								}


								icon = {
									size = { 20 20 }
									texture = "gfx/interface/icons/portraits/hook_secret.dds"
									framesize = { 40 40 }
									frame = 2
									visible = "[IntrigueWindowSecretItem.IsStrongHook( Character.Self )]"
									tooltip = "INTRIGUE_WINDOW_BLACKMAIL_STRONG_HOOK_TT"
								}

								warning_icon = {
									size = { 20 20 }
									visible = "[Not( Character.IsPlayerInteractionWithTargetSecretValid( 'blackmail_interaction', Secret.Self ) )]"
									tooltip = "[Character.GetPlayerInteractionWithTargetSecretTooltip( 'blackmail_interaction', Secret.Self )]"
								}
							}
						}
					}

					hbox = {
						visible = "[Character.IsPlayerInteractionShown('blackmail_interaction')]"
						layoutpolicy_horizontal = expanding
						margin_right = 5
						spacing = 5

						expand = { }

						button_standard_small = {
							name = "blackmail_button"
							datacontext = "[IntrigueWindowSecretGroup.GetFirstSecret.GetSecret]"
							size = { 120 25 }
							enabled = "[IntrigueWindowSecretGroup.CanBlackmail]"
							onclick = "[Character.OpenPlayerInteraction( 'blackmail_interaction' )]"
							text = "INTRIGUE_WINDOW_SECRET_KNOWN_TO_ME_BLACKMAIL"
							tooltip = "INTRIGUE_WINDOW_SECRET_BLACKMAIL_TT"
							using = tooltip_se
						}

						button_tertiary = {
							name = "expose_button"
							datacontext = "[IntrigueWindowSecretGroup.GetFirstSecret.GetSecret]"
							size = { 120 25 }
							onclick = "[Character.OpenPlayerInteraction( 'expose_secret_interaction' )]"
							#"[IntrigueWindow.ExposeSecret( Character.Self, 'blackmail_interaction', Secret.Self )]"
							text = "INTRIGUE_WINDOW_SECRET_EXPOSE"
							tooltip = "INTRIGUE_WINDOW_SECRET_EXPOSE_TT"
							using = tooltip_se
						}


					}
				}


				expand = { }
			}
		}
	}

	type vbox_secret_item_ocr = vbox {
		spacing = 7

		item = {
			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Or( IntrigueWindowSecretGroup.HasUnspentHooks, GetVariableSystem.Exists( 'secrets_show_all' ) )]"

				background = {
					using = Background_Area
					margin_bottom = 5
				}

				button_text = {
					layoutpolicy_horizontal = expanding
				    blockoverride "text" {
				        raw_text = "[Character.GetNameNoTooltip]"
						align = left
				    }
					blockoverride "extra" {
						text_single = {
							raw_text = ", [Character.GetRelationToString( GetPlayer )]"
						}
					}
					blockoverride "dot" { }
					using = char_click
					block "portrait" { }
				}

				vbox = {
					datacontext = "[IntrigueWindowSecretGroup.GetCharacter]"
					name = "secrets"
					datamodel = "[IntrigueWindowSecretGroup.GetSecrets]"
					visible = "[DataModelHasItems( IntrigueWindowSecretGroup.GetSecrets )]"
					margin = { 5 5 }
					spacing = 5
					layoutpolicy_horizontal = expanding

					item = {
						hbox = {
							layoutpolicy_horizontal = expanding
							datacontext = "[IntrigueWindowSecretItem.GetSecret]"
							visible = "[And( Secret.IsValid, Or( Not( IntrigueWindowSecretItem.IsSpent ), GetVariableSystem.Exists( 'secrets_show_all' ) ) )]"

							text_single = {
								# layoutpolicy_horizontal = expanding
								text = "INTRIGUE_WINDOW_SECRET_DESC"
								#default_format = "#high"
								# align = left
								autoresize = yes
								max_width = 300
							}

							text_single = {
								raw_text = ", Weak hook secret."
								visible = "[IntrigueWindowSecretItem.IsWeakHook( Character.Self )]"
								tooltip = "INTRIGUE_WINDOW_BLACKMAIL_WEAK_HOOK_TT"
							}

							text_single = {
								raw_text = ", Strong hook secret."
								visible = "[IntrigueWindowSecretItem.IsStrongHook( Character.Self )]"
								tooltip = "INTRIGUE_WINDOW_BLACKMAIL_STRONG_HOOK_TT"
							}

							expand = { }

							# text_single = {
							# 	raw_text = "Can't blackmail."
							# 	visible = "[Not( Character.IsPlayerInteractionWithTargetSecretValid( 'blackmail_interaction', Secret.Self ) )]"
							# 	tooltip = "[Character.GetPlayerInteractionWithTargetSecretTooltip( 'blackmail_interaction', Secret.Self )]"
							# }
						}
					}
				}

				hbox = {
					datacontext = "[IntrigueWindowSecretGroup.GetCharacter]"
					visible = "[Character.IsPlayerInteractionShown('blackmail_interaction')]"
					layoutpolicy_horizontal = expanding
					spacing = 3

					button_text = {
					    blockoverride "text" {
					        raw_text = "INTRIGUE_WINDOW_SECRET_KNOWN_TO_ME_BLACKMAIL"
					    }
						blockoverride "disabled" {
							visible = "[Not(IntrigueWindowSecretGroup.CanBlackmail)]"
						}
						blockoverride "dot" { }
						tooltip = "INTRIGUE_WINDOW_SECRET_BLACKMAIL_TT"
						onclick = "[Character.OpenPlayerInteraction( 'blackmail_interaction' )]"
						datacontext = "[IntrigueWindowSecretGroup.GetFirstSecret.GetSecret]"
					}

					button_text = {
					    blockoverride "text" {
					        raw_text = "INTRIGUE_WINDOW_SECRET_EXPOSE"
					    }
						datacontext = "[IntrigueWindowSecretGroup.GetFirstSecret.GetSecret]"
						tooltip = "INTRIGUE_WINDOW_SECRET_EXPOSE_TT"
						onclick = "[Character.OpenPlayerInteraction( 'expose_secret_interaction' )]"
						blockoverride "dot" { }
					}
					expand = { }
				}

				expand = { }
			}
		}
	}
}
