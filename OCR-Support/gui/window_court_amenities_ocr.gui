types OCR
{

	type court_grandeur_expected_level_vbox_ocr = vbox {
		cooltip_paragraph = {
			layoutpolicy_horizontal	= expanding
			visible = "[LessThan_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetMinimumExpectedLevel )]"
			text = COURT_GRANDEUR_TOOLTIP_BELOW_EXPECTATION
		}
		cooltip_paragraph = {
			layoutpolicy_horizontal	= expanding
			visible = "[EqualTo_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetMinimumExpectedLevel )]"
			text = COURT_GRANDEUR_TOOLTIP_AT_EXPECTATION
		}
		cooltip_paragraph = {
			layoutpolicy_horizontal	= expanding
			visible = "[GreaterThan_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetMinimumExpectedLevel )]"
			text = COURT_GRANDEUR_TOOLTIP_ABOVE_EXPECTATION
		}

		vbox = {
			visible = "[NotEqualTo_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetCurrentLevelIgnoreGrace )]"

			spacer = {
				size = { 10 10 }
			}

			cooltip_paragraph = {
				layoutpolicy_horizontal	= expanding
				visible = "[LessThan_int32( CourtGrandeurData.GetCurrentLevelIgnoreGrace, CourtGrandeurData.GetMinimumExpectedLevel )]"
				text = COURT_GRANDEUR_TOOLTIP_BELOW_EXPECTATION_IGNORE_GRACE
			}
			cooltip_paragraph = {
				layoutpolicy_horizontal	= expanding
				visible = "[EqualTo_int32( CourtGrandeurData.GetCurrentLevelIgnoreGrace, CourtGrandeurData.GetMinimumExpectedLevel )]"
				text = COURT_GRANDEUR_TOOLTIP_AT_EXPECTATION_IGNORE_GRACE
			}
			cooltip_paragraph = {
				layoutpolicy_horizontal	= expanding
				visible = "[GreaterThan_int32( CourtGrandeurData.GetCurrentLevelIgnoreGrace, CourtGrandeurData.GetMinimumExpectedLevel )]"
				text = COURT_GRANDEUR_TOOLTIP_ABOVE_EXPECTATION_IGNORE_GRACE
			}
		}
	}


	# Requires CourtAmenitiesWindow datacontext
	type widget_court_grandeur_view_ocr = vbox
	{

		container = {
			name = "royal_court_grandeur_view_tutorial_uses_this"
			widgetid = "royal_court_grandeur_view_tutorial_uses_this"
		}

		button_text = {
			layoutpolicy_horizontal = expanding
			shortcut = character_finder
			onclick = "[GetVariableSystem.SetOrToggle('royal_details', 'amenities')]"
			onclick = "[Clear('changed_amenity'))]"
			onclick = "[CourtAmenitiesWindow.NotifyAmenityWidgetHidden]"
		    blockoverride "text" {
				text =  COURT_AMENITIES_LABEL
		    }
			blockoverride "extra" {
				comma = {}
				text_single = {
					raw_text = "C."
				}
			}
		}

		button = {
			shortcut = close_window
			visible = "[And(Has('royal_details', 'amenities'), Isnt('amenity'))]"
			onclick = "[Clear('royal_details')]"
		}


		hbox = {
		    layoutpolicy_horizontal = expanding
			spacing = 3
			tooltip = "[CourtAmenitiesWindow.GetMonthlyCostBreakdown]"

			text_single = {
				raw_text = "Cost:"
			}

			text_single = {
				text = "COURT_AMENITIES_EXPENSES_MONTHLY_COST"
			}

			dot_l = { }

		    expand = { }
		}

		vbox = {
			layoutpolicy_vertical = expanding


			text_single = {
				text = "COURT_AMENITIES_EXPENSES_NEW_MONTHLY_COST"
				visible = "[CourtAmenitiesWindow.HasChangedAnyAmenity]"
			}

			expand = {
				layoutpolicy_vertical = expanding
			}
		}

		widget_court_amenity_ocr = {
			shortcut = speed_1
			blockoverride "pre" {
				text_single = {
					raw_text = "1,"
				}
			}
			onclick = "[Set('amenity', 'court_fashion')]"
			datacontext = "[CourtAmenitiesWindow.GetCategory( 'court_fashion' )]"
		}
		widget_court_amenity_ocr = {
			shortcut = speed_2
			blockoverride "pre" {
				text_single = {
					raw_text = "2,"
				}
			}
			onclick = "[Set('amenity', 'court_food_quality')]"
			datacontext = "[CourtAmenitiesWindow.GetCategory( 'court_food_quality' )]"
		}
		widget_court_amenity_ocr = {
			shortcut = speed_3
			blockoverride "pre" {
				text_single = {
					raw_text = "3,"
				}
			}
			onclick = "[Set('amenity', 'court_lodging_standards')]"
			datacontext = "[CourtAmenitiesWindow.GetCategory( 'court_lodging_standards' )]"
		}
		widget_court_amenity_ocr = {
			shortcut = speed_4
			blockoverride "pre" {
				text_single = {
					raw_text = "4,"
				}
			}
			onclick = "[Set('amenity', 'court_servants')]"
			datacontext = "[CourtAmenitiesWindow.GetCategory( 'court_servants' )]"
		}

		agot_pit_amenity = {}

		# widget_court_amenity_changed_ocr = {
		# 	visible = "[CourtAmenitiesWindow.HasAppliedAmenityChanges]"
		# }
	}

	type widget_court_amenity_right_ocr = widget
	{
		size = { 368 98 }

		background = {
			using = Background_Area_With_Header

			modify_texture = {
				texture = "gfx/interface/window_roco_grandeur/mask_court_amenity_left.dds"
				blend_mode = alphamultiply
			}
		}

		widget = {
			name = "radio_button_bar"
			size = { 320 98 }

			icon = {
				name = "radio_button_bg"
				texture = "gfx/interface/window_roco_grandeur/amenity_level_bg.dds"
				size = { 256 54 }
				position = { 56 27 }
			}

			flowcontainer = {
				margin_left = 58
				margin_top = 6

				text_single = {
					text = "[CourtAmenitiesWindow.GetCurrentSettingName( CourtAmenitiesCategoryItem.Self )]"
					default_format = "#high"
					align = left
					margin_right = 5
					margin_top = -2
				}

			}

			text_single = {
				name = "current_level"
				# Account for levels being zero indexed
				text = "[Add_int32( CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ), '(int32)1' )]"
				align = center
				widgetanchor = center
				position = { 84 51 }
				using = Font_Size_Medium
			}

			widget = {
				name = "progressbar_widget"
				size = { 200 10 }
				position = { 120 50 }

				progressbar_standard = {
					name = "progressbar_court_amenities"
					layoutpolicy_horizontal = expanding
					size = { 150 10 }
					min = 0
					max = 100
					value = 0
				}
			}

			flowcontainer = {
				datamodel = "[CourtAmenitiesCategoryItem.AccessPossibleSettings]"
				spacing = 8
				margin_left = 110
				margin_top = 39

				item = {
					button_radio = {
						datacontext = "[CourtAmenitiesSettingItem.GetSetting]"
						size = { 30 30 }

						enabled = "[CourtAmenitiesWindow.CanApplyCourtAmenitySetting( CourtAmenitiesCategoryItem.Self, CourtAmenitiesSettingItem.Self )]"
						onclick = "[CourtAmenitiesWindow.SelectSetting( CourtAmenitiesSettingItem.AccessSelf )]"

						frame = 1

						button_radio = {
							visible = "[EqualTo_int32( CourtAmenitiesSettingItem.GetLevel, CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ) ) ]"
							frame = 2

							alpha = 0.5
							alwaystransparent = yes
						}

						icon = {
							framesize = { 120 120 }
							frame = 1
							size = { 70 70 }
							position = { 1 1 }
							parentanchor = center
							visible = "[EqualTo_int32( CourtAmenitiesSettingItem.GetLevel, CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ) ) ]"
							texture = "gfx/interface/window_roco_grandeur/radio_button_decoration.dds"
						}

						button_radio = {
							visible = "[And( CourtAmenitiesSettingItem.IsSelected, NotEqualTo_int32( CourtAmenitiesSettingItem.GetLevel, CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ) ) )]"
							frame = 2
							alwaystransparent = yes
						}

						tooltipwidget = {
							court_amenity_setting_tooltip_contents = {
								blockoverride "warning_description_text"
								{
									text = "[CourtAmenitiesWindow.GetSettingBlockerTooltip( CourtAmenitiesCategoryItem.Self, CourtAmenitiesSettingItem.Self  )]"
								}
							}
						}
						using = tooltip_ne
					}
				}
			}
		}

		icon= {
			name = "banner_icon"
			framesize = { 160 160 }
			size = { 94 94 }
			position = { -18 0 }

			block "amenity_icon_texture"
			{
				texture = "gfx/interface/window_roco_grandeur/icon_amenity_fashion.dds"
			}
		}
	}

	type widget_court_amenity_ocr = button_text {
		onclick = "[Set('royal_details', 'amenities')]"
		layoutpolicy_horizontal = expanding
	    blockoverride "text" {
	        raw_text = "[CourtAmenitiesWindow.GetCurrentSettingName( CourtAmenitiesCategoryItem.Self )],"
	    }
		blockoverride "extra" {
			text_single = {
				raw_text = "level [Add_int32( CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ), '(int32)1' )]."
			}
			text_single = {
				visible = "[CourtAmenitiesWindow.IsCategoryOnCooldown( CourtAmenitiesCategoryItem.Self )]"
				raw_text = "On cooldown."
			}
		}
	}

	type widget_court_amenity_open_ocr = vbox {
		layoutpolicy_horizontal = expanding

		hbox = {
		    layoutpolicy_horizontal = expanding

			text_multi_wide = {
				max_width = 480
				visible = "[CourtAmenitiesWindow.IsCategoryOnCooldown( CourtAmenitiesCategoryItem.Self )]"
				raw_text = "[CourtAmenitiesWindow.GetSettingBlockerTooltip( CourtAmenitiesCategoryItem.Self, CourtAmenitiesSettingItem.Self  )]."
				datacontext_from_model = {
					datamodel = "[CourtAmenitiesCategoryItem.AccessPossibleSettings]"
					index = 0
				}
			}

		    expand = { }
		}

		button_checked_text = {
			visible = "[Not(CourtAmenitiesWindow.HasChangedAnyAmenity)]"
			shortcut = mapmode_house_secondary
			layoutpolicy_horizontal = expanding
			onclick = "[Toggle('amenity_desc')]"
			blockoverride "text" {
				raw_text = "Hide descriptions, Shift D."
			}
			blockoverride "visible" {
				visible = "[Isnt('amenity_desc')]"
			}
		}

		hbox = {
		    layoutpolicy_horizontal = expanding

			text_single = {
				raw_text = "Change [CourtAmenitiesWindow.GetCurrentSettingName( CourtAmenitiesCategoryItem.Self )] to:"
			}

			# hbox = {
			# 	visible = "[CourtAmenitiesWindow.HasChangedAnyAmenity]"
			# 	datamodel = "[CourtAmenitiesCategoryItem.AccessPossibleSettings]"
			#
			# 	item = {
			# 		text_single = {
			# 			visible = "[CourtAmenitiesSettingItem.IsSelected]"
			# 			raw_text = "[CourtAmenitiesSettingItem.GetSetting.GetName]."
			# 		}
			# 	}
			# }

		    expand = { }
		}


		vbox = {
			layoutpolicy_horizontal = expanding
			datamodel = "[CourtAmenitiesCategoryItem.AccessPossibleSettings]"

			item = {
				vbox = {
					layoutpolicy_horizontal = expanding
					datacontext = "[CourtAmenitiesSettingItem.GetSetting]"
					visible = "[Or(Not(CourtAmenitiesWindow.HasChangedAnyAmenity), CourtAmenitiesSettingItem.IsSelected)]"

					button_text = {
						layoutpolicy_horizontal = expanding
						tooltipwidget = {
							court_amenity_setting_tooltip_contents = {
								blockoverride "warning_description_text"
								{
									text = "[CourtAmenitiesWindow.GetSettingBlockerTooltip( CourtAmenitiesCategoryItem.Self, CourtAmenitiesSettingItem.Self  )]"
								}
							}
						}
						shortcuts_list = {
							blockoverride "click" {
								onclick = "[CourtAmenitiesWindow.SelectSetting( CourtAmenitiesSettingItem.AccessSelf )]"
							}
						}
						enabled = "[CourtAmenitiesWindow.CanApplyCourtAmenitySetting( CourtAmenitiesCategoryItem.Self, CourtAmenitiesSettingItem.Self )]"
						onclick = "[CourtAmenitiesWindow.SelectSetting( CourtAmenitiesSettingItem.AccessSelf )]"
						onclick = "[CourtAmenitiesWindow.NotifyAmenityWidgetHidden]"
						blockoverride "pre" {
							text_single = {
								visible = "[Not(CourtAmenitiesWindow.HasChangedAnyAmenity)]"
								raw_text = "[IndexNumber],"
							}
							text_single = {
								visible = "[And(Not(CourtAmenitiesWindow.CanApplyCourtAmenitySetting( CourtAmenitiesCategoryItem.Self, CourtAmenitiesSettingItem.Self )), Not(EqualTo_int32( CourtAmenitiesSettingItem.GetLevel, CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ) ) ))]"
								raw_text = "Disabled,"
							}
							text_single = {
								visible = "[EqualTo_int32( CourtAmenitiesSettingItem.GetLevel, CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ) ) ]"
								raw_text = "Current:"
							}
						}
					    blockoverride "text" {
					        raw_text = "[CourtAmenitiesSetting.GetName]."
					    }
						blockoverride "extra" {
							text_single = {
								raw_text = "[CourtAmenitiesSetting.GetCostDescription( GetPlayer.Self )]."
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[CourtAmenitiesWindow.HasChangedAnyAmenity]"

						text_multi_wide = {
							layoutpolicy_horizontal = expanding
							raw_text = "[CourtAmenitiesSetting.GetDescription]"
						}

						text_multi_wide = {
							layoutpolicy_horizontal = expanding
							raw_text = "[CourtAmenitiesSetting.GetEffectDescription]"
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[And(Not(CourtAmenitiesWindow.HasChangedAnyAmenity), Isnt('amenity_desc'))]"

						text_multi_wide = {
							layoutpolicy_horizontal = expanding
							raw_text = "[CourtAmenitiesSetting.GetDescription]"
						}

						text_multi_wide = {
							layoutpolicy_horizontal = expanding
							raw_text = "[CourtAmenitiesSetting.GetEffectDescription]"
						}
					}
				}
			}
		}
	}

	type widget_court_amenity_left_ocr = widget
	{
		size = { 368 98 }

		background = {
			using = Background_Area_With_Header

			modify_texture = {
				texture = "gfx/interface/window_roco_grandeur/mask_court_amenity_right.dds"
				blend_mode = alphamultiply
			}
		}

		widget = {
			name = "radio_button_bar"
			size = { 320 98 }

			icon = {
				name = "radio_button_bg"
				texture = "gfx/interface/window_roco_grandeur/amenity_level_bg.dds"
				size = { 256 54 }
				position = { 56 27 }
			}

			flowcontainer = {
				parentanchor = right
				margin_top = 6

				text_single = {
					text = "[CourtAmenitiesWindow.GetCurrentSettingName( CourtAmenitiesCategoryItem.Self )]"
					default_format = "#high"
					align = nobaseline
					margin = { 5 0 }
				}

				spacer = {
					size = { 4 0 }
				}


			}

			text_single = {
				name = "current_level"
				# Account for levels being zero indexed
				text = "[Add_int32( CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ), '(int32)1' )]"
				align = center
				widgetanchor = center
				position = { 84 51 }
				using = Font_Size_Medium
			}

			widget = {
				name = "progressbar_widget"
				size = { 200 10 }
				position = { 120 50 }

				progressbar_standard = {
					name = "progressbar_court_amenities"
					layoutpolicy_horizontal = expanding
					size = { 150 10 }
					min = 0
					max = 100
					value = 0
				}
			}


			flowcontainer = {
				datamodel = "[CourtAmenitiesCategoryItem.AccessPossibleSettings]"
				spacing = 8
				margin_left = 110
				margin_top = 39

				item = {
					button_radio = {
						datacontext = "[CourtAmenitiesSettingItem.GetSetting]"
						size = { 30 30}

						enabled = "[CourtAmenitiesWindow.CanApplyCourtAmenitySetting( CourtAmenitiesCategoryItem.Self, CourtAmenitiesSettingItem.Self )]"
						onclick = "[CourtAmenitiesWindow.SelectSetting( CourtAmenitiesSettingItem.AccessSelf )]"

						frame = 1

						button_radio = {
							visible = "[EqualTo_int32( CourtAmenitiesSettingItem.GetLevel, CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ) ) ]"
							frame = 2

							alpha = 0.5
							alwaystransparent = yes
						}

						icon = {
							framesize = { 120 120 }
							frame = 1
							size = { 70 70 }
							position = { 1 1 }
							parentanchor = center
							visible = "[EqualTo_int32( CourtAmenitiesSettingItem.GetLevel, CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ) ) ]"
							texture = "gfx/interface/window_roco_grandeur/radio_button_decoration.dds"
						}

						button_radio = {
							visible = "[And( CourtAmenitiesSettingItem.IsSelected, NotEqualTo_int32( CourtAmenitiesSettingItem.GetLevel, CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ) ) )]"
							frame = 2
							alwaystransparent = yes
						}

						tooltipwidget = {
							court_amenity_setting_tooltip_contents = {
								blockoverride "warning_description_text"
								{
									text = "[CourtAmenitiesWindow.GetSettingBlockerTooltip( CourtAmenitiesCategoryItem.Self, CourtAmenitiesSettingItem.Self  )]"
								}
							}
						}
						using = tooltip_ne
					}
				}
			}
		}

		icon = {
			name = "banner_icon"
			framesize = { 160 160 }
			frame = 1
			size = { 94 94 }
			position = { 292 0 }

			block "amenity_icon_texture"
			{
				texture = "gfx/interface/window_roco_grandeur/icon_amenity_fashion.dds"
			}
		}
	}

	type court_grandeur_level_header_tooltip_ocr = object_tooltip_pop_out
	{
		blockoverride "header_tt"
		{
			text_single = {
				margin = { 0 8 }
				text = COURT_GRANDEUR_CURRENT_LEVEL_TITLE
			}
		}

		blockoverride "concept_link"
		{
			text = "[court_grandeur_level|E]"
		}

		blockoverride "description_text"
		{
			text = COURT_GRANDEUR_CURRENT_LEVEL_TOOLTIP
		}
	}

	type court_grandeur_level_tooltip_ocr = object_tooltip_pop_out
	{
		blockoverride "header_tt"
		{
			text_single = {
				margin = { 0 8 }
				text = COURT_GRANDEUR_LEVEL_TITLE
			}
		}

		blockoverride "concept_link"
		{
			text = "[court_grandeur_level|E]"
		}

		blockoverride "description_text"
		{
			text = COURT_GRANDEUR_LEVEL_TOOLTIP
		}

		blockoverride "extra_data"
		{
			vbox = {
				layoutpolicy_horizontal	= expanding

				cooltip_paragraph = {
					visible = "[LessThan_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetCurrentLevel )]"

					layoutpolicy_horizontal	= expanding
					text = COURT_GRANDEUR_ACTIVE_LEVEL
				}

				cooltip_paragraph = {
					visible = "[EqualTo_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetCurrentLevel )]"

					layoutpolicy_horizontal	= expanding
					text = COURT_GRANDEUR_CURRENT_LEVEL
				}

				cooltip_paragraph = {
					visible = "[GreaterThan_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetCurrentLevel )]"

					layoutpolicy_horizontal	= expanding
					text = COURT_GRANDEUR_INACTIVE_LEVEL
				}

				cooltip_paragraph = {
					visible = "[And( NotEqualTo_int32( CourtGrandeurData.GetCurrentLevelIgnoreGrace, CourtGrandeurData.GetCurrentLevel ), And( GreaterThan_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetCurrentLevelIgnoreGrace ), LessThanOrEqualTo_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetCurrentLevel ) ) )]"

					layoutpolicy_horizontal	= expanding
					text = COURT_GRANDEUR_CURRENT_LEVEL_GRACE_PERIOD
				}

				spacer = {
					size = { 10 10 }
				}
			}
		}

		blockoverride "extra_data_after_description"
		{
			vbox = {
				visible = "[EqualTo_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetMinimumExpectedLevel )]"
				layoutpolicy_horizontal	= expanding

				spacer = {
					size = { 10 10 }
				}

				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					text = COURT_GRANDEUR_EXPECTED_LEVEL
					default_format = "#bold"
				}

				court_grandeur_expected_level_vbox = {}
			}
		}
	}

	type court_grandeur_progress_bar_tooltip_ocr = object_tooltip_pop_out
	{
		blockoverride "header_tt"
		{
			text_single = {
				margin = { 0 8 }
				raw_text = "Grandeur tooltip."
				align = nobaseline
			}
		}

		blockoverride "concept_link" {}

		blockoverride "extra_data"
		{
			# cooltip_paragraph = {
			# 	datacontext = "[CourtGrandeurWindow.GetBaseBreakdownTooltip]"
			# 	layoutpolicy_horizontal	= expanding
			# 	text = COURT_GRANDEUR_PROGRESS_TOOLTIP_BASELINE
			#
			# 	tooltip_visible = "[ValueBreakdown.HasTooltip]"
			# 	tooltipwidget = { widget_value_breakdown_tooltip = {} }
			# }
			#
			# cooltip_paragraph = {
			# 	datacontext = "[CourtGrandeurWindow.GetChangeTowardsBaseBreakdownTooltip]"
			# 	visible = "[NotEqualTo_CFixedPoint( CourtGrandeurData.GetChangeTowardsBase, '(CFixedPoint)0' )]"
			# 	layoutpolicy_horizontal	= expanding
			# 	text = COURT_GRANDEUR_PROGRESS_TOOLTIP_BASELINE_CHANGE
			#
			# 	tooltip_visible = "[ValueBreakdown.HasTooltip]"
			# 	tooltipwidget = { widget_value_breakdown_tooltip = {} }
			# }
			#
			# cooltip_paragraph = {
			# 	layoutpolicy_horizontal	= expanding
			# 	visible = "[NotEqualTo_int32( CourtGrandeurData.GetDaysUntilAtBase, '(int32)0' )]"
			# 	text = COURT_GRANDEUR_PROGRESS_TOOLTIP_BASELINE_TIME
			# }
			#
			# spacer = {
			# 	size = { 10 10 }
			# }

			court_grandeur_expected_level_vbox = {}
		}
	}

	type court_grandeur_expectations_tooltip_ocr = object_tooltip_pop_out
	{
		# datacontext = "[CourtGrandeurData.Self]"
		datacontext = "[GetCourtGrandeurDiffFromExpectedLevelModifier( CourtGrandeurData.GetDifferenceFromExpectedLevel )]"
		blockoverride "header_tt"
		{
			text_single = {
				margin = { 0 8 }
				text = "[StaticModifier.GetName|T]"
			}
		}

		blockoverride "concept_link"
		{
			text = "[court_grandeur_expectations|E]"
		}

		blockoverride "description_text"
		{
			text = COURT_GRANDEUR_EXPECTATIONS_TOOLTIP
		}
	}

	type flowcontainer_change_court_component_ocr = button_text
	{
	    blockoverride "text" {
			block "component_label"
			{
				raw_text = "#D REPLACE ME#!"
			}
			alwaystransparent = yes
	    }
		blockoverride "extra" {
			text_single = {
				alwaystransparent = yes
				block "component_text"
				{
				}
			}
			# comma = {}
			text_single = {
				alwaystransparent = yes
				block "component_button"
				{
					raw_tooltip = "#D REPLACE ME#"
					raw_text = "#D REPLACE ME#"
				}
			}
			dot_l = { }
			text_single = {
				alwaystransparent = yes
				block "click to change" {
					raw_text = "Click to change."
				}
				visible = "[Character.IsLocalPlayer]"
			}
		}
	}

	type widget_court_amenity_changed_ocr = widget {

		state = {
			name = _show
			next = "lingering_court_amenity_notification"

			scale = 1
			alpha = 1
			duration = 0.4
			bezier = { 0.5 0 1 0.5 }
			on_start = "[Clear('amenity')]"
			on_start = "[Set('changed_amenity', 'yes')]"
			# on_start = "[Clear('royal_details')]"

			start_sound = {
				soundeffect = "event:/DLC/EP1/SFX/UI/Notifications/court_grandeur_amenity_icon_show"
			}
		}

		state = {
			name = "lingering_court_amenity_notification"
			delay = 3
			# on_finish = "[CourtAmenitiesWindow.NotifyAmenityWidgetHidden]"
		}

		state = {
			name = _hide
			using = Animation_Curve_Default
			duration = 0.15
			bezier = { 0.5 0 1 0.5 }

			alpha = 0
			scale = 0
		}
	}

	type icon_grandeur_level_ocr = icon {
		framesize = { 120 120 }
		size = { 60 60 }

		frame = "[Select_int32( Not(EqualTo_int32(CourtGrandeurData.GetCurrentLevel, CourtGrandeurLevel.GetValue)), Select_int32( LessThan_int32(CourtGrandeurData.GetCurrentLevel, CourtGrandeurLevel.GetValue), '(int32)1', '(int32)2' ), '(int32)3' )]"
	}
}
