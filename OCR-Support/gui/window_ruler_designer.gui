window = {
	name = "ruler_designer"
	size = { 100% 100% }
	movable = no
	layer = windows_layer
	filter_mouse = all
	datacontext = "[GetVariableSystem]"

	using = Window_Background_No_Edge

	background = {
		texture = "gfx/interface/component_tiles/tile_window_background_no_edge.dds"
		spriteType = Corneredtiled
		spriteborder = { 18 0 }
		margin = { 20 0 }
		texture_density = 2

		modify_texture = {
			texture = "gfx/interface/component_overlay/overlay_effect.dds"
			blend_mode = overlay
		}
	}

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		on_start = "[GetVariableSystem.Clear( 'faith_select_window_open' )]"
		on_start = "[GetVariableSystem.Clear( 'culture_select_window_open' )]"
		on_start = "[GetVariableSystem.Clear( 'trait_select_window_open' )]"
		on_start = "[GetVariableSystem.Clear( 'trait_select_window_replace' )]"
		on_start = "[GetVariableSystem.Clear( 'appearance_customization_window_open' )]"
		on_start = "[GetVariableSystem.Clear( 'appearance_customization_side_tab_open' )]"
		on_start = "[GetVariableSystem.Clear( 'appearance_customization_portrait_view' )]"
		on_start = "[GetVariableSystem.Clear( 'coat_of_arms_customization_open' )]"
		using = CoatOfArmsDesignerAnimationResetState
		on_finish = "[Clear('selected_ethnicity')]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
	}

	empty_screen = {
		using = ocr
		button = {
			onclick = "[GetVariableSystem.Toggle('show_designer_tooltips')]"
			shortcut = increase_speed_2
		}

		button_text = {
			parentanchor = hcenter
			visible = no
			blockoverride "text" {
				raw_text = "Errors: [NumberOrErrors]"
			}
			onclick = "[ClearErrorLog]"
			shortcut = army_split_half
		}

		vbox = {
			margin_top = 10
			margin_left = 10

			background = {
				texture = "gfx/interface/illustrations/event_scenes_frontend/temple.dds"
				alpha = 0.1
				mirror = horizontal
				fittype = centercrop

				modify_texture = {
					texture = "gfx/interface/window_ruler_designer/rd_bg_mask.dds"
					blend_mode = alphamultiply
					spritetype = corneredstretched
					spriteborder = { 590 0 }
				}
			}

			background = {
				texture = "gfx/interface/component_masks/mask_fade_corner.dds"
				color = { 0.12 0.12 0.12 1 }
				mirror = horizontal
				margin_right = -1200
				alpha = 0.6
			}


			hbox = {
				name = "main_designer"
				visible = "[Not( Or( VariableSystem.Exists( 'appearance_customization_window_open' ), VariableSystem.Exists( 'coat_of_arms_customization_open' ) ) )]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 10

				using =  Animation_Tab_Switch

				# faith
				vbox = {
					name = "faith_selection"
					layoutpolicy_vertical = expanding
					visible = "[VariableSystem.Exists( 'faith_select_window_open' )]"

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
						on_start = "[RulerDesignerWindow.AccessReligionList.HideAllChildren]"
					}

					# text_single = {
					# 	text_single = {
					# 		raw_text = "Choose religion:"
					# 	}
					# }

					scrollbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						minimumsize = { 350 0 }

						datacontext = "[RulerDesignerWindow.AccessReligionList]"

						blockoverride "scrollbox_content"
						{
							vbox = {
								datamodel = "[CollapsibleReligionList.AccessItems]"
								layoutpolicy_horizontal = expanding

								item = {
									vbox = {
										name = "religion"
										datacontext = "[CollapsibleReligionListGroup.GetItem]"
										layoutpolicy_horizontal = expanding
										spacing = 5

										visible = "[Or(Not(GetVariableSystem.Exists('religion_selected')), CollapsibleReligionListGroup.AreChildrenVisible)]"

										hbox = {
											layoutpolicy_horizontal = expanding
											visible = "[GreaterThan_int32(GetDataModelSize(Religion.GetFaiths), '(int32)1')]"

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "[Religion.GetNameNoTooltip], [GetDataModelSize(Religion.GetFaiths)] faiths,"
													align = left
												}
												visible = "[Not(CollapsibleReligionListGroup.AreChildrenVisible)]"

												onclick = "[CollapsibleReligionListGroup.ToggleChildrenVisible]"
												onclick = "[GetVariableSystem.Set('religion_selected', 'yes')]"
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "[Religion.GetNameNoTooltip], Close, hotkey B."
													align = left
												}
												visible = "[CollapsibleReligionListGroup.AreChildrenVisible]"

												onclick = "[CollapsibleReligionListGroup.ToggleChildrenVisible]"
												onclick = "[GetVariableSystem.Clear('religion_selected')]"
												shortcut = go_back
											}
										}

										vbox = {
											name = "faiths"
											datamodel = "[Religion.GetFaiths]"
											# visible = "[CollapsibleReligionListGroup.AreChildrenVisible]"
											visible = "[Or(EqualTo_int32(GetDataModelSize(Religion.GetFaiths), '(int32)1'), CollapsibleReligionListGroup.AreChildrenVisible)]"
											layoutpolicy_horizontal = expanding

											item = {
												button_text = {
													layoutpolicy_horizontal = expanding
													blockoverride "text" {
														raw_text = "[Faith.GetNameNoTooltip],"
														align = left
													}
													blockoverride "extra" {
														text_single = {
															visible = "[EqualTo_int32(GetDataModelSize(Religion.GetFaiths), '(int32)1')]"
															raw_text = "[Faith.GetReligion.GetAdjectiveNoTooltip] faith,"
														}
													}
													enabled = "[Not( ObjectsEqual( Faith.Self, RulerDesignerWindow.GetFaith ) )]"
													tooltip_visible = "[GetVariableSystem.Exists('show_designer_tooltips')]"
													tooltipwidget = { faith_tooltip_ruler_designer = { } }
													using = Button_Select_Faith
												}
											}
										}

										text_multi = {
											layoutpolicy_horizontal = expanding
											visible = "[CollapsibleReligionListGroup.AreChildrenVisible]"
											raw_text = "Faiths have tooltips with descriptions. Press X to show them."
										}
									}
								}
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_top = 15

						button_standard = {
							onclick = "[VariableSystem.Clear( 'faith_select_window_open' )]"
							text = "CANCEL"
							shortcut = "close_window"
							shortcut = go_back
						}
					}
				}

				# culture
				vbox = {
					name = "culture_selection"
					layoutpolicy_vertical = expanding
					visible = "[VariableSystem.Exists( 'culture_select_window_open' )]"

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
						on_start = "[RulerDesignerWindow.AccessCultureList.HideAllChildren]"
					}

					scrollbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						minimumsize = { 400 100% }

						datacontext = "[RulerDesignerWindow.AccessCultureList]"

						blockoverride "scrollbox_content"
						{
							vbox = {
								datamodel = "[CollapsibleCultureList.AccessItems]"
								layoutpolicy_horizontal = expanding

								item = {
									vbox = {
										name = "culture_group"
										layoutpolicy_horizontal = expanding
										spacing = 5

										datacontext = "[CollapsibleCultureListGroup.GetItem]"
										visible = "[Or(Not(GetVariableSystem.Exists('culture_selected')), CollapsibleCultureListGroup.AreChildrenVisible)]"

										hbox = {
											layoutpolicy_horizontal = expanding
											visible = "[GreaterThan_int32(GetDataModelSize(CulturePillar.GetCulturesWithPillar), '(int32)1')]"

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "[CulturePillar.GetNameNoTooltip], [GetDataModelSize(CulturePillar.GetCulturesWithPillar)] cultures,"
													align = left
												}
												visible = "[Not(CollapsibleCultureListGroup.AreChildrenVisible)]"
												onclick = "[CollapsibleCultureListGroup.ToggleChildrenVisible]"
												onclick = "[GetVariableSystem.Set('culture_selected', 'yes')]"
											}

											button_text = {
												layoutpolicy_horizontal = expanding
												blockoverride "text" {
													raw_text = "[CulturePillar.GetNameNoTooltip], Close, hotkey B."
													align = left
												}
												visible = "[CollapsibleCultureListGroup.AreChildrenVisible]"

												onclick = "[CollapsibleCultureListGroup.ToggleChildrenVisible]"
												onclick = "[GetVariableSystem.Clear('culture_selected')]"
												shortcut = go_back
											}
										}

										vbox = {
											name = "cultures"
											layoutpolicy_horizontal = expanding
											datamodel = "[CulturePillar.GetCulturesWithPillar]"
											# visible = "[CollapsibleCultureListGroup.AreChildrenVisible]"

											visible = "[Or(EqualTo_int32(GetDataModelSize(CulturePillar.GetCulturesWithPillar), '(int32)1'), CollapsibleCultureListGroup.AreChildrenVisible)]"

											item = {
												hbox = {
													layoutpolicy_horizontal = expanding
													datacontext = "[Culture.GetTemplate]"

													button_text = {
														visible = "[EqualTo_int32(GetDataModelSize(CulturePillar.GetCulturesWithPillar), '(int32)1')]"
														layoutpolicy_horizontal = expanding
														blockoverride "text" {
															raw_text = "[CultureTemplate.GetName], [CulturePillar.GetNameNoTooltip] culture."
														}
														enabled = "[Not( ObjectsEqual( CultureTemplate.Self, RulerDesignerWindow.GetCulture.GetTemplate ) )]"
														tooltip_visible = "[GetVariableSystem.Exists('show_designer_tooltips')]"
														tooltipwidget = {
															ruler_designer_culture_tooltip = {
															}
														}
														using = Button_Select_Culture
													}

													button_text = {
														visible = "[GreaterThan_int32(GetDataModelSize(CulturePillar.GetCulturesWithPillar), '(int32)1')]"
														layoutpolicy_horizontal = expanding
														blockoverride "text" {
															raw_text = "[CultureTemplate.GetName],"
														}
														enabled = "[Not( ObjectsEqual( CultureTemplate.Self, RulerDesignerWindow.GetCulture.GetTemplate ) )]"
														tooltip_visible = "[GetVariableSystem.Exists('show_designer_tooltips')]"
														tooltipwidget = {
															ruler_designer_culture_tooltip = {
															}
														}
														using = Button_Select_Culture
													}
												}
											}
										}

										text_multi = {
											layoutpolicy_horizontal = expanding
											raw_text = "Cultures have tooltips with descriptions. Press X to show them."
											visible = "[CollapsibleCultureListGroup.AreChildrenVisible]"
										}
									}
								}
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 0 10 }
						margin_bottom = 15

						button_standard = {
							text = "CANCEL"
							using = Button_Close_Select_Culture
							shortcut = "close_window"
							# shortcut = go_back
						}
					}
				}

				# basic
				vbox = {
					layoutpolicy_vertical = expanding

					vbox = {
						visible = "[Not( Or( Or( VariableSystem.Exists( 'trait_select_window_open' ), VariableSystem.Exists( 'faith_select_window_open') ), VariableSystem.Exists( 'culture_select_window_open')))]"

						vbox = {
							visible = "[Not(GetVariableSystem.Exists('hidden_basic_designer'))]"
							layoutpolicy_vertical = expanding

							flowcontainer = {
								layoutpolicy_horizontal = expanding

								text_single = {
									raw_text = "RULER_DESIGNER"
								}
								text_single = {
									raw_text = ". Click any attribute to change it."
									layoutpolicy_horizontal = expanding
								}
							}

							flowcontainer = {
								layoutpolicy_horizontal = expanding
								visible = "[Not( StringIsEmpty( RulerDesignerWindow.GetFirstName ) )]"


								text_single = {
									text = "RULER_DESIGNER_FULL_NAME"
								}

								dot = { }
							}

							button_primary_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									text = "RULER_DESIGNER_FINALIZE"

								}
								blockoverride "disabled" {
									visible = "[Not(RulerDesignerWindow.CanFinalize)]"
								}
								blockoverride "hotkey" {
									visible = "[RulerDesignerWindow.CanFinalize]"
								}

								enabled = "[RulerDesignerWindow.CanFinalize]"
								tooltip = "[RulerDesignerWindow.GetFinalizeTooltip]"
								# tooltip_visible = "[Not(RulerDesignerWindow.CanFinalize)]"

								onclick = "[RulerDesignerWindow.FinalizeOverwrite]"
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								text_multi = {
									autoresize = yes
									max_width = 400
									visible = "[Not(RulerDesignerWindow.CanFinalize)]"
									raw_text = "[RulerDesignerWindow.GetFinalizeTooltip]"
								}

								expand = {}
							}


							# sets the width
							widget = {
								size = { 520 0 }
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									text = "RULER_DESIGNER_SEX"
									align = left
								}
								blockoverride "extra" {
									margin_left = 3
									text_single = {
										raw_text = ":"
									}


									text_single = {
										raw_text = "RULER_DESIGNER_SET_IS_FEMALE"
									}
								}
								blockoverride "dot" {
								}
								onclick = "[RulerDesignerWindow.SetIsFemale( '(bool)no' )]"
								onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
								visible = "[RulerDesignerWindow.IsFemale]"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									text = "RULER_DESIGNER_SEX"
									align = left
								}
								blockoverride "extra" {
									margin_left = 3
									text_single = {
										raw_text = ":"
									}


									text_single = {
										raw_text = "RULER_DESIGNER_SET_IS_MALE"
									}
								}
								blockoverride "dot" {
								}
								onclick = "[RulerDesignerWindow.SetIsFemale( '(bool)yes' )]"
								onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
								visible = "[Not(RulerDesignerWindow.IsFemale)]"
							}

							flowcontainer = {
								layoutpolicy_horizontal = expanding
								direction = vertical
								visible = "[Not(RulerDesignerWindow.CanChangeSexuality)]"

								text_single = {
									raw_text = "Can't choose sexual orientation,"
								}

								flowcontainer = {
									layoutpolicy_horizontal = expanding

									text_single = {
										text = "RULER_DESIGNER_SEXUALITY_NOT_AVAILABLE_INFO"
									}

									dot = { }
								}
							}

							button_text = {
								visible = "[RulerDesignerWindow.CanChangeSexuality]"
								onclick = "[GetVariableSystem.Set('designer_filter', 'orientation')]"
								layoutpolicy_horizontal = expanding

								blockoverride "text" {
									raw_text = "Sexual orientation:"
									align = left
								}

								blockoverride "extra" {


									text_single = {
										raw_text = "Random"
										visible = "[RulerDesignerWindow.HasSexuality( 'none' )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_RANDOM
									}

									text_single = {
										raw_text = "RULER_DESIGNER_SET_SEXUALITY_HETEROSEXUAL"
										visible = "[RulerDesignerWindow.HasSexuality( 'heterosexual' )]"
									}

									text_single = {
										raw_text = "RULER_DESIGNER_SET_SEXUALITY_HOMOSEXUAL"
										visible = "[RulerDesignerWindow.HasSexuality( 'homosexual' )]"
									}

									text_single = {
										raw_text = "RULER_DESIGNER_SET_SEXUALITY_BISEXUAL"
										visible = "[RulerDesignerWindow.HasSexuality( 'bisexual' )]"
									}

									text_single = {
										raw_text = "RULER_DESIGNER_SET_SEXUALITY_ASEXUAL"
										visible = "[RulerDesignerWindow.HasSexuality( 'asexual' )]"
									}

									dot = { }
								}
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								datacontext = "[RulerDesignerWindow.GetFaith]"
								blockoverride "text" {
									raw_text = "Faith: [Faith.GetNameNoTooltip], [Faith.GetReligion.GetNameNoTooltip]."
									align = left
								}
								onclick = "[VariableSystem.Toggle( 'faith_select_window_open' )]"
								onclick = "[VariableSystem.Clear( 'culture_select_window_open' )]"
								onclick = "[GetVariableSystem.Clear('religion_selected')]"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								datacontext = "[RulerDesignerWindow.GetCulture]"
								blockoverride "text" {
									raw_text = "Culture:"
									align = left
								}
								blockoverride "extra" {
									text_single = {
										raw_text = "[Culture.GetNameNoTooltip], [Culture.GetHeritage.GetNameNoTooltip]."
										tooltipwidget = {
											ruler_designer_culture_tooltip = { }
										}
									}
								}
								onclick = "[VariableSystem.Toggle( 'culture_select_window_open' )]"
								using = Button_Close_Select_Faith
								onclick = "[GetVariableSystem.Clear('culture_selected')]"
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "RULER_DESIGNER_FIRST_NAME_LABEL"
								}

								editbox_standard = {
									layoutpolicy_horizontal = expanding

									blockoverride "editbox_properties"
									{
										raw_text = "[RulerDesignerWindow.GetFirstName]"
										ontextedited = "[RulerDesignerWindow.OnEditFirstName]"
										maxcharacters = 40

										text_single = {
											margin_left = 5
											raw_text = "Enter name here. Press Tab to finish."
											visible = "[StringIsEmpty(RulerDesignerWindow.GetFirstName)]"
										}
									}
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									name = "random_faith_name"
									datacontext = "[RulerDesignerWindow.GetFaith]"
									visible = "[Faith.HasReservedNames( RulerDesignerWindow.IsFemale )]"
									blockoverride "text" {
										raw_text = "Pick a random [Faith.GetAdjectiveNoTooltip] name."
									}
									onclick = "[RulerDesignerWindow.RandomizeFirstNameFaith]"
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									name = "random_culture_name"
									datacontext = "[RulerDesignerWindow.GetCulture]"
									blockoverride "text" {
										raw_text = "Pick a random [Culture.GetNameNoTooltip] name."
									}
									onclick = "[RulerDesignerWindow.RandomizeFirstNameCulture]"
								}
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[dynasty] [RulerDesignerWindow.GetDynastyName]."
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Change name and motto."
								}
								datacontext = "[RulerDesignerWindow.GetDynastyCoatOfArms]"
								onclick = "[RulerDesignerWindow.OpenDynastyCoatOfArmsDesigner]"
								onclick = "[VariableSystem.Set( 'coat_of_arms_customization_open', 'dynasty' )]"
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								datacontext = "[RulerDesignerWindow.GetCharacterToOverwrite]"
								datacontext = "[Character.GetPrimaryTitle]"
								datacontext = "[RulerDesignerWindow.GetTitleCoatOfArms]"
								visible = "[Not( RulerDesignerWindow.IsDesigningLandless )]"

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "[realm]: [Localize('RULER_DESIGNER_TITLE_NAME')]."
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									blockoverride "text" {
										raw_text = "[Localize('RULER_DESIGNER_CUSTOMIZE_TITLE')]"
									}
									onclick = "[RulerDesignerWindow.OpenTitleCoatOfArmsDesigner]"
									onclick = "[VariableSystem.Set( 'coat_of_arms_customization_open', 'title' )]"
								}

								button_text = {
									layoutpolicy_horizontal = expanding
									blockoverride "text" {
										raw_text = "[Localize('RULER_DESIGNER_RESET_TITLE')]."
									}
									onclick = "[RulerDesignerWindow.ResetTitleToHistorical]"
								}
							}
						}
					}

					button_text = {
						min_width = 520
						visible = "[Not(GetVariableSystem.Exists('trait_select_window_open'))]"
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "[Select_CString(GetVariableSystem.Exists('hidden_basic_designer'), 'Show', 'Hide')] naming section, hotkey 1."
						}
						onclick = "[GetVariableSystem.Toggle('hidden_basic_designer')]"
						shortcut = speed_1
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						blockoverride "text" {
							raw_text = "[Select_CString(GetVariableSystem.Exists('hidden_traits_designer'), 'Show', 'Hide')] trait section, hotkey 3."
						}
						visible = "[GetVariableSystem.Exists('hidden_traits_designer')]"
						onclick = "[GetVariableSystem.Toggle('hidden_traits_designer')]"
						shortcut = speed_3
					}

					button_text = {
						layoutpolicy_horizontal = expanding
						shortcut = map_mode_6
						blockoverride "text" {
							text = "RULER_DESIGNER_CHANGE_PORTRAIT"
						}
						blockoverride "extra" {
							comma = {}
							text_single = {
								raw_text = "Control A."
							}
						}
						onclick = "[VariableSystem.Set( 'appearance_customization_window_open', 'ethnicity_selection' )]"
						onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'full_body' )]"
					}

					expand = { }
				}

				# traits
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_left = 5
					visible = "[Not(GetVariableSystem.Exists('trait_select_window_open'))]"

					vbox = {
						visible = "[Not(Or(Or( VariableSystem.Exists( 'culture_select_window_open' ), VariableSystem.Exists( 'faith_select_window_open' ) ), Or(GetVariableSystem.Exists('trait_select_window_open'), GetVariableSystem.Exists('hidden_traits_designer'))))]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding


							text_single = {
								layoutpolicy_horizontal = expanding
								datacontext = "[RulerDesignerWindow.GetPointsUsedBreakdown]"
								name = "current"
								raw_text = "[ValueBreakdown.GetValue] [Localize('RULER_DESIGNER_POINTS_LABEL')] used. 400 is maximum for achievements."

								tooltip_visible = "[ValueBreakdown.HasTooltip]"
								tooltipwidget = {
									widget_value_breakdown_tooltip = { }
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not(GetVariableSystem.Exists('hidden_age_designer'))]"
								button_text = {
									enabled = no
									layoutpolicy_horizontal = expanding
									blockoverride "text" {
										raw_text = "[Localize('RULER_DESIGNER_AGE_LABEL')]"
										align = left
									}
									blockoverride "extra" {

										text_single = {
											raw_text = "RULER_DESIGNER_AGE"
										}

										text_single = {
											raw_text = ","
										}



										text_single = {
											raw_text = "RULER_DESIGNER_BIRTH_YEAR"
										}

										dot = { }
									}
								}

								vbox = {
									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding

										scrollbar_age = {
											name = "scrollbar_age"
										}

										expand = { }
									}

									hbox = {
										layoutpolicy_horizontal = expanding

										scrollbar_age_10 = {
										}

										expand = { }
									}

									expand = { }
								}

								button_text = {
									enabled = no
									layoutpolicy_horizontal = expanding
									blockoverride "text" {
										raw_text = "[Localize('RULER_DESIGNER_WEIGHT_LABEL')]"
										align = left
									}
									blockoverride "extra" {

										text_single = {
											raw_text = "[Add_int32(RulerDesignerWindow.GetWeight, '(int32)100')]% of the norm."
										}
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding

									scrollbar_weight = { }

									expand = { }
								}
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "[Select_CString(GetVariableSystem.Exists('hidden_age_designer'), 'Show', 'Hide')] age, hotkey 2."
								}
								onclick = "[GetVariableSystem.Toggle('hidden_age_designer')]"
								shortcut = speed_2
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[Localize('RULER_DESIGNER_TRAITS_LABEL')]. Click to replace, right-click to remove."
							}

							scrollbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								blockoverride "scrollbox_margins" {
									margin_top = 20
									margin_left = 5
								}

								blockoverride "scrollbox_content" {
									vbox = {
										name = "traits"
										layoutpolicy_horizontal = expanding
										datacontext = "[GetNullCharacter]"

										vbox = {
											layoutpolicy_horizontal = expanding

											hbox_trait_slot = {
												name = "education_trait"
												datacontext = "[RulerDesignerWindow.AccessEducationTraitSlot]"
												layoutpolicy_horizontal = expanding

												blockoverride "plus_button"
												{
													hbox = {
														layoutpolicy_horizontal = expanding

														button_text = {
															blockoverride "text" {
																raw_text = "[Trait.GetNameNoTooltip(GetPlayer)]"
															}
															datacontext = "[TraitSlot.GetTrait]"
															datacontext = "[RulerDesignerWindow.GetFaith]"


															onclick = "[TraitSlot.StartEditing]"
															onclick = "[VariableSystem.Toggle( 'trait_select_window_replace' )]"
															onclick = "[VariableSystem.Set( 'trait_select_window_open', 'education' )]"
															visible = "[RulerDesignerWindow.IsAdult]"
														}

														expand = { }
													}

													text_single = {
														layoutpolicy_horizontal = expanding
														raw_text = "None. [Localize('RULER_DESIGNER_NO_EDUCATION_TOOLTIP')]."
														# tooltip =
														visible = "[Not(RulerDesignerWindow.IsAdult)]"
													}

													blockoverride "button_trait_onclick"
													{
														onclick = "[VariableSystem.Set( 'trait_select_window_open', 'education' )]"
													}
												}

												blockoverride "trait_list" { }

												blockoverride "trait_slots_header_text"
												{
													text = RULER_DESIGNER_EDUCATION_TRAIT_LABEL
												}
											}

											hbox_trait_slot = {
												name = "personality_traits"
												datacontext = "[RulerDesignerWindow.AccessPersonalityTraitSlots]"
												layoutpolicy_horizontal = expanding

												blockoverride "trait_slots_header_text"
												{
													text = RULER_DESIGNER_PERSONALITY_TRAIT_LABEL
												}
												blockoverride "plus_onclick"
												{
													onclick = "[VariableSystem.Set( 'trait_select_window_open', 'personality' )]"
												}
											}

											hbox_trait_slot = {
												name = "other_traits"
												datacontext = "[RulerDesignerWindow.AccessOtherTraitSlots]"
												layoutpolicy_horizontal = expanding

												blockoverride "trait_slots_header_text"
												{
													text = RULER_DESIGNER_OTHER_TRAIT_LABEL
												}
												blockoverride "plus_onclick"
												{
													onclick = "[VariableSystem.Set( 'trait_select_window_open', 'other' )]"
												}
											}
										}
									}
								}
							}
						}

						button_text = {
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "[Select_CString(GetVariableSystem.Exists('hidden_traits_designer'), 'Show', 'Hide')] trait section, hotkey 3."
							}
							onclick = "[GetVariableSystem.Toggle('hidden_traits_designer')]"
							shortcut = speed_3
						}
					}
				}

				# portrait
				widget = {
					name = "middle_portrait"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[GetVariableSystem.Exists('ocr')]"

					# error_horse = { }

					icon = {
						parentanchor = bottom|hcenter
						position = { 0 20 }
						size = { 650 1000 }
						scale = "[ScaleToFitElementInside('(int32)650', '(int32)1100')]"
						texture = "[RulerDesignerWindow.GetPortrait( 'environment_body', 'camera_ruler_designer', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"

						state = {
							name = "ruler_designer_portrait_refresh"
							using = Animation_Refresh_FadeOut
						}

						state = {
							using = Animation_Refresh_FadeIn
						}
					}

					button_standard = {
						parentanchor = bottom|hcenter
						size = { 250 45 }
						position = { 0 -5 }
						text = "RULER_DESIGNER_CHANGE_PORTRAIT"
						onclick = "[VariableSystem.Set( 'appearance_customization_window_open', 'ethnicity_selection' )]"
						onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'full_body' )]"
					}
				}

				# trait selection
				vbox = {
					name = "trait_selection_panel"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					visible = "[VariableSystem.Exists( 'trait_select_window_open' )]"

					using =  Animation_Tab_Switch

					scrollbox = {
						name = "education_trait_selection_list"
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						minimumsize = { 400 100% }

						visible = "[VariableSystem.HasValue( 'trait_select_window_open', 'education' )]"

						blockoverride "scrollbox_content"
						{
							vbox_trait_selection_content = {
								layoutpolicy_horizontal = expanding
								datamodel = "[GetEducationTraits]"

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "[GetDataModelSize(GetEducationTraits)] education traits. Press X to [Select_CString(GetVariableSystem.Exists('show_designer_tooltips'), 'disable', 'enable')] tooltips."
								}

								button_text = {
									layoutpolicy_horizontal = expanding
								    blockoverride "text" {
								        raw_text = "[Select_CString(GetVariableSystem.Exists('hide_trait_cost'), 'Show', 'Hide')] cost."
								    }
									onclick = "[GetVariableSystem.Toggle('hide_trait_cost')]"
								}
							}
						}
					}

					scrollbox = {
						name = "personality_trait_selection_list"
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						minimumsize = { 400 100% }

						visible = "[VariableSystem.HasValue( 'trait_select_window_open', 'personality' )]"

						blockoverride "scrollbox_content"
						{
							vbox_trait_selection_content = {
								layoutpolicy_horizontal = expanding
								datamodel = "[GetPersonalityTraits]"

								text_single = {
									layoutpolicy_horizontal = expanding
									raw_text = "[GetDataModelSize(GetPersonalityTraits)] personality traits. Press X to [Select_CString(GetVariableSystem.Exists('show_designer_tooltips'), 'disable', 'enable')] tooltips."
								}

								button_text = {
									layoutpolicy_horizontal = expanding
								    blockoverride "text" {
								        raw_text = "[Select_CString(GetVariableSystem.Exists('hide_trait_cost'), 'Show', 'Hide')] cost."
								    }
									onclick = "[GetVariableSystem.Toggle('hide_trait_cost')]"
								}
							}
						}
					}

					scrollbox = {
						name = "other_trait_selection_list"
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						minimumsize = { 400 100% }

						visible = "[VariableSystem.HasValue( 'trait_select_window_open', 'other' )]"

						blockoverride "scrollbox_content"
						{

							text_single = {
								visible = "[Not(GetVariableSystem.Exists('filter_traits'))]"
								layoutpolicy_horizontal = expanding
								raw_text = "[GetDataModelSize(GetOtherRulerDesignerTraits)] other traits. Press X to [Select_CString(GetVariableSystem.Exists('show_designer_tooltips'), 'disable', 'enable')] tooltips."
							}

							button_text = {
								layoutpolicy_horizontal = expanding
							    blockoverride "text" {
									raw_text = "[Localize(GetVariableSystem.Get('filter_traits'))]'s. Z to reset." #TODO
							    }
								visible = "[GetVariableSystem.Exists('filter_traits')]"
								onclick = "[GetVariableSystem.Clear('filter_traits')]"
								onclick = "[GetVariableSystem.Clear('filter_traits_label')]"
								shortcut = decrease_speed_2
							}
							button_text = {
								layoutpolicy_horizontal = expanding
							    blockoverride "text" {
							        raw_text = "[Select_CString(GetVariableSystem.Exists('hide_trait_cost'), 'Show', 'Hide')] cost."
							    }
								onclick = "[GetVariableSystem.Toggle('hide_trait_cost')]"
							}

							hbox = {
							    layoutpolicy_horizontal = expanding
								alpha = "[Select_float(GetVariableSystem.Exists('filter_traits'), '(float)0', '(float)1' )]"

							    text_single = {
							    	raw_text = "Filter:"
									align = left
							    }

								button_text = {
								    blockoverride "text" {
								        raw_text = "1, Lifestyle."
								    }
									shortcut = speed_1
									onclick = "[GetVariableSystem.Set('filter_traits', 'game_concept_lifestyle_trait')]"
									onclick = "[GetVariableSystem.Set('filter_traits_label', 'diplomat')]"
								}

								button_text = {
								    blockoverride "text" {
								        raw_text = "2, Physical."
								    }
									shortcut = speed_2
									onclick = "[GetVariableSystem.Set('filter_traits', 'game_concept_physical_trait')]"
									onclick = "[GetVariableSystem.Set('filter_traits_label', 'strong')]"
								}

								button_text = {
								    blockoverride "text" {
								        raw_text = "3, Fame."
								    }
									shortcut = speed_3
									onclick = "[GetVariableSystem.Set('filter_traits', 'game_concept_fame_trait')]"
									onclick = "[GetVariableSystem.Set('filter_traits_label', 'deviant')]"
								}

								button_text = {
								    blockoverride "text" {
								        raw_text = "4, Health."
								    }
									shortcut = speed_4
									onclick = "[GetVariableSystem.Set('filter_traits', 'game_concept_health_trait')]"
									onclick = "[GetVariableSystem.Set('filter_traits_label', 'blind')]"
								}

								button_text = {
								    blockoverride "text" {
								        raw_text = "5, Commander."
								    }
									shortcut = speed_5
									onclick = "[GetVariableSystem.Set('filter_traits', 'game_concept_commander_trait')]"
									onclick = "[GetVariableSystem.Set('filter_traits_label', 'forder')]"
								}

								button_text = {
								    blockoverride "text" {
								        raw_text = "T, Ungrouped."
								    }
									shortcut = map_mode_2
									onclick = "[GetVariableSystem.Set('filter_traits', 'ungrouped trait')]"
									onclick = "[GetVariableSystem.Set('filter_traits_label', 'poet')]"
								}

								button_text = {
									# visible = "[Not(RulerDesignerWindow.IsAdult)]"
								    blockoverride "text" {
								        raw_text = "Y, Childhood."
								    }
									shortcut = map_mode_4
									onclick = "[GetVariableSystem.Set('filter_traits', 'game_concept_childhood_trait')]"
									onclick = "[GetVariableSystem.Set('filter_traits_label', 'pensive')]"
								}
							    expand = { }
							}

							dynamicgridbox = {
								datamodel = "[GetOtherRulerDesignerTraits]"
								datamodel_wrap = 35
								layoutpolicy_horizontal = expanding
								visible = "[Not(GetVariableSystem.Exists('filter_traits'))]"

								datacontext = "[GetNullCharacter]"

								item = {
									filter_trait = {
									}
								}
							}

							dynamicgridbox = {
								datamodel = "[GetOtherRulerDesignerTraits]"
								datamodel_wrap = 35
								layoutpolicy_horizontal = expanding
								visible = "[GetVariableSystem.Exists('filter_traits')]"

								datacontext = "[GetNullCharacter]"

								item = {
									filter_trait = {
										visible = "[EqualTo_string(Trait.GetTraitCategoryLabel, GetTrait(GetVariableSystem.Get('filter_traits_label')).GetTraitCategoryLabel)]"
									}
								}
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 0 10 }
						margin_bottom = 15

						button_text = {
							blockoverride "text" {
								text = "DONE"
							}
							onclick = "[RulerDesignerWindow.CancelTraitEditing]"
							onclick = "[RulerDesignerWindow.CancelTraitEditing]"
							onclick = "[VariableSystem.Clear( 'trait_select_window_open' )]"
							shortcut = "close_window"
						}
					}
				}

				# skills
				widget = {
					visible = "[Not(GetVariableSystem.Exists('trait_select_window_open'))]"
					layoutpolicy_vertical = expanding
					size = { 520 0 }

					vbox = {
						visible = "[Not( Or( VariableSystem.Exists( 'culture_select_window_open' ), VariableSystem.Exists( 'faith_select_window_open' ) ) )]"
						name = "right_panel"
						margin_left = 5
						margin_bottom = 10


						vbox = {
							visible = "[Not(GetVariableSystem.Exists('hidden_sills_designer'))]"
							layoutpolicy_horizontal = expanding
							name = "skill_buttons"
							datamodel = "[RulerDesignerWindow.AccessSkills]"
							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								text_single = {
									raw_text = "[Localize('RULER_DESIGNER_SKILLS_LABEL')]:"
								}

								hbox = {
									datamodel = "[RulerDesignerWindow.AccessSkills]"
									spacing = 3

									item = {
										text_single = {
											datacontext = "[RulerDesignerSkill.GetModifiedValueBreakdown]"
											raw_text = "[ValueBreakdown.GetValue],"
										}
									}
								}

								expand = { }
							}

							item = {
								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[Or(Not(GetVariableSystem.Exists('designer_skill')), GetVariableSystem.HasValue('designer_skill', RulerDesignerSkill.GetName))]"

									button = {
										layoutpolicy_horizontal = expanding
										onclick = "[GetVariableSystem.SetOrToggle('designer_skill', RulerDesignerSkill.GetName)]"

										hbox = {
											resizeparent = yes
											layoutpolicy_horizontal = expanding
											spacing = 3
											margin_left = 5

											text_single = {
												text = "[RulerDesignerSkill.GetName]"
											}

											hbox = {
												spacing = 3
												datacontext = "[RulerDesignerSkill.GetModifiedValueBreakdown]"
												tooltip_visible = "[ValueBreakdown.HasTooltip]"
												tooltipwidget = {
													widget_value_breakdown_tooltip = { }
												}
												text_single = {

													raw_text = "[ValueBreakdown.GetValue],"
												}

												text_single = {
													raw_text = "[RulerDesignerSkill.GetLevelDesc]."
												}
											}


											expand = { }
										}
									}


									vbox = {
										layoutpolicy_horizontal = expanding

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 3

											button_text = {
												blockoverride "text" {
													raw_text = "Increase."
												}
												onclick = "[RulerDesignerSkill.ChangeValue( '(int32)1' )]"
												enabled = "[LessThan_int32( RulerDesignerSkill.GetBaseValue, '(int32)100' )]"
											}

											button_text = {
												blockoverride "text" {
													raw_text = "Repeat 10 times."
												}
												onclick = "[RulerDesignerSkill.ChangeValue( '(int32)10' )]"
												enabled = "[LessThan_int32( RulerDesignerSkill.GetBaseValue, '(int32)100' )]"
											}

											expand = { }
										}

										hbox = {
										    layoutpolicy_horizontal = expanding
											spacing = 3

											button_text = {
												blockoverride "text" {
													raw_text = "Decrease."
												}
												onclick = "[RulerDesignerSkill.ChangeValue( '(int32)-1' )]"
												enabled = "[GreaterThan_int32( RulerDesignerSkill.GetBaseValue, '(int32)0' )]"
											}

											button_text = {
												blockoverride "text" {
													raw_text = "Repeat 10 times."
												}
												onclick = "[RulerDesignerSkill.ChangeValue( '(int32)-10' )]"
												enabled = "[GreaterThan_int32( RulerDesignerSkill.GetBaseValue, '(int32)0' )]"
											}

										    expand = { }
										}


										expand = { }
									}
								}
							}
						}

						button_text = {
							min_width = 520
							layoutpolicy_horizontal = expanding
							blockoverride "text" {
								raw_text = "[Select_CString(GetVariableSystem.Exists('hidden_sills_designer'), 'Show', 'Hide')] skills, hotkey 4."
							}
							onclick = "[GetVariableSystem.Toggle('hidden_sills_designer')]"
							shortcut = speed_4
						}

						vbox = {
							name = "family"
							layoutpolicy_horizontal = expanding
							visible = "[Not( RulerDesignerWindow.IsDesigningLandless )]"

							text_single = {
								layoutpolicy_horizontal = expanding
								raw_text = "[Localize('RULER_DESIGNER_FAMILY_LABEL')]."
							}


							vbox = {
								layoutpolicy_horizontal = expanding

								button_text = {
									layoutpolicy_horizontal = expanding
								    blockoverride "text" {
								        raw_text = "[AddTextIf(Not(RulerDesignerWindow.ShouldGenerateSpouse), 'Not')] Married. Click to toggle."
								    }
									onclick = "[RulerDesignerWindow.ToggleGenerateSpouse]"
									visible = "[RulerDesignerWindow.IsAdult]"
									# tooltip = "RULER_DESIGNER_GENERATE_SPOUSE_TOOLTIP"
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[RulerDesignerWindow.IsAdult]"

									vbox = {
										name = "generate_sons_amount"
										layoutpolicy_horizontal = expanding

										hbox = {
										    layoutpolicy_horizontal = expanding
											spacing = 3

											text_single = {
												text = "RULER_DESIGNER_GENERATED_SONS_LABEL"
											}

											text_single = {
												raw_text = "[RulerDesignerWindow.GetNumberOfGeneratedSons]."
											}
											tooltip = RULER_DESIGNER_GENERATED_SONS_TOOLTIP

										    expand = { }
										}

										vbox = {
											layoutpolicy_horizontal = expanding

											hbox = {
												layoutpolicy_horizontal = expanding

												button_text = {
													blockoverride "text" {
														raw_text = "Increase."
													}
													onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedSons( '(int32)1' )]"
													enabled = "[LessThan_int32( RulerDesignerWindow.GetNumberOfGeneratedChildren, RulerDesignerWindow.CalcMaxNumberOfGeneratedChildren )]"
												}

												button_text = {
													blockoverride "text" {
														raw_text = "Repeat 10 times."
													}
													onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedSons( '(int32)10' )]"
													enabled = "[LessThan_int32( RulerDesignerWindow.GetNumberOfGeneratedChildren, RulerDesignerWindow.CalcMaxNumberOfGeneratedChildren )]"
													visible = "[GreaterThan_int32( RulerDesignerWindow.CalcMaxNumberOfGeneratedChildren, '(int32)9' )]"
												}

												expand = { }
											}

											hbox = {
											    layoutpolicy_horizontal = expanding
												spacing = 3

												button_text = {
													blockoverride "text" {
														raw_text = "Decrease,"
													}
													onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedSons( '(int32)-1' )]"
													enabled = "[GreaterThan_int32( RulerDesignerWindow.GetNumberOfGeneratedSons, '(int32)0' )]"
												}

												button_text = {
													blockoverride "text" {
														raw_text = "Repeat 10 times,"
													}
													onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedSons( '(int32)-10' )]"
													enabled = "[GreaterThan_int32( RulerDesignerWindow.GetNumberOfGeneratedSons, '(int32)0' )]"
													visible = "[GreaterThan_int32( RulerDesignerWindow.GetNumberOfGeneratedSons, '(int32)9' )]"
												}

											    expand = { }
											}

										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										hbox = {
										    layoutpolicy_horizontal = expanding
											spacing = 3

											text_single = {
												text = "RULER_DESIGNER_GENERATED_DAUGHTERS_LABEL"
											}

											text_single = {
												raw_text = "[RulerDesignerWindow.GetNumberOfGeneratedDaughters]."
											}
											tooltip = RULER_DESIGNER_GENERATED_DAUGHTERS_TOOLTIP

										    expand = { }
										}

										vbox = {
											layoutpolicy_horizontal = expanding

											hbox = {
												layoutpolicy_horizontal = expanding

												button_text = {
													blockoverride "text" {
														raw_text = "Increase."
													}
													onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedDaughters( '(int32)1' )]"
													enabled = "[LessThan_int32( RulerDesignerWindow.GetNumberOfGeneratedChildren, RulerDesignerWindow.CalcMaxNumberOfGeneratedChildren )]"
												}

												button_text = {
													blockoverride "text" {
														raw_text = "Repeat 10 times."
													}
													onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedDaughters( '(int32)10' )]"
													enabled = "[LessThan_int32( RulerDesignerWindow.GetNumberOfGeneratedChildren, RulerDesignerWindow.CalcMaxNumberOfGeneratedChildren )]"
													visible = "[GreaterThan_int32( RulerDesignerWindow.CalcMaxNumberOfGeneratedChildren, '(int32)9' )]"
												}


												expand = { }
											}

											hbox = {
											    layoutpolicy_horizontal = expanding

												button_text = {
													blockoverride "text" {
														raw_text = "Decrease,"
													}
													onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedDaughters( '(int32)-1' )]"
													enabled = "[GreaterThan_int32( RulerDesignerWindow.GetNumberOfGeneratedDaughters, '(int32)0' )]"
												}

												button_text = {
													blockoverride "text" {
														raw_text = "Repeat 10 times,"
													}
													onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedDaughters( '(int32)-10' )]"
													enabled = "[GreaterThan_int32( RulerDesignerWindow.GetNumberOfGeneratedDaughters, '(int32)0' )]"
													visible = "[GreaterThan_int32( RulerDesignerWindow.GetNumberOfGeneratedDaughters, '(int32)9' )]"
												}

											    expand = { }
											}

										}
									}

									text_single = {
										layoutpolicy_horizontal = expanding
										raw_text = "You can have up to [RulerDesignerWindow.CalcMaxNumberOfGeneratedChildren] children at your age."
									}
								}

								text_multi = {
									layoutpolicy_horizontal = expanding
									visible = "[Not( RulerDesignerWindow.IsAdult )]"
									text = RULER_DESIGNER_ADULT_ONLY_WARNING
									autoresize = yes
									max_width = 400
								}

								expand = { }
							}
						}

						expand = { }

						#controls

						vbox = {
							layoutpolicy_horizontal = expanding

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "[Localize('RULER_DESIGNER_SAVE_RULER')] ruler, Control S."
								}
								enabled = "[RulerDesignerWindow.CanOpenSaveRulerWindow]"
								tooltip = "[RulerDesignerWindow.CanOpenSaveRulerWindowTooltip]"
								blockoverride "disabled" {
									visible = "[Not(RulerDesignerWindow.CanOpenSaveRulerWindow)]"
								}

								shortcut = map_mode_14
								onclick = "[RulerDesignerWindow.OpenSaveRulerWindow]"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "[Localize('RULER_DESIGNER_LOAD_RULER')] ruler, Control W."
								}
								blockoverride "disabled" {
									visible = "[Not(RulerDesignerWindow.CanOpenLoadRulerWindow)]"
								}

								enabled = "[RulerDesignerWindow.CanOpenLoadRulerWindow]"
								tooltip = "[RulerDesignerWindow.CanOpenLoadRulerWindowTooltip]"
								shortcut = map_mode_7

								onclick = "[RulerDesignerWindow.OpenLoadRulerWindow]"
							}

							button_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									raw_text = "Go back, Escape."
								}
								onclick = "[RulerDesignerWindow.Close]"
								shortcut = "close_window"
							}
						}

						achievements_availability_box = {
							blockoverride "achievements_enabled_visible" {
								visible = "[LessThanOrEqualTo_int32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) )]"
							}
							blockoverride "achievements_disabled_visible" {
								visible = "[GreaterThan_int32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) )]"
							}
						}
					}
				}
			}

			hbox = {
				name = "appearance_customizer_view"
				visible = "[VariableSystem.Exists( 'appearance_customization_window_open' )]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				# margin = { 20 20 }

				using =  Animation_Tab_Switch

				widget = {
					layoutpolicy_vertical = expanding
					size = { 480 0 }

					vbox = {
						name = "ethnicity_panel"
						visible = "[VariableSystem.HasValue( 'appearance_customization_window_open', 'ethnicity_selection' )]"
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding

						margin_right = 15

						using = Animation_ShowHide_Quick

						text_label_left = {
							layoutpolicy_horizontal = expanding
							text = RULDER_DESIGNER_ETHNICITY_LABEL
							using = Font_Size_Medium
						}

						vbox = {
							name = "new_appearance"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							text_single = {
								layoutpolicy_horizontal = expanding
								visible = "[Is('selected_ethnicity')]"
								raw_text = "last selected: [Get('selected_ethnicity')]."
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								text_multi = {
									name = "override_portrait_warning"
									autoresize = yes
									max_width = 470
									text = RULER_DESIGNER_OVERRIDE_PORTRAIT
								}

								expand = {}
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								text_multi = {
									text = RULER_DESIGNER_ETHNICITY_INFO
									autoresize = yes
									max_width = 470
								}

								expand = { }
							}

							scrollbox = {
								name = "ethinicity_list"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								blockoverride "scrollbox_content"
								{
									vbox = {
										datamodel = "[GetEthnicities]"
										layoutpolicy_horizontal = expanding

										item = {
											button_text = {
												layoutpolicy_horizontal = expanding
												visible = "[And( Ethnicity.IsVisible, ObjectsEqual( Ethnicity.GetPortraitGroup, RulerDesignerWindow.GetEthnicity.GetPortraitGroup ) )]"

												blockoverride "text" {
													raw_text = "[Ethnicity.GetName],"
												}
												onclick = "[RulerDesignerWindow.SetEthnicity( Ethnicity.Self )]"
												onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
												onclick = "[Set('selected_ethnicity', Ethnicity.GetName)]"
											}
										}
									}
								}
							}
						}

						expand = { }

						vbox = {
							layoutpolicy_horizontal = expanding
							button_text = {
								layoutpolicy_horizontal = expanding
								shortcut = close_window
								blockoverride "text" {
									raw_text = "Go back, Escape."
								}

								onclick = "[VariableSystem.Clear( 'appearance_customization_window_open' )]"
								onclick = "[VariableSystem.Clear( 'appearance_customization_portrait_view' )]"
							}


							button_primary_text = {
								layoutpolicy_horizontal = expanding
								blockoverride "text" {
									text = "RULER_DESIGNER_CUSTOMIZE_APPEARANCE_FURTHER"
								}
								visible = "[Not(VariableSystem.HasValue( 'appearance_customization_window_open', 'main_customizer' ))]"
								onclick = "[VariableSystem.Set( 'appearance_customization_window_open', 'main_customizer' )]"
								onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'body' )]"
							}
						}
					}

					vbox = {
						name = "main_customizer"
						visible = "[VariableSystem.HasValue( 'appearance_customization_window_open', 'main_customizer' )]"
						spacing = 10
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding

						margin_right = 15

						using = Animation_ShowHide_Quick

						button_text = {
							layoutpolicy_horizontal = expanding
							onclick = "[Toggle('anatomy_selection')]"
							shortcut = map_mode_1
							blockoverride "text" {
								raw_text = "Categories"
							}
							blockoverride "extra" {
								comma = {}
								text_single = {
									raw_text = "[Collapse('anatomy_selection')] E."
								}
							}
						}


						vbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Isnt('anatomy_selection')]"

							flowcontainer = {
								layoutpolicy_horizontal = expanding
								direction = vertical
								ignoreinvisible = yes

								datamodel = "[RulerDesignerWindow.GetGeneGroupCategories]"

								item = {
									flowcontainer = {
										direction = vertical
										ignoreinvisible = yes

										text_single  = {
											text = "[Localize( Concatenate( 'RULER_DESIGNER_CATEGORY_' , RulerDesignerGeneGroupCategory.GetCategory ) )]"
										}

										flowcontainer = {
											datamodel = "[RulerDesignerGeneGroupCategory.GetGroups]"
											direction = vertical
											ignoreinvisible = yes

											item = {
												button_text = {
													blockoverride "text" {
														text = "[Localize( Concatenate( 'RULER_DESIGNER_GROUP_' , RulerDesignerGeneGroup.GetGroup ) )]"
													}
													onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', RulerDesignerGeneGroup.GetGroup )]"
													onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', RulerDesignerGeneGroup.GetCamera )]"
													down = "[VariableSystem.HasValue( 'appearance_customization_side_tab_open', RulerDesignerGeneGroup.GetGroup )]"
												}
											}
										}
									}
								}
							}

							button_checked_text = {
								layoutpolicy_horizontal = expanding
								name = "toggle_show_accessories"

								visible = "[RulerDesignerWindow.HasAccessoryGenes]"
								onclick = "[RulerDesignerWindow.ToggleShowAccessories]"
								tooltip = "RULER_DESIGNER_TOGGLE_SHOW_ACCESSORIES_TOOLTIP"

								blockoverride "visible"
								{
									visible = "[RulerDesignerWindow.ShouldShowAcesssories]"
								}

								blockoverride "text"
								{
									text = "RULER_DESIGNER_TOGGLE_SHOW_ACCESSORIES_LABEL"
								}
							}

							#expand = { }
						}

						widget = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							size = { 520 0 }

							hbox = {
								layoutpolicy_vertical = expanding
								visible = "[VariableSystem.HasValue( 'appearance_customization_window_open', 'main_customizer' )]"

								divider_light = {
									layoutpolicy_vertical = expanding
								}

								vbox = {
									name = "gene_editor"
									spacing = 10
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding
									margin_left = 15

									using = Animation_ShowHide_Quick

									hbox = {
										layoutpolicy_horizontal = expanding

										text_label_left = {
											layoutpolicy_horizontal = expanding
											text = "[Localize( Concatenate( 'RULER_DESIGNER_GROUP_' , VariableSystem.Get( 'appearance_customization_side_tab_open' ) ) )]"
											using = Font_Size_Medium
										}
									}

									scrollbox = {
										name = "gene_sliders"
										layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding
										minimumsize = { 200 0 }

										blockoverride "scrollbox_background"
										{
										}

										blockoverride "scrollbox_background_fade"
										{
										}

										blockoverride "scrollbox_content"
										{
											vbox = {
												layoutpolicy_horizontal = expanding


												text_single = {
													layoutpolicy_horizontal = expanding
													raw_text = "Select a property to focus on it."
												}

												text_single = {
													layoutpolicy_horizontal = expanding
													raw_text = "Values are between 0 and 255."
												}

												vbox = {
													margin_top = 10
													datamodel = "[RulerDesignerWindow.GetGenesByGroup( VariableSystem.Get( 'appearance_customization_side_tab_open' ) )]"
													layoutpolicy_horizontal = expanding

													item = {
														vbox = {
															name = "gene_entry"
															layoutpolicy_horizontal = expanding
															visible = "[And(Or(Isnt('gene'), Has('gene', GeneCategory.GetName)), Not(GeneCategory.IsType( 'color' )))]"

															vbox = {
																layoutpolicy_horizontal = expanding
																layoutpolicy_vertical = expanding

																button_text = {
																	layoutpolicy_horizontal = expanding
																	onclick = "[SetOrToggle('gene', GeneCategory.GetName)]"
																	blockoverride "text" {
																		raw_text = "[GeneCategory.GetName],"
																	}
																	blockoverride "extra" {
																		text_single = {
																			visible = "[RulerDesignerWindow.ShowMorphGeneSlider( GeneCategory.Self )]"
																			raw_text = "[RulerDesignerWindow.GetMorphGeneValue( GeneCategory.Self )|0]."
																		}
																	}
																}

																expand = { }
															}

															vbox = {
																layoutpolicy_vertical = expanding
																layoutpolicy_horizontal = expanding

																visible = "[GeneCategory.IsType( 'morph' )]"

																hbox = {
																	layoutpolicy_horizontal = expanding

																	scrollbar_morph_gene = {
																		name = "scrollbar_morph_gene"
																		visible = "[RulerDesignerWindow.ShowMorphGeneSlider( GeneCategory.Self )]"
																	}

																	expand = {}
																}

																text_single = {
																	name = "morph_gene_female_only"
																	text = RULER_DESIGNER_GENE_ONLY_WOMEN
																	visible = "[RulerDesignerWindow.IsOnlyVisibleFemale( GeneCategory.Self )]"
																	layoutpolicy_horizontal = expanding
																}

																expand = { }

																vbox_morph_gene_template_buttons = {
																	layoutpolicy_horizontal = expanding
																	name = "gene_templates"
																	visible = "[GreaterThan_int32( GetDataModelSize( RulerDesignerWindow.GetMorphTemplatesByGene( GeneCategory.Self ) ), '(int32)1' )]"
																	datamodel = "[RulerDesignerWindow.GetMorphTemplatesByGene( GeneCategory.Self )]"
																}
															}

															vbox_accessory_gene_buttons = {
																name = "vbox_accessory_gene_buttons"
																visible = "[GeneCategory.IsType( 'accessory' )]"
																datamodel = "[RulerDesignerWindow.GetAccessoryModifiers( GeneCategory.Self )]"
																layoutpolicy_horizontal = expanding
															}

															vbox_color_picker = {
																name = "vbox_color_picker"
																datacontext = "[RulerDesignerWindow.AccessColorPicker( GeneCategory.Self )]"
																visible = "[GeneCategory.IsType( 'color' )]"
															}

															expand = { }
														}
													}
												}
											}
										}
									}

									expand = { }
								}
							}
						}


						vbox = {
							layoutpolicy_horizontal = expanding

							button = {
								layoutpolicy_horizontal = expanding
								shortcut = close_window
								# blockoverride "text" {
								# 	raw_text = "Go back, escape"
								# }
								onclick = "[VariableSystem.Set( 'appearance_customization_window_open', 'ethnicity_selection' )]"
								onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'full_body' )]"
								onclick = "[VariableSystem.Clear( 'appearance_customization_side_tab_open' )]"
								onclick = "[RulerDesignerWindow.SetShowAccessories]"
							}

							button = {
								shortcut = close_window
								visible = "[Is('gene')]"
								onclick = "[Clear('gene')]"
							}

							button_primary_text = {
								layoutpolicy_horizontal = expanding
								visible = "[VariableSystem.HasValue( 'appearance_customization_window_open', 'main_customizer' )]"
								blockoverride "text" {
									text = RULER_DESIGNER_CUSTOMIZE_APPEARANCE_FINISH
								}
								onclick = "[VariableSystem.Clear( 'appearance_customization_side_tab_open' )]"
								onclick = "[VariableSystem.Clear( 'appearance_customization_window_open' )]"
								onclick = "[VariableSystem.Clear( 'appearance_customization_portrait_view' )]"
								onclick = "[RulerDesignerWindow.SetShowAccessories]"
							}
						}

						expand = {}
					}
				}


				widget = {
					name = "portrait_view"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					widget = {
						visible = "[VariableSystem.HasValue( 'appearance_customization_portrait_view', 'face' )]"
						size = { 100% 100% }

						using = Animation_ShowHide_Standard

						icon = {
							parentanchor = center
							position = { 130 -80 }
							size = { 500 700 }
							texture = "[RulerDesignerWindow.GetPortrait( 'environment_head', 'camera_ruler_designer_head_profile', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"

							using = Animation_ShowHide_Quick

							state = {
								name = "ruler_designer_portrait_refresh"
								using = Animation_Refresh_FadeOut
							}

							state = {
								using = Animation_Refresh_FadeIn
							}


							modify_texture = {
								texture = "gfx/portraits/portrait_mask_event_letter.dds"
								blend_mode = alphamultiply
							}

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_horizontal_thick.dds"
								blend_mode = alphamultiply
							}
						}

						icon = {
							parentanchor = center
							position = { -130 -80 }
							size = { 500 700 }
							texture = "[RulerDesignerWindow.GetPortrait( 'environment_head', 'camera_head', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"

							using = Animation_ShowHide_Quick

							state = {
								name = "ruler_designer_portrait_refresh"
								using = Animation_Refresh_FadeOut
							}

							state = {
								using = Animation_Refresh_FadeIn
							}

							modify_texture = {
								texture = "gfx/portraits/portrait_mask_event_letter.dds"
								blend_mode = alphamultiply
							}
						}
					}

					icon = {
						visible = "[VariableSystem.HasValue( 'appearance_customization_portrait_view', 'full_body' )]"
						parentanchor = bottom|hcenter
						position = { 0 20 }
						size = { 650 1000 }
						scale = "[ScaleToFitElementInside('(int32)650', '(int32)1100')]"
						texture = "[RulerDesignerWindow.GetPortrait( 'environment_body', 'camera_ruler_designer', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"

						using = Animation_ShowHide_Standard

						state = {
							name = "ruler_designer_portrait_refresh"
							using = Animation_Refresh_FadeOut
						}

						state = {
							using = Animation_Refresh_FadeIn
						}
					}

					widget = {
						parentanchor = bottom|hcenter
						position = { 0 -20 }

						vbox = {
							set_parent_size_to_minimum = yes

							button_standard = {
								size = { 250 32 }
								onclick = "[RulerDesignerWindow.RandomizeEthnicityDnaFromCurrent]"
								onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
								visible = "[Not(VariableSystem.HasValue( 'appearance_customization_window_open', 'ethnicity_selection' ))]"
								text = "RULER_DESIGNER_REGENERATE_PORTRAIT"

								button_randomize = {
									parentanchor = vcenter
									position = { 7 0 }
								}
							}

							vbox = {
								name = "copy_paste_dna"
								margin_top = 10

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 20

									text_single = {
										layoutpolicy_horizontal = expanding

										text = "RULER_DESIGNER_SAVE_DNA_TO_CLIPBOARD"
									}

									button_copy = {
										onclick = "[RulerDesignerWindow.SaveDnaToClipboard]"
									}

									tooltip = RULER_DESIGNER_SAVE_DNA_TO_CLIPBOARD_TOOLTIP
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 20

									text_single = {
										layoutpolicy_horizontal = expanding
										text = "RULER_DESIGNER_LOAD_DNA_FROM_CLIPBOARD"
									}

									button_paste = {
										onclick = "[RulerDesignerWindow.LoadDnaFromClipboard]"
										onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
									}

									tooltip = RULER_DESIGNER_LOAD_DNA_FROM_CLIPBOARD_TOOLTIP
								}
							}
						}
					}
				}


			}

			vbox = {
				name = "coat_of_arms_page"

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 10 }

				visible = "[VariableSystem.Exists( 'coat_of_arms_customization_open' )]"

				using = Animation_ShowHide_Quick

				state = {
					name = _show
					using = CoatOfArmsDesignerAnimationResetState
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					vbox_dynasty_edit_fields = {
						name = "dynasty_detail_input"
						visible = "[VariableSystem.HasValue( 'coat_of_arms_customization_open', 'dynasty' )]"
						layoutpolicy_vertical = expanding
						margin_right = 10
						margin_left = 10
					}

					vbox_title_edit_fields = {
						name = "title_detail_input"
						visible = "[VariableSystem.HasValue( 'coat_of_arms_customization_open', 'title' )]"
						layoutpolicy_vertical = expanding
					}

					expand = {
						visible = "[Not(GetVariableSystem.Exists('ocr'))]"
					}


					vbox_coa_designer = {
						datacontext = "[RulerDesignerWindow.GetCoatOfArmsDesigner]"
						visible = "[GetVariableSystem.Exists('ocr')]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
					}
				}

				hbox = {
					name = "finish_buttons"
					layoutpolicy_horizontal = expanding
					margin_top = 20
					margin_bottom = 15

					background = {
						using = Background_Area
						margin = { 15 0 }
					}

					button_text = {
						name = "title_finish_button"
						visible = "[VariableSystem.HasValue( 'coat_of_arms_customization_open', 'title' )]"
						blockoverride "text" {
							raw_text = "[Localize('FINISH')], hotkey Escape."
						}
						shortcut = close_window

						# tooltip = "RULER_DESIGNER_FINISH_CUSTOMIZE_TITLE"
						onclick = "[RulerDesignerWindow.FinishTitleCoatOfArmsDesigner]"
						onclick = "[VariableSystem.Clear( 'coat_of_arms_customization_open' )]"

						size = { 210 40 }
					}

					button_text = {
						name = "dynasty_finish_button"
						visible = "[VariableSystem.HasValue( 'coat_of_arms_customization_open', 'dynasty' )]"

						shortcut = close_window

						blockoverride "text" {
							raw_text = "[Localize('FINISH')], hotkey Escape."
						}

						# tooltip = "RULER_DESIGNER_FINISH_CUSTOMIZE_DYNASTY"
						onclick = "[RulerDesignerWindow.FinishDynastyCoatOfArmsDesigner]"
						onclick = "[VariableSystem.Clear( 'coat_of_arms_customization_open' )]"

						size = { 210 40 }
					}
				}
			}
		}
	}

	ruler_designer_old = {
		using = vanilla
	}
	designer_filters = { }
}

types ruler_designer_types
{
	type achievements_availability_box = vbox {
		name = "achievements_availability_box"
		layoutpolicy_horizontal = expanding

		# achievements_enabled_icon = {
		# 	block "achievements_enabled_visible" { }
		# }
		# achievements_disabled_icon = {
		# 	block "achievements_disabled_visible" { }
		# }

		vbox = {
			layoutpolicy_horizontal = expanding
			block "achievements_title_visible" { }

			text_single = {
				layoutpolicy_horizontal = expanding
				text = RULER_DESIGNER_ACHIEVEMENTS_LABEL
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = RULER_DESIGNER_ACHIEVEMENTS_AVAILABLE
				block "achievements_enabled_visible" { }
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = RULER_DESIGNER_ACHIEVEMENTS_NOT_AVAILABLE
				block "achievements_disabled_visible" { }
			}
		}

		hbox = {
		    layoutpolicy_horizontal = expanding

			text_multi = {
				name = "achievements_info"
				text = RULER_DESIGNER_ACHIEVEMENTS_INFO
				block "achievements_info_visible" { }
				autoresize = yes
				max_width = 300
			}

		    expand = { }
		}

	}

	# type vbox_header_with_line = vbox
	# {
	# 	vbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		spacing = 3

	# 		hbox = {
	# 			layoutpolicy_horizontal = expanding
	# 			margin_left = 3

	# 			text_label_left = {
	# 				block "header_label" { }
	# 				layoutpolicy_horizontal = expanding
	# 				using = Font_Size_Medium
	# 				block "autoresize"
	# 				{
	# 					autoresize = no
	# 				}
	# 			}

	# 			expand = { }
	# 		}

	# 		divider_light = {
	# 			layoutpolicy_horizontal = expanding
	# 		}
	# 	}
	# }

	# type vbox_labelled_entry = vbox
	# {

	# 	vbox_header_with_line = {
	# 		layoutpolicy_horizontal = expanding
	# 	}

	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		margin_left = 5

	# 		hbox = {
	# 			layoutpolicy_horizontal = expanding
	# 			spacing = 10
	# 			margin_top = 3

	# 			block "tooltip_area"
	# 			{

	# 			}

	# 			block "item_icon_entry"
	# 			{
	# 				icon = {
	# 					name = "item_icon"
	# 					size = { 60 60 }
	# 					block "item_icon_texture"
	# 					{
	# 						texture = "gfx/interface/_debug/pink_square_chill.png"
	# 					}
	# 				}
	# 			}

	# 			vbox = {
	# 				layoutpolicy_horizontal = expanding

	# 				block "item_data"
	# 				{
	# 					hbox = {
	# 						layoutpolicy_horizontal = expanding

	# 						text_single = {
	# 							name = "item_name"
	# 							#layoutpolicy_horizontal = expanding
	# 							default_format = "#bold"
	# 							margin_right = 5
	# 							margin_bottom = 5
	# 							#autoresize = no

	# 							block "item_name_label"
	# 							{
	# 								raw_text = "#D FILL ME IN#!"
	# 							}
	# 						}

	# 						block "item_button"
	# 						{
	# 							button_replace = {
	# 								name = "reset"

	# 								block "reset_button" { }
	# 							}
	# 						}

	# 						expand = { }
	# 					}

	# 					text_single = {
	# 						name = "item_info"
	# 						layoutpolicy_horizontal = expanding
	# 						default_format = "#high"
	# 						autoresize = no
	# 						using = Font_Size_Medium
	# 						margin_bottom = 5

	# 						block "item_info_text"
	# 						{
	# 							raw_text = "#D FILL ME IN#!"
	# 						}
	# 					}
	# 				}
	# 			}
	# 		}

	# 		expand = { }

	# 		# block "item_button"
	# 		# {
	# 		# 	button_replace = {
	# 		# 		name = "reset"

	# 		# 		block "reset_button" { }
	# 		# 	}
	# 		# }
	# 	}
	# }

	type scrollbar_value_slider_text = scrollbar {
		direction = horizontal
		size = { 145 25 }
		step = 1

		track = {
			button = { }
		}

		slider = {
			button = { }
		}

		dec_button = {
			button = {
				size = { 70 30 }
				text_single = {
					position = { 1 1 }
					autoresize = yes
					raw_text = "Decrease,"
				}
			}
		}

		inc_button = {
			button = {
				size = { 70 30 }
				text_single = {
					position = { 1 1 }
					autoresize = yes
					raw_text = "Increase."
				}
			}
		}
	}

	type scrollbar_value_slider_text_10 = scrollbar {
		direction = horizontal
		size = { 195 25 }
		step = 10

		track = {
			button = { }
		}

		slider = {
			button = { }
		}

		dec_button = {
			button = {
				size = { 80 25 }
				text_single = {
					position = { 1 1 }
					autoresize = yes
					raw_text = "Decrease by 10,"
				}
			}
		}

		inc_button = {
			button = {
				size = { 80 25 }
				text_single = {
					position = { 1 1 }
					autoresize = yes
					raw_text = "Increase by 10."
				}
			}
		}
	}

	type scrollbar_value_slider = scrollbar
	{
		direction = horizontal
		size = { 270 20 }
		wheelstep = 0

		track = {
			using = SettingsValueTrack
		}

		slider = {
			using = SettingsValueSlider
		}

		dec_button = {
			using = SettingsValueDecButton
		}

		inc_button = {
			using = SettingsValueIncButton
		}
	}

	type scrollbar_age = scrollbar_value_slider_text
	{
		min = 0
		max = 120

		onvaluechanged = "[RulerDesignerWindow.OnAgeChange( PdxGuiWidget.Self )]"
		value = "[IntToFloat( RulerDesignerWindow.GetAge )]"
	}

	type scrollbar_age_10 = scrollbar_value_slider_text_10
	{
		min = 0
		max = 120

		onvaluechanged = "[RulerDesignerWindow.OnAgeChange( PdxGuiWidget.Self )]"
		value = "[IntToFloat( RulerDesignerWindow.GetAge )]"
	}

	type scrollbar_weight = scrollbar_value_slider_text_10
	{
		min = -100
		max = 100

		onvaluechanged = "[RulerDesignerWindow.OnWeightChange( PdxGuiWidget.Self )]"
		value = "[IntToFloat( RulerDesignerWindow.GetWeight )]"
	}

	type scrollbar_morph_gene = scrollbar {
		min = 0 # You should probably not change these min and max values, the code relies on them being uint8s
		max = 255
		name = "setting_value_scrollbar"
		direction = horizontal
		parentanchor = left
		size = { 145 25 }
		minimumsize = { -1 14 }
		value = "[RulerDesignerWindow.GetMorphGeneValue( GeneCategory.Self )]"
		onvaluechanged = "[RulerDesignerWindow.OnMorphGeneChange( GeneCategory.Self, PdxGuiWidget.Self )]"
		block "setting_value_scrollbar" { }
		step = 10

		track = {
			button = { }
		}

		slider = {
			button = { }
		}

		dec_button = {
			button = {
				size = { 70 30 }
				text_single = {
					position = { 1 1 }
					autoresize = yes
					raw_text = " Decrease,"
				}
			}
		}

		inc_button = {
			button = {
				size = { 70 30 }
				text_single = {
					position = { 1 1 }
					autoresize = yes
					raw_text = " Increase."
				}
			}
		}
	}


	type vbox_morph_gene_template_buttons = vbox
	{

		item = {
			button_text = {
				layoutpolicy_horizontal = expanding
				name = "template_button"
				blockoverride "selected" {
					visible = "[RulerDesignerWindow.HasMorphTemplateSelected( GeneTemplate.Self ) ]"
				}
				blockoverride "text" {
					text = "[GeneTemplate.GetName]"
				}
				onclick = "[RulerDesignerWindow.OnMorphTemplateSelected( GeneTemplate.Self ) ]"
			}
		}
	}

	type vbox_accessory_gene_buttons = vbox
	{
		item = {
			button_text = {
				layoutpolicy_horizontal = expanding
				name = "accessory_button"
				visible = "[RulerDesignerWindow.IsModifierValid( RulerDesignerPortraitModifier.Self )]"
				blockoverride "text" {

					raw_text = "[RulerDesignerPortraitModifier.GetName],"
				}
				blockoverride "selected" {
					visible = "[RulerDesignerWindow.IsPortraitModifierSelected( GeneCategory.Self, RulerDesignerPortraitModifier.Self )]"

				}

				onclick = "[RulerDesignerWindow.OnPortraitModifierSelected( GeneCategory.Self, RulerDesignerPortraitModifier.Self )]"
			}
		}
	}

	type vbox_color_picker = vbox
	{
		margin = { 10 10 }

		background = {
			using = Background_Area_Dark
			alpha = 0.7
		}

		background = {
			using = Background_Frame
			alpha = 0.7
			margin = { -5 -5 }
		}

		button_normal = {
			size = { 256 256 }
			onclick = "[ColorGenePicker.OnClick( PdxGuiWidget.Self )]"
			texture = "[ColorGenePicker.GetTexture]"
			effectname = "NoHighlight"

			icon = {
				name = "current"
				size = { 15 15 }
				texture = "gfx/interface/icons/color_picker.dds"
				position = "[Subtract_CVector2f( ColorGenePicker.GetPosition, '(CVector2f)8,8' )]"
			}
		}

		text_multi = {
			text = "[ColorGenePicker.GetPositionInfo]"
			default_format = "#D"
			autoresize = yes
			max_width = 250
			visible = "[InDebugMode]"
		}
	}

	type vbox_trait_selection_content = vbox
	{
		datacontext = "[GetNullCharacter]"

		item = {
			button_text = {
				layoutpolicy_horizontal = expanding
				datacontext = "[RulerDesignerWindow.GetFaith]"
		    blockoverride "text" {
					raw_text = "[Select_CString(GetVariableSystem.Exists('show_designer_tooltips'), Trait.GetName( Character.Self ), Trait.GetNameNoTooltip( Character.Self ))]"
					alwaystransparent = yes
		    }
				blockoverride "extra" {
					text_single = {
						raw_text = ", Disabled"
						visible = "[Not(RulerDesignerWindow.CanPickTrait( Trait.Self ))]"
					}
					text_single = {
						raw_text = ", cost [Trait.GetRulerDesignerCost|-],"
						visible = "[Not(GetVariableSystem.Exists('hide_trait_cost'))]"
					}
				}
				tooltip = "[RulerDesignerWindow.CanPickTraitDesc( Trait.Self )]"
				tooltip_visible = "[GetVariableSystem.Exists('show_designer_tooltips')]"
				visible = "[And( Trait.ShowInRulerDesigner, Not( RulerDesignerWindow.HasTrait( Trait.Self ) ) )]"
				enabled = "[RulerDesignerWindow.CanPickTrait( Trait.Self )]"
				onclick = "[RulerDesignerWindow.FinishTraitEditing( Trait.Self )]"
				onclick = "[VariableSystem.ClearIf( 'trait_select_window_open', VariableSystem.Exists( 'trait_select_window_replace' ) )]"
				onclick = "[VariableSystem.Clear( 'trait_select_window_replace' )]"
			}
		}
	}

	# type button_trait_slot_entry = button_trait
	# {
	# 	datacontext = "[TraitSlot.GetTrait]"
	#
	# 	blockoverride "faith_context"
	# 	{
	# 		datacontext = "[RulerDesignerWindow.GetFaith]"
	# 	}
	#
	# 	block "button_trait_onclick"
	# 	{
	# 	}
	#
	# 	onclick = "[TraitSlotArray.RemoveTrait( TraitSlot.Self )]"
	# 	button_ignore = none
	# }

	type button_trait_slot_entry = button_trait
	{
		datacontext = "[TraitSlot.GetTrait]"

		blockoverride "faith_context"
		{
			datacontext = "[RulerDesignerWindow.GetFaith]"
		}

		block "button_trait_onclick"
		{
		}

		state = {
			name = "_mouse_enter"
			on_start = "[PdxGuiWidget.FindChild('remove_icon').TriggerAnimation('show')]"
		}

		state = {
			name = "_mouse_leave"
			on_start = "[PdxGuiWidget.FindChild('remove_icon').TriggerAnimation('hide')]"
		}

		button_close = {
			name = "remove_icon"
			parentanchor = center
			alwaystransparent = yes
			alpha = 0

			state = {
				name = "show"
				using = Animation_FadeIn_Quick
				duration = 0.05
			}

			state = {
				name = "hide"
				alpha = 0
				using = Animation_FadeOut_Quick
			}

			background = {
				texture = "gfx/interface/component_masks/mask_fade_circle.dds"
				color = { 0.18 0.18 0.18 0.8 }
				margin = {20 20}
			}
		}

		onclick = "[TraitSlotArray.RemoveTrait( TraitSlot.Self )]"
		button_ignore = none
	}

	type hbox_trait_slot = vbox
	{
		layoutpolicy_horizontal = expanding

		text_single = {
			layoutpolicy_horizontal = expanding
			block "trait_slots_header_text"
			{
				raw_text = "FILL ME IN"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			block "trait_list"
			{
				vbox = {
					layoutpolicy_horizontal = expanding

					datamodel = "[TraitSlotArray.AccessSlots]"

					item = {
						hbox = {
						    layoutpolicy_horizontal = expanding

							button_text = {
								blockoverride "text" {
									raw_text = "[Trait.GetNameNoTooltip(GetPlayer)][AddTextIf(Faith.IsTraitVirtue( Trait.Self ), ' (virtue)')][AddTextIf(Faith.IsTraitSin( Trait.Self ), ' (sin)')]."
								}
								datacontext = "[TraitSlot.GetTrait]"
								datacontext = "[RulerDesignerWindow.GetFaith]"


								onclick = "[TraitSlot.StartEditing]"
								onclick = "[VariableSystem.Toggle( 'trait_select_window_replace' )]"
								onrightclick = "[TraitSlotArray.RemoveTrait( TraitSlot.Self )]"

								block "plus_onclick"
								{
									onclick = "[VariableSystem.Set( 'trait_select_window_open', 'education' )]"
								}
							}

							button_text = {
							    blockoverride "text" {
							        raw_text = "Remove."
							    }
								onclick = "[TraitSlotArray.RemoveTrait( TraitSlot.Self )]"
							}

						    expand = { }
						}
					}
				}
			}

			block "plus_button"
			{
				button_text = {
					layoutpolicy_horizontal = expanding
				    blockoverride "text" {
				        raw_text = "Add trait."
				    }
					onclick = "[TraitSlotArray.StartEditing]"
					block "plus_onclick"
					{
						onclick = "[VariableSystem.Set( 'trait_select_window_open', 'true' )]"
					}
				}
			}
		}

		expand = { }
	}

	type vbox_dynasty_edit_fields = vbox
	{
		minimumsize = { 350 -1 }
		spacing = 8

		vbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10


			blockoverride "header_label"
			{
				text = "CUSTOMIZATION_NAMING_HEADER"
			}

			editbox_standard_with_label = {
				name = "name_field"
				layoutpolicy_horizontal = expanding

				blockoverride "editbox_label"
				{
					text = "HOUSE_NAME_FIELD"
					layoutpolicy_horizontal = expanding
				}

				blockoverride "editbox_properties"
				{
					raw_text = "[RulerDesignerWindow.GetDynastyName]"
					ontextedited = "[RulerDesignerWindow.OnEditDynastyName]"
					maxcharacters = 40
					margin_left = 5

					text_single = {
						margin_left = 5
						raw_text = "Enter name here."
						visible = "[StringIsEmpty(RulerDesignerWindow.GetDynastyName)]"
					}
				}

				blockoverride "editbox_right_side"
				{
				}
			}

			button_text = {
				layoutpolicy_horizontal = expanding
			    blockoverride "text" {
			        raw_text = "Randomize name."
			    }
				onclick = "[RulerDesignerWindow.RandomizeDynastyName]"
			}

			editbox_standard_with_label = {
				name = "motto_field"
				layoutpolicy_horizontal = expanding
				minimumsize = { -1 140 }

				blockoverride "editbox_label"
				{
					text = "HOUSE_MOTTO_FIELD"
					layoutpolicy_horizontal = expanding
				}

				blockoverride "editbox_properties"
				{
					ontextedited = "[RulerDesignerWindow.OnEditHouseMotto]"
					using = house_motto_editbox_length

					text_single = {
						margin_left = 5
						raw_text = "Enter motto here."
						visible = "[Not( RulerDesignerWindow.HasHouseMotto )]"
					}

				}
			}

			flowcontainer = {
				layoutpolicy_horizontal = expanding
				visible = "[Not( RulerDesignerWindow.HasHouseMotto )]"

				text_single = {
					raw_text = RULER_DESIGNER_HOUSE_MOTTO_TT
				}

				dot = { }
			}
		}

		expand = { }
	}

	type vbox_title_edit_fields = vbox
	{
		minimumsize = { 300 -1 }
		spacing = 10

		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 5 }
			margin_bottom = 8
			spacing = 10

			flowcontainer = {
				layoutpolicy_horizontal = expanding

				text_single = {
					raw_text = "RULER_DESIGNER_TITLE_NAME"
				}

				dot = { }
			}

			blockoverride "header_label"
			{
				text = "CUSTOMIZATION_NAMING_HEADER"
			}

			editbox_standard_with_label = {
				layoutpolicy_horizontal = expanding

				blockoverride "editbox_label"
				{
					raw_text = "[Localize('TITLE_NAME_FIELD')]."
					layoutpolicy_horizontal = expanding
				}

				blockoverride "editbox_properties"
				{
					text = "[RulerDesignerWindow.GetTitleName]"
					ontextedited = "[RulerDesignerWindow.OnEditTitleName]"
					margin_left = 5

					text_single = {
						raw_text = "Enter name here."
						margin_left = 5
						visible = "[StringIsEmpty(RulerDesignerWindow.GetTitleName)]"
					}
				}
			}

			button_text = {
				onclick = "[RulerDesignerWindow.ToggleTitleUsesDefiniteForm]"
				layoutpolicy_horizontal = expanding
			    blockoverride "text" {
			        raw_text = "[Select_CString(RulerDesignerWindow.TitleUsesDefiniteForm, 'Enabled short style', 'Short style disabled')]. Click to toggle."
			    }
			}

			widget = {
				layoutpolicy_horizontal = expanding

				scissor = yes

				text_single = {
					raw_text = "TITLE_CUSTOMIZATION_DEFINITE_FORM_TOOLTIP"
					resizeparent = yes
					margin_top = -25
				}
			}

			editbox_standard_with_label = {
				layoutpolicy_horizontal = expanding

				blockoverride "editbox_label"
				{
					raw_text = "[Localize('TITLE_ADJECTIVE_FIELD')]."
					layoutpolicy_horizontal = expanding
				}

				blockoverride "editbox_properties"
				{
					text = "[RulerDesignerWindow.GetTitleAdjective]"
					ontextedited = "[RulerDesignerWindow.OnEditTitleAdjective]"
					margin_left = 5

					text_single = {
						raw_text = "Enter name here."
						margin_left = 5
						visible = "[StringIsEmpty(RulerDesignerWindow.GetTitleAdjective)]"
					}
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[GetVariableSystem.Exists('ocr')]"

			spacing = 10
			margin = { 10 5 }
			margin_bottom = 8

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "MAP_COLOR_HEADER"
			}

			colorpicker_simple = {
				layoutpolicy_horizontal = expanding
				color = "[RulerDesignerWindow.GetTitleMapColor]"
				oncoloredited = "[RulerDesignerWindow.SetTitleMapColor]"
			}
		}

		expand = { }
	}

	type filter_trait = button {
		button_text = {
			resizeparent = yes
			datacontext = "[RulerDesignerWindow.GetFaith]"
			blockoverride "text" {
				raw_text = "[Select_CString(GetVariableSystem.Exists('show_designer_tooltips'), Trait.GetName( Character.Self ), Trait.GetNameNoTooltip( Character.Self ))]"
				# tooltip_visible = "[]"
				align = left
				alwaystransparent = yes
			}
			# tooltip = "[RulerDesignerWindow.CanPickTraitDesc( Trait.Self )]"
			blockoverride "extra" {
				text_single = {
					raw_text = ", disabled"
					visible = "[Not(RulerDesignerWindow.CanPickTrait( Trait.Self ))]"
				}
				text_single = {
					raw_text = ", cost [Trait.GetRulerDesignerCost|-]"
					visible = "[Not(GetVariableSystem.Exists('hide_trait_cost'))]"
				}
				text_single = {
					raw_text = ","
				}
				margin_right = 100
			}

			visible = "[And( Trait.ShowInRulerDesigner, Not( RulerDesignerWindow.HasTrait( Trait.Self ) ) )]"

			enabled = "[RulerDesignerWindow.CanPickTrait( Trait.Self )]"
			onclick = "[RulerDesignerWindow.FinishTraitEditing( Trait.Self )]"
			onclick = "[VariableSystem.ClearIf( 'trait_select_window_open', VariableSystem.Exists( 'trait_select_window_replace' ) )]"
			onclick = "[VariableSystem.Clear( 'trait_select_window_replace' )]"
		}
	}
}

template Button_Close_Select_Faith
{
	onclick = "[VariableSystem.Clear( 'faith_select_window_open' )]"
}

template Button_Select_Faith
{
	onclick = "[RulerDesignerWindow.SetFaith( Faith.Self )]"
	using = Button_Close_Select_Faith
}

template Button_Close_Select_Culture
{
	onclick = "[VariableSystem.Clear( 'culture_select_window_open' )]"
}

template Button_Select_Culture
{
	onclick = "[RulerDesignerWindow.SetCulture( CultureTemplate.Self )]"
	using = Button_Close_Select_Culture
}

template ProgressBar_Achievements
{
	size = { 200 20 }
	value = "[CurrentAndMaxToProgressbarValueInt32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) )]"
}
