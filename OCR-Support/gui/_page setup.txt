
# 'template_page' = variable name, the first item on the current page, so 5, 10, 15, etc
# template_datamodel = our datamodel
# PageReset checks if the datamodel is smaller than our selected paged item
# XX_number = amount per page

# TODO!
# 1. replace template_page
# 2. replace template_datamodel
# 3. replace XX_number
# 4. make sguis for reset, next and prev

state = {
  name = "fix"
  on_finish = "[GetScriptedGui('reset_template_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
  trigger_when = "[PageReset('template_page', template_datamodel)]"
}
# reset if we paged too far and showing an item outside of the datamodel
#PageReset = LessThan_int32( GetDataModelSize( template_datamodel ), FixedPointToInt(GetPlayer.MakeScope.Var('template_page').GetValue ))

state = {
  name = "reset"
  on_finish = "[GetScriptedGui('reset_template_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
  trigger_on_create = yes
}

# if we have sorting, reset when changing it
onselectionchanged = "[GetScriptedGui('reset_template_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
onclick = "[GetScriptedGui('reset_template_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"


text_single = {
  layoutpolicy_horizontal = expanding
  raw_text = "Showing items from [PageStart('template_page')] to [PageEnd('template_page', '(CFixedPoint)XX_number', template_datamodel)],"
}
  # raw_text = "[IndexNumber]"

# PageStart = Add_CFixedPoint(GetPlayer.MakeScope.Var('template_page').GetValue, '(CFixedPoint)1')
# adding one since we count from 0 in script
# PageEnd = Min_CFixedPoint(Add_CFixedPoint(GetPlayer.MakeScope.Var( 'template_page' ).GetValue, MAX ), IntToFixedPoint(GetDataModelSize( template_datamodel )))
# adding amount per page, but limiting to the datamodel size if we're at the end


datamodel = "[PageModel('template_page', '(int32)XX_number', template_datamodel)]"

# INDEX
text_single = {
  block "page_index" {
    raw_text = "[Add_int32(PdxGuiWidget.GetIndexInDataModel, Add_int32(FixedPointToInt( GetPlayer.MakeScope.Var('template_page').GetValue ), '(int32)1'))]."
  }
}

vbox = {
  layoutpolicy_horizontal = expanding

  button_text = {
    layoutpolicy_horizontal = expanding
    blockoverride "text" {
      raw_text = "Previous XX_number, Z."
    }
    visible = "[GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('template_page').GetValue, '(CFixedPoint)0' )]"
    onclick = "[GetScriptedGui('prev_template_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
    shortcut = decrease_speed_2
    using = paper_flip_back_ocr
  }

  button_text = {
    layoutpolicy_horizontal = expanding
    blockoverride "text" {
      raw_text = "Next XX_number, X."
    }
    onclick = "[GetScriptedGui('next_template_page').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
    visible = "[GreaterThan_int32( Subtract_int32( GetDataModelSize( template_datamodel ), FixedPointToInt(GetPlayer.MakeScope.Var('template_page').GetValue )), '(int32)XX_number' )]"
    shortcut = increase_speed_2
    using = paper_flip_forward_ocr
  }
}

# 20 - 15 > 5
# only available until we reach the end
# datamodel size - current page = is it bigger than per page amount
