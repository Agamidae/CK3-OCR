
# macro = {
# 	description = "Sets the locale view's contest tab to specified variable"
# 	definition = "SetContestInfoTab(ViewVariable)"
# 	replace_with = "VariableSystem.Set( 'activity_contest_info_tab', ViewVariable ))"
# }
#
# macro = {
# 	description = "Clears the locale view's contest tab"
# 	definition = "ClearContestInfoTab"
# 	replace_with = "VariableSystem.Clear( 'activity_contest_info_tab' )"
# }

macro = {
	definition = "NoBarber"
	replace_with = "Not( IsGameViewOpen( 'barbershop' ) )"
}
macro = {
	definition = "vassals_per_page"
	replace_with = "'(CFixedPoint)5'"
}
macro = {
	definition = "Collapse(GUI)"
	replace_with = "Select_CString(Is(GUI), 'Collapsed,', 'Expanded,')"
}
macro = {
	definition = "CollapseIf(CONDITION)"
	replace_with = "Select_CString(CONDITION, 'Collapsed,', 'Expanded,')"
}
macro = {
	definition = "Click(GUI)"
	replace_with = "GetScriptedGui(GUI).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )"
}
macro = {
	definition = "Show(GUI)"
	replace_with = "GetScriptedGui(GUI).IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )"
}
macro = {
	definition = "ClickRoot(GUI, X)"
	replace_with = "GetScriptedGui(GUI).Execute( GuiScope.SetRoot( X.MakeScope ).End )"
}
macro = {
	definition = "ShowRoot(GUI, X)"
	replace_with = "GetScriptedGui(GUI).IsShown( GuiScope.SetRoot( X.MakeScope ).End )"
}
macro = {
	definition = "ClickAdd(GUI, X, Y)"
	replace_with = "GetScriptedGui(GUI).Execute( GuiScope.SetRoot( X.MakeScope ).AddScope( 'target', Y.MakeScope ).End )"
}
macro = {
	definition = "AddFlag(GUI, FLAG)"
	replace_with = "GetScriptedGui(GUI).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', MakeScopeFlag(FLAG) ).End )"
}
macro = {
	definition = "ShowAddFlag(GUI, FLAG)"
	replace_with = "GetScriptedGui(GUI).IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', MakeScopeFlag(FLAG) ).End )"
}
macro = {
	definition = "ShowAdd(GUI, X, Y)"
	replace_with = "GetScriptedGui(GUI).IsShown( GuiScope.SetRoot( X.MakeScope ).AddScope( 'target', Y.MakeScope ).End )"
}
macro = {
	description = "Shows the number in the datamodel + 1"
	definition = "IndexNumber"
	replace_with = "Add_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)1')"
}

macro = {
	description = "Is this the first item in the datamodel?"
	definition = "IsIndexFirst"
	replace_with = "EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)0')"
}

macro = {
	description = "Is this the x item in the datamodel?"
	definition = "IsIndex(IndexNum)"
	replace_with = "EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, IndexNum)"
}

macro = {
	definition = "DistanceToCapital(root, ORIGIN)"
	replace_with = "GuiScope.SetRoot(root).AddScope('origin', ORIGIN).ScriptValue('sq_origin_distance')"
}

macro = {
	definition = "MyCapital"
	replace_with = "GetPlayer.GetCapitalLocation"
}

macro = {
	definition = "MyLocation"
	replace_with = "GetPlayer.GetCurrentLocation"
}

macro = {
	definition = "DistanceTo(ORIGIN, PROVINCE)"
	replace_with = "Select_CFixedPoint( GreaterThan_CFixedPoint( GuiScope.SetRoot(PROVINCE.MakeScope).AddScope('origin', ORIGIN.MakeScope).ScriptValue('origin_distance'), '(CFixedPoint)25000'), Divide_CFixedPoint(GuiScope.SetRoot(PROVINCE.MakeScope).AddScope('origin', ORIGIN.MakeScope).ScriptValue('sq_origin_distance'), '(CFixedPoint)31'), GuiScope.SetRoot(PROVINCE.MakeScope).AddScope('origin', ORIGIN.MakeScope).ScriptValue('sq_origin_distance'))|0"
}

macro = {
	definition = "DaysTo(ORIGIN, PROVINCE)"
	replace_with = "Select_CString( GreaterThan_CFixedPoint( GuiScope.SetRoot(PROVINCE.MakeScope).AddScope('origin', ORIGIN.MakeScope).ScriptValue('origin_distance'), '(CFixedPoint)25000'), 'months', 'days')"
}

macro = {
	definition = "Direction(ORIGIN, PROVINCE)"
	replace_with = "GuiScope.SetRoot(ORIGIN.MakeScope).AddScope('second', PROVINCE.MakeScope).Custom('province_direction')"
}

macro = {
	definition = "Is(NAME)"
	replace_with = "GetVariableSystem.Exists(NAME)"
}
macro = {
	definition = "Toggle(NAME)"
	replace_with = "GetVariableSystem.Toggle(NAME)"
}
macro = {
	definition = "SetOrToggle(NAME, VALUE)"
	replace_with = "GetVariableSystem.SetOrToggle(NAME, VALUE)"
}
macro = {
	definition = "Set(NAME, VALUE)"
	replace_with = "GetVariableSystem.Set(NAME, VALUE)"
}
macro = {
	definition = "Has(NAME, VALUE)"
	replace_with = "GetVariableSystem.HasValue(NAME, VALUE)"
}
macro = {
	definition = "Hasnt(NAME, VALUE)"
	replace_with = "Not(GetVariableSystem.HasValue(NAME, VALUE))"
}
macro = {
	definition = "Clear(NAME)"
	replace_with = "GetVariableSystem.Clear(NAME)"
}
macro = {
	definition = "Get(NAME)"
	replace_with = "GetVariableSystem.Get(NAME)"
}
macro = {
	definition = "Isnt(NAME)"
	replace_with = "Not(GetVariableSystem.Exists(NAME))"
}
macro = {
	definition = "Sval(NAME, ROOT)"
	replace_with = "GuiScope.SetRoot(ROOT.MakeScope).ScriptValue(NAME)"
}
macro = {
	definition = "Val(NAME)"
	replace_with = "GetPlayer.MakeScope.ScriptValue(NAME)"
}

macro = {
	definition = "HasVal(NAME)"
	replace_with = "GreaterThan_CFixedPoint(GetPlayer.MakeScope.ScriptValue(NAME), '(CFixedPoint)0')"
}
macro = {
	definition = "Vals(NAME)"
	replace_with = "AddTextIf(GreaterThan_CFixedPoint(GetPlayer.MakeScope.ScriptValue(NAME), '(CFixedPoint)0'), 's')"
}
macro = {
	definition = "ValPlural(NAME, ENDING)"
	replace_with = "AddTextIf(GreaterThan_CFixedPoint(GetPlayer.MakeScope.ScriptValue(NAME), '(CFixedPoint)0'), ENDING)"
}
macro = {
	definition = "SEA"
	replace_with = "GetPlayer.MakeScope.Var('window_sea').GetProvince"
}

macro = {
	definition = "PageStart(PAGE)"
	replace_with = "Add_CFixedPoint(GetPlayer.MakeScope.Var(PAGE).GetValue, '(CFixedPoint)1')"
}

macro = {
	definition = "PageEnd(PAGE, MAX, DATAMODEL)"
	replace_with = "Min_CFixedPoint(Add_CFixedPoint(GetPlayer.MakeScope.Var( PAGE ).GetValue, MAX ), IntToFixedPoint(GetDataModelSize( DATAMODEL )))"
}

macro = {
	definition = "PageModel(PAGE, INT, DATAMODEL)"
	replace_with = "DataModelSubSpan(DATAMODEL, FixedPointToInt(GetPlayer.MakeScope.Var( PAGE ).GetValue), Min_int32(Subtract_int32(GetDataModelSize(DATAMODEL), FixedPointToInt(GetPlayer.MakeScope.Var( PAGE ).GetValue )), INT))"
}

macro = {
	definition = "PageReset(PAGE, DATAMODEL)"
	replace_with = "LessThan_int32( GetDataModelSize( DATAMODEL ), FixedPointToInt(GetPlayer.MakeScope.Var(PAGE).GetValue ))"
}
macro = {
	definition = "Round(VALUE)"
	replace_with = "GuiScope.SetRoot(MakeScopeValue( VALUE )).ScriptValue('round_me')"
}

macro = {
	definition = "CountItems"
	replace_with = "PdxGuiWidget.FindChild('items').CountVisibleChildren"
}

macro = {
	definition = "IsFeudalAGOT"
	replace_with = "Character.GetGovernment.IsType('feudal_government')"
}
