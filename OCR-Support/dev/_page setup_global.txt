
# 'interaction_list_page' = variable name, the first item on the current page, so 5, 10, 15, etc
# CharacterSelectionList.GetList = our datamodel
# PageReset checks if the datamodel is smaller than our selected paged item

# TODO!
# 1. replace interaction_list_page
# 2. replace CharacterSelectionList.GetList
# 3. make sguis for reset, next and prev

# reset if we paged too far and showing an item outside of the datamodel
#PageReset = LessThan_int32( GetDataModelSize( CharacterSelectionList.GetList ), FixedPointToInt(GetPlayer.MakeScope.Var('interaction_list_page').GetValue ))
# or if we're missing variables



# state = {
#   name = "reset"
#   on_finish = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
#   trigger_on_create = yes
# }

datacontext = "[GetPlayer.MakeScope.Var('interaction_list_page')]"
datacontext = "[GetScriptedGui('reset_interaction_list_page')]"

state = {
  name = "reset"
  on_finish = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
  trigger_when = "[Or(Or(PageReset('interaction_list_page', CharacterSelectionList.GetList), Not(GetPlayer.MakeScope.Var('global_page_size').IsSet)), Not(Scope.IsSet))]"
  trigger_on_create = yes
}

# if we have multiple lists
visible = "[Not(GreaterThan_int32(GetDataModelSize(CharacterSelectionList.GetList), '(int32)10'))]"
visible = "[GreaterThan_int32(GetDataModelSize(CharacterSelectionList.GetList), '(int32)10')]"


hbox = {
  spacing = 3

  text_single = {
    raw_text = "Showing from [PageStartGlobal] to [PageEndGlobal(CharacterSelectionList.GetList)],"
  }

  button_resize_page_ocr = {}
}

# if we have sorting, reset when changing it
using = sgui_selection
using = sgui_click


datamodel = "[PageModelGlobal(CharacterSelectionList.GetList)]"

page_buttons_ocr = {
  blockoverride "prev" {
    datacontext = "[GetScriptedGui('prev_interaction_list_page')]"
  }
  blockoverride "next" {
    datacontext = "[GetScriptedGui('next_interaction_list_page')]"
  }
}
